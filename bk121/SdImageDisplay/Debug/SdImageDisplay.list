
SdImageDisplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c4c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08008e1c  08008e1c  00009e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f90  08008f90  0000a078  2**0
                  CONTENTS
  4 .ARM          00000008  08008f90  08008f90  00009f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f98  08008f98  0000a078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f98  08008f98  00009f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008f9c  08008f9c  00009f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08008fa0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000095c  20000078  08009018  0000a078  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  200009d4  08009018  0000a9d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc40  00000000  00000000  0000a0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002903  00000000  00000000  00017ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  0001a5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000091a  00000000  00000000  0001b228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027f43  00000000  00000000  0001bb42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000122d4  00000000  00000000  00043a85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9bb5  00000000  00000000  00055d59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013f90e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003530  00000000  00000000  0013f954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00142e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008e04 	.word	0x08008e04

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08008e04 	.word	0x08008e04

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <FATFS_Init>:
FRESULT res; /* FatFs function common result code */
uint32_t byteswritten; /* File write/read counts */
uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
uint8_t rtext[_MAX_SS];/* File read buffer */

void FATFS_Init() {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 80005b4:	2200      	movs	r2, #0
 80005b6:	4905      	ldr	r1, [pc, #20]	@ (80005cc <FATFS_Init+0x1c>)
 80005b8:	4805      	ldr	r0, [pc, #20]	@ (80005d0 <FATFS_Init+0x20>)
 80005ba:	f006 fdf1 	bl	80071a0 <f_mount>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <FATFS_Init+0x18>
	{
		Error_Handler();
 80005c4:	f000 fdf4 	bl	80011b0 <Error_Handler>
	}
}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	200003ec 	.word	0x200003ec
 80005d0:	200003f0 	.word	0x200003f0

080005d4 <FATFS_Run>:

void FATFS_Run() {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af02      	add	r7, sp, #8

	if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
 80005da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80005de:	9300      	str	r3, [sp, #0]
 80005e0:	4b1e      	ldr	r3, [pc, #120]	@ (800065c <FATFS_Run+0x88>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	2107      	movs	r1, #7
 80005e6:	481e      	ldr	r0, [pc, #120]	@ (8000660 <FATFS_Run+0x8c>)
 80005e8:	f007 face 	bl	8007b88 <f_mkfs>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d002      	beq.n	80005f8 <FATFS_Run+0x24>
	{
		Error_Handler();
 80005f2:	f000 fddd 	bl	80011b0 <Error_Handler>
 80005f6:	e025      	b.n	8000644 <FATFS_Run+0x70>
	}
	else
	{
		//Open file for writing (Create)
		if(f_open(&SDFile, "test1.tmp", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 80005f8:	220a      	movs	r2, #10
 80005fa:	491a      	ldr	r1, [pc, #104]	@ (8000664 <FATFS_Run+0x90>)
 80005fc:	481a      	ldr	r0, [pc, #104]	@ (8000668 <FATFS_Run+0x94>)
 80005fe:	f006 fe15 	bl	800722c <f_open>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d002      	beq.n	800060e <FATFS_Run+0x3a>
		{
			Error_Handler();
 8000608:	f000 fdd2 	bl	80011b0 <Error_Handler>
 800060c:	e01a      	b.n	8000644 <FATFS_Run+0x70>
		}
		else
		{

			//Write to the text file
			res = f_write(&SDFile, wtext, strlen((char *)wtext), (void *)&byteswritten);
 800060e:	4817      	ldr	r0, [pc, #92]	@ (800066c <FATFS_Run+0x98>)
 8000610:	f7ff fdfe 	bl	8000210 <strlen>
 8000614:	4602      	mov	r2, r0
 8000616:	4b16      	ldr	r3, [pc, #88]	@ (8000670 <FATFS_Run+0x9c>)
 8000618:	4914      	ldr	r1, [pc, #80]	@ (800066c <FATFS_Run+0x98>)
 800061a:	4813      	ldr	r0, [pc, #76]	@ (8000668 <FATFS_Run+0x94>)
 800061c:	f006 ffc0 	bl	80075a0 <f_write>
 8000620:	4603      	mov	r3, r0
 8000622:	461a      	mov	r2, r3
 8000624:	4b13      	ldr	r3, [pc, #76]	@ (8000674 <FATFS_Run+0xa0>)
 8000626:	701a      	strb	r2, [r3, #0]
			if((byteswritten == 0) || (res != FR_OK))
 8000628:	4b11      	ldr	r3, [pc, #68]	@ (8000670 <FATFS_Run+0x9c>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d003      	beq.n	8000638 <FATFS_Run+0x64>
 8000630:	4b10      	ldr	r3, [pc, #64]	@ (8000674 <FATFS_Run+0xa0>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d002      	beq.n	800063e <FATFS_Run+0x6a>
			{
				Error_Handler();
 8000638:	f000 fdba 	bl	80011b0 <Error_Handler>
 800063c:	e002      	b.n	8000644 <FATFS_Run+0x70>
			}
			else
			{

				f_close(&SDFile);
 800063e:	480a      	ldr	r0, [pc, #40]	@ (8000668 <FATFS_Run+0x94>)
 8000640:	f007 f9a1 	bl	8007986 <f_close>
			}
		}
	}
	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 8000644:	2200      	movs	r2, #0
 8000646:	2100      	movs	r1, #0
 8000648:	480b      	ldr	r0, [pc, #44]	@ (8000678 <FATFS_Run+0xa4>)
 800064a:	f006 fda9 	bl	80071a0 <f_mount>
	FATFS_Scan("/");
 800064e:	480b      	ldr	r0, [pc, #44]	@ (800067c <FATFS_Run+0xa8>)
 8000650:	f000 f816 	bl	8000680 <FATFS_Scan>
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	2000009c 	.word	0x2000009c
 8000660:	200003ec 	.word	0x200003ec
 8000664:	08008e1c 	.word	0x08008e1c
 8000668:	20000620 	.word	0x20000620
 800066c:	20000000 	.word	0x20000000
 8000670:	20000098 	.word	0x20000098
 8000674:	20000094 	.word	0x20000094
 8000678:	200003f0 	.word	0x200003f0
 800067c:	08008e28 	.word	0x08008e28

08000680 <FATFS_Scan>:

void FATFS_Scan(char* path) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b0b6      	sub	sp, #216	@ 0xd8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	DIR dir;
	FILINFO fno;
    FRESULT res;
    char buffer[128];  // Buffer for file paths

    res = f_opendir(&dir, path);  // Open directory
 8000688:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800068c:	6879      	ldr	r1, [r7, #4]
 800068e:	4618      	mov	r0, r3
 8000690:	f007 f9a3 	bl	80079da <f_opendir>
 8000694:	4603      	mov	r3, r0
 8000696:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
    if (res == FR_OK) {
 800069a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d145      	bne.n	800072e <FATFS_Scan+0xae>
        while (1) {
            res = f_readdir(&dir, &fno);  // Read a directory item
 80006a2:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 80006a6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80006aa:	4611      	mov	r1, r2
 80006ac:	4618      	mov	r0, r3
 80006ae:	f007 fa2d 	bl	8007b0c <f_readdir>
 80006b2:	4603      	mov	r3, r0
 80006b4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
            if (res != FR_OK || fno.fname[0] == 0) {
 80006b8:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d131      	bne.n	8000724 <FATFS_Scan+0xa4>
 80006c0:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d02d      	beq.n	8000724 <FATFS_Scan+0xa4>
                break;  // No more items
            }

            if (fno.fattrib & AM_DIR) {
 80006c8:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 80006cc:	f003 0310 	and.w	r3, r3, #16
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d1e6      	bne.n	80006a2 <FATFS_Scan+0x22>
                // If it's a directory, you can optionally recurse into it
            } else {
                // Check if the file is an image
                if (strstr(fno.fname, ".bmp") || strstr(fno.fname, ".jpg") || strstr(fno.fname, ".jpeg")) {
 80006d4:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80006d8:	3309      	adds	r3, #9
 80006da:	4917      	ldr	r1, [pc, #92]	@ (8000738 <FATFS_Scan+0xb8>)
 80006dc:	4618      	mov	r0, r3
 80006de:	f007 ff03 	bl	80084e8 <strstr>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d113      	bne.n	8000710 <FATFS_Scan+0x90>
 80006e8:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80006ec:	3309      	adds	r3, #9
 80006ee:	4913      	ldr	r1, [pc, #76]	@ (800073c <FATFS_Scan+0xbc>)
 80006f0:	4618      	mov	r0, r3
 80006f2:	f007 fef9 	bl	80084e8 <strstr>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d109      	bne.n	8000710 <FATFS_Scan+0x90>
 80006fc:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000700:	3309      	adds	r3, #9
 8000702:	490f      	ldr	r1, [pc, #60]	@ (8000740 <FATFS_Scan+0xc0>)
 8000704:	4618      	mov	r0, r3
 8000706:	f007 feef 	bl	80084e8 <strstr>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d0c8      	beq.n	80006a2 <FATFS_Scan+0x22>
                    // Full file path (assuming 'path' is the current directory)
                    sprintf(buffer, "%s/%s", path, fno.fname);
 8000710:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000714:	3309      	adds	r3, #9
 8000716:	f107 000c 	add.w	r0, r7, #12
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	4909      	ldr	r1, [pc, #36]	@ (8000744 <FATFS_Scan+0xc4>)
 800071e:	f007 febb 	bl	8008498 <siprintf>
            res = f_readdir(&dir, &fno);  // Read a directory item
 8000722:	e7be      	b.n	80006a2 <FATFS_Scan+0x22>
                    // Read and display the image
//                    Read_Image_File(buffer);
                }
            }
        }
        f_closedir(&dir);  // Close the directory
 8000724:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000728:	4618      	mov	r0, r3
 800072a:	f007 f9c9 	bl	8007ac0 <f_closedir>
    }
}
 800072e:	bf00      	nop
 8000730:	37d8      	adds	r7, #216	@ 0xd8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	08008e2c 	.word	0x08008e2c
 800073c:	08008e34 	.word	0x08008e34
 8000740:	08008e3c 	.word	0x08008e3c
 8000744:	08008e44 	.word	0x08008e44

08000748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800074c:	f000 ff25 	bl	800159a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000750:	f000 f80e 	bl	8000770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000754:	f000 f8ba 	bl	80008cc <MX_GPIO_Init>
  MX_DMA_Init();
 8000758:	f000 f892 	bl	8000880 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 800075c:	f000 f870 	bl	8000840 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000760:	f004 fcd2 	bl	8005108 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  FATFS_Init();
 8000764:	f7ff ff24 	bl	80005b0 <FATFS_Init>
  FATFS_Run();
 8000768:	f7ff ff34 	bl	80005d4 <FATFS_Run>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800076c:	bf00      	nop
 800076e:	e7fd      	b.n	800076c <main+0x24>

08000770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b094      	sub	sp, #80	@ 0x50
 8000774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000776:	f107 0320 	add.w	r3, r7, #32
 800077a:	2230      	movs	r2, #48	@ 0x30
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f007 feaa 	bl	80084d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000794:	4b28      	ldr	r3, [pc, #160]	@ (8000838 <SystemClock_Config+0xc8>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000798:	4a27      	ldr	r2, [pc, #156]	@ (8000838 <SystemClock_Config+0xc8>)
 800079a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800079e:	6413      	str	r3, [r2, #64]	@ 0x40
 80007a0:	4b25      	ldr	r3, [pc, #148]	@ (8000838 <SystemClock_Config+0xc8>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007ac:	4b23      	ldr	r3, [pc, #140]	@ (800083c <SystemClock_Config+0xcc>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007b4:	4a21      	ldr	r2, [pc, #132]	@ (800083c <SystemClock_Config+0xcc>)
 80007b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007ba:	6013      	str	r3, [r2, #0]
 80007bc:	4b1f      	ldr	r3, [pc, #124]	@ (800083c <SystemClock_Config+0xcc>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c8:	2302      	movs	r3, #2
 80007ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007cc:	2301      	movs	r3, #1
 80007ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d0:	2310      	movs	r3, #16
 80007d2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d4:	2302      	movs	r3, #2
 80007d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007d8:	2300      	movs	r3, #0
 80007da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007dc:	2308      	movs	r3, #8
 80007de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80007e0:	2332      	movs	r3, #50	@ 0x32
 80007e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e4:	2302      	movs	r3, #2
 80007e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007e8:	2302      	movs	r3, #2
 80007ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ec:	f107 0320 	add.w	r3, r7, #32
 80007f0:	4618      	mov	r0, r3
 80007f2:	f001 fde9 	bl	80023c8 <HAL_RCC_OscConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80007fc:	f000 fcd8 	bl	80011b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000800:	230f      	movs	r3, #15
 8000802:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000804:	2302      	movs	r3, #2
 8000806:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800080c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000810:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000812:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000816:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	2101      	movs	r1, #1
 800081e:	4618      	mov	r0, r3
 8000820:	f002 f876 	bl	8002910 <HAL_RCC_ClockConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800082a:	f000 fcc1 	bl	80011b0 <Error_Handler>
  }
}
 800082e:	bf00      	nop
 8000830:	3750      	adds	r7, #80	@ 0x50
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800
 800083c:	40007000 	.word	0x40007000

08000840 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000844:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <MX_SDMMC1_SD_Init+0x38>)
 8000846:	4a0d      	ldr	r2, [pc, #52]	@ (800087c <MX_SDMMC1_SD_Init+0x3c>)
 8000848:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800084a:	4b0b      	ldr	r3, [pc, #44]	@ (8000878 <MX_SDMMC1_SD_Init+0x38>)
 800084c:	2200      	movs	r2, #0
 800084e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000850:	4b09      	ldr	r3, [pc, #36]	@ (8000878 <MX_SDMMC1_SD_Init+0x38>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000856:	4b08      	ldr	r3, [pc, #32]	@ (8000878 <MX_SDMMC1_SD_Init+0x38>)
 8000858:	2200      	movs	r2, #0
 800085a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800085c:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <MX_SDMMC1_SD_Init+0x38>)
 800085e:	2200      	movs	r2, #0
 8000860:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000862:	4b05      	ldr	r3, [pc, #20]	@ (8000878 <MX_SDMMC1_SD_Init+0x38>)
 8000864:	2200      	movs	r2, #0
 8000866:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000868:	4b03      	ldr	r3, [pc, #12]	@ (8000878 <MX_SDMMC1_SD_Init+0x38>)
 800086a:	2200      	movs	r2, #0
 800086c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	2000029c 	.word	0x2000029c
 800087c:	40012c00 	.word	0x40012c00

08000880 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000886:	4b10      	ldr	r3, [pc, #64]	@ (80008c8 <MX_DMA_Init+0x48>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a0f      	ldr	r2, [pc, #60]	@ (80008c8 <MX_DMA_Init+0x48>)
 800088c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b0d      	ldr	r3, [pc, #52]	@ (80008c8 <MX_DMA_Init+0x48>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2100      	movs	r1, #0
 80008a2:	203b      	movs	r0, #59	@ 0x3b
 80008a4:	f000 ffd5 	bl	8001852 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80008a8:	203b      	movs	r0, #59	@ 0x3b
 80008aa:	f000 ffee 	bl	800188a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2100      	movs	r1, #0
 80008b2:	2045      	movs	r0, #69	@ 0x45
 80008b4:	f000 ffcd 	bl	8001852 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80008b8:	2045      	movs	r0, #69	@ 0x45
 80008ba:	f000 ffe6 	bl	800188a <HAL_NVIC_EnableIRQ>

}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800

080008cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b090      	sub	sp, #64	@ 0x40
 80008d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008e2:	4bad      	ldr	r3, [pc, #692]	@ (8000b98 <MX_GPIO_Init+0x2cc>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4aac      	ldr	r2, [pc, #688]	@ (8000b98 <MX_GPIO_Init+0x2cc>)
 80008e8:	f043 0310 	orr.w	r3, r3, #16
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ee:	4baa      	ldr	r3, [pc, #680]	@ (8000b98 <MX_GPIO_Init+0x2cc>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	f003 0310 	and.w	r3, r3, #16
 80008f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80008f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008fa:	4ba7      	ldr	r3, [pc, #668]	@ (8000b98 <MX_GPIO_Init+0x2cc>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	4aa6      	ldr	r2, [pc, #664]	@ (8000b98 <MX_GPIO_Init+0x2cc>)
 8000900:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000904:	6313      	str	r3, [r2, #48]	@ 0x30
 8000906:	4ba4      	ldr	r3, [pc, #656]	@ (8000b98 <MX_GPIO_Init+0x2cc>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800090e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000912:	4ba1      	ldr	r3, [pc, #644]	@ (8000b98 <MX_GPIO_Init+0x2cc>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	4aa0      	ldr	r2, [pc, #640]	@ (8000b98 <MX_GPIO_Init+0x2cc>)
 8000918:	f043 0302 	orr.w	r3, r3, #2
 800091c:	6313      	str	r3, [r2, #48]	@ 0x30
 800091e:	4b9e      	ldr	r3, [pc, #632]	@ (8000b98 <MX_GPIO_Init+0x2cc>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	f003 0302 	and.w	r3, r3, #2
 8000926:	623b      	str	r3, [r7, #32]
 8000928:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800092a:	4b9b      	ldr	r3, [pc, #620]	@ (8000b98 <MX_GPIO_Init+0x2cc>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	4a9a      	ldr	r2, [pc, #616]	@ (8000b98 <MX_GPIO_Init+0x2cc>)
 8000930:	f043 0308 	orr.w	r3, r3, #8
 8000934:	6313      	str	r3, [r2, #48]	@ 0x30
 8000936:	4b98      	ldr	r3, [pc, #608]	@ (8000b98 <MX_GPIO_Init+0x2cc>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	f003 0308 	and.w	r3, r3, #8
 800093e:	61fb      	str	r3, [r7, #28]
 8000940:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000942:	4b95      	ldr	r3, [pc, #596]	@ (8000b98 <MX_GPIO_Init+0x2cc>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	4a94      	ldr	r2, [pc, #592]	@ (8000b98 <MX_GPIO_Init+0x2cc>)
 8000948:	f043 0304 	orr.w	r3, r3, #4
 800094c:	6313      	str	r3, [r2, #48]	@ 0x30
 800094e:	4b92      	ldr	r3, [pc, #584]	@ (8000b98 <MX_GPIO_Init+0x2cc>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	f003 0304 	and.w	r3, r3, #4
 8000956:	61bb      	str	r3, [r7, #24]
 8000958:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	4b8f      	ldr	r3, [pc, #572]	@ (8000b98 <MX_GPIO_Init+0x2cc>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	4a8e      	ldr	r2, [pc, #568]	@ (8000b98 <MX_GPIO_Init+0x2cc>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6313      	str	r3, [r2, #48]	@ 0x30
 8000966:	4b8c      	ldr	r3, [pc, #560]	@ (8000b98 <MX_GPIO_Init+0x2cc>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	617b      	str	r3, [r7, #20]
 8000970:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000972:	4b89      	ldr	r3, [pc, #548]	@ (8000b98 <MX_GPIO_Init+0x2cc>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	4a88      	ldr	r2, [pc, #544]	@ (8000b98 <MX_GPIO_Init+0x2cc>)
 8000978:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800097c:	6313      	str	r3, [r2, #48]	@ 0x30
 800097e:	4b86      	ldr	r3, [pc, #536]	@ (8000b98 <MX_GPIO_Init+0x2cc>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800098a:	4b83      	ldr	r3, [pc, #524]	@ (8000b98 <MX_GPIO_Init+0x2cc>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	4a82      	ldr	r2, [pc, #520]	@ (8000b98 <MX_GPIO_Init+0x2cc>)
 8000990:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000994:	6313      	str	r3, [r2, #48]	@ 0x30
 8000996:	4b80      	ldr	r3, [pc, #512]	@ (8000b98 <MX_GPIO_Init+0x2cc>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80009a2:	4b7d      	ldr	r3, [pc, #500]	@ (8000b98 <MX_GPIO_Init+0x2cc>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	4a7c      	ldr	r2, [pc, #496]	@ (8000b98 <MX_GPIO_Init+0x2cc>)
 80009a8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ae:	4b7a      	ldr	r3, [pc, #488]	@ (8000b98 <MX_GPIO_Init+0x2cc>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ba:	4b77      	ldr	r3, [pc, #476]	@ (8000b98 <MX_GPIO_Init+0x2cc>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	4a76      	ldr	r2, [pc, #472]	@ (8000b98 <MX_GPIO_Init+0x2cc>)
 80009c0:	f043 0320 	orr.w	r3, r3, #32
 80009c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c6:	4b74      	ldr	r3, [pc, #464]	@ (8000b98 <MX_GPIO_Init+0x2cc>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	f003 0320 	and.w	r3, r3, #32
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009d2:	4b71      	ldr	r3, [pc, #452]	@ (8000b98 <MX_GPIO_Init+0x2cc>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	4a70      	ldr	r2, [pc, #448]	@ (8000b98 <MX_GPIO_Init+0x2cc>)
 80009d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009de:	4b6e      	ldr	r3, [pc, #440]	@ (8000b98 <MX_GPIO_Init+0x2cc>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009ea:	2201      	movs	r2, #1
 80009ec:	2120      	movs	r1, #32
 80009ee:	486b      	ldr	r0, [pc, #428]	@ (8000b9c <MX_GPIO_Init+0x2d0>)
 80009f0:	f001 fcd0 	bl	8002394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	f241 010c 	movw	r1, #4108	@ 0x100c
 80009fa:	4869      	ldr	r0, [pc, #420]	@ (8000ba0 <MX_GPIO_Init+0x2d4>)
 80009fc:	f001 fcca 	bl	8002394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2108      	movs	r1, #8
 8000a04:	4867      	ldr	r0, [pc, #412]	@ (8000ba4 <MX_GPIO_Init+0x2d8>)
 8000a06:	f001 fcc5 	bl	8002394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a10:	4865      	ldr	r0, [pc, #404]	@ (8000ba8 <MX_GPIO_Init+0x2dc>)
 8000a12:	f001 fcbf 	bl	8002394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	21c8      	movs	r1, #200	@ 0xc8
 8000a1a:	4864      	ldr	r0, [pc, #400]	@ (8000bac <MX_GPIO_Init+0x2e0>)
 8000a1c:	f001 fcba 	bl	8002394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8000a20:	2310      	movs	r3, #16
 8000a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a24:	2302      	movs	r3, #2
 8000a26:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a30:	230e      	movs	r3, #14
 8000a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000a34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a38:	4619      	mov	r1, r3
 8000a3a:	485d      	ldr	r0, [pc, #372]	@ (8000bb0 <MX_GPIO_Init+0x2e4>)
 8000a3c:	f001 fae6 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000a40:	2308      	movs	r3, #8
 8000a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a44:	2300      	movs	r3, #0
 8000a46:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a4c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a50:	4619      	mov	r1, r3
 8000a52:	4857      	ldr	r0, [pc, #348]	@ (8000bb0 <MX_GPIO_Init+0x2e4>)
 8000a54:	f001 fada 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000a58:	2304      	movs	r3, #4
 8000a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a64:	2303      	movs	r3, #3
 8000a66:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000a68:	2309      	movs	r3, #9
 8000a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000a6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a70:	4619      	mov	r1, r3
 8000a72:	484f      	ldr	r0, [pc, #316]	@ (8000bb0 <MX_GPIO_Init+0x2e4>)
 8000a74:	f001 faca 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000a78:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8000a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a86:	2303      	movs	r3, #3
 8000a88:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a8a:	230b      	movs	r3, #11
 8000a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a8e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a92:	4619      	mov	r1, r3
 8000a94:	4845      	ldr	r0, [pc, #276]	@ (8000bac <MX_GPIO_Init+0x2e0>)
 8000a96:	f001 fab9 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000a9a:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000aac:	230c      	movs	r3, #12
 8000aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ab0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	483e      	ldr	r0, [pc, #248]	@ (8000bb0 <MX_GPIO_Init+0x2e4>)
 8000ab8:	f001 faa8 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000abc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ac2:	2312      	movs	r3, #18
 8000ac4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2300      	movs	r3, #0
 8000acc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ace:	2304      	movs	r3, #4
 8000ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4836      	ldr	r0, [pc, #216]	@ (8000bb4 <MX_GPIO_Init+0x2e8>)
 8000ada:	f001 fa97 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000ade:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8000ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aec:	2303      	movs	r3, #3
 8000aee:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000af0:	230a      	movs	r3, #10
 8000af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000af8:	4619      	mov	r1, r3
 8000afa:	482e      	ldr	r0, [pc, #184]	@ (8000bb4 <MX_GPIO_Init+0x2e8>)
 8000afc:	f001 fa86 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000b00:	2310      	movs	r3, #16
 8000b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b10:	2302      	movs	r3, #2
 8000b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4826      	ldr	r0, [pc, #152]	@ (8000bb4 <MX_GPIO_Init+0x2e8>)
 8000b1c:	f001 fa76 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000b20:	2380      	movs	r3, #128	@ 0x80
 8000b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b24:	2302      	movs	r3, #2
 8000b26:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000b30:	2308      	movs	r3, #8
 8000b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4818      	ldr	r0, [pc, #96]	@ (8000b9c <MX_GPIO_Init+0x2d0>)
 8000b3c:	f001 fa66 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000b40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b52:	2301      	movs	r3, #1
 8000b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000b56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4816      	ldr	r0, [pc, #88]	@ (8000bb8 <MX_GPIO_Init+0x2ec>)
 8000b5e:	f001 fa55 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000b62:	2360      	movs	r3, #96	@ 0x60
 8000b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b66:	2302      	movs	r3, #2
 8000b68:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b72:	230d      	movs	r3, #13
 8000b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	480c      	ldr	r0, [pc, #48]	@ (8000bb0 <MX_GPIO_Init+0x2e4>)
 8000b7e:	f001 fa45 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000b82:	2380      	movs	r3, #128	@ 0x80
 8000b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	2302      	movs	r3, #2
 8000b88:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b92:	2307      	movs	r3, #7
 8000b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b96:	e011      	b.n	8000bbc <MX_GPIO_Init+0x2f0>
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40020c00 	.word	0x40020c00
 8000ba0:	40022000 	.word	0x40022000
 8000ba4:	40022800 	.word	0x40022800
 8000ba8:	40021c00 	.word	0x40021c00
 8000bac:	40021800 	.word	0x40021800
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	40020400 	.word	0x40020400
 8000bb8:	40020000 	.word	0x40020000
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000bbc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	48bc      	ldr	r0, [pc, #752]	@ (8000eb4 <MX_GPIO_Init+0x5e8>)
 8000bc4:	f001 fa22 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000bc8:	2340      	movs	r3, #64	@ 0x40
 8000bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000bd8:	230a      	movs	r3, #10
 8000bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000be0:	4619      	mov	r1, r3
 8000be2:	48b4      	ldr	r0, [pc, #720]	@ (8000eb4 <MX_GPIO_Init+0x5e8>)
 8000be4:	f001 fa12 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000be8:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bfa:	230c      	movs	r3, #12
 8000bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bfe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c02:	4619      	mov	r1, r3
 8000c04:	48ac      	ldr	r0, [pc, #688]	@ (8000eb8 <MX_GPIO_Init+0x5ec>)
 8000c06:	f001 fa01 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000c0a:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8000c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c10:	2302      	movs	r3, #2
 8000c12:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c1c:	230e      	movs	r3, #14
 8000c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000c20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c24:	4619      	mov	r1, r3
 8000c26:	48a5      	ldr	r0, [pc, #660]	@ (8000ebc <MX_GPIO_Init+0x5f0>)
 8000c28:	f001 f9f0 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000c2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c32:	2300      	movs	r3, #0
 8000c34:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c3e:	4619      	mov	r1, r3
 8000c40:	489e      	ldr	r0, [pc, #632]	@ (8000ebc <MX_GPIO_Init+0x5f0>)
 8000c42:	f001 f9e3 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000c46:	2340      	movs	r3, #64	@ 0x40
 8000c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c4a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000c4e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000c54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4899      	ldr	r0, [pc, #612]	@ (8000ec0 <MX_GPIO_Init+0x5f4>)
 8000c5c:	f001 f9d6 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000c60:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c72:	230c      	movs	r3, #12
 8000c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4890      	ldr	r0, [pc, #576]	@ (8000ec0 <MX_GPIO_Init+0x5f4>)
 8000c7e:	f001 f9c5 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000c82:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c90:	2303      	movs	r3, #3
 8000c92:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c94:	230a      	movs	r3, #10
 8000c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4889      	ldr	r0, [pc, #548]	@ (8000ec4 <MX_GPIO_Init+0x5f8>)
 8000ca0:	f001 f9b4 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000ca4:	23f0      	movs	r3, #240	@ 0xf0
 8000ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000cb4:	230a      	movs	r3, #10
 8000cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000cb8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4882      	ldr	r0, [pc, #520]	@ (8000ec8 <MX_GPIO_Init+0x5fc>)
 8000cc0:	f001 f9a4 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000cc4:	23f7      	movs	r3, #247	@ 0xf7
 8000cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000cd4:	230e      	movs	r3, #14
 8000cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000cd8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cdc:	4619      	mov	r1, r3
 8000cde:	487b      	ldr	r0, [pc, #492]	@ (8000ecc <MX_GPIO_Init+0x600>)
 8000ce0:	f001 f994 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000ce4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000cf6:	2309      	movs	r3, #9
 8000cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000cfa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cfe:	4619      	mov	r1, r3
 8000d00:	486d      	ldr	r0, [pc, #436]	@ (8000eb8 <MX_GPIO_Init+0x5ec>)
 8000d02:	f001 f983 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000d06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d14:	2300      	movs	r3, #0
 8000d16:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000d18:	230a      	movs	r3, #10
 8000d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000d1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d20:	4619      	mov	r1, r3
 8000d22:	4865      	ldr	r0, [pc, #404]	@ (8000eb8 <MX_GPIO_Init+0x5ec>)
 8000d24:	f001 f972 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000d28:	2320      	movs	r3, #32
 8000d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2300      	movs	r3, #0
 8000d36:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4860      	ldr	r0, [pc, #384]	@ (8000ec0 <MX_GPIO_Init+0x5f4>)
 8000d40:	f001 f964 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000d44:	2308      	movs	r3, #8
 8000d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	2300      	movs	r3, #0
 8000d52:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d54:	230d      	movs	r3, #13
 8000d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000d58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4858      	ldr	r0, [pc, #352]	@ (8000ec0 <MX_GPIO_Init+0x5f4>)
 8000d60:	f001 f954 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000d64:	f241 030c 	movw	r3, #4108	@ 0x100c
 8000d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d72:	2300      	movs	r3, #0
 8000d74:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4852      	ldr	r0, [pc, #328]	@ (8000ec8 <MX_GPIO_Init+0x5fc>)
 8000d7e:	f001 f945 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000d82:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000d90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d94:	4619      	mov	r1, r3
 8000d96:	484e      	ldr	r0, [pc, #312]	@ (8000ed0 <MX_GPIO_Init+0x604>)
 8000d98:	f001 f938 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000d9c:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	2302      	movs	r3, #2
 8000da4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000daa:	2303      	movs	r3, #3
 8000dac:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000dae:	230c      	movs	r3, #12
 8000db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000db2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000db6:	4619      	mov	r1, r3
 8000db8:	4846      	ldr	r0, [pc, #280]	@ (8000ed4 <MX_GPIO_Init+0x608>)
 8000dba:	f001 f927 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000dbe:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8000dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000dd0:	230e      	movs	r3, #14
 8000dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000dd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dd8:	4619      	mov	r1, r3
 8000dda:	483b      	ldr	r0, [pc, #236]	@ (8000ec8 <MX_GPIO_Init+0x5fc>)
 8000ddc:	f001 f916 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000de0:	2308      	movs	r3, #8
 8000de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de4:	2301      	movs	r3, #1
 8000de6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	2300      	movs	r3, #0
 8000dee:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000df0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000df4:	4619      	mov	r1, r3
 8000df6:	4835      	ldr	r0, [pc, #212]	@ (8000ecc <MX_GPIO_Init+0x600>)
 8000df8:	f001 f908 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000dfc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e0e:	230d      	movs	r3, #13
 8000e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000e12:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e16:	4619      	mov	r1, r3
 8000e18:	4827      	ldr	r0, [pc, #156]	@ (8000eb8 <MX_GPIO_Init+0x5ec>)
 8000e1a:	f001 f8f7 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000e1e:	2310      	movs	r3, #16
 8000e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e22:	2300      	movs	r3, #0
 8000e24:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4823      	ldr	r0, [pc, #140]	@ (8000ec0 <MX_GPIO_Init+0x5f4>)
 8000e32:	f001 f8eb 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000e36:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4823      	ldr	r0, [pc, #140]	@ (8000ed8 <MX_GPIO_Init+0x60c>)
 8000e4c:	f001 f8de 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8000e50:	2302      	movs	r3, #2
 8000e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e60:	2305      	movs	r3, #5
 8000e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8000e64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4817      	ldr	r0, [pc, #92]	@ (8000ec8 <MX_GPIO_Init+0x5fc>)
 8000e6c:	f001 f8ce 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000e70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e76:	2301      	movs	r3, #1
 8000e78:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000e82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e86:	4619      	mov	r1, r3
 8000e88:	4813      	ldr	r0, [pc, #76]	@ (8000ed8 <MX_GPIO_Init+0x60c>)
 8000e8a:	f001 f8bf 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000e8e:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8000e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	2302      	movs	r3, #2
 8000e96:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ea0:	230d      	movs	r3, #13
 8000ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ea4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	480b      	ldr	r0, [pc, #44]	@ (8000ed8 <MX_GPIO_Init+0x60c>)
 8000eac:	f001 f8ae 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e013      	b.n	8000edc <MX_GPIO_Init+0x610>
 8000eb4:	40020400 	.word	0x40020400
 8000eb8:	40021800 	.word	0x40021800
 8000ebc:	40022400 	.word	0x40022400
 8000ec0:	40020c00 	.word	0x40020c00
 8000ec4:	40020000 	.word	0x40020000
 8000ec8:	40022000 	.word	0x40022000
 8000ecc:	40022800 	.word	0x40022800
 8000ed0:	40020800 	.word	0x40020800
 8000ed4:	40021400 	.word	0x40021400
 8000ed8:	40021c00 	.word	0x40021c00
 8000edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000eea:	2302      	movs	r3, #2
 8000eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000eee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	48a6      	ldr	r0, [pc, #664]	@ (8001190 <MX_GPIO_Init+0x8c4>)
 8000ef6:	f001 f889 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000efa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	2302      	movs	r3, #2
 8000f02:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f0c:	2307      	movs	r3, #7
 8000f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000f10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f14:	4619      	mov	r1, r3
 8000f16:	489f      	ldr	r0, [pc, #636]	@ (8001194 <MX_GPIO_Init+0x8c8>)
 8000f18:	f001 f878 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000f1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f22:	2302      	movs	r3, #2
 8000f24:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000f32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f36:	4619      	mov	r1, r3
 8000f38:	4896      	ldr	r0, [pc, #600]	@ (8001194 <MX_GPIO_Init+0x8c8>)
 8000f3a:	f001 f867 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000f3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f44:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000f48:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000f4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f52:	4619      	mov	r1, r3
 8000f54:	488e      	ldr	r0, [pc, #568]	@ (8001190 <MX_GPIO_Init+0x8c4>)
 8000f56:	f001 f859 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000f5a:	23c0      	movs	r3, #192	@ 0xc0
 8000f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f66:	2303      	movs	r3, #3
 8000f68:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000f6a:	2308      	movs	r3, #8
 8000f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f72:	4619      	mov	r1, r3
 8000f74:	4888      	ldr	r0, [pc, #544]	@ (8001198 <MX_GPIO_Init+0x8cc>)
 8000f76:	f001 f849 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000f7a:	2310      	movs	r3, #16
 8000f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f86:	2303      	movs	r3, #3
 8000f88:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000f8a:	230a      	movs	r3, #10
 8000f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000f8e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f92:	4619      	mov	r1, r3
 8000f94:	4881      	ldr	r0, [pc, #516]	@ (800119c <MX_GPIO_Init+0x8d0>)
 8000f96:	f001 f839 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000f9a:	2328      	movs	r3, #40	@ 0x28
 8000f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000faa:	230c      	movs	r3, #12
 8000fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000fae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4879      	ldr	r0, [pc, #484]	@ (800119c <MX_GPIO_Init+0x8d0>)
 8000fb6:	f001 f829 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000fba:	23c8      	movs	r3, #200	@ 0xc8
 8000fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4873      	ldr	r0, [pc, #460]	@ (80011a0 <MX_GPIO_Init+0x8d4>)
 8000fd2:	f001 f81b 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000fd6:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8000fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fe4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fe8:	4619      	mov	r1, r3
 8000fea:	486e      	ldr	r0, [pc, #440]	@ (80011a4 <MX_GPIO_Init+0x8d8>)
 8000fec:	f001 f80e 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000ff0:	2308      	movs	r3, #8
 8000ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001000:	230c      	movs	r3, #12
 8001002:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001004:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001008:	4619      	mov	r1, r3
 800100a:	4863      	ldr	r0, [pc, #396]	@ (8001198 <MX_GPIO_Init+0x8cc>)
 800100c:	f000 fffe 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001010:	2305      	movs	r3, #5
 8001012:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101c:	2303      	movs	r3, #3
 800101e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001020:	230a      	movs	r3, #10
 8001022:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001024:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001028:	4619      	mov	r1, r3
 800102a:	485b      	ldr	r0, [pc, #364]	@ (8001198 <MX_GPIO_Init+0x8cc>)
 800102c:	f000 ffee 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001030:	2332      	movs	r3, #50	@ 0x32
 8001032:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	2302      	movs	r3, #2
 8001036:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103c:	2303      	movs	r3, #3
 800103e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001040:	230b      	movs	r3, #11
 8001042:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001044:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001048:	4619      	mov	r1, r3
 800104a:	4853      	ldr	r0, [pc, #332]	@ (8001198 <MX_GPIO_Init+0x8cc>)
 800104c:	f000 ffde 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001050:	2304      	movs	r3, #4
 8001052:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105c:	2303      	movs	r3, #3
 800105e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001060:	2309      	movs	r3, #9
 8001062:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001064:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001068:	4619      	mov	r1, r3
 800106a:	484f      	ldr	r0, [pc, #316]	@ (80011a8 <MX_GPIO_Init+0x8dc>)
 800106c:	f000 ffce 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001070:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001074:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107e:	2303      	movs	r3, #3
 8001080:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001082:	2309      	movs	r3, #9
 8001084:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001086:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800108a:	4619      	mov	r1, r3
 800108c:	4847      	ldr	r0, [pc, #284]	@ (80011ac <MX_GPIO_Init+0x8e0>)
 800108e:	f000 ffbd 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001092:	2304      	movs	r3, #4
 8001094:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001096:	2300      	movs	r3, #0
 8001098:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800109e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010a2:	4619      	mov	r1, r3
 80010a4:	483e      	ldr	r0, [pc, #248]	@ (80011a0 <MX_GPIO_Init+0x8d4>)
 80010a6:	f000 ffb1 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80010aa:	2386      	movs	r3, #134	@ 0x86
 80010ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ae:	2302      	movs	r3, #2
 80010b0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b6:	2303      	movs	r3, #3
 80010b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010ba:	230b      	movs	r3, #11
 80010bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010c2:	4619      	mov	r1, r3
 80010c4:	4833      	ldr	r0, [pc, #204]	@ (8001194 <MX_GPIO_Init+0x8c8>)
 80010c6:	f000 ffa1 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80010ca:	2301      	movs	r3, #1
 80010cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ce:	2303      	movs	r3, #3
 80010d0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80010d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010da:	4619      	mov	r1, r3
 80010dc:	482d      	ldr	r0, [pc, #180]	@ (8001194 <MX_GPIO_Init+0x8c8>)
 80010de:	f000 ff95 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80010e2:	2350      	movs	r3, #80	@ 0x50
 80010e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	2302      	movs	r3, #2
 80010e8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	2300      	movs	r3, #0
 80010f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80010f2:	230d      	movs	r3, #13
 80010f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010fa:	4619      	mov	r1, r3
 80010fc:	4825      	ldr	r0, [pc, #148]	@ (8001194 <MX_GPIO_Init+0x8c8>)
 80010fe:	f000 ff85 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001102:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001106:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001108:	2312      	movs	r3, #18
 800110a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001110:	2303      	movs	r3, #3
 8001112:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001114:	2304      	movs	r3, #4
 8001116:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001118:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800111c:	4619      	mov	r1, r3
 800111e:	481f      	ldr	r0, [pc, #124]	@ (800119c <MX_GPIO_Init+0x8d0>)
 8001120:	f000 ff74 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001124:	2328      	movs	r3, #40	@ 0x28
 8001126:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001128:	2302      	movs	r3, #2
 800112a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001130:	2303      	movs	r3, #3
 8001132:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001134:	230a      	movs	r3, #10
 8001136:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001138:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800113c:	4619      	mov	r1, r3
 800113e:	4815      	ldr	r0, [pc, #84]	@ (8001194 <MX_GPIO_Init+0x8c8>)
 8001140:	f000 ff64 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001144:	2340      	movs	r3, #64	@ 0x40
 8001146:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001148:	2302      	movs	r3, #2
 800114a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	2300      	movs	r3, #0
 8001152:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001154:	2309      	movs	r3, #9
 8001156:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001158:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800115c:	4619      	mov	r1, r3
 800115e:	480f      	ldr	r0, [pc, #60]	@ (800119c <MX_GPIO_Init+0x8d0>)
 8001160:	f000 ff54 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001164:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001168:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116a:	2302      	movs	r3, #2
 800116c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2300      	movs	r3, #0
 8001174:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001176:	2305      	movs	r3, #5
 8001178:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800117e:	4619      	mov	r1, r3
 8001180:	4809      	ldr	r0, [pc, #36]	@ (80011a8 <MX_GPIO_Init+0x8dc>)
 8001182:	f000 ff43 	bl	800200c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001186:	bf00      	nop
 8001188:	3740      	adds	r7, #64	@ 0x40
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40022000 	.word	0x40022000
 8001194:	40020000 	.word	0x40020000
 8001198:	40020800 	.word	0x40020800
 800119c:	40021c00 	.word	0x40021c00
 80011a0:	40021800 	.word	0x40021800
 80011a4:	40021400 	.word	0x40021400
 80011a8:	40020400 	.word	0x40020400
 80011ac:	40020c00 	.word	0x40020c00

080011b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b4:	b672      	cpsid	i
}
 80011b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b8:	bf00      	nop
 80011ba:	e7fd      	b.n	80011b8 <Error_Handler+0x8>

080011bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001200 <HAL_MspInit+0x44>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001200 <HAL_MspInit+0x44>)
 80011c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001200 <HAL_MspInit+0x44>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011da:	4b09      	ldr	r3, [pc, #36]	@ (8001200 <HAL_MspInit+0x44>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011de:	4a08      	ldr	r2, [pc, #32]	@ (8001200 <HAL_MspInit+0x44>)
 80011e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011e6:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <HAL_MspInit+0x44>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ee:	603b      	str	r3, [r7, #0]
 80011f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	40023800 	.word	0x40023800

08001204 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b0ac      	sub	sp, #176	@ 0xb0
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800121c:	f107 0318 	add.w	r3, r7, #24
 8001220:	2284      	movs	r2, #132	@ 0x84
 8001222:	2100      	movs	r1, #0
 8001224:	4618      	mov	r0, r3
 8001226:	f007 f957 	bl	80084d8 <memset>
  if(hsd->Instance==SDMMC1)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a73      	ldr	r2, [pc, #460]	@ (80013fc <HAL_SD_MspInit+0x1f8>)
 8001230:	4293      	cmp	r3, r2
 8001232:	f040 80de 	bne.w	80013f2 <HAL_SD_MspInit+0x1ee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001236:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800123a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_SYSCLK;
 800123c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001240:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001244:	f107 0318 	add.w	r3, r7, #24
 8001248:	4618      	mov	r0, r3
 800124a:	f001 fd13 	bl	8002c74 <HAL_RCCEx_PeriphCLKConfig>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001254:	f7ff ffac 	bl	80011b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001258:	4b69      	ldr	r3, [pc, #420]	@ (8001400 <HAL_SD_MspInit+0x1fc>)
 800125a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125c:	4a68      	ldr	r2, [pc, #416]	@ (8001400 <HAL_SD_MspInit+0x1fc>)
 800125e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001262:	6453      	str	r3, [r2, #68]	@ 0x44
 8001264:	4b66      	ldr	r3, [pc, #408]	@ (8001400 <HAL_SD_MspInit+0x1fc>)
 8001266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001268:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001270:	4b63      	ldr	r3, [pc, #396]	@ (8001400 <HAL_SD_MspInit+0x1fc>)
 8001272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001274:	4a62      	ldr	r2, [pc, #392]	@ (8001400 <HAL_SD_MspInit+0x1fc>)
 8001276:	f043 0304 	orr.w	r3, r3, #4
 800127a:	6313      	str	r3, [r2, #48]	@ 0x30
 800127c:	4b60      	ldr	r3, [pc, #384]	@ (8001400 <HAL_SD_MspInit+0x1fc>)
 800127e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001280:	f003 0304 	and.w	r3, r3, #4
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001288:	4b5d      	ldr	r3, [pc, #372]	@ (8001400 <HAL_SD_MspInit+0x1fc>)
 800128a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128c:	4a5c      	ldr	r2, [pc, #368]	@ (8001400 <HAL_SD_MspInit+0x1fc>)
 800128e:	f043 0308 	orr.w	r3, r3, #8
 8001292:	6313      	str	r3, [r2, #48]	@ 0x30
 8001294:	4b5a      	ldr	r3, [pc, #360]	@ (8001400 <HAL_SD_MspInit+0x1fc>)
 8001296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001298:	f003 0308 	and.w	r3, r3, #8
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80012a0:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80012a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a8:	2302      	movs	r3, #2
 80012aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b4:	2303      	movs	r3, #3
 80012b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80012ba:	230c      	movs	r3, #12
 80012bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012c4:	4619      	mov	r1, r3
 80012c6:	484f      	ldr	r0, [pc, #316]	@ (8001404 <HAL_SD_MspInit+0x200>)
 80012c8:	f000 fea0 	bl	800200c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 80012cc:	2304      	movs	r3, #4
 80012ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012de:	2303      	movs	r3, #3
 80012e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80012e4:	230c      	movs	r3, #12
 80012e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 80012ea:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012ee:	4619      	mov	r1, r3
 80012f0:	4845      	ldr	r0, [pc, #276]	@ (8001408 <HAL_SD_MspInit+0x204>)
 80012f2:	f000 fe8b 	bl	800200c <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 80012f6:	4b45      	ldr	r3, [pc, #276]	@ (800140c <HAL_SD_MspInit+0x208>)
 80012f8:	4a45      	ldr	r2, [pc, #276]	@ (8001410 <HAL_SD_MspInit+0x20c>)
 80012fa:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80012fc:	4b43      	ldr	r3, [pc, #268]	@ (800140c <HAL_SD_MspInit+0x208>)
 80012fe:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001302:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001304:	4b41      	ldr	r3, [pc, #260]	@ (800140c <HAL_SD_MspInit+0x208>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800130a:	4b40      	ldr	r3, [pc, #256]	@ (800140c <HAL_SD_MspInit+0x208>)
 800130c:	2200      	movs	r2, #0
 800130e:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001310:	4b3e      	ldr	r3, [pc, #248]	@ (800140c <HAL_SD_MspInit+0x208>)
 8001312:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001316:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001318:	4b3c      	ldr	r3, [pc, #240]	@ (800140c <HAL_SD_MspInit+0x208>)
 800131a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800131e:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001320:	4b3a      	ldr	r3, [pc, #232]	@ (800140c <HAL_SD_MspInit+0x208>)
 8001322:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001326:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8001328:	4b38      	ldr	r3, [pc, #224]	@ (800140c <HAL_SD_MspInit+0x208>)
 800132a:	2220      	movs	r2, #32
 800132c:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800132e:	4b37      	ldr	r3, [pc, #220]	@ (800140c <HAL_SD_MspInit+0x208>)
 8001330:	2200      	movs	r2, #0
 8001332:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001334:	4b35      	ldr	r3, [pc, #212]	@ (800140c <HAL_SD_MspInit+0x208>)
 8001336:	2204      	movs	r2, #4
 8001338:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800133a:	4b34      	ldr	r3, [pc, #208]	@ (800140c <HAL_SD_MspInit+0x208>)
 800133c:	2203      	movs	r2, #3
 800133e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001340:	4b32      	ldr	r3, [pc, #200]	@ (800140c <HAL_SD_MspInit+0x208>)
 8001342:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001346:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001348:	4b30      	ldr	r3, [pc, #192]	@ (800140c <HAL_SD_MspInit+0x208>)
 800134a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800134e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8001350:	482e      	ldr	r0, [pc, #184]	@ (800140c <HAL_SD_MspInit+0x208>)
 8001352:	f000 fab5 	bl	80018c0 <HAL_DMA_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <HAL_SD_MspInit+0x15c>
    {
      Error_Handler();
 800135c:	f7ff ff28 	bl	80011b0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a2a      	ldr	r2, [pc, #168]	@ (800140c <HAL_SD_MspInit+0x208>)
 8001364:	641a      	str	r2, [r3, #64]	@ 0x40
 8001366:	4a29      	ldr	r2, [pc, #164]	@ (800140c <HAL_SD_MspInit+0x208>)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 800136c:	4b29      	ldr	r3, [pc, #164]	@ (8001414 <HAL_SD_MspInit+0x210>)
 800136e:	4a2a      	ldr	r2, [pc, #168]	@ (8001418 <HAL_SD_MspInit+0x214>)
 8001370:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8001372:	4b28      	ldr	r3, [pc, #160]	@ (8001414 <HAL_SD_MspInit+0x210>)
 8001374:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001378:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800137a:	4b26      	ldr	r3, [pc, #152]	@ (8001414 <HAL_SD_MspInit+0x210>)
 800137c:	2240      	movs	r2, #64	@ 0x40
 800137e:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001380:	4b24      	ldr	r3, [pc, #144]	@ (8001414 <HAL_SD_MspInit+0x210>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001386:	4b23      	ldr	r3, [pc, #140]	@ (8001414 <HAL_SD_MspInit+0x210>)
 8001388:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800138c:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800138e:	4b21      	ldr	r3, [pc, #132]	@ (8001414 <HAL_SD_MspInit+0x210>)
 8001390:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001394:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001396:	4b1f      	ldr	r3, [pc, #124]	@ (8001414 <HAL_SD_MspInit+0x210>)
 8001398:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800139c:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 800139e:	4b1d      	ldr	r3, [pc, #116]	@ (8001414 <HAL_SD_MspInit+0x210>)
 80013a0:	2220      	movs	r2, #32
 80013a2:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001414 <HAL_SD_MspInit+0x210>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80013aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001414 <HAL_SD_MspInit+0x210>)
 80013ac:	2204      	movs	r2, #4
 80013ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80013b0:	4b18      	ldr	r3, [pc, #96]	@ (8001414 <HAL_SD_MspInit+0x210>)
 80013b2:	2203      	movs	r2, #3
 80013b4:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 80013b6:	4b17      	ldr	r3, [pc, #92]	@ (8001414 <HAL_SD_MspInit+0x210>)
 80013b8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80013bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80013be:	4b15      	ldr	r3, [pc, #84]	@ (8001414 <HAL_SD_MspInit+0x210>)
 80013c0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80013c4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80013c6:	4813      	ldr	r0, [pc, #76]	@ (8001414 <HAL_SD_MspInit+0x210>)
 80013c8:	f000 fa7a 	bl	80018c0 <HAL_DMA_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <HAL_SD_MspInit+0x1d2>
    {
      Error_Handler();
 80013d2:	f7ff feed 	bl	80011b0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a0e      	ldr	r2, [pc, #56]	@ (8001414 <HAL_SD_MspInit+0x210>)
 80013da:	63da      	str	r2, [r3, #60]	@ 0x3c
 80013dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001414 <HAL_SD_MspInit+0x210>)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2100      	movs	r1, #0
 80013e6:	2031      	movs	r0, #49	@ 0x31
 80013e8:	f000 fa33 	bl	8001852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80013ec:	2031      	movs	r0, #49	@ 0x31
 80013ee:	f000 fa4c 	bl	800188a <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 80013f2:	bf00      	nop
 80013f4:	37b0      	adds	r7, #176	@ 0xb0
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40012c00 	.word	0x40012c00
 8001400:	40023800 	.word	0x40023800
 8001404:	40020800 	.word	0x40020800
 8001408:	40020c00 	.word	0x40020c00
 800140c:	20000320 	.word	0x20000320
 8001410:	40026458 	.word	0x40026458
 8001414:	20000380 	.word	0x20000380
 8001418:	400264a0 	.word	0x400264a0

0800141c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <NMI_Handler+0x4>

08001424 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <HardFault_Handler+0x4>

0800142c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001430:	bf00      	nop
 8001432:	e7fd      	b.n	8001430 <MemManage_Handler+0x4>

08001434 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001438:	bf00      	nop
 800143a:	e7fd      	b.n	8001438 <BusFault_Handler+0x4>

0800143c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001440:	bf00      	nop
 8001442:	e7fd      	b.n	8001440 <UsageFault_Handler+0x4>

08001444 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001472:	f000 f8cf 	bl	8001614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001480:	4802      	ldr	r0, [pc, #8]	@ (800148c <SDMMC1_IRQHandler+0x10>)
 8001482:	f002 fa67 	bl	8003954 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	2000029c 	.word	0x2000029c

08001490 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001494:	4802      	ldr	r0, [pc, #8]	@ (80014a0 <DMA2_Stream3_IRQHandler+0x10>)
 8001496:	f000 fb43 	bl	8001b20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000320 	.word	0x20000320

080014a4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 80014a8:	4802      	ldr	r0, [pc, #8]	@ (80014b4 <DMA2_Stream6_IRQHandler+0x10>)
 80014aa:	f000 fb39 	bl	8001b20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000380 	.word	0x20000380

080014b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014c0:	4a14      	ldr	r2, [pc, #80]	@ (8001514 <_sbrk+0x5c>)
 80014c2:	4b15      	ldr	r3, [pc, #84]	@ (8001518 <_sbrk+0x60>)
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014cc:	4b13      	ldr	r3, [pc, #76]	@ (800151c <_sbrk+0x64>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d102      	bne.n	80014da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014d4:	4b11      	ldr	r3, [pc, #68]	@ (800151c <_sbrk+0x64>)
 80014d6:	4a12      	ldr	r2, [pc, #72]	@ (8001520 <_sbrk+0x68>)
 80014d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014da:	4b10      	ldr	r3, [pc, #64]	@ (800151c <_sbrk+0x64>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4413      	add	r3, r2
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d207      	bcs.n	80014f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014e8:	f007 f814 	bl	8008514 <__errno>
 80014ec:	4603      	mov	r3, r0
 80014ee:	220c      	movs	r2, #12
 80014f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014f2:	f04f 33ff 	mov.w	r3, #4294967295
 80014f6:	e009      	b.n	800150c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014f8:	4b08      	ldr	r3, [pc, #32]	@ (800151c <_sbrk+0x64>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014fe:	4b07      	ldr	r3, [pc, #28]	@ (800151c <_sbrk+0x64>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4413      	add	r3, r2
 8001506:	4a05      	ldr	r2, [pc, #20]	@ (800151c <_sbrk+0x64>)
 8001508:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800150a:	68fb      	ldr	r3, [r7, #12]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20050000 	.word	0x20050000
 8001518:	00000800 	.word	0x00000800
 800151c:	200003e0 	.word	0x200003e0
 8001520:	200009d8 	.word	0x200009d8

08001524 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001528:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <SystemInit+0x20>)
 800152a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800152e:	4a05      	ldr	r2, [pc, #20]	@ (8001544 <SystemInit+0x20>)
 8001530:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001534:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001548:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001580 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 800154c:	f7ff ffea 	bl	8001524 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001550:	480c      	ldr	r0, [pc, #48]	@ (8001584 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001552:	490d      	ldr	r1, [pc, #52]	@ (8001588 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001554:	4a0d      	ldr	r2, [pc, #52]	@ (800158c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001556:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001558:	e002      	b.n	8001560 <LoopCopyDataInit>

0800155a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800155a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800155c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800155e:	3304      	adds	r3, #4

08001560 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001560:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001562:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001564:	d3f9      	bcc.n	800155a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001566:	4a0a      	ldr	r2, [pc, #40]	@ (8001590 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001568:	4c0a      	ldr	r4, [pc, #40]	@ (8001594 <LoopFillZerobss+0x22>)
  movs r3, #0
 800156a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800156c:	e001      	b.n	8001572 <LoopFillZerobss>

0800156e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800156e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001570:	3204      	adds	r2, #4

08001572 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001572:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001574:	d3fb      	bcc.n	800156e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001576:	f006 ffd3 	bl	8008520 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800157a:	f7ff f8e5 	bl	8000748 <main>
  bx  lr    
 800157e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001580:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001584:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001588:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800158c:	08008fa0 	.word	0x08008fa0
  ldr r2, =_sbss
 8001590:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001594:	200009d4 	.word	0x200009d4

08001598 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001598:	e7fe      	b.n	8001598 <ADC_IRQHandler>

0800159a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800159e:	2003      	movs	r0, #3
 80015a0:	f000 f94c 	bl	800183c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015a4:	2000      	movs	r0, #0
 80015a6:	f000 f805 	bl	80015b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015aa:	f7ff fe07 	bl	80011bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015bc:	4b12      	ldr	r3, [pc, #72]	@ (8001608 <HAL_InitTick+0x54>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b12      	ldr	r3, [pc, #72]	@ (800160c <HAL_InitTick+0x58>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	4619      	mov	r1, r3
 80015c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 f967 	bl	80018a6 <HAL_SYSTICK_Config>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e00e      	b.n	8001600 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b0f      	cmp	r3, #15
 80015e6:	d80a      	bhi.n	80015fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e8:	2200      	movs	r2, #0
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	f04f 30ff 	mov.w	r0, #4294967295
 80015f0:	f000 f92f 	bl	8001852 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015f4:	4a06      	ldr	r2, [pc, #24]	@ (8001610 <HAL_InitTick+0x5c>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015fa:	2300      	movs	r3, #0
 80015fc:	e000      	b.n	8001600 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
}
 8001600:	4618      	mov	r0, r3
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	2000001c 	.word	0x2000001c
 800160c:	20000024 	.word	0x20000024
 8001610:	20000020 	.word	0x20000020

08001614 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001618:	4b06      	ldr	r3, [pc, #24]	@ (8001634 <HAL_IncTick+0x20>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	461a      	mov	r2, r3
 800161e:	4b06      	ldr	r3, [pc, #24]	@ (8001638 <HAL_IncTick+0x24>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4413      	add	r3, r2
 8001624:	4a04      	ldr	r2, [pc, #16]	@ (8001638 <HAL_IncTick+0x24>)
 8001626:	6013      	str	r3, [r2, #0]
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	20000024 	.word	0x20000024
 8001638:	200003e4 	.word	0x200003e4

0800163c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  return uwTick;
 8001640:	4b03      	ldr	r3, [pc, #12]	@ (8001650 <HAL_GetTick+0x14>)
 8001642:	681b      	ldr	r3, [r3, #0]
}
 8001644:	4618      	mov	r0, r3
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	200003e4 	.word	0x200003e4

08001654 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800165c:	f7ff ffee 	bl	800163c <HAL_GetTick>
 8001660:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800166c:	d005      	beq.n	800167a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800166e:	4b0a      	ldr	r3, [pc, #40]	@ (8001698 <HAL_Delay+0x44>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	461a      	mov	r2, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4413      	add	r3, r2
 8001678:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800167a:	bf00      	nop
 800167c:	f7ff ffde 	bl	800163c <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	429a      	cmp	r2, r3
 800168a:	d8f7      	bhi.n	800167c <HAL_Delay+0x28>
  {
  }
}
 800168c:	bf00      	nop
 800168e:	bf00      	nop
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000024 	.word	0x20000024

0800169c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016ac:	4b0b      	ldr	r3, [pc, #44]	@ (80016dc <__NVIC_SetPriorityGrouping+0x40>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016b8:	4013      	ands	r3, r2
 80016ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016c4:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <__NVIC_SetPriorityGrouping+0x44>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ca:	4a04      	ldr	r2, [pc, #16]	@ (80016dc <__NVIC_SetPriorityGrouping+0x40>)
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	60d3      	str	r3, [r2, #12]
}
 80016d0:	bf00      	nop
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	e000ed00 	.word	0xe000ed00
 80016e0:	05fa0000 	.word	0x05fa0000

080016e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e8:	4b04      	ldr	r3, [pc, #16]	@ (80016fc <__NVIC_GetPriorityGrouping+0x18>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	0a1b      	lsrs	r3, r3, #8
 80016ee:	f003 0307 	and.w	r3, r3, #7
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	2b00      	cmp	r3, #0
 8001710:	db0b      	blt.n	800172a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	f003 021f 	and.w	r2, r3, #31
 8001718:	4907      	ldr	r1, [pc, #28]	@ (8001738 <__NVIC_EnableIRQ+0x38>)
 800171a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171e:	095b      	lsrs	r3, r3, #5
 8001720:	2001      	movs	r0, #1
 8001722:	fa00 f202 	lsl.w	r2, r0, r2
 8001726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	e000e100 	.word	0xe000e100

0800173c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	6039      	str	r1, [r7, #0]
 8001746:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174c:	2b00      	cmp	r3, #0
 800174e:	db0a      	blt.n	8001766 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	b2da      	uxtb	r2, r3
 8001754:	490c      	ldr	r1, [pc, #48]	@ (8001788 <__NVIC_SetPriority+0x4c>)
 8001756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175a:	0112      	lsls	r2, r2, #4
 800175c:	b2d2      	uxtb	r2, r2
 800175e:	440b      	add	r3, r1
 8001760:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001764:	e00a      	b.n	800177c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	b2da      	uxtb	r2, r3
 800176a:	4908      	ldr	r1, [pc, #32]	@ (800178c <__NVIC_SetPriority+0x50>)
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	f003 030f 	and.w	r3, r3, #15
 8001772:	3b04      	subs	r3, #4
 8001774:	0112      	lsls	r2, r2, #4
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	440b      	add	r3, r1
 800177a:	761a      	strb	r2, [r3, #24]
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	e000e100 	.word	0xe000e100
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001790:	b480      	push	{r7}
 8001792:	b089      	sub	sp, #36	@ 0x24
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	f1c3 0307 	rsb	r3, r3, #7
 80017aa:	2b04      	cmp	r3, #4
 80017ac:	bf28      	it	cs
 80017ae:	2304      	movcs	r3, #4
 80017b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	3304      	adds	r3, #4
 80017b6:	2b06      	cmp	r3, #6
 80017b8:	d902      	bls.n	80017c0 <NVIC_EncodePriority+0x30>
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	3b03      	subs	r3, #3
 80017be:	e000      	b.n	80017c2 <NVIC_EncodePriority+0x32>
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c4:	f04f 32ff 	mov.w	r2, #4294967295
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43da      	mvns	r2, r3
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	401a      	ands	r2, r3
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d8:	f04f 31ff 	mov.w	r1, #4294967295
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	fa01 f303 	lsl.w	r3, r1, r3
 80017e2:	43d9      	mvns	r1, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e8:	4313      	orrs	r3, r2
         );
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3724      	adds	r7, #36	@ 0x24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
	...

080017f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3b01      	subs	r3, #1
 8001804:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001808:	d301      	bcc.n	800180e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800180a:	2301      	movs	r3, #1
 800180c:	e00f      	b.n	800182e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800180e:	4a0a      	ldr	r2, [pc, #40]	@ (8001838 <SysTick_Config+0x40>)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3b01      	subs	r3, #1
 8001814:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001816:	210f      	movs	r1, #15
 8001818:	f04f 30ff 	mov.w	r0, #4294967295
 800181c:	f7ff ff8e 	bl	800173c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001820:	4b05      	ldr	r3, [pc, #20]	@ (8001838 <SysTick_Config+0x40>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001826:	4b04      	ldr	r3, [pc, #16]	@ (8001838 <SysTick_Config+0x40>)
 8001828:	2207      	movs	r2, #7
 800182a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	e000e010 	.word	0xe000e010

0800183c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff ff29 	bl	800169c <__NVIC_SetPriorityGrouping>
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001852:	b580      	push	{r7, lr}
 8001854:	b086      	sub	sp, #24
 8001856:	af00      	add	r7, sp, #0
 8001858:	4603      	mov	r3, r0
 800185a:	60b9      	str	r1, [r7, #8]
 800185c:	607a      	str	r2, [r7, #4]
 800185e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001864:	f7ff ff3e 	bl	80016e4 <__NVIC_GetPriorityGrouping>
 8001868:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	68b9      	ldr	r1, [r7, #8]
 800186e:	6978      	ldr	r0, [r7, #20]
 8001870:	f7ff ff8e 	bl	8001790 <NVIC_EncodePriority>
 8001874:	4602      	mov	r2, r0
 8001876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187a:	4611      	mov	r1, r2
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff5d 	bl	800173c <__NVIC_SetPriority>
}
 8001882:	bf00      	nop
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	4603      	mov	r3, r0
 8001892:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff ff31 	bl	8001700 <__NVIC_EnableIRQ>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff ffa2 	bl	80017f8 <SysTick_Config>
 80018b4:	4603      	mov	r3, r0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
	...

080018c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018cc:	f7ff feb6 	bl	800163c <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d101      	bne.n	80018dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e099      	b.n	8001a10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2202      	movs	r2, #2
 80018e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f022 0201 	bic.w	r2, r2, #1
 80018fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018fc:	e00f      	b.n	800191e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018fe:	f7ff fe9d 	bl	800163c <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b05      	cmp	r3, #5
 800190a:	d908      	bls.n	800191e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2220      	movs	r2, #32
 8001910:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2203      	movs	r2, #3
 8001916:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e078      	b.n	8001a10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1e8      	bne.n	80018fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	4b38      	ldr	r3, [pc, #224]	@ (8001a18 <HAL_DMA_Init+0x158>)
 8001938:	4013      	ands	r3, r2
 800193a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800194a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001956:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001962:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800196a:	697a      	ldr	r2, [r7, #20]
 800196c:	4313      	orrs	r3, r2
 800196e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001974:	2b04      	cmp	r3, #4
 8001976:	d107      	bne.n	8001988 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001980:	4313      	orrs	r3, r2
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	4313      	orrs	r3, r2
 8001986:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	697a      	ldr	r2, [r7, #20]
 800198e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	695b      	ldr	r3, [r3, #20]
 8001996:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	f023 0307 	bic.w	r3, r3, #7
 800199e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ae:	2b04      	cmp	r3, #4
 80019b0:	d117      	bne.n	80019e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b6:	697a      	ldr	r2, [r7, #20]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d00e      	beq.n	80019e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f000 faa5 	bl	8001f14 <DMA_CheckFifoParam>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d008      	beq.n	80019e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2240      	movs	r2, #64	@ 0x40
 80019d4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80019de:	2301      	movs	r3, #1
 80019e0:	e016      	b.n	8001a10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f000 fa5c 	bl	8001ea8 <DMA_CalcBaseAndBitshift>
 80019f0:	4603      	mov	r3, r0
 80019f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019f8:	223f      	movs	r2, #63	@ 0x3f
 80019fa:	409a      	lsls	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3718      	adds	r7, #24
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	f010803f 	.word	0xf010803f

08001a1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
 8001a28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a32:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d101      	bne.n	8001a42 <HAL_DMA_Start_IT+0x26>
 8001a3e:	2302      	movs	r3, #2
 8001a40:	e048      	b.n	8001ad4 <HAL_DMA_Start_IT+0xb8>
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2201      	movs	r2, #1
 8001a46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d137      	bne.n	8001ac6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2202      	movs	r2, #2
 8001a5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2200      	movs	r2, #0
 8001a62:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	68b9      	ldr	r1, [r7, #8]
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	f000 f9ee 	bl	8001e4c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a74:	223f      	movs	r2, #63	@ 0x3f
 8001a76:	409a      	lsls	r2, r3
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f042 0216 	orr.w	r2, r2, #22
 8001a8a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	695a      	ldr	r2, [r3, #20]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001a9a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d007      	beq.n	8001ab4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f042 0208 	orr.w	r2, r2, #8
 8001ab2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f042 0201 	orr.w	r2, r2, #1
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	e005      	b.n	8001ad2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001ad2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3718      	adds	r7, #24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d004      	beq.n	8001afa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2280      	movs	r2, #128	@ 0x80
 8001af4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e00c      	b.n	8001b14 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2205      	movs	r2, #5
 8001afe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f022 0201 	bic.w	r2, r2, #1
 8001b10:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001b2c:	4b8e      	ldr	r3, [pc, #568]	@ (8001d68 <HAL_DMA_IRQHandler+0x248>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a8e      	ldr	r2, [pc, #568]	@ (8001d6c <HAL_DMA_IRQHandler+0x24c>)
 8001b32:	fba2 2303 	umull	r2, r3, r2, r3
 8001b36:	0a9b      	lsrs	r3, r3, #10
 8001b38:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b3e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b4a:	2208      	movs	r2, #8
 8001b4c:	409a      	lsls	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	4013      	ands	r3, r2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d01a      	beq.n	8001b8c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d013      	beq.n	8001b8c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 0204 	bic.w	r2, r2, #4
 8001b72:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b78:	2208      	movs	r2, #8
 8001b7a:	409a      	lsls	r2, r3
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b84:	f043 0201 	orr.w	r2, r3, #1
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b90:	2201      	movs	r2, #1
 8001b92:	409a      	lsls	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	4013      	ands	r3, r2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d012      	beq.n	8001bc2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00b      	beq.n	8001bc2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bae:	2201      	movs	r2, #1
 8001bb0:	409a      	lsls	r2, r3
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bba:	f043 0202 	orr.w	r2, r3, #2
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bc6:	2204      	movs	r2, #4
 8001bc8:	409a      	lsls	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d012      	beq.n	8001bf8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00b      	beq.n	8001bf8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001be4:	2204      	movs	r2, #4
 8001be6:	409a      	lsls	r2, r3
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bf0:	f043 0204 	orr.w	r2, r3, #4
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bfc:	2210      	movs	r2, #16
 8001bfe:	409a      	lsls	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4013      	ands	r3, r2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d043      	beq.n	8001c90 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d03c      	beq.n	8001c90 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c1a:	2210      	movs	r2, #16
 8001c1c:	409a      	lsls	r2, r3
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d018      	beq.n	8001c62 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d108      	bne.n	8001c50 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d024      	beq.n	8001c90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	4798      	blx	r3
 8001c4e:	e01f      	b.n	8001c90 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d01b      	beq.n	8001c90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	4798      	blx	r3
 8001c60:	e016      	b.n	8001c90 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d107      	bne.n	8001c80 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0208 	bic.w	r2, r2, #8
 8001c7e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d003      	beq.n	8001c90 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c94:	2220      	movs	r2, #32
 8001c96:	409a      	lsls	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f000 808f 	beq.w	8001dc0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0310 	and.w	r3, r3, #16
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f000 8087 	beq.w	8001dc0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cb6:	2220      	movs	r2, #32
 8001cb8:	409a      	lsls	r2, r3
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b05      	cmp	r3, #5
 8001cc8:	d136      	bne.n	8001d38 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 0216 	bic.w	r2, r2, #22
 8001cd8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	695a      	ldr	r2, [r3, #20]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ce8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d103      	bne.n	8001cfa <HAL_DMA_IRQHandler+0x1da>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d007      	beq.n	8001d0a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 0208 	bic.w	r2, r2, #8
 8001d08:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d0e:	223f      	movs	r2, #63	@ 0x3f
 8001d10:	409a      	lsls	r2, r3
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d07e      	beq.n	8001e2c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	4798      	blx	r3
        }
        return;
 8001d36:	e079      	b.n	8001e2c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d01d      	beq.n	8001d82 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d10d      	bne.n	8001d70 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d031      	beq.n	8001dc0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	4798      	blx	r3
 8001d64:	e02c      	b.n	8001dc0 <HAL_DMA_IRQHandler+0x2a0>
 8001d66:	bf00      	nop
 8001d68:	2000001c 	.word	0x2000001c
 8001d6c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d023      	beq.n	8001dc0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	4798      	blx	r3
 8001d80:	e01e      	b.n	8001dc0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d10f      	bne.n	8001db0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 0210 	bic.w	r2, r2, #16
 8001d9e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d032      	beq.n	8001e2e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d022      	beq.n	8001e1a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2205      	movs	r2, #5
 8001dd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 0201 	bic.w	r2, r2, #1
 8001dea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	3301      	adds	r3, #1
 8001df0:	60bb      	str	r3, [r7, #8]
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d307      	bcc.n	8001e08 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f2      	bne.n	8001dec <HAL_DMA_IRQHandler+0x2cc>
 8001e06:	e000      	b.n	8001e0a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e08:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d005      	beq.n	8001e2e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	4798      	blx	r3
 8001e2a:	e000      	b.n	8001e2e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e2c:	bf00      	nop
    }
  }
}
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
 8001e58:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001e68:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	2b40      	cmp	r3, #64	@ 0x40
 8001e78:	d108      	bne.n	8001e8c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68ba      	ldr	r2, [r7, #8]
 8001e88:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e8a:	e007      	b.n	8001e9c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68ba      	ldr	r2, [r7, #8]
 8001e92:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	60da      	str	r2, [r3, #12]
}
 8001e9c:	bf00      	nop
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	3b10      	subs	r3, #16
 8001eb8:	4a13      	ldr	r2, [pc, #76]	@ (8001f08 <DMA_CalcBaseAndBitshift+0x60>)
 8001eba:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebe:	091b      	lsrs	r3, r3, #4
 8001ec0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ec2:	4a12      	ldr	r2, [pc, #72]	@ (8001f0c <DMA_CalcBaseAndBitshift+0x64>)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2b03      	cmp	r3, #3
 8001ed4:	d908      	bls.n	8001ee8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	461a      	mov	r2, r3
 8001edc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f10 <DMA_CalcBaseAndBitshift+0x68>)
 8001ede:	4013      	ands	r3, r2
 8001ee0:	1d1a      	adds	r2, r3, #4
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	659a      	str	r2, [r3, #88]	@ 0x58
 8001ee6:	e006      	b.n	8001ef6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	461a      	mov	r2, r3
 8001eee:	4b08      	ldr	r3, [pc, #32]	@ (8001f10 <DMA_CalcBaseAndBitshift+0x68>)
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3714      	adds	r7, #20
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	aaaaaaab 	.word	0xaaaaaaab
 8001f0c:	08008ea0 	.word	0x08008ea0
 8001f10:	fffffc00 	.word	0xfffffc00

08001f14 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f24:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d11f      	bne.n	8001f6e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	2b03      	cmp	r3, #3
 8001f32:	d856      	bhi.n	8001fe2 <DMA_CheckFifoParam+0xce>
 8001f34:	a201      	add	r2, pc, #4	@ (adr r2, 8001f3c <DMA_CheckFifoParam+0x28>)
 8001f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f3a:	bf00      	nop
 8001f3c:	08001f4d 	.word	0x08001f4d
 8001f40:	08001f5f 	.word	0x08001f5f
 8001f44:	08001f4d 	.word	0x08001f4d
 8001f48:	08001fe3 	.word	0x08001fe3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d046      	beq.n	8001fe6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f5c:	e043      	b.n	8001fe6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f62:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001f66:	d140      	bne.n	8001fea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f6c:	e03d      	b.n	8001fea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f76:	d121      	bne.n	8001fbc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	2b03      	cmp	r3, #3
 8001f7c:	d837      	bhi.n	8001fee <DMA_CheckFifoParam+0xda>
 8001f7e:	a201      	add	r2, pc, #4	@ (adr r2, 8001f84 <DMA_CheckFifoParam+0x70>)
 8001f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f84:	08001f95 	.word	0x08001f95
 8001f88:	08001f9b 	.word	0x08001f9b
 8001f8c:	08001f95 	.word	0x08001f95
 8001f90:	08001fad 	.word	0x08001fad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	73fb      	strb	r3, [r7, #15]
      break;
 8001f98:	e030      	b.n	8001ffc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f9e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d025      	beq.n	8001ff2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001faa:	e022      	b.n	8001ff2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001fb4:	d11f      	bne.n	8001ff6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001fba:	e01c      	b.n	8001ff6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d903      	bls.n	8001fca <DMA_CheckFifoParam+0xb6>
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	2b03      	cmp	r3, #3
 8001fc6:	d003      	beq.n	8001fd0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001fc8:	e018      	b.n	8001ffc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	73fb      	strb	r3, [r7, #15]
      break;
 8001fce:	e015      	b.n	8001ffc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fd4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00e      	beq.n	8001ffa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	73fb      	strb	r3, [r7, #15]
      break;
 8001fe0:	e00b      	b.n	8001ffa <DMA_CheckFifoParam+0xe6>
      break;
 8001fe2:	bf00      	nop
 8001fe4:	e00a      	b.n	8001ffc <DMA_CheckFifoParam+0xe8>
      break;
 8001fe6:	bf00      	nop
 8001fe8:	e008      	b.n	8001ffc <DMA_CheckFifoParam+0xe8>
      break;
 8001fea:	bf00      	nop
 8001fec:	e006      	b.n	8001ffc <DMA_CheckFifoParam+0xe8>
      break;
 8001fee:	bf00      	nop
 8001ff0:	e004      	b.n	8001ffc <DMA_CheckFifoParam+0xe8>
      break;
 8001ff2:	bf00      	nop
 8001ff4:	e002      	b.n	8001ffc <DMA_CheckFifoParam+0xe8>
      break;   
 8001ff6:	bf00      	nop
 8001ff8:	e000      	b.n	8001ffc <DMA_CheckFifoParam+0xe8>
      break;
 8001ffa:	bf00      	nop
    }
  } 
  
  return status; 
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3714      	adds	r7, #20
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop

0800200c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800200c:	b480      	push	{r7}
 800200e:	b089      	sub	sp, #36	@ 0x24
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002016:	2300      	movs	r3, #0
 8002018:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800201a:	2300      	movs	r3, #0
 800201c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800201e:	2300      	movs	r3, #0
 8002020:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002022:	2300      	movs	r3, #0
 8002024:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002026:	2300      	movs	r3, #0
 8002028:	61fb      	str	r3, [r7, #28]
 800202a:	e175      	b.n	8002318 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800202c:	2201      	movs	r2, #1
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	4013      	ands	r3, r2
 800203e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	429a      	cmp	r2, r3
 8002046:	f040 8164 	bne.w	8002312 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	2b01      	cmp	r3, #1
 8002054:	d005      	beq.n	8002062 <HAL_GPIO_Init+0x56>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d130      	bne.n	80020c4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	2203      	movs	r2, #3
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43db      	mvns	r3, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4013      	ands	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	68da      	ldr	r2, [r3, #12]
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4313      	orrs	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002098:	2201      	movs	r2, #1
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	43db      	mvns	r3, r3
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4013      	ands	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	091b      	lsrs	r3, r3, #4
 80020ae:	f003 0201 	and.w	r2, r3, #1
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f003 0303 	and.w	r3, r3, #3
 80020cc:	2b03      	cmp	r3, #3
 80020ce:	d017      	beq.n	8002100 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	2203      	movs	r2, #3
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 0303 	and.w	r3, r3, #3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d123      	bne.n	8002154 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	08da      	lsrs	r2, r3, #3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3208      	adds	r2, #8
 8002114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	f003 0307 	and.w	r3, r3, #7
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	220f      	movs	r2, #15
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	43db      	mvns	r3, r3
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4013      	ands	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	691a      	ldr	r2, [r3, #16]
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4313      	orrs	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	08da      	lsrs	r2, r3, #3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	3208      	adds	r2, #8
 800214e:	69b9      	ldr	r1, [r7, #24]
 8002150:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	2203      	movs	r2, #3
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	43db      	mvns	r3, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4013      	ands	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f003 0203 	and.w	r2, r3, #3
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4313      	orrs	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002190:	2b00      	cmp	r3, #0
 8002192:	f000 80be 	beq.w	8002312 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002196:	4b66      	ldr	r3, [pc, #408]	@ (8002330 <HAL_GPIO_Init+0x324>)
 8002198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800219a:	4a65      	ldr	r2, [pc, #404]	@ (8002330 <HAL_GPIO_Init+0x324>)
 800219c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80021a2:	4b63      	ldr	r3, [pc, #396]	@ (8002330 <HAL_GPIO_Init+0x324>)
 80021a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80021ae:	4a61      	ldr	r2, [pc, #388]	@ (8002334 <HAL_GPIO_Init+0x328>)
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	089b      	lsrs	r3, r3, #2
 80021b4:	3302      	adds	r3, #2
 80021b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	f003 0303 	and.w	r3, r3, #3
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	220f      	movs	r2, #15
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43db      	mvns	r3, r3
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4013      	ands	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a58      	ldr	r2, [pc, #352]	@ (8002338 <HAL_GPIO_Init+0x32c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d037      	beq.n	800224a <HAL_GPIO_Init+0x23e>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a57      	ldr	r2, [pc, #348]	@ (800233c <HAL_GPIO_Init+0x330>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d031      	beq.n	8002246 <HAL_GPIO_Init+0x23a>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a56      	ldr	r2, [pc, #344]	@ (8002340 <HAL_GPIO_Init+0x334>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d02b      	beq.n	8002242 <HAL_GPIO_Init+0x236>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a55      	ldr	r2, [pc, #340]	@ (8002344 <HAL_GPIO_Init+0x338>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d025      	beq.n	800223e <HAL_GPIO_Init+0x232>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a54      	ldr	r2, [pc, #336]	@ (8002348 <HAL_GPIO_Init+0x33c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d01f      	beq.n	800223a <HAL_GPIO_Init+0x22e>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a53      	ldr	r2, [pc, #332]	@ (800234c <HAL_GPIO_Init+0x340>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d019      	beq.n	8002236 <HAL_GPIO_Init+0x22a>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a52      	ldr	r2, [pc, #328]	@ (8002350 <HAL_GPIO_Init+0x344>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d013      	beq.n	8002232 <HAL_GPIO_Init+0x226>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a51      	ldr	r2, [pc, #324]	@ (8002354 <HAL_GPIO_Init+0x348>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d00d      	beq.n	800222e <HAL_GPIO_Init+0x222>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a50      	ldr	r2, [pc, #320]	@ (8002358 <HAL_GPIO_Init+0x34c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d007      	beq.n	800222a <HAL_GPIO_Init+0x21e>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a4f      	ldr	r2, [pc, #316]	@ (800235c <HAL_GPIO_Init+0x350>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d101      	bne.n	8002226 <HAL_GPIO_Init+0x21a>
 8002222:	2309      	movs	r3, #9
 8002224:	e012      	b.n	800224c <HAL_GPIO_Init+0x240>
 8002226:	230a      	movs	r3, #10
 8002228:	e010      	b.n	800224c <HAL_GPIO_Init+0x240>
 800222a:	2308      	movs	r3, #8
 800222c:	e00e      	b.n	800224c <HAL_GPIO_Init+0x240>
 800222e:	2307      	movs	r3, #7
 8002230:	e00c      	b.n	800224c <HAL_GPIO_Init+0x240>
 8002232:	2306      	movs	r3, #6
 8002234:	e00a      	b.n	800224c <HAL_GPIO_Init+0x240>
 8002236:	2305      	movs	r3, #5
 8002238:	e008      	b.n	800224c <HAL_GPIO_Init+0x240>
 800223a:	2304      	movs	r3, #4
 800223c:	e006      	b.n	800224c <HAL_GPIO_Init+0x240>
 800223e:	2303      	movs	r3, #3
 8002240:	e004      	b.n	800224c <HAL_GPIO_Init+0x240>
 8002242:	2302      	movs	r3, #2
 8002244:	e002      	b.n	800224c <HAL_GPIO_Init+0x240>
 8002246:	2301      	movs	r3, #1
 8002248:	e000      	b.n	800224c <HAL_GPIO_Init+0x240>
 800224a:	2300      	movs	r3, #0
 800224c:	69fa      	ldr	r2, [r7, #28]
 800224e:	f002 0203 	and.w	r2, r2, #3
 8002252:	0092      	lsls	r2, r2, #2
 8002254:	4093      	lsls	r3, r2
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4313      	orrs	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800225c:	4935      	ldr	r1, [pc, #212]	@ (8002334 <HAL_GPIO_Init+0x328>)
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	089b      	lsrs	r3, r3, #2
 8002262:	3302      	adds	r3, #2
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800226a:	4b3d      	ldr	r3, [pc, #244]	@ (8002360 <HAL_GPIO_Init+0x354>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	43db      	mvns	r3, r3
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4013      	ands	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	4313      	orrs	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800228e:	4a34      	ldr	r2, [pc, #208]	@ (8002360 <HAL_GPIO_Init+0x354>)
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002294:	4b32      	ldr	r3, [pc, #200]	@ (8002360 <HAL_GPIO_Init+0x354>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	43db      	mvns	r3, r3
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4013      	ands	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d003      	beq.n	80022b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022b8:	4a29      	ldr	r2, [pc, #164]	@ (8002360 <HAL_GPIO_Init+0x354>)
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022be:	4b28      	ldr	r3, [pc, #160]	@ (8002360 <HAL_GPIO_Init+0x354>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	43db      	mvns	r3, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4013      	ands	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	4313      	orrs	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022e2:	4a1f      	ldr	r2, [pc, #124]	@ (8002360 <HAL_GPIO_Init+0x354>)
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002360 <HAL_GPIO_Init+0x354>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	43db      	mvns	r3, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d003      	beq.n	800230c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	4313      	orrs	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800230c:	4a14      	ldr	r2, [pc, #80]	@ (8002360 <HAL_GPIO_Init+0x354>)
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	3301      	adds	r3, #1
 8002316:	61fb      	str	r3, [r7, #28]
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	2b0f      	cmp	r3, #15
 800231c:	f67f ae86 	bls.w	800202c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002320:	bf00      	nop
 8002322:	bf00      	nop
 8002324:	3724      	adds	r7, #36	@ 0x24
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	40023800 	.word	0x40023800
 8002334:	40013800 	.word	0x40013800
 8002338:	40020000 	.word	0x40020000
 800233c:	40020400 	.word	0x40020400
 8002340:	40020800 	.word	0x40020800
 8002344:	40020c00 	.word	0x40020c00
 8002348:	40021000 	.word	0x40021000
 800234c:	40021400 	.word	0x40021400
 8002350:	40021800 	.word	0x40021800
 8002354:	40021c00 	.word	0x40021c00
 8002358:	40022000 	.word	0x40022000
 800235c:	40022400 	.word	0x40022400
 8002360:	40013c00 	.word	0x40013c00

08002364 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	691a      	ldr	r2, [r3, #16]
 8002374:	887b      	ldrh	r3, [r7, #2]
 8002376:	4013      	ands	r3, r2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d002      	beq.n	8002382 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800237c:	2301      	movs	r3, #1
 800237e:	73fb      	strb	r3, [r7, #15]
 8002380:	e001      	b.n	8002386 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002382:	2300      	movs	r3, #0
 8002384:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002386:	7bfb      	ldrb	r3, [r7, #15]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3714      	adds	r7, #20
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	807b      	strh	r3, [r7, #2]
 80023a0:	4613      	mov	r3, r2
 80023a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023a4:	787b      	ldrb	r3, [r7, #1]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023aa:	887a      	ldrh	r2, [r7, #2]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80023b0:	e003      	b.n	80023ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80023b2:	887b      	ldrh	r3, [r7, #2]
 80023b4:	041a      	lsls	r2, r3, #16
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	619a      	str	r2, [r3, #24]
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
	...

080023c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80023d0:	2300      	movs	r3, #0
 80023d2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e291      	b.n	8002902 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f000 8087 	beq.w	80024fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023ec:	4b96      	ldr	r3, [pc, #600]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 030c 	and.w	r3, r3, #12
 80023f4:	2b04      	cmp	r3, #4
 80023f6:	d00c      	beq.n	8002412 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023f8:	4b93      	ldr	r3, [pc, #588]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 030c 	and.w	r3, r3, #12
 8002400:	2b08      	cmp	r3, #8
 8002402:	d112      	bne.n	800242a <HAL_RCC_OscConfig+0x62>
 8002404:	4b90      	ldr	r3, [pc, #576]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800240c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002410:	d10b      	bne.n	800242a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002412:	4b8d      	ldr	r3, [pc, #564]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d06c      	beq.n	80024f8 <HAL_RCC_OscConfig+0x130>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d168      	bne.n	80024f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e26b      	b.n	8002902 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002432:	d106      	bne.n	8002442 <HAL_RCC_OscConfig+0x7a>
 8002434:	4b84      	ldr	r3, [pc, #528]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a83      	ldr	r2, [pc, #524]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 800243a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800243e:	6013      	str	r3, [r2, #0]
 8002440:	e02e      	b.n	80024a0 <HAL_RCC_OscConfig+0xd8>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10c      	bne.n	8002464 <HAL_RCC_OscConfig+0x9c>
 800244a:	4b7f      	ldr	r3, [pc, #508]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a7e      	ldr	r2, [pc, #504]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 8002450:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	4b7c      	ldr	r3, [pc, #496]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a7b      	ldr	r2, [pc, #492]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 800245c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	e01d      	b.n	80024a0 <HAL_RCC_OscConfig+0xd8>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800246c:	d10c      	bne.n	8002488 <HAL_RCC_OscConfig+0xc0>
 800246e:	4b76      	ldr	r3, [pc, #472]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a75      	ldr	r2, [pc, #468]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 8002474:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	4b73      	ldr	r3, [pc, #460]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a72      	ldr	r2, [pc, #456]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 8002480:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	e00b      	b.n	80024a0 <HAL_RCC_OscConfig+0xd8>
 8002488:	4b6f      	ldr	r3, [pc, #444]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a6e      	ldr	r2, [pc, #440]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 800248e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002492:	6013      	str	r3, [r2, #0]
 8002494:	4b6c      	ldr	r3, [pc, #432]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a6b      	ldr	r2, [pc, #428]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 800249a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800249e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d013      	beq.n	80024d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a8:	f7ff f8c8 	bl	800163c <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b0:	f7ff f8c4 	bl	800163c <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b64      	cmp	r3, #100	@ 0x64
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e21f      	b.n	8002902 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c2:	4b61      	ldr	r3, [pc, #388]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0f0      	beq.n	80024b0 <HAL_RCC_OscConfig+0xe8>
 80024ce:	e014      	b.n	80024fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d0:	f7ff f8b4 	bl	800163c <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d8:	f7ff f8b0 	bl	800163c <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b64      	cmp	r3, #100	@ 0x64
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e20b      	b.n	8002902 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ea:	4b57      	ldr	r3, [pc, #348]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f0      	bne.n	80024d8 <HAL_RCC_OscConfig+0x110>
 80024f6:	e000      	b.n	80024fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d069      	beq.n	80025da <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002506:	4b50      	ldr	r3, [pc, #320]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 030c 	and.w	r3, r3, #12
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00b      	beq.n	800252a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002512:	4b4d      	ldr	r3, [pc, #308]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 030c 	and.w	r3, r3, #12
 800251a:	2b08      	cmp	r3, #8
 800251c:	d11c      	bne.n	8002558 <HAL_RCC_OscConfig+0x190>
 800251e:	4b4a      	ldr	r3, [pc, #296]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d116      	bne.n	8002558 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800252a:	4b47      	ldr	r3, [pc, #284]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d005      	beq.n	8002542 <HAL_RCC_OscConfig+0x17a>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d001      	beq.n	8002542 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e1df      	b.n	8002902 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002542:	4b41      	ldr	r3, [pc, #260]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	493d      	ldr	r1, [pc, #244]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 8002552:	4313      	orrs	r3, r2
 8002554:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002556:	e040      	b.n	80025da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d023      	beq.n	80025a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002560:	4b39      	ldr	r3, [pc, #228]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a38      	ldr	r2, [pc, #224]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 8002566:	f043 0301 	orr.w	r3, r3, #1
 800256a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256c:	f7ff f866 	bl	800163c <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002574:	f7ff f862 	bl	800163c <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e1bd      	b.n	8002902 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002586:	4b30      	ldr	r3, [pc, #192]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0f0      	beq.n	8002574 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002592:	4b2d      	ldr	r3, [pc, #180]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	4929      	ldr	r1, [pc, #164]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	600b      	str	r3, [r1, #0]
 80025a6:	e018      	b.n	80025da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025a8:	4b27      	ldr	r3, [pc, #156]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a26      	ldr	r2, [pc, #152]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 80025ae:	f023 0301 	bic.w	r3, r3, #1
 80025b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b4:	f7ff f842 	bl	800163c <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025bc:	f7ff f83e 	bl	800163c <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e199      	b.n	8002902 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1f0      	bne.n	80025bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d038      	beq.n	8002658 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d019      	beq.n	8002622 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ee:	4b16      	ldr	r3, [pc, #88]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 80025f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025f2:	4a15      	ldr	r2, [pc, #84]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025fa:	f7ff f81f 	bl	800163c <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002602:	f7ff f81b 	bl	800163c <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e176      	b.n	8002902 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002614:	4b0c      	ldr	r3, [pc, #48]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 8002616:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0f0      	beq.n	8002602 <HAL_RCC_OscConfig+0x23a>
 8002620:	e01a      	b.n	8002658 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002622:	4b09      	ldr	r3, [pc, #36]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 8002624:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002626:	4a08      	ldr	r2, [pc, #32]	@ (8002648 <HAL_RCC_OscConfig+0x280>)
 8002628:	f023 0301 	bic.w	r3, r3, #1
 800262c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262e:	f7ff f805 	bl	800163c <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002634:	e00a      	b.n	800264c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002636:	f7ff f801 	bl	800163c <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d903      	bls.n	800264c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e15c      	b.n	8002902 <HAL_RCC_OscConfig+0x53a>
 8002648:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800264c:	4b91      	ldr	r3, [pc, #580]	@ (8002894 <HAL_RCC_OscConfig+0x4cc>)
 800264e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1ee      	bne.n	8002636 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 80a4 	beq.w	80027ae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002666:	4b8b      	ldr	r3, [pc, #556]	@ (8002894 <HAL_RCC_OscConfig+0x4cc>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10d      	bne.n	800268e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002672:	4b88      	ldr	r3, [pc, #544]	@ (8002894 <HAL_RCC_OscConfig+0x4cc>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002676:	4a87      	ldr	r2, [pc, #540]	@ (8002894 <HAL_RCC_OscConfig+0x4cc>)
 8002678:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800267c:	6413      	str	r3, [r2, #64]	@ 0x40
 800267e:	4b85      	ldr	r3, [pc, #532]	@ (8002894 <HAL_RCC_OscConfig+0x4cc>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002686:	60bb      	str	r3, [r7, #8]
 8002688:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800268a:	2301      	movs	r3, #1
 800268c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800268e:	4b82      	ldr	r3, [pc, #520]	@ (8002898 <HAL_RCC_OscConfig+0x4d0>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002696:	2b00      	cmp	r3, #0
 8002698:	d118      	bne.n	80026cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800269a:	4b7f      	ldr	r3, [pc, #508]	@ (8002898 <HAL_RCC_OscConfig+0x4d0>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a7e      	ldr	r2, [pc, #504]	@ (8002898 <HAL_RCC_OscConfig+0x4d0>)
 80026a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026a6:	f7fe ffc9 	bl	800163c <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ae:	f7fe ffc5 	bl	800163c <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b64      	cmp	r3, #100	@ 0x64
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e120      	b.n	8002902 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026c0:	4b75      	ldr	r3, [pc, #468]	@ (8002898 <HAL_RCC_OscConfig+0x4d0>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0f0      	beq.n	80026ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d106      	bne.n	80026e2 <HAL_RCC_OscConfig+0x31a>
 80026d4:	4b6f      	ldr	r3, [pc, #444]	@ (8002894 <HAL_RCC_OscConfig+0x4cc>)
 80026d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026d8:	4a6e      	ldr	r2, [pc, #440]	@ (8002894 <HAL_RCC_OscConfig+0x4cc>)
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	6713      	str	r3, [r2, #112]	@ 0x70
 80026e0:	e02d      	b.n	800273e <HAL_RCC_OscConfig+0x376>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10c      	bne.n	8002704 <HAL_RCC_OscConfig+0x33c>
 80026ea:	4b6a      	ldr	r3, [pc, #424]	@ (8002894 <HAL_RCC_OscConfig+0x4cc>)
 80026ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ee:	4a69      	ldr	r2, [pc, #420]	@ (8002894 <HAL_RCC_OscConfig+0x4cc>)
 80026f0:	f023 0301 	bic.w	r3, r3, #1
 80026f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80026f6:	4b67      	ldr	r3, [pc, #412]	@ (8002894 <HAL_RCC_OscConfig+0x4cc>)
 80026f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026fa:	4a66      	ldr	r2, [pc, #408]	@ (8002894 <HAL_RCC_OscConfig+0x4cc>)
 80026fc:	f023 0304 	bic.w	r3, r3, #4
 8002700:	6713      	str	r3, [r2, #112]	@ 0x70
 8002702:	e01c      	b.n	800273e <HAL_RCC_OscConfig+0x376>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	2b05      	cmp	r3, #5
 800270a:	d10c      	bne.n	8002726 <HAL_RCC_OscConfig+0x35e>
 800270c:	4b61      	ldr	r3, [pc, #388]	@ (8002894 <HAL_RCC_OscConfig+0x4cc>)
 800270e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002710:	4a60      	ldr	r2, [pc, #384]	@ (8002894 <HAL_RCC_OscConfig+0x4cc>)
 8002712:	f043 0304 	orr.w	r3, r3, #4
 8002716:	6713      	str	r3, [r2, #112]	@ 0x70
 8002718:	4b5e      	ldr	r3, [pc, #376]	@ (8002894 <HAL_RCC_OscConfig+0x4cc>)
 800271a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800271c:	4a5d      	ldr	r2, [pc, #372]	@ (8002894 <HAL_RCC_OscConfig+0x4cc>)
 800271e:	f043 0301 	orr.w	r3, r3, #1
 8002722:	6713      	str	r3, [r2, #112]	@ 0x70
 8002724:	e00b      	b.n	800273e <HAL_RCC_OscConfig+0x376>
 8002726:	4b5b      	ldr	r3, [pc, #364]	@ (8002894 <HAL_RCC_OscConfig+0x4cc>)
 8002728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800272a:	4a5a      	ldr	r2, [pc, #360]	@ (8002894 <HAL_RCC_OscConfig+0x4cc>)
 800272c:	f023 0301 	bic.w	r3, r3, #1
 8002730:	6713      	str	r3, [r2, #112]	@ 0x70
 8002732:	4b58      	ldr	r3, [pc, #352]	@ (8002894 <HAL_RCC_OscConfig+0x4cc>)
 8002734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002736:	4a57      	ldr	r2, [pc, #348]	@ (8002894 <HAL_RCC_OscConfig+0x4cc>)
 8002738:	f023 0304 	bic.w	r3, r3, #4
 800273c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d015      	beq.n	8002772 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002746:	f7fe ff79 	bl	800163c <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800274c:	e00a      	b.n	8002764 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800274e:	f7fe ff75 	bl	800163c <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	f241 3288 	movw	r2, #5000	@ 0x1388
 800275c:	4293      	cmp	r3, r2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e0ce      	b.n	8002902 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002764:	4b4b      	ldr	r3, [pc, #300]	@ (8002894 <HAL_RCC_OscConfig+0x4cc>)
 8002766:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0ee      	beq.n	800274e <HAL_RCC_OscConfig+0x386>
 8002770:	e014      	b.n	800279c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002772:	f7fe ff63 	bl	800163c <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002778:	e00a      	b.n	8002790 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277a:	f7fe ff5f 	bl	800163c <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002788:	4293      	cmp	r3, r2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e0b8      	b.n	8002902 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002790:	4b40      	ldr	r3, [pc, #256]	@ (8002894 <HAL_RCC_OscConfig+0x4cc>)
 8002792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1ee      	bne.n	800277a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800279c:	7dfb      	ldrb	r3, [r7, #23]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d105      	bne.n	80027ae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a2:	4b3c      	ldr	r3, [pc, #240]	@ (8002894 <HAL_RCC_OscConfig+0x4cc>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a6:	4a3b      	ldr	r2, [pc, #236]	@ (8002894 <HAL_RCC_OscConfig+0x4cc>)
 80027a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027ac:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 80a4 	beq.w	8002900 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027b8:	4b36      	ldr	r3, [pc, #216]	@ (8002894 <HAL_RCC_OscConfig+0x4cc>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 030c 	and.w	r3, r3, #12
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	d06b      	beq.n	800289c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d149      	bne.n	8002860 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027cc:	4b31      	ldr	r3, [pc, #196]	@ (8002894 <HAL_RCC_OscConfig+0x4cc>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a30      	ldr	r2, [pc, #192]	@ (8002894 <HAL_RCC_OscConfig+0x4cc>)
 80027d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d8:	f7fe ff30 	bl	800163c <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e0:	f7fe ff2c 	bl	800163c <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e087      	b.n	8002902 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f2:	4b28      	ldr	r3, [pc, #160]	@ (8002894 <HAL_RCC_OscConfig+0x4cc>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f0      	bne.n	80027e0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69da      	ldr	r2, [r3, #28]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280c:	019b      	lsls	r3, r3, #6
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002814:	085b      	lsrs	r3, r3, #1
 8002816:	3b01      	subs	r3, #1
 8002818:	041b      	lsls	r3, r3, #16
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002820:	061b      	lsls	r3, r3, #24
 8002822:	4313      	orrs	r3, r2
 8002824:	4a1b      	ldr	r2, [pc, #108]	@ (8002894 <HAL_RCC_OscConfig+0x4cc>)
 8002826:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800282a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800282c:	4b19      	ldr	r3, [pc, #100]	@ (8002894 <HAL_RCC_OscConfig+0x4cc>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a18      	ldr	r2, [pc, #96]	@ (8002894 <HAL_RCC_OscConfig+0x4cc>)
 8002832:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002836:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002838:	f7fe ff00 	bl	800163c <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002840:	f7fe fefc 	bl	800163c <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e057      	b.n	8002902 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002852:	4b10      	ldr	r3, [pc, #64]	@ (8002894 <HAL_RCC_OscConfig+0x4cc>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d0f0      	beq.n	8002840 <HAL_RCC_OscConfig+0x478>
 800285e:	e04f      	b.n	8002900 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002860:	4b0c      	ldr	r3, [pc, #48]	@ (8002894 <HAL_RCC_OscConfig+0x4cc>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a0b      	ldr	r2, [pc, #44]	@ (8002894 <HAL_RCC_OscConfig+0x4cc>)
 8002866:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800286a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286c:	f7fe fee6 	bl	800163c <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002874:	f7fe fee2 	bl	800163c <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e03d      	b.n	8002902 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002886:	4b03      	ldr	r3, [pc, #12]	@ (8002894 <HAL_RCC_OscConfig+0x4cc>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f0      	bne.n	8002874 <HAL_RCC_OscConfig+0x4ac>
 8002892:	e035      	b.n	8002900 <HAL_RCC_OscConfig+0x538>
 8002894:	40023800 	.word	0x40023800
 8002898:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800289c:	4b1b      	ldr	r3, [pc, #108]	@ (800290c <HAL_RCC_OscConfig+0x544>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d028      	beq.n	80028fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d121      	bne.n	80028fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d11a      	bne.n	80028fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80028cc:	4013      	ands	r3, r2
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028d2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d111      	bne.n	80028fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e2:	085b      	lsrs	r3, r3, #1
 80028e4:	3b01      	subs	r3, #1
 80028e6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d107      	bne.n	80028fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028f6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d001      	beq.n	8002900 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e000      	b.n	8002902 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3718      	adds	r7, #24
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40023800 	.word	0x40023800

08002910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800291a:	2300      	movs	r3, #0
 800291c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e0d0      	b.n	8002aca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002928:	4b6a      	ldr	r3, [pc, #424]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 030f 	and.w	r3, r3, #15
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d910      	bls.n	8002958 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002936:	4b67      	ldr	r3, [pc, #412]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f023 020f 	bic.w	r2, r3, #15
 800293e:	4965      	ldr	r1, [pc, #404]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	4313      	orrs	r3, r2
 8002944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002946:	4b63      	ldr	r3, [pc, #396]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	429a      	cmp	r2, r3
 8002952:	d001      	beq.n	8002958 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e0b8      	b.n	8002aca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d020      	beq.n	80029a6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	d005      	beq.n	800297c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002970:	4b59      	ldr	r3, [pc, #356]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	4a58      	ldr	r2, [pc, #352]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8002976:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800297a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0308 	and.w	r3, r3, #8
 8002984:	2b00      	cmp	r3, #0
 8002986:	d005      	beq.n	8002994 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002988:	4b53      	ldr	r3, [pc, #332]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1c8>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	4a52      	ldr	r2, [pc, #328]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1c8>)
 800298e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002992:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002994:	4b50      	ldr	r3, [pc, #320]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	494d      	ldr	r1, [pc, #308]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1c8>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d040      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d107      	bne.n	80029ca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ba:	4b47      	ldr	r3, [pc, #284]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1c8>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d115      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e07f      	b.n	8002aca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d107      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029d2:	4b41      	ldr	r3, [pc, #260]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1c8>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d109      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e073      	b.n	8002aca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1c8>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e06b      	b.n	8002aca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029f2:	4b39      	ldr	r3, [pc, #228]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1c8>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f023 0203 	bic.w	r2, r3, #3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	4936      	ldr	r1, [pc, #216]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a04:	f7fe fe1a 	bl	800163c <HAL_GetTick>
 8002a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a0a:	e00a      	b.n	8002a22 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a0c:	f7fe fe16 	bl	800163c <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e053      	b.n	8002aca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a22:	4b2d      	ldr	r3, [pc, #180]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 020c 	and.w	r2, r3, #12
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d1eb      	bne.n	8002a0c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a34:	4b27      	ldr	r3, [pc, #156]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 030f 	and.w	r3, r3, #15
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d210      	bcs.n	8002a64 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a42:	4b24      	ldr	r3, [pc, #144]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f023 020f 	bic.w	r2, r3, #15
 8002a4a:	4922      	ldr	r1, [pc, #136]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a52:	4b20      	ldr	r3, [pc, #128]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d001      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e032      	b.n	8002aca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d008      	beq.n	8002a82 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a70:	4b19      	ldr	r3, [pc, #100]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	4916      	ldr	r1, [pc, #88]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d009      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a8e:	4b12      	ldr	r3, [pc, #72]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	490e      	ldr	r1, [pc, #56]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002aa2:	f000 f821 	bl	8002ae8 <HAL_RCC_GetSysClockFreq>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	091b      	lsrs	r3, r3, #4
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	490a      	ldr	r1, [pc, #40]	@ (8002adc <HAL_RCC_ClockConfig+0x1cc>)
 8002ab4:	5ccb      	ldrb	r3, [r1, r3]
 8002ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aba:	4a09      	ldr	r2, [pc, #36]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1d0>)
 8002abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002abe:	4b09      	ldr	r3, [pc, #36]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1d4>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7fe fd76 	bl	80015b4 <HAL_InitTick>

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40023c00 	.word	0x40023c00
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	08008e90 	.word	0x08008e90
 8002ae0:	2000001c 	.word	0x2000001c
 8002ae4:	20000020 	.word	0x20000020

08002ae8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002aec:	b090      	sub	sp, #64	@ 0x40
 8002aee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002af0:	2300      	movs	r3, #0
 8002af2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002af4:	2300      	movs	r3, #0
 8002af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002af8:	2300      	movs	r3, #0
 8002afa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002afc:	2300      	movs	r3, #0
 8002afe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b00:	4b59      	ldr	r3, [pc, #356]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f003 030c 	and.w	r3, r3, #12
 8002b08:	2b08      	cmp	r3, #8
 8002b0a:	d00d      	beq.n	8002b28 <HAL_RCC_GetSysClockFreq+0x40>
 8002b0c:	2b08      	cmp	r3, #8
 8002b0e:	f200 80a1 	bhi.w	8002c54 <HAL_RCC_GetSysClockFreq+0x16c>
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d002      	beq.n	8002b1c <HAL_RCC_GetSysClockFreq+0x34>
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	d003      	beq.n	8002b22 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b1a:	e09b      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b1c:	4b53      	ldr	r3, [pc, #332]	@ (8002c6c <HAL_RCC_GetSysClockFreq+0x184>)
 8002b1e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b20:	e09b      	b.n	8002c5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b22:	4b53      	ldr	r3, [pc, #332]	@ (8002c70 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b24:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b26:	e098      	b.n	8002c5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b28:	4b4f      	ldr	r3, [pc, #316]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b30:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002b32:	4b4d      	ldr	r3, [pc, #308]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d028      	beq.n	8002b90 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b3e:	4b4a      	ldr	r3, [pc, #296]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	099b      	lsrs	r3, r3, #6
 8002b44:	2200      	movs	r2, #0
 8002b46:	623b      	str	r3, [r7, #32]
 8002b48:	627a      	str	r2, [r7, #36]	@ 0x24
 8002b4a:	6a3b      	ldr	r3, [r7, #32]
 8002b4c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b50:	2100      	movs	r1, #0
 8002b52:	4b47      	ldr	r3, [pc, #284]	@ (8002c70 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b54:	fb03 f201 	mul.w	r2, r3, r1
 8002b58:	2300      	movs	r3, #0
 8002b5a:	fb00 f303 	mul.w	r3, r0, r3
 8002b5e:	4413      	add	r3, r2
 8002b60:	4a43      	ldr	r2, [pc, #268]	@ (8002c70 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b62:	fba0 1202 	umull	r1, r2, r0, r2
 8002b66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b68:	460a      	mov	r2, r1
 8002b6a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002b6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b6e:	4413      	add	r3, r2
 8002b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b74:	2200      	movs	r2, #0
 8002b76:	61bb      	str	r3, [r7, #24]
 8002b78:	61fa      	str	r2, [r7, #28]
 8002b7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002b82:	f7fd fb9d 	bl	80002c0 <__aeabi_uldivmod>
 8002b86:	4602      	mov	r2, r0
 8002b88:	460b      	mov	r3, r1
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b8e:	e053      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b90:	4b35      	ldr	r3, [pc, #212]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	099b      	lsrs	r3, r3, #6
 8002b96:	2200      	movs	r2, #0
 8002b98:	613b      	str	r3, [r7, #16]
 8002b9a:	617a      	str	r2, [r7, #20]
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002ba2:	f04f 0b00 	mov.w	fp, #0
 8002ba6:	4652      	mov	r2, sl
 8002ba8:	465b      	mov	r3, fp
 8002baa:	f04f 0000 	mov.w	r0, #0
 8002bae:	f04f 0100 	mov.w	r1, #0
 8002bb2:	0159      	lsls	r1, r3, #5
 8002bb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bb8:	0150      	lsls	r0, r2, #5
 8002bba:	4602      	mov	r2, r0
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	ebb2 080a 	subs.w	r8, r2, sl
 8002bc2:	eb63 090b 	sbc.w	r9, r3, fp
 8002bc6:	f04f 0200 	mov.w	r2, #0
 8002bca:	f04f 0300 	mov.w	r3, #0
 8002bce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002bd2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002bd6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002bda:	ebb2 0408 	subs.w	r4, r2, r8
 8002bde:	eb63 0509 	sbc.w	r5, r3, r9
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	00eb      	lsls	r3, r5, #3
 8002bec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bf0:	00e2      	lsls	r2, r4, #3
 8002bf2:	4614      	mov	r4, r2
 8002bf4:	461d      	mov	r5, r3
 8002bf6:	eb14 030a 	adds.w	r3, r4, sl
 8002bfa:	603b      	str	r3, [r7, #0]
 8002bfc:	eb45 030b 	adc.w	r3, r5, fp
 8002c00:	607b      	str	r3, [r7, #4]
 8002c02:	f04f 0200 	mov.w	r2, #0
 8002c06:	f04f 0300 	mov.w	r3, #0
 8002c0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c0e:	4629      	mov	r1, r5
 8002c10:	028b      	lsls	r3, r1, #10
 8002c12:	4621      	mov	r1, r4
 8002c14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c18:	4621      	mov	r1, r4
 8002c1a:	028a      	lsls	r2, r1, #10
 8002c1c:	4610      	mov	r0, r2
 8002c1e:	4619      	mov	r1, r3
 8002c20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c22:	2200      	movs	r2, #0
 8002c24:	60bb      	str	r3, [r7, #8]
 8002c26:	60fa      	str	r2, [r7, #12]
 8002c28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c2c:	f7fd fb48 	bl	80002c0 <__aeabi_uldivmod>
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	4613      	mov	r3, r2
 8002c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002c38:	4b0b      	ldr	r3, [pc, #44]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	0c1b      	lsrs	r3, r3, #16
 8002c3e:	f003 0303 	and.w	r3, r3, #3
 8002c42:	3301      	adds	r3, #1
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002c48:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c50:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c52:	e002      	b.n	8002c5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c54:	4b05      	ldr	r3, [pc, #20]	@ (8002c6c <HAL_RCC_GetSysClockFreq+0x184>)
 8002c56:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3740      	adds	r7, #64	@ 0x40
 8002c60:	46bd      	mov	sp, r7
 8002c62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c66:	bf00      	nop
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	00f42400 	.word	0x00f42400
 8002c70:	017d7840 	.word	0x017d7840

08002c74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b088      	sub	sp, #32
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002c80:	2300      	movs	r3, #0
 8002c82:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002c84:	2300      	movs	r3, #0
 8002c86:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d012      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c9c:	4b69      	ldr	r3, [pc, #420]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	4a68      	ldr	r2, [pc, #416]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ca2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002ca6:	6093      	str	r3, [r2, #8]
 8002ca8:	4b66      	ldr	r3, [pc, #408]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cb0:	4964      	ldr	r1, [pc, #400]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d017      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002cce:	4b5d      	ldr	r3, [pc, #372]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cd4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cdc:	4959      	ldr	r1, [pc, #356]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ce8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002cec:	d101      	bne.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d017      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d0a:	4b4e      	ldr	r3, [pc, #312]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d10:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d18:	494a      	ldr	r1, [pc, #296]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d28:	d101      	bne.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002d36:	2301      	movs	r3, #1
 8002d38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002d46:	2301      	movs	r3, #1
 8002d48:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0320 	and.w	r3, r3, #32
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f000 808b 	beq.w	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d58:	4b3a      	ldr	r3, [pc, #232]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5c:	4a39      	ldr	r2, [pc, #228]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d62:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d64:	4b37      	ldr	r3, [pc, #220]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d6c:	60bb      	str	r3, [r7, #8]
 8002d6e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d70:	4b35      	ldr	r3, [pc, #212]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a34      	ldr	r2, [pc, #208]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d7c:	f7fe fc5e 	bl	800163c <HAL_GetTick>
 8002d80:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d84:	f7fe fc5a 	bl	800163c <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b64      	cmp	r3, #100	@ 0x64
 8002d90:	d901      	bls.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e357      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d96:	4b2c      	ldr	r3, [pc, #176]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0f0      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002da2:	4b28      	ldr	r3, [pc, #160]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002da6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002daa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d035      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d02e      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dc0:	4b20      	ldr	r3, [pc, #128]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002dc8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dca:	4b1e      	ldr	r3, [pc, #120]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dce:	4a1d      	ldr	r2, [pc, #116]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dd4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002dd6:	4b1b      	ldr	r3, [pc, #108]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dda:	4a1a      	ldr	r2, [pc, #104]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ddc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002de0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002de2:	4a18      	ldr	r2, [pc, #96]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002de8:	4b16      	ldr	r3, [pc, #88]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d114      	bne.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df4:	f7fe fc22 	bl	800163c <HAL_GetTick>
 8002df8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dfa:	e00a      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dfc:	f7fe fc1e 	bl	800163c <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e319      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e12:	4b0c      	ldr	r3, [pc, #48]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d0ee      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e2a:	d111      	bne.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002e2c:	4b05      	ldr	r3, [pc, #20]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002e38:	4b04      	ldr	r3, [pc, #16]	@ (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e3a:	400b      	ands	r3, r1
 8002e3c:	4901      	ldr	r1, [pc, #4]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	608b      	str	r3, [r1, #8]
 8002e42:	e00b      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002e44:	40023800 	.word	0x40023800
 8002e48:	40007000 	.word	0x40007000
 8002e4c:	0ffffcff 	.word	0x0ffffcff
 8002e50:	4baa      	ldr	r3, [pc, #680]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	4aa9      	ldr	r2, [pc, #676]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e56:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002e5a:	6093      	str	r3, [r2, #8]
 8002e5c:	4ba7      	ldr	r3, [pc, #668]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e5e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e68:	49a4      	ldr	r1, [pc, #656]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0310 	and.w	r3, r3, #16
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d010      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e7a:	4ba0      	ldr	r3, [pc, #640]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e80:	4a9e      	ldr	r2, [pc, #632]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e86:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002e8a:	4b9c      	ldr	r3, [pc, #624]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e8c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e94:	4999      	ldr	r1, [pc, #612]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00a      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ea8:	4b94      	ldr	r3, [pc, #592]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eae:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002eb6:	4991      	ldr	r1, [pc, #580]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00a      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002eca:	4b8c      	ldr	r3, [pc, #560]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ed0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ed8:	4988      	ldr	r1, [pc, #544]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00a      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002eec:	4b83      	ldr	r3, [pc, #524]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ef2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002efa:	4980      	ldr	r1, [pc, #512]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00a      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f0e:	4b7b      	ldr	r3, [pc, #492]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f14:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f1c:	4977      	ldr	r1, [pc, #476]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00a      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f30:	4b72      	ldr	r3, [pc, #456]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f36:	f023 0203 	bic.w	r2, r3, #3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f3e:	496f      	ldr	r1, [pc, #444]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00a      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f52:	4b6a      	ldr	r3, [pc, #424]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f58:	f023 020c 	bic.w	r2, r3, #12
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f60:	4966      	ldr	r1, [pc, #408]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00a      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f74:	4b61      	ldr	r3, [pc, #388]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f7a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f82:	495e      	ldr	r1, [pc, #376]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00a      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f96:	4b59      	ldr	r3, [pc, #356]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f9c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fa4:	4955      	ldr	r1, [pc, #340]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00a      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fb8:	4b50      	ldr	r3, [pc, #320]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fbe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fc6:	494d      	ldr	r1, [pc, #308]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00a      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002fda:	4b48      	ldr	r3, [pc, #288]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fe0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fe8:	4944      	ldr	r1, [pc, #272]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00a      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002ffc:	4b3f      	ldr	r3, [pc, #252]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003002:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800300a:	493c      	ldr	r1, [pc, #240]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800300c:	4313      	orrs	r3, r2
 800300e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00a      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800301e:	4b37      	ldr	r3, [pc, #220]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003020:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003024:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800302c:	4933      	ldr	r1, [pc, #204]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800302e:	4313      	orrs	r3, r2
 8003030:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00a      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003040:	4b2e      	ldr	r3, [pc, #184]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003046:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800304e:	492b      	ldr	r1, [pc, #172]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003050:	4313      	orrs	r3, r2
 8003052:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d011      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003062:	4b26      	ldr	r3, [pc, #152]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003064:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003068:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003070:	4922      	ldr	r1, [pc, #136]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003072:	4313      	orrs	r3, r2
 8003074:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800307c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003080:	d101      	bne.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003082:	2301      	movs	r3, #1
 8003084:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003092:	2301      	movs	r3, #1
 8003094:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00a      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030a2:	4b16      	ldr	r3, [pc, #88]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030a8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030b0:	4912      	ldr	r1, [pc, #72]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00b      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80030c4:	4b0d      	ldr	r3, [pc, #52]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ca:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030d4:	4909      	ldr	r1, [pc, #36]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d006      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f000 80d9 	beq.w	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80030f0:	4b02      	ldr	r3, [pc, #8]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a01      	ldr	r2, [pc, #4]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80030fa:	e001      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80030fc:	40023800 	.word	0x40023800
 8003100:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003102:	f7fe fa9b 	bl	800163c <HAL_GetTick>
 8003106:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003108:	e008      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800310a:	f7fe fa97 	bl	800163c <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b64      	cmp	r3, #100	@ 0x64
 8003116:	d901      	bls.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e194      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800311c:	4b6c      	ldr	r3, [pc, #432]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1f0      	bne.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b00      	cmp	r3, #0
 8003132:	d021      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003138:	2b00      	cmp	r3, #0
 800313a:	d11d      	bne.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800313c:	4b64      	ldr	r3, [pc, #400]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800313e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003142:	0c1b      	lsrs	r3, r3, #16
 8003144:	f003 0303 	and.w	r3, r3, #3
 8003148:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800314a:	4b61      	ldr	r3, [pc, #388]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800314c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003150:	0e1b      	lsrs	r3, r3, #24
 8003152:	f003 030f 	and.w	r3, r3, #15
 8003156:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	019a      	lsls	r2, r3, #6
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	041b      	lsls	r3, r3, #16
 8003162:	431a      	orrs	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	061b      	lsls	r3, r3, #24
 8003168:	431a      	orrs	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	071b      	lsls	r3, r3, #28
 8003170:	4957      	ldr	r1, [pc, #348]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003172:	4313      	orrs	r3, r2
 8003174:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d004      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003188:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800318c:	d00a      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003196:	2b00      	cmp	r3, #0
 8003198:	d02e      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031a2:	d129      	bne.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80031a4:	4b4a      	ldr	r3, [pc, #296]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031aa:	0c1b      	lsrs	r3, r3, #16
 80031ac:	f003 0303 	and.w	r3, r3, #3
 80031b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80031b2:	4b47      	ldr	r3, [pc, #284]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031b8:	0f1b      	lsrs	r3, r3, #28
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	019a      	lsls	r2, r3, #6
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	041b      	lsls	r3, r3, #16
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	061b      	lsls	r3, r3, #24
 80031d2:	431a      	orrs	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	071b      	lsls	r3, r3, #28
 80031d8:	493d      	ldr	r1, [pc, #244]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80031e0:	4b3b      	ldr	r3, [pc, #236]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031e6:	f023 021f 	bic.w	r2, r3, #31
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ee:	3b01      	subs	r3, #1
 80031f0:	4937      	ldr	r1, [pc, #220]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d01d      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003204:	4b32      	ldr	r3, [pc, #200]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003206:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800320a:	0e1b      	lsrs	r3, r3, #24
 800320c:	f003 030f 	and.w	r3, r3, #15
 8003210:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003212:	4b2f      	ldr	r3, [pc, #188]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003214:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003218:	0f1b      	lsrs	r3, r3, #28
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	019a      	lsls	r2, r3, #6
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	041b      	lsls	r3, r3, #16
 800322c:	431a      	orrs	r2, r3
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	061b      	lsls	r3, r3, #24
 8003232:	431a      	orrs	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	071b      	lsls	r3, r3, #28
 8003238:	4925      	ldr	r1, [pc, #148]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800323a:	4313      	orrs	r3, r2
 800323c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d011      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	019a      	lsls	r2, r3, #6
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	041b      	lsls	r3, r3, #16
 8003258:	431a      	orrs	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	061b      	lsls	r3, r3, #24
 8003260:	431a      	orrs	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	071b      	lsls	r3, r3, #28
 8003268:	4919      	ldr	r1, [pc, #100]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800326a:	4313      	orrs	r3, r2
 800326c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003270:	4b17      	ldr	r3, [pc, #92]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a16      	ldr	r2, [pc, #88]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003276:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800327a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800327c:	f7fe f9de 	bl	800163c <HAL_GetTick>
 8003280:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003282:	e008      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003284:	f7fe f9da 	bl	800163c <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b64      	cmp	r3, #100	@ 0x64
 8003290:	d901      	bls.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e0d7      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003296:	4b0e      	ldr	r3, [pc, #56]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d0f0      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	f040 80cd 	bne.w	8003444 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80032aa:	4b09      	ldr	r3, [pc, #36]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a08      	ldr	r2, [pc, #32]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032b6:	f7fe f9c1 	bl	800163c <HAL_GetTick>
 80032ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032bc:	e00a      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032be:	f7fe f9bd 	bl	800163c <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b64      	cmp	r3, #100	@ 0x64
 80032ca:	d903      	bls.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e0ba      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80032d0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032d4:	4b5e      	ldr	r3, [pc, #376]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032e0:	d0ed      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d009      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d02e      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003306:	2b00      	cmp	r3, #0
 8003308:	d12a      	bne.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800330a:	4b51      	ldr	r3, [pc, #324]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800330c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003310:	0c1b      	lsrs	r3, r3, #16
 8003312:	f003 0303 	and.w	r3, r3, #3
 8003316:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003318:	4b4d      	ldr	r3, [pc, #308]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800331a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800331e:	0f1b      	lsrs	r3, r3, #28
 8003320:	f003 0307 	and.w	r3, r3, #7
 8003324:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	019a      	lsls	r2, r3, #6
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	041b      	lsls	r3, r3, #16
 8003330:	431a      	orrs	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	061b      	lsls	r3, r3, #24
 8003338:	431a      	orrs	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	071b      	lsls	r3, r3, #28
 800333e:	4944      	ldr	r1, [pc, #272]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003340:	4313      	orrs	r3, r2
 8003342:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003346:	4b42      	ldr	r3, [pc, #264]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003348:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800334c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003354:	3b01      	subs	r3, #1
 8003356:	021b      	lsls	r3, r3, #8
 8003358:	493d      	ldr	r1, [pc, #244]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800335a:	4313      	orrs	r3, r2
 800335c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d022      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003370:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003374:	d11d      	bne.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003376:	4b36      	ldr	r3, [pc, #216]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800337c:	0e1b      	lsrs	r3, r3, #24
 800337e:	f003 030f 	and.w	r3, r3, #15
 8003382:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003384:	4b32      	ldr	r3, [pc, #200]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800338a:	0f1b      	lsrs	r3, r3, #28
 800338c:	f003 0307 	and.w	r3, r3, #7
 8003390:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	019a      	lsls	r2, r3, #6
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	041b      	lsls	r3, r3, #16
 800339e:	431a      	orrs	r2, r3
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	061b      	lsls	r3, r3, #24
 80033a4:	431a      	orrs	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	071b      	lsls	r3, r3, #28
 80033aa:	4929      	ldr	r1, [pc, #164]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0308 	and.w	r3, r3, #8
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d028      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80033be:	4b24      	ldr	r3, [pc, #144]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033c4:	0e1b      	lsrs	r3, r3, #24
 80033c6:	f003 030f 	and.w	r3, r3, #15
 80033ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80033cc:	4b20      	ldr	r3, [pc, #128]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033d2:	0c1b      	lsrs	r3, r3, #16
 80033d4:	f003 0303 	and.w	r3, r3, #3
 80033d8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	019a      	lsls	r2, r3, #6
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	041b      	lsls	r3, r3, #16
 80033e4:	431a      	orrs	r2, r3
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	061b      	lsls	r3, r3, #24
 80033ea:	431a      	orrs	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	69db      	ldr	r3, [r3, #28]
 80033f0:	071b      	lsls	r3, r3, #28
 80033f2:	4917      	ldr	r1, [pc, #92]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80033fa:	4b15      	ldr	r3, [pc, #84]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003400:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003408:	4911      	ldr	r1, [pc, #68]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800340a:	4313      	orrs	r3, r2
 800340c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003410:	4b0f      	ldr	r3, [pc, #60]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a0e      	ldr	r2, [pc, #56]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003416:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800341a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800341c:	f7fe f90e 	bl	800163c <HAL_GetTick>
 8003420:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003422:	e008      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003424:	f7fe f90a 	bl	800163c <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b64      	cmp	r3, #100	@ 0x64
 8003430:	d901      	bls.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e007      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003436:	4b06      	ldr	r3, [pc, #24]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800343e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003442:	d1ef      	bne.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3720      	adds	r7, #32
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40023800 	.word	0x40023800

08003454 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e022      	b.n	80034ac <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d105      	bne.n	800347e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f7fd fec3 	bl	8001204 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2203      	movs	r2, #3
 8003482:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f814 	bl	80034b4 <HAL_SD_InitCard>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e00a      	b.n	80034ac <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80034b4:	b5b0      	push	{r4, r5, r7, lr}
 80034b6:	b08e      	sub	sp, #56	@ 0x38
 80034b8:	af04      	add	r7, sp, #16
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80034bc:	2300      	movs	r3, #0
 80034be:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80034c0:	2300      	movs	r3, #0
 80034c2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80034c4:	2300      	movs	r3, #0
 80034c6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80034c8:	2300      	movs	r3, #0
 80034ca:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80034cc:	2300      	movs	r3, #0
 80034ce:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80034d0:	2376      	movs	r3, #118	@ 0x76
 80034d2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681d      	ldr	r5, [r3, #0]
 80034d8:	466c      	mov	r4, sp
 80034da:	f107 0314 	add.w	r3, r7, #20
 80034de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80034e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80034e6:	f107 0308 	add.w	r3, r7, #8
 80034ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034ec:	4628      	mov	r0, r5
 80034ee:	f001 f8d9 	bl	80046a4 <SDMMC_Init>
 80034f2:	4603      	mov	r3, r0
 80034f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 80034f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e059      	b.n	80035b8 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003512:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f001 f90d 	bl	8004738 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800352c:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800352e:	2002      	movs	r0, #2
 8003530:	f7fe f890 	bl	8001654 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 ff59 	bl	80043ec <SD_PowerON>
 800353a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800353c:	6a3b      	ldr	r3, [r7, #32]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00b      	beq.n	800355a <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	431a      	orrs	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e02e      	b.n	80035b8 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 fe78 	bl	8004250 <SD_InitCard>
 8003560:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003562:	6a3b      	ldr	r3, [r7, #32]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00b      	beq.n	8003580 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003574:	6a3b      	ldr	r3, [r7, #32]
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e01b      	b.n	80035b8 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003588:	4618      	mov	r0, r3
 800358a:	f001 f967 	bl	800485c <SDMMC_CmdBlockLength>
 800358e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003590:	6a3b      	ldr	r3, [r7, #32]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00f      	beq.n	80035b6 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a09      	ldr	r2, [pc, #36]	@ (80035c0 <HAL_SD_InitCard+0x10c>)
 800359c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035a2:	6a3b      	ldr	r3, [r7, #32]
 80035a4:	431a      	orrs	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e000      	b.n	80035b8 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3728      	adds	r7, #40	@ 0x28
 80035bc:	46bd      	mov	sp, r7
 80035be:	bdb0      	pop	{r4, r5, r7, pc}
 80035c0:	004005ff 	.word	0x004005ff

080035c4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b08c      	sub	sp, #48	@ 0x30
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
 80035d0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d107      	bne.n	80035ec <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035e0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e0c3      	b.n	8003774 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	f040 80bc 	bne.w	8003772 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003600:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	441a      	add	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800360a:	429a      	cmp	r2, r3
 800360c:	d907      	bls.n	800361e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003612:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e0aa      	b.n	8003774 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2203      	movs	r2, #3
 8003622:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2200      	movs	r2, #0
 800362c:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800363c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003642:	4a4e      	ldr	r2, [pc, #312]	@ (800377c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8003644:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364a:	4a4d      	ldr	r2, [pc, #308]	@ (8003780 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800364c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003652:	2200      	movs	r2, #0
 8003654:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365a:	2200      	movs	r2, #0
 800365c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	3380      	adds	r3, #128	@ 0x80
 8003684:	4619      	mov	r1, r3
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	025b      	lsls	r3, r3, #9
 800368c:	089b      	lsrs	r3, r3, #2
 800368e:	f7fe f9c5 	bl	8001a1c <HAL_DMA_Start_IT>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d017      	beq.n	80036c8 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 80036a6:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a35      	ldr	r2, [pc, #212]	@ (8003784 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80036ae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e055      	b.n	8003774 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0208 	orr.w	r2, r2, #8
 80036d6:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d002      	beq.n	80036e6 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 80036e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036e2:	025b      	lsls	r3, r3, #9
 80036e4:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80036e6:	f04f 33ff 	mov.w	r3, #4294967295
 80036ea:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	025b      	lsls	r3, r3, #9
 80036f0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80036f2:	2390      	movs	r3, #144	@ 0x90
 80036f4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80036f6:	2302      	movs	r3, #2
 80036f8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80036fa:	2300      	movs	r3, #0
 80036fc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80036fe:	2301      	movs	r3, #1
 8003700:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f107 0210 	add.w	r2, r7, #16
 800370a:	4611      	mov	r1, r2
 800370c:	4618      	mov	r0, r3
 800370e:	f001 f879 	bl	8004804 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d90a      	bls.n	800372e <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2282      	movs	r2, #130	@ 0x82
 800371c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003724:	4618      	mov	r0, r3
 8003726:	f001 f8dd 	bl	80048e4 <SDMMC_CmdReadMultiBlock>
 800372a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800372c:	e009      	b.n	8003742 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2281      	movs	r2, #129	@ 0x81
 8003732:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800373a:	4618      	mov	r0, r3
 800373c:	f001 f8b0 	bl	80048a0 <SDMMC_CmdReadSingleBlock>
 8003740:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003744:	2b00      	cmp	r3, #0
 8003746:	d012      	beq.n	800376e <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a0d      	ldr	r2, [pc, #52]	@ (8003784 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800374e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003756:	431a      	orrs	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e002      	b.n	8003774 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800376e:	2300      	movs	r3, #0
 8003770:	e000      	b.n	8003774 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8003772:	2302      	movs	r3, #2
  }
}
 8003774:	4618      	mov	r0, r3
 8003776:	3730      	adds	r7, #48	@ 0x30
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	0800405f 	.word	0x0800405f
 8003780:	080040d1 	.word	0x080040d1
 8003784:	004005ff 	.word	0x004005ff

08003788 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b08c      	sub	sp, #48	@ 0x30
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
 8003794:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d107      	bne.n	80037b0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037a4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e0c6      	b.n	800393e <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	f040 80bf 	bne.w	800393c <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80037c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	441a      	add	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d907      	bls.n	80037e2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e0ad      	b.n	800393e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2203      	movs	r2, #3
 80037e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2200      	movs	r2, #0
 80037f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f042 021a 	orr.w	r2, r2, #26
 8003800:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003806:	4a50      	ldr	r2, [pc, #320]	@ (8003948 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8003808:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800380e:	4a4f      	ldr	r2, [pc, #316]	@ (800394c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003810:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003816:	2200      	movs	r2, #0
 8003818:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800381e:	2b01      	cmp	r3, #1
 8003820:	d002      	beq.n	8003828 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8003822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003824:	025b      	lsls	r3, r3, #9
 8003826:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d90a      	bls.n	8003844 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	22a0      	movs	r2, #160	@ 0xa0
 8003832:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800383a:	4618      	mov	r0, r3
 800383c:	f001 f896 	bl	800496c <SDMMC_CmdWriteMultiBlock>
 8003840:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003842:	e009      	b.n	8003858 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2290      	movs	r2, #144	@ 0x90
 8003848:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003850:	4618      	mov	r0, r3
 8003852:	f001 f869 	bl	8004928 <SDMMC_CmdWriteSingleBlock>
 8003856:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800385a:	2b00      	cmp	r3, #0
 800385c:	d012      	beq.n	8003884 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a3b      	ldr	r2, [pc, #236]	@ (8003950 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8003864:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800386a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800386c:	431a      	orrs	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e05c      	b.n	800393e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0208 	orr.w	r2, r2, #8
 8003892:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003898:	2240      	movs	r2, #64	@ 0x40
 800389a:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ac:	689a      	ldr	r2, [r3, #8]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	430a      	orrs	r2, r1
 80038b6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80038bc:	68b9      	ldr	r1, [r7, #8]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	3380      	adds	r3, #128	@ 0x80
 80038c4:	461a      	mov	r2, r3
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	025b      	lsls	r3, r3, #9
 80038ca:	089b      	lsrs	r3, r3, #2
 80038cc:	f7fe f8a6 	bl	8001a1c <HAL_DMA_Start_IT>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d01a      	beq.n	800390c <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 021a 	bic.w	r2, r2, #26
 80038e4:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a19      	ldr	r2, [pc, #100]	@ (8003950 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80038ec:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038f2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e018      	b.n	800393e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800390c:	f04f 33ff 	mov.w	r3, #4294967295
 8003910:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	025b      	lsls	r3, r3, #9
 8003916:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003918:	2390      	movs	r3, #144	@ 0x90
 800391a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800391c:	2300      	movs	r3, #0
 800391e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003920:	2300      	movs	r3, #0
 8003922:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8003924:	2301      	movs	r3, #1
 8003926:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f107 0210 	add.w	r2, r7, #16
 8003930:	4611      	mov	r1, r2
 8003932:	4618      	mov	r0, r3
 8003934:	f000 ff66 	bl	8004804 <SDMMC_ConfigData>

      return HAL_OK;
 8003938:	2300      	movs	r3, #0
 800393a:	e000      	b.n	800393e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800393c:	2302      	movs	r3, #2
  }
}
 800393e:	4618      	mov	r0, r3
 8003940:	3730      	adds	r7, #48	@ 0x30
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	08004035 	.word	0x08004035
 800394c:	080040d1 	.word	0x080040d1
 8003950:	004005ff 	.word	0x004005ff

08003954 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003960:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003968:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d008      	beq.n	8003982 <HAL_SD_IRQHandler+0x2e>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 fdec 	bl	8004558 <SD_Read_IT>
 8003980:	e15a      	b.n	8003c38 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800398c:	2b00      	cmp	r3, #0
 800398e:	f000 808d 	beq.w	8003aac <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800399a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	4b9a      	ldr	r3, [pc, #616]	@ (8003c10 <HAL_SD_IRQHandler+0x2bc>)
 80039a8:	400b      	ands	r3, r1
 80039aa:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0201 	bic.w	r2, r2, #1
 80039ba:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f003 0308 	and.w	r3, r3, #8
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d039      	beq.n	8003a3a <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d104      	bne.n	80039da <HAL_SD_IRQHandler+0x86>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f003 0320 	and.w	r3, r3, #32
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d011      	beq.n	80039fe <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 ffe6 	bl	80049b0 <SDMMC_CmdStopTransfer>
 80039e4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d008      	beq.n	80039fe <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 f921 	bl	8003c40 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003a06:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d104      	bne.n	8003a2a <HAL_SD_IRQHandler+0xd6>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f001 fc04 	bl	8005238 <HAL_SD_RxCpltCallback>
 8003a30:	e102      	b.n	8003c38 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f001 fbf6 	bl	8005224 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003a38:	e0fe      	b.n	8003c38 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 80f9 	beq.w	8003c38 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f003 0320 	and.w	r3, r3, #32
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d011      	beq.n	8003a74 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 ffab 	bl	80049b0 <SDMMC_CmdStopTransfer>
 8003a5a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d008      	beq.n	8003a74 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f8e6 	bl	8003c40 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f040 80dc 	bne.w	8003c38 <HAL_SD_IRQHandler+0x2e4>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f040 80d6 	bne.w	8003c38 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0208 	bic.w	r2, r2, #8
 8003a9a:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f001 fbbd 	bl	8005224 <HAL_SD_TxCpltCallback>
}
 8003aaa:	e0c5      	b.n	8003c38 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ab2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d008      	beq.n	8003acc <HAL_SD_IRQHandler+0x178>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f003 0308 	and.w	r3, r3, #8
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d003      	beq.n	8003acc <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 fd98 	bl	80045fa <SD_Write_IT>
 8003aca:	e0b5      	b.n	8003c38 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ad2:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f000 80ae 	beq.w	8003c38 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d005      	beq.n	8003af6 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aee:	f043 0202 	orr.w	r2, r3, #2
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003afc:	f003 0308 	and.w	r3, r3, #8
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d005      	beq.n	8003b10 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b08:	f043 0208 	orr.w	r2, r3, #8
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b16:	f003 0320 	and.w	r3, r3, #32
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d005      	beq.n	8003b2a <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b22:	f043 0220 	orr.w	r2, r3, #32
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b30:	f003 0310 	and.w	r3, r3, #16
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d005      	beq.n	8003b44 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b3c:	f043 0210 	orr.w	r2, r3, #16
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003b4c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8003b5c:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 ff24 	bl	80049b0 <SDMMC_CmdStopTransfer>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f003 0308 	and.w	r3, r3, #8
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00a      	beq.n	8003b94 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f857 	bl	8003c40 <HAL_SD_ErrorCallback>
}
 8003b92:	e051      	b.n	8003c38 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d04c      	beq.n	8003c38 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f003 0310 	and.w	r3, r3, #16
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d104      	bne.n	8003bb2 <HAL_SD_IRQHandler+0x25e>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f003 0320 	and.w	r3, r3, #32
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d011      	beq.n	8003bd6 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bb6:	4a17      	ldr	r2, [pc, #92]	@ (8003c14 <HAL_SD_IRQHandler+0x2c0>)
 8003bb8:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7fd ff8c 	bl	8001adc <HAL_DMA_Abort_IT>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d036      	beq.n	8003c38 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 fad0 	bl	8004174 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003bd4:	e030      	b.n	8003c38 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d104      	bne.n	8003bea <HAL_SD_IRQHandler+0x296>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d018      	beq.n	8003c1c <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bee:	4a0a      	ldr	r2, [pc, #40]	@ (8003c18 <HAL_SD_IRQHandler+0x2c4>)
 8003bf0:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fd ff70 	bl	8001adc <HAL_DMA_Abort_IT>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d01a      	beq.n	8003c38 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 faeb 	bl	80041e2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003c0c:	e014      	b.n	8003c38 <HAL_SD_IRQHandler+0x2e4>
 8003c0e:	bf00      	nop
 8003c10:	ffff3ec5 	.word	0xffff3ec5
 8003c14:	08004175 	.word	0x08004175
 8003c18:	080041e3 	.word	0x080041e3
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f001 faed 	bl	8005210 <HAL_SD_AbortCallback>
}
 8003c36:	e7ff      	b.n	8003c38 <HAL_SD_IRQHandler+0x2e4>
 8003c38:	bf00      	nop
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c62:	0f9b      	lsrs	r3, r3, #30
 8003c64:	b2da      	uxtb	r2, r3
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c6e:	0e9b      	lsrs	r3, r3, #26
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	b2da      	uxtb	r2, r3
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c80:	0e1b      	lsrs	r3, r3, #24
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	f003 0303 	and.w	r3, r3, #3
 8003c88:	b2da      	uxtb	r2, r3
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c92:	0c1b      	lsrs	r3, r3, #16
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c9e:	0a1b      	lsrs	r3, r3, #8
 8003ca0:	b2da      	uxtb	r2, r3
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cb4:	0d1b      	lsrs	r3, r3, #20
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cc0:	0c1b      	lsrs	r3, r3, #16
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	f003 030f 	and.w	r3, r3, #15
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cd2:	0bdb      	lsrs	r3, r3, #15
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	b2da      	uxtb	r2, r3
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ce4:	0b9b      	lsrs	r3, r3, #14
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cf6:	0b5b      	lsrs	r3, r3, #13
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	b2da      	uxtb	r2, r3
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d08:	0b1b      	lsrs	r3, r3, #12
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	f003 0301 	and.w	r3, r3, #1
 8003d10:	b2da      	uxtb	r2, r3
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d163      	bne.n	8003dec <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d28:	009a      	lsls	r2, r3, #2
 8003d2a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003d2e:	4013      	ands	r3, r2
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8003d34:	0f92      	lsrs	r2, r2, #30
 8003d36:	431a      	orrs	r2, r3
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d40:	0edb      	lsrs	r3, r3, #27
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	f003 0307 	and.w	r3, r3, #7
 8003d48:	b2da      	uxtb	r2, r3
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d52:	0e1b      	lsrs	r3, r3, #24
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	f003 0307 	and.w	r3, r3, #7
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d64:	0d5b      	lsrs	r3, r3, #21
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	f003 0307 	and.w	r3, r3, #7
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d76:	0c9b      	lsrs	r3, r3, #18
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	f003 0307 	and.w	r3, r3, #7
 8003d7e:	b2da      	uxtb	r2, r3
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d88:	0bdb      	lsrs	r3, r3, #15
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	b2da      	uxtb	r2, r3
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	1c5a      	adds	r2, r3, #1
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	7e1b      	ldrb	r3, [r3, #24]
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	f003 0307 	and.w	r3, r3, #7
 8003daa:	3302      	adds	r3, #2
 8003dac:	2201      	movs	r2, #1
 8003dae:	fa02 f303 	lsl.w	r3, r2, r3
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003db6:	fb03 f202 	mul.w	r2, r3, r2
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	7a1b      	ldrb	r3, [r3, #8]
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	f003 030f 	and.w	r3, r3, #15
 8003dc8:	2201      	movs	r2, #1
 8003dca:	409a      	lsls	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003dd8:	0a52      	lsrs	r2, r2, #9
 8003dda:	fb03 f202 	mul.w	r2, r3, r2
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003de8:	661a      	str	r2, [r3, #96]	@ 0x60
 8003dea:	e031      	b.n	8003e50 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d11d      	bne.n	8003e30 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003df8:	041b      	lsls	r3, r3, #16
 8003dfa:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e02:	0c1b      	lsrs	r3, r3, #16
 8003e04:	431a      	orrs	r2, r3
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	029a      	lsls	r2, r3, #10
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e24:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	661a      	str	r2, [r3, #96]	@ 0x60
 8003e2e:	e00f      	b.n	8003e50 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a58      	ldr	r2, [pc, #352]	@ (8003f98 <HAL_SD_GetCardCSD+0x344>)
 8003e36:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e3c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e09d      	b.n	8003f8c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e54:	0b9b      	lsrs	r3, r3, #14
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e66:	09db      	lsrs	r3, r3, #7
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e7e:	b2da      	uxtb	r2, r3
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e88:	0fdb      	lsrs	r3, r3, #31
 8003e8a:	b2da      	uxtb	r2, r3
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e94:	0f5b      	lsrs	r3, r3, #29
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	f003 0303 	and.w	r3, r3, #3
 8003e9c:	b2da      	uxtb	r2, r3
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea6:	0e9b      	lsrs	r3, r3, #26
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	f003 0307 	and.w	r3, r3, #7
 8003eae:	b2da      	uxtb	r2, r3
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eb8:	0d9b      	lsrs	r3, r3, #22
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	f003 030f 	and.w	r3, r3, #15
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eca:	0d5b      	lsrs	r3, r3, #21
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	b2da      	uxtb	r2, r3
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ee6:	0c1b      	lsrs	r3, r3, #16
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	b2da      	uxtb	r2, r3
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003efa:	0bdb      	lsrs	r3, r3, #15
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	b2da      	uxtb	r2, r3
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f0e:	0b9b      	lsrs	r3, r3, #14
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f22:	0b5b      	lsrs	r3, r3, #13
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f36:	0b1b      	lsrs	r3, r3, #12
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f4a:	0a9b      	lsrs	r3, r3, #10
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	f003 0303 	and.w	r3, r3, #3
 8003f52:	b2da      	uxtb	r2, r3
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f5e:	0a1b      	lsrs	r3, r3, #8
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	f003 0303 	and.w	r3, r3, #3
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f72:	085b      	lsrs	r3, r3, #1
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f7a:	b2da      	uxtb	r2, r3
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr
 8003f98:	004005ff 	.word	0x004005ff

08003f9c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004000:	f107 030c 	add.w	r3, r7, #12
 8004004:	4619      	mov	r1, r3
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 fa7e 	bl	8004508 <SD_SendStatus>
 800400c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d005      	beq.n	8004020 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	431a      	orrs	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	0a5b      	lsrs	r3, r3, #9
 8004024:	f003 030f 	and.w	r3, r3, #15
 8004028:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800402a:	693b      	ldr	r3, [r7, #16]
}
 800402c:	4618      	mov	r0, r3
 800402e:	3718      	adds	r7, #24
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004040:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004050:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004052:	bf00      	nop
 8004054:	3714      	adds	r7, #20
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr

0800405e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b084      	sub	sp, #16
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800406a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004070:	2b82      	cmp	r3, #130	@ 0x82
 8004072:	d111      	bne.n	8004098 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4618      	mov	r0, r3
 800407a:	f000 fc99 	bl	80049b0 <SDMMC_CmdStopTransfer>
 800407e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d008      	beq.n	8004098 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	431a      	orrs	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f7ff fdd4 	bl	8003c40 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 0208 	bic.w	r2, r2, #8
 80040a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f240 523a 	movw	r2, #1338	@ 0x53a
 80040b0:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f001 f8b9 	bl	8005238 <HAL_SD_RxCpltCallback>
#endif
}
 80040c6:	bf00      	nop
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
	...

080040d0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040dc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7fd fea8 	bl	8001e34 <HAL_DMA_GetError>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d03e      	beq.n	8004168 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040f0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040f8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d002      	beq.n	8004106 <SD_DMAError+0x36>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d12d      	bne.n	8004162 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a19      	ldr	r2, [pc, #100]	@ (8004170 <SD_DMAError+0xa0>)
 800410c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800411c:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004122:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800412a:	6978      	ldr	r0, [r7, #20]
 800412c:	f7ff ff62 	bl	8003ff4 <HAL_SD_GetCardState>
 8004130:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	2b06      	cmp	r3, #6
 8004136:	d002      	beq.n	800413e <SD_DMAError+0x6e>
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	2b05      	cmp	r3, #5
 800413c:	d10a      	bne.n	8004154 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f000 fc34 	bl	80049b0 <SDMMC_CmdStopTransfer>
 8004148:	4602      	mov	r2, r0
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800414e:	431a      	orrs	r2, r3
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	2200      	movs	r2, #0
 8004160:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8004162:	6978      	ldr	r0, [r7, #20]
 8004164:	f7ff fd6c 	bl	8003c40 <HAL_SD_ErrorCallback>
#endif
  }
}
 8004168:	bf00      	nop
 800416a:	3718      	adds	r7, #24
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	004005ff 	.word	0x004005ff

08004174 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004180:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f240 523a 	movw	r2, #1338	@ 0x53a
 800418a:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f7ff ff31 	bl	8003ff4 <HAL_SD_GetCardState>
 8004192:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	2b06      	cmp	r3, #6
 80041a6:	d002      	beq.n	80041ae <SD_DMATxAbort+0x3a>
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	2b05      	cmp	r3, #5
 80041ac:	d10a      	bne.n	80041c4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 fbfc 	bl	80049b0 <SDMMC_CmdStopTransfer>
 80041b8:	4602      	mov	r2, r0
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041be:	431a      	orrs	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d103      	bne.n	80041d4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f001 f81f 	bl	8005210 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80041d2:	e002      	b.n	80041da <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f7ff fd33 	bl	8003c40 <HAL_SD_ErrorCallback>
}
 80041da:	bf00      	nop
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b084      	sub	sp, #16
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ee:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f240 523a 	movw	r2, #1338	@ 0x53a
 80041f8:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f7ff fefa 	bl	8003ff4 <HAL_SD_GetCardState>
 8004200:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	2b06      	cmp	r3, #6
 8004214:	d002      	beq.n	800421c <SD_DMARxAbort+0x3a>
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	2b05      	cmp	r3, #5
 800421a:	d10a      	bne.n	8004232 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4618      	mov	r0, r3
 8004222:	f000 fbc5 	bl	80049b0 <SDMMC_CmdStopTransfer>
 8004226:	4602      	mov	r2, r0
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800422c:	431a      	orrs	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004236:	2b00      	cmp	r3, #0
 8004238:	d103      	bne.n	8004242 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f000 ffe8 	bl	8005210 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004240:	e002      	b.n	8004248 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f7ff fcfc 	bl	8003c40 <HAL_SD_ErrorCallback>
}
 8004248:	bf00      	nop
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004250:	b5b0      	push	{r4, r5, r7, lr}
 8004252:	b094      	sub	sp, #80	@ 0x50
 8004254:	af04      	add	r7, sp, #16
 8004256:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004258:	2301      	movs	r3, #1
 800425a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4618      	mov	r0, r3
 8004262:	f000 fa77 	bl	8004754 <SDMMC_GetPowerState>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d102      	bne.n	8004272 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800426c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004270:	e0b8      	b.n	80043e4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004276:	2b03      	cmp	r3, #3
 8004278:	d02f      	beq.n	80042da <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4618      	mov	r0, r3
 8004280:	f000 fc5e 	bl	8004b40 <SDMMC_CmdSendCID>
 8004284:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004286:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <SD_InitCard+0x40>
    {
      return errorstate;
 800428c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800428e:	e0a9      	b.n	80043e4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2100      	movs	r1, #0
 8004296:	4618      	mov	r0, r3
 8004298:	f000 faa1 	bl	80047de <SDMMC_GetResponse>
 800429c:	4602      	mov	r2, r0
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2104      	movs	r1, #4
 80042a8:	4618      	mov	r0, r3
 80042aa:	f000 fa98 	bl	80047de <SDMMC_GetResponse>
 80042ae:	4602      	mov	r2, r0
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2108      	movs	r1, #8
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 fa8f 	bl	80047de <SDMMC_GetResponse>
 80042c0:	4602      	mov	r2, r0
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	210c      	movs	r1, #12
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 fa86 	bl	80047de <SDMMC_GetResponse>
 80042d2:	4602      	mov	r2, r0
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042de:	2b03      	cmp	r3, #3
 80042e0:	d00d      	beq.n	80042fe <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f107 020e 	add.w	r2, r7, #14
 80042ea:	4611      	mov	r1, r2
 80042ec:	4618      	mov	r0, r3
 80042ee:	f000 fc64 	bl	8004bba <SDMMC_CmdSetRelAdd>
 80042f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80042f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <SD_InitCard+0xae>
    {
      return errorstate;
 80042fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042fc:	e072      	b.n	80043e4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004302:	2b03      	cmp	r3, #3
 8004304:	d036      	beq.n	8004374 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004306:	89fb      	ldrh	r3, [r7, #14]
 8004308:	461a      	mov	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004316:	041b      	lsls	r3, r3, #16
 8004318:	4619      	mov	r1, r3
 800431a:	4610      	mov	r0, r2
 800431c:	f000 fc2e 	bl	8004b7c <SDMMC_CmdSendCSD>
 8004320:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004322:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004324:	2b00      	cmp	r3, #0
 8004326:	d001      	beq.n	800432c <SD_InitCard+0xdc>
    {
      return errorstate;
 8004328:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800432a:	e05b      	b.n	80043e4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2100      	movs	r1, #0
 8004332:	4618      	mov	r0, r3
 8004334:	f000 fa53 	bl	80047de <SDMMC_GetResponse>
 8004338:	4602      	mov	r2, r0
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2104      	movs	r1, #4
 8004344:	4618      	mov	r0, r3
 8004346:	f000 fa4a 	bl	80047de <SDMMC_GetResponse>
 800434a:	4602      	mov	r2, r0
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2108      	movs	r1, #8
 8004356:	4618      	mov	r0, r3
 8004358:	f000 fa41 	bl	80047de <SDMMC_GetResponse>
 800435c:	4602      	mov	r2, r0
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	210c      	movs	r1, #12
 8004368:	4618      	mov	r0, r3
 800436a:	f000 fa38 	bl	80047de <SDMMC_GetResponse>
 800436e:	4602      	mov	r2, r0
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2104      	movs	r1, #4
 800437a:	4618      	mov	r0, r3
 800437c:	f000 fa2f 	bl	80047de <SDMMC_GetResponse>
 8004380:	4603      	mov	r3, r0
 8004382:	0d1a      	lsrs	r2, r3, #20
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004388:	f107 0310 	add.w	r3, r7, #16
 800438c:	4619      	mov	r1, r3
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7ff fc60 	bl	8003c54 <HAL_SD_GetCardCSD>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d002      	beq.n	80043a0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800439a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800439e:	e021      	b.n	80043e4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6819      	ldr	r1, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043a8:	041b      	lsls	r3, r3, #16
 80043aa:	2200      	movs	r2, #0
 80043ac:	461c      	mov	r4, r3
 80043ae:	4615      	mov	r5, r2
 80043b0:	4622      	mov	r2, r4
 80043b2:	462b      	mov	r3, r5
 80043b4:	4608      	mov	r0, r1
 80043b6:	f000 fb1d 	bl	80049f4 <SDMMC_CmdSelDesel>
 80043ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80043bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <SD_InitCard+0x176>
  {
    return errorstate;
 80043c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043c4:	e00e      	b.n	80043e4 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681d      	ldr	r5, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	466c      	mov	r4, sp
 80043ce:	f103 0210 	add.w	r2, r3, #16
 80043d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80043d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80043d8:	3304      	adds	r3, #4
 80043da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043dc:	4628      	mov	r0, r5
 80043de:	f000 f961 	bl	80046a4 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3740      	adds	r7, #64	@ 0x40
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bdb0      	pop	{r4, r5, r7, pc}

080043ec <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80043f4:	2300      	movs	r3, #0
 80043f6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80043f8:	2300      	movs	r3, #0
 80043fa:	617b      	str	r3, [r7, #20]
 80043fc:	2300      	movs	r3, #0
 80043fe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4618      	mov	r0, r3
 8004406:	f000 fb18 	bl	8004a3a <SDMMC_CmdGoIdleState>
 800440a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <SD_PowerON+0x2a>
  {
    return errorstate;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	e072      	b.n	80044fc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4618      	mov	r0, r3
 800441c:	f000 fb2b 	bl	8004a76 <SDMMC_CmdOperCond>
 8004420:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00d      	beq.n	8004444 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4618      	mov	r0, r3
 8004434:	f000 fb01 	bl	8004a3a <SDMMC_CmdGoIdleState>
 8004438:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d004      	beq.n	800444a <SD_PowerON+0x5e>
    {
      return errorstate;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	e05b      	b.n	80044fc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800444e:	2b01      	cmp	r3, #1
 8004450:	d137      	bne.n	80044c2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2100      	movs	r1, #0
 8004458:	4618      	mov	r0, r3
 800445a:	f000 fb2b 	bl	8004ab4 <SDMMC_CmdAppCommand>
 800445e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d02d      	beq.n	80044c2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004466:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800446a:	e047      	b.n	80044fc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2100      	movs	r1, #0
 8004472:	4618      	mov	r0, r3
 8004474:	f000 fb1e 	bl	8004ab4 <SDMMC_CmdAppCommand>
 8004478:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <SD_PowerON+0x98>
    {
      return errorstate;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	e03b      	b.n	80044fc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	491e      	ldr	r1, [pc, #120]	@ (8004504 <SD_PowerON+0x118>)
 800448a:	4618      	mov	r0, r3
 800448c:	f000 fb34 	bl	8004af8 <SDMMC_CmdAppOperCommand>
 8004490:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d002      	beq.n	800449e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004498:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800449c:	e02e      	b.n	80044fc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2100      	movs	r1, #0
 80044a4:	4618      	mov	r0, r3
 80044a6:	f000 f99a 	bl	80047de <SDMMC_GetResponse>
 80044aa:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	0fdb      	lsrs	r3, r3, #31
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d101      	bne.n	80044b8 <SD_PowerON+0xcc>
 80044b4:	2301      	movs	r3, #1
 80044b6:	e000      	b.n	80044ba <SD_PowerON+0xce>
 80044b8:	2300      	movs	r3, #0
 80044ba:	613b      	str	r3, [r7, #16]

    count++;
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	3301      	adds	r3, #1
 80044c0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d802      	bhi.n	80044d2 <SD_PowerON+0xe6>
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d0cc      	beq.n	800446c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80044d8:	4293      	cmp	r3, r2
 80044da:	d902      	bls.n	80044e2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80044dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80044e0:	e00c      	b.n	80044fc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d003      	beq.n	80044f4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	645a      	str	r2, [r3, #68]	@ 0x44
 80044f2:	e002      	b.n	80044fa <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3718      	adds	r7, #24
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	c1100000 	.word	0xc1100000

08004508 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d102      	bne.n	800451e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004518:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800451c:	e018      	b.n	8004550 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004526:	041b      	lsls	r3, r3, #16
 8004528:	4619      	mov	r1, r3
 800452a:	4610      	mov	r0, r2
 800452c:	f000 fb66 	bl	8004bfc <SDMMC_CmdSendStatus>
 8004530:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d001      	beq.n	800453c <SD_SendStatus+0x34>
  {
    return errorstate;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	e009      	b.n	8004550 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2100      	movs	r1, #0
 8004542:	4618      	mov	r0, r3
 8004544:	f000 f94b 	bl	80047de <SDMMC_GetResponse>
 8004548:	4602      	mov	r2, r0
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004564:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800456a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d03f      	beq.n	80045f2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004572:	2300      	movs	r3, #0
 8004574:	617b      	str	r3, [r7, #20]
 8004576:	e033      	b.n	80045e0 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4618      	mov	r0, r3
 800457e:	f000 f8bd 	bl	80046fc <SDMMC_ReadFIFO>
 8004582:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	b2da      	uxtb	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	3301      	adds	r3, #1
 8004590:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	3b01      	subs	r3, #1
 8004596:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	0a1b      	lsrs	r3, r3, #8
 800459c:	b2da      	uxtb	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	3301      	adds	r3, #1
 80045a6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	3b01      	subs	r3, #1
 80045ac:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	0c1b      	lsrs	r3, r3, #16
 80045b2:	b2da      	uxtb	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	3301      	adds	r3, #1
 80045bc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	3b01      	subs	r3, #1
 80045c2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	0e1b      	lsrs	r3, r3, #24
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	701a      	strb	r2, [r3, #0]
      tmp++;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	3301      	adds	r3, #1
 80045d2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	3b01      	subs	r3, #1
 80045d8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	3301      	adds	r3, #1
 80045de:	617b      	str	r3, [r7, #20]
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	2b07      	cmp	r3, #7
 80045e4:	d9c8      	bls.n	8004578 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 80045f2:	bf00      	nop
 80045f4:	3718      	adds	r7, #24
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b086      	sub	sp, #24
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d043      	beq.n	800469c <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004614:	2300      	movs	r3, #0
 8004616:	617b      	str	r3, [r7, #20]
 8004618:	e037      	b.n	800468a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	3301      	adds	r3, #1
 8004624:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	3b01      	subs	r3, #1
 800462a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	021a      	lsls	r2, r3, #8
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	4313      	orrs	r3, r2
 8004636:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	3301      	adds	r3, #1
 800463c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	3b01      	subs	r3, #1
 8004642:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	041a      	lsls	r2, r3, #16
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	4313      	orrs	r3, r2
 800464e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	3301      	adds	r3, #1
 8004654:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	3b01      	subs	r3, #1
 800465a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	061a      	lsls	r2, r3, #24
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	4313      	orrs	r3, r2
 8004666:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	3301      	adds	r3, #1
 800466c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	3b01      	subs	r3, #1
 8004672:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f107 0208 	add.w	r2, r7, #8
 800467c:	4611      	mov	r1, r2
 800467e:	4618      	mov	r0, r3
 8004680:	f000 f849 	bl	8004716 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	3301      	adds	r3, #1
 8004688:	617b      	str	r3, [r7, #20]
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	2b07      	cmp	r3, #7
 800468e:	d9c4      	bls.n	800461a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 800469c:	bf00      	nop
 800469e:	3718      	adds	r7, #24
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80046a4:	b084      	sub	sp, #16
 80046a6:	b480      	push	{r7}
 80046a8:	b085      	sub	sp, #20
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
 80046ae:	f107 001c 	add.w	r0, r7, #28
 80046b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80046b6:	2300      	movs	r3, #0
 80046b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80046ba:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80046bc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80046be:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80046c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 80046c2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80046c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 80046c6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80046c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 80046ca:	431a      	orrs	r2, r3
             Init.ClockDiv
 80046cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 80046ce:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685a      	ldr	r2, [r3, #4]
 80046da:	4b07      	ldr	r3, [pc, #28]	@ (80046f8 <SDMMC_Init+0x54>)
 80046dc:	4013      	ands	r3, r2
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	431a      	orrs	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3714      	adds	r7, #20
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	b004      	add	sp, #16
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	ffff8100 	.word	0xffff8100

080046fc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800470a:	4618      	mov	r0, r3
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8004716:	b480      	push	{r7}
 8004718:	b083      	sub	sp, #12
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
 800471e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2203      	movs	r2, #3
 8004744:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0303 	and.w	r3, r3, #3
}
 8004764:	4618      	mov	r0, r3
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8004770:	b480      	push	{r7}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800477a:	2300      	movs	r3, #0
 800477c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800478e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004794:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800479a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	4313      	orrs	r3, r2
 80047a0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68da      	ldr	r2, [r3, #12]
 80047a6:	4b06      	ldr	r3, [pc, #24]	@ (80047c0 <SDMMC_SendCommand+0x50>)
 80047a8:	4013      	ands	r3, r2
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	431a      	orrs	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3714      	adds	r7, #20
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	fffff000 	.word	0xfffff000

080047c4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	b2db      	uxtb	r3, r3
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr

080047de <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80047de:	b480      	push	{r7}
 80047e0:	b085      	sub	sp, #20
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
 80047e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	3314      	adds	r3, #20
 80047ec:	461a      	mov	r2, r3
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	4413      	add	r3, r2
 80047f2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
}  
 80047f8:	4618      	mov	r0, r3
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800480e:	2300      	movs	r3, #0
 8004810:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	685a      	ldr	r2, [r3, #4]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800482a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004830:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004836:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	4313      	orrs	r3, r2
 800483c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004842:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	431a      	orrs	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800484e:	2300      	movs	r3, #0

}
 8004850:	4618      	mov	r0, r3
 8004852:	3714      	adds	r7, #20
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b088      	sub	sp, #32
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800486a:	2310      	movs	r3, #16
 800486c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800486e:	2340      	movs	r3, #64	@ 0x40
 8004870:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004872:	2300      	movs	r3, #0
 8004874:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004876:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800487a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800487c:	f107 0308 	add.w	r3, r7, #8
 8004880:	4619      	mov	r1, r3
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7ff ff74 	bl	8004770 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8004888:	f241 3288 	movw	r2, #5000	@ 0x1388
 800488c:	2110      	movs	r1, #16
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 f9d6 	bl	8004c40 <SDMMC_GetCmdResp1>
 8004894:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004896:	69fb      	ldr	r3, [r7, #28]
}
 8004898:	4618      	mov	r0, r3
 800489a:	3720      	adds	r7, #32
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b088      	sub	sp, #32
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80048ae:	2311      	movs	r3, #17
 80048b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80048b2:	2340      	movs	r3, #64	@ 0x40
 80048b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80048b6:	2300      	movs	r3, #0
 80048b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80048ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80048be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80048c0:	f107 0308 	add.w	r3, r7, #8
 80048c4:	4619      	mov	r1, r3
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7ff ff52 	bl	8004770 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80048cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048d0:	2111      	movs	r1, #17
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f9b4 	bl	8004c40 <SDMMC_GetCmdResp1>
 80048d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80048da:	69fb      	ldr	r3, [r7, #28]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3720      	adds	r7, #32
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b088      	sub	sp, #32
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80048f2:	2312      	movs	r3, #18
 80048f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80048f6:	2340      	movs	r3, #64	@ 0x40
 80048f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80048fa:	2300      	movs	r3, #0
 80048fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80048fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004902:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004904:	f107 0308 	add.w	r3, r7, #8
 8004908:	4619      	mov	r1, r3
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7ff ff30 	bl	8004770 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8004910:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004914:	2112      	movs	r1, #18
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f992 	bl	8004c40 <SDMMC_GetCmdResp1>
 800491c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800491e:	69fb      	ldr	r3, [r7, #28]
}
 8004920:	4618      	mov	r0, r3
 8004922:	3720      	adds	r7, #32
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b088      	sub	sp, #32
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004936:	2318      	movs	r3, #24
 8004938:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800493a:	2340      	movs	r3, #64	@ 0x40
 800493c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800493e:	2300      	movs	r3, #0
 8004940:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004942:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004946:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004948:	f107 0308 	add.w	r3, r7, #8
 800494c:	4619      	mov	r1, r3
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7ff ff0e 	bl	8004770 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8004954:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004958:	2118      	movs	r1, #24
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f970 	bl	8004c40 <SDMMC_GetCmdResp1>
 8004960:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004962:	69fb      	ldr	r3, [r7, #28]
}
 8004964:	4618      	mov	r0, r3
 8004966:	3720      	adds	r7, #32
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b088      	sub	sp, #32
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800497a:	2319      	movs	r3, #25
 800497c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800497e:	2340      	movs	r3, #64	@ 0x40
 8004980:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004982:	2300      	movs	r3, #0
 8004984:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004986:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800498a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800498c:	f107 0308 	add.w	r3, r7, #8
 8004990:	4619      	mov	r1, r3
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f7ff feec 	bl	8004770 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8004998:	f241 3288 	movw	r2, #5000	@ 0x1388
 800499c:	2119      	movs	r1, #25
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f94e 	bl	8004c40 <SDMMC_GetCmdResp1>
 80049a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049a6:	69fb      	ldr	r3, [r7, #28]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3720      	adds	r7, #32
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b088      	sub	sp, #32
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80049b8:	2300      	movs	r3, #0
 80049ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80049bc:	230c      	movs	r3, #12
 80049be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80049c0:	2340      	movs	r3, #64	@ 0x40
 80049c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80049c4:	2300      	movs	r3, #0
 80049c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80049c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80049cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80049ce:	f107 0308 	add.w	r3, r7, #8
 80049d2:	4619      	mov	r1, r3
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f7ff fecb 	bl	8004770 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80049da:	4a05      	ldr	r2, [pc, #20]	@ (80049f0 <SDMMC_CmdStopTransfer+0x40>)
 80049dc:	210c      	movs	r1, #12
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f92e 	bl	8004c40 <SDMMC_GetCmdResp1>
 80049e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049e6:	69fb      	ldr	r3, [r7, #28]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3720      	adds	r7, #32
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	05f5e100 	.word	0x05f5e100

080049f4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b08a      	sub	sp, #40	@ 0x28
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004a04:	2307      	movs	r3, #7
 8004a06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004a08:	2340      	movs	r3, #64	@ 0x40
 8004a0a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004a10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a14:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004a16:	f107 0310 	add.w	r3, r7, #16
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f7ff fea7 	bl	8004770 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8004a22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a26:	2107      	movs	r1, #7
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 f909 	bl	8004c40 <SDMMC_GetCmdResp1>
 8004a2e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8004a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3728      	adds	r7, #40	@ 0x28
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b088      	sub	sp, #32
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004a42:	2300      	movs	r3, #0
 8004a44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004a46:	2300      	movs	r3, #0
 8004a48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004a52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004a58:	f107 0308 	add.w	r3, r7, #8
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7ff fe86 	bl	8004770 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 fb23 	bl	80050b0 <SDMMC_GetCmdError>
 8004a6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a6c:	69fb      	ldr	r3, [r7, #28]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3720      	adds	r7, #32
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b088      	sub	sp, #32
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004a7e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8004a82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004a84:	2308      	movs	r3, #8
 8004a86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004a88:	2340      	movs	r3, #64	@ 0x40
 8004a8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004a90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a94:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004a96:	f107 0308 	add.w	r3, r7, #8
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f7ff fe67 	bl	8004770 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 fab6 	bl	8005014 <SDMMC_GetCmdResp7>
 8004aa8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004aaa:	69fb      	ldr	r3, [r7, #28]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3720      	adds	r7, #32
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b088      	sub	sp, #32
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004ac2:	2337      	movs	r3, #55	@ 0x37
 8004ac4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004ac6:	2340      	movs	r3, #64	@ 0x40
 8004ac8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004aca:	2300      	movs	r3, #0
 8004acc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004ace:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ad2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004ad4:	f107 0308 	add.w	r3, r7, #8
 8004ad8:	4619      	mov	r1, r3
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f7ff fe48 	bl	8004770 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8004ae0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ae4:	2137      	movs	r1, #55	@ 0x37
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f8aa 	bl	8004c40 <SDMMC_GetCmdResp1>
 8004aec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004aee:	69fb      	ldr	r3, [r7, #28]
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3720      	adds	r7, #32
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b088      	sub	sp, #32
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004b02:	683a      	ldr	r2, [r7, #0]
 8004b04:	4b0d      	ldr	r3, [pc, #52]	@ (8004b3c <SDMMC_CmdAppOperCommand+0x44>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004b0a:	2329      	movs	r3, #41	@ 0x29
 8004b0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004b0e:	2340      	movs	r3, #64	@ 0x40
 8004b10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004b12:	2300      	movs	r3, #0
 8004b14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004b16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004b1c:	f107 0308 	add.w	r3, r7, #8
 8004b20:	4619      	mov	r1, r3
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f7ff fe24 	bl	8004770 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 f9bf 	bl	8004eac <SDMMC_GetCmdResp3>
 8004b2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b30:	69fb      	ldr	r3, [r7, #28]
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3720      	adds	r7, #32
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	80100000 	.word	0x80100000

08004b40 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b088      	sub	sp, #32
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004b50:	23c0      	movs	r3, #192	@ 0xc0
 8004b52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004b54:	2300      	movs	r3, #0
 8004b56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004b58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b5c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004b5e:	f107 0308 	add.w	r3, r7, #8
 8004b62:	4619      	mov	r1, r3
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f7ff fe03 	bl	8004770 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f956 	bl	8004e1c <SDMMC_GetCmdResp2>
 8004b70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b72:	69fb      	ldr	r3, [r7, #28]
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3720      	adds	r7, #32
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b088      	sub	sp, #32
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004b8a:	2309      	movs	r3, #9
 8004b8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004b8e:	23c0      	movs	r3, #192	@ 0xc0
 8004b90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004b92:	2300      	movs	r3, #0
 8004b94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004b96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004b9c:	f107 0308 	add.w	r3, r7, #8
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f7ff fde4 	bl	8004770 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 f937 	bl	8004e1c <SDMMC_GetCmdResp2>
 8004bae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004bb0:	69fb      	ldr	r3, [r7, #28]
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3720      	adds	r7, #32
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b088      	sub	sp, #32
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
 8004bc2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004bcc:	2340      	movs	r3, #64	@ 0x40
 8004bce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004bd4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004bd8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004bda:	f107 0308 	add.w	r3, r7, #8
 8004bde:	4619      	mov	r1, r3
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f7ff fdc5 	bl	8004770 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	2103      	movs	r1, #3
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 f99c 	bl	8004f28 <SDMMC_GetCmdResp6>
 8004bf0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004bf2:	69fb      	ldr	r3, [r7, #28]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3720      	adds	r7, #32
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b088      	sub	sp, #32
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004c0a:	230d      	movs	r3, #13
 8004c0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004c0e:	2340      	movs	r3, #64	@ 0x40
 8004c10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004c12:	2300      	movs	r3, #0
 8004c14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004c16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004c1c:	f107 0308 	add.w	r3, r7, #8
 8004c20:	4619      	mov	r1, r3
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f7ff fda4 	bl	8004770 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8004c28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c2c:	210d      	movs	r1, #13
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f806 	bl	8004c40 <SDMMC_GetCmdResp1>
 8004c34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c36:	69fb      	ldr	r3, [r7, #28]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3720      	adds	r7, #32
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b088      	sub	sp, #32
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	460b      	mov	r3, r1
 8004c4a:	607a      	str	r2, [r7, #4]
 8004c4c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004c4e:	4b70      	ldr	r3, [pc, #448]	@ (8004e10 <SDMMC_GetCmdResp1+0x1d0>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a70      	ldr	r2, [pc, #448]	@ (8004e14 <SDMMC_GetCmdResp1+0x1d4>)
 8004c54:	fba2 2303 	umull	r2, r3, r2, r3
 8004c58:	0a5a      	lsrs	r2, r3, #9
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	fb02 f303 	mul.w	r3, r2, r3
 8004c60:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	1e5a      	subs	r2, r3, #1
 8004c66:	61fa      	str	r2, [r7, #28]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d102      	bne.n	8004c72 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004c6c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004c70:	e0c9      	b.n	8004e06 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c76:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d0ef      	beq.n	8004c62 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1ea      	bne.n	8004c62 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c90:	f003 0304 	and.w	r3, r3, #4
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d004      	beq.n	8004ca2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2204      	movs	r2, #4
 8004c9c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004c9e:	2304      	movs	r3, #4
 8004ca0:	e0b1      	b.n	8004e06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d004      	beq.n	8004cb8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e0a6      	b.n	8004e06 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	22c5      	movs	r2, #197	@ 0xc5
 8004cbc:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f7ff fd80 	bl	80047c4 <SDMMC_GetCommandResponse>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	7afb      	ldrb	r3, [r7, #11]
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d001      	beq.n	8004cd2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e099      	b.n	8004e06 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f7ff fd82 	bl	80047de <SDMMC_GetResponse>
 8004cda:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	4b4e      	ldr	r3, [pc, #312]	@ (8004e18 <SDMMC_GetCmdResp1+0x1d8>)
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	e08d      	b.n	8004e06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	da02      	bge.n	8004cf6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004cf0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004cf4:	e087      	b.n	8004e06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d001      	beq.n	8004d04 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004d00:	2340      	movs	r3, #64	@ 0x40
 8004d02:	e080      	b.n	8004e06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004d0e:	2380      	movs	r3, #128	@ 0x80
 8004d10:	e079      	b.n	8004e06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d002      	beq.n	8004d22 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004d1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004d20:	e071      	b.n	8004e06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d002      	beq.n	8004d32 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004d2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d30:	e069      	b.n	8004e06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d002      	beq.n	8004d42 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004d3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d40:	e061      	b.n	8004e06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d002      	beq.n	8004d52 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004d4c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004d50:	e059      	b.n	8004e06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d002      	beq.n	8004d62 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004d5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d60:	e051      	b.n	8004e06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d002      	beq.n	8004d72 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004d6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004d70:	e049      	b.n	8004e06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d002      	beq.n	8004d82 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004d7c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004d80:	e041      	b.n	8004e06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d002      	beq.n	8004d92 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8004d8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d90:	e039      	b.n	8004e06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d002      	beq.n	8004da2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004d9c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004da0:	e031      	b.n	8004e06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d002      	beq.n	8004db2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004dac:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004db0:	e029      	b.n	8004e06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d002      	beq.n	8004dc2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004dbc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004dc0:	e021      	b.n	8004e06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d002      	beq.n	8004dd2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004dcc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004dd0:	e019      	b.n	8004e06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d002      	beq.n	8004de2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004ddc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004de0:	e011      	b.n	8004e06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d002      	beq.n	8004df2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004dec:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004df0:	e009      	b.n	8004e06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f003 0308 	and.w	r3, r3, #8
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d002      	beq.n	8004e02 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004dfc:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8004e00:	e001      	b.n	8004e06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004e02:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3720      	adds	r7, #32
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	2000001c 	.word	0x2000001c
 8004e14:	10624dd3 	.word	0x10624dd3
 8004e18:	fdffe008 	.word	0xfdffe008

08004e1c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004e24:	4b1f      	ldr	r3, [pc, #124]	@ (8004ea4 <SDMMC_GetCmdResp2+0x88>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a1f      	ldr	r2, [pc, #124]	@ (8004ea8 <SDMMC_GetCmdResp2+0x8c>)
 8004e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2e:	0a5b      	lsrs	r3, r3, #9
 8004e30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e34:	fb02 f303 	mul.w	r3, r2, r3
 8004e38:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	1e5a      	subs	r2, r3, #1
 8004e3e:	60fa      	str	r2, [r7, #12]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d102      	bne.n	8004e4a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004e44:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004e48:	e026      	b.n	8004e98 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e4e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d0ef      	beq.n	8004e3a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1ea      	bne.n	8004e3a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e68:	f003 0304 	and.w	r3, r3, #4
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d004      	beq.n	8004e7a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2204      	movs	r2, #4
 8004e74:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004e76:	2304      	movs	r3, #4
 8004e78:	e00e      	b.n	8004e98 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d004      	beq.n	8004e90 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e003      	b.n	8004e98 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	22c5      	movs	r2, #197	@ 0xc5
 8004e94:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3714      	adds	r7, #20
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr
 8004ea4:	2000001c 	.word	0x2000001c
 8004ea8:	10624dd3 	.word	0x10624dd3

08004eac <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004eb4:	4b1a      	ldr	r3, [pc, #104]	@ (8004f20 <SDMMC_GetCmdResp3+0x74>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a1a      	ldr	r2, [pc, #104]	@ (8004f24 <SDMMC_GetCmdResp3+0x78>)
 8004eba:	fba2 2303 	umull	r2, r3, r2, r3
 8004ebe:	0a5b      	lsrs	r3, r3, #9
 8004ec0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ec4:	fb02 f303 	mul.w	r3, r2, r3
 8004ec8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	1e5a      	subs	r2, r3, #1
 8004ece:	60fa      	str	r2, [r7, #12]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d102      	bne.n	8004eda <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004ed4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004ed8:	e01b      	b.n	8004f12 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ede:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d0ef      	beq.n	8004eca <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1ea      	bne.n	8004eca <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ef8:	f003 0304 	and.w	r3, r3, #4
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d004      	beq.n	8004f0a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2204      	movs	r2, #4
 8004f04:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004f06:	2304      	movs	r3, #4
 8004f08:	e003      	b.n	8004f12 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	22c5      	movs	r2, #197	@ 0xc5
 8004f0e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	2000001c 	.word	0x2000001c
 8004f24:	10624dd3 	.word	0x10624dd3

08004f28 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b088      	sub	sp, #32
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	460b      	mov	r3, r1
 8004f32:	607a      	str	r2, [r7, #4]
 8004f34:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004f36:	4b35      	ldr	r3, [pc, #212]	@ (800500c <SDMMC_GetCmdResp6+0xe4>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a35      	ldr	r2, [pc, #212]	@ (8005010 <SDMMC_GetCmdResp6+0xe8>)
 8004f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f40:	0a5b      	lsrs	r3, r3, #9
 8004f42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f46:	fb02 f303 	mul.w	r3, r2, r3
 8004f4a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	1e5a      	subs	r2, r3, #1
 8004f50:	61fa      	str	r2, [r7, #28]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d102      	bne.n	8004f5c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004f56:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004f5a:	e052      	b.n	8005002 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f60:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d0ef      	beq.n	8004f4c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1ea      	bne.n	8004f4c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f7a:	f003 0304 	and.w	r3, r3, #4
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d004      	beq.n	8004f8c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2204      	movs	r2, #4
 8004f86:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004f88:	2304      	movs	r3, #4
 8004f8a:	e03a      	b.n	8005002 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d004      	beq.n	8004fa2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e02f      	b.n	8005002 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f7ff fc0e 	bl	80047c4 <SDMMC_GetCommandResponse>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	461a      	mov	r2, r3
 8004fac:	7afb      	ldrb	r3, [r7, #11]
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d001      	beq.n	8004fb6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e025      	b.n	8005002 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	22c5      	movs	r2, #197	@ 0xc5
 8004fba:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	68f8      	ldr	r0, [r7, #12]
 8004fc0:	f7ff fc0d 	bl	80047de <SDMMC_GetResponse>
 8004fc4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d106      	bne.n	8004fde <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	0c1b      	lsrs	r3, r3, #16
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	e011      	b.n	8005002 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d002      	beq.n	8004fee <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004fe8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004fec:	e009      	b.n	8005002 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d002      	beq.n	8004ffe <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004ff8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004ffc:	e001      	b.n	8005002 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004ffe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8005002:	4618      	mov	r0, r3
 8005004:	3720      	adds	r7, #32
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	2000001c 	.word	0x2000001c
 8005010:	10624dd3 	.word	0x10624dd3

08005014 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800501c:	4b22      	ldr	r3, [pc, #136]	@ (80050a8 <SDMMC_GetCmdResp7+0x94>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a22      	ldr	r2, [pc, #136]	@ (80050ac <SDMMC_GetCmdResp7+0x98>)
 8005022:	fba2 2303 	umull	r2, r3, r2, r3
 8005026:	0a5b      	lsrs	r3, r3, #9
 8005028:	f241 3288 	movw	r2, #5000	@ 0x1388
 800502c:	fb02 f303 	mul.w	r3, r2, r3
 8005030:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	1e5a      	subs	r2, r3, #1
 8005036:	60fa      	str	r2, [r7, #12]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d102      	bne.n	8005042 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800503c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005040:	e02c      	b.n	800509c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005046:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800504e:	2b00      	cmp	r3, #0
 8005050:	d0ef      	beq.n	8005032 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1ea      	bne.n	8005032 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005060:	f003 0304 	and.w	r3, r3, #4
 8005064:	2b00      	cmp	r3, #0
 8005066:	d004      	beq.n	8005072 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2204      	movs	r2, #4
 800506c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800506e:	2304      	movs	r3, #4
 8005070:	e014      	b.n	800509c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	2b00      	cmp	r3, #0
 800507c:	d004      	beq.n	8005088 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2201      	movs	r2, #1
 8005082:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005084:	2301      	movs	r3, #1
 8005086:	e009      	b.n	800509c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800508c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005090:	2b00      	cmp	r3, #0
 8005092:	d002      	beq.n	800509a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2240      	movs	r2, #64	@ 0x40
 8005098:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800509a:	2300      	movs	r3, #0
  
}
 800509c:	4618      	mov	r0, r3
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr
 80050a8:	2000001c 	.word	0x2000001c
 80050ac:	10624dd3 	.word	0x10624dd3

080050b0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80050b8:	4b11      	ldr	r3, [pc, #68]	@ (8005100 <SDMMC_GetCmdError+0x50>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a11      	ldr	r2, [pc, #68]	@ (8005104 <SDMMC_GetCmdError+0x54>)
 80050be:	fba2 2303 	umull	r2, r3, r2, r3
 80050c2:	0a5b      	lsrs	r3, r3, #9
 80050c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050c8:	fb02 f303 	mul.w	r3, r2, r3
 80050cc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	1e5a      	subs	r2, r3, #1
 80050d2:	60fa      	str	r2, [r7, #12]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d102      	bne.n	80050de <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80050d8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80050dc:	e009      	b.n	80050f2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d0f1      	beq.n	80050ce <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	22c5      	movs	r2, #197	@ 0xc5
 80050ee:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	2000001c 	.word	0x2000001c
 8005104:	10624dd3 	.word	0x10624dd3

08005108 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800510c:	4904      	ldr	r1, [pc, #16]	@ (8005120 <MX_FATFS_Init+0x18>)
 800510e:	4805      	ldr	r0, [pc, #20]	@ (8005124 <MX_FATFS_Init+0x1c>)
 8005110:	f003 f9b2 	bl	8008478 <FATFS_LinkDriver>
 8005114:	4603      	mov	r3, r0
 8005116:	461a      	mov	r2, r3
 8005118:	4b03      	ldr	r3, [pc, #12]	@ (8005128 <MX_FATFS_Init+0x20>)
 800511a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800511c:	bf00      	nop
 800511e:	bd80      	pop	{r7, pc}
 8005120:	200003ec 	.word	0x200003ec
 8005124:	08008ea8 	.word	0x08008ea8
 8005128:	200003e8 	.word	0x200003e8

0800512c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800512c:	b480      	push	{r7}
 800512e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005130:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005132:	4618      	mov	r0, r3
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005142:	2300      	movs	r3, #0
 8005144:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005146:	f000 f888 	bl	800525a <BSP_SD_IsDetected>
 800514a:	4603      	mov	r3, r0
 800514c:	2b01      	cmp	r3, #1
 800514e:	d001      	beq.n	8005154 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8005150:	2302      	movs	r3, #2
 8005152:	e005      	b.n	8005160 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8005154:	4804      	ldr	r0, [pc, #16]	@ (8005168 <BSP_SD_Init+0x2c>)
 8005156:	f7fe f97d 	bl	8003454 <HAL_SD_Init>
 800515a:	4603      	mov	r3, r0
 800515c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800515e:	79fb      	ldrb	r3, [r7, #7]
}
 8005160:	4618      	mov	r0, r3
 8005162:	3708      	adds	r7, #8
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	2000029c 	.word	0x2000029c

0800516c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b086      	sub	sp, #24
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005178:	2300      	movs	r3, #0
 800517a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	68f9      	ldr	r1, [r7, #12]
 8005182:	4806      	ldr	r0, [pc, #24]	@ (800519c <BSP_SD_ReadBlocks_DMA+0x30>)
 8005184:	f7fe fa1e 	bl	80035c4 <HAL_SD_ReadBlocks_DMA>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d001      	beq.n	8005192 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005192:	7dfb      	ldrb	r3, [r7, #23]
}
 8005194:	4618      	mov	r0, r3
 8005196:	3718      	adds	r7, #24
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	2000029c 	.word	0x2000029c

080051a0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80051ac:	2300      	movs	r3, #0
 80051ae:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	68ba      	ldr	r2, [r7, #8]
 80051b4:	68f9      	ldr	r1, [r7, #12]
 80051b6:	4806      	ldr	r0, [pc, #24]	@ (80051d0 <BSP_SD_WriteBlocks_DMA+0x30>)
 80051b8:	f7fe fae6 	bl	8003788 <HAL_SD_WriteBlocks_DMA>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d001      	beq.n	80051c6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80051c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3718      	adds	r7, #24
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	2000029c 	.word	0x2000029c

080051d4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80051d8:	4805      	ldr	r0, [pc, #20]	@ (80051f0 <BSP_SD_GetCardState+0x1c>)
 80051da:	f7fe ff0b 	bl	8003ff4 <HAL_SD_GetCardState>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b04      	cmp	r3, #4
 80051e2:	bf14      	ite	ne
 80051e4:	2301      	movne	r3, #1
 80051e6:	2300      	moveq	r3, #0
 80051e8:	b2db      	uxtb	r3, r3
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	2000029c 	.word	0x2000029c

080051f4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80051fc:	6879      	ldr	r1, [r7, #4]
 80051fe:	4803      	ldr	r0, [pc, #12]	@ (800520c <BSP_SD_GetCardInfo+0x18>)
 8005200:	f7fe fecc 	bl	8003f9c <HAL_SD_GetCardInfo>
}
 8005204:	bf00      	nop
 8005206:	3708      	adds	r7, #8
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	2000029c 	.word	0x2000029c

08005210 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8005218:	f000 f818 	bl	800524c <BSP_SD_AbortCallback>
}
 800521c:	bf00      	nop
 800521e:	3708      	adds	r7, #8
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800522c:	f000 f9a8 	bl	8005580 <BSP_SD_WriteCpltCallback>
}
 8005230:	bf00      	nop
 8005232:	3708      	adds	r7, #8
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005240:	f000 f9aa 	bl	8005598 <BSP_SD_ReadCpltCallback>
}
 8005244:	bf00      	nop
 8005246:	3708      	adds	r7, #8
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800524c:	b480      	push	{r7}
 800524e:	af00      	add	r7, sp, #0

}
 8005250:	bf00      	nop
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b082      	sub	sp, #8
 800525e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005260:	2301      	movs	r3, #1
 8005262:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8005264:	f000 f80c 	bl	8005280 <BSP_PlatformIsDetected>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800526e:	2300      	movs	r3, #0
 8005270:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005272:	79fb      	ldrb	r3, [r7, #7]
 8005274:	b2db      	uxtb	r3, r3
}
 8005276:	4618      	mov	r0, r3
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
	...

08005280 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8005286:	2301      	movs	r3, #1
 8005288:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800528a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800528e:	4806      	ldr	r0, [pc, #24]	@ (80052a8 <BSP_PlatformIsDetected+0x28>)
 8005290:	f7fd f868 	bl	8002364 <HAL_GPIO_ReadPin>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d001      	beq.n	800529e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800529a:	2300      	movs	r3, #0
 800529c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800529e:	79fb      	ldrb	r3, [r7, #7]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3708      	adds	r7, #8
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	40020800 	.word	0x40020800

080052ac <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80052b4:	f7fc f9c2 	bl	800163c <HAL_GetTick>
 80052b8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80052ba:	e006      	b.n	80052ca <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80052bc:	f7ff ff8a 	bl	80051d4 <BSP_SD_GetCardState>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80052c6:	2300      	movs	r3, #0
 80052c8:	e009      	b.n	80052de <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80052ca:	f7fc f9b7 	bl	800163c <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d8f0      	bhi.n	80052bc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80052da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
	...

080052e8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	4603      	mov	r3, r0
 80052f0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80052f2:	4b0b      	ldr	r3, [pc, #44]	@ (8005320 <SD_CheckStatus+0x38>)
 80052f4:	2201      	movs	r2, #1
 80052f6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80052f8:	f7ff ff6c 	bl	80051d4 <BSP_SD_GetCardState>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d107      	bne.n	8005312 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005302:	4b07      	ldr	r3, [pc, #28]	@ (8005320 <SD_CheckStatus+0x38>)
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	b2db      	uxtb	r3, r3
 8005308:	f023 0301 	bic.w	r3, r3, #1
 800530c:	b2da      	uxtb	r2, r3
 800530e:	4b04      	ldr	r3, [pc, #16]	@ (8005320 <SD_CheckStatus+0x38>)
 8005310:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005312:	4b03      	ldr	r3, [pc, #12]	@ (8005320 <SD_CheckStatus+0x38>)
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	b2db      	uxtb	r3, r3
}
 8005318:	4618      	mov	r0, r3
 800531a:	3708      	adds	r7, #8
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	20000025 	.word	0x20000025

08005324 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	4603      	mov	r3, r0
 800532c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800532e:	f7ff ff05 	bl	800513c <BSP_SD_Init>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d107      	bne.n	8005348 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8005338:	79fb      	ldrb	r3, [r7, #7]
 800533a:	4618      	mov	r0, r3
 800533c:	f7ff ffd4 	bl	80052e8 <SD_CheckStatus>
 8005340:	4603      	mov	r3, r0
 8005342:	461a      	mov	r2, r3
 8005344:	4b04      	ldr	r3, [pc, #16]	@ (8005358 <SD_initialize+0x34>)
 8005346:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005348:	4b03      	ldr	r3, [pc, #12]	@ (8005358 <SD_initialize+0x34>)
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	b2db      	uxtb	r3, r3
}
 800534e:	4618      	mov	r0, r3
 8005350:	3708      	adds	r7, #8
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	20000025 	.word	0x20000025

0800535c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	4603      	mov	r3, r0
 8005364:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005366:	79fb      	ldrb	r3, [r7, #7]
 8005368:	4618      	mov	r0, r3
 800536a:	f7ff ffbd 	bl	80052e8 <SD_CheckStatus>
 800536e:	4603      	mov	r3, r0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3708      	adds	r7, #8
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b086      	sub	sp, #24
 800537c:	af00      	add	r7, sp, #0
 800537e:	60b9      	str	r1, [r7, #8]
 8005380:	607a      	str	r2, [r7, #4]
 8005382:	603b      	str	r3, [r7, #0]
 8005384:	4603      	mov	r3, r0
 8005386:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800538c:	f247 5030 	movw	r0, #30000	@ 0x7530
 8005390:	f7ff ff8c 	bl	80052ac <SD_CheckStatusWithTimeout>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	da01      	bge.n	800539e <SD_read+0x26>
  {
    return res;
 800539a:	7dfb      	ldrb	r3, [r7, #23]
 800539c:	e03b      	b.n	8005416 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800539e:	683a      	ldr	r2, [r7, #0]
 80053a0:	6879      	ldr	r1, [r7, #4]
 80053a2:	68b8      	ldr	r0, [r7, #8]
 80053a4:	f7ff fee2 	bl	800516c <BSP_SD_ReadBlocks_DMA>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d132      	bne.n	8005414 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80053ae:	4b1c      	ldr	r3, [pc, #112]	@ (8005420 <SD_read+0xa8>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80053b4:	f7fc f942 	bl	800163c <HAL_GetTick>
 80053b8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80053ba:	bf00      	nop
 80053bc:	4b18      	ldr	r3, [pc, #96]	@ (8005420 <SD_read+0xa8>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d108      	bne.n	80053d6 <SD_read+0x5e>
 80053c4:	f7fc f93a 	bl	800163c <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	f247 522f 	movw	r2, #29999	@ 0x752f
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d9f2      	bls.n	80053bc <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80053d6:	4b12      	ldr	r3, [pc, #72]	@ (8005420 <SD_read+0xa8>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d102      	bne.n	80053e4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	75fb      	strb	r3, [r7, #23]
 80053e2:	e017      	b.n	8005414 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80053e4:	4b0e      	ldr	r3, [pc, #56]	@ (8005420 <SD_read+0xa8>)
 80053e6:	2200      	movs	r2, #0
 80053e8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80053ea:	f7fc f927 	bl	800163c <HAL_GetTick>
 80053ee:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80053f0:	e007      	b.n	8005402 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80053f2:	f7ff feef 	bl	80051d4 <BSP_SD_GetCardState>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d102      	bne.n	8005402 <SD_read+0x8a>
          {
            res = RES_OK;
 80053fc:	2300      	movs	r3, #0
 80053fe:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8005400:	e008      	b.n	8005414 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005402:	f7fc f91b 	bl	800163c <HAL_GetTick>
 8005406:	4602      	mov	r2, r0
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8005410:	4293      	cmp	r3, r2
 8005412:	d9ee      	bls.n	80053f2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8005414:	7dfb      	ldrb	r3, [r7, #23]
}
 8005416:	4618      	mov	r0, r3
 8005418:	3718      	adds	r7, #24
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	20000854 	.word	0x20000854

08005424 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af00      	add	r7, sp, #0
 800542a:	60b9      	str	r1, [r7, #8]
 800542c:	607a      	str	r2, [r7, #4]
 800542e:	603b      	str	r3, [r7, #0]
 8005430:	4603      	mov	r3, r0
 8005432:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8005438:	4b24      	ldr	r3, [pc, #144]	@ (80054cc <SD_write+0xa8>)
 800543a:	2200      	movs	r2, #0
 800543c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800543e:	f247 5030 	movw	r0, #30000	@ 0x7530
 8005442:	f7ff ff33 	bl	80052ac <SD_CheckStatusWithTimeout>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	da01      	bge.n	8005450 <SD_write+0x2c>
  {
    return res;
 800544c:	7dfb      	ldrb	r3, [r7, #23]
 800544e:	e038      	b.n	80054c2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8005450:	683a      	ldr	r2, [r7, #0]
 8005452:	6879      	ldr	r1, [r7, #4]
 8005454:	68b8      	ldr	r0, [r7, #8]
 8005456:	f7ff fea3 	bl	80051a0 <BSP_SD_WriteBlocks_DMA>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d12f      	bne.n	80054c0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8005460:	f7fc f8ec 	bl	800163c <HAL_GetTick>
 8005464:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8005466:	bf00      	nop
 8005468:	4b18      	ldr	r3, [pc, #96]	@ (80054cc <SD_write+0xa8>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d108      	bne.n	8005482 <SD_write+0x5e>
 8005470:	f7fc f8e4 	bl	800163c <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	f247 522f 	movw	r2, #29999	@ 0x752f
 800547e:	4293      	cmp	r3, r2
 8005480:	d9f2      	bls.n	8005468 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8005482:	4b12      	ldr	r3, [pc, #72]	@ (80054cc <SD_write+0xa8>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d102      	bne.n	8005490 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	75fb      	strb	r3, [r7, #23]
 800548e:	e017      	b.n	80054c0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8005490:	4b0e      	ldr	r3, [pc, #56]	@ (80054cc <SD_write+0xa8>)
 8005492:	2200      	movs	r2, #0
 8005494:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8005496:	f7fc f8d1 	bl	800163c <HAL_GetTick>
 800549a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800549c:	e007      	b.n	80054ae <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800549e:	f7ff fe99 	bl	80051d4 <BSP_SD_GetCardState>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d102      	bne.n	80054ae <SD_write+0x8a>
          {
            res = RES_OK;
 80054a8:	2300      	movs	r3, #0
 80054aa:	75fb      	strb	r3, [r7, #23]
            break;
 80054ac:	e008      	b.n	80054c0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80054ae:	f7fc f8c5 	bl	800163c <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	f247 522f 	movw	r2, #29999	@ 0x752f
 80054bc:	4293      	cmp	r3, r2
 80054be:	d9ee      	bls.n	800549e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80054c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3718      	adds	r7, #24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	20000850 	.word	0x20000850

080054d0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b08c      	sub	sp, #48	@ 0x30
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	4603      	mov	r3, r0
 80054d8:	603a      	str	r2, [r7, #0]
 80054da:	71fb      	strb	r3, [r7, #7]
 80054dc:	460b      	mov	r3, r1
 80054de:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80054e6:	4b25      	ldr	r3, [pc, #148]	@ (800557c <SD_ioctl+0xac>)
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d001      	beq.n	80054f8 <SD_ioctl+0x28>
 80054f4:	2303      	movs	r3, #3
 80054f6:	e03c      	b.n	8005572 <SD_ioctl+0xa2>

  switch (cmd)
 80054f8:	79bb      	ldrb	r3, [r7, #6]
 80054fa:	2b03      	cmp	r3, #3
 80054fc:	d834      	bhi.n	8005568 <SD_ioctl+0x98>
 80054fe:	a201      	add	r2, pc, #4	@ (adr r2, 8005504 <SD_ioctl+0x34>)
 8005500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005504:	08005515 	.word	0x08005515
 8005508:	0800551d 	.word	0x0800551d
 800550c:	08005535 	.word	0x08005535
 8005510:	0800554f 	.word	0x0800554f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005514:	2300      	movs	r3, #0
 8005516:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800551a:	e028      	b.n	800556e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800551c:	f107 030c 	add.w	r3, r7, #12
 8005520:	4618      	mov	r0, r3
 8005522:	f7ff fe67 	bl	80051f4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005526:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800552c:	2300      	movs	r3, #0
 800552e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005532:	e01c      	b.n	800556e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005534:	f107 030c 	add.w	r3, r7, #12
 8005538:	4618      	mov	r0, r3
 800553a:	f7ff fe5b 	bl	80051f4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800553e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005540:	b29a      	uxth	r2, r3
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005546:	2300      	movs	r3, #0
 8005548:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800554c:	e00f      	b.n	800556e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800554e:	f107 030c 	add.w	r3, r7, #12
 8005552:	4618      	mov	r0, r3
 8005554:	f7ff fe4e 	bl	80051f4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800555a:	0a5a      	lsrs	r2, r3, #9
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005560:	2300      	movs	r3, #0
 8005562:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005566:	e002      	b.n	800556e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005568:	2304      	movs	r3, #4
 800556a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800556e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005572:	4618      	mov	r0, r3
 8005574:	3730      	adds	r7, #48	@ 0x30
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	20000025 	.word	0x20000025

08005580 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8005580:	b480      	push	{r7}
 8005582:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8005584:	4b03      	ldr	r3, [pc, #12]	@ (8005594 <BSP_SD_WriteCpltCallback+0x14>)
 8005586:	2201      	movs	r2, #1
 8005588:	601a      	str	r2, [r3, #0]
}
 800558a:	bf00      	nop
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	20000850 	.word	0x20000850

08005598 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8005598:	b480      	push	{r7}
 800559a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800559c:	4b03      	ldr	r3, [pc, #12]	@ (80055ac <BSP_SD_ReadCpltCallback+0x14>)
 800559e:	2201      	movs	r2, #1
 80055a0:	601a      	str	r2, [r3, #0]
}
 80055a2:	bf00      	nop
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr
 80055ac:	20000854 	.word	0x20000854

080055b0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	4603      	mov	r3, r0
 80055b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80055ba:	79fb      	ldrb	r3, [r7, #7]
 80055bc:	4a08      	ldr	r2, [pc, #32]	@ (80055e0 <disk_status+0x30>)
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	4413      	add	r3, r2
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	79fa      	ldrb	r2, [r7, #7]
 80055c8:	4905      	ldr	r1, [pc, #20]	@ (80055e0 <disk_status+0x30>)
 80055ca:	440a      	add	r2, r1
 80055cc:	7a12      	ldrb	r2, [r2, #8]
 80055ce:	4610      	mov	r0, r2
 80055d0:	4798      	blx	r3
 80055d2:	4603      	mov	r3, r0
 80055d4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80055d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	20000880 	.word	0x20000880

080055e4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	4603      	mov	r3, r0
 80055ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80055ee:	2300      	movs	r3, #0
 80055f0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80055f2:	79fb      	ldrb	r3, [r7, #7]
 80055f4:	4a0d      	ldr	r2, [pc, #52]	@ (800562c <disk_initialize+0x48>)
 80055f6:	5cd3      	ldrb	r3, [r2, r3]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d111      	bne.n	8005620 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80055fc:	79fb      	ldrb	r3, [r7, #7]
 80055fe:	4a0b      	ldr	r2, [pc, #44]	@ (800562c <disk_initialize+0x48>)
 8005600:	2101      	movs	r1, #1
 8005602:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005604:	79fb      	ldrb	r3, [r7, #7]
 8005606:	4a09      	ldr	r2, [pc, #36]	@ (800562c <disk_initialize+0x48>)
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	4413      	add	r3, r2
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	79fa      	ldrb	r2, [r7, #7]
 8005612:	4906      	ldr	r1, [pc, #24]	@ (800562c <disk_initialize+0x48>)
 8005614:	440a      	add	r2, r1
 8005616:	7a12      	ldrb	r2, [r2, #8]
 8005618:	4610      	mov	r0, r2
 800561a:	4798      	blx	r3
 800561c:	4603      	mov	r3, r0
 800561e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005620:	7bfb      	ldrb	r3, [r7, #15]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	20000880 	.word	0x20000880

08005630 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005630:	b590      	push	{r4, r7, lr}
 8005632:	b087      	sub	sp, #28
 8005634:	af00      	add	r7, sp, #0
 8005636:	60b9      	str	r1, [r7, #8]
 8005638:	607a      	str	r2, [r7, #4]
 800563a:	603b      	str	r3, [r7, #0]
 800563c:	4603      	mov	r3, r0
 800563e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005640:	7bfb      	ldrb	r3, [r7, #15]
 8005642:	4a0a      	ldr	r2, [pc, #40]	@ (800566c <disk_read+0x3c>)
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	4413      	add	r3, r2
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	689c      	ldr	r4, [r3, #8]
 800564c:	7bfb      	ldrb	r3, [r7, #15]
 800564e:	4a07      	ldr	r2, [pc, #28]	@ (800566c <disk_read+0x3c>)
 8005650:	4413      	add	r3, r2
 8005652:	7a18      	ldrb	r0, [r3, #8]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	68b9      	ldr	r1, [r7, #8]
 800565a:	47a0      	blx	r4
 800565c:	4603      	mov	r3, r0
 800565e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005660:	7dfb      	ldrb	r3, [r7, #23]
}
 8005662:	4618      	mov	r0, r3
 8005664:	371c      	adds	r7, #28
 8005666:	46bd      	mov	sp, r7
 8005668:	bd90      	pop	{r4, r7, pc}
 800566a:	bf00      	nop
 800566c:	20000880 	.word	0x20000880

08005670 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005670:	b590      	push	{r4, r7, lr}
 8005672:	b087      	sub	sp, #28
 8005674:	af00      	add	r7, sp, #0
 8005676:	60b9      	str	r1, [r7, #8]
 8005678:	607a      	str	r2, [r7, #4]
 800567a:	603b      	str	r3, [r7, #0]
 800567c:	4603      	mov	r3, r0
 800567e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005680:	7bfb      	ldrb	r3, [r7, #15]
 8005682:	4a0a      	ldr	r2, [pc, #40]	@ (80056ac <disk_write+0x3c>)
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	4413      	add	r3, r2
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	68dc      	ldr	r4, [r3, #12]
 800568c:	7bfb      	ldrb	r3, [r7, #15]
 800568e:	4a07      	ldr	r2, [pc, #28]	@ (80056ac <disk_write+0x3c>)
 8005690:	4413      	add	r3, r2
 8005692:	7a18      	ldrb	r0, [r3, #8]
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	68b9      	ldr	r1, [r7, #8]
 800569a:	47a0      	blx	r4
 800569c:	4603      	mov	r3, r0
 800569e:	75fb      	strb	r3, [r7, #23]
  return res;
 80056a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	371c      	adds	r7, #28
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd90      	pop	{r4, r7, pc}
 80056aa:	bf00      	nop
 80056ac:	20000880 	.word	0x20000880

080056b0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	4603      	mov	r3, r0
 80056b8:	603a      	str	r2, [r7, #0]
 80056ba:	71fb      	strb	r3, [r7, #7]
 80056bc:	460b      	mov	r3, r1
 80056be:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80056c0:	79fb      	ldrb	r3, [r7, #7]
 80056c2:	4a09      	ldr	r2, [pc, #36]	@ (80056e8 <disk_ioctl+0x38>)
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4413      	add	r3, r2
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	79fa      	ldrb	r2, [r7, #7]
 80056ce:	4906      	ldr	r1, [pc, #24]	@ (80056e8 <disk_ioctl+0x38>)
 80056d0:	440a      	add	r2, r1
 80056d2:	7a10      	ldrb	r0, [r2, #8]
 80056d4:	79b9      	ldrb	r1, [r7, #6]
 80056d6:	683a      	ldr	r2, [r7, #0]
 80056d8:	4798      	blx	r3
 80056da:	4603      	mov	r3, r0
 80056dc:	73fb      	strb	r3, [r7, #15]
  return res;
 80056de:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3710      	adds	r7, #16
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	20000880 	.word	0x20000880

080056ec <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	3301      	adds	r3, #1
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80056fc:	89fb      	ldrh	r3, [r7, #14]
 80056fe:	021b      	lsls	r3, r3, #8
 8005700:	b21a      	sxth	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	b21b      	sxth	r3, r3
 8005708:	4313      	orrs	r3, r2
 800570a:	b21b      	sxth	r3, r3
 800570c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800570e:	89fb      	ldrh	r3, [r7, #14]
}
 8005710:	4618      	mov	r0, r3
 8005712:	3714      	adds	r7, #20
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	3303      	adds	r3, #3
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	021b      	lsls	r3, r3, #8
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	3202      	adds	r2, #2
 8005734:	7812      	ldrb	r2, [r2, #0]
 8005736:	4313      	orrs	r3, r2
 8005738:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	021b      	lsls	r3, r3, #8
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	3201      	adds	r2, #1
 8005742:	7812      	ldrb	r2, [r2, #0]
 8005744:	4313      	orrs	r3, r2
 8005746:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	021b      	lsls	r3, r3, #8
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	7812      	ldrb	r2, [r2, #0]
 8005750:	4313      	orrs	r3, r2
 8005752:	60fb      	str	r3, [r7, #12]
	return rv;
 8005754:	68fb      	ldr	r3, [r7, #12]
}
 8005756:	4618      	mov	r0, r3
 8005758:	3714      	adds	r7, #20
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr

08005762 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005762:	b480      	push	{r7}
 8005764:	b083      	sub	sp, #12
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
 800576a:	460b      	mov	r3, r1
 800576c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	1c5a      	adds	r2, r3, #1
 8005772:	607a      	str	r2, [r7, #4]
 8005774:	887a      	ldrh	r2, [r7, #2]
 8005776:	b2d2      	uxtb	r2, r2
 8005778:	701a      	strb	r2, [r3, #0]
 800577a:	887b      	ldrh	r3, [r7, #2]
 800577c:	0a1b      	lsrs	r3, r3, #8
 800577e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	1c5a      	adds	r2, r3, #1
 8005784:	607a      	str	r2, [r7, #4]
 8005786:	887a      	ldrh	r2, [r7, #2]
 8005788:	b2d2      	uxtb	r2, r2
 800578a:	701a      	strb	r2, [r3, #0]
}
 800578c:	bf00      	nop
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	1c5a      	adds	r2, r3, #1
 80057a6:	607a      	str	r2, [r7, #4]
 80057a8:	683a      	ldr	r2, [r7, #0]
 80057aa:	b2d2      	uxtb	r2, r2
 80057ac:	701a      	strb	r2, [r3, #0]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	0a1b      	lsrs	r3, r3, #8
 80057b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	1c5a      	adds	r2, r3, #1
 80057b8:	607a      	str	r2, [r7, #4]
 80057ba:	683a      	ldr	r2, [r7, #0]
 80057bc:	b2d2      	uxtb	r2, r2
 80057be:	701a      	strb	r2, [r3, #0]
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	0a1b      	lsrs	r3, r3, #8
 80057c4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	1c5a      	adds	r2, r3, #1
 80057ca:	607a      	str	r2, [r7, #4]
 80057cc:	683a      	ldr	r2, [r7, #0]
 80057ce:	b2d2      	uxtb	r2, r2
 80057d0:	701a      	strb	r2, [r3, #0]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	0a1b      	lsrs	r3, r3, #8
 80057d6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	1c5a      	adds	r2, r3, #1
 80057dc:	607a      	str	r2, [r7, #4]
 80057de:	683a      	ldr	r2, [r7, #0]
 80057e0:	b2d2      	uxtb	r2, r2
 80057e2:	701a      	strb	r2, [r3, #0]
}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80057f0:	b480      	push	{r7}
 80057f2:	b087      	sub	sp, #28
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00d      	beq.n	8005826 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800580a:	693a      	ldr	r2, [r7, #16]
 800580c:	1c53      	adds	r3, r2, #1
 800580e:	613b      	str	r3, [r7, #16]
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	1c59      	adds	r1, r3, #1
 8005814:	6179      	str	r1, [r7, #20]
 8005816:	7812      	ldrb	r2, [r2, #0]
 8005818:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	3b01      	subs	r3, #1
 800581e:	607b      	str	r3, [r7, #4]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1f1      	bne.n	800580a <mem_cpy+0x1a>
	}
}
 8005826:	bf00      	nop
 8005828:	371c      	adds	r7, #28
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005832:	b480      	push	{r7}
 8005834:	b087      	sub	sp, #28
 8005836:	af00      	add	r7, sp, #0
 8005838:	60f8      	str	r0, [r7, #12]
 800583a:	60b9      	str	r1, [r7, #8]
 800583c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	1c5a      	adds	r2, r3, #1
 8005846:	617a      	str	r2, [r7, #20]
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	b2d2      	uxtb	r2, r2
 800584c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	3b01      	subs	r3, #1
 8005852:	607b      	str	r3, [r7, #4]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1f3      	bne.n	8005842 <mem_set+0x10>
}
 800585a:	bf00      	nop
 800585c:	bf00      	nop
 800585e:	371c      	adds	r7, #28
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005868:	b480      	push	{r7}
 800586a:	b089      	sub	sp, #36	@ 0x24
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	61fb      	str	r3, [r7, #28]
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800587c:	2300      	movs	r3, #0
 800587e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	1c5a      	adds	r2, r3, #1
 8005884:	61fa      	str	r2, [r7, #28]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	4619      	mov	r1, r3
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	1c5a      	adds	r2, r3, #1
 800588e:	61ba      	str	r2, [r7, #24]
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	1acb      	subs	r3, r1, r3
 8005894:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	3b01      	subs	r3, #1
 800589a:	607b      	str	r3, [r7, #4]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d002      	beq.n	80058a8 <mem_cmp+0x40>
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d0eb      	beq.n	8005880 <mem_cmp+0x18>

	return r;
 80058a8:	697b      	ldr	r3, [r7, #20]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3724      	adds	r7, #36	@ 0x24
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80058b6:	b480      	push	{r7}
 80058b8:	b083      	sub	sp, #12
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
 80058be:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80058c0:	e002      	b.n	80058c8 <chk_chr+0x12>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	3301      	adds	r3, #1
 80058c6:	607b      	str	r3, [r7, #4]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d005      	beq.n	80058dc <chk_chr+0x26>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	461a      	mov	r2, r3
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	4293      	cmp	r3, r2
 80058da:	d1f2      	bne.n	80058c2 <chk_chr+0xc>
	return *str;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	781b      	ldrb	r3, [r3, #0]
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b085      	sub	sp, #20
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80058f6:	2300      	movs	r3, #0
 80058f8:	60bb      	str	r3, [r7, #8]
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	60fb      	str	r3, [r7, #12]
 80058fe:	e029      	b.n	8005954 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005900:	4a27      	ldr	r2, [pc, #156]	@ (80059a0 <chk_lock+0xb4>)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	011b      	lsls	r3, r3, #4
 8005906:	4413      	add	r3, r2
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d01d      	beq.n	800594a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800590e:	4a24      	ldr	r2, [pc, #144]	@ (80059a0 <chk_lock+0xb4>)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	011b      	lsls	r3, r3, #4
 8005914:	4413      	add	r3, r2
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	429a      	cmp	r2, r3
 800591e:	d116      	bne.n	800594e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005920:	4a1f      	ldr	r2, [pc, #124]	@ (80059a0 <chk_lock+0xb4>)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	011b      	lsls	r3, r3, #4
 8005926:	4413      	add	r3, r2
 8005928:	3304      	adds	r3, #4
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005930:	429a      	cmp	r2, r3
 8005932:	d10c      	bne.n	800594e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005934:	4a1a      	ldr	r2, [pc, #104]	@ (80059a0 <chk_lock+0xb4>)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	011b      	lsls	r3, r3, #4
 800593a:	4413      	add	r3, r2
 800593c:	3308      	adds	r3, #8
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005944:	429a      	cmp	r2, r3
 8005946:	d102      	bne.n	800594e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005948:	e007      	b.n	800595a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800594a:	2301      	movs	r3, #1
 800594c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	3301      	adds	r3, #1
 8005952:	60fb      	str	r3, [r7, #12]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d9d2      	bls.n	8005900 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2b02      	cmp	r3, #2
 800595e:	d109      	bne.n	8005974 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d102      	bne.n	800596c <chk_lock+0x80>
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	2b02      	cmp	r3, #2
 800596a:	d101      	bne.n	8005970 <chk_lock+0x84>
 800596c:	2300      	movs	r3, #0
 800596e:	e010      	b.n	8005992 <chk_lock+0xa6>
 8005970:	2312      	movs	r3, #18
 8005972:	e00e      	b.n	8005992 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d108      	bne.n	800598c <chk_lock+0xa0>
 800597a:	4a09      	ldr	r2, [pc, #36]	@ (80059a0 <chk_lock+0xb4>)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	011b      	lsls	r3, r3, #4
 8005980:	4413      	add	r3, r2
 8005982:	330c      	adds	r3, #12
 8005984:	881b      	ldrh	r3, [r3, #0]
 8005986:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800598a:	d101      	bne.n	8005990 <chk_lock+0xa4>
 800598c:	2310      	movs	r3, #16
 800598e:	e000      	b.n	8005992 <chk_lock+0xa6>
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3714      	adds	r7, #20
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	20000860 	.word	0x20000860

080059a4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80059aa:	2300      	movs	r3, #0
 80059ac:	607b      	str	r3, [r7, #4]
 80059ae:	e002      	b.n	80059b6 <enq_lock+0x12>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	3301      	adds	r3, #1
 80059b4:	607b      	str	r3, [r7, #4]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d806      	bhi.n	80059ca <enq_lock+0x26>
 80059bc:	4a09      	ldr	r2, [pc, #36]	@ (80059e4 <enq_lock+0x40>)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	011b      	lsls	r3, r3, #4
 80059c2:	4413      	add	r3, r2
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1f2      	bne.n	80059b0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	bf14      	ite	ne
 80059d0:	2301      	movne	r3, #1
 80059d2:	2300      	moveq	r3, #0
 80059d4:	b2db      	uxtb	r3, r3
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	20000860 	.word	0x20000860

080059e8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80059f2:	2300      	movs	r3, #0
 80059f4:	60fb      	str	r3, [r7, #12]
 80059f6:	e01f      	b.n	8005a38 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80059f8:	4a41      	ldr	r2, [pc, #260]	@ (8005b00 <inc_lock+0x118>)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	011b      	lsls	r3, r3, #4
 80059fe:	4413      	add	r3, r2
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d113      	bne.n	8005a32 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005a0a:	4a3d      	ldr	r2, [pc, #244]	@ (8005b00 <inc_lock+0x118>)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	011b      	lsls	r3, r3, #4
 8005a10:	4413      	add	r3, r2
 8005a12:	3304      	adds	r3, #4
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d109      	bne.n	8005a32 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005a1e:	4a38      	ldr	r2, [pc, #224]	@ (8005b00 <inc_lock+0x118>)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	011b      	lsls	r3, r3, #4
 8005a24:	4413      	add	r3, r2
 8005a26:	3308      	adds	r3, #8
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d006      	beq.n	8005a40 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	3301      	adds	r3, #1
 8005a36:	60fb      	str	r3, [r7, #12]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d9dc      	bls.n	80059f8 <inc_lock+0x10>
 8005a3e:	e000      	b.n	8005a42 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005a40:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d132      	bne.n	8005aae <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	60fb      	str	r3, [r7, #12]
 8005a4c:	e002      	b.n	8005a54 <inc_lock+0x6c>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	3301      	adds	r3, #1
 8005a52:	60fb      	str	r3, [r7, #12]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d806      	bhi.n	8005a68 <inc_lock+0x80>
 8005a5a:	4a29      	ldr	r2, [pc, #164]	@ (8005b00 <inc_lock+0x118>)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	011b      	lsls	r3, r3, #4
 8005a60:	4413      	add	r3, r2
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1f2      	bne.n	8005a4e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d101      	bne.n	8005a72 <inc_lock+0x8a>
 8005a6e:	2300      	movs	r3, #0
 8005a70:	e040      	b.n	8005af4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	4922      	ldr	r1, [pc, #136]	@ (8005b00 <inc_lock+0x118>)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	011b      	lsls	r3, r3, #4
 8005a7c:	440b      	add	r3, r1
 8005a7e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	689a      	ldr	r2, [r3, #8]
 8005a84:	491e      	ldr	r1, [pc, #120]	@ (8005b00 <inc_lock+0x118>)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	011b      	lsls	r3, r3, #4
 8005a8a:	440b      	add	r3, r1
 8005a8c:	3304      	adds	r3, #4
 8005a8e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	695a      	ldr	r2, [r3, #20]
 8005a94:	491a      	ldr	r1, [pc, #104]	@ (8005b00 <inc_lock+0x118>)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	011b      	lsls	r3, r3, #4
 8005a9a:	440b      	add	r3, r1
 8005a9c:	3308      	adds	r3, #8
 8005a9e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005aa0:	4a17      	ldr	r2, [pc, #92]	@ (8005b00 <inc_lock+0x118>)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	011b      	lsls	r3, r3, #4
 8005aa6:	4413      	add	r3, r2
 8005aa8:	330c      	adds	r3, #12
 8005aaa:	2200      	movs	r2, #0
 8005aac:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d009      	beq.n	8005ac8 <inc_lock+0xe0>
 8005ab4:	4a12      	ldr	r2, [pc, #72]	@ (8005b00 <inc_lock+0x118>)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	011b      	lsls	r3, r3, #4
 8005aba:	4413      	add	r3, r2
 8005abc:	330c      	adds	r3, #12
 8005abe:	881b      	ldrh	r3, [r3, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <inc_lock+0xe0>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	e015      	b.n	8005af4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d108      	bne.n	8005ae0 <inc_lock+0xf8>
 8005ace:	4a0c      	ldr	r2, [pc, #48]	@ (8005b00 <inc_lock+0x118>)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	011b      	lsls	r3, r3, #4
 8005ad4:	4413      	add	r3, r2
 8005ad6:	330c      	adds	r3, #12
 8005ad8:	881b      	ldrh	r3, [r3, #0]
 8005ada:	3301      	adds	r3, #1
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	e001      	b.n	8005ae4 <inc_lock+0xfc>
 8005ae0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005ae4:	4906      	ldr	r1, [pc, #24]	@ (8005b00 <inc_lock+0x118>)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	011b      	lsls	r3, r3, #4
 8005aea:	440b      	add	r3, r1
 8005aec:	330c      	adds	r3, #12
 8005aee:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	3301      	adds	r3, #1
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3714      	adds	r7, #20
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr
 8005b00:	20000860 	.word	0x20000860

08005b04 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	607b      	str	r3, [r7, #4]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d825      	bhi.n	8005b64 <dec_lock+0x60>
		n = Files[i].ctr;
 8005b18:	4a17      	ldr	r2, [pc, #92]	@ (8005b78 <dec_lock+0x74>)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	011b      	lsls	r3, r3, #4
 8005b1e:	4413      	add	r3, r2
 8005b20:	330c      	adds	r3, #12
 8005b22:	881b      	ldrh	r3, [r3, #0]
 8005b24:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005b26:	89fb      	ldrh	r3, [r7, #14]
 8005b28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b2c:	d101      	bne.n	8005b32 <dec_lock+0x2e>
 8005b2e:	2300      	movs	r3, #0
 8005b30:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005b32:	89fb      	ldrh	r3, [r7, #14]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d002      	beq.n	8005b3e <dec_lock+0x3a>
 8005b38:	89fb      	ldrh	r3, [r7, #14]
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005b3e:	4a0e      	ldr	r2, [pc, #56]	@ (8005b78 <dec_lock+0x74>)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	011b      	lsls	r3, r3, #4
 8005b44:	4413      	add	r3, r2
 8005b46:	330c      	adds	r3, #12
 8005b48:	89fa      	ldrh	r2, [r7, #14]
 8005b4a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005b4c:	89fb      	ldrh	r3, [r7, #14]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d105      	bne.n	8005b5e <dec_lock+0x5a>
 8005b52:	4a09      	ldr	r2, [pc, #36]	@ (8005b78 <dec_lock+0x74>)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	011b      	lsls	r3, r3, #4
 8005b58:	4413      	add	r3, r2
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	737b      	strb	r3, [r7, #13]
 8005b62:	e001      	b.n	8005b68 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005b64:	2302      	movs	r3, #2
 8005b66:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005b68:	7b7b      	ldrb	r3, [r7, #13]
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3714      	adds	r7, #20
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	20000860 	.word	0x20000860

08005b7c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005b84:	2300      	movs	r3, #0
 8005b86:	60fb      	str	r3, [r7, #12]
 8005b88:	e010      	b.n	8005bac <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005b8a:	4a0d      	ldr	r2, [pc, #52]	@ (8005bc0 <clear_lock+0x44>)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	011b      	lsls	r3, r3, #4
 8005b90:	4413      	add	r3, r2
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d105      	bne.n	8005ba6 <clear_lock+0x2a>
 8005b9a:	4a09      	ldr	r2, [pc, #36]	@ (8005bc0 <clear_lock+0x44>)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	011b      	lsls	r3, r3, #4
 8005ba0:	4413      	add	r3, r2
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	60fb      	str	r3, [r7, #12]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d9eb      	bls.n	8005b8a <clear_lock+0xe>
	}
}
 8005bb2:	bf00      	nop
 8005bb4:	bf00      	nop
 8005bb6:	3714      	adds	r7, #20
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr
 8005bc0:	20000860 	.word	0x20000860

08005bc4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	78db      	ldrb	r3, [r3, #3]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d034      	beq.n	8005c42 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bdc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	7858      	ldrb	r0, [r3, #1]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005be8:	2301      	movs	r3, #1
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	f7ff fd40 	bl	8005670 <disk_write>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d002      	beq.n	8005bfc <sync_window+0x38>
			res = FR_DISK_ERR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	73fb      	strb	r3, [r7, #15]
 8005bfa:	e022      	b.n	8005c42 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a1b      	ldr	r3, [r3, #32]
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	1ad2      	subs	r2, r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d217      	bcs.n	8005c42 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	789b      	ldrb	r3, [r3, #2]
 8005c16:	613b      	str	r3, [r7, #16]
 8005c18:	e010      	b.n	8005c3c <sync_window+0x78>
					wsect += fs->fsize;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	4413      	add	r3, r2
 8005c22:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	7858      	ldrb	r0, [r3, #1]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005c2e:	2301      	movs	r3, #1
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	f7ff fd1d 	bl	8005670 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	613b      	str	r3, [r7, #16]
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d8eb      	bhi.n	8005c1a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3718      	adds	r7, #24
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005c56:	2300      	movs	r3, #0
 8005c58:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c5e:	683a      	ldr	r2, [r7, #0]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d01b      	beq.n	8005c9c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7ff ffad 	bl	8005bc4 <sync_window>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005c6e:	7bfb      	ldrb	r3, [r7, #15]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d113      	bne.n	8005c9c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	7858      	ldrb	r0, [r3, #1]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005c7e:	2301      	movs	r3, #1
 8005c80:	683a      	ldr	r2, [r7, #0]
 8005c82:	f7ff fcd5 	bl	8005630 <disk_read>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d004      	beq.n	8005c96 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c90:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	683a      	ldr	r2, [r7, #0]
 8005c9a:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8005c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
	...

08005ca8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f7ff ff87 	bl	8005bc4 <sync_window>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005cba:	7bfb      	ldrb	r3, [r7, #15]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d158      	bne.n	8005d72 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	2b03      	cmp	r3, #3
 8005cc6:	d148      	bne.n	8005d5a <sync_fs+0xb2>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	791b      	ldrb	r3, [r3, #4]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d144      	bne.n	8005d5a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	3330      	adds	r3, #48	@ 0x30
 8005cd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cd8:	2100      	movs	r1, #0
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7ff fda9 	bl	8005832 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	3330      	adds	r3, #48	@ 0x30
 8005ce4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005ce8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8005cec:	4618      	mov	r0, r3
 8005cee:	f7ff fd38 	bl	8005762 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	3330      	adds	r3, #48	@ 0x30
 8005cf6:	4921      	ldr	r1, [pc, #132]	@ (8005d7c <sync_fs+0xd4>)
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7ff fd4d 	bl	8005798 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	3330      	adds	r3, #48	@ 0x30
 8005d02:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005d06:	491e      	ldr	r1, [pc, #120]	@ (8005d80 <sync_fs+0xd8>)
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7ff fd45 	bl	8005798 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	3330      	adds	r3, #48	@ 0x30
 8005d12:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	4610      	mov	r0, r2
 8005d1e:	f7ff fd3b 	bl	8005798 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	3330      	adds	r3, #48	@ 0x30
 8005d26:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	4619      	mov	r1, r3
 8005d30:	4610      	mov	r0, r2
 8005d32:	f7ff fd31 	bl	8005798 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	69db      	ldr	r3, [r3, #28]
 8005d3a:	1c5a      	adds	r2, r3, #1
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	7858      	ldrb	r0, [r3, #1]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d4e:	2301      	movs	r3, #1
 8005d50:	f7ff fc8e 	bl	8005670 <disk_write>
			fs->fsi_flag = 0;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	785b      	ldrb	r3, [r3, #1]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	2100      	movs	r1, #0
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7ff fca4 	bl	80056b0 <disk_ioctl>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d001      	beq.n	8005d72 <sync_fs+0xca>
 8005d6e:	2301      	movs	r3, #1
 8005d70:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3710      	adds	r7, #16
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	41615252 	.word	0x41615252
 8005d80:	61417272 	.word	0x61417272

08005d84 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	3b02      	subs	r3, #2
 8005d92:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	695b      	ldr	r3, [r3, #20]
 8005d98:	3b02      	subs	r3, #2
 8005d9a:	683a      	ldr	r2, [r7, #0]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d301      	bcc.n	8005da4 <clust2sect+0x20>
 8005da0:	2300      	movs	r3, #0
 8005da2:	e008      	b.n	8005db6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	895b      	ldrh	r3, [r3, #10]
 8005da8:	461a      	mov	r2, r3
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	fb03 f202 	mul.w	r2, r3, r2
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005db4:	4413      	add	r3, r2
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b086      	sub	sp, #24
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
 8005dca:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d904      	bls.n	8005de2 <get_fat+0x20>
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	683a      	ldr	r2, [r7, #0]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d302      	bcc.n	8005de8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005de2:	2301      	movs	r3, #1
 8005de4:	617b      	str	r3, [r7, #20]
 8005de6:	e08e      	b.n	8005f06 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005de8:	f04f 33ff 	mov.w	r3, #4294967295
 8005dec:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	2b03      	cmp	r3, #3
 8005df4:	d061      	beq.n	8005eba <get_fat+0xf8>
 8005df6:	2b03      	cmp	r3, #3
 8005df8:	dc7b      	bgt.n	8005ef2 <get_fat+0x130>
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d002      	beq.n	8005e04 <get_fat+0x42>
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d041      	beq.n	8005e86 <get_fat+0xc4>
 8005e02:	e076      	b.n	8005ef2 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	60fb      	str	r3, [r7, #12]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	085b      	lsrs	r3, r3, #1
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	4413      	add	r3, r2
 8005e10:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	6a1a      	ldr	r2, [r3, #32]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	0a5b      	lsrs	r3, r3, #9
 8005e1a:	4413      	add	r3, r2
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	6938      	ldr	r0, [r7, #16]
 8005e20:	f7ff ff14 	bl	8005c4c <move_window>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d166      	bne.n	8005ef8 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	1c5a      	adds	r2, r3, #1
 8005e2e:	60fa      	str	r2, [r7, #12]
 8005e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	4413      	add	r3, r2
 8005e38:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005e3c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	6a1a      	ldr	r2, [r3, #32]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	0a5b      	lsrs	r3, r3, #9
 8005e46:	4413      	add	r3, r2
 8005e48:	4619      	mov	r1, r3
 8005e4a:	6938      	ldr	r0, [r7, #16]
 8005e4c:	f7ff fefe 	bl	8005c4c <move_window>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d152      	bne.n	8005efc <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	4413      	add	r3, r2
 8005e60:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005e64:	021b      	lsls	r3, r3, #8
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d002      	beq.n	8005e7c <get_fat+0xba>
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	091b      	lsrs	r3, r3, #4
 8005e7a:	e002      	b.n	8005e82 <get_fat+0xc0>
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e82:	617b      	str	r3, [r7, #20]
			break;
 8005e84:	e03f      	b.n	8005f06 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	6a1a      	ldr	r2, [r3, #32]
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	0a1b      	lsrs	r3, r3, #8
 8005e8e:	4413      	add	r3, r2
 8005e90:	4619      	mov	r1, r3
 8005e92:	6938      	ldr	r0, [r7, #16]
 8005e94:	f7ff feda 	bl	8005c4c <move_window>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d130      	bne.n	8005f00 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	005b      	lsls	r3, r3, #1
 8005ea8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8005eac:	4413      	add	r3, r2
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f7ff fc1c 	bl	80056ec <ld_word>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	617b      	str	r3, [r7, #20]
			break;
 8005eb8:	e025      	b.n	8005f06 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	6a1a      	ldr	r2, [r3, #32]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	09db      	lsrs	r3, r3, #7
 8005ec2:	4413      	add	r3, r2
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	6938      	ldr	r0, [r7, #16]
 8005ec8:	f7ff fec0 	bl	8005c4c <move_window>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d118      	bne.n	8005f04 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8005ee0:	4413      	add	r3, r2
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7ff fc1a 	bl	800571c <ld_dword>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005eee:	617b      	str	r3, [r7, #20]
			break;
 8005ef0:	e009      	b.n	8005f06 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	617b      	str	r3, [r7, #20]
 8005ef6:	e006      	b.n	8005f06 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005ef8:	bf00      	nop
 8005efa:	e004      	b.n	8005f06 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005efc:	bf00      	nop
 8005efe:	e002      	b.n	8005f06 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005f00:	bf00      	nop
 8005f02:	e000      	b.n	8005f06 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005f04:	bf00      	nop
		}
	}

	return val;
 8005f06:	697b      	ldr	r3, [r7, #20]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3718      	adds	r7, #24
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005f10:	b590      	push	{r4, r7, lr}
 8005f12:	b089      	sub	sp, #36	@ 0x24
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	f240 80d9 	bls.w	80060da <put_fat+0x1ca>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	695b      	ldr	r3, [r3, #20]
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	f080 80d3 	bcs.w	80060da <put_fat+0x1ca>
		switch (fs->fs_type) {
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	2b03      	cmp	r3, #3
 8005f3a:	f000 8096 	beq.w	800606a <put_fat+0x15a>
 8005f3e:	2b03      	cmp	r3, #3
 8005f40:	f300 80cb 	bgt.w	80060da <put_fat+0x1ca>
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d002      	beq.n	8005f4e <put_fat+0x3e>
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d06e      	beq.n	800602a <put_fat+0x11a>
 8005f4c:	e0c5      	b.n	80060da <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	61bb      	str	r3, [r7, #24]
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	085b      	lsrs	r3, r3, #1
 8005f56:	69ba      	ldr	r2, [r7, #24]
 8005f58:	4413      	add	r3, r2
 8005f5a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6a1a      	ldr	r2, [r3, #32]
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	0a5b      	lsrs	r3, r3, #9
 8005f64:	4413      	add	r3, r2
 8005f66:	4619      	mov	r1, r3
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f7ff fe6f 	bl	8005c4c <move_window>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005f72:	7ffb      	ldrb	r3, [r7, #31]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f040 80a9 	bne.w	80060cc <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	1c59      	adds	r1, r3, #1
 8005f84:	61b9      	str	r1, [r7, #24]
 8005f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f8a:	4413      	add	r3, r2
 8005f8c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	f003 0301 	and.w	r3, r3, #1
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d00d      	beq.n	8005fb4 <put_fat+0xa4>
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	b25b      	sxtb	r3, r3
 8005f9e:	f003 030f 	and.w	r3, r3, #15
 8005fa2:	b25a      	sxtb	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	011b      	lsls	r3, r3, #4
 8005faa:	b25b      	sxtb	r3, r3
 8005fac:	4313      	orrs	r3, r2
 8005fae:	b25b      	sxtb	r3, r3
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	e001      	b.n	8005fb8 <put_fat+0xa8>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	697a      	ldr	r2, [r7, #20]
 8005fba:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6a1a      	ldr	r2, [r3, #32]
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	0a5b      	lsrs	r3, r3, #9
 8005fca:	4413      	add	r3, r2
 8005fcc:	4619      	mov	r1, r3
 8005fce:	68f8      	ldr	r0, [r7, #12]
 8005fd0:	f7ff fe3c 	bl	8005c4c <move_window>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005fd8:	7ffb      	ldrb	r3, [r7, #31]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d178      	bne.n	80060d0 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fea:	4413      	add	r3, r2
 8005fec:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	f003 0301 	and.w	r3, r3, #1
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d003      	beq.n	8006000 <put_fat+0xf0>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	091b      	lsrs	r3, r3, #4
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	e00e      	b.n	800601e <put_fat+0x10e>
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	b25b      	sxtb	r3, r3
 8006006:	f023 030f 	bic.w	r3, r3, #15
 800600a:	b25a      	sxtb	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	0a1b      	lsrs	r3, r3, #8
 8006010:	b25b      	sxtb	r3, r3
 8006012:	f003 030f 	and.w	r3, r3, #15
 8006016:	b25b      	sxtb	r3, r3
 8006018:	4313      	orrs	r3, r2
 800601a:	b25b      	sxtb	r3, r3
 800601c:	b2db      	uxtb	r3, r3
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2201      	movs	r2, #1
 8006026:	70da      	strb	r2, [r3, #3]
			break;
 8006028:	e057      	b.n	80060da <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6a1a      	ldr	r2, [r3, #32]
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	0a1b      	lsrs	r3, r3, #8
 8006032:	4413      	add	r3, r2
 8006034:	4619      	mov	r1, r3
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	f7ff fe08 	bl	8005c4c <move_window>
 800603c:	4603      	mov	r3, r0
 800603e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006040:	7ffb      	ldrb	r3, [r7, #31]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d146      	bne.n	80060d4 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	005b      	lsls	r3, r3, #1
 8006050:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006054:	4413      	add	r3, r2
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	b292      	uxth	r2, r2
 800605a:	4611      	mov	r1, r2
 800605c:	4618      	mov	r0, r3
 800605e:	f7ff fb80 	bl	8005762 <st_word>
			fs->wflag = 1;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2201      	movs	r2, #1
 8006066:	70da      	strb	r2, [r3, #3]
			break;
 8006068:	e037      	b.n	80060da <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6a1a      	ldr	r2, [r3, #32]
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	09db      	lsrs	r3, r3, #7
 8006072:	4413      	add	r3, r2
 8006074:	4619      	mov	r1, r3
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f7ff fde8 	bl	8005c4c <move_window>
 800607c:	4603      	mov	r3, r0
 800607e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006080:	7ffb      	ldrb	r3, [r7, #31]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d128      	bne.n	80060d8 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800609a:	4413      	add	r3, r2
 800609c:	4618      	mov	r0, r3
 800609e:	f7ff fb3d 	bl	800571c <ld_dword>
 80060a2:	4603      	mov	r3, r0
 80060a4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80060a8:	4323      	orrs	r3, r4
 80060aa:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80060ba:	4413      	add	r3, r2
 80060bc:	6879      	ldr	r1, [r7, #4]
 80060be:	4618      	mov	r0, r3
 80060c0:	f7ff fb6a 	bl	8005798 <st_dword>
			fs->wflag = 1;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2201      	movs	r2, #1
 80060c8:	70da      	strb	r2, [r3, #3]
			break;
 80060ca:	e006      	b.n	80060da <put_fat+0x1ca>
			if (res != FR_OK) break;
 80060cc:	bf00      	nop
 80060ce:	e004      	b.n	80060da <put_fat+0x1ca>
			if (res != FR_OK) break;
 80060d0:	bf00      	nop
 80060d2:	e002      	b.n	80060da <put_fat+0x1ca>
			if (res != FR_OK) break;
 80060d4:	bf00      	nop
 80060d6:	e000      	b.n	80060da <put_fat+0x1ca>
			if (res != FR_OK) break;
 80060d8:	bf00      	nop
		}
	}
	return res;
 80060da:	7ffb      	ldrb	r3, [r7, #31]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3724      	adds	r7, #36	@ 0x24
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd90      	pop	{r4, r7, pc}

080060e4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b088      	sub	sp, #32
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80060f0:	2300      	movs	r3, #0
 80060f2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d904      	bls.n	800610a <remove_chain+0x26>
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	695b      	ldr	r3, [r3, #20]
 8006104:	68ba      	ldr	r2, [r7, #8]
 8006106:	429a      	cmp	r2, r3
 8006108:	d301      	bcc.n	800610e <remove_chain+0x2a>
 800610a:	2302      	movs	r3, #2
 800610c:	e04b      	b.n	80061a6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00c      	beq.n	800612e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006114:	f04f 32ff 	mov.w	r2, #4294967295
 8006118:	6879      	ldr	r1, [r7, #4]
 800611a:	69b8      	ldr	r0, [r7, #24]
 800611c:	f7ff fef8 	bl	8005f10 <put_fat>
 8006120:	4603      	mov	r3, r0
 8006122:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006124:	7ffb      	ldrb	r3, [r7, #31]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d001      	beq.n	800612e <remove_chain+0x4a>
 800612a:	7ffb      	ldrb	r3, [r7, #31]
 800612c:	e03b      	b.n	80061a6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800612e:	68b9      	ldr	r1, [r7, #8]
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f7ff fe46 	bl	8005dc2 <get_fat>
 8006136:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d031      	beq.n	80061a2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	2b01      	cmp	r3, #1
 8006142:	d101      	bne.n	8006148 <remove_chain+0x64>
 8006144:	2302      	movs	r3, #2
 8006146:	e02e      	b.n	80061a6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614e:	d101      	bne.n	8006154 <remove_chain+0x70>
 8006150:	2301      	movs	r3, #1
 8006152:	e028      	b.n	80061a6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006154:	2200      	movs	r2, #0
 8006156:	68b9      	ldr	r1, [r7, #8]
 8006158:	69b8      	ldr	r0, [r7, #24]
 800615a:	f7ff fed9 	bl	8005f10 <put_fat>
 800615e:	4603      	mov	r3, r0
 8006160:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006162:	7ffb      	ldrb	r3, [r7, #31]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d001      	beq.n	800616c <remove_chain+0x88>
 8006168:	7ffb      	ldrb	r3, [r7, #31]
 800616a:	e01c      	b.n	80061a6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	691a      	ldr	r2, [r3, #16]
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	695b      	ldr	r3, [r3, #20]
 8006174:	3b02      	subs	r3, #2
 8006176:	429a      	cmp	r2, r3
 8006178:	d20b      	bcs.n	8006192 <remove_chain+0xae>
			fs->free_clst++;
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	1c5a      	adds	r2, r3, #1
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	791b      	ldrb	r3, [r3, #4]
 8006188:	f043 0301 	orr.w	r3, r3, #1
 800618c:	b2da      	uxtb	r2, r3
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	429a      	cmp	r2, r3
 800619e:	d3c6      	bcc.n	800612e <remove_chain+0x4a>
 80061a0:	e000      	b.n	80061a4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80061a2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3720      	adds	r7, #32
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b088      	sub	sp, #32
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
 80061b6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d10d      	bne.n	80061e0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d004      	beq.n	80061da <create_chain+0x2c>
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	695b      	ldr	r3, [r3, #20]
 80061d4:	69ba      	ldr	r2, [r7, #24]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d31b      	bcc.n	8006212 <create_chain+0x64>
 80061da:	2301      	movs	r3, #1
 80061dc:	61bb      	str	r3, [r7, #24]
 80061de:	e018      	b.n	8006212 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80061e0:	6839      	ldr	r1, [r7, #0]
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f7ff fded 	bl	8005dc2 <get_fat>
 80061e8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d801      	bhi.n	80061f4 <create_chain+0x46>
 80061f0:	2301      	movs	r3, #1
 80061f2:	e070      	b.n	80062d6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061fa:	d101      	bne.n	8006200 <create_chain+0x52>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	e06a      	b.n	80062d6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	695b      	ldr	r3, [r3, #20]
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	429a      	cmp	r2, r3
 8006208:	d201      	bcs.n	800620e <create_chain+0x60>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	e063      	b.n	80062d6 <create_chain+0x128>
		scl = clst;
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	3301      	adds	r3, #1
 800621a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	695b      	ldr	r3, [r3, #20]
 8006220:	69fa      	ldr	r2, [r7, #28]
 8006222:	429a      	cmp	r2, r3
 8006224:	d307      	bcc.n	8006236 <create_chain+0x88>
				ncl = 2;
 8006226:	2302      	movs	r3, #2
 8006228:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800622a:	69fa      	ldr	r2, [r7, #28]
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	429a      	cmp	r2, r3
 8006230:	d901      	bls.n	8006236 <create_chain+0x88>
 8006232:	2300      	movs	r3, #0
 8006234:	e04f      	b.n	80062d6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006236:	69f9      	ldr	r1, [r7, #28]
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f7ff fdc2 	bl	8005dc2 <get_fat>
 800623e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00e      	beq.n	8006264 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d003      	beq.n	8006254 <create_chain+0xa6>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006252:	d101      	bne.n	8006258 <create_chain+0xaa>
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	e03e      	b.n	80062d6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006258:	69fa      	ldr	r2, [r7, #28]
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	429a      	cmp	r2, r3
 800625e:	d1da      	bne.n	8006216 <create_chain+0x68>
 8006260:	2300      	movs	r3, #0
 8006262:	e038      	b.n	80062d6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006264:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006266:	f04f 32ff 	mov.w	r2, #4294967295
 800626a:	69f9      	ldr	r1, [r7, #28]
 800626c:	6938      	ldr	r0, [r7, #16]
 800626e:	f7ff fe4f 	bl	8005f10 <put_fat>
 8006272:	4603      	mov	r3, r0
 8006274:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006276:	7dfb      	ldrb	r3, [r7, #23]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d109      	bne.n	8006290 <create_chain+0xe2>
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d006      	beq.n	8006290 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006282:	69fa      	ldr	r2, [r7, #28]
 8006284:	6839      	ldr	r1, [r7, #0]
 8006286:	6938      	ldr	r0, [r7, #16]
 8006288:	f7ff fe42 	bl	8005f10 <put_fat>
 800628c:	4603      	mov	r3, r0
 800628e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006290:	7dfb      	ldrb	r3, [r7, #23]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d116      	bne.n	80062c4 <create_chain+0x116>
		fs->last_clst = ncl;
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	69fa      	ldr	r2, [r7, #28]
 800629a:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	691a      	ldr	r2, [r3, #16]
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	695b      	ldr	r3, [r3, #20]
 80062a4:	3b02      	subs	r3, #2
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d804      	bhi.n	80062b4 <create_chain+0x106>
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	1e5a      	subs	r2, r3, #1
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	791b      	ldrb	r3, [r3, #4]
 80062b8:	f043 0301 	orr.w	r3, r3, #1
 80062bc:	b2da      	uxtb	r2, r3
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	711a      	strb	r2, [r3, #4]
 80062c2:	e007      	b.n	80062d4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80062c4:	7dfb      	ldrb	r3, [r7, #23]
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d102      	bne.n	80062d0 <create_chain+0x122>
 80062ca:	f04f 33ff 	mov.w	r3, #4294967295
 80062ce:	e000      	b.n	80062d2 <create_chain+0x124>
 80062d0:	2301      	movs	r3, #1
 80062d2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80062d4:	69fb      	ldr	r3, [r7, #28]
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3720      	adds	r7, #32
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80062de:	b480      	push	{r7}
 80062e0:	b087      	sub	sp, #28
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
 80062e6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f2:	3304      	adds	r3, #4
 80062f4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	0a5b      	lsrs	r3, r3, #9
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	8952      	ldrh	r2, [r2, #10]
 80062fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8006302:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	1d1a      	adds	r2, r3, #4
 8006308:	613a      	str	r2, [r7, #16]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d101      	bne.n	8006318 <clmt_clust+0x3a>
 8006314:	2300      	movs	r3, #0
 8006316:	e010      	b.n	800633a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006318:	697a      	ldr	r2, [r7, #20]
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	429a      	cmp	r2, r3
 800631e:	d307      	bcc.n	8006330 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006320:	697a      	ldr	r2, [r7, #20]
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	617b      	str	r3, [r7, #20]
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	3304      	adds	r3, #4
 800632c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800632e:	e7e9      	b.n	8006304 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006330:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	4413      	add	r3, r2
}
 800633a:	4618      	mov	r0, r3
 800633c:	371c      	adds	r7, #28
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr

08006346 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006346:	b580      	push	{r7, lr}
 8006348:	b086      	sub	sp, #24
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
 800634e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800635c:	d204      	bcs.n	8006368 <dir_sdi+0x22>
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	f003 031f 	and.w	r3, r3, #31
 8006364:	2b00      	cmp	r3, #0
 8006366:	d001      	beq.n	800636c <dir_sdi+0x26>
		return FR_INT_ERR;
 8006368:	2302      	movs	r3, #2
 800636a:	e063      	b.n	8006434 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	683a      	ldr	r2, [r7, #0]
 8006370:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d106      	bne.n	800638c <dir_sdi+0x46>
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	2b02      	cmp	r3, #2
 8006384:	d902      	bls.n	800638c <dir_sdi+0x46>
		clst = fs->dirbase;
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800638a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10c      	bne.n	80063ac <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	095b      	lsrs	r3, r3, #5
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	8912      	ldrh	r2, [r2, #8]
 800639a:	4293      	cmp	r3, r2
 800639c:	d301      	bcc.n	80063a2 <dir_sdi+0x5c>
 800639e:	2302      	movs	r3, #2
 80063a0:	e048      	b.n	8006434 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	61da      	str	r2, [r3, #28]
 80063aa:	e029      	b.n	8006400 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	895b      	ldrh	r3, [r3, #10]
 80063b0:	025b      	lsls	r3, r3, #9
 80063b2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80063b4:	e019      	b.n	80063ea <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6979      	ldr	r1, [r7, #20]
 80063ba:	4618      	mov	r0, r3
 80063bc:	f7ff fd01 	bl	8005dc2 <get_fat>
 80063c0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c8:	d101      	bne.n	80063ce <dir_sdi+0x88>
 80063ca:	2301      	movs	r3, #1
 80063cc:	e032      	b.n	8006434 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d904      	bls.n	80063de <dir_sdi+0x98>
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	695b      	ldr	r3, [r3, #20]
 80063d8:	697a      	ldr	r2, [r7, #20]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d301      	bcc.n	80063e2 <dir_sdi+0x9c>
 80063de:	2302      	movs	r3, #2
 80063e0:	e028      	b.n	8006434 <dir_sdi+0xee>
			ofs -= csz;
 80063e2:	683a      	ldr	r2, [r7, #0]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80063ea:	683a      	ldr	r2, [r7, #0]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d2e1      	bcs.n	80063b6 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80063f2:	6979      	ldr	r1, [r7, #20]
 80063f4:	6938      	ldr	r0, [r7, #16]
 80063f6:	f7ff fcc5 	bl	8005d84 <clust2sect>
 80063fa:	4602      	mov	r2, r0
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	69db      	ldr	r3, [r3, #28]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d101      	bne.n	8006412 <dir_sdi+0xcc>
 800640e:	2302      	movs	r3, #2
 8006410:	e010      	b.n	8006434 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	69da      	ldr	r2, [r3, #28]
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	0a5b      	lsrs	r3, r3, #9
 800641a:	441a      	add	r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800642c:	441a      	add	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3718      	adds	r7, #24
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b086      	sub	sp, #24
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	695b      	ldr	r3, [r3, #20]
 8006450:	3320      	adds	r3, #32
 8006452:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	69db      	ldr	r3, [r3, #28]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d003      	beq.n	8006464 <dir_next+0x28>
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006462:	d301      	bcc.n	8006468 <dir_next+0x2c>
 8006464:	2304      	movs	r3, #4
 8006466:	e0aa      	b.n	80065be <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800646e:	2b00      	cmp	r3, #0
 8006470:	f040 8098 	bne.w	80065a4 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	69db      	ldr	r3, [r3, #28]
 8006478:	1c5a      	adds	r2, r3, #1
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	699b      	ldr	r3, [r3, #24]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d10b      	bne.n	800649e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	095b      	lsrs	r3, r3, #5
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	8912      	ldrh	r2, [r2, #8]
 800648e:	4293      	cmp	r3, r2
 8006490:	f0c0 8088 	bcc.w	80065a4 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	61da      	str	r2, [r3, #28]
 800649a:	2304      	movs	r3, #4
 800649c:	e08f      	b.n	80065be <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	0a5b      	lsrs	r3, r3, #9
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	8952      	ldrh	r2, [r2, #10]
 80064a6:	3a01      	subs	r2, #1
 80064a8:	4013      	ands	r3, r2
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d17a      	bne.n	80065a4 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	4619      	mov	r1, r3
 80064b6:	4610      	mov	r0, r2
 80064b8:	f7ff fc83 	bl	8005dc2 <get_fat>
 80064bc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d801      	bhi.n	80064c8 <dir_next+0x8c>
 80064c4:	2302      	movs	r3, #2
 80064c6:	e07a      	b.n	80065be <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ce:	d101      	bne.n	80064d4 <dir_next+0x98>
 80064d0:	2301      	movs	r3, #1
 80064d2:	e074      	b.n	80065be <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	695b      	ldr	r3, [r3, #20]
 80064d8:	697a      	ldr	r2, [r7, #20]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d358      	bcc.n	8006590 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d104      	bne.n	80064ee <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	61da      	str	r2, [r3, #28]
 80064ea:	2304      	movs	r3, #4
 80064ec:	e067      	b.n	80065be <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	699b      	ldr	r3, [r3, #24]
 80064f4:	4619      	mov	r1, r3
 80064f6:	4610      	mov	r0, r2
 80064f8:	f7ff fe59 	bl	80061ae <create_chain>
 80064fc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d101      	bne.n	8006508 <dir_next+0xcc>
 8006504:	2307      	movs	r3, #7
 8006506:	e05a      	b.n	80065be <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	2b01      	cmp	r3, #1
 800650c:	d101      	bne.n	8006512 <dir_next+0xd6>
 800650e:	2302      	movs	r3, #2
 8006510:	e055      	b.n	80065be <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006518:	d101      	bne.n	800651e <dir_next+0xe2>
 800651a:	2301      	movs	r3, #1
 800651c:	e04f      	b.n	80065be <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	f7ff fb50 	bl	8005bc4 <sync_window>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d001      	beq.n	800652e <dir_next+0xf2>
 800652a:	2301      	movs	r3, #1
 800652c:	e047      	b.n	80065be <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	3330      	adds	r3, #48	@ 0x30
 8006532:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006536:	2100      	movs	r1, #0
 8006538:	4618      	mov	r0, r3
 800653a:	f7ff f97a 	bl	8005832 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800653e:	2300      	movs	r3, #0
 8006540:	613b      	str	r3, [r7, #16]
 8006542:	6979      	ldr	r1, [r7, #20]
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f7ff fc1d 	bl	8005d84 <clust2sect>
 800654a:	4602      	mov	r2, r0
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006550:	e012      	b.n	8006578 <dir_next+0x13c>
						fs->wflag = 1;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2201      	movs	r2, #1
 8006556:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	f7ff fb33 	bl	8005bc4 <sync_window>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d001      	beq.n	8006568 <dir_next+0x12c>
 8006564:	2301      	movs	r3, #1
 8006566:	e02a      	b.n	80065be <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	3301      	adds	r3, #1
 800656c:	613b      	str	r3, [r7, #16]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006572:	1c5a      	adds	r2, r3, #1
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	895b      	ldrh	r3, [r3, #10]
 800657c:	461a      	mov	r2, r3
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	4293      	cmp	r3, r2
 8006582:	d3e6      	bcc.n	8006552 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	1ad2      	subs	r2, r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006596:	6979      	ldr	r1, [r7, #20]
 8006598:	68f8      	ldr	r0, [r7, #12]
 800659a:	f7ff fbf3 	bl	8005d84 <clust2sect>
 800659e:	4602      	mov	r2, r0
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065b6:	441a      	add	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3718      	adds	r7, #24
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b086      	sub	sp, #24
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
 80065ce:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80065d6:	2100      	movs	r1, #0
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f7ff feb4 	bl	8006346 <dir_sdi>
 80065de:	4603      	mov	r3, r0
 80065e0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80065e2:	7dfb      	ldrb	r3, [r7, #23]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d12b      	bne.n	8006640 <dir_alloc+0x7a>
		n = 0;
 80065e8:	2300      	movs	r3, #0
 80065ea:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	69db      	ldr	r3, [r3, #28]
 80065f0:	4619      	mov	r1, r3
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f7ff fb2a 	bl	8005c4c <move_window>
 80065f8:	4603      	mov	r3, r0
 80065fa:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80065fc:	7dfb      	ldrb	r3, [r7, #23]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d11d      	bne.n	800663e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	2be5      	cmp	r3, #229	@ 0xe5
 800660a:	d004      	beq.n	8006616 <dir_alloc+0x50>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a1b      	ldr	r3, [r3, #32]
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d107      	bne.n	8006626 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	3301      	adds	r3, #1
 800661a:	613b      	str	r3, [r7, #16]
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	429a      	cmp	r2, r3
 8006622:	d102      	bne.n	800662a <dir_alloc+0x64>
 8006624:	e00c      	b.n	8006640 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006626:	2300      	movs	r3, #0
 8006628:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800662a:	2101      	movs	r1, #1
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f7ff ff05 	bl	800643c <dir_next>
 8006632:	4603      	mov	r3, r0
 8006634:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006636:	7dfb      	ldrb	r3, [r7, #23]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d0d7      	beq.n	80065ec <dir_alloc+0x26>
 800663c:	e000      	b.n	8006640 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800663e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006640:	7dfb      	ldrb	r3, [r7, #23]
 8006642:	2b04      	cmp	r3, #4
 8006644:	d101      	bne.n	800664a <dir_alloc+0x84>
 8006646:	2307      	movs	r3, #7
 8006648:	75fb      	strb	r3, [r7, #23]
	return res;
 800664a:	7dfb      	ldrb	r3, [r7, #23]
}
 800664c:	4618      	mov	r0, r3
 800664e:	3718      	adds	r7, #24
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	331a      	adds	r3, #26
 8006662:	4618      	mov	r0, r3
 8006664:	f7ff f842 	bl	80056ec <ld_word>
 8006668:	4603      	mov	r3, r0
 800666a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	2b03      	cmp	r3, #3
 8006672:	d109      	bne.n	8006688 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	3314      	adds	r3, #20
 8006678:	4618      	mov	r0, r3
 800667a:	f7ff f837 	bl	80056ec <ld_word>
 800667e:	4603      	mov	r3, r0
 8006680:	041b      	lsls	r3, r3, #16
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	4313      	orrs	r3, r2
 8006686:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006688:	68fb      	ldr	r3, [r7, #12]
}
 800668a:	4618      	mov	r0, r3
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b084      	sub	sp, #16
 8006696:	af00      	add	r7, sp, #0
 8006698:	60f8      	str	r0, [r7, #12]
 800669a:	60b9      	str	r1, [r7, #8]
 800669c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	331a      	adds	r3, #26
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	b292      	uxth	r2, r2
 80066a6:	4611      	mov	r1, r2
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7ff f85a 	bl	8005762 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	2b03      	cmp	r3, #3
 80066b4:	d109      	bne.n	80066ca <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	f103 0214 	add.w	r2, r3, #20
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	0c1b      	lsrs	r3, r3, #16
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	4619      	mov	r1, r3
 80066c4:	4610      	mov	r0, r2
 80066c6:	f7ff f84c 	bl	8005762 <st_word>
	}
}
 80066ca:	bf00      	nop
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b086      	sub	sp, #24
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
 80066da:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80066dc:	2304      	movs	r3, #4
 80066de:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80066e6:	e03c      	b.n	8006762 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	69db      	ldr	r3, [r3, #28]
 80066ec:	4619      	mov	r1, r3
 80066ee:	6938      	ldr	r0, [r7, #16]
 80066f0:	f7ff faac 	bl	8005c4c <move_window>
 80066f4:	4603      	mov	r3, r0
 80066f6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80066f8:	7dfb      	ldrb	r3, [r7, #23]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d136      	bne.n	800676c <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8006706:	7bfb      	ldrb	r3, [r7, #15]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d102      	bne.n	8006712 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800670c:	2304      	movs	r3, #4
 800670e:	75fb      	strb	r3, [r7, #23]
 8006710:	e031      	b.n	8006776 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	330b      	adds	r3, #11
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800671e:	73bb      	strb	r3, [r7, #14]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	7bba      	ldrb	r2, [r7, #14]
 8006724:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8006726:	7bfb      	ldrb	r3, [r7, #15]
 8006728:	2be5      	cmp	r3, #229	@ 0xe5
 800672a:	d011      	beq.n	8006750 <dir_read+0x7e>
 800672c:	7bfb      	ldrb	r3, [r7, #15]
 800672e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006730:	d00e      	beq.n	8006750 <dir_read+0x7e>
 8006732:	7bbb      	ldrb	r3, [r7, #14]
 8006734:	2b0f      	cmp	r3, #15
 8006736:	d00b      	beq.n	8006750 <dir_read+0x7e>
 8006738:	7bbb      	ldrb	r3, [r7, #14]
 800673a:	f023 0320 	bic.w	r3, r3, #32
 800673e:	2b08      	cmp	r3, #8
 8006740:	bf0c      	ite	eq
 8006742:	2301      	moveq	r3, #1
 8006744:	2300      	movne	r3, #0
 8006746:	b2db      	uxtb	r3, r3
 8006748:	461a      	mov	r2, r3
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	4293      	cmp	r3, r2
 800674e:	d00f      	beq.n	8006770 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8006750:	2100      	movs	r1, #0
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f7ff fe72 	bl	800643c <dir_next>
 8006758:	4603      	mov	r3, r0
 800675a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800675c:	7dfb      	ldrb	r3, [r7, #23]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d108      	bne.n	8006774 <dir_read+0xa2>
	while (dp->sect) {
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	69db      	ldr	r3, [r3, #28]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1be      	bne.n	80066e8 <dir_read+0x16>
 800676a:	e004      	b.n	8006776 <dir_read+0xa4>
		if (res != FR_OK) break;
 800676c:	bf00      	nop
 800676e:	e002      	b.n	8006776 <dir_read+0xa4>
				break;
 8006770:	bf00      	nop
 8006772:	e000      	b.n	8006776 <dir_read+0xa4>
		if (res != FR_OK) break;
 8006774:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8006776:	7dfb      	ldrb	r3, [r7, #23]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d002      	beq.n	8006782 <dir_read+0xb0>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	61da      	str	r2, [r3, #28]
	return res;
 8006782:	7dfb      	ldrb	r3, [r7, #23]
}
 8006784:	4618      	mov	r0, r3
 8006786:	3718      	adds	r7, #24
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b086      	sub	sp, #24
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800679a:	2100      	movs	r1, #0
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f7ff fdd2 	bl	8006346 <dir_sdi>
 80067a2:	4603      	mov	r3, r0
 80067a4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80067a6:	7dfb      	ldrb	r3, [r7, #23]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d001      	beq.n	80067b0 <dir_find+0x24>
 80067ac:	7dfb      	ldrb	r3, [r7, #23]
 80067ae:	e03e      	b.n	800682e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	69db      	ldr	r3, [r3, #28]
 80067b4:	4619      	mov	r1, r3
 80067b6:	6938      	ldr	r0, [r7, #16]
 80067b8:	f7ff fa48 	bl	8005c4c <move_window>
 80067bc:	4603      	mov	r3, r0
 80067be:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80067c0:	7dfb      	ldrb	r3, [r7, #23]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d12f      	bne.n	8006826 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a1b      	ldr	r3, [r3, #32]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80067ce:	7bfb      	ldrb	r3, [r7, #15]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d102      	bne.n	80067da <dir_find+0x4e>
 80067d4:	2304      	movs	r3, #4
 80067d6:	75fb      	strb	r3, [r7, #23]
 80067d8:	e028      	b.n	800682c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a1b      	ldr	r3, [r3, #32]
 80067de:	330b      	adds	r3, #11
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80067e6:	b2da      	uxtb	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a1b      	ldr	r3, [r3, #32]
 80067f0:	330b      	adds	r3, #11
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	f003 0308 	and.w	r3, r3, #8
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d10a      	bne.n	8006812 <dir_find+0x86>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6a18      	ldr	r0, [r3, #32]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	3324      	adds	r3, #36	@ 0x24
 8006804:	220b      	movs	r2, #11
 8006806:	4619      	mov	r1, r3
 8006808:	f7ff f82e 	bl	8005868 <mem_cmp>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00b      	beq.n	800682a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006812:	2100      	movs	r1, #0
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f7ff fe11 	bl	800643c <dir_next>
 800681a:	4603      	mov	r3, r0
 800681c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800681e:	7dfb      	ldrb	r3, [r7, #23]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d0c5      	beq.n	80067b0 <dir_find+0x24>
 8006824:	e002      	b.n	800682c <dir_find+0xa0>
		if (res != FR_OK) break;
 8006826:	bf00      	nop
 8006828:	e000      	b.n	800682c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800682a:	bf00      	nop

	return res;
 800682c:	7dfb      	ldrb	r3, [r7, #23]
}
 800682e:	4618      	mov	r0, r3
 8006830:	3718      	adds	r7, #24
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b084      	sub	sp, #16
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006844:	2101      	movs	r1, #1
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f7ff febd 	bl	80065c6 <dir_alloc>
 800684c:	4603      	mov	r3, r0
 800684e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006850:	7bfb      	ldrb	r3, [r7, #15]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d11c      	bne.n	8006890 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	69db      	ldr	r3, [r3, #28]
 800685a:	4619      	mov	r1, r3
 800685c:	68b8      	ldr	r0, [r7, #8]
 800685e:	f7ff f9f5 	bl	8005c4c <move_window>
 8006862:	4603      	mov	r3, r0
 8006864:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006866:	7bfb      	ldrb	r3, [r7, #15]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d111      	bne.n	8006890 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a1b      	ldr	r3, [r3, #32]
 8006870:	2220      	movs	r2, #32
 8006872:	2100      	movs	r1, #0
 8006874:	4618      	mov	r0, r3
 8006876:	f7fe ffdc 	bl	8005832 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a18      	ldr	r0, [r3, #32]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	3324      	adds	r3, #36	@ 0x24
 8006882:	220b      	movs	r2, #11
 8006884:	4619      	mov	r1, r3
 8006886:	f7fe ffb3 	bl	80057f0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	2201      	movs	r2, #1
 800688e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006890:	7bfb      	ldrb	r3, [r7, #15]
}
 8006892:	4618      	mov	r0, r3
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b086      	sub	sp, #24
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
 80068a2:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	2200      	movs	r2, #0
 80068a8:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	69db      	ldr	r3, [r3, #28]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d04f      	beq.n	8006952 <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 80068b2:	2300      	movs	r3, #0
 80068b4:	613b      	str	r3, [r7, #16]
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 80068ba:	e022      	b.n	8006902 <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6a1a      	ldr	r2, [r3, #32]
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	1c59      	adds	r1, r3, #1
 80068c4:	6179      	str	r1, [r7, #20]
 80068c6:	4413      	add	r3, r2
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80068cc:	7bfb      	ldrb	r3, [r7, #15]
 80068ce:	2b20      	cmp	r3, #32
 80068d0:	d016      	beq.n	8006900 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80068d2:	7bfb      	ldrb	r3, [r7, #15]
 80068d4:	2b05      	cmp	r3, #5
 80068d6:	d101      	bne.n	80068dc <get_fileinfo+0x42>
 80068d8:	23e5      	movs	r3, #229	@ 0xe5
 80068da:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	2b09      	cmp	r3, #9
 80068e0:	d106      	bne.n	80068f0 <get_fileinfo+0x56>
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	1c5a      	adds	r2, r3, #1
 80068e6:	613a      	str	r2, [r7, #16]
 80068e8:	683a      	ldr	r2, [r7, #0]
 80068ea:	4413      	add	r3, r2
 80068ec:	222e      	movs	r2, #46	@ 0x2e
 80068ee:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	1c5a      	adds	r2, r3, #1
 80068f4:	613a      	str	r2, [r7, #16]
 80068f6:	683a      	ldr	r2, [r7, #0]
 80068f8:	4413      	add	r3, r2
 80068fa:	7bfa      	ldrb	r2, [r7, #15]
 80068fc:	725a      	strb	r2, [r3, #9]
 80068fe:	e000      	b.n	8006902 <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 8006900:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	2b0a      	cmp	r3, #10
 8006906:	d9d9      	bls.n	80068bc <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8006908:	683a      	ldr	r2, [r7, #0]
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	4413      	add	r3, r2
 800690e:	3309      	adds	r3, #9
 8006910:	2200      	movs	r2, #0
 8006912:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a1b      	ldr	r3, [r3, #32]
 8006918:	7ada      	ldrb	r2, [r3, #11]
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	331c      	adds	r3, #28
 8006924:	4618      	mov	r0, r3
 8006926:	f7fe fef9 	bl	800571c <ld_dword>
 800692a:	4602      	mov	r2, r0
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a1b      	ldr	r3, [r3, #32]
 8006934:	3316      	adds	r3, #22
 8006936:	4618      	mov	r0, r3
 8006938:	f7fe fef0 	bl	800571c <ld_dword>
 800693c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	b29a      	uxth	r2, r3
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	80da      	strh	r2, [r3, #6]
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	0c1b      	lsrs	r3, r3, #16
 800694a:	b29a      	uxth	r2, r3
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	809a      	strh	r2, [r3, #4]
 8006950:	e000      	b.n	8006954 <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006952:	bf00      	nop
}
 8006954:	3718      	adds	r7, #24
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
	...

0800695c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b088      	sub	sp, #32
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	60fb      	str	r3, [r7, #12]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	3324      	adds	r3, #36	@ 0x24
 8006970:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006972:	220b      	movs	r2, #11
 8006974:	2120      	movs	r1, #32
 8006976:	68b8      	ldr	r0, [r7, #8]
 8006978:	f7fe ff5b 	bl	8005832 <mem_set>
	si = i = 0; ni = 8;
 800697c:	2300      	movs	r3, #0
 800697e:	613b      	str	r3, [r7, #16]
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	61fb      	str	r3, [r7, #28]
 8006984:	2308      	movs	r3, #8
 8006986:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	1c5a      	adds	r2, r3, #1
 800698c:	61fa      	str	r2, [r7, #28]
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	4413      	add	r3, r2
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006996:	7efb      	ldrb	r3, [r7, #27]
 8006998:	2b20      	cmp	r3, #32
 800699a:	d94e      	bls.n	8006a3a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800699c:	7efb      	ldrb	r3, [r7, #27]
 800699e:	2b2f      	cmp	r3, #47	@ 0x2f
 80069a0:	d006      	beq.n	80069b0 <create_name+0x54>
 80069a2:	7efb      	ldrb	r3, [r7, #27]
 80069a4:	2b5c      	cmp	r3, #92	@ 0x5c
 80069a6:	d110      	bne.n	80069ca <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80069a8:	e002      	b.n	80069b0 <create_name+0x54>
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	3301      	adds	r3, #1
 80069ae:	61fb      	str	r3, [r7, #28]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	4413      	add	r3, r2
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	2b2f      	cmp	r3, #47	@ 0x2f
 80069ba:	d0f6      	beq.n	80069aa <create_name+0x4e>
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	4413      	add	r3, r2
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	2b5c      	cmp	r3, #92	@ 0x5c
 80069c6:	d0f0      	beq.n	80069aa <create_name+0x4e>
			break;
 80069c8:	e038      	b.n	8006a3c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80069ca:	7efb      	ldrb	r3, [r7, #27]
 80069cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80069ce:	d003      	beq.n	80069d8 <create_name+0x7c>
 80069d0:	693a      	ldr	r2, [r7, #16]
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d30c      	bcc.n	80069f2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	2b0b      	cmp	r3, #11
 80069dc:	d002      	beq.n	80069e4 <create_name+0x88>
 80069de:	7efb      	ldrb	r3, [r7, #27]
 80069e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80069e2:	d001      	beq.n	80069e8 <create_name+0x8c>
 80069e4:	2306      	movs	r3, #6
 80069e6:	e044      	b.n	8006a72 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80069e8:	2308      	movs	r3, #8
 80069ea:	613b      	str	r3, [r7, #16]
 80069ec:	230b      	movs	r3, #11
 80069ee:	617b      	str	r3, [r7, #20]
			continue;
 80069f0:	e022      	b.n	8006a38 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80069f2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	da04      	bge.n	8006a04 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80069fa:	7efb      	ldrb	r3, [r7, #27]
 80069fc:	3b80      	subs	r3, #128	@ 0x80
 80069fe:	4a1f      	ldr	r2, [pc, #124]	@ (8006a7c <create_name+0x120>)
 8006a00:	5cd3      	ldrb	r3, [r2, r3]
 8006a02:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006a04:	7efb      	ldrb	r3, [r7, #27]
 8006a06:	4619      	mov	r1, r3
 8006a08:	481d      	ldr	r0, [pc, #116]	@ (8006a80 <create_name+0x124>)
 8006a0a:	f7fe ff54 	bl	80058b6 <chk_chr>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d001      	beq.n	8006a18 <create_name+0xbc>
 8006a14:	2306      	movs	r3, #6
 8006a16:	e02c      	b.n	8006a72 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006a18:	7efb      	ldrb	r3, [r7, #27]
 8006a1a:	2b60      	cmp	r3, #96	@ 0x60
 8006a1c:	d905      	bls.n	8006a2a <create_name+0xce>
 8006a1e:	7efb      	ldrb	r3, [r7, #27]
 8006a20:	2b7a      	cmp	r3, #122	@ 0x7a
 8006a22:	d802      	bhi.n	8006a2a <create_name+0xce>
 8006a24:	7efb      	ldrb	r3, [r7, #27]
 8006a26:	3b20      	subs	r3, #32
 8006a28:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	1c5a      	adds	r2, r3, #1
 8006a2e:	613a      	str	r2, [r7, #16]
 8006a30:	68ba      	ldr	r2, [r7, #8]
 8006a32:	4413      	add	r3, r2
 8006a34:	7efa      	ldrb	r2, [r7, #27]
 8006a36:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006a38:	e7a6      	b.n	8006988 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006a3a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	441a      	add	r2, r3
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d101      	bne.n	8006a50 <create_name+0xf4>
 8006a4c:	2306      	movs	r3, #6
 8006a4e:	e010      	b.n	8006a72 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	2be5      	cmp	r3, #229	@ 0xe5
 8006a56:	d102      	bne.n	8006a5e <create_name+0x102>
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	2205      	movs	r2, #5
 8006a5c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006a5e:	7efb      	ldrb	r3, [r7, #27]
 8006a60:	2b20      	cmp	r3, #32
 8006a62:	d801      	bhi.n	8006a68 <create_name+0x10c>
 8006a64:	2204      	movs	r2, #4
 8006a66:	e000      	b.n	8006a6a <create_name+0x10e>
 8006a68:	2200      	movs	r2, #0
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	330b      	adds	r3, #11
 8006a6e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006a70:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3720      	adds	r7, #32
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	08008ebc 	.word	0x08008ebc
 8006a80:	08008e4c 	.word	0x08008e4c

08006a84 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b086      	sub	sp, #24
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006a98:	e002      	b.n	8006aa0 <follow_path+0x1c>
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	603b      	str	r3, [r7, #0]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	2b2f      	cmp	r3, #47	@ 0x2f
 8006aa6:	d0f8      	beq.n	8006a9a <follow_path+0x16>
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	2b5c      	cmp	r3, #92	@ 0x5c
 8006aae:	d0f4      	beq.n	8006a9a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	2b1f      	cmp	r3, #31
 8006abc:	d80a      	bhi.n	8006ad4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2280      	movs	r2, #128	@ 0x80
 8006ac2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8006ac6:	2100      	movs	r1, #0
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f7ff fc3c 	bl	8006346 <dir_sdi>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	75fb      	strb	r3, [r7, #23]
 8006ad2:	e043      	b.n	8006b5c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006ad4:	463b      	mov	r3, r7
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f7ff ff3f 	bl	800695c <create_name>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006ae2:	7dfb      	ldrb	r3, [r7, #23]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d134      	bne.n	8006b52 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f7ff fe4f 	bl	800678c <dir_find>
 8006aee:	4603      	mov	r3, r0
 8006af0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006af8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006afa:	7dfb      	ldrb	r3, [r7, #23]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00a      	beq.n	8006b16 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006b00:	7dfb      	ldrb	r3, [r7, #23]
 8006b02:	2b04      	cmp	r3, #4
 8006b04:	d127      	bne.n	8006b56 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006b06:	7afb      	ldrb	r3, [r7, #11]
 8006b08:	f003 0304 	and.w	r3, r3, #4
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d122      	bne.n	8006b56 <follow_path+0xd2>
 8006b10:	2305      	movs	r3, #5
 8006b12:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006b14:	e01f      	b.n	8006b56 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006b16:	7afb      	ldrb	r3, [r7, #11]
 8006b18:	f003 0304 	and.w	r3, r3, #4
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d11c      	bne.n	8006b5a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	799b      	ldrb	r3, [r3, #6]
 8006b24:	f003 0310 	and.w	r3, r3, #16
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d102      	bne.n	8006b32 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006b2c:	2305      	movs	r3, #5
 8006b2e:	75fb      	strb	r3, [r7, #23]
 8006b30:	e014      	b.n	8006b5c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	695b      	ldr	r3, [r3, #20]
 8006b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b40:	4413      	add	r3, r2
 8006b42:	4619      	mov	r1, r3
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	f7ff fd85 	bl	8006654 <ld_clust>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006b50:	e7c0      	b.n	8006ad4 <follow_path+0x50>
			if (res != FR_OK) break;
 8006b52:	bf00      	nop
 8006b54:	e002      	b.n	8006b5c <follow_path+0xd8>
				break;
 8006b56:	bf00      	nop
 8006b58:	e000      	b.n	8006b5c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006b5a:	bf00      	nop
			}
		}
	}

	return res;
 8006b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3718      	adds	r7, #24
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006b66:	b480      	push	{r7}
 8006b68:	b087      	sub	sp, #28
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b72:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d031      	beq.n	8006be0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	617b      	str	r3, [r7, #20]
 8006b82:	e002      	b.n	8006b8a <get_ldnumber+0x24>
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	3301      	adds	r3, #1
 8006b88:	617b      	str	r3, [r7, #20]
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	2b20      	cmp	r3, #32
 8006b90:	d903      	bls.n	8006b9a <get_ldnumber+0x34>
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	2b3a      	cmp	r3, #58	@ 0x3a
 8006b98:	d1f4      	bne.n	8006b84 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	2b3a      	cmp	r3, #58	@ 0x3a
 8006ba0:	d11c      	bne.n	8006bdc <get_ldnumber+0x76>
			tp = *path;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	1c5a      	adds	r2, r3, #1
 8006bac:	60fa      	str	r2, [r7, #12]
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	3b30      	subs	r3, #48	@ 0x30
 8006bb2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	2b09      	cmp	r3, #9
 8006bb8:	d80e      	bhi.n	8006bd8 <get_ldnumber+0x72>
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d10a      	bne.n	8006bd8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d107      	bne.n	8006bd8 <get_ldnumber+0x72>
					vol = (int)i;
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	617b      	str	r3, [r7, #20]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	697a      	ldr	r2, [r7, #20]
 8006bd6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	e002      	b.n	8006be2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006bdc:	2300      	movs	r3, #0
 8006bde:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006be0:	693b      	ldr	r3, [r7, #16]
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	371c      	adds	r7, #28
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr
	...

08006bf0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	70da      	strb	r2, [r3, #3]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f04f 32ff 	mov.w	r2, #4294967295
 8006c06:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006c08:	6839      	ldr	r1, [r7, #0]
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f7ff f81e 	bl	8005c4c <move_window>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d001      	beq.n	8006c1a <check_fs+0x2a>
 8006c16:	2304      	movs	r3, #4
 8006c18:	e038      	b.n	8006c8c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	3330      	adds	r3, #48	@ 0x30
 8006c1e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7fe fd62 	bl	80056ec <ld_word>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d001      	beq.n	8006c38 <check_fs+0x48>
 8006c34:	2303      	movs	r3, #3
 8006c36:	e029      	b.n	8006c8c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006c3e:	2be9      	cmp	r3, #233	@ 0xe9
 8006c40:	d009      	beq.n	8006c56 <check_fs+0x66>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006c48:	2beb      	cmp	r3, #235	@ 0xeb
 8006c4a:	d11e      	bne.n	8006c8a <check_fs+0x9a>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006c52:	2b90      	cmp	r3, #144	@ 0x90
 8006c54:	d119      	bne.n	8006c8a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	3330      	adds	r3, #48	@ 0x30
 8006c5a:	3336      	adds	r3, #54	@ 0x36
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7fe fd5d 	bl	800571c <ld_dword>
 8006c62:	4603      	mov	r3, r0
 8006c64:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006c68:	4a0a      	ldr	r2, [pc, #40]	@ (8006c94 <check_fs+0xa4>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d101      	bne.n	8006c72 <check_fs+0x82>
 8006c6e:	2300      	movs	r3, #0
 8006c70:	e00c      	b.n	8006c8c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	3330      	adds	r3, #48	@ 0x30
 8006c76:	3352      	adds	r3, #82	@ 0x52
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f7fe fd4f 	bl	800571c <ld_dword>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	4a05      	ldr	r2, [pc, #20]	@ (8006c98 <check_fs+0xa8>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d101      	bne.n	8006c8a <check_fs+0x9a>
 8006c86:	2300      	movs	r3, #0
 8006c88:	e000      	b.n	8006c8c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006c8a:	2302      	movs	r3, #2
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3708      	adds	r7, #8
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	00544146 	.word	0x00544146
 8006c98:	33544146 	.word	0x33544146

08006c9c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b096      	sub	sp, #88	@ 0x58
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	2200      	movs	r2, #0
 8006cae:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006cb0:	68f8      	ldr	r0, [r7, #12]
 8006cb2:	f7ff ff58 	bl	8006b66 <get_ldnumber>
 8006cb6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006cb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	da01      	bge.n	8006cc2 <find_volume+0x26>
 8006cbe:	230b      	movs	r3, #11
 8006cc0:	e22d      	b.n	800711e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006cc2:	4aa1      	ldr	r2, [pc, #644]	@ (8006f48 <find_volume+0x2ac>)
 8006cc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cca:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d101      	bne.n	8006cd6 <find_volume+0x3a>
 8006cd2:	230c      	movs	r3, #12
 8006cd4:	e223      	b.n	800711e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006cda:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006cdc:	79fb      	ldrb	r3, [r7, #7]
 8006cde:	f023 0301 	bic.w	r3, r3, #1
 8006ce2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d01a      	beq.n	8006d22 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cee:	785b      	ldrb	r3, [r3, #1]
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7fe fc5d 	bl	80055b0 <disk_status>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006cfc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006d00:	f003 0301 	and.w	r3, r3, #1
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d10c      	bne.n	8006d22 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006d08:	79fb      	ldrb	r3, [r7, #7]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d007      	beq.n	8006d1e <find_volume+0x82>
 8006d0e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006d12:	f003 0304 	and.w	r3, r3, #4
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d001      	beq.n	8006d1e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006d1a:	230a      	movs	r3, #10
 8006d1c:	e1ff      	b.n	800711e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8006d1e:	2300      	movs	r3, #0
 8006d20:	e1fd      	b.n	800711e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d24:	2200      	movs	r2, #0
 8006d26:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006d28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d2a:	b2da      	uxtb	r2, r3
 8006d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d2e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d32:	785b      	ldrb	r3, [r3, #1]
 8006d34:	4618      	mov	r0, r3
 8006d36:	f7fe fc55 	bl	80055e4 <disk_initialize>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006d40:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006d44:	f003 0301 	and.w	r3, r3, #1
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d001      	beq.n	8006d50 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	e1e6      	b.n	800711e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006d50:	79fb      	ldrb	r3, [r7, #7]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d007      	beq.n	8006d66 <find_volume+0xca>
 8006d56:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006d5a:	f003 0304 	and.w	r3, r3, #4
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d001      	beq.n	8006d66 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006d62:	230a      	movs	r3, #10
 8006d64:	e1db      	b.n	800711e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006d66:	2300      	movs	r3, #0
 8006d68:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006d6a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006d6c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006d6e:	f7ff ff3f 	bl	8006bf0 <check_fs>
 8006d72:	4603      	mov	r3, r0
 8006d74:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006d78:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d149      	bne.n	8006e14 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006d80:	2300      	movs	r3, #0
 8006d82:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d84:	e01e      	b.n	8006dc4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d88:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006d8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d8e:	011b      	lsls	r3, r3, #4
 8006d90:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8006d94:	4413      	add	r3, r2
 8006d96:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d9a:	3304      	adds	r3, #4
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d006      	beq.n	8006db0 <find_volume+0x114>
 8006da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da4:	3308      	adds	r3, #8
 8006da6:	4618      	mov	r0, r3
 8006da8:	f7fe fcb8 	bl	800571c <ld_dword>
 8006dac:	4602      	mov	r2, r0
 8006dae:	e000      	b.n	8006db2 <find_volume+0x116>
 8006db0:	2200      	movs	r2, #0
 8006db2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	3358      	adds	r3, #88	@ 0x58
 8006db8:	443b      	add	r3, r7
 8006dba:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006dbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	643b      	str	r3, [r7, #64]	@ 0x40
 8006dc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dc6:	2b03      	cmp	r3, #3
 8006dc8:	d9dd      	bls.n	8006d86 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006dca:	2300      	movs	r3, #0
 8006dcc:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8006dce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d002      	beq.n	8006dda <find_volume+0x13e>
 8006dd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006dda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	3358      	adds	r3, #88	@ 0x58
 8006de0:	443b      	add	r3, r7
 8006de2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006de6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006de8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d005      	beq.n	8006dfa <find_volume+0x15e>
 8006dee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006df0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006df2:	f7ff fefd 	bl	8006bf0 <check_fs>
 8006df6:	4603      	mov	r3, r0
 8006df8:	e000      	b.n	8006dfc <find_volume+0x160>
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006e00:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d905      	bls.n	8006e14 <find_volume+0x178>
 8006e08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e10:	2b03      	cmp	r3, #3
 8006e12:	d9e2      	bls.n	8006dda <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006e14:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006e18:	2b04      	cmp	r3, #4
 8006e1a:	d101      	bne.n	8006e20 <find_volume+0x184>
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e17e      	b.n	800711e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006e20:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d901      	bls.n	8006e2c <find_volume+0x190>
 8006e28:	230d      	movs	r3, #13
 8006e2a:	e178      	b.n	800711e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e2e:	3330      	adds	r3, #48	@ 0x30
 8006e30:	330b      	adds	r3, #11
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7fe fc5a 	bl	80056ec <ld_word>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e3e:	d001      	beq.n	8006e44 <find_volume+0x1a8>
 8006e40:	230d      	movs	r3, #13
 8006e42:	e16c      	b.n	800711e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e46:	3330      	adds	r3, #48	@ 0x30
 8006e48:	3316      	adds	r3, #22
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7fe fc4e 	bl	80056ec <ld_word>
 8006e50:	4603      	mov	r3, r0
 8006e52:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006e54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d106      	bne.n	8006e68 <find_volume+0x1cc>
 8006e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e5c:	3330      	adds	r3, #48	@ 0x30
 8006e5e:	3324      	adds	r3, #36	@ 0x24
 8006e60:	4618      	mov	r0, r3
 8006e62:	f7fe fc5b 	bl	800571c <ld_dword>
 8006e66:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8006e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e6a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e6c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e70:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8006e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e76:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e7a:	789b      	ldrb	r3, [r3, #2]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d005      	beq.n	8006e8c <find_volume+0x1f0>
 8006e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e82:	789b      	ldrb	r3, [r3, #2]
 8006e84:	2b02      	cmp	r3, #2
 8006e86:	d001      	beq.n	8006e8c <find_volume+0x1f0>
 8006e88:	230d      	movs	r3, #13
 8006e8a:	e148      	b.n	800711e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e8e:	789b      	ldrb	r3, [r3, #2]
 8006e90:	461a      	mov	r2, r3
 8006e92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e94:	fb02 f303 	mul.w	r3, r2, r3
 8006e98:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ea4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ea8:	895b      	ldrh	r3, [r3, #10]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d008      	beq.n	8006ec0 <find_volume+0x224>
 8006eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eb0:	895b      	ldrh	r3, [r3, #10]
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eb6:	895b      	ldrh	r3, [r3, #10]
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	4013      	ands	r3, r2
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d001      	beq.n	8006ec4 <find_volume+0x228>
 8006ec0:	230d      	movs	r3, #13
 8006ec2:	e12c      	b.n	800711e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ec6:	3330      	adds	r3, #48	@ 0x30
 8006ec8:	3311      	adds	r3, #17
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7fe fc0e 	bl	80056ec <ld_word>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ed6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eda:	891b      	ldrh	r3, [r3, #8]
 8006edc:	f003 030f 	and.w	r3, r3, #15
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d001      	beq.n	8006eea <find_volume+0x24e>
 8006ee6:	230d      	movs	r3, #13
 8006ee8:	e119      	b.n	800711e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eec:	3330      	adds	r3, #48	@ 0x30
 8006eee:	3313      	adds	r3, #19
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f7fe fbfb 	bl	80056ec <ld_word>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006efa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d106      	bne.n	8006f0e <find_volume+0x272>
 8006f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f02:	3330      	adds	r3, #48	@ 0x30
 8006f04:	3320      	adds	r3, #32
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7fe fc08 	bl	800571c <ld_dword>
 8006f0c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f10:	3330      	adds	r3, #48	@ 0x30
 8006f12:	330e      	adds	r3, #14
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7fe fbe9 	bl	80056ec <ld_word>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006f1e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d101      	bne.n	8006f28 <find_volume+0x28c>
 8006f24:	230d      	movs	r3, #13
 8006f26:	e0fa      	b.n	800711e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006f28:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006f2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f2c:	4413      	add	r3, r2
 8006f2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f30:	8912      	ldrh	r2, [r2, #8]
 8006f32:	0912      	lsrs	r2, r2, #4
 8006f34:	b292      	uxth	r2, r2
 8006f36:	4413      	add	r3, r2
 8006f38:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006f3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d204      	bcs.n	8006f4c <find_volume+0x2b0>
 8006f42:	230d      	movs	r3, #13
 8006f44:	e0eb      	b.n	800711e <find_volume+0x482>
 8006f46:	bf00      	nop
 8006f48:	20000858 	.word	0x20000858
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006f4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f54:	8952      	ldrh	r2, [r2, #10]
 8006f56:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f5a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d101      	bne.n	8006f66 <find_volume+0x2ca>
 8006f62:	230d      	movs	r3, #13
 8006f64:	e0db      	b.n	800711e <find_volume+0x482>
		fmt = FS_FAT32;
 8006f66:	2303      	movs	r3, #3
 8006f68:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f6e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d802      	bhi.n	8006f7c <find_volume+0x2e0>
 8006f76:	2302      	movs	r3, #2
 8006f78:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f7e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d802      	bhi.n	8006f8c <find_volume+0x2f0>
 8006f86:	2301      	movs	r3, #1
 8006f88:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8e:	1c9a      	adds	r2, r3, #2
 8006f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f92:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8006f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f96:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006f98:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006f9a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006f9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f9e:	441a      	add	r2, r3
 8006fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fa2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8006fa4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fa8:	441a      	add	r2, r3
 8006faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fac:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8006fae:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006fb2:	2b03      	cmp	r3, #3
 8006fb4:	d11e      	bne.n	8006ff4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fb8:	3330      	adds	r3, #48	@ 0x30
 8006fba:	332a      	adds	r3, #42	@ 0x2a
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f7fe fb95 	bl	80056ec <ld_word>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d001      	beq.n	8006fcc <find_volume+0x330>
 8006fc8:	230d      	movs	r3, #13
 8006fca:	e0a8      	b.n	800711e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fce:	891b      	ldrh	r3, [r3, #8]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d001      	beq.n	8006fd8 <find_volume+0x33c>
 8006fd4:	230d      	movs	r3, #13
 8006fd6:	e0a2      	b.n	800711e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fda:	3330      	adds	r3, #48	@ 0x30
 8006fdc:	332c      	adds	r3, #44	@ 0x2c
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7fe fb9c 	bl	800571c <ld_dword>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fe8:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fec:	695b      	ldr	r3, [r3, #20]
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ff2:	e01f      	b.n	8007034 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ff6:	891b      	ldrh	r3, [r3, #8]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d101      	bne.n	8007000 <find_volume+0x364>
 8006ffc:	230d      	movs	r3, #13
 8006ffe:	e08e      	b.n	800711e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007002:	6a1a      	ldr	r2, [r3, #32]
 8007004:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007006:	441a      	add	r2, r3
 8007008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800700a:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800700c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007010:	2b02      	cmp	r3, #2
 8007012:	d103      	bne.n	800701c <find_volume+0x380>
 8007014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007016:	695b      	ldr	r3, [r3, #20]
 8007018:	005b      	lsls	r3, r3, #1
 800701a:	e00a      	b.n	8007032 <find_volume+0x396>
 800701c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800701e:	695a      	ldr	r2, [r3, #20]
 8007020:	4613      	mov	r3, r2
 8007022:	005b      	lsls	r3, r3, #1
 8007024:	4413      	add	r3, r2
 8007026:	085a      	lsrs	r2, r3, #1
 8007028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800702a:	695b      	ldr	r3, [r3, #20]
 800702c:	f003 0301 	and.w	r3, r3, #1
 8007030:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007032:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007036:	699a      	ldr	r2, [r3, #24]
 8007038:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800703a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800703e:	0a5b      	lsrs	r3, r3, #9
 8007040:	429a      	cmp	r2, r3
 8007042:	d201      	bcs.n	8007048 <find_volume+0x3ac>
 8007044:	230d      	movs	r3, #13
 8007046:	e06a      	b.n	800711e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800704a:	f04f 32ff 	mov.w	r2, #4294967295
 800704e:	611a      	str	r2, [r3, #16]
 8007050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007052:	691a      	ldr	r2, [r3, #16]
 8007054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007056:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800705a:	2280      	movs	r2, #128	@ 0x80
 800705c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800705e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007062:	2b03      	cmp	r3, #3
 8007064:	d149      	bne.n	80070fa <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007068:	3330      	adds	r3, #48	@ 0x30
 800706a:	3330      	adds	r3, #48	@ 0x30
 800706c:	4618      	mov	r0, r3
 800706e:	f7fe fb3d 	bl	80056ec <ld_word>
 8007072:	4603      	mov	r3, r0
 8007074:	2b01      	cmp	r3, #1
 8007076:	d140      	bne.n	80070fa <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007078:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800707a:	3301      	adds	r3, #1
 800707c:	4619      	mov	r1, r3
 800707e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007080:	f7fe fde4 	bl	8005c4c <move_window>
 8007084:	4603      	mov	r3, r0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d137      	bne.n	80070fa <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800708a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800708c:	2200      	movs	r2, #0
 800708e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007092:	3330      	adds	r3, #48	@ 0x30
 8007094:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007098:	4618      	mov	r0, r3
 800709a:	f7fe fb27 	bl	80056ec <ld_word>
 800709e:	4603      	mov	r3, r0
 80070a0:	461a      	mov	r2, r3
 80070a2:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d127      	bne.n	80070fa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80070aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ac:	3330      	adds	r3, #48	@ 0x30
 80070ae:	4618      	mov	r0, r3
 80070b0:	f7fe fb34 	bl	800571c <ld_dword>
 80070b4:	4603      	mov	r3, r0
 80070b6:	4a1c      	ldr	r2, [pc, #112]	@ (8007128 <find_volume+0x48c>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d11e      	bne.n	80070fa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80070bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070be:	3330      	adds	r3, #48	@ 0x30
 80070c0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80070c4:	4618      	mov	r0, r3
 80070c6:	f7fe fb29 	bl	800571c <ld_dword>
 80070ca:	4603      	mov	r3, r0
 80070cc:	4a17      	ldr	r2, [pc, #92]	@ (800712c <find_volume+0x490>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d113      	bne.n	80070fa <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80070d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070d4:	3330      	adds	r3, #48	@ 0x30
 80070d6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80070da:	4618      	mov	r0, r3
 80070dc:	f7fe fb1e 	bl	800571c <ld_dword>
 80070e0:	4602      	mov	r2, r0
 80070e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070e4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80070e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070e8:	3330      	adds	r3, #48	@ 0x30
 80070ea:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7fe fb14 	bl	800571c <ld_dword>
 80070f4:	4602      	mov	r2, r0
 80070f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070f8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80070fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070fc:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8007100:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007102:	4b0b      	ldr	r3, [pc, #44]	@ (8007130 <find_volume+0x494>)
 8007104:	881b      	ldrh	r3, [r3, #0]
 8007106:	3301      	adds	r3, #1
 8007108:	b29a      	uxth	r2, r3
 800710a:	4b09      	ldr	r3, [pc, #36]	@ (8007130 <find_volume+0x494>)
 800710c:	801a      	strh	r2, [r3, #0]
 800710e:	4b08      	ldr	r3, [pc, #32]	@ (8007130 <find_volume+0x494>)
 8007110:	881a      	ldrh	r2, [r3, #0]
 8007112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007114:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007116:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007118:	f7fe fd30 	bl	8005b7c <clear_lock>
#endif
	return FR_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3758      	adds	r7, #88	@ 0x58
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	41615252 	.word	0x41615252
 800712c:	61417272 	.word	0x61417272
 8007130:	2000085c 	.word	0x2000085c

08007134 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800713e:	2309      	movs	r3, #9
 8007140:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d01c      	beq.n	8007182 <validate+0x4e>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d018      	beq.n	8007182 <validate+0x4e>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d013      	beq.n	8007182 <validate+0x4e>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	889a      	ldrh	r2, [r3, #4]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	88db      	ldrh	r3, [r3, #6]
 8007164:	429a      	cmp	r2, r3
 8007166:	d10c      	bne.n	8007182 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	785b      	ldrb	r3, [r3, #1]
 800716e:	4618      	mov	r0, r3
 8007170:	f7fe fa1e 	bl	80055b0 <disk_status>
 8007174:	4603      	mov	r3, r0
 8007176:	f003 0301 	and.w	r3, r3, #1
 800717a:	2b00      	cmp	r3, #0
 800717c:	d101      	bne.n	8007182 <validate+0x4e>
			res = FR_OK;
 800717e:	2300      	movs	r3, #0
 8007180:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007182:	7bfb      	ldrb	r3, [r7, #15]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d102      	bne.n	800718e <validate+0x5a>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	e000      	b.n	8007190 <validate+0x5c>
 800718e:	2300      	movs	r3, #0
 8007190:	683a      	ldr	r2, [r7, #0]
 8007192:	6013      	str	r3, [r2, #0]
	return res;
 8007194:	7bfb      	ldrb	r3, [r7, #15]
}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
	...

080071a0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b088      	sub	sp, #32
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	4613      	mov	r3, r2
 80071ac:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80071b2:	f107 0310 	add.w	r3, r7, #16
 80071b6:	4618      	mov	r0, r3
 80071b8:	f7ff fcd5 	bl	8006b66 <get_ldnumber>
 80071bc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	da01      	bge.n	80071c8 <f_mount+0x28>
 80071c4:	230b      	movs	r3, #11
 80071c6:	e02b      	b.n	8007220 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80071c8:	4a17      	ldr	r2, [pc, #92]	@ (8007228 <f_mount+0x88>)
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071d0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d005      	beq.n	80071e4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80071d8:	69b8      	ldr	r0, [r7, #24]
 80071da:	f7fe fccf 	bl	8005b7c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	2200      	movs	r2, #0
 80071e2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d002      	beq.n	80071f0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2200      	movs	r2, #0
 80071ee:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	490d      	ldr	r1, [pc, #52]	@ (8007228 <f_mount+0x88>)
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d002      	beq.n	8007206 <f_mount+0x66>
 8007200:	79fb      	ldrb	r3, [r7, #7]
 8007202:	2b01      	cmp	r3, #1
 8007204:	d001      	beq.n	800720a <f_mount+0x6a>
 8007206:	2300      	movs	r3, #0
 8007208:	e00a      	b.n	8007220 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800720a:	f107 010c 	add.w	r1, r7, #12
 800720e:	f107 0308 	add.w	r3, r7, #8
 8007212:	2200      	movs	r2, #0
 8007214:	4618      	mov	r0, r3
 8007216:	f7ff fd41 	bl	8006c9c <find_volume>
 800721a:	4603      	mov	r3, r0
 800721c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800721e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007220:	4618      	mov	r0, r3
 8007222:	3720      	adds	r7, #32
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}
 8007228:	20000858 	.word	0x20000858

0800722c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b098      	sub	sp, #96	@ 0x60
 8007230:	af00      	add	r7, sp, #0
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	4613      	mov	r3, r2
 8007238:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d101      	bne.n	8007244 <f_open+0x18>
 8007240:	2309      	movs	r3, #9
 8007242:	e1a9      	b.n	8007598 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007244:	79fb      	ldrb	r3, [r7, #7]
 8007246:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800724a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800724c:	79fa      	ldrb	r2, [r7, #7]
 800724e:	f107 0110 	add.w	r1, r7, #16
 8007252:	f107 0308 	add.w	r3, r7, #8
 8007256:	4618      	mov	r0, r3
 8007258:	f7ff fd20 	bl	8006c9c <find_volume>
 800725c:	4603      	mov	r3, r0
 800725e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8007262:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007266:	2b00      	cmp	r3, #0
 8007268:	f040 818d 	bne.w	8007586 <f_open+0x35a>
		dj.obj.fs = fs;
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007270:	68ba      	ldr	r2, [r7, #8]
 8007272:	f107 0314 	add.w	r3, r7, #20
 8007276:	4611      	mov	r1, r2
 8007278:	4618      	mov	r0, r3
 800727a:	f7ff fc03 	bl	8006a84 <follow_path>
 800727e:	4603      	mov	r3, r0
 8007280:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007284:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007288:	2b00      	cmp	r3, #0
 800728a:	d118      	bne.n	80072be <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800728c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007290:	b25b      	sxtb	r3, r3
 8007292:	2b00      	cmp	r3, #0
 8007294:	da03      	bge.n	800729e <f_open+0x72>
				res = FR_INVALID_NAME;
 8007296:	2306      	movs	r3, #6
 8007298:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800729c:	e00f      	b.n	80072be <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800729e:	79fb      	ldrb	r3, [r7, #7]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	bf8c      	ite	hi
 80072a4:	2301      	movhi	r3, #1
 80072a6:	2300      	movls	r3, #0
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	461a      	mov	r2, r3
 80072ac:	f107 0314 	add.w	r3, r7, #20
 80072b0:	4611      	mov	r1, r2
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7fe fb1a 	bl	80058ec <chk_lock>
 80072b8:	4603      	mov	r3, r0
 80072ba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80072be:	79fb      	ldrb	r3, [r7, #7]
 80072c0:	f003 031c 	and.w	r3, r3, #28
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d07f      	beq.n	80073c8 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80072c8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d017      	beq.n	8007300 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80072d0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80072d4:	2b04      	cmp	r3, #4
 80072d6:	d10e      	bne.n	80072f6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80072d8:	f7fe fb64 	bl	80059a4 <enq_lock>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d006      	beq.n	80072f0 <f_open+0xc4>
 80072e2:	f107 0314 	add.w	r3, r7, #20
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7ff faa5 	bl	8006836 <dir_register>
 80072ec:	4603      	mov	r3, r0
 80072ee:	e000      	b.n	80072f2 <f_open+0xc6>
 80072f0:	2312      	movs	r3, #18
 80072f2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80072f6:	79fb      	ldrb	r3, [r7, #7]
 80072f8:	f043 0308 	orr.w	r3, r3, #8
 80072fc:	71fb      	strb	r3, [r7, #7]
 80072fe:	e010      	b.n	8007322 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007300:	7ebb      	ldrb	r3, [r7, #26]
 8007302:	f003 0311 	and.w	r3, r3, #17
 8007306:	2b00      	cmp	r3, #0
 8007308:	d003      	beq.n	8007312 <f_open+0xe6>
					res = FR_DENIED;
 800730a:	2307      	movs	r3, #7
 800730c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007310:	e007      	b.n	8007322 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007312:	79fb      	ldrb	r3, [r7, #7]
 8007314:	f003 0304 	and.w	r3, r3, #4
 8007318:	2b00      	cmp	r3, #0
 800731a:	d002      	beq.n	8007322 <f_open+0xf6>
 800731c:	2308      	movs	r3, #8
 800731e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007322:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007326:	2b00      	cmp	r3, #0
 8007328:	d168      	bne.n	80073fc <f_open+0x1d0>
 800732a:	79fb      	ldrb	r3, [r7, #7]
 800732c:	f003 0308 	and.w	r3, r3, #8
 8007330:	2b00      	cmp	r3, #0
 8007332:	d063      	beq.n	80073fc <f_open+0x1d0>
				dw = GET_FATTIME();
 8007334:	f7fd fefa 	bl	800512c <get_fattime>
 8007338:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800733a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800733c:	330e      	adds	r3, #14
 800733e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007340:	4618      	mov	r0, r3
 8007342:	f7fe fa29 	bl	8005798 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007348:	3316      	adds	r3, #22
 800734a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800734c:	4618      	mov	r0, r3
 800734e:	f7fe fa23 	bl	8005798 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007354:	330b      	adds	r3, #11
 8007356:	2220      	movs	r2, #32
 8007358:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800735e:	4611      	mov	r1, r2
 8007360:	4618      	mov	r0, r3
 8007362:	f7ff f977 	bl	8006654 <ld_clust>
 8007366:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800736c:	2200      	movs	r2, #0
 800736e:	4618      	mov	r0, r3
 8007370:	f7ff f98f 	bl	8006692 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007376:	331c      	adds	r3, #28
 8007378:	2100      	movs	r1, #0
 800737a:	4618      	mov	r0, r3
 800737c:	f7fe fa0c 	bl	8005798 <st_dword>
					fs->wflag = 1;
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	2201      	movs	r2, #1
 8007384:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007386:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007388:	2b00      	cmp	r3, #0
 800738a:	d037      	beq.n	80073fc <f_open+0x1d0>
						dw = fs->winsect;
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007390:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8007392:	f107 0314 	add.w	r3, r7, #20
 8007396:	2200      	movs	r2, #0
 8007398:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800739a:	4618      	mov	r0, r3
 800739c:	f7fe fea2 	bl	80060e4 <remove_chain>
 80073a0:	4603      	mov	r3, r0
 80073a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 80073a6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d126      	bne.n	80073fc <f_open+0x1d0>
							res = move_window(fs, dw);
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7fe fc4a 	bl	8005c4c <move_window>
 80073b8:	4603      	mov	r3, r0
 80073ba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80073c2:	3a01      	subs	r2, #1
 80073c4:	60da      	str	r2, [r3, #12]
 80073c6:	e019      	b.n	80073fc <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80073c8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d115      	bne.n	80073fc <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80073d0:	7ebb      	ldrb	r3, [r7, #26]
 80073d2:	f003 0310 	and.w	r3, r3, #16
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d003      	beq.n	80073e2 <f_open+0x1b6>
					res = FR_NO_FILE;
 80073da:	2304      	movs	r3, #4
 80073dc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80073e0:	e00c      	b.n	80073fc <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80073e2:	79fb      	ldrb	r3, [r7, #7]
 80073e4:	f003 0302 	and.w	r3, r3, #2
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d007      	beq.n	80073fc <f_open+0x1d0>
 80073ec:	7ebb      	ldrb	r3, [r7, #26]
 80073ee:	f003 0301 	and.w	r3, r3, #1
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d002      	beq.n	80073fc <f_open+0x1d0>
						res = FR_DENIED;
 80073f6:	2307      	movs	r3, #7
 80073f8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80073fc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007400:	2b00      	cmp	r3, #0
 8007402:	d126      	bne.n	8007452 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007404:	79fb      	ldrb	r3, [r7, #7]
 8007406:	f003 0308 	and.w	r3, r3, #8
 800740a:	2b00      	cmp	r3, #0
 800740c:	d003      	beq.n	8007416 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800740e:	79fb      	ldrb	r3, [r7, #7]
 8007410:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007414:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800741e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007424:	79fb      	ldrb	r3, [r7, #7]
 8007426:	2b01      	cmp	r3, #1
 8007428:	bf8c      	ite	hi
 800742a:	2301      	movhi	r3, #1
 800742c:	2300      	movls	r3, #0
 800742e:	b2db      	uxtb	r3, r3
 8007430:	461a      	mov	r2, r3
 8007432:	f107 0314 	add.w	r3, r7, #20
 8007436:	4611      	mov	r1, r2
 8007438:	4618      	mov	r0, r3
 800743a:	f7fe fad5 	bl	80059e8 <inc_lock>
 800743e:	4602      	mov	r2, r0
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d102      	bne.n	8007452 <f_open+0x226>
 800744c:	2302      	movs	r3, #2
 800744e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007452:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007456:	2b00      	cmp	r3, #0
 8007458:	f040 8095 	bne.w	8007586 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007460:	4611      	mov	r1, r2
 8007462:	4618      	mov	r0, r3
 8007464:	f7ff f8f6 	bl	8006654 <ld_clust>
 8007468:	4602      	mov	r2, r0
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800746e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007470:	331c      	adds	r3, #28
 8007472:	4618      	mov	r0, r3
 8007474:	f7fe f952 	bl	800571c <ld_dword>
 8007478:	4602      	mov	r2, r0
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	88da      	ldrh	r2, [r3, #6]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	79fa      	ldrb	r2, [r7, #7]
 8007496:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2200      	movs	r2, #0
 800749c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2200      	movs	r2, #0
 80074a2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2200      	movs	r2, #0
 80074a8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	3330      	adds	r3, #48	@ 0x30
 80074ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80074b2:	2100      	movs	r1, #0
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7fe f9bc 	bl	8005832 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80074ba:	79fb      	ldrb	r3, [r7, #7]
 80074bc:	f003 0320 	and.w	r3, r3, #32
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d060      	beq.n	8007586 <f_open+0x35a>
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d05c      	beq.n	8007586 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	68da      	ldr	r2, [r3, #12]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	895b      	ldrh	r3, [r3, #10]
 80074d8:	025b      	lsls	r3, r3, #9
 80074da:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	68db      	ldr	r3, [r3, #12]
 80074e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80074e8:	e016      	b.n	8007518 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7fe fc67 	bl	8005dc2 <get_fat>
 80074f4:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80074f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d802      	bhi.n	8007502 <f_open+0x2d6>
 80074fc:	2302      	movs	r3, #2
 80074fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007502:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007508:	d102      	bne.n	8007510 <f_open+0x2e4>
 800750a:	2301      	movs	r3, #1
 800750c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007510:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007512:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	657b      	str	r3, [r7, #84]	@ 0x54
 8007518:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800751c:	2b00      	cmp	r3, #0
 800751e:	d103      	bne.n	8007528 <f_open+0x2fc>
 8007520:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007522:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007524:	429a      	cmp	r2, r3
 8007526:	d8e0      	bhi.n	80074ea <f_open+0x2be>
				}
				fp->clust = clst;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800752c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800752e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007532:	2b00      	cmp	r3, #0
 8007534:	d127      	bne.n	8007586 <f_open+0x35a>
 8007536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800753c:	2b00      	cmp	r3, #0
 800753e:	d022      	beq.n	8007586 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007544:	4618      	mov	r0, r3
 8007546:	f7fe fc1d 	bl	8005d84 <clust2sect>
 800754a:	6478      	str	r0, [r7, #68]	@ 0x44
 800754c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800754e:	2b00      	cmp	r3, #0
 8007550:	d103      	bne.n	800755a <f_open+0x32e>
						res = FR_INT_ERR;
 8007552:	2302      	movs	r3, #2
 8007554:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007558:	e015      	b.n	8007586 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800755a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800755c:	0a5a      	lsrs	r2, r3, #9
 800755e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007560:	441a      	add	r2, r3
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	7858      	ldrb	r0, [r3, #1]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6a1a      	ldr	r2, [r3, #32]
 8007574:	2301      	movs	r3, #1
 8007576:	f7fe f85b 	bl	8005630 <disk_read>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d002      	beq.n	8007586 <f_open+0x35a>
 8007580:	2301      	movs	r3, #1
 8007582:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007586:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800758a:	2b00      	cmp	r3, #0
 800758c:	d002      	beq.n	8007594 <f_open+0x368>
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2200      	movs	r2, #0
 8007592:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007594:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8007598:	4618      	mov	r0, r3
 800759a:	3760      	adds	r7, #96	@ 0x60
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b08c      	sub	sp, #48	@ 0x30
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	607a      	str	r2, [r7, #4]
 80075ac:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	2200      	movs	r2, #0
 80075b6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f107 0210 	add.w	r2, r7, #16
 80075be:	4611      	mov	r1, r2
 80075c0:	4618      	mov	r0, r3
 80075c2:	f7ff fdb7 	bl	8007134 <validate>
 80075c6:	4603      	mov	r3, r0
 80075c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80075cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d107      	bne.n	80075e4 <f_write+0x44>
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	7d5b      	ldrb	r3, [r3, #21]
 80075d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80075dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d002      	beq.n	80075ea <f_write+0x4a>
 80075e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80075e8:	e14b      	b.n	8007882 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	7d1b      	ldrb	r3, [r3, #20]
 80075ee:	f003 0302 	and.w	r3, r3, #2
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d101      	bne.n	80075fa <f_write+0x5a>
 80075f6:	2307      	movs	r3, #7
 80075f8:	e143      	b.n	8007882 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	699a      	ldr	r2, [r3, #24]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	441a      	add	r2, r3
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	699b      	ldr	r3, [r3, #24]
 8007606:	429a      	cmp	r2, r3
 8007608:	f080 812d 	bcs.w	8007866 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	699b      	ldr	r3, [r3, #24]
 8007610:	43db      	mvns	r3, r3
 8007612:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007614:	e127      	b.n	8007866 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	699b      	ldr	r3, [r3, #24]
 800761a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800761e:	2b00      	cmp	r3, #0
 8007620:	f040 80e3 	bne.w	80077ea <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	699b      	ldr	r3, [r3, #24]
 8007628:	0a5b      	lsrs	r3, r3, #9
 800762a:	693a      	ldr	r2, [r7, #16]
 800762c:	8952      	ldrh	r2, [r2, #10]
 800762e:	3a01      	subs	r2, #1
 8007630:	4013      	ands	r3, r2
 8007632:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d143      	bne.n	80076c2 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	699b      	ldr	r3, [r3, #24]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d10c      	bne.n	800765c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800764a:	2b00      	cmp	r3, #0
 800764c:	d11a      	bne.n	8007684 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2100      	movs	r1, #0
 8007652:	4618      	mov	r0, r3
 8007654:	f7fe fdab 	bl	80061ae <create_chain>
 8007658:	62b8      	str	r0, [r7, #40]	@ 0x28
 800765a:	e013      	b.n	8007684 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007660:	2b00      	cmp	r3, #0
 8007662:	d007      	beq.n	8007674 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	699b      	ldr	r3, [r3, #24]
 8007668:	4619      	mov	r1, r3
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	f7fe fe37 	bl	80062de <clmt_clust>
 8007670:	62b8      	str	r0, [r7, #40]	@ 0x28
 8007672:	e007      	b.n	8007684 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	69db      	ldr	r3, [r3, #28]
 800767a:	4619      	mov	r1, r3
 800767c:	4610      	mov	r0, r2
 800767e:	f7fe fd96 	bl	80061ae <create_chain>
 8007682:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007686:	2b00      	cmp	r3, #0
 8007688:	f000 80f2 	beq.w	8007870 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800768c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800768e:	2b01      	cmp	r3, #1
 8007690:	d104      	bne.n	800769c <f_write+0xfc>
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2202      	movs	r2, #2
 8007696:	755a      	strb	r2, [r3, #21]
 8007698:	2302      	movs	r3, #2
 800769a:	e0f2      	b.n	8007882 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800769c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800769e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076a2:	d104      	bne.n	80076ae <f_write+0x10e>
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2201      	movs	r2, #1
 80076a8:	755a      	strb	r2, [r3, #21]
 80076aa:	2301      	movs	r3, #1
 80076ac:	e0e9      	b.n	8007882 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80076b2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d102      	bne.n	80076c2 <f_write+0x122>
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80076c0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	7d1b      	ldrb	r3, [r3, #20]
 80076c6:	b25b      	sxtb	r3, r3
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	da18      	bge.n	80076fe <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	7858      	ldrb	r0, [r3, #1]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6a1a      	ldr	r2, [r3, #32]
 80076da:	2301      	movs	r3, #1
 80076dc:	f7fd ffc8 	bl	8005670 <disk_write>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d004      	beq.n	80076f0 <f_write+0x150>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2201      	movs	r2, #1
 80076ea:	755a      	strb	r2, [r3, #21]
 80076ec:	2301      	movs	r3, #1
 80076ee:	e0c8      	b.n	8007882 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	7d1b      	ldrb	r3, [r3, #20]
 80076f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076f8:	b2da      	uxtb	r2, r3
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80076fe:	693a      	ldr	r2, [r7, #16]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	69db      	ldr	r3, [r3, #28]
 8007704:	4619      	mov	r1, r3
 8007706:	4610      	mov	r0, r2
 8007708:	f7fe fb3c 	bl	8005d84 <clust2sect>
 800770c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d104      	bne.n	800771e <f_write+0x17e>
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2202      	movs	r2, #2
 8007718:	755a      	strb	r2, [r3, #21]
 800771a:	2302      	movs	r3, #2
 800771c:	e0b1      	b.n	8007882 <f_write+0x2e2>
			sect += csect;
 800771e:	697a      	ldr	r2, [r7, #20]
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	4413      	add	r3, r2
 8007724:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	0a5b      	lsrs	r3, r3, #9
 800772a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800772c:	6a3b      	ldr	r3, [r7, #32]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d03c      	beq.n	80077ac <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007732:	69ba      	ldr	r2, [r7, #24]
 8007734:	6a3b      	ldr	r3, [r7, #32]
 8007736:	4413      	add	r3, r2
 8007738:	693a      	ldr	r2, [r7, #16]
 800773a:	8952      	ldrh	r2, [r2, #10]
 800773c:	4293      	cmp	r3, r2
 800773e:	d905      	bls.n	800774c <f_write+0x1ac>
					cc = fs->csize - csect;
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	895b      	ldrh	r3, [r3, #10]
 8007744:	461a      	mov	r2, r3
 8007746:	69bb      	ldr	r3, [r7, #24]
 8007748:	1ad3      	subs	r3, r2, r3
 800774a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	7858      	ldrb	r0, [r3, #1]
 8007750:	6a3b      	ldr	r3, [r7, #32]
 8007752:	697a      	ldr	r2, [r7, #20]
 8007754:	69f9      	ldr	r1, [r7, #28]
 8007756:	f7fd ff8b 	bl	8005670 <disk_write>
 800775a:	4603      	mov	r3, r0
 800775c:	2b00      	cmp	r3, #0
 800775e:	d004      	beq.n	800776a <f_write+0x1ca>
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2201      	movs	r2, #1
 8007764:	755a      	strb	r2, [r3, #21]
 8007766:	2301      	movs	r3, #1
 8007768:	e08b      	b.n	8007882 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6a1a      	ldr	r2, [r3, #32]
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	1ad3      	subs	r3, r2, r3
 8007772:	6a3a      	ldr	r2, [r7, #32]
 8007774:	429a      	cmp	r2, r3
 8007776:	d915      	bls.n	80077a4 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6a1a      	ldr	r2, [r3, #32]
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	1ad3      	subs	r3, r2, r3
 8007786:	025b      	lsls	r3, r3, #9
 8007788:	69fa      	ldr	r2, [r7, #28]
 800778a:	4413      	add	r3, r2
 800778c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007790:	4619      	mov	r1, r3
 8007792:	f7fe f82d 	bl	80057f0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	7d1b      	ldrb	r3, [r3, #20]
 800779a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800779e:	b2da      	uxtb	r2, r3
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80077a4:	6a3b      	ldr	r3, [r7, #32]
 80077a6:	025b      	lsls	r3, r3, #9
 80077a8:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80077aa:	e03f      	b.n	800782c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6a1b      	ldr	r3, [r3, #32]
 80077b0:	697a      	ldr	r2, [r7, #20]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d016      	beq.n	80077e4 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	699a      	ldr	r2, [r3, #24]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80077be:	429a      	cmp	r2, r3
 80077c0:	d210      	bcs.n	80077e4 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	7858      	ldrb	r0, [r3, #1]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80077cc:	2301      	movs	r3, #1
 80077ce:	697a      	ldr	r2, [r7, #20]
 80077d0:	f7fd ff2e 	bl	8005630 <disk_read>
 80077d4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d004      	beq.n	80077e4 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2201      	movs	r2, #1
 80077de:	755a      	strb	r2, [r3, #21]
 80077e0:	2301      	movs	r3, #1
 80077e2:	e04e      	b.n	8007882 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	697a      	ldr	r2, [r7, #20]
 80077e8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	699b      	ldr	r3, [r3, #24]
 80077ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077f2:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80077f6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80077f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d901      	bls.n	8007804 <f_write+0x264>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	699b      	ldr	r3, [r3, #24]
 800780e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007812:	4413      	add	r3, r2
 8007814:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007816:	69f9      	ldr	r1, [r7, #28]
 8007818:	4618      	mov	r0, r3
 800781a:	f7fd ffe9 	bl	80057f0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	7d1b      	ldrb	r3, [r3, #20]
 8007822:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007826:	b2da      	uxtb	r2, r3
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800782c:	69fa      	ldr	r2, [r7, #28]
 800782e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007830:	4413      	add	r3, r2
 8007832:	61fb      	str	r3, [r7, #28]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	699a      	ldr	r2, [r3, #24]
 8007838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800783a:	441a      	add	r2, r3
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	619a      	str	r2, [r3, #24]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	68da      	ldr	r2, [r3, #12]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	699b      	ldr	r3, [r3, #24]
 8007848:	429a      	cmp	r2, r3
 800784a:	bf38      	it	cc
 800784c:	461a      	movcc	r2, r3
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	60da      	str	r2, [r3, #12]
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	681a      	ldr	r2, [r3, #0]
 8007856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007858:	441a      	add	r2, r3
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	601a      	str	r2, [r3, #0]
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007862:	1ad3      	subs	r3, r2, r3
 8007864:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2b00      	cmp	r3, #0
 800786a:	f47f aed4 	bne.w	8007616 <f_write+0x76>
 800786e:	e000      	b.n	8007872 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007870:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	7d1b      	ldrb	r3, [r3, #20]
 8007876:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800787a:	b2da      	uxtb	r2, r3
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3730      	adds	r7, #48	@ 0x30
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800788a:	b580      	push	{r7, lr}
 800788c:	b086      	sub	sp, #24
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f107 0208 	add.w	r2, r7, #8
 8007898:	4611      	mov	r1, r2
 800789a:	4618      	mov	r0, r3
 800789c:	f7ff fc4a 	bl	8007134 <validate>
 80078a0:	4603      	mov	r3, r0
 80078a2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80078a4:	7dfb      	ldrb	r3, [r7, #23]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d168      	bne.n	800797c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	7d1b      	ldrb	r3, [r3, #20]
 80078ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d062      	beq.n	800797c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	7d1b      	ldrb	r3, [r3, #20]
 80078ba:	b25b      	sxtb	r3, r3
 80078bc:	2b00      	cmp	r3, #0
 80078be:	da15      	bge.n	80078ec <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	7858      	ldrb	r0, [r3, #1]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6a1a      	ldr	r2, [r3, #32]
 80078ce:	2301      	movs	r3, #1
 80078d0:	f7fd fece 	bl	8005670 <disk_write>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d001      	beq.n	80078de <f_sync+0x54>
 80078da:	2301      	movs	r3, #1
 80078dc:	e04f      	b.n	800797e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	7d1b      	ldrb	r3, [r3, #20]
 80078e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078e6:	b2da      	uxtb	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80078ec:	f7fd fc1e 	bl	800512c <get_fattime>
 80078f0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80078f2:	68ba      	ldr	r2, [r7, #8]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078f8:	4619      	mov	r1, r3
 80078fa:	4610      	mov	r0, r2
 80078fc:	f7fe f9a6 	bl	8005c4c <move_window>
 8007900:	4603      	mov	r3, r0
 8007902:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007904:	7dfb      	ldrb	r3, [r7, #23]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d138      	bne.n	800797c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800790e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	330b      	adds	r3, #11
 8007914:	781a      	ldrb	r2, [r3, #0]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	330b      	adds	r3, #11
 800791a:	f042 0220 	orr.w	r2, r2, #32
 800791e:	b2d2      	uxtb	r2, r2
 8007920:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6818      	ldr	r0, [r3, #0]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	461a      	mov	r2, r3
 800792c:	68f9      	ldr	r1, [r7, #12]
 800792e:	f7fe feb0 	bl	8006692 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f103 021c 	add.w	r2, r3, #28
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	4619      	mov	r1, r3
 800793e:	4610      	mov	r0, r2
 8007940:	f7fd ff2a 	bl	8005798 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	3316      	adds	r3, #22
 8007948:	6939      	ldr	r1, [r7, #16]
 800794a:	4618      	mov	r0, r3
 800794c:	f7fd ff24 	bl	8005798 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	3312      	adds	r3, #18
 8007954:	2100      	movs	r1, #0
 8007956:	4618      	mov	r0, r3
 8007958:	f7fd ff03 	bl	8005762 <st_word>
					fs->wflag = 1;
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	2201      	movs	r2, #1
 8007960:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	4618      	mov	r0, r3
 8007966:	f7fe f99f 	bl	8005ca8 <sync_fs>
 800796a:	4603      	mov	r3, r0
 800796c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	7d1b      	ldrb	r3, [r3, #20]
 8007972:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007976:	b2da      	uxtb	r2, r3
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800797c:	7dfb      	ldrb	r3, [r7, #23]
}
 800797e:	4618      	mov	r0, r3
 8007980:	3718      	adds	r7, #24
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b084      	sub	sp, #16
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f7ff ff7b 	bl	800788a <f_sync>
 8007994:	4603      	mov	r3, r0
 8007996:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007998:	7bfb      	ldrb	r3, [r7, #15]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d118      	bne.n	80079d0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f107 0208 	add.w	r2, r7, #8
 80079a4:	4611      	mov	r1, r2
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7ff fbc4 	bl	8007134 <validate>
 80079ac:	4603      	mov	r3, r0
 80079ae:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80079b0:	7bfb      	ldrb	r3, [r7, #15]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d10c      	bne.n	80079d0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	691b      	ldr	r3, [r3, #16]
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7fe f8a2 	bl	8005b04 <dec_lock>
 80079c0:	4603      	mov	r3, r0
 80079c2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80079c4:	7bfb      	ldrb	r3, [r7, #15]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d102      	bne.n	80079d0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80079d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3710      	adds	r7, #16
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80079da:	b580      	push	{r7, lr}
 80079dc:	b086      	sub	sp, #24
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
 80079e2:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d101      	bne.n	80079ee <f_opendir+0x14>
 80079ea:	2309      	movs	r3, #9
 80079ec:	e064      	b.n	8007ab8 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 80079f2:	f107 010c 	add.w	r1, r7, #12
 80079f6:	463b      	mov	r3, r7
 80079f8:	2200      	movs	r2, #0
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7ff f94e 	bl	8006c9c <find_volume>
 8007a00:	4603      	mov	r3, r0
 8007a02:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007a04:	7dfb      	ldrb	r3, [r7, #23]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d14f      	bne.n	8007aaa <f_opendir+0xd0>
		obj->fs = fs;
 8007a0a:	68fa      	ldr	r2, [r7, #12]
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	4619      	mov	r1, r3
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f7ff f835 	bl	8006a84 <follow_path>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8007a1e:	7dfb      	ldrb	r3, [r7, #23]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d13d      	bne.n	8007aa0 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007a2a:	b25b      	sxtb	r3, r3
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	db12      	blt.n	8007a56 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	799b      	ldrb	r3, [r3, #6]
 8007a34:	f003 0310 	and.w	r3, r3, #16
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00a      	beq.n	8007a52 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a1b      	ldr	r3, [r3, #32]
 8007a42:	4619      	mov	r1, r3
 8007a44:	4610      	mov	r0, r2
 8007a46:	f7fe fe05 	bl	8006654 <ld_clust>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	609a      	str	r2, [r3, #8]
 8007a50:	e001      	b.n	8007a56 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8007a52:	2305      	movs	r3, #5
 8007a54:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8007a56:	7dfb      	ldrb	r3, [r7, #23]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d121      	bne.n	8007aa0 <f_opendir+0xc6>
				obj->id = fs->id;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	88da      	ldrh	r2, [r3, #6]
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8007a64:	2100      	movs	r1, #0
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f7fe fc6d 	bl	8006346 <dir_sdi>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8007a70:	7dfb      	ldrb	r3, [r7, #23]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d114      	bne.n	8007aa0 <f_opendir+0xc6>
					if (obj->sclust) {
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00d      	beq.n	8007a9a <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8007a7e:	2100      	movs	r1, #0
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f7fd ffb1 	bl	80059e8 <inc_lock>
 8007a86:	4602      	mov	r2, r0
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	691b      	ldr	r3, [r3, #16]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d105      	bne.n	8007aa0 <f_opendir+0xc6>
 8007a94:	2312      	movs	r3, #18
 8007a96:	75fb      	strb	r3, [r7, #23]
 8007a98:	e002      	b.n	8007aa0 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8007aa0:	7dfb      	ldrb	r3, [r7, #23]
 8007aa2:	2b04      	cmp	r3, #4
 8007aa4:	d101      	bne.n	8007aaa <f_opendir+0xd0>
 8007aa6:	2305      	movs	r3, #5
 8007aa8:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8007aaa:	7dfb      	ldrb	r3, [r7, #23]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d002      	beq.n	8007ab6 <f_opendir+0xdc>
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007ab6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3718      	adds	r7, #24
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f107 0208 	add.w	r2, r7, #8
 8007ace:	4611      	mov	r1, r2
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7ff fb2f 	bl	8007134 <validate>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007ada:	7bfb      	ldrb	r3, [r7, #15]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d110      	bne.n	8007b02 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	691b      	ldr	r3, [r3, #16]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d006      	beq.n	8007af6 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	691b      	ldr	r3, [r3, #16]
 8007aec:	4618      	mov	r0, r3
 8007aee:	f7fe f809 	bl	8005b04 <dec_lock>
 8007af2:	4603      	mov	r3, r0
 8007af4:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8007af6:	7bfb      	ldrb	r3, [r7, #15]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d102      	bne.n	8007b02 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8007b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3710      	adds	r7, #16
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f107 0208 	add.w	r2, r7, #8
 8007b1c:	4611      	mov	r1, r2
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7ff fb08 	bl	8007134 <validate>
 8007b24:	4603      	mov	r3, r0
 8007b26:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007b28:	7bfb      	ldrb	r3, [r7, #15]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d126      	bne.n	8007b7c <f_readdir+0x70>
		if (!fno) {
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d106      	bne.n	8007b42 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8007b34:	2100      	movs	r1, #0
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f7fe fc05 	bl	8006346 <dir_sdi>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	73fb      	strb	r3, [r7, #15]
 8007b40:	e01c      	b.n	8007b7c <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8007b42:	2100      	movs	r1, #0
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f7fe fdc4 	bl	80066d2 <dir_read>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8007b4e:	7bfb      	ldrb	r3, [r7, #15]
 8007b50:	2b04      	cmp	r3, #4
 8007b52:	d101      	bne.n	8007b58 <f_readdir+0x4c>
 8007b54:	2300      	movs	r3, #0
 8007b56:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8007b58:	7bfb      	ldrb	r3, [r7, #15]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d10e      	bne.n	8007b7c <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8007b5e:	6839      	ldr	r1, [r7, #0]
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f7fe fe9a 	bl	800689a <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8007b66:	2100      	movs	r1, #0
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f7fe fc67 	bl	800643c <dir_next>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8007b72:	7bfb      	ldrb	r3, [r7, #15]
 8007b74:	2b04      	cmp	r3, #4
 8007b76:	d101      	bne.n	8007b7c <f_readdir+0x70>
 8007b78:	2300      	movs	r3, #0
 8007b7a:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8007b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
	...

08007b88 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8007b88:	b590      	push	{r4, r7, lr}
 8007b8a:	b09d      	sub	sp, #116	@ 0x74
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	607a      	str	r2, [r7, #4]
 8007b92:	603b      	str	r3, [r7, #0]
 8007b94:	460b      	mov	r3, r1
 8007b96:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8007b98:	2301      	movs	r3, #1
 8007b9a:	647b      	str	r3, [r7, #68]	@ 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8007b9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007ba0:	643b      	str	r3, [r7, #64]	@ 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8007ba2:	f107 030c 	add.w	r3, r7, #12
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7fe ffdd 	bl	8006b66 <get_ldnumber>
 8007bac:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007bae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	da02      	bge.n	8007bba <f_mkfs+0x32>
 8007bb4:	230b      	movs	r3, #11
 8007bb6:	f000 bc0d 	b.w	80083d4 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8007bba:	4a94      	ldr	r2, [pc, #592]	@ (8007e0c <f_mkfs+0x284>)
 8007bbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d005      	beq.n	8007bd2 <f_mkfs+0x4a>
 8007bc6:	4a91      	ldr	r2, [pc, #580]	@ (8007e0c <f_mkfs+0x284>)
 8007bc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8007bd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bd4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8007bd8:	2300      	movs	r3, #0
 8007bda:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8007bde:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8007be2:	4618      	mov	r0, r3
 8007be4:	f7fd fcfe 	bl	80055e4 <disk_initialize>
 8007be8:	4603      	mov	r3, r0
 8007bea:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8007bee:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007bf2:	f003 0301 	and.w	r3, r3, #1
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d001      	beq.n	8007bfe <f_mkfs+0x76>
 8007bfa:	2303      	movs	r3, #3
 8007bfc:	e3ea      	b.n	80083d4 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8007bfe:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8007c02:	f003 0304 	and.w	r3, r3, #4
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d001      	beq.n	8007c0e <f_mkfs+0x86>
 8007c0a:	230a      	movs	r3, #10
 8007c0c:	e3e2      	b.n	80083d4 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8007c0e:	f107 0214 	add.w	r2, r7, #20
 8007c12:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8007c16:	2103      	movs	r1, #3
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f7fd fd49 	bl	80056b0 <disk_ioctl>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d10c      	bne.n	8007c3e <f_mkfs+0xb6>
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d009      	beq.n	8007c3e <f_mkfs+0xb6>
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c30:	d805      	bhi.n	8007c3e <f_mkfs+0xb6>
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	1e5a      	subs	r2, r3, #1
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	4013      	ands	r3, r2
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d001      	beq.n	8007c42 <f_mkfs+0xba>
 8007c3e:	2301      	movs	r3, #1
 8007c40:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8007c42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007c46:	86fb      	strh	r3, [r7, #54]	@ 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d003      	beq.n	8007c56 <f_mkfs+0xce>
 8007c4e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d309      	bcc.n	8007c6a <f_mkfs+0xe2>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c5c:	d805      	bhi.n	8007c6a <f_mkfs+0xe2>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	1e5a      	subs	r2, r3, #1
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4013      	ands	r3, r2
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d001      	beq.n	8007c6e <f_mkfs+0xe6>
 8007c6a:	2313      	movs	r3, #19
 8007c6c:	e3b2      	b.n	80083d4 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 8007c6e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c76:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	633b      	str	r3, [r7, #48]	@ 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8007c7c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007c7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8007c88:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c8c:	fb02 f303 	mul.w	r3, r2, r3
 8007c90:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 8007c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d101      	bne.n	8007c9c <f_mkfs+0x114>
 8007c98:	230e      	movs	r3, #14
 8007c9a:	e39b      	b.n	80083d4 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8007c9c:	f107 0210 	add.w	r2, r7, #16
 8007ca0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8007ca4:	2101      	movs	r1, #1
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7fd fd02 	bl	80056b0 <disk_ioctl>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d001      	beq.n	8007cb6 <f_mkfs+0x12e>
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e38e      	b.n	80083d4 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8007cb6:	7afb      	ldrb	r3, [r7, #11]
 8007cb8:	f003 0308 	and.w	r3, r3, #8
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d001      	beq.n	8007cc4 <f_mkfs+0x13c>
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	e000      	b.n	8007cc6 <f_mkfs+0x13e>
 8007cc4:	233f      	movs	r3, #63	@ 0x3f
 8007cc6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d901      	bls.n	8007cd4 <f_mkfs+0x14c>
 8007cd0:	230e      	movs	r3, #14
 8007cd2:	e37f      	b.n	80083d4 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8007cd4:	693a      	ldr	r2, [r7, #16]
 8007cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd8:	1ad3      	subs	r3, r2, r3
 8007cda:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	2b7f      	cmp	r3, #127	@ 0x7f
 8007ce0:	d801      	bhi.n	8007ce6 <f_mkfs+0x15e>
 8007ce2:	230e      	movs	r3, #14
 8007ce4:	e376      	b.n	80083d4 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2b80      	cmp	r3, #128	@ 0x80
 8007cea:	d901      	bls.n	8007cf0 <f_mkfs+0x168>
 8007cec:	2313      	movs	r3, #19
 8007cee:	e371      	b.n	80083d4 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8007cf0:	7afb      	ldrb	r3, [r7, #11]
 8007cf2:	f003 0302 	and.w	r3, r3, #2
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d00d      	beq.n	8007d16 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8007cfa:	7afb      	ldrb	r3, [r7, #11]
 8007cfc:	f003 0307 	and.w	r3, r3, #7
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	d004      	beq.n	8007d0e <f_mkfs+0x186>
 8007d04:	7afb      	ldrb	r3, [r7, #11]
 8007d06:	f003 0301 	and.w	r3, r3, #1
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d103      	bne.n	8007d16 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8007d14:	e009      	b.n	8007d2a <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8007d16:	7afb      	ldrb	r3, [r7, #11]
 8007d18:	f003 0301 	and.w	r3, r3, #1
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d101      	bne.n	8007d24 <f_mkfs+0x19c>
 8007d20:	2313      	movs	r3, #19
 8007d22:	e357      	b.n	80083d4 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8007d24:	2302      	movs	r3, #2
 8007d26:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	653b      	str	r3, [r7, #80]	@ 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8007d2e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007d32:	2b03      	cmp	r3, #3
 8007d34:	d13c      	bne.n	8007db0 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 8007d36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d11b      	bne.n	8007d74 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	0c5b      	lsrs	r3, r3, #17
 8007d40:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8007d42:	2300      	movs	r3, #0
 8007d44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d46:	2301      	movs	r3, #1
 8007d48:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d4a:	e005      	b.n	8007d58 <f_mkfs+0x1d0>
 8007d4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d4e:	3301      	adds	r3, #1
 8007d50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d54:	005b      	lsls	r3, r3, #1
 8007d56:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d58:	4a2d      	ldr	r2, [pc, #180]	@ (8007e10 <f_mkfs+0x288>)
 8007d5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d007      	beq.n	8007d74 <f_mkfs+0x1ec>
 8007d64:	4a2a      	ldr	r2, [pc, #168]	@ (8007e10 <f_mkfs+0x288>)
 8007d66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d2eb      	bcs.n	8007d4c <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8007d74:	693a      	ldr	r2, [r7, #16]
 8007d76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d7c:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8007d7e:	6a3b      	ldr	r3, [r7, #32]
 8007d80:	3302      	adds	r3, #2
 8007d82:	009a      	lsls	r2, r3, #2
 8007d84:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007d86:	4413      	add	r3, r2
 8007d88:	1e5a      	subs	r2, r3, #1
 8007d8a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d90:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 8007d92:	2320      	movs	r3, #32
 8007d94:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = 0;		/* No static directory */
 8007d96:	2300      	movs	r3, #0
 8007d98:	66fb      	str	r3, [r7, #108]	@ 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8007d9a:	6a3b      	ldr	r3, [r7, #32]
 8007d9c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d903      	bls.n	8007dac <f_mkfs+0x224>
 8007da4:	6a3b      	ldr	r3, [r7, #32]
 8007da6:	4a1b      	ldr	r2, [pc, #108]	@ (8007e14 <f_mkfs+0x28c>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d952      	bls.n	8007e52 <f_mkfs+0x2ca>
 8007dac:	230e      	movs	r3, #14
 8007dae:	e311      	b.n	80083d4 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8007db0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d11b      	bne.n	8007dee <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	0b1b      	lsrs	r3, r3, #12
 8007dba:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	653b      	str	r3, [r7, #80]	@ 0x50
 8007dc4:	e005      	b.n	8007dd2 <f_mkfs+0x24a>
 8007dc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007dc8:	3301      	adds	r3, #1
 8007dca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007dcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007dce:	005b      	lsls	r3, r3, #1
 8007dd0:	653b      	str	r3, [r7, #80]	@ 0x50
 8007dd2:	4a11      	ldr	r2, [pc, #68]	@ (8007e18 <f_mkfs+0x290>)
 8007dd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007dd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d007      	beq.n	8007dee <f_mkfs+0x266>
 8007dde:	4a0e      	ldr	r2, [pc, #56]	@ (8007e18 <f_mkfs+0x290>)
 8007de0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007de2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007de6:	461a      	mov	r2, r3
 8007de8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d2eb      	bcs.n	8007dc6 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 8007dee:	693a      	ldr	r2, [r7, #16]
 8007df0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007df6:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 8007df8:	6a3b      	ldr	r3, [r7, #32]
 8007dfa:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d90c      	bls.n	8007e1c <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8007e02:	6a3b      	ldr	r3, [r7, #32]
 8007e04:	3302      	adds	r3, #2
 8007e06:	005b      	lsls	r3, r3, #1
 8007e08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e0a:	e012      	b.n	8007e32 <f_mkfs+0x2aa>
 8007e0c:	20000858 	.word	0x20000858
 8007e10:	08008f3c 	.word	0x08008f3c
 8007e14:	0ffffff5 	.word	0x0ffffff5
 8007e18:	08008f4c 	.word	0x08008f4c
				} else {
					fmt = FS_FAT12;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8007e22:	6a3a      	ldr	r2, [r7, #32]
 8007e24:	4613      	mov	r3, r2
 8007e26:	005b      	lsls	r3, r3, #1
 8007e28:	4413      	add	r3, r2
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	085b      	lsrs	r3, r3, #1
 8007e2e:	3303      	adds	r3, #3
 8007e30:	65fb      	str	r3, [r7, #92]	@ 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8007e32:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007e34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e36:	4413      	add	r3, r2
 8007e38:	1e5a      	subs	r2, r3, #1
 8007e3a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e40:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 8007e42:	2301      	movs	r3, #1
 8007e44:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8007e46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e48:	015a      	lsls	r2, r3, #5
 8007e4a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e50:	66fb      	str	r3, [r7, #108]	@ 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8007e52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e56:	4413      	add	r3, r2
 8007e58:	65bb      	str	r3, [r7, #88]	@ 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8007e5a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007e5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e5e:	fb03 f202 	mul.w	r2, r3, r2
 8007e62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007e64:	4413      	add	r3, r2
 8007e66:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007e68:	4413      	add	r3, r2
 8007e6a:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8007e6c:	697a      	ldr	r2, [r7, #20]
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	4413      	add	r3, r2
 8007e72:	1e5a      	subs	r2, r3, #1
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	425b      	negs	r3, r3
 8007e78:	401a      	ands	r2, r3
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	1ad3      	subs	r3, r2, r3
 8007e7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8007e80:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007e84:	2b03      	cmp	r3, #3
 8007e86:	d108      	bne.n	8007e9a <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 8007e88:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007e8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e8c:	4413      	add	r3, r2
 8007e8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007e90:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007e92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e94:	4413      	add	r3, r2
 8007e96:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007e98:	e006      	b.n	8007ea8 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 8007e9a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007e9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ea2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007ea4:	4413      	add	r3, r2
 8007ea6:	66bb      	str	r3, [r7, #104]	@ 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8007ea8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007eaa:	011a      	lsls	r2, r3, #4
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	441a      	add	r2, r3
 8007eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb2:	1ad2      	subs	r2, r2, r3
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d901      	bls.n	8007ebe <f_mkfs+0x336>
 8007eba:	230e      	movs	r3, #14
 8007ebc:	e28a      	b.n	80083d4 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8007ebe:	693a      	ldr	r2, [r7, #16]
 8007ec0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ec2:	1ad2      	subs	r2, r2, r3
 8007ec4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007ec6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007ec8:	fb01 f303 	mul.w	r3, r1, r3
 8007ecc:	1ad2      	subs	r2, r2, r3
 8007ece:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ed0:	1ad2      	subs	r2, r2, r3
 8007ed2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ed8:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 8007eda:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007ede:	2b03      	cmp	r3, #3
 8007ee0:	d10f      	bne.n	8007f02 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8007ee2:	6a3b      	ldr	r3, [r7, #32]
 8007ee4:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d80a      	bhi.n	8007f02 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d105      	bne.n	8007efe <f_mkfs+0x376>
 8007ef2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ef4:	085b      	lsrs	r3, r3, #1
 8007ef6:	607b      	str	r3, [r7, #4]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d144      	bne.n	8007f88 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 8007efe:	230e      	movs	r3, #14
 8007f00:	e268      	b.n	80083d4 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 8007f02:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007f06:	2b02      	cmp	r3, #2
 8007f08:	d133      	bne.n	8007f72 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8007f0a:	6a3b      	ldr	r3, [r7, #32]
 8007f0c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d91e      	bls.n	8007f52 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d107      	bne.n	8007f2a <f_mkfs+0x3a2>
 8007f1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f1c:	005b      	lsls	r3, r3, #1
 8007f1e:	2b40      	cmp	r3, #64	@ 0x40
 8007f20:	d803      	bhi.n	8007f2a <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8007f22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f24:	005b      	lsls	r3, r3, #1
 8007f26:	607b      	str	r3, [r7, #4]
 8007f28:	e033      	b.n	8007f92 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 8007f2a:	7afb      	ldrb	r3, [r7, #11]
 8007f2c:	f003 0302 	and.w	r3, r3, #2
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d003      	beq.n	8007f3c <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8007f34:	2303      	movs	r3, #3
 8007f36:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8007f3a:	e02a      	b.n	8007f92 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d105      	bne.n	8007f4e <f_mkfs+0x3c6>
 8007f42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f44:	005b      	lsls	r3, r3, #1
 8007f46:	607b      	str	r3, [r7, #4]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2b80      	cmp	r3, #128	@ 0x80
 8007f4c:	d91e      	bls.n	8007f8c <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 8007f4e:	230e      	movs	r3, #14
 8007f50:	e240      	b.n	80083d4 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8007f52:	6a3b      	ldr	r3, [r7, #32]
 8007f54:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d80a      	bhi.n	8007f72 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d105      	bne.n	8007f6e <f_mkfs+0x3e6>
 8007f62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f64:	005b      	lsls	r3, r3, #1
 8007f66:	607b      	str	r3, [r7, #4]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2b80      	cmp	r3, #128	@ 0x80
 8007f6c:	d910      	bls.n	8007f90 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 8007f6e:	230e      	movs	r3, #14
 8007f70:	e230      	b.n	80083d4 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8007f72:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d10c      	bne.n	8007f94 <f_mkfs+0x40c>
 8007f7a:	6a3b      	ldr	r3, [r7, #32]
 8007f7c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d907      	bls.n	8007f94 <f_mkfs+0x40c>
 8007f84:	230e      	movs	r3, #14
 8007f86:	e225      	b.n	80083d4 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8007f88:	bf00      	nop
 8007f8a:	e6ce      	b.n	8007d2a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8007f8c:	bf00      	nop
 8007f8e:	e6cc      	b.n	8007d2a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8007f90:	bf00      	nop
			pau = au;
 8007f92:	e6ca      	b.n	8007d2a <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8007f94:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8007f96:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007f98:	461a      	mov	r2, r3
 8007f9a:	2100      	movs	r1, #0
 8007f9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007f9e:	f7fd fc48 	bl	8005832 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8007fa2:	220b      	movs	r2, #11
 8007fa4:	49b2      	ldr	r1, [pc, #712]	@ (8008270 <f_mkfs+0x6e8>)
 8007fa6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007fa8:	f7fd fc22 	bl	80057f0 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8007fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fae:	330b      	adds	r3, #11
 8007fb0:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007fb2:	4611      	mov	r1, r2
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7fd fbd4 	bl	8005762 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8007fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fbc:	330d      	adds	r3, #13
 8007fbe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007fc0:	b2d2      	uxtb	r2, r2
 8007fc2:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8007fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc6:	330e      	adds	r3, #14
 8007fc8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007fca:	b292      	uxth	r2, r2
 8007fcc:	4611      	mov	r1, r2
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7fd fbc7 	bl	8005762 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8007fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd6:	3310      	adds	r3, #16
 8007fd8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007fda:	b2d2      	uxtb	r2, r2
 8007fdc:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8007fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe0:	f103 0211 	add.w	r2, r3, #17
 8007fe4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007fe8:	2b03      	cmp	r3, #3
 8007fea:	d002      	beq.n	8007ff2 <f_mkfs+0x46a>
 8007fec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	e000      	b.n	8007ff4 <f_mkfs+0x46c>
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	4610      	mov	r0, r2
 8007ff8:	f7fd fbb3 	bl	8005762 <st_word>
		if (sz_vol < 0x10000) {
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008002:	d208      	bcs.n	8008016 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8008004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008006:	3313      	adds	r3, #19
 8008008:	693a      	ldr	r2, [r7, #16]
 800800a:	b292      	uxth	r2, r2
 800800c:	4611      	mov	r1, r2
 800800e:	4618      	mov	r0, r3
 8008010:	f7fd fba7 	bl	8005762 <st_word>
 8008014:	e006      	b.n	8008024 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8008016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008018:	3320      	adds	r3, #32
 800801a:	693a      	ldr	r2, [r7, #16]
 800801c:	4611      	mov	r1, r2
 800801e:	4618      	mov	r0, r3
 8008020:	f7fd fbba 	bl	8005798 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8008024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008026:	3315      	adds	r3, #21
 8008028:	22f8      	movs	r2, #248	@ 0xf8
 800802a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800802c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800802e:	3318      	adds	r3, #24
 8008030:	213f      	movs	r1, #63	@ 0x3f
 8008032:	4618      	mov	r0, r3
 8008034:	f7fd fb95 	bl	8005762 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8008038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800803a:	331a      	adds	r3, #26
 800803c:	21ff      	movs	r1, #255	@ 0xff
 800803e:	4618      	mov	r0, r3
 8008040:	f7fd fb8f 	bl	8005762 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8008044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008046:	331c      	adds	r3, #28
 8008048:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800804a:	4618      	mov	r0, r3
 800804c:	f7fd fba4 	bl	8005798 <st_dword>
		if (fmt == FS_FAT32) {
 8008050:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008054:	2b03      	cmp	r3, #3
 8008056:	d131      	bne.n	80080bc <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8008058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800805a:	f103 0443 	add.w	r4, r3, #67	@ 0x43
 800805e:	f7fd f865 	bl	800512c <get_fattime>
 8008062:	4603      	mov	r3, r0
 8008064:	4619      	mov	r1, r3
 8008066:	4620      	mov	r0, r4
 8008068:	f7fd fb96 	bl	8005798 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800806c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800806e:	3324      	adds	r3, #36	@ 0x24
 8008070:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008072:	4618      	mov	r0, r3
 8008074:	f7fd fb90 	bl	8005798 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8008078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800807a:	332c      	adds	r3, #44	@ 0x2c
 800807c:	2102      	movs	r1, #2
 800807e:	4618      	mov	r0, r3
 8008080:	f7fd fb8a 	bl	8005798 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8008084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008086:	3330      	adds	r3, #48	@ 0x30
 8008088:	2101      	movs	r1, #1
 800808a:	4618      	mov	r0, r3
 800808c:	f7fd fb69 	bl	8005762 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8008090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008092:	3332      	adds	r3, #50	@ 0x32
 8008094:	2106      	movs	r1, #6
 8008096:	4618      	mov	r0, r3
 8008098:	f7fd fb63 	bl	8005762 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800809c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800809e:	3340      	adds	r3, #64	@ 0x40
 80080a0:	2280      	movs	r2, #128	@ 0x80
 80080a2:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 80080a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a6:	3342      	adds	r3, #66	@ 0x42
 80080a8:	2229      	movs	r2, #41	@ 0x29
 80080aa:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 80080ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ae:	3347      	adds	r3, #71	@ 0x47
 80080b0:	2213      	movs	r2, #19
 80080b2:	4970      	ldr	r1, [pc, #448]	@ (8008274 <f_mkfs+0x6ec>)
 80080b4:	4618      	mov	r0, r3
 80080b6:	f7fd fb9b 	bl	80057f0 <mem_cpy>
 80080ba:	e020      	b.n	80080fe <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 80080bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080be:	f103 0427 	add.w	r4, r3, #39	@ 0x27
 80080c2:	f7fd f833 	bl	800512c <get_fattime>
 80080c6:	4603      	mov	r3, r0
 80080c8:	4619      	mov	r1, r3
 80080ca:	4620      	mov	r0, r4
 80080cc:	f7fd fb64 	bl	8005798 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 80080d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d2:	3316      	adds	r3, #22
 80080d4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80080d6:	b292      	uxth	r2, r2
 80080d8:	4611      	mov	r1, r2
 80080da:	4618      	mov	r0, r3
 80080dc:	f7fd fb41 	bl	8005762 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 80080e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e2:	3324      	adds	r3, #36	@ 0x24
 80080e4:	2280      	movs	r2, #128	@ 0x80
 80080e6:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 80080e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ea:	3326      	adds	r3, #38	@ 0x26
 80080ec:	2229      	movs	r2, #41	@ 0x29
 80080ee:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 80080f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f2:	332b      	adds	r3, #43	@ 0x2b
 80080f4:	2213      	movs	r2, #19
 80080f6:	4960      	ldr	r1, [pc, #384]	@ (8008278 <f_mkfs+0x6f0>)
 80080f8:	4618      	mov	r0, r3
 80080fa:	f7fd fb79 	bl	80057f0 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 80080fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008100:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008104:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8008108:	4618      	mov	r0, r3
 800810a:	f7fd fb2a 	bl	8005762 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800810e:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8008112:	2301      	movs	r3, #1
 8008114:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008116:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008118:	f7fd faaa 	bl	8005670 <disk_write>
 800811c:	4603      	mov	r3, r0
 800811e:	2b00      	cmp	r3, #0
 8008120:	d001      	beq.n	8008126 <f_mkfs+0x59e>
 8008122:	2301      	movs	r3, #1
 8008124:	e156      	b.n	80083d4 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8008126:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800812a:	2b03      	cmp	r3, #3
 800812c:	d140      	bne.n	80081b0 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800812e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008130:	1d9a      	adds	r2, r3, #6
 8008132:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8008136:	2301      	movs	r3, #1
 8008138:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800813a:	f7fd fa99 	bl	8005670 <disk_write>
			mem_set(buf, 0, ss);
 800813e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008140:	461a      	mov	r2, r3
 8008142:	2100      	movs	r1, #0
 8008144:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008146:	f7fd fb74 	bl	8005832 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800814a:	494c      	ldr	r1, [pc, #304]	@ (800827c <f_mkfs+0x6f4>)
 800814c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800814e:	f7fd fb23 	bl	8005798 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8008152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008154:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008158:	4949      	ldr	r1, [pc, #292]	@ (8008280 <f_mkfs+0x6f8>)
 800815a:	4618      	mov	r0, r3
 800815c:	f7fd fb1c 	bl	8005798 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8008160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008162:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8008166:	6a3b      	ldr	r3, [r7, #32]
 8008168:	3b01      	subs	r3, #1
 800816a:	4619      	mov	r1, r3
 800816c:	4610      	mov	r0, r2
 800816e:	f7fd fb13 	bl	8005798 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8008172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008174:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8008178:	2102      	movs	r1, #2
 800817a:	4618      	mov	r0, r3
 800817c:	f7fd fb0c 	bl	8005798 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8008180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008182:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008186:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800818a:	4618      	mov	r0, r3
 800818c:	f7fd fae9 	bl	8005762 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8008190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008192:	1dda      	adds	r2, r3, #7
 8008194:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8008198:	2301      	movs	r3, #1
 800819a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800819c:	f7fd fa68 	bl	8005670 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 80081a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a2:	1c5a      	adds	r2, r3, #1
 80081a4:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 80081a8:	2301      	movs	r3, #1
 80081aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80081ac:	f7fd fa60 	bl	8005670 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 80081b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80081b2:	2100      	movs	r1, #0
 80081b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80081b6:	f7fd fb3c 	bl	8005832 <mem_set>
		sect = b_fat;		/* FAT start sector */
 80081ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80081bc:	667b      	str	r3, [r7, #100]	@ 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 80081be:	2300      	movs	r3, #0
 80081c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80081c2:	e04b      	b.n	800825c <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 80081c4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80081c8:	2b03      	cmp	r3, #3
 80081ca:	d113      	bne.n	80081f4 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 80081cc:	f06f 0107 	mvn.w	r1, #7
 80081d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80081d2:	f7fd fae1 	bl	8005798 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 80081d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d8:	3304      	adds	r3, #4
 80081da:	f04f 31ff 	mov.w	r1, #4294967295
 80081de:	4618      	mov	r0, r3
 80081e0:	f7fd fada 	bl	8005798 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 80081e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081e6:	3308      	adds	r3, #8
 80081e8:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7fd fad3 	bl	8005798 <st_dword>
 80081f2:	e00b      	b.n	800820c <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 80081f4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d101      	bne.n	8008200 <f_mkfs+0x678>
 80081fc:	4b21      	ldr	r3, [pc, #132]	@ (8008284 <f_mkfs+0x6fc>)
 80081fe:	e001      	b.n	8008204 <f_mkfs+0x67c>
 8008200:	f06f 0307 	mvn.w	r3, #7
 8008204:	4619      	mov	r1, r3
 8008206:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008208:	f7fd fac6 	bl	8005798 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800820c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800820e:	663b      	str	r3, [r7, #96]	@ 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8008210:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008214:	4293      	cmp	r3, r2
 8008216:	bf28      	it	cs
 8008218:	4613      	movcs	r3, r2
 800821a:	65fb      	str	r3, [r7, #92]	@ 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800821c:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8008220:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008222:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008224:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008226:	f7fd fa23 	bl	8005670 <disk_write>
 800822a:	4603      	mov	r3, r0
 800822c:	2b00      	cmp	r3, #0
 800822e:	d001      	beq.n	8008234 <f_mkfs+0x6ac>
 8008230:	2301      	movs	r3, #1
 8008232:	e0cf      	b.n	80083d4 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 8008234:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008236:	461a      	mov	r2, r3
 8008238:	2100      	movs	r1, #0
 800823a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800823c:	f7fd faf9 	bl	8005832 <mem_set>
				sect += n; nsect -= n;
 8008240:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008242:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008244:	4413      	add	r3, r2
 8008246:	667b      	str	r3, [r7, #100]	@ 0x64
 8008248:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800824a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800824c:	1ad3      	subs	r3, r2, r3
 800824e:	663b      	str	r3, [r7, #96]	@ 0x60
			} while (nsect);
 8008250:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008252:	2b00      	cmp	r3, #0
 8008254:	d1dc      	bne.n	8008210 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8008256:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008258:	3301      	adds	r3, #1
 800825a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800825c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800825e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008260:	429a      	cmp	r2, r3
 8008262:	d3af      	bcc.n	80081c4 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8008264:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008268:	2b03      	cmp	r3, #3
 800826a:	d10d      	bne.n	8008288 <f_mkfs+0x700>
 800826c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800826e:	e00c      	b.n	800828a <f_mkfs+0x702>
 8008270:	08008e5c 	.word	0x08008e5c
 8008274:	08008e68 	.word	0x08008e68
 8008278:	08008e7c 	.word	0x08008e7c
 800827c:	41615252 	.word	0x41615252
 8008280:	61417272 	.word	0x61417272
 8008284:	00fffff8 	.word	0x00fffff8
 8008288:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800828a:	663b      	str	r3, [r7, #96]	@ 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800828c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800828e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008290:	4293      	cmp	r3, r2
 8008292:	bf28      	it	cs
 8008294:	4613      	movcs	r3, r2
 8008296:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8008298:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800829c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800829e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80082a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80082a2:	f7fd f9e5 	bl	8005670 <disk_write>
 80082a6:	4603      	mov	r3, r0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d001      	beq.n	80082b0 <f_mkfs+0x728>
 80082ac:	2301      	movs	r3, #1
 80082ae:	e091      	b.n	80083d4 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 80082b0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80082b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80082b4:	4413      	add	r3, r2
 80082b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80082b8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80082ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80082bc:	1ad3      	subs	r3, r2, r3
 80082be:	663b      	str	r3, [r7, #96]	@ 0x60
		} while (nsect);
 80082c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d1e2      	bne.n	800828c <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 80082c6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80082ca:	2b03      	cmp	r3, #3
 80082cc:	d103      	bne.n	80082d6 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 80082ce:	230c      	movs	r3, #12
 80082d0:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 80082d4:	e010      	b.n	80082f8 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082dc:	d303      	bcc.n	80082e6 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 80082de:	2306      	movs	r3, #6
 80082e0:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 80082e4:	e008      	b.n	80082f8 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 80082e6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80082ea:	2b02      	cmp	r3, #2
 80082ec:	d101      	bne.n	80082f2 <f_mkfs+0x76a>
 80082ee:	2304      	movs	r3, #4
 80082f0:	e000      	b.n	80082f4 <f_mkfs+0x76c>
 80082f2:	2301      	movs	r3, #1
 80082f4:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 80082f8:	7afb      	ldrb	r3, [r7, #11]
 80082fa:	f003 0308 	and.w	r3, r3, #8
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d15b      	bne.n	80083ba <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 8008302:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008304:	461a      	mov	r2, r3
 8008306:	2100      	movs	r1, #0
 8008308:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800830a:	f7fd fa92 	bl	8005832 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800830e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008310:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008314:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8008318:	4618      	mov	r0, r3
 800831a:	f7fd fa22 	bl	8005762 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800831e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008320:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8008324:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8008326:	69bb      	ldr	r3, [r7, #24]
 8008328:	2200      	movs	r2, #0
 800832a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800832c:	69bb      	ldr	r3, [r7, #24]
 800832e:	3301      	adds	r3, #1
 8008330:	2201      	movs	r2, #1
 8008332:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8008334:	69bb      	ldr	r3, [r7, #24]
 8008336:	3302      	adds	r3, #2
 8008338:	2201      	movs	r2, #1
 800833a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800833c:	69bb      	ldr	r3, [r7, #24]
 800833e:	3303      	adds	r3, #3
 8008340:	2200      	movs	r2, #0
 8008342:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8008344:	69bb      	ldr	r3, [r7, #24]
 8008346:	3304      	adds	r3, #4
 8008348:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 800834c:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800834e:	693a      	ldr	r2, [r7, #16]
 8008350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008352:	441a      	add	r2, r3
 8008354:	4b21      	ldr	r3, [pc, #132]	@ (80083dc <f_mkfs+0x854>)
 8008356:	fba3 1302 	umull	r1, r3, r3, r2
 800835a:	1ad2      	subs	r2, r2, r3
 800835c:	0852      	lsrs	r2, r2, #1
 800835e:	4413      	add	r3, r2
 8008360:	0b5b      	lsrs	r3, r3, #13
 8008362:	65fb      	str	r3, [r7, #92]	@ 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 8008364:	69bb      	ldr	r3, [r7, #24]
 8008366:	3305      	adds	r3, #5
 8008368:	22fe      	movs	r2, #254	@ 0xfe
 800836a:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800836c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800836e:	089b      	lsrs	r3, r3, #2
 8008370:	b2da      	uxtb	r2, r3
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	3306      	adds	r3, #6
 8008376:	f042 023f 	orr.w	r2, r2, #63	@ 0x3f
 800837a:	b2d2      	uxtb	r2, r2
 800837c:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800837e:	69bb      	ldr	r3, [r7, #24]
 8008380:	3307      	adds	r3, #7
 8008382:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008384:	b2d2      	uxtb	r2, r2
 8008386:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	3308      	adds	r3, #8
 800838c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800838e:	4618      	mov	r0, r3
 8008390:	f7fd fa02 	bl	8005798 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8008394:	69bb      	ldr	r3, [r7, #24]
 8008396:	330c      	adds	r3, #12
 8008398:	693a      	ldr	r2, [r7, #16]
 800839a:	4611      	mov	r1, r2
 800839c:	4618      	mov	r0, r3
 800839e:	f7fd f9fb 	bl	8005798 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 80083a2:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 80083a6:	2301      	movs	r3, #1
 80083a8:	2200      	movs	r2, #0
 80083aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80083ac:	f7fd f960 	bl	8005670 <disk_write>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d001      	beq.n	80083ba <f_mkfs+0x832>
 80083b6:	2301      	movs	r3, #1
 80083b8:	e00c      	b.n	80083d4 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 80083ba:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80083be:	2200      	movs	r2, #0
 80083c0:	2100      	movs	r1, #0
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7fd f974 	bl	80056b0 <disk_ioctl>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d001      	beq.n	80083d2 <f_mkfs+0x84a>
 80083ce:	2301      	movs	r3, #1
 80083d0:	e000      	b.n	80083d4 <f_mkfs+0x84c>

	return FR_OK;
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3774      	adds	r7, #116	@ 0x74
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd90      	pop	{r4, r7, pc}
 80083dc:	0515565b 	.word	0x0515565b

080083e0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b087      	sub	sp, #28
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	4613      	mov	r3, r2
 80083ec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80083ee:	2301      	movs	r3, #1
 80083f0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80083f2:	2300      	movs	r3, #0
 80083f4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80083f6:	4b1f      	ldr	r3, [pc, #124]	@ (8008474 <FATFS_LinkDriverEx+0x94>)
 80083f8:	7a5b      	ldrb	r3, [r3, #9]
 80083fa:	b2db      	uxtb	r3, r3
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d131      	bne.n	8008464 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008400:	4b1c      	ldr	r3, [pc, #112]	@ (8008474 <FATFS_LinkDriverEx+0x94>)
 8008402:	7a5b      	ldrb	r3, [r3, #9]
 8008404:	b2db      	uxtb	r3, r3
 8008406:	461a      	mov	r2, r3
 8008408:	4b1a      	ldr	r3, [pc, #104]	@ (8008474 <FATFS_LinkDriverEx+0x94>)
 800840a:	2100      	movs	r1, #0
 800840c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800840e:	4b19      	ldr	r3, [pc, #100]	@ (8008474 <FATFS_LinkDriverEx+0x94>)
 8008410:	7a5b      	ldrb	r3, [r3, #9]
 8008412:	b2db      	uxtb	r3, r3
 8008414:	4a17      	ldr	r2, [pc, #92]	@ (8008474 <FATFS_LinkDriverEx+0x94>)
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	4413      	add	r3, r2
 800841a:	68fa      	ldr	r2, [r7, #12]
 800841c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800841e:	4b15      	ldr	r3, [pc, #84]	@ (8008474 <FATFS_LinkDriverEx+0x94>)
 8008420:	7a5b      	ldrb	r3, [r3, #9]
 8008422:	b2db      	uxtb	r3, r3
 8008424:	461a      	mov	r2, r3
 8008426:	4b13      	ldr	r3, [pc, #76]	@ (8008474 <FATFS_LinkDriverEx+0x94>)
 8008428:	4413      	add	r3, r2
 800842a:	79fa      	ldrb	r2, [r7, #7]
 800842c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800842e:	4b11      	ldr	r3, [pc, #68]	@ (8008474 <FATFS_LinkDriverEx+0x94>)
 8008430:	7a5b      	ldrb	r3, [r3, #9]
 8008432:	b2db      	uxtb	r3, r3
 8008434:	1c5a      	adds	r2, r3, #1
 8008436:	b2d1      	uxtb	r1, r2
 8008438:	4a0e      	ldr	r2, [pc, #56]	@ (8008474 <FATFS_LinkDriverEx+0x94>)
 800843a:	7251      	strb	r1, [r2, #9]
 800843c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800843e:	7dbb      	ldrb	r3, [r7, #22]
 8008440:	3330      	adds	r3, #48	@ 0x30
 8008442:	b2da      	uxtb	r2, r3
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	3301      	adds	r3, #1
 800844c:	223a      	movs	r2, #58	@ 0x3a
 800844e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	3302      	adds	r3, #2
 8008454:	222f      	movs	r2, #47	@ 0x2f
 8008456:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	3303      	adds	r3, #3
 800845c:	2200      	movs	r2, #0
 800845e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008460:	2300      	movs	r3, #0
 8008462:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008464:	7dfb      	ldrb	r3, [r7, #23]
}
 8008466:	4618      	mov	r0, r3
 8008468:	371c      	adds	r7, #28
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr
 8008472:	bf00      	nop
 8008474:	20000880 	.word	0x20000880

08008478 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008482:	2200      	movs	r2, #0
 8008484:	6839      	ldr	r1, [r7, #0]
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f7ff ffaa 	bl	80083e0 <FATFS_LinkDriverEx>
 800848c:	4603      	mov	r3, r0
}
 800848e:	4618      	mov	r0, r3
 8008490:	3708      	adds	r7, #8
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
	...

08008498 <siprintf>:
 8008498:	b40e      	push	{r1, r2, r3}
 800849a:	b500      	push	{lr}
 800849c:	b09c      	sub	sp, #112	@ 0x70
 800849e:	ab1d      	add	r3, sp, #116	@ 0x74
 80084a0:	9002      	str	r0, [sp, #8]
 80084a2:	9006      	str	r0, [sp, #24]
 80084a4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80084a8:	4809      	ldr	r0, [pc, #36]	@ (80084d0 <siprintf+0x38>)
 80084aa:	9107      	str	r1, [sp, #28]
 80084ac:	9104      	str	r1, [sp, #16]
 80084ae:	4909      	ldr	r1, [pc, #36]	@ (80084d4 <siprintf+0x3c>)
 80084b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80084b4:	9105      	str	r1, [sp, #20]
 80084b6:	6800      	ldr	r0, [r0, #0]
 80084b8:	9301      	str	r3, [sp, #4]
 80084ba:	a902      	add	r1, sp, #8
 80084bc:	f000 f9aa 	bl	8008814 <_svfiprintf_r>
 80084c0:	9b02      	ldr	r3, [sp, #8]
 80084c2:	2200      	movs	r2, #0
 80084c4:	701a      	strb	r2, [r3, #0]
 80084c6:	b01c      	add	sp, #112	@ 0x70
 80084c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80084cc:	b003      	add	sp, #12
 80084ce:	4770      	bx	lr
 80084d0:	20000028 	.word	0x20000028
 80084d4:	ffff0208 	.word	0xffff0208

080084d8 <memset>:
 80084d8:	4402      	add	r2, r0
 80084da:	4603      	mov	r3, r0
 80084dc:	4293      	cmp	r3, r2
 80084de:	d100      	bne.n	80084e2 <memset+0xa>
 80084e0:	4770      	bx	lr
 80084e2:	f803 1b01 	strb.w	r1, [r3], #1
 80084e6:	e7f9      	b.n	80084dc <memset+0x4>

080084e8 <strstr>:
 80084e8:	780a      	ldrb	r2, [r1, #0]
 80084ea:	b570      	push	{r4, r5, r6, lr}
 80084ec:	b96a      	cbnz	r2, 800850a <strstr+0x22>
 80084ee:	bd70      	pop	{r4, r5, r6, pc}
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d109      	bne.n	8008508 <strstr+0x20>
 80084f4:	460c      	mov	r4, r1
 80084f6:	4605      	mov	r5, r0
 80084f8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d0f6      	beq.n	80084ee <strstr+0x6>
 8008500:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008504:	429e      	cmp	r6, r3
 8008506:	d0f7      	beq.n	80084f8 <strstr+0x10>
 8008508:	3001      	adds	r0, #1
 800850a:	7803      	ldrb	r3, [r0, #0]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d1ef      	bne.n	80084f0 <strstr+0x8>
 8008510:	4618      	mov	r0, r3
 8008512:	e7ec      	b.n	80084ee <strstr+0x6>

08008514 <__errno>:
 8008514:	4b01      	ldr	r3, [pc, #4]	@ (800851c <__errno+0x8>)
 8008516:	6818      	ldr	r0, [r3, #0]
 8008518:	4770      	bx	lr
 800851a:	bf00      	nop
 800851c:	20000028 	.word	0x20000028

08008520 <__libc_init_array>:
 8008520:	b570      	push	{r4, r5, r6, lr}
 8008522:	4d0d      	ldr	r5, [pc, #52]	@ (8008558 <__libc_init_array+0x38>)
 8008524:	4c0d      	ldr	r4, [pc, #52]	@ (800855c <__libc_init_array+0x3c>)
 8008526:	1b64      	subs	r4, r4, r5
 8008528:	10a4      	asrs	r4, r4, #2
 800852a:	2600      	movs	r6, #0
 800852c:	42a6      	cmp	r6, r4
 800852e:	d109      	bne.n	8008544 <__libc_init_array+0x24>
 8008530:	4d0b      	ldr	r5, [pc, #44]	@ (8008560 <__libc_init_array+0x40>)
 8008532:	4c0c      	ldr	r4, [pc, #48]	@ (8008564 <__libc_init_array+0x44>)
 8008534:	f000 fc66 	bl	8008e04 <_init>
 8008538:	1b64      	subs	r4, r4, r5
 800853a:	10a4      	asrs	r4, r4, #2
 800853c:	2600      	movs	r6, #0
 800853e:	42a6      	cmp	r6, r4
 8008540:	d105      	bne.n	800854e <__libc_init_array+0x2e>
 8008542:	bd70      	pop	{r4, r5, r6, pc}
 8008544:	f855 3b04 	ldr.w	r3, [r5], #4
 8008548:	4798      	blx	r3
 800854a:	3601      	adds	r6, #1
 800854c:	e7ee      	b.n	800852c <__libc_init_array+0xc>
 800854e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008552:	4798      	blx	r3
 8008554:	3601      	adds	r6, #1
 8008556:	e7f2      	b.n	800853e <__libc_init_array+0x1e>
 8008558:	08008f98 	.word	0x08008f98
 800855c:	08008f98 	.word	0x08008f98
 8008560:	08008f98 	.word	0x08008f98
 8008564:	08008f9c 	.word	0x08008f9c

08008568 <__retarget_lock_acquire_recursive>:
 8008568:	4770      	bx	lr

0800856a <__retarget_lock_release_recursive>:
 800856a:	4770      	bx	lr

0800856c <_free_r>:
 800856c:	b538      	push	{r3, r4, r5, lr}
 800856e:	4605      	mov	r5, r0
 8008570:	2900      	cmp	r1, #0
 8008572:	d041      	beq.n	80085f8 <_free_r+0x8c>
 8008574:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008578:	1f0c      	subs	r4, r1, #4
 800857a:	2b00      	cmp	r3, #0
 800857c:	bfb8      	it	lt
 800857e:	18e4      	addlt	r4, r4, r3
 8008580:	f000 f8e0 	bl	8008744 <__malloc_lock>
 8008584:	4a1d      	ldr	r2, [pc, #116]	@ (80085fc <_free_r+0x90>)
 8008586:	6813      	ldr	r3, [r2, #0]
 8008588:	b933      	cbnz	r3, 8008598 <_free_r+0x2c>
 800858a:	6063      	str	r3, [r4, #4]
 800858c:	6014      	str	r4, [r2, #0]
 800858e:	4628      	mov	r0, r5
 8008590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008594:	f000 b8dc 	b.w	8008750 <__malloc_unlock>
 8008598:	42a3      	cmp	r3, r4
 800859a:	d908      	bls.n	80085ae <_free_r+0x42>
 800859c:	6820      	ldr	r0, [r4, #0]
 800859e:	1821      	adds	r1, r4, r0
 80085a0:	428b      	cmp	r3, r1
 80085a2:	bf01      	itttt	eq
 80085a4:	6819      	ldreq	r1, [r3, #0]
 80085a6:	685b      	ldreq	r3, [r3, #4]
 80085a8:	1809      	addeq	r1, r1, r0
 80085aa:	6021      	streq	r1, [r4, #0]
 80085ac:	e7ed      	b.n	800858a <_free_r+0x1e>
 80085ae:	461a      	mov	r2, r3
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	b10b      	cbz	r3, 80085b8 <_free_r+0x4c>
 80085b4:	42a3      	cmp	r3, r4
 80085b6:	d9fa      	bls.n	80085ae <_free_r+0x42>
 80085b8:	6811      	ldr	r1, [r2, #0]
 80085ba:	1850      	adds	r0, r2, r1
 80085bc:	42a0      	cmp	r0, r4
 80085be:	d10b      	bne.n	80085d8 <_free_r+0x6c>
 80085c0:	6820      	ldr	r0, [r4, #0]
 80085c2:	4401      	add	r1, r0
 80085c4:	1850      	adds	r0, r2, r1
 80085c6:	4283      	cmp	r3, r0
 80085c8:	6011      	str	r1, [r2, #0]
 80085ca:	d1e0      	bne.n	800858e <_free_r+0x22>
 80085cc:	6818      	ldr	r0, [r3, #0]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	6053      	str	r3, [r2, #4]
 80085d2:	4408      	add	r0, r1
 80085d4:	6010      	str	r0, [r2, #0]
 80085d6:	e7da      	b.n	800858e <_free_r+0x22>
 80085d8:	d902      	bls.n	80085e0 <_free_r+0x74>
 80085da:	230c      	movs	r3, #12
 80085dc:	602b      	str	r3, [r5, #0]
 80085de:	e7d6      	b.n	800858e <_free_r+0x22>
 80085e0:	6820      	ldr	r0, [r4, #0]
 80085e2:	1821      	adds	r1, r4, r0
 80085e4:	428b      	cmp	r3, r1
 80085e6:	bf04      	itt	eq
 80085e8:	6819      	ldreq	r1, [r3, #0]
 80085ea:	685b      	ldreq	r3, [r3, #4]
 80085ec:	6063      	str	r3, [r4, #4]
 80085ee:	bf04      	itt	eq
 80085f0:	1809      	addeq	r1, r1, r0
 80085f2:	6021      	streq	r1, [r4, #0]
 80085f4:	6054      	str	r4, [r2, #4]
 80085f6:	e7ca      	b.n	800858e <_free_r+0x22>
 80085f8:	bd38      	pop	{r3, r4, r5, pc}
 80085fa:	bf00      	nop
 80085fc:	200009d0 	.word	0x200009d0

08008600 <sbrk_aligned>:
 8008600:	b570      	push	{r4, r5, r6, lr}
 8008602:	4e0f      	ldr	r6, [pc, #60]	@ (8008640 <sbrk_aligned+0x40>)
 8008604:	460c      	mov	r4, r1
 8008606:	6831      	ldr	r1, [r6, #0]
 8008608:	4605      	mov	r5, r0
 800860a:	b911      	cbnz	r1, 8008612 <sbrk_aligned+0x12>
 800860c:	f000 fba6 	bl	8008d5c <_sbrk_r>
 8008610:	6030      	str	r0, [r6, #0]
 8008612:	4621      	mov	r1, r4
 8008614:	4628      	mov	r0, r5
 8008616:	f000 fba1 	bl	8008d5c <_sbrk_r>
 800861a:	1c43      	adds	r3, r0, #1
 800861c:	d103      	bne.n	8008626 <sbrk_aligned+0x26>
 800861e:	f04f 34ff 	mov.w	r4, #4294967295
 8008622:	4620      	mov	r0, r4
 8008624:	bd70      	pop	{r4, r5, r6, pc}
 8008626:	1cc4      	adds	r4, r0, #3
 8008628:	f024 0403 	bic.w	r4, r4, #3
 800862c:	42a0      	cmp	r0, r4
 800862e:	d0f8      	beq.n	8008622 <sbrk_aligned+0x22>
 8008630:	1a21      	subs	r1, r4, r0
 8008632:	4628      	mov	r0, r5
 8008634:	f000 fb92 	bl	8008d5c <_sbrk_r>
 8008638:	3001      	adds	r0, #1
 800863a:	d1f2      	bne.n	8008622 <sbrk_aligned+0x22>
 800863c:	e7ef      	b.n	800861e <sbrk_aligned+0x1e>
 800863e:	bf00      	nop
 8008640:	200009cc 	.word	0x200009cc

08008644 <_malloc_r>:
 8008644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008648:	1ccd      	adds	r5, r1, #3
 800864a:	f025 0503 	bic.w	r5, r5, #3
 800864e:	3508      	adds	r5, #8
 8008650:	2d0c      	cmp	r5, #12
 8008652:	bf38      	it	cc
 8008654:	250c      	movcc	r5, #12
 8008656:	2d00      	cmp	r5, #0
 8008658:	4606      	mov	r6, r0
 800865a:	db01      	blt.n	8008660 <_malloc_r+0x1c>
 800865c:	42a9      	cmp	r1, r5
 800865e:	d904      	bls.n	800866a <_malloc_r+0x26>
 8008660:	230c      	movs	r3, #12
 8008662:	6033      	str	r3, [r6, #0]
 8008664:	2000      	movs	r0, #0
 8008666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800866a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008740 <_malloc_r+0xfc>
 800866e:	f000 f869 	bl	8008744 <__malloc_lock>
 8008672:	f8d8 3000 	ldr.w	r3, [r8]
 8008676:	461c      	mov	r4, r3
 8008678:	bb44      	cbnz	r4, 80086cc <_malloc_r+0x88>
 800867a:	4629      	mov	r1, r5
 800867c:	4630      	mov	r0, r6
 800867e:	f7ff ffbf 	bl	8008600 <sbrk_aligned>
 8008682:	1c43      	adds	r3, r0, #1
 8008684:	4604      	mov	r4, r0
 8008686:	d158      	bne.n	800873a <_malloc_r+0xf6>
 8008688:	f8d8 4000 	ldr.w	r4, [r8]
 800868c:	4627      	mov	r7, r4
 800868e:	2f00      	cmp	r7, #0
 8008690:	d143      	bne.n	800871a <_malloc_r+0xd6>
 8008692:	2c00      	cmp	r4, #0
 8008694:	d04b      	beq.n	800872e <_malloc_r+0xea>
 8008696:	6823      	ldr	r3, [r4, #0]
 8008698:	4639      	mov	r1, r7
 800869a:	4630      	mov	r0, r6
 800869c:	eb04 0903 	add.w	r9, r4, r3
 80086a0:	f000 fb5c 	bl	8008d5c <_sbrk_r>
 80086a4:	4581      	cmp	r9, r0
 80086a6:	d142      	bne.n	800872e <_malloc_r+0xea>
 80086a8:	6821      	ldr	r1, [r4, #0]
 80086aa:	1a6d      	subs	r5, r5, r1
 80086ac:	4629      	mov	r1, r5
 80086ae:	4630      	mov	r0, r6
 80086b0:	f7ff ffa6 	bl	8008600 <sbrk_aligned>
 80086b4:	3001      	adds	r0, #1
 80086b6:	d03a      	beq.n	800872e <_malloc_r+0xea>
 80086b8:	6823      	ldr	r3, [r4, #0]
 80086ba:	442b      	add	r3, r5
 80086bc:	6023      	str	r3, [r4, #0]
 80086be:	f8d8 3000 	ldr.w	r3, [r8]
 80086c2:	685a      	ldr	r2, [r3, #4]
 80086c4:	bb62      	cbnz	r2, 8008720 <_malloc_r+0xdc>
 80086c6:	f8c8 7000 	str.w	r7, [r8]
 80086ca:	e00f      	b.n	80086ec <_malloc_r+0xa8>
 80086cc:	6822      	ldr	r2, [r4, #0]
 80086ce:	1b52      	subs	r2, r2, r5
 80086d0:	d420      	bmi.n	8008714 <_malloc_r+0xd0>
 80086d2:	2a0b      	cmp	r2, #11
 80086d4:	d917      	bls.n	8008706 <_malloc_r+0xc2>
 80086d6:	1961      	adds	r1, r4, r5
 80086d8:	42a3      	cmp	r3, r4
 80086da:	6025      	str	r5, [r4, #0]
 80086dc:	bf18      	it	ne
 80086de:	6059      	strne	r1, [r3, #4]
 80086e0:	6863      	ldr	r3, [r4, #4]
 80086e2:	bf08      	it	eq
 80086e4:	f8c8 1000 	streq.w	r1, [r8]
 80086e8:	5162      	str	r2, [r4, r5]
 80086ea:	604b      	str	r3, [r1, #4]
 80086ec:	4630      	mov	r0, r6
 80086ee:	f000 f82f 	bl	8008750 <__malloc_unlock>
 80086f2:	f104 000b 	add.w	r0, r4, #11
 80086f6:	1d23      	adds	r3, r4, #4
 80086f8:	f020 0007 	bic.w	r0, r0, #7
 80086fc:	1ac2      	subs	r2, r0, r3
 80086fe:	bf1c      	itt	ne
 8008700:	1a1b      	subne	r3, r3, r0
 8008702:	50a3      	strne	r3, [r4, r2]
 8008704:	e7af      	b.n	8008666 <_malloc_r+0x22>
 8008706:	6862      	ldr	r2, [r4, #4]
 8008708:	42a3      	cmp	r3, r4
 800870a:	bf0c      	ite	eq
 800870c:	f8c8 2000 	streq.w	r2, [r8]
 8008710:	605a      	strne	r2, [r3, #4]
 8008712:	e7eb      	b.n	80086ec <_malloc_r+0xa8>
 8008714:	4623      	mov	r3, r4
 8008716:	6864      	ldr	r4, [r4, #4]
 8008718:	e7ae      	b.n	8008678 <_malloc_r+0x34>
 800871a:	463c      	mov	r4, r7
 800871c:	687f      	ldr	r7, [r7, #4]
 800871e:	e7b6      	b.n	800868e <_malloc_r+0x4a>
 8008720:	461a      	mov	r2, r3
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	42a3      	cmp	r3, r4
 8008726:	d1fb      	bne.n	8008720 <_malloc_r+0xdc>
 8008728:	2300      	movs	r3, #0
 800872a:	6053      	str	r3, [r2, #4]
 800872c:	e7de      	b.n	80086ec <_malloc_r+0xa8>
 800872e:	230c      	movs	r3, #12
 8008730:	6033      	str	r3, [r6, #0]
 8008732:	4630      	mov	r0, r6
 8008734:	f000 f80c 	bl	8008750 <__malloc_unlock>
 8008738:	e794      	b.n	8008664 <_malloc_r+0x20>
 800873a:	6005      	str	r5, [r0, #0]
 800873c:	e7d6      	b.n	80086ec <_malloc_r+0xa8>
 800873e:	bf00      	nop
 8008740:	200009d0 	.word	0x200009d0

08008744 <__malloc_lock>:
 8008744:	4801      	ldr	r0, [pc, #4]	@ (800874c <__malloc_lock+0x8>)
 8008746:	f7ff bf0f 	b.w	8008568 <__retarget_lock_acquire_recursive>
 800874a:	bf00      	nop
 800874c:	200009c8 	.word	0x200009c8

08008750 <__malloc_unlock>:
 8008750:	4801      	ldr	r0, [pc, #4]	@ (8008758 <__malloc_unlock+0x8>)
 8008752:	f7ff bf0a 	b.w	800856a <__retarget_lock_release_recursive>
 8008756:	bf00      	nop
 8008758:	200009c8 	.word	0x200009c8

0800875c <__ssputs_r>:
 800875c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008760:	688e      	ldr	r6, [r1, #8]
 8008762:	461f      	mov	r7, r3
 8008764:	42be      	cmp	r6, r7
 8008766:	680b      	ldr	r3, [r1, #0]
 8008768:	4682      	mov	sl, r0
 800876a:	460c      	mov	r4, r1
 800876c:	4690      	mov	r8, r2
 800876e:	d82d      	bhi.n	80087cc <__ssputs_r+0x70>
 8008770:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008774:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008778:	d026      	beq.n	80087c8 <__ssputs_r+0x6c>
 800877a:	6965      	ldr	r5, [r4, #20]
 800877c:	6909      	ldr	r1, [r1, #16]
 800877e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008782:	eba3 0901 	sub.w	r9, r3, r1
 8008786:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800878a:	1c7b      	adds	r3, r7, #1
 800878c:	444b      	add	r3, r9
 800878e:	106d      	asrs	r5, r5, #1
 8008790:	429d      	cmp	r5, r3
 8008792:	bf38      	it	cc
 8008794:	461d      	movcc	r5, r3
 8008796:	0553      	lsls	r3, r2, #21
 8008798:	d527      	bpl.n	80087ea <__ssputs_r+0x8e>
 800879a:	4629      	mov	r1, r5
 800879c:	f7ff ff52 	bl	8008644 <_malloc_r>
 80087a0:	4606      	mov	r6, r0
 80087a2:	b360      	cbz	r0, 80087fe <__ssputs_r+0xa2>
 80087a4:	6921      	ldr	r1, [r4, #16]
 80087a6:	464a      	mov	r2, r9
 80087a8:	f000 fae8 	bl	8008d7c <memcpy>
 80087ac:	89a3      	ldrh	r3, [r4, #12]
 80087ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80087b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087b6:	81a3      	strh	r3, [r4, #12]
 80087b8:	6126      	str	r6, [r4, #16]
 80087ba:	6165      	str	r5, [r4, #20]
 80087bc:	444e      	add	r6, r9
 80087be:	eba5 0509 	sub.w	r5, r5, r9
 80087c2:	6026      	str	r6, [r4, #0]
 80087c4:	60a5      	str	r5, [r4, #8]
 80087c6:	463e      	mov	r6, r7
 80087c8:	42be      	cmp	r6, r7
 80087ca:	d900      	bls.n	80087ce <__ssputs_r+0x72>
 80087cc:	463e      	mov	r6, r7
 80087ce:	6820      	ldr	r0, [r4, #0]
 80087d0:	4632      	mov	r2, r6
 80087d2:	4641      	mov	r1, r8
 80087d4:	f000 faa8 	bl	8008d28 <memmove>
 80087d8:	68a3      	ldr	r3, [r4, #8]
 80087da:	1b9b      	subs	r3, r3, r6
 80087dc:	60a3      	str	r3, [r4, #8]
 80087de:	6823      	ldr	r3, [r4, #0]
 80087e0:	4433      	add	r3, r6
 80087e2:	6023      	str	r3, [r4, #0]
 80087e4:	2000      	movs	r0, #0
 80087e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087ea:	462a      	mov	r2, r5
 80087ec:	f000 fad4 	bl	8008d98 <_realloc_r>
 80087f0:	4606      	mov	r6, r0
 80087f2:	2800      	cmp	r0, #0
 80087f4:	d1e0      	bne.n	80087b8 <__ssputs_r+0x5c>
 80087f6:	6921      	ldr	r1, [r4, #16]
 80087f8:	4650      	mov	r0, sl
 80087fa:	f7ff feb7 	bl	800856c <_free_r>
 80087fe:	230c      	movs	r3, #12
 8008800:	f8ca 3000 	str.w	r3, [sl]
 8008804:	89a3      	ldrh	r3, [r4, #12]
 8008806:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800880a:	81a3      	strh	r3, [r4, #12]
 800880c:	f04f 30ff 	mov.w	r0, #4294967295
 8008810:	e7e9      	b.n	80087e6 <__ssputs_r+0x8a>
	...

08008814 <_svfiprintf_r>:
 8008814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008818:	4698      	mov	r8, r3
 800881a:	898b      	ldrh	r3, [r1, #12]
 800881c:	061b      	lsls	r3, r3, #24
 800881e:	b09d      	sub	sp, #116	@ 0x74
 8008820:	4607      	mov	r7, r0
 8008822:	460d      	mov	r5, r1
 8008824:	4614      	mov	r4, r2
 8008826:	d510      	bpl.n	800884a <_svfiprintf_r+0x36>
 8008828:	690b      	ldr	r3, [r1, #16]
 800882a:	b973      	cbnz	r3, 800884a <_svfiprintf_r+0x36>
 800882c:	2140      	movs	r1, #64	@ 0x40
 800882e:	f7ff ff09 	bl	8008644 <_malloc_r>
 8008832:	6028      	str	r0, [r5, #0]
 8008834:	6128      	str	r0, [r5, #16]
 8008836:	b930      	cbnz	r0, 8008846 <_svfiprintf_r+0x32>
 8008838:	230c      	movs	r3, #12
 800883a:	603b      	str	r3, [r7, #0]
 800883c:	f04f 30ff 	mov.w	r0, #4294967295
 8008840:	b01d      	add	sp, #116	@ 0x74
 8008842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008846:	2340      	movs	r3, #64	@ 0x40
 8008848:	616b      	str	r3, [r5, #20]
 800884a:	2300      	movs	r3, #0
 800884c:	9309      	str	r3, [sp, #36]	@ 0x24
 800884e:	2320      	movs	r3, #32
 8008850:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008854:	f8cd 800c 	str.w	r8, [sp, #12]
 8008858:	2330      	movs	r3, #48	@ 0x30
 800885a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80089f8 <_svfiprintf_r+0x1e4>
 800885e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008862:	f04f 0901 	mov.w	r9, #1
 8008866:	4623      	mov	r3, r4
 8008868:	469a      	mov	sl, r3
 800886a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800886e:	b10a      	cbz	r2, 8008874 <_svfiprintf_r+0x60>
 8008870:	2a25      	cmp	r2, #37	@ 0x25
 8008872:	d1f9      	bne.n	8008868 <_svfiprintf_r+0x54>
 8008874:	ebba 0b04 	subs.w	fp, sl, r4
 8008878:	d00b      	beq.n	8008892 <_svfiprintf_r+0x7e>
 800887a:	465b      	mov	r3, fp
 800887c:	4622      	mov	r2, r4
 800887e:	4629      	mov	r1, r5
 8008880:	4638      	mov	r0, r7
 8008882:	f7ff ff6b 	bl	800875c <__ssputs_r>
 8008886:	3001      	adds	r0, #1
 8008888:	f000 80a7 	beq.w	80089da <_svfiprintf_r+0x1c6>
 800888c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800888e:	445a      	add	r2, fp
 8008890:	9209      	str	r2, [sp, #36]	@ 0x24
 8008892:	f89a 3000 	ldrb.w	r3, [sl]
 8008896:	2b00      	cmp	r3, #0
 8008898:	f000 809f 	beq.w	80089da <_svfiprintf_r+0x1c6>
 800889c:	2300      	movs	r3, #0
 800889e:	f04f 32ff 	mov.w	r2, #4294967295
 80088a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088a6:	f10a 0a01 	add.w	sl, sl, #1
 80088aa:	9304      	str	r3, [sp, #16]
 80088ac:	9307      	str	r3, [sp, #28]
 80088ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80088b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80088b4:	4654      	mov	r4, sl
 80088b6:	2205      	movs	r2, #5
 80088b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088bc:	484e      	ldr	r0, [pc, #312]	@ (80089f8 <_svfiprintf_r+0x1e4>)
 80088be:	f7f7 fcaf 	bl	8000220 <memchr>
 80088c2:	9a04      	ldr	r2, [sp, #16]
 80088c4:	b9d8      	cbnz	r0, 80088fe <_svfiprintf_r+0xea>
 80088c6:	06d0      	lsls	r0, r2, #27
 80088c8:	bf44      	itt	mi
 80088ca:	2320      	movmi	r3, #32
 80088cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088d0:	0711      	lsls	r1, r2, #28
 80088d2:	bf44      	itt	mi
 80088d4:	232b      	movmi	r3, #43	@ 0x2b
 80088d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088da:	f89a 3000 	ldrb.w	r3, [sl]
 80088de:	2b2a      	cmp	r3, #42	@ 0x2a
 80088e0:	d015      	beq.n	800890e <_svfiprintf_r+0xfa>
 80088e2:	9a07      	ldr	r2, [sp, #28]
 80088e4:	4654      	mov	r4, sl
 80088e6:	2000      	movs	r0, #0
 80088e8:	f04f 0c0a 	mov.w	ip, #10
 80088ec:	4621      	mov	r1, r4
 80088ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088f2:	3b30      	subs	r3, #48	@ 0x30
 80088f4:	2b09      	cmp	r3, #9
 80088f6:	d94b      	bls.n	8008990 <_svfiprintf_r+0x17c>
 80088f8:	b1b0      	cbz	r0, 8008928 <_svfiprintf_r+0x114>
 80088fa:	9207      	str	r2, [sp, #28]
 80088fc:	e014      	b.n	8008928 <_svfiprintf_r+0x114>
 80088fe:	eba0 0308 	sub.w	r3, r0, r8
 8008902:	fa09 f303 	lsl.w	r3, r9, r3
 8008906:	4313      	orrs	r3, r2
 8008908:	9304      	str	r3, [sp, #16]
 800890a:	46a2      	mov	sl, r4
 800890c:	e7d2      	b.n	80088b4 <_svfiprintf_r+0xa0>
 800890e:	9b03      	ldr	r3, [sp, #12]
 8008910:	1d19      	adds	r1, r3, #4
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	9103      	str	r1, [sp, #12]
 8008916:	2b00      	cmp	r3, #0
 8008918:	bfbb      	ittet	lt
 800891a:	425b      	neglt	r3, r3
 800891c:	f042 0202 	orrlt.w	r2, r2, #2
 8008920:	9307      	strge	r3, [sp, #28]
 8008922:	9307      	strlt	r3, [sp, #28]
 8008924:	bfb8      	it	lt
 8008926:	9204      	strlt	r2, [sp, #16]
 8008928:	7823      	ldrb	r3, [r4, #0]
 800892a:	2b2e      	cmp	r3, #46	@ 0x2e
 800892c:	d10a      	bne.n	8008944 <_svfiprintf_r+0x130>
 800892e:	7863      	ldrb	r3, [r4, #1]
 8008930:	2b2a      	cmp	r3, #42	@ 0x2a
 8008932:	d132      	bne.n	800899a <_svfiprintf_r+0x186>
 8008934:	9b03      	ldr	r3, [sp, #12]
 8008936:	1d1a      	adds	r2, r3, #4
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	9203      	str	r2, [sp, #12]
 800893c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008940:	3402      	adds	r4, #2
 8008942:	9305      	str	r3, [sp, #20]
 8008944:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008a08 <_svfiprintf_r+0x1f4>
 8008948:	7821      	ldrb	r1, [r4, #0]
 800894a:	2203      	movs	r2, #3
 800894c:	4650      	mov	r0, sl
 800894e:	f7f7 fc67 	bl	8000220 <memchr>
 8008952:	b138      	cbz	r0, 8008964 <_svfiprintf_r+0x150>
 8008954:	9b04      	ldr	r3, [sp, #16]
 8008956:	eba0 000a 	sub.w	r0, r0, sl
 800895a:	2240      	movs	r2, #64	@ 0x40
 800895c:	4082      	lsls	r2, r0
 800895e:	4313      	orrs	r3, r2
 8008960:	3401      	adds	r4, #1
 8008962:	9304      	str	r3, [sp, #16]
 8008964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008968:	4824      	ldr	r0, [pc, #144]	@ (80089fc <_svfiprintf_r+0x1e8>)
 800896a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800896e:	2206      	movs	r2, #6
 8008970:	f7f7 fc56 	bl	8000220 <memchr>
 8008974:	2800      	cmp	r0, #0
 8008976:	d036      	beq.n	80089e6 <_svfiprintf_r+0x1d2>
 8008978:	4b21      	ldr	r3, [pc, #132]	@ (8008a00 <_svfiprintf_r+0x1ec>)
 800897a:	bb1b      	cbnz	r3, 80089c4 <_svfiprintf_r+0x1b0>
 800897c:	9b03      	ldr	r3, [sp, #12]
 800897e:	3307      	adds	r3, #7
 8008980:	f023 0307 	bic.w	r3, r3, #7
 8008984:	3308      	adds	r3, #8
 8008986:	9303      	str	r3, [sp, #12]
 8008988:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800898a:	4433      	add	r3, r6
 800898c:	9309      	str	r3, [sp, #36]	@ 0x24
 800898e:	e76a      	b.n	8008866 <_svfiprintf_r+0x52>
 8008990:	fb0c 3202 	mla	r2, ip, r2, r3
 8008994:	460c      	mov	r4, r1
 8008996:	2001      	movs	r0, #1
 8008998:	e7a8      	b.n	80088ec <_svfiprintf_r+0xd8>
 800899a:	2300      	movs	r3, #0
 800899c:	3401      	adds	r4, #1
 800899e:	9305      	str	r3, [sp, #20]
 80089a0:	4619      	mov	r1, r3
 80089a2:	f04f 0c0a 	mov.w	ip, #10
 80089a6:	4620      	mov	r0, r4
 80089a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089ac:	3a30      	subs	r2, #48	@ 0x30
 80089ae:	2a09      	cmp	r2, #9
 80089b0:	d903      	bls.n	80089ba <_svfiprintf_r+0x1a6>
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d0c6      	beq.n	8008944 <_svfiprintf_r+0x130>
 80089b6:	9105      	str	r1, [sp, #20]
 80089b8:	e7c4      	b.n	8008944 <_svfiprintf_r+0x130>
 80089ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80089be:	4604      	mov	r4, r0
 80089c0:	2301      	movs	r3, #1
 80089c2:	e7f0      	b.n	80089a6 <_svfiprintf_r+0x192>
 80089c4:	ab03      	add	r3, sp, #12
 80089c6:	9300      	str	r3, [sp, #0]
 80089c8:	462a      	mov	r2, r5
 80089ca:	4b0e      	ldr	r3, [pc, #56]	@ (8008a04 <_svfiprintf_r+0x1f0>)
 80089cc:	a904      	add	r1, sp, #16
 80089ce:	4638      	mov	r0, r7
 80089d0:	f3af 8000 	nop.w
 80089d4:	1c42      	adds	r2, r0, #1
 80089d6:	4606      	mov	r6, r0
 80089d8:	d1d6      	bne.n	8008988 <_svfiprintf_r+0x174>
 80089da:	89ab      	ldrh	r3, [r5, #12]
 80089dc:	065b      	lsls	r3, r3, #25
 80089de:	f53f af2d 	bmi.w	800883c <_svfiprintf_r+0x28>
 80089e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80089e4:	e72c      	b.n	8008840 <_svfiprintf_r+0x2c>
 80089e6:	ab03      	add	r3, sp, #12
 80089e8:	9300      	str	r3, [sp, #0]
 80089ea:	462a      	mov	r2, r5
 80089ec:	4b05      	ldr	r3, [pc, #20]	@ (8008a04 <_svfiprintf_r+0x1f0>)
 80089ee:	a904      	add	r1, sp, #16
 80089f0:	4638      	mov	r0, r7
 80089f2:	f000 f879 	bl	8008ae8 <_printf_i>
 80089f6:	e7ed      	b.n	80089d4 <_svfiprintf_r+0x1c0>
 80089f8:	08008f5a 	.word	0x08008f5a
 80089fc:	08008f64 	.word	0x08008f64
 8008a00:	00000000 	.word	0x00000000
 8008a04:	0800875d 	.word	0x0800875d
 8008a08:	08008f60 	.word	0x08008f60

08008a0c <_printf_common>:
 8008a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a10:	4616      	mov	r6, r2
 8008a12:	4698      	mov	r8, r3
 8008a14:	688a      	ldr	r2, [r1, #8]
 8008a16:	690b      	ldr	r3, [r1, #16]
 8008a18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	bfb8      	it	lt
 8008a20:	4613      	movlt	r3, r2
 8008a22:	6033      	str	r3, [r6, #0]
 8008a24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008a28:	4607      	mov	r7, r0
 8008a2a:	460c      	mov	r4, r1
 8008a2c:	b10a      	cbz	r2, 8008a32 <_printf_common+0x26>
 8008a2e:	3301      	adds	r3, #1
 8008a30:	6033      	str	r3, [r6, #0]
 8008a32:	6823      	ldr	r3, [r4, #0]
 8008a34:	0699      	lsls	r1, r3, #26
 8008a36:	bf42      	ittt	mi
 8008a38:	6833      	ldrmi	r3, [r6, #0]
 8008a3a:	3302      	addmi	r3, #2
 8008a3c:	6033      	strmi	r3, [r6, #0]
 8008a3e:	6825      	ldr	r5, [r4, #0]
 8008a40:	f015 0506 	ands.w	r5, r5, #6
 8008a44:	d106      	bne.n	8008a54 <_printf_common+0x48>
 8008a46:	f104 0a19 	add.w	sl, r4, #25
 8008a4a:	68e3      	ldr	r3, [r4, #12]
 8008a4c:	6832      	ldr	r2, [r6, #0]
 8008a4e:	1a9b      	subs	r3, r3, r2
 8008a50:	42ab      	cmp	r3, r5
 8008a52:	dc26      	bgt.n	8008aa2 <_printf_common+0x96>
 8008a54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008a58:	6822      	ldr	r2, [r4, #0]
 8008a5a:	3b00      	subs	r3, #0
 8008a5c:	bf18      	it	ne
 8008a5e:	2301      	movne	r3, #1
 8008a60:	0692      	lsls	r2, r2, #26
 8008a62:	d42b      	bmi.n	8008abc <_printf_common+0xb0>
 8008a64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008a68:	4641      	mov	r1, r8
 8008a6a:	4638      	mov	r0, r7
 8008a6c:	47c8      	blx	r9
 8008a6e:	3001      	adds	r0, #1
 8008a70:	d01e      	beq.n	8008ab0 <_printf_common+0xa4>
 8008a72:	6823      	ldr	r3, [r4, #0]
 8008a74:	6922      	ldr	r2, [r4, #16]
 8008a76:	f003 0306 	and.w	r3, r3, #6
 8008a7a:	2b04      	cmp	r3, #4
 8008a7c:	bf02      	ittt	eq
 8008a7e:	68e5      	ldreq	r5, [r4, #12]
 8008a80:	6833      	ldreq	r3, [r6, #0]
 8008a82:	1aed      	subeq	r5, r5, r3
 8008a84:	68a3      	ldr	r3, [r4, #8]
 8008a86:	bf0c      	ite	eq
 8008a88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a8c:	2500      	movne	r5, #0
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	bfc4      	itt	gt
 8008a92:	1a9b      	subgt	r3, r3, r2
 8008a94:	18ed      	addgt	r5, r5, r3
 8008a96:	2600      	movs	r6, #0
 8008a98:	341a      	adds	r4, #26
 8008a9a:	42b5      	cmp	r5, r6
 8008a9c:	d11a      	bne.n	8008ad4 <_printf_common+0xc8>
 8008a9e:	2000      	movs	r0, #0
 8008aa0:	e008      	b.n	8008ab4 <_printf_common+0xa8>
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	4652      	mov	r2, sl
 8008aa6:	4641      	mov	r1, r8
 8008aa8:	4638      	mov	r0, r7
 8008aaa:	47c8      	blx	r9
 8008aac:	3001      	adds	r0, #1
 8008aae:	d103      	bne.n	8008ab8 <_printf_common+0xac>
 8008ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ab8:	3501      	adds	r5, #1
 8008aba:	e7c6      	b.n	8008a4a <_printf_common+0x3e>
 8008abc:	18e1      	adds	r1, r4, r3
 8008abe:	1c5a      	adds	r2, r3, #1
 8008ac0:	2030      	movs	r0, #48	@ 0x30
 8008ac2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008ac6:	4422      	add	r2, r4
 8008ac8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008acc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008ad0:	3302      	adds	r3, #2
 8008ad2:	e7c7      	b.n	8008a64 <_printf_common+0x58>
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	4622      	mov	r2, r4
 8008ad8:	4641      	mov	r1, r8
 8008ada:	4638      	mov	r0, r7
 8008adc:	47c8      	blx	r9
 8008ade:	3001      	adds	r0, #1
 8008ae0:	d0e6      	beq.n	8008ab0 <_printf_common+0xa4>
 8008ae2:	3601      	adds	r6, #1
 8008ae4:	e7d9      	b.n	8008a9a <_printf_common+0x8e>
	...

08008ae8 <_printf_i>:
 8008ae8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008aec:	7e0f      	ldrb	r7, [r1, #24]
 8008aee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008af0:	2f78      	cmp	r7, #120	@ 0x78
 8008af2:	4691      	mov	r9, r2
 8008af4:	4680      	mov	r8, r0
 8008af6:	460c      	mov	r4, r1
 8008af8:	469a      	mov	sl, r3
 8008afa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008afe:	d807      	bhi.n	8008b10 <_printf_i+0x28>
 8008b00:	2f62      	cmp	r7, #98	@ 0x62
 8008b02:	d80a      	bhi.n	8008b1a <_printf_i+0x32>
 8008b04:	2f00      	cmp	r7, #0
 8008b06:	f000 80d2 	beq.w	8008cae <_printf_i+0x1c6>
 8008b0a:	2f58      	cmp	r7, #88	@ 0x58
 8008b0c:	f000 80b9 	beq.w	8008c82 <_printf_i+0x19a>
 8008b10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008b18:	e03a      	b.n	8008b90 <_printf_i+0xa8>
 8008b1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008b1e:	2b15      	cmp	r3, #21
 8008b20:	d8f6      	bhi.n	8008b10 <_printf_i+0x28>
 8008b22:	a101      	add	r1, pc, #4	@ (adr r1, 8008b28 <_printf_i+0x40>)
 8008b24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b28:	08008b81 	.word	0x08008b81
 8008b2c:	08008b95 	.word	0x08008b95
 8008b30:	08008b11 	.word	0x08008b11
 8008b34:	08008b11 	.word	0x08008b11
 8008b38:	08008b11 	.word	0x08008b11
 8008b3c:	08008b11 	.word	0x08008b11
 8008b40:	08008b95 	.word	0x08008b95
 8008b44:	08008b11 	.word	0x08008b11
 8008b48:	08008b11 	.word	0x08008b11
 8008b4c:	08008b11 	.word	0x08008b11
 8008b50:	08008b11 	.word	0x08008b11
 8008b54:	08008c95 	.word	0x08008c95
 8008b58:	08008bbf 	.word	0x08008bbf
 8008b5c:	08008c4f 	.word	0x08008c4f
 8008b60:	08008b11 	.word	0x08008b11
 8008b64:	08008b11 	.word	0x08008b11
 8008b68:	08008cb7 	.word	0x08008cb7
 8008b6c:	08008b11 	.word	0x08008b11
 8008b70:	08008bbf 	.word	0x08008bbf
 8008b74:	08008b11 	.word	0x08008b11
 8008b78:	08008b11 	.word	0x08008b11
 8008b7c:	08008c57 	.word	0x08008c57
 8008b80:	6833      	ldr	r3, [r6, #0]
 8008b82:	1d1a      	adds	r2, r3, #4
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	6032      	str	r2, [r6, #0]
 8008b88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008b90:	2301      	movs	r3, #1
 8008b92:	e09d      	b.n	8008cd0 <_printf_i+0x1e8>
 8008b94:	6833      	ldr	r3, [r6, #0]
 8008b96:	6820      	ldr	r0, [r4, #0]
 8008b98:	1d19      	adds	r1, r3, #4
 8008b9a:	6031      	str	r1, [r6, #0]
 8008b9c:	0606      	lsls	r6, r0, #24
 8008b9e:	d501      	bpl.n	8008ba4 <_printf_i+0xbc>
 8008ba0:	681d      	ldr	r5, [r3, #0]
 8008ba2:	e003      	b.n	8008bac <_printf_i+0xc4>
 8008ba4:	0645      	lsls	r5, r0, #25
 8008ba6:	d5fb      	bpl.n	8008ba0 <_printf_i+0xb8>
 8008ba8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008bac:	2d00      	cmp	r5, #0
 8008bae:	da03      	bge.n	8008bb8 <_printf_i+0xd0>
 8008bb0:	232d      	movs	r3, #45	@ 0x2d
 8008bb2:	426d      	negs	r5, r5
 8008bb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008bb8:	4859      	ldr	r0, [pc, #356]	@ (8008d20 <_printf_i+0x238>)
 8008bba:	230a      	movs	r3, #10
 8008bbc:	e011      	b.n	8008be2 <_printf_i+0xfa>
 8008bbe:	6821      	ldr	r1, [r4, #0]
 8008bc0:	6833      	ldr	r3, [r6, #0]
 8008bc2:	0608      	lsls	r0, r1, #24
 8008bc4:	f853 5b04 	ldr.w	r5, [r3], #4
 8008bc8:	d402      	bmi.n	8008bd0 <_printf_i+0xe8>
 8008bca:	0649      	lsls	r1, r1, #25
 8008bcc:	bf48      	it	mi
 8008bce:	b2ad      	uxthmi	r5, r5
 8008bd0:	2f6f      	cmp	r7, #111	@ 0x6f
 8008bd2:	4853      	ldr	r0, [pc, #332]	@ (8008d20 <_printf_i+0x238>)
 8008bd4:	6033      	str	r3, [r6, #0]
 8008bd6:	bf14      	ite	ne
 8008bd8:	230a      	movne	r3, #10
 8008bda:	2308      	moveq	r3, #8
 8008bdc:	2100      	movs	r1, #0
 8008bde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008be2:	6866      	ldr	r6, [r4, #4]
 8008be4:	60a6      	str	r6, [r4, #8]
 8008be6:	2e00      	cmp	r6, #0
 8008be8:	bfa2      	ittt	ge
 8008bea:	6821      	ldrge	r1, [r4, #0]
 8008bec:	f021 0104 	bicge.w	r1, r1, #4
 8008bf0:	6021      	strge	r1, [r4, #0]
 8008bf2:	b90d      	cbnz	r5, 8008bf8 <_printf_i+0x110>
 8008bf4:	2e00      	cmp	r6, #0
 8008bf6:	d04b      	beq.n	8008c90 <_printf_i+0x1a8>
 8008bf8:	4616      	mov	r6, r2
 8008bfa:	fbb5 f1f3 	udiv	r1, r5, r3
 8008bfe:	fb03 5711 	mls	r7, r3, r1, r5
 8008c02:	5dc7      	ldrb	r7, [r0, r7]
 8008c04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008c08:	462f      	mov	r7, r5
 8008c0a:	42bb      	cmp	r3, r7
 8008c0c:	460d      	mov	r5, r1
 8008c0e:	d9f4      	bls.n	8008bfa <_printf_i+0x112>
 8008c10:	2b08      	cmp	r3, #8
 8008c12:	d10b      	bne.n	8008c2c <_printf_i+0x144>
 8008c14:	6823      	ldr	r3, [r4, #0]
 8008c16:	07df      	lsls	r7, r3, #31
 8008c18:	d508      	bpl.n	8008c2c <_printf_i+0x144>
 8008c1a:	6923      	ldr	r3, [r4, #16]
 8008c1c:	6861      	ldr	r1, [r4, #4]
 8008c1e:	4299      	cmp	r1, r3
 8008c20:	bfde      	ittt	le
 8008c22:	2330      	movle	r3, #48	@ 0x30
 8008c24:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008c28:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008c2c:	1b92      	subs	r2, r2, r6
 8008c2e:	6122      	str	r2, [r4, #16]
 8008c30:	f8cd a000 	str.w	sl, [sp]
 8008c34:	464b      	mov	r3, r9
 8008c36:	aa03      	add	r2, sp, #12
 8008c38:	4621      	mov	r1, r4
 8008c3a:	4640      	mov	r0, r8
 8008c3c:	f7ff fee6 	bl	8008a0c <_printf_common>
 8008c40:	3001      	adds	r0, #1
 8008c42:	d14a      	bne.n	8008cda <_printf_i+0x1f2>
 8008c44:	f04f 30ff 	mov.w	r0, #4294967295
 8008c48:	b004      	add	sp, #16
 8008c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c4e:	6823      	ldr	r3, [r4, #0]
 8008c50:	f043 0320 	orr.w	r3, r3, #32
 8008c54:	6023      	str	r3, [r4, #0]
 8008c56:	4833      	ldr	r0, [pc, #204]	@ (8008d24 <_printf_i+0x23c>)
 8008c58:	2778      	movs	r7, #120	@ 0x78
 8008c5a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008c5e:	6823      	ldr	r3, [r4, #0]
 8008c60:	6831      	ldr	r1, [r6, #0]
 8008c62:	061f      	lsls	r7, r3, #24
 8008c64:	f851 5b04 	ldr.w	r5, [r1], #4
 8008c68:	d402      	bmi.n	8008c70 <_printf_i+0x188>
 8008c6a:	065f      	lsls	r7, r3, #25
 8008c6c:	bf48      	it	mi
 8008c6e:	b2ad      	uxthmi	r5, r5
 8008c70:	6031      	str	r1, [r6, #0]
 8008c72:	07d9      	lsls	r1, r3, #31
 8008c74:	bf44      	itt	mi
 8008c76:	f043 0320 	orrmi.w	r3, r3, #32
 8008c7a:	6023      	strmi	r3, [r4, #0]
 8008c7c:	b11d      	cbz	r5, 8008c86 <_printf_i+0x19e>
 8008c7e:	2310      	movs	r3, #16
 8008c80:	e7ac      	b.n	8008bdc <_printf_i+0xf4>
 8008c82:	4827      	ldr	r0, [pc, #156]	@ (8008d20 <_printf_i+0x238>)
 8008c84:	e7e9      	b.n	8008c5a <_printf_i+0x172>
 8008c86:	6823      	ldr	r3, [r4, #0]
 8008c88:	f023 0320 	bic.w	r3, r3, #32
 8008c8c:	6023      	str	r3, [r4, #0]
 8008c8e:	e7f6      	b.n	8008c7e <_printf_i+0x196>
 8008c90:	4616      	mov	r6, r2
 8008c92:	e7bd      	b.n	8008c10 <_printf_i+0x128>
 8008c94:	6833      	ldr	r3, [r6, #0]
 8008c96:	6825      	ldr	r5, [r4, #0]
 8008c98:	6961      	ldr	r1, [r4, #20]
 8008c9a:	1d18      	adds	r0, r3, #4
 8008c9c:	6030      	str	r0, [r6, #0]
 8008c9e:	062e      	lsls	r6, r5, #24
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	d501      	bpl.n	8008ca8 <_printf_i+0x1c0>
 8008ca4:	6019      	str	r1, [r3, #0]
 8008ca6:	e002      	b.n	8008cae <_printf_i+0x1c6>
 8008ca8:	0668      	lsls	r0, r5, #25
 8008caa:	d5fb      	bpl.n	8008ca4 <_printf_i+0x1bc>
 8008cac:	8019      	strh	r1, [r3, #0]
 8008cae:	2300      	movs	r3, #0
 8008cb0:	6123      	str	r3, [r4, #16]
 8008cb2:	4616      	mov	r6, r2
 8008cb4:	e7bc      	b.n	8008c30 <_printf_i+0x148>
 8008cb6:	6833      	ldr	r3, [r6, #0]
 8008cb8:	1d1a      	adds	r2, r3, #4
 8008cba:	6032      	str	r2, [r6, #0]
 8008cbc:	681e      	ldr	r6, [r3, #0]
 8008cbe:	6862      	ldr	r2, [r4, #4]
 8008cc0:	2100      	movs	r1, #0
 8008cc2:	4630      	mov	r0, r6
 8008cc4:	f7f7 faac 	bl	8000220 <memchr>
 8008cc8:	b108      	cbz	r0, 8008cce <_printf_i+0x1e6>
 8008cca:	1b80      	subs	r0, r0, r6
 8008ccc:	6060      	str	r0, [r4, #4]
 8008cce:	6863      	ldr	r3, [r4, #4]
 8008cd0:	6123      	str	r3, [r4, #16]
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008cd8:	e7aa      	b.n	8008c30 <_printf_i+0x148>
 8008cda:	6923      	ldr	r3, [r4, #16]
 8008cdc:	4632      	mov	r2, r6
 8008cde:	4649      	mov	r1, r9
 8008ce0:	4640      	mov	r0, r8
 8008ce2:	47d0      	blx	sl
 8008ce4:	3001      	adds	r0, #1
 8008ce6:	d0ad      	beq.n	8008c44 <_printf_i+0x15c>
 8008ce8:	6823      	ldr	r3, [r4, #0]
 8008cea:	079b      	lsls	r3, r3, #30
 8008cec:	d413      	bmi.n	8008d16 <_printf_i+0x22e>
 8008cee:	68e0      	ldr	r0, [r4, #12]
 8008cf0:	9b03      	ldr	r3, [sp, #12]
 8008cf2:	4298      	cmp	r0, r3
 8008cf4:	bfb8      	it	lt
 8008cf6:	4618      	movlt	r0, r3
 8008cf8:	e7a6      	b.n	8008c48 <_printf_i+0x160>
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	4632      	mov	r2, r6
 8008cfe:	4649      	mov	r1, r9
 8008d00:	4640      	mov	r0, r8
 8008d02:	47d0      	blx	sl
 8008d04:	3001      	adds	r0, #1
 8008d06:	d09d      	beq.n	8008c44 <_printf_i+0x15c>
 8008d08:	3501      	adds	r5, #1
 8008d0a:	68e3      	ldr	r3, [r4, #12]
 8008d0c:	9903      	ldr	r1, [sp, #12]
 8008d0e:	1a5b      	subs	r3, r3, r1
 8008d10:	42ab      	cmp	r3, r5
 8008d12:	dcf2      	bgt.n	8008cfa <_printf_i+0x212>
 8008d14:	e7eb      	b.n	8008cee <_printf_i+0x206>
 8008d16:	2500      	movs	r5, #0
 8008d18:	f104 0619 	add.w	r6, r4, #25
 8008d1c:	e7f5      	b.n	8008d0a <_printf_i+0x222>
 8008d1e:	bf00      	nop
 8008d20:	08008f6b 	.word	0x08008f6b
 8008d24:	08008f7c 	.word	0x08008f7c

08008d28 <memmove>:
 8008d28:	4288      	cmp	r0, r1
 8008d2a:	b510      	push	{r4, lr}
 8008d2c:	eb01 0402 	add.w	r4, r1, r2
 8008d30:	d902      	bls.n	8008d38 <memmove+0x10>
 8008d32:	4284      	cmp	r4, r0
 8008d34:	4623      	mov	r3, r4
 8008d36:	d807      	bhi.n	8008d48 <memmove+0x20>
 8008d38:	1e43      	subs	r3, r0, #1
 8008d3a:	42a1      	cmp	r1, r4
 8008d3c:	d008      	beq.n	8008d50 <memmove+0x28>
 8008d3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d46:	e7f8      	b.n	8008d3a <memmove+0x12>
 8008d48:	4402      	add	r2, r0
 8008d4a:	4601      	mov	r1, r0
 8008d4c:	428a      	cmp	r2, r1
 8008d4e:	d100      	bne.n	8008d52 <memmove+0x2a>
 8008d50:	bd10      	pop	{r4, pc}
 8008d52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d5a:	e7f7      	b.n	8008d4c <memmove+0x24>

08008d5c <_sbrk_r>:
 8008d5c:	b538      	push	{r3, r4, r5, lr}
 8008d5e:	4d06      	ldr	r5, [pc, #24]	@ (8008d78 <_sbrk_r+0x1c>)
 8008d60:	2300      	movs	r3, #0
 8008d62:	4604      	mov	r4, r0
 8008d64:	4608      	mov	r0, r1
 8008d66:	602b      	str	r3, [r5, #0]
 8008d68:	f7f8 fba6 	bl	80014b8 <_sbrk>
 8008d6c:	1c43      	adds	r3, r0, #1
 8008d6e:	d102      	bne.n	8008d76 <_sbrk_r+0x1a>
 8008d70:	682b      	ldr	r3, [r5, #0]
 8008d72:	b103      	cbz	r3, 8008d76 <_sbrk_r+0x1a>
 8008d74:	6023      	str	r3, [r4, #0]
 8008d76:	bd38      	pop	{r3, r4, r5, pc}
 8008d78:	200009c4 	.word	0x200009c4

08008d7c <memcpy>:
 8008d7c:	440a      	add	r2, r1
 8008d7e:	4291      	cmp	r1, r2
 8008d80:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d84:	d100      	bne.n	8008d88 <memcpy+0xc>
 8008d86:	4770      	bx	lr
 8008d88:	b510      	push	{r4, lr}
 8008d8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d92:	4291      	cmp	r1, r2
 8008d94:	d1f9      	bne.n	8008d8a <memcpy+0xe>
 8008d96:	bd10      	pop	{r4, pc}

08008d98 <_realloc_r>:
 8008d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d9c:	4680      	mov	r8, r0
 8008d9e:	4615      	mov	r5, r2
 8008da0:	460c      	mov	r4, r1
 8008da2:	b921      	cbnz	r1, 8008dae <_realloc_r+0x16>
 8008da4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008da8:	4611      	mov	r1, r2
 8008daa:	f7ff bc4b 	b.w	8008644 <_malloc_r>
 8008dae:	b92a      	cbnz	r2, 8008dbc <_realloc_r+0x24>
 8008db0:	f7ff fbdc 	bl	800856c <_free_r>
 8008db4:	2400      	movs	r4, #0
 8008db6:	4620      	mov	r0, r4
 8008db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dbc:	f000 f81a 	bl	8008df4 <_malloc_usable_size_r>
 8008dc0:	4285      	cmp	r5, r0
 8008dc2:	4606      	mov	r6, r0
 8008dc4:	d802      	bhi.n	8008dcc <_realloc_r+0x34>
 8008dc6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008dca:	d8f4      	bhi.n	8008db6 <_realloc_r+0x1e>
 8008dcc:	4629      	mov	r1, r5
 8008dce:	4640      	mov	r0, r8
 8008dd0:	f7ff fc38 	bl	8008644 <_malloc_r>
 8008dd4:	4607      	mov	r7, r0
 8008dd6:	2800      	cmp	r0, #0
 8008dd8:	d0ec      	beq.n	8008db4 <_realloc_r+0x1c>
 8008dda:	42b5      	cmp	r5, r6
 8008ddc:	462a      	mov	r2, r5
 8008dde:	4621      	mov	r1, r4
 8008de0:	bf28      	it	cs
 8008de2:	4632      	movcs	r2, r6
 8008de4:	f7ff ffca 	bl	8008d7c <memcpy>
 8008de8:	4621      	mov	r1, r4
 8008dea:	4640      	mov	r0, r8
 8008dec:	f7ff fbbe 	bl	800856c <_free_r>
 8008df0:	463c      	mov	r4, r7
 8008df2:	e7e0      	b.n	8008db6 <_realloc_r+0x1e>

08008df4 <_malloc_usable_size_r>:
 8008df4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008df8:	1f18      	subs	r0, r3, #4
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	bfbc      	itt	lt
 8008dfe:	580b      	ldrlt	r3, [r1, r0]
 8008e00:	18c0      	addlt	r0, r0, r3
 8008e02:	4770      	bx	lr

08008e04 <_init>:
 8008e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e06:	bf00      	nop
 8008e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e0a:	bc08      	pop	{r3}
 8008e0c:	469e      	mov	lr, r3
 8008e0e:	4770      	bx	lr

08008e10 <_fini>:
 8008e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e12:	bf00      	nop
 8008e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e16:	bc08      	pop	{r3}
 8008e18:	469e      	mov	lr, r3
 8008e1a:	4770      	bx	lr
