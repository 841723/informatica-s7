
SdImageDisplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009400  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  080095d0  080095d0  0000a5d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009718  08009718  0000b05c  2**0
                  CONTENTS
  4 .ARM          00000008  08009718  08009718  0000a718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009720  08009720  0000b05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009720  08009720  0000a720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009724  08009724  0000a724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08009728  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000644  2000005c  08009784  0000b05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  200006a0  08009784  0000b6a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000130bb  00000000  00000000  0000b08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003451  00000000  00000000  0001e147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  00021598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ca7  00000000  00000000  00022670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029637  00000000  00000000  00023317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017c2a  00000000  00000000  0004c94e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0e24  00000000  00000000  00064578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015539c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004978  00000000  00000000  001553e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00159d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080095b8 	.word	0x080095b8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	080095b8 	.word	0x080095b8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <Display_Image_DMA2D>:
 */

#include <display.h>


HAL_StatusTypeDef Display_Image_DMA2D(uint16_t* src, uint16_t width, uint16_t height) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b094      	sub	sp, #80	@ 0x50
 80005a4:	af02      	add	r7, sp, #8
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	460b      	mov	r3, r1
 80005aa:	807b      	strh	r3, [r7, #2]
 80005ac:	4613      	mov	r3, r2
 80005ae:	803b      	strh	r3, [r7, #0]
    DMA2D_HandleTypeDef hdma2d;

    // Configura DMA2D
    hdma2d.Instance = DMA2D;
 80005b0:	4b14      	ldr	r3, [pc, #80]	@ (8000604 <Display_Image_DMA2D+0x64>)
 80005b2:	60bb      	str	r3, [r7, #8]
    hdma2d.Init.Mode = DMA2D_M2M;
 80005b4:	2300      	movs	r3, #0
 80005b6:	60fb      	str	r3, [r7, #12]
    hdma2d.Init.ColorMode = DMA2D_RGB565;
 80005b8:	2302      	movs	r3, #2
 80005ba:	613b      	str	r3, [r7, #16]
    hdma2d.Init.OutputOffset = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]

    if (HAL_DMA2D_Init(&hdma2d) != HAL_OK) {
 80005c0:	f107 0308 	add.w	r3, r7, #8
 80005c4:	4618      	mov	r0, r3
 80005c6:	f001 ffc1 	bl	800254c <HAL_DMA2D_Init>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <Display_Image_DMA2D+0x34>
        return HAL_ERROR;
 80005d0:	2301      	movs	r3, #1
 80005d2:	e012      	b.n	80005fa <Display_Image_DMA2D+0x5a>
    }

    // Inicia la transferencia de la imagen al framebuffer
    HAL_DMA2D_Start(&hdma2d, (uint32_t)src, FRAME_BUFFER_ADDRESS, width, height);
 80005d4:	6879      	ldr	r1, [r7, #4]
 80005d6:	887a      	ldrh	r2, [r7, #2]
 80005d8:	883b      	ldrh	r3, [r7, #0]
 80005da:	f107 0008 	add.w	r0, r7, #8
 80005de:	9300      	str	r3, [sp, #0]
 80005e0:	4613      	mov	r3, r2
 80005e2:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 80005e6:	f001 fffb 	bl	80025e0 <HAL_DMA2D_Start>

    // Espera hasta que se complete la transferencia
    HAL_DMA2D_PollForTransfer(&hdma2d, HAL_MAX_DELAY);
 80005ea:	f107 0308 	add.w	r3, r7, #8
 80005ee:	f04f 31ff 	mov.w	r1, #4294967295
 80005f2:	4618      	mov	r0, r3
 80005f4:	f002 f81f 	bl	8002636 <HAL_DMA2D_PollForTransfer>

    return HAL_OK;
 80005f8:	2300      	movs	r3, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	3748      	adds	r7, #72	@ 0x48
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	4002b000 	.word	0x4002b000

08000608 <FATFS_Init>:
FRESULT res; /* FatFs function common result code */
uint32_t byteswritten; /* File write/read counts */
uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
uint8_t rtext[_MAX_SS];/* File read buffer */

void FATFS_Init() {
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 800060c:	2200      	movs	r2, #0
 800060e:	4905      	ldr	r1, [pc, #20]	@ (8000624 <FATFS_Init+0x1c>)
 8000610:	4805      	ldr	r0, [pc, #20]	@ (8000628 <FATFS_Init+0x20>)
 8000612:	f007 fe01 	bl	8008218 <f_mount>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <FATFS_Init+0x18>
	{
		Error_Handler();
 800061c:	f000 feb6 	bl	800138c <Error_Handler>
	}
}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	200002e8 	.word	0x200002e8
 8000628:	200002ec 	.word	0x200002ec

0800062c <FATFS_Scan>:
		}
	}
	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
}

void FATFS_Scan(char* path, char filenames[8][64]) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b096      	sub	sp, #88	@ 0x58
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	6039      	str	r1, [r7, #0]
	DIR dir;
	FILINFO fno;
    FRESULT res;
    unsigned int idx = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	657b      	str	r3, [r7, #84]	@ 0x54

    res = f_opendir(&dir, path);  // Open directory
 800063a:	f107 0320 	add.w	r3, r7, #32
 800063e:	6879      	ldr	r1, [r7, #4]
 8000640:	4618      	mov	r0, r3
 8000642:	f008 f9d0 	bl	80089e6 <f_opendir>
 8000646:	4603      	mov	r3, r0
 8000648:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    if (res == FR_OK) {
 800064c:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000650:	2b00      	cmp	r3, #0
 8000652:	d134      	bne.n	80006be <FATFS_Scan+0x92>
        while (1) {
            res = f_readdir(&dir, &fno);  // Read a directory item
 8000654:	f107 0208 	add.w	r2, r7, #8
 8000658:	f107 0320 	add.w	r3, r7, #32
 800065c:	4611      	mov	r1, r2
 800065e:	4618      	mov	r0, r3
 8000660:	f008 fa5a 	bl	8008b18 <f_readdir>
 8000664:	4603      	mov	r3, r0
 8000666:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
            if (res != FR_OK || fno.fname[0] == 0) {
 800066a:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800066e:	2b00      	cmp	r3, #0
 8000670:	d120      	bne.n	80006b4 <FATFS_Scan+0x88>
 8000672:	7c7b      	ldrb	r3, [r7, #17]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d01d      	beq.n	80006b4 <FATFS_Scan+0x88>
                break;  // No more items
            }

            if (fno.fattrib & AM_DIR) {
 8000678:	7c3b      	ldrb	r3, [r7, #16]
 800067a:	f003 0310 	and.w	r3, r3, #16
 800067e:	2b00      	cmp	r3, #0
 8000680:	d1e8      	bne.n	8000654 <FATFS_Scan+0x28>
                // If it's a directory, you can optionally recurse into it
            } else {
                // Check if the file is an image
                if (strstr(fno.fname, "AABUILDING.BMP")) {
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	3309      	adds	r3, #9
 8000688:	490f      	ldr	r1, [pc, #60]	@ (80006c8 <FATFS_Scan+0x9c>)
 800068a:	4618      	mov	r0, r3
 800068c:	f008 fb06 	bl	8008c9c <strstr>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d0de      	beq.n	8000654 <FATFS_Scan+0x28>
                    // Full file path (assuming 'path' is the current directory)
                    sprintf(filenames[idx], "%s", fno.fname);
 8000696:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000698:	019b      	lsls	r3, r3, #6
 800069a:	683a      	ldr	r2, [r7, #0]
 800069c:	18d0      	adds	r0, r2, r3
 800069e:	f107 0308 	add.w	r3, r7, #8
 80006a2:	3309      	adds	r3, #9
 80006a4:	461a      	mov	r2, r3
 80006a6:	4909      	ldr	r1, [pc, #36]	@ (80006cc <FATFS_Scan+0xa0>)
 80006a8:	f008 fad0 	bl	8008c4c <siprintf>
                    idx++;
 80006ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80006ae:	3301      	adds	r3, #1
 80006b0:	657b      	str	r3, [r7, #84]	@ 0x54
            res = f_readdir(&dir, &fno);  // Read a directory item
 80006b2:	e7cf      	b.n	8000654 <FATFS_Scan+0x28>
                    // Read and display the image
                    //  Read_Image_File(buffer);
                }
            }
        }
        f_closedir(&dir);  // Close the directory
 80006b4:	f107 0320 	add.w	r3, r7, #32
 80006b8:	4618      	mov	r0, r3
 80006ba:	f008 fa07 	bl	8008acc <f_closedir>
    }
}
 80006be:	bf00      	nop
 80006c0:	3758      	adds	r7, #88	@ 0x58
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	080095dc 	.word	0x080095dc
 80006cc:	080095ec 	.word	0x080095ec

080006d0 <FATFS_Read_Image_From_SD>:


FRESULT FATFS_Read_Image_From_SD(const char *filename, uint8_t *buffer, uint32_t bufsize) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	f5ad 7d12 	sub.w	sp, sp, #584	@ 0x248
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80006dc:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80006e0:	6018      	str	r0, [r3, #0]
 80006e2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80006e6:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80006ea:	6019      	str	r1, [r3, #0]
 80006ec:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80006f0:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80006f4:	601a      	str	r2, [r3, #0]
	FIL file;
    UINT bytesRead = 0;
 80006f6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80006fa:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
    FRESULT res = f_open(&file, filename, FA_READ);
 8000702:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8000706:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800070a:	f107 0014 	add.w	r0, r7, #20
 800070e:	2201      	movs	r2, #1
 8000710:	6819      	ldr	r1, [r3, #0]
 8000712:	f007 fdc7 	bl	80082a4 <f_open>
 8000716:	4603      	mov	r3, r0
 8000718:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
    if (res != FR_OK) {
 800071c:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 8000720:	2b00      	cmp	r3, #0
 8000722:	d002      	beq.n	800072a <FATFS_Read_Image_From_SD+0x5a>
        return res; // Error al abrir el archivo
 8000724:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 8000728:	e02b      	b.n	8000782 <FATFS_Read_Image_From_SD+0xb2>
    }

    // Leer datos de la imagen en el buffer
    res = f_read(&file, buffer, bufsize, &bytesRead);
 800072a:	f107 0310 	add.w	r3, r7, #16
 800072e:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8000732:	f5a2 7211 	sub.w	r2, r2, #580	@ 0x244
 8000736:	f507 7112 	add.w	r1, r7, #584	@ 0x248
 800073a:	f5a1 7110 	sub.w	r1, r1, #576	@ 0x240
 800073e:	f107 0014 	add.w	r0, r7, #20
 8000742:	6812      	ldr	r2, [r2, #0]
 8000744:	6809      	ldr	r1, [r1, #0]
 8000746:	f007 ff67 	bl	8008618 <f_read>
 800074a:	4603      	mov	r3, r0
 800074c:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
    if (res != FR_OK || bytesRead == 0) {
 8000750:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 8000754:	2b00      	cmp	r3, #0
 8000756:	d106      	bne.n	8000766 <FATFS_Read_Image_From_SD+0x96>
 8000758:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800075c:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d107      	bne.n	8000776 <FATFS_Read_Image_From_SD+0xa6>
        f_close(&file);
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	4618      	mov	r0, r3
 800076c:	f008 f911 	bl	8008992 <f_close>
        return res; // Error de lectura
 8000770:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 8000774:	e005      	b.n	8000782 <FATFS_Read_Image_From_SD+0xb2>
    }

    f_close(&file);
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	4618      	mov	r0, r3
 800077c:	f008 f909 	bl	8008992 <f_close>
    return FR_OK;  // Éxito
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	f507 7712 	add.w	r7, r7, #584	@ 0x248
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	f5ad 3d16 	sub.w	sp, sp, #153600	@ 0x25800
 8000792:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000796:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	char filenames[8][64];

  for (unsigned int i = 0; i<8 ;i++) {
 8000798:	2300      	movs	r3, #0
 800079a:	4a37      	ldr	r2, [pc, #220]	@ (8000878 <main+0xec>)
 800079c:	443a      	add	r2, r7
 800079e:	6013      	str	r3, [r2, #0]
 80007a0:	e026      	b.n	80007f0 <main+0x64>
    for (unsigned int j = 0; j<64 ;j++) {
 80007a2:	2300      	movs	r3, #0
 80007a4:	4a35      	ldr	r2, [pc, #212]	@ (800087c <main+0xf0>)
 80007a6:	443a      	add	r2, r7
 80007a8:	6013      	str	r3, [r2, #0]
 80007aa:	e015      	b.n	80007d8 <main+0x4c>
      filenames[i][j] = 0;
 80007ac:	4b34      	ldr	r3, [pc, #208]	@ (8000880 <main+0xf4>)
 80007ae:	443b      	add	r3, r7
 80007b0:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 80007b4:	4b30      	ldr	r3, [pc, #192]	@ (8000878 <main+0xec>)
 80007b6:	443b      	add	r3, r7
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	019b      	lsls	r3, r3, #6
 80007bc:	441a      	add	r2, r3
 80007be:	4b2f      	ldr	r3, [pc, #188]	@ (800087c <main+0xf0>)
 80007c0:	443b      	add	r3, r7
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4413      	add	r3, r2
 80007c6:	2200      	movs	r2, #0
 80007c8:	701a      	strb	r2, [r3, #0]
    for (unsigned int j = 0; j<64 ;j++) {
 80007ca:	4b2c      	ldr	r3, [pc, #176]	@ (800087c <main+0xf0>)
 80007cc:	443b      	add	r3, r7
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	3301      	adds	r3, #1
 80007d2:	4a2a      	ldr	r2, [pc, #168]	@ (800087c <main+0xf0>)
 80007d4:	443a      	add	r2, r7
 80007d6:	6013      	str	r3, [r2, #0]
 80007d8:	4b28      	ldr	r3, [pc, #160]	@ (800087c <main+0xf0>)
 80007da:	443b      	add	r3, r7
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2b3f      	cmp	r3, #63	@ 0x3f
 80007e0:	d9e4      	bls.n	80007ac <main+0x20>
  for (unsigned int i = 0; i<8 ;i++) {
 80007e2:	4b25      	ldr	r3, [pc, #148]	@ (8000878 <main+0xec>)
 80007e4:	443b      	add	r3, r7
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	3301      	adds	r3, #1
 80007ea:	4a23      	ldr	r2, [pc, #140]	@ (8000878 <main+0xec>)
 80007ec:	443a      	add	r2, r7
 80007ee:	6013      	str	r3, [r2, #0]
 80007f0:	4b21      	ldr	r3, [pc, #132]	@ (8000878 <main+0xec>)
 80007f2:	443b      	add	r3, r7
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	2b07      	cmp	r3, #7
 80007f8:	d9d3      	bls.n	80007a2 <main+0x16>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007fa:	f001 f96e 	bl	8001ada <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007fe:	f000 f845 	bl	800088c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000802:	f000 fa0d 	bl	8000c20 <MX_GPIO_Init>
  MX_DMA_Init();
 8000806:	f000 f997 	bl	8000b38 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 800080a:	f000 f975 	bl	8000af8 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800080e:	f005 fcb7 	bl	8006180 <MX_FATFS_Init>
  MX_DMA2D_Init();
 8000812:	f000 f8a3 	bl	800095c <MX_DMA2D_Init>
  MX_LTDC_Init();
 8000816:	f000 f8bd 	bl	8000994 <MX_LTDC_Init>
  MX_FMC_Init();
 800081a:	f000 f9b3 	bl	8000b84 <MX_FMC_Init>
  /* USER CODE BEGIN 2 */
  FATFS_Init();
 800081e:	f7ff fef3 	bl	8000608 <FATFS_Init>
  FATFS_Scan("", filenames);
 8000822:	f507 3316 	add.w	r3, r7, #153600	@ 0x25800
 8000826:	4619      	mov	r1, r3
 8000828:	4816      	ldr	r0, [pc, #88]	@ (8000884 <main+0xf8>)
 800082a:	f7ff feff 	bl	800062c <FATFS_Scan>

  
  uint8_t image_buffer[IMAGE_SIZE];

  if (FATFS_Read_Image_From_SD(filenames[0], image_buffer, IMAGE_SIZE) == FR_OK) {
 800082e:	4b16      	ldr	r3, [pc, #88]	@ (8000888 <main+0xfc>)
 8000830:	f503 3316 	add.w	r3, r3, #153600	@ 0x25800
 8000834:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8000838:	443b      	add	r3, r7
 800083a:	f507 3016 	add.w	r0, r7, #153600	@ 0x25800
 800083e:	f44f 3216 	mov.w	r2, #153600	@ 0x25800
 8000842:	4619      	mov	r1, r3
 8000844:	f7ff ff44 	bl	80006d0 <FATFS_Read_Image_From_SD>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d111      	bne.n	8000872 <main+0xe6>
    if (Display_Image_DMA2D((uint16_t*)image_buffer, IMAGE_WIDTH, IMAGE_HEIGHT) != HAL_OK) {
 800084e:	4b0e      	ldr	r3, [pc, #56]	@ (8000888 <main+0xfc>)
 8000850:	f503 3316 	add.w	r3, r3, #153600	@ 0x25800
 8000854:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8000858:	443b      	add	r3, r7
 800085a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800085e:	21f0      	movs	r1, #240	@ 0xf0
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff fe9d 	bl	80005a0 <Display_Image_DMA2D>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d002      	beq.n	8000872 <main+0xe6>
      Error_Handler();
 800086c:	f000 fd8e 	bl	800138c <Error_Handler>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000870:	bf00      	nop
 8000872:	bf00      	nop
 8000874:	e7fd      	b.n	8000872 <main+0xe6>
 8000876:	bf00      	nop
 8000878:	00025a04 	.word	0x00025a04
 800087c:	00025a00 	.word	0x00025a00
 8000880:	00025a08 	.word	0x00025a08
 8000884:	080095f0 	.word	0x080095f0
 8000888:	fffda5f8 	.word	0xfffda5f8

0800088c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b094      	sub	sp, #80	@ 0x50
 8000890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000892:	f107 0320 	add.w	r3, r7, #32
 8000896:	2230      	movs	r2, #48	@ 0x30
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f008 f9f6 	bl	8008c8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a0:	f107 030c 	add.w	r3, r7, #12
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b0:	4b28      	ldr	r3, [pc, #160]	@ (8000954 <SystemClock_Config+0xc8>)
 80008b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b4:	4a27      	ldr	r2, [pc, #156]	@ (8000954 <SystemClock_Config+0xc8>)
 80008b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80008bc:	4b25      	ldr	r3, [pc, #148]	@ (8000954 <SystemClock_Config+0xc8>)
 80008be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008c8:	4b23      	ldr	r3, [pc, #140]	@ (8000958 <SystemClock_Config+0xcc>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008d0:	4a21      	ldr	r2, [pc, #132]	@ (8000958 <SystemClock_Config+0xcc>)
 80008d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008d6:	6013      	str	r3, [r2, #0]
 80008d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000958 <SystemClock_Config+0xcc>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008e4:	2302      	movs	r3, #2
 80008e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e8:	2301      	movs	r3, #1
 80008ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ec:	2310      	movs	r3, #16
 80008ee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f0:	2302      	movs	r3, #2
 80008f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008f4:	2300      	movs	r3, #0
 80008f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008f8:	2308      	movs	r3, #8
 80008fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80008fc:	2332      	movs	r3, #50	@ 0x32
 80008fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000900:	2302      	movs	r3, #2
 8000902:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000904:	2302      	movs	r3, #2
 8000906:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000908:	f107 0320 	add.w	r3, r7, #32
 800090c:	4618      	mov	r0, r3
 800090e:	f002 fc9d 	bl	800324c <HAL_RCC_OscConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000918:	f000 fd38 	bl	800138c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091c:	230f      	movs	r3, #15
 800091e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000920:	2302      	movs	r3, #2
 8000922:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000928:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800092c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800092e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000932:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000934:	f107 030c 	add.w	r3, r7, #12
 8000938:	2101      	movs	r1, #1
 800093a:	4618      	mov	r0, r3
 800093c:	f002 ff2a 	bl	8003794 <HAL_RCC_ClockConfig>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000946:	f000 fd21 	bl	800138c <Error_Handler>
  }
}
 800094a:	bf00      	nop
 800094c:	3750      	adds	r7, #80	@ 0x50
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40023800 	.word	0x40023800
 8000958:	40007000 	.word	0x40007000

0800095c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000960:	4b0a      	ldr	r3, [pc, #40]	@ (800098c <MX_DMA2D_Init+0x30>)
 8000962:	4a0b      	ldr	r2, [pc, #44]	@ (8000990 <MX_DMA2D_Init+0x34>)
 8000964:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000966:	4b09      	ldr	r3, [pc, #36]	@ (800098c <MX_DMA2D_Init+0x30>)
 8000968:	2200      	movs	r2, #0
 800096a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 800096c:	4b07      	ldr	r3, [pc, #28]	@ (800098c <MX_DMA2D_Init+0x30>)
 800096e:	2202      	movs	r2, #2
 8000970:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000972:	4b06      	ldr	r3, [pc, #24]	@ (800098c <MX_DMA2D_Init+0x30>)
 8000974:	2200      	movs	r2, #0
 8000976:	60da      	str	r2, [r3, #12]
  // hdma2d.LayerCfg[1].InputOffset = 0;
  // hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
  // hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
  // hdma2d.LayerCfg[1].InputAlpha = 0;
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000978:	4804      	ldr	r0, [pc, #16]	@ (800098c <MX_DMA2D_Init+0x30>)
 800097a:	f001 fde7 	bl	800254c <HAL_DMA2D_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_DMA2D_Init+0x2c>
  {
    Error_Handler();
 8000984:	f000 fd02 	bl	800138c <Error_Handler>
  // }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20000078 	.word	0x20000078
 8000990:	4002b000 	.word	0x4002b000

08000994 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b09a      	sub	sp, #104	@ 0x68
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800099a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800099e:	2234      	movs	r2, #52	@ 0x34
 80009a0:	2100      	movs	r1, #0
 80009a2:	4618      	mov	r0, r3
 80009a4:	f008 f972 	bl	8008c8c <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80009a8:	463b      	mov	r3, r7
 80009aa:	2234      	movs	r2, #52	@ 0x34
 80009ac:	2100      	movs	r1, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f008 f96c 	bl	8008c8c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80009b4:	4b4e      	ldr	r3, [pc, #312]	@ (8000af0 <MX_LTDC_Init+0x15c>)
 80009b6:	4a4f      	ldr	r2, [pc, #316]	@ (8000af4 <MX_LTDC_Init+0x160>)
 80009b8:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80009ba:	4b4d      	ldr	r3, [pc, #308]	@ (8000af0 <MX_LTDC_Init+0x15c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80009c0:	4b4b      	ldr	r3, [pc, #300]	@ (8000af0 <MX_LTDC_Init+0x15c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80009c6:	4b4a      	ldr	r3, [pc, #296]	@ (8000af0 <MX_LTDC_Init+0x15c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80009cc:	4b48      	ldr	r3, [pc, #288]	@ (8000af0 <MX_LTDC_Init+0x15c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80009d2:	4b47      	ldr	r3, [pc, #284]	@ (8000af0 <MX_LTDC_Init+0x15c>)
 80009d4:	2207      	movs	r2, #7
 80009d6:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80009d8:	4b45      	ldr	r3, [pc, #276]	@ (8000af0 <MX_LTDC_Init+0x15c>)
 80009da:	2203      	movs	r2, #3
 80009dc:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80009de:	4b44      	ldr	r3, [pc, #272]	@ (8000af0 <MX_LTDC_Init+0x15c>)
 80009e0:	220e      	movs	r2, #14
 80009e2:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80009e4:	4b42      	ldr	r3, [pc, #264]	@ (8000af0 <MX_LTDC_Init+0x15c>)
 80009e6:	2205      	movs	r2, #5
 80009e8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80009ea:	4b41      	ldr	r3, [pc, #260]	@ (8000af0 <MX_LTDC_Init+0x15c>)
 80009ec:	f240 228e 	movw	r2, #654	@ 0x28e
 80009f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80009f2:	4b3f      	ldr	r3, [pc, #252]	@ (8000af0 <MX_LTDC_Init+0x15c>)
 80009f4:	f240 12e5 	movw	r2, #485	@ 0x1e5
 80009f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 80009fa:	4b3d      	ldr	r3, [pc, #244]	@ (8000af0 <MX_LTDC_Init+0x15c>)
 80009fc:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8000a00:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000a02:	4b3b      	ldr	r3, [pc, #236]	@ (8000af0 <MX_LTDC_Init+0x15c>)
 8000a04:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8000a08:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000a0a:	4b39      	ldr	r3, [pc, #228]	@ (8000af0 <MX_LTDC_Init+0x15c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000a12:	4b37      	ldr	r3, [pc, #220]	@ (8000af0 <MX_LTDC_Init+0x15c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000a1a:	4b35      	ldr	r3, [pc, #212]	@ (8000af0 <MX_LTDC_Init+0x15c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000a22:	4833      	ldr	r0, [pc, #204]	@ (8000af0 <MX_LTDC_Init+0x15c>)
 8000a24:	f002 f96a 	bl	8002cfc <HAL_LTDC_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000a2e:	f000 fcad 	bl	800138c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000a42:	2300      	movs	r3, #0
 8000a44:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000a4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a52:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000a54:	2305      	movs	r3, #5
 8000a56:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000a76:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	481c      	ldr	r0, [pc, #112]	@ (8000af0 <MX_LTDC_Init+0x15c>)
 8000a80:	f002 fa0c 	bl	8002e9c <HAL_LTDC_ConfigLayer>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8000a8a:	f000 fc7f 	bl	800138c <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000aaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000aae:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000ab0:	2305      	movs	r3, #5
 8000ab2:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000ad2:	463b      	mov	r3, r7
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4805      	ldr	r0, [pc, #20]	@ (8000af0 <MX_LTDC_Init+0x15c>)
 8000ada:	f002 f9df 	bl	8002e9c <HAL_LTDC_ConfigLayer>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8000ae4:	f000 fc52 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000ae8:	bf00      	nop
 8000aea:	3768      	adds	r7, #104	@ 0x68
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	200000b8 	.word	0x200000b8
 8000af4:	40016800 	.word	0x40016800

08000af8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000afc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b30 <MX_SDMMC1_SD_Init+0x38>)
 8000afe:	4a0d      	ldr	r2, [pc, #52]	@ (8000b34 <MX_SDMMC1_SD_Init+0x3c>)
 8000b00:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000b02:	4b0b      	ldr	r3, [pc, #44]	@ (8000b30 <MX_SDMMC1_SD_Init+0x38>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000b08:	4b09      	ldr	r3, [pc, #36]	@ (8000b30 <MX_SDMMC1_SD_Init+0x38>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000b0e:	4b08      	ldr	r3, [pc, #32]	@ (8000b30 <MX_SDMMC1_SD_Init+0x38>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000b14:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <MX_SDMMC1_SD_Init+0x38>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000b1a:	4b05      	ldr	r3, [pc, #20]	@ (8000b30 <MX_SDMMC1_SD_Init+0x38>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000b20:	4b03      	ldr	r3, [pc, #12]	@ (8000b30 <MX_SDMMC1_SD_Init+0x38>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	20000160 	.word	0x20000160
 8000b34:	40012c00 	.word	0x40012c00

08000b38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b3e:	4b10      	ldr	r3, [pc, #64]	@ (8000b80 <MX_DMA_Init+0x48>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b42:	4a0f      	ldr	r2, [pc, #60]	@ (8000b80 <MX_DMA_Init+0x48>)
 8000b44:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b80 <MX_DMA_Init+0x48>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2100      	movs	r1, #0
 8000b5a:	203b      	movs	r0, #59	@ 0x3b
 8000b5c:	f001 f919 	bl	8001d92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000b60:	203b      	movs	r0, #59	@ 0x3b
 8000b62:	f001 f932 	bl	8001dca <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2100      	movs	r1, #0
 8000b6a:	2045      	movs	r0, #69	@ 0x45
 8000b6c:	f001 f911 	bl	8001d92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000b70:	2045      	movs	r0, #69	@ 0x45
 8000b72:	f001 f92a 	bl	8001dca <HAL_NVIC_EnableIRQ>

}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800

08000b84 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b088      	sub	sp, #32
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
 8000b98:	615a      	str	r2, [r3, #20]
 8000b9a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000b9c:	4b1e      	ldr	r3, [pc, #120]	@ (8000c18 <MX_FMC_Init+0x94>)
 8000b9e:	4a1f      	ldr	r2, [pc, #124]	@ (8000c1c <MX_FMC_Init+0x98>)
 8000ba0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000ba2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c18 <MX_FMC_Init+0x94>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c18 <MX_FMC_Init+0x94>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000bae:	4b1a      	ldr	r3, [pc, #104]	@ (8000c18 <MX_FMC_Init+0x94>)
 8000bb0:	2204      	movs	r2, #4
 8000bb2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000bb4:	4b18      	ldr	r3, [pc, #96]	@ (8000c18 <MX_FMC_Init+0x94>)
 8000bb6:	2210      	movs	r2, #16
 8000bb8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000bba:	4b17      	ldr	r3, [pc, #92]	@ (8000c18 <MX_FMC_Init+0x94>)
 8000bbc:	2240      	movs	r2, #64	@ 0x40
 8000bbe:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000bc0:	4b15      	ldr	r3, [pc, #84]	@ (8000c18 <MX_FMC_Init+0x94>)
 8000bc2:	2280      	movs	r2, #128	@ 0x80
 8000bc4:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000bc6:	4b14      	ldr	r3, [pc, #80]	@ (8000c18 <MX_FMC_Init+0x94>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000bcc:	4b12      	ldr	r3, [pc, #72]	@ (8000c18 <MX_FMC_Init+0x94>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000bd2:	4b11      	ldr	r3, [pc, #68]	@ (8000c18 <MX_FMC_Init+0x94>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c18 <MX_FMC_Init+0x94>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000bde:	2310      	movs	r3, #16
 8000be0:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000be2:	2310      	movs	r3, #16
 8000be4:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8000be6:	2310      	movs	r3, #16
 8000be8:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8000bea:	2310      	movs	r3, #16
 8000bec:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8000bee:	2310      	movs	r3, #16
 8000bf0:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8000bf2:	2310      	movs	r3, #16
 8000bf4:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8000bf6:	2310      	movs	r3, #16
 8000bf8:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4806      	ldr	r0, [pc, #24]	@ (8000c18 <MX_FMC_Init+0x94>)
 8000c00:	f004 fc92 	bl	8005528 <HAL_SDRAM_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8000c0a:	f000 fbbf 	bl	800138c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000c0e:	bf00      	nop
 8000c10:	3720      	adds	r7, #32
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	200002a4 	.word	0x200002a4
 8000c1c:	a0000140 	.word	0xa0000140

08000c20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b090      	sub	sp, #64	@ 0x40
 8000c24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
 8000c34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c36:	4bad      	ldr	r3, [pc, #692]	@ (8000eec <MX_GPIO_Init+0x2cc>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	4aac      	ldr	r2, [pc, #688]	@ (8000eec <MX_GPIO_Init+0x2cc>)
 8000c3c:	f043 0310 	orr.w	r3, r3, #16
 8000c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c42:	4baa      	ldr	r3, [pc, #680]	@ (8000eec <MX_GPIO_Init+0x2cc>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	f003 0310 	and.w	r3, r3, #16
 8000c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c4e:	4ba7      	ldr	r3, [pc, #668]	@ (8000eec <MX_GPIO_Init+0x2cc>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c52:	4aa6      	ldr	r2, [pc, #664]	@ (8000eec <MX_GPIO_Init+0x2cc>)
 8000c54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5a:	4ba4      	ldr	r3, [pc, #656]	@ (8000eec <MX_GPIO_Init+0x2cc>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c62:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c66:	4ba1      	ldr	r3, [pc, #644]	@ (8000eec <MX_GPIO_Init+0x2cc>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	4aa0      	ldr	r2, [pc, #640]	@ (8000eec <MX_GPIO_Init+0x2cc>)
 8000c6c:	f043 0302 	orr.w	r3, r3, #2
 8000c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c72:	4b9e      	ldr	r3, [pc, #632]	@ (8000eec <MX_GPIO_Init+0x2cc>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	f003 0302 	and.w	r3, r3, #2
 8000c7a:	623b      	str	r3, [r7, #32]
 8000c7c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c7e:	4b9b      	ldr	r3, [pc, #620]	@ (8000eec <MX_GPIO_Init+0x2cc>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c82:	4a9a      	ldr	r2, [pc, #616]	@ (8000eec <MX_GPIO_Init+0x2cc>)
 8000c84:	f043 0308 	orr.w	r3, r3, #8
 8000c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8a:	4b98      	ldr	r3, [pc, #608]	@ (8000eec <MX_GPIO_Init+0x2cc>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	f003 0308 	and.w	r3, r3, #8
 8000c92:	61fb      	str	r3, [r7, #28]
 8000c94:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c96:	4b95      	ldr	r3, [pc, #596]	@ (8000eec <MX_GPIO_Init+0x2cc>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9a:	4a94      	ldr	r2, [pc, #592]	@ (8000eec <MX_GPIO_Init+0x2cc>)
 8000c9c:	f043 0304 	orr.w	r3, r3, #4
 8000ca0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca2:	4b92      	ldr	r3, [pc, #584]	@ (8000eec <MX_GPIO_Init+0x2cc>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca6:	f003 0304 	and.w	r3, r3, #4
 8000caa:	61bb      	str	r3, [r7, #24]
 8000cac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cae:	4b8f      	ldr	r3, [pc, #572]	@ (8000eec <MX_GPIO_Init+0x2cc>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	4a8e      	ldr	r2, [pc, #568]	@ (8000eec <MX_GPIO_Init+0x2cc>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cba:	4b8c      	ldr	r3, [pc, #560]	@ (8000eec <MX_GPIO_Init+0x2cc>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	617b      	str	r3, [r7, #20]
 8000cc4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000cc6:	4b89      	ldr	r3, [pc, #548]	@ (8000eec <MX_GPIO_Init+0x2cc>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	4a88      	ldr	r2, [pc, #544]	@ (8000eec <MX_GPIO_Init+0x2cc>)
 8000ccc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd2:	4b86      	ldr	r3, [pc, #536]	@ (8000eec <MX_GPIO_Init+0x2cc>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cde:	4b83      	ldr	r3, [pc, #524]	@ (8000eec <MX_GPIO_Init+0x2cc>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	4a82      	ldr	r2, [pc, #520]	@ (8000eec <MX_GPIO_Init+0x2cc>)
 8000ce4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cea:	4b80      	ldr	r3, [pc, #512]	@ (8000eec <MX_GPIO_Init+0x2cc>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000cf6:	4b7d      	ldr	r3, [pc, #500]	@ (8000eec <MX_GPIO_Init+0x2cc>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	4a7c      	ldr	r2, [pc, #496]	@ (8000eec <MX_GPIO_Init+0x2cc>)
 8000cfc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d02:	4b7a      	ldr	r3, [pc, #488]	@ (8000eec <MX_GPIO_Init+0x2cc>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d0e:	4b77      	ldr	r3, [pc, #476]	@ (8000eec <MX_GPIO_Init+0x2cc>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	4a76      	ldr	r2, [pc, #472]	@ (8000eec <MX_GPIO_Init+0x2cc>)
 8000d14:	f043 0320 	orr.w	r3, r3, #32
 8000d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1a:	4b74      	ldr	r3, [pc, #464]	@ (8000eec <MX_GPIO_Init+0x2cc>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	f003 0320 	and.w	r3, r3, #32
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d26:	4b71      	ldr	r3, [pc, #452]	@ (8000eec <MX_GPIO_Init+0x2cc>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	4a70      	ldr	r2, [pc, #448]	@ (8000eec <MX_GPIO_Init+0x2cc>)
 8000d2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d32:	4b6e      	ldr	r3, [pc, #440]	@ (8000eec <MX_GPIO_Init+0x2cc>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d3a:	603b      	str	r3, [r7, #0]
 8000d3c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000d3e:	2201      	movs	r2, #1
 8000d40:	2120      	movs	r1, #32
 8000d42:	486b      	ldr	r0, [pc, #428]	@ (8000ef0 <MX_GPIO_Init+0x2d0>)
 8000d44:	f001 ffc0 	bl	8002cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f241 010c 	movw	r1, #4108	@ 0x100c
 8000d4e:	4869      	ldr	r0, [pc, #420]	@ (8000ef4 <MX_GPIO_Init+0x2d4>)
 8000d50:	f001 ffba 	bl	8002cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2108      	movs	r1, #8
 8000d58:	4867      	ldr	r0, [pc, #412]	@ (8000ef8 <MX_GPIO_Init+0x2d8>)
 8000d5a:	f001 ffb5 	bl	8002cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d64:	4865      	ldr	r0, [pc, #404]	@ (8000efc <MX_GPIO_Init+0x2dc>)
 8000d66:	f001 ffaf 	bl	8002cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	21c8      	movs	r1, #200	@ 0xc8
 8000d6e:	4864      	ldr	r0, [pc, #400]	@ (8000f00 <MX_GPIO_Init+0x2e0>)
 8000d70:	f001 ffaa 	bl	8002cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000d74:	2308      	movs	r3, #8
 8000d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d84:	4619      	mov	r1, r3
 8000d86:	485f      	ldr	r0, [pc, #380]	@ (8000f04 <MX_GPIO_Init+0x2e4>)
 8000d88:	f001 fdda 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000d8c:	2304      	movs	r3, #4
 8000d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d90:	2302      	movs	r3, #2
 8000d92:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d9c:	2309      	movs	r3, #9
 8000d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000da0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000da4:	4619      	mov	r1, r3
 8000da6:	4857      	ldr	r0, [pc, #348]	@ (8000f04 <MX_GPIO_Init+0x2e4>)
 8000da8:	f001 fdca 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000dac:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8000db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	2302      	movs	r3, #2
 8000db4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dbe:	230b      	movs	r3, #11
 8000dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dc2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	484d      	ldr	r0, [pc, #308]	@ (8000f00 <MX_GPIO_Init+0x2e0>)
 8000dca:	f001 fdb9 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000dce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dd4:	2312      	movs	r3, #18
 8000dd6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000de0:	2304      	movs	r3, #4
 8000de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000de8:	4619      	mov	r1, r3
 8000dea:	4847      	ldr	r0, [pc, #284]	@ (8000f08 <MX_GPIO_Init+0x2e8>)
 8000dec:	f001 fda8 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000df0:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8000df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	2302      	movs	r3, #2
 8000df8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000e02:	230a      	movs	r3, #10
 8000e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	483e      	ldr	r0, [pc, #248]	@ (8000f08 <MX_GPIO_Init+0x2e8>)
 8000e0e:	f001 fd97 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000e12:	2310      	movs	r3, #16
 8000e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e16:	2302      	movs	r3, #2
 8000e18:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e22:	2302      	movs	r3, #2
 8000e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000e26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4836      	ldr	r0, [pc, #216]	@ (8000f08 <MX_GPIO_Init+0x2e8>)
 8000e2e:	f001 fd87 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000e32:	2380      	movs	r3, #128	@ 0x80
 8000e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000e42:	2308      	movs	r3, #8
 8000e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000e46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4828      	ldr	r0, [pc, #160]	@ (8000ef0 <MX_GPIO_Init+0x2d0>)
 8000e4e:	f001 fd77 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000e52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	2300      	movs	r3, #0
 8000e62:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e64:	2301      	movs	r3, #1
 8000e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000e68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4827      	ldr	r0, [pc, #156]	@ (8000f0c <MX_GPIO_Init+0x2ec>)
 8000e70:	f001 fd66 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000e74:	2360      	movs	r3, #96	@ 0x60
 8000e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e84:	230d      	movs	r3, #13
 8000e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	481d      	ldr	r0, [pc, #116]	@ (8000f04 <MX_GPIO_Init+0x2e4>)
 8000e90:	f001 fd56 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000e94:	2380      	movs	r3, #128	@ 0x80
 8000e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ea4:	2307      	movs	r3, #7
 8000ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000ea8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eac:	4619      	mov	r1, r3
 8000eae:	4816      	ldr	r0, [pc, #88]	@ (8000f08 <MX_GPIO_Init+0x2e8>)
 8000eb0:	f001 fd46 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000eb4:	2340      	movs	r3, #64	@ 0x40
 8000eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000ec4:	230a      	movs	r3, #10
 8000ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000ec8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ecc:	4619      	mov	r1, r3
 8000ece:	480e      	ldr	r0, [pc, #56]	@ (8000f08 <MX_GPIO_Init+0x2e8>)
 8000ed0:	f001 fd36 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000ed4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eda:	2300      	movs	r3, #0
 8000edc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ee2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	e012      	b.n	8000f10 <MX_GPIO_Init+0x2f0>
 8000eea:	bf00      	nop
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40020c00 	.word	0x40020c00
 8000ef4:	40022000 	.word	0x40022000
 8000ef8:	40022800 	.word	0x40022800
 8000efc:	40021c00 	.word	0x40021c00
 8000f00:	40021800 	.word	0x40021800
 8000f04:	40021000 	.word	0x40021000
 8000f08:	40020400 	.word	0x40020400
 8000f0c:	40020000 	.word	0x40020000
 8000f10:	48bc      	ldr	r0, [pc, #752]	@ (8001204 <MX_GPIO_Init+0x5e4>)
 8000f12:	f001 fd15 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000f16:	2340      	movs	r3, #64	@ 0x40
 8000f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f1a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000f1e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000f24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f28:	4619      	mov	r1, r3
 8000f2a:	48b7      	ldr	r0, [pc, #732]	@ (8001208 <MX_GPIO_Init+0x5e8>)
 8000f2c:	f001 fd08 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000f30:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	2302      	movs	r3, #2
 8000f38:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f42:	230a      	movs	r3, #10
 8000f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	48af      	ldr	r0, [pc, #700]	@ (800120c <MX_GPIO_Init+0x5ec>)
 8000f4e:	f001 fcf7 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000f52:	23f0      	movs	r3, #240	@ 0xf0
 8000f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f56:	2302      	movs	r3, #2
 8000f58:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000f62:	230a      	movs	r3, #10
 8000f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	48a8      	ldr	r0, [pc, #672]	@ (8001210 <MX_GPIO_Init+0x5f0>)
 8000f6e:	f001 fce7 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000f72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2300      	movs	r3, #0
 8000f82:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000f84:	230a      	movs	r3, #10
 8000f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000f88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	48a1      	ldr	r0, [pc, #644]	@ (8001214 <MX_GPIO_Init+0x5f4>)
 8000f90:	f001 fcd6 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000f94:	2320      	movs	r3, #32
 8000f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4897      	ldr	r0, [pc, #604]	@ (8001208 <MX_GPIO_Init+0x5e8>)
 8000fac:	f001 fcc8 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000fb0:	2308      	movs	r3, #8
 8000fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000fc0:	230d      	movs	r3, #13
 8000fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000fc4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fc8:	4619      	mov	r1, r3
 8000fca:	488f      	ldr	r0, [pc, #572]	@ (8001208 <MX_GPIO_Init+0x5e8>)
 8000fcc:	f001 fcb8 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000fd0:	f241 030c 	movw	r3, #4108	@ 0x100c
 8000fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000fe2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4889      	ldr	r0, [pc, #548]	@ (8001210 <MX_GPIO_Init+0x5f0>)
 8000fea:	f001 fca9 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000fee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000ffc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001000:	4619      	mov	r1, r3
 8001002:	4885      	ldr	r0, [pc, #532]	@ (8001218 <MX_GPIO_Init+0x5f8>)
 8001004:	f001 fc9c 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001008:	2308      	movs	r3, #8
 800100a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100c:	2301      	movs	r3, #1
 800100e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2300      	movs	r3, #0
 8001016:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001018:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800101c:	4619      	mov	r1, r3
 800101e:	487f      	ldr	r0, [pc, #508]	@ (800121c <MX_GPIO_Init+0x5fc>)
 8001020:	f001 fc8e 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001024:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001028:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	2302      	movs	r3, #2
 800102c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001032:	2300      	movs	r3, #0
 8001034:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001036:	230d      	movs	r3, #13
 8001038:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800103a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800103e:	4619      	mov	r1, r3
 8001040:	4874      	ldr	r0, [pc, #464]	@ (8001214 <MX_GPIO_Init+0x5f4>)
 8001042:	f001 fc7d 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001046:	2310      	movs	r3, #16
 8001048:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800104a:	2300      	movs	r3, #0
 800104c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001052:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001056:	4619      	mov	r1, r3
 8001058:	486b      	ldr	r0, [pc, #428]	@ (8001208 <MX_GPIO_Init+0x5e8>)
 800105a:	f001 fc71 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800105e:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001062:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001064:	2300      	movs	r3, #0
 8001066:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800106c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001070:	4619      	mov	r1, r3
 8001072:	486b      	ldr	r0, [pc, #428]	@ (8001220 <MX_GPIO_Init+0x600>)
 8001074:	f001 fc64 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8001078:	2302      	movs	r3, #2
 800107a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001084:	2300      	movs	r3, #0
 8001086:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001088:	2305      	movs	r3, #5
 800108a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800108c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001090:	4619      	mov	r1, r3
 8001092:	485f      	ldr	r0, [pc, #380]	@ (8001210 <MX_GPIO_Init+0x5f0>)
 8001094:	f001 fc54 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001098:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800109c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109e:	2301      	movs	r3, #1
 80010a0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2300      	movs	r3, #0
 80010a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80010aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010ae:	4619      	mov	r1, r3
 80010b0:	485b      	ldr	r0, [pc, #364]	@ (8001220 <MX_GPIO_Init+0x600>)
 80010b2:	f001 fc45 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80010b6:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 80010ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	2302      	movs	r3, #2
 80010be:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	2300      	movs	r3, #0
 80010c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80010c8:	230d      	movs	r3, #13
 80010ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010d0:	4619      	mov	r1, r3
 80010d2:	4853      	ldr	r0, [pc, #332]	@ (8001220 <MX_GPIO_Init+0x600>)
 80010d4:	f001 fc34 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80010d8:	2301      	movs	r3, #1
 80010da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010dc:	2302      	movs	r3, #2
 80010de:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e4:	2300      	movs	r3, #0
 80010e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80010e8:	2302      	movs	r3, #2
 80010ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80010ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010f0:	4619      	mov	r1, r3
 80010f2:	4847      	ldr	r0, [pc, #284]	@ (8001210 <MX_GPIO_Init+0x5f0>)
 80010f4:	f001 fc24 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 80010f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	2302      	movs	r3, #2
 8001100:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	2300      	movs	r3, #0
 8001108:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800110a:	2307      	movs	r3, #7
 800110c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800110e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001112:	4619      	mov	r1, r3
 8001114:	483d      	ldr	r0, [pc, #244]	@ (800120c <MX_GPIO_Init+0x5ec>)
 8001116:	f001 fc13 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800111a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800111e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2300      	movs	r3, #0
 800112a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800112c:	2301      	movs	r3, #1
 800112e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8001130:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001134:	4619      	mov	r1, r3
 8001136:	4835      	ldr	r0, [pc, #212]	@ (800120c <MX_GPIO_Init+0x5ec>)
 8001138:	f001 fc02 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800113c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001140:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001142:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001146:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800114c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001150:	4619      	mov	r1, r3
 8001152:	482f      	ldr	r0, [pc, #188]	@ (8001210 <MX_GPIO_Init+0x5f0>)
 8001154:	f001 fbf4 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8001158:	23c0      	movs	r3, #192	@ 0xc0
 800115a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	2302      	movs	r3, #2
 800115e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001164:	2303      	movs	r3, #3
 8001166:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001168:	2308      	movs	r3, #8
 800116a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800116c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001170:	4619      	mov	r1, r3
 8001172:	4829      	ldr	r0, [pc, #164]	@ (8001218 <MX_GPIO_Init+0x5f8>)
 8001174:	f001 fbe4 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001178:	2310      	movs	r3, #16
 800117a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117c:	2302      	movs	r3, #2
 800117e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001184:	2303      	movs	r3, #3
 8001186:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001188:	230a      	movs	r3, #10
 800118a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800118c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001190:	4619      	mov	r1, r3
 8001192:	4823      	ldr	r0, [pc, #140]	@ (8001220 <MX_GPIO_Init+0x600>)
 8001194:	f001 fbd4 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001198:	23c8      	movs	r3, #200	@ 0xc8
 800119a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119c:	2301      	movs	r3, #1
 800119e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	2300      	movs	r3, #0
 80011a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011ac:	4619      	mov	r1, r3
 80011ae:	4819      	ldr	r0, [pc, #100]	@ (8001214 <MX_GPIO_Init+0x5f4>)
 80011b0:	f001 fbc6 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80011b4:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 80011b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ba:	2303      	movs	r3, #3
 80011bc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011c6:	4619      	mov	r1, r3
 80011c8:	4816      	ldr	r0, [pc, #88]	@ (8001224 <MX_GPIO_Init+0x604>)
 80011ca:	f001 fbb9 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80011ce:	2305      	movs	r3, #5
 80011d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d2:	2302      	movs	r3, #2
 80011d4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011da:	2303      	movs	r3, #3
 80011dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80011de:	230a      	movs	r3, #10
 80011e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011e6:	4619      	mov	r1, r3
 80011e8:	480b      	ldr	r0, [pc, #44]	@ (8001218 <MX_GPIO_Init+0x5f8>)
 80011ea:	f001 fba9 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80011ee:	2332      	movs	r3, #50	@ 0x32
 80011f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fa:	2303      	movs	r3, #3
 80011fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011fe:	230b      	movs	r3, #11
 8001200:	e012      	b.n	8001228 <MX_GPIO_Init+0x608>
 8001202:	bf00      	nop
 8001204:	40022400 	.word	0x40022400
 8001208:	40020c00 	.word	0x40020c00
 800120c:	40020000 	.word	0x40020000
 8001210:	40022000 	.word	0x40022000
 8001214:	40021800 	.word	0x40021800
 8001218:	40020800 	.word	0x40020800
 800121c:	40022800 	.word	0x40022800
 8001220:	40021c00 	.word	0x40021c00
 8001224:	40021400 	.word	0x40021400
 8001228:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800122e:	4619      	mov	r1, r3
 8001230:	4850      	ldr	r0, [pc, #320]	@ (8001374 <MX_GPIO_Init+0x754>)
 8001232:	f001 fb85 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001236:	2304      	movs	r3, #4
 8001238:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	2302      	movs	r3, #2
 800123c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001242:	2303      	movs	r3, #3
 8001244:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001246:	2309      	movs	r3, #9
 8001248:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800124e:	4619      	mov	r1, r3
 8001250:	4849      	ldr	r0, [pc, #292]	@ (8001378 <MX_GPIO_Init+0x758>)
 8001252:	f001 fb75 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001256:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800125a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125c:	2302      	movs	r3, #2
 800125e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001264:	2303      	movs	r3, #3
 8001266:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001268:	2309      	movs	r3, #9
 800126a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800126c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001270:	4619      	mov	r1, r3
 8001272:	4842      	ldr	r0, [pc, #264]	@ (800137c <MX_GPIO_Init+0x75c>)
 8001274:	f001 fb64 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001278:	2304      	movs	r3, #4
 800127a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800127c:	2300      	movs	r3, #0
 800127e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001284:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001288:	4619      	mov	r1, r3
 800128a:	483d      	ldr	r0, [pc, #244]	@ (8001380 <MX_GPIO_Init+0x760>)
 800128c:	f001 fb58 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001290:	2386      	movs	r3, #134	@ 0x86
 8001292:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129c:	2303      	movs	r3, #3
 800129e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012a0:	230b      	movs	r3, #11
 80012a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012a8:	4619      	mov	r1, r3
 80012aa:	4836      	ldr	r0, [pc, #216]	@ (8001384 <MX_GPIO_Init+0x764>)
 80012ac:	f001 fb48 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80012b0:	2301      	movs	r3, #1
 80012b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012b4:	2303      	movs	r3, #3
 80012b6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80012bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012c0:	4619      	mov	r1, r3
 80012c2:	4830      	ldr	r0, [pc, #192]	@ (8001384 <MX_GPIO_Init+0x764>)
 80012c4:	f001 fb3c 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80012c8:	2350      	movs	r3, #80	@ 0x50
 80012ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012cc:	2302      	movs	r3, #2
 80012ce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80012d8:	230d      	movs	r3, #13
 80012da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012e0:	4619      	mov	r1, r3
 80012e2:	4828      	ldr	r0, [pc, #160]	@ (8001384 <MX_GPIO_Init+0x764>)
 80012e4:	f001 fb2c 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80012e8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80012ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ee:	2312      	movs	r3, #18
 80012f0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f6:	2303      	movs	r3, #3
 80012f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80012fa:	2304      	movs	r3, #4
 80012fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001302:	4619      	mov	r1, r3
 8001304:	4820      	ldr	r0, [pc, #128]	@ (8001388 <MX_GPIO_Init+0x768>)
 8001306:	f001 fb1b 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800130a:	2328      	movs	r3, #40	@ 0x28
 800130c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130e:	2302      	movs	r3, #2
 8001310:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001316:	2303      	movs	r3, #3
 8001318:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800131a:	230a      	movs	r3, #10
 800131c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001322:	4619      	mov	r1, r3
 8001324:	4817      	ldr	r0, [pc, #92]	@ (8001384 <MX_GPIO_Init+0x764>)
 8001326:	f001 fb0b 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800132a:	2340      	movs	r3, #64	@ 0x40
 800132c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132e:	2302      	movs	r3, #2
 8001330:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2300      	movs	r3, #0
 8001338:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800133a:	2309      	movs	r3, #9
 800133c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800133e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001342:	4619      	mov	r1, r3
 8001344:	4810      	ldr	r0, [pc, #64]	@ (8001388 <MX_GPIO_Init+0x768>)
 8001346:	f001 fafb 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800134a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800134e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	2302      	movs	r3, #2
 8001352:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001358:	2300      	movs	r3, #0
 800135a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800135c:	2305      	movs	r3, #5
 800135e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001360:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001364:	4619      	mov	r1, r3
 8001366:	4804      	ldr	r0, [pc, #16]	@ (8001378 <MX_GPIO_Init+0x758>)
 8001368:	f001 faea 	bl	8002940 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800136c:	bf00      	nop
 800136e:	3740      	adds	r7, #64	@ 0x40
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40020800 	.word	0x40020800
 8001378:	40020400 	.word	0x40020400
 800137c:	40020c00 	.word	0x40020c00
 8001380:	40021800 	.word	0x40021800
 8001384:	40020000 	.word	0x40020000
 8001388:	40021c00 	.word	0x40021c00

0800138c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001390:	b672      	cpsid	i
}
 8001392:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <Error_Handler+0x8>

08001398 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800139e:	4b0f      	ldr	r3, [pc, #60]	@ (80013dc <HAL_MspInit+0x44>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a2:	4a0e      	ldr	r2, [pc, #56]	@ (80013dc <HAL_MspInit+0x44>)
 80013a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013aa:	4b0c      	ldr	r3, [pc, #48]	@ (80013dc <HAL_MspInit+0x44>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b6:	4b09      	ldr	r3, [pc, #36]	@ (80013dc <HAL_MspInit+0x44>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ba:	4a08      	ldr	r2, [pc, #32]	@ (80013dc <HAL_MspInit+0x44>)
 80013bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013c2:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <HAL_MspInit+0x44>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013ca:	603b      	str	r3, [r7, #0]
 80013cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	40023800 	.word	0x40023800

080013e0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001418 <HAL_DMA2D_MspInit+0x38>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d10b      	bne.n	800140a <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80013f2:	4b0a      	ldr	r3, [pc, #40]	@ (800141c <HAL_DMA2D_MspInit+0x3c>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	4a09      	ldr	r2, [pc, #36]	@ (800141c <HAL_DMA2D_MspInit+0x3c>)
 80013f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80013fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fe:	4b07      	ldr	r3, [pc, #28]	@ (800141c <HAL_DMA2D_MspInit+0x3c>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 800140a:	bf00      	nop
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	4002b000 	.word	0x4002b000
 800141c:	40023800 	.word	0x40023800

08001420 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b0ae      	sub	sp, #184	@ 0xb8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001438:	f107 0320 	add.w	r3, r7, #32
 800143c:	2284      	movs	r2, #132	@ 0x84
 800143e:	2100      	movs	r1, #0
 8001440:	4618      	mov	r0, r3
 8001442:	f007 fc23 	bl	8008c8c <memset>
  if(hltdc->Instance==LTDC)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a6a      	ldr	r2, [pc, #424]	@ (80015f4 <HAL_LTDC_MspInit+0x1d4>)
 800144c:	4293      	cmp	r3, r2
 800144e:	f040 80cc 	bne.w	80015ea <HAL_LTDC_MspInit+0x1ca>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001452:	2308      	movs	r3, #8
 8001454:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001456:	2332      	movs	r3, #50	@ 0x32
 8001458:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800145a:	2302      	movs	r3, #2
 800145c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800145e:	2302      	movs	r3, #2
 8001460:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001462:	2300      	movs	r3, #0
 8001464:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001466:	2301      	movs	r3, #1
 8001468:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800146a:	2300      	movs	r3, #0
 800146c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800146e:	f107 0320 	add.w	r3, r7, #32
 8001472:	4618      	mov	r0, r3
 8001474:	f002 fb40 	bl	8003af8 <HAL_RCCEx_PeriphCLKConfig>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <HAL_LTDC_MspInit+0x62>
    {
      Error_Handler();
 800147e:	f7ff ff85 	bl	800138c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001482:	4b5d      	ldr	r3, [pc, #372]	@ (80015f8 <HAL_LTDC_MspInit+0x1d8>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001486:	4a5c      	ldr	r2, [pc, #368]	@ (80015f8 <HAL_LTDC_MspInit+0x1d8>)
 8001488:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800148c:	6453      	str	r3, [r2, #68]	@ 0x44
 800148e:	4b5a      	ldr	r3, [pc, #360]	@ (80015f8 <HAL_LTDC_MspInit+0x1d8>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001492:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001496:	61fb      	str	r3, [r7, #28]
 8001498:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800149a:	4b57      	ldr	r3, [pc, #348]	@ (80015f8 <HAL_LTDC_MspInit+0x1d8>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	4a56      	ldr	r2, [pc, #344]	@ (80015f8 <HAL_LTDC_MspInit+0x1d8>)
 80014a0:	f043 0310 	orr.w	r3, r3, #16
 80014a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a6:	4b54      	ldr	r3, [pc, #336]	@ (80015f8 <HAL_LTDC_MspInit+0x1d8>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	f003 0310 	and.w	r3, r3, #16
 80014ae:	61bb      	str	r3, [r7, #24]
 80014b0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80014b2:	4b51      	ldr	r3, [pc, #324]	@ (80015f8 <HAL_LTDC_MspInit+0x1d8>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	4a50      	ldr	r2, [pc, #320]	@ (80015f8 <HAL_LTDC_MspInit+0x1d8>)
 80014b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014be:	4b4e      	ldr	r3, [pc, #312]	@ (80015f8 <HAL_LTDC_MspInit+0x1d8>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80014ca:	4b4b      	ldr	r3, [pc, #300]	@ (80015f8 <HAL_LTDC_MspInit+0x1d8>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	4a4a      	ldr	r2, [pc, #296]	@ (80015f8 <HAL_LTDC_MspInit+0x1d8>)
 80014d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d6:	4b48      	ldr	r3, [pc, #288]	@ (80015f8 <HAL_LTDC_MspInit+0x1d8>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014e2:	4b45      	ldr	r3, [pc, #276]	@ (80015f8 <HAL_LTDC_MspInit+0x1d8>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	4a44      	ldr	r2, [pc, #272]	@ (80015f8 <HAL_LTDC_MspInit+0x1d8>)
 80014e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ee:	4b42      	ldr	r3, [pc, #264]	@ (80015f8 <HAL_LTDC_MspInit+0x1d8>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80014fa:	4b3f      	ldr	r3, [pc, #252]	@ (80015f8 <HAL_LTDC_MspInit+0x1d8>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fe:	4a3e      	ldr	r2, [pc, #248]	@ (80015f8 <HAL_LTDC_MspInit+0x1d8>)
 8001500:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001504:	6313      	str	r3, [r2, #48]	@ 0x30
 8001506:	4b3c      	ldr	r3, [pc, #240]	@ (80015f8 <HAL_LTDC_MspInit+0x1d8>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001512:	2310      	movs	r3, #16
 8001514:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001518:	2302      	movs	r3, #2
 800151a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001524:	2300      	movs	r3, #0
 8001526:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800152a:	230e      	movs	r3, #14
 800152c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001530:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001534:	4619      	mov	r1, r3
 8001536:	4831      	ldr	r0, [pc, #196]	@ (80015fc <HAL_LTDC_MspInit+0x1dc>)
 8001538:	f001 fa02 	bl	8002940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800153c:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8001540:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2302      	movs	r3, #2
 8001546:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	2300      	movs	r3, #0
 8001552:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001556:	230e      	movs	r3, #14
 8001558:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800155c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001560:	4619      	mov	r1, r3
 8001562:	4827      	ldr	r0, [pc, #156]	@ (8001600 <HAL_LTDC_MspInit+0x1e0>)
 8001564:	f001 f9ec 	bl	8002940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001568:	23f7      	movs	r3, #247	@ 0xf7
 800156a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156e:	2302      	movs	r3, #2
 8001570:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2300      	movs	r3, #0
 800157c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001580:	230e      	movs	r3, #14
 8001582:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001586:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800158a:	4619      	mov	r1, r3
 800158c:	481d      	ldr	r0, [pc, #116]	@ (8001604 <HAL_LTDC_MspInit+0x1e4>)
 800158e:	f001 f9d7 	bl	8002940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001592:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001596:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a6:	2300      	movs	r3, #0
 80015a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80015ac:	2309      	movs	r3, #9
 80015ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80015b2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80015b6:	4619      	mov	r1, r3
 80015b8:	4813      	ldr	r0, [pc, #76]	@ (8001608 <HAL_LTDC_MspInit+0x1e8>)
 80015ba:	f001 f9c1 	bl	8002940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80015be:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 80015c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	2302      	movs	r3, #2
 80015c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015d8:	230e      	movs	r3, #14
 80015da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80015de:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80015e2:	4619      	mov	r1, r3
 80015e4:	4809      	ldr	r0, [pc, #36]	@ (800160c <HAL_LTDC_MspInit+0x1ec>)
 80015e6:	f001 f9ab 	bl	8002940 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80015ea:	bf00      	nop
 80015ec:	37b8      	adds	r7, #184	@ 0xb8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40016800 	.word	0x40016800
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40021000 	.word	0x40021000
 8001600:	40022400 	.word	0x40022400
 8001604:	40022800 	.word	0x40022800
 8001608:	40021800 	.word	0x40021800
 800160c:	40022000 	.word	0x40022000

08001610 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b0ac      	sub	sp, #176	@ 0xb0
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001628:	f107 0318 	add.w	r3, r7, #24
 800162c:	2284      	movs	r2, #132	@ 0x84
 800162e:	2100      	movs	r1, #0
 8001630:	4618      	mov	r0, r3
 8001632:	f007 fb2b 	bl	8008c8c <memset>
  if(hsd->Instance==SDMMC1)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a73      	ldr	r2, [pc, #460]	@ (8001808 <HAL_SD_MspInit+0x1f8>)
 800163c:	4293      	cmp	r3, r2
 800163e:	f040 80de 	bne.w	80017fe <HAL_SD_MspInit+0x1ee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001642:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8001646:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_SYSCLK;
 8001648:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800164c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001650:	f107 0318 	add.w	r3, r7, #24
 8001654:	4618      	mov	r0, r3
 8001656:	f002 fa4f 	bl	8003af8 <HAL_RCCEx_PeriphCLKConfig>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001660:	f7ff fe94 	bl	800138c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001664:	4b69      	ldr	r3, [pc, #420]	@ (800180c <HAL_SD_MspInit+0x1fc>)
 8001666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001668:	4a68      	ldr	r2, [pc, #416]	@ (800180c <HAL_SD_MspInit+0x1fc>)
 800166a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800166e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001670:	4b66      	ldr	r3, [pc, #408]	@ (800180c <HAL_SD_MspInit+0x1fc>)
 8001672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001674:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800167c:	4b63      	ldr	r3, [pc, #396]	@ (800180c <HAL_SD_MspInit+0x1fc>)
 800167e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001680:	4a62      	ldr	r2, [pc, #392]	@ (800180c <HAL_SD_MspInit+0x1fc>)
 8001682:	f043 0304 	orr.w	r3, r3, #4
 8001686:	6313      	str	r3, [r2, #48]	@ 0x30
 8001688:	4b60      	ldr	r3, [pc, #384]	@ (800180c <HAL_SD_MspInit+0x1fc>)
 800168a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001694:	4b5d      	ldr	r3, [pc, #372]	@ (800180c <HAL_SD_MspInit+0x1fc>)
 8001696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001698:	4a5c      	ldr	r2, [pc, #368]	@ (800180c <HAL_SD_MspInit+0x1fc>)
 800169a:	f043 0308 	orr.w	r3, r3, #8
 800169e:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a0:	4b5a      	ldr	r3, [pc, #360]	@ (800180c <HAL_SD_MspInit+0x1fc>)
 80016a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a4:	f003 0308 	and.w	r3, r3, #8
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80016ac:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80016b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b4:	2302      	movs	r3, #2
 80016b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c0:	2303      	movs	r3, #3
 80016c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80016c6:	230c      	movs	r3, #12
 80016c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016cc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016d0:	4619      	mov	r1, r3
 80016d2:	484f      	ldr	r0, [pc, #316]	@ (8001810 <HAL_SD_MspInit+0x200>)
 80016d4:	f001 f934 	bl	8002940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 80016d8:	2304      	movs	r3, #4
 80016da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016de:	2302      	movs	r3, #2
 80016e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ea:	2303      	movs	r3, #3
 80016ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80016f0:	230c      	movs	r3, #12
 80016f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 80016f6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016fa:	4619      	mov	r1, r3
 80016fc:	4845      	ldr	r0, [pc, #276]	@ (8001814 <HAL_SD_MspInit+0x204>)
 80016fe:	f001 f91f 	bl	8002940 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8001702:	4b45      	ldr	r3, [pc, #276]	@ (8001818 <HAL_SD_MspInit+0x208>)
 8001704:	4a45      	ldr	r2, [pc, #276]	@ (800181c <HAL_SD_MspInit+0x20c>)
 8001706:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8001708:	4b43      	ldr	r3, [pc, #268]	@ (8001818 <HAL_SD_MspInit+0x208>)
 800170a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800170e:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001710:	4b41      	ldr	r3, [pc, #260]	@ (8001818 <HAL_SD_MspInit+0x208>)
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001716:	4b40      	ldr	r3, [pc, #256]	@ (8001818 <HAL_SD_MspInit+0x208>)
 8001718:	2200      	movs	r2, #0
 800171a:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800171c:	4b3e      	ldr	r3, [pc, #248]	@ (8001818 <HAL_SD_MspInit+0x208>)
 800171e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001722:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001724:	4b3c      	ldr	r3, [pc, #240]	@ (8001818 <HAL_SD_MspInit+0x208>)
 8001726:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800172a:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800172c:	4b3a      	ldr	r3, [pc, #232]	@ (8001818 <HAL_SD_MspInit+0x208>)
 800172e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001732:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8001734:	4b38      	ldr	r3, [pc, #224]	@ (8001818 <HAL_SD_MspInit+0x208>)
 8001736:	2220      	movs	r2, #32
 8001738:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800173a:	4b37      	ldr	r3, [pc, #220]	@ (8001818 <HAL_SD_MspInit+0x208>)
 800173c:	2200      	movs	r2, #0
 800173e:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001740:	4b35      	ldr	r3, [pc, #212]	@ (8001818 <HAL_SD_MspInit+0x208>)
 8001742:	2204      	movs	r2, #4
 8001744:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001746:	4b34      	ldr	r3, [pc, #208]	@ (8001818 <HAL_SD_MspInit+0x208>)
 8001748:	2203      	movs	r2, #3
 800174a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 800174c:	4b32      	ldr	r3, [pc, #200]	@ (8001818 <HAL_SD_MspInit+0x208>)
 800174e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001752:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001754:	4b30      	ldr	r3, [pc, #192]	@ (8001818 <HAL_SD_MspInit+0x208>)
 8001756:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800175a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 800175c:	482e      	ldr	r0, [pc, #184]	@ (8001818 <HAL_SD_MspInit+0x208>)
 800175e:	f000 fb4f 	bl	8001e00 <HAL_DMA_Init>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <HAL_SD_MspInit+0x15c>
    {
      Error_Handler();
 8001768:	f7ff fe10 	bl	800138c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a2a      	ldr	r2, [pc, #168]	@ (8001818 <HAL_SD_MspInit+0x208>)
 8001770:	641a      	str	r2, [r3, #64]	@ 0x40
 8001772:	4a29      	ldr	r2, [pc, #164]	@ (8001818 <HAL_SD_MspInit+0x208>)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8001778:	4b29      	ldr	r3, [pc, #164]	@ (8001820 <HAL_SD_MspInit+0x210>)
 800177a:	4a2a      	ldr	r2, [pc, #168]	@ (8001824 <HAL_SD_MspInit+0x214>)
 800177c:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 800177e:	4b28      	ldr	r3, [pc, #160]	@ (8001820 <HAL_SD_MspInit+0x210>)
 8001780:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001784:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001786:	4b26      	ldr	r3, [pc, #152]	@ (8001820 <HAL_SD_MspInit+0x210>)
 8001788:	2240      	movs	r2, #64	@ 0x40
 800178a:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800178c:	4b24      	ldr	r3, [pc, #144]	@ (8001820 <HAL_SD_MspInit+0x210>)
 800178e:	2200      	movs	r2, #0
 8001790:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001792:	4b23      	ldr	r3, [pc, #140]	@ (8001820 <HAL_SD_MspInit+0x210>)
 8001794:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001798:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800179a:	4b21      	ldr	r3, [pc, #132]	@ (8001820 <HAL_SD_MspInit+0x210>)
 800179c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80017a0:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001820 <HAL_SD_MspInit+0x210>)
 80017a4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80017a8:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80017aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001820 <HAL_SD_MspInit+0x210>)
 80017ac:	2220      	movs	r2, #32
 80017ae:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001820 <HAL_SD_MspInit+0x210>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80017b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001820 <HAL_SD_MspInit+0x210>)
 80017b8:	2204      	movs	r2, #4
 80017ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80017bc:	4b18      	ldr	r3, [pc, #96]	@ (8001820 <HAL_SD_MspInit+0x210>)
 80017be:	2203      	movs	r2, #3
 80017c0:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 80017c2:	4b17      	ldr	r3, [pc, #92]	@ (8001820 <HAL_SD_MspInit+0x210>)
 80017c4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80017c8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80017ca:	4b15      	ldr	r3, [pc, #84]	@ (8001820 <HAL_SD_MspInit+0x210>)
 80017cc:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80017d0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80017d2:	4813      	ldr	r0, [pc, #76]	@ (8001820 <HAL_SD_MspInit+0x210>)
 80017d4:	f000 fb14 	bl	8001e00 <HAL_DMA_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_SD_MspInit+0x1d2>
    {
      Error_Handler();
 80017de:	f7ff fdd5 	bl	800138c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a0e      	ldr	r2, [pc, #56]	@ (8001820 <HAL_SD_MspInit+0x210>)
 80017e6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80017e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001820 <HAL_SD_MspInit+0x210>)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80017ee:	2200      	movs	r2, #0
 80017f0:	2100      	movs	r1, #0
 80017f2:	2031      	movs	r0, #49	@ 0x31
 80017f4:	f000 facd 	bl	8001d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80017f8:	2031      	movs	r0, #49	@ 0x31
 80017fa:	f000 fae6 	bl	8001dca <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 80017fe:	bf00      	nop
 8001800:	37b0      	adds	r7, #176	@ 0xb0
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40012c00 	.word	0x40012c00
 800180c:	40023800 	.word	0x40023800
 8001810:	40020800 	.word	0x40020800
 8001814:	40020c00 	.word	0x40020c00
 8001818:	200001e4 	.word	0x200001e4
 800181c:	40026458 	.word	0x40026458
 8001820:	20000244 	.word	0x20000244
 8001824:	400264a0 	.word	0x400264a0

08001828 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800183c:	4b3a      	ldr	r3, [pc, #232]	@ (8001928 <HAL_FMC_MspInit+0x100>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d16d      	bne.n	8001920 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8001844:	4b38      	ldr	r3, [pc, #224]	@ (8001928 <HAL_FMC_MspInit+0x100>)
 8001846:	2201      	movs	r2, #1
 8001848:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800184a:	4b38      	ldr	r3, [pc, #224]	@ (800192c <HAL_FMC_MspInit+0x104>)
 800184c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800184e:	4a37      	ldr	r2, [pc, #220]	@ (800192c <HAL_FMC_MspInit+0x104>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	6393      	str	r3, [r2, #56]	@ 0x38
 8001856:	4b35      	ldr	r3, [pc, #212]	@ (800192c <HAL_FMC_MspInit+0x104>)
 8001858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	603b      	str	r3, [r7, #0]
 8001860:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8001862:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001866:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001868:	2302      	movs	r3, #2
 800186a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001870:	2303      	movs	r3, #3
 8001872:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001874:	230c      	movs	r3, #12
 8001876:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001878:	1d3b      	adds	r3, r7, #4
 800187a:	4619      	mov	r1, r3
 800187c:	482c      	ldr	r0, [pc, #176]	@ (8001930 <HAL_FMC_MspInit+0x108>)
 800187e:	f001 f85f 	bl	8002940 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8001882:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001886:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001888:	2302      	movs	r3, #2
 800188a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001890:	2303      	movs	r3, #3
 8001892:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001894:	230c      	movs	r3, #12
 8001896:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	4619      	mov	r1, r3
 800189c:	4825      	ldr	r0, [pc, #148]	@ (8001934 <HAL_FMC_MspInit+0x10c>)
 800189e:	f001 f84f 	bl	8002940 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80018a2:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80018a6:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a8:	2302      	movs	r3, #2
 80018aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b0:	2303      	movs	r3, #3
 80018b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018b4:	230c      	movs	r3, #12
 80018b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018b8:	1d3b      	adds	r3, r7, #4
 80018ba:	4619      	mov	r1, r3
 80018bc:	481e      	ldr	r0, [pc, #120]	@ (8001938 <HAL_FMC_MspInit+0x110>)
 80018be:	f001 f83f 	bl	8002940 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80018c2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80018c6:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c8:	2302      	movs	r3, #2
 80018ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d0:	2303      	movs	r3, #3
 80018d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018d4:	230c      	movs	r3, #12
 80018d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	4619      	mov	r1, r3
 80018dc:	4817      	ldr	r0, [pc, #92]	@ (800193c <HAL_FMC_MspInit+0x114>)
 80018de:	f001 f82f 	bl	8002940 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80018e2:	2328      	movs	r3, #40	@ 0x28
 80018e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e6:	2302      	movs	r3, #2
 80018e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ee:	2303      	movs	r3, #3
 80018f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018f2:	230c      	movs	r3, #12
 80018f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018f6:	1d3b      	adds	r3, r7, #4
 80018f8:	4619      	mov	r1, r3
 80018fa:	4811      	ldr	r0, [pc, #68]	@ (8001940 <HAL_FMC_MspInit+0x118>)
 80018fc:	f001 f820 	bl	8002940 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001900:	2308      	movs	r3, #8
 8001902:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001904:	2302      	movs	r3, #2
 8001906:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190c:	2303      	movs	r3, #3
 800190e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001910:	230c      	movs	r3, #12
 8001912:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001914:	1d3b      	adds	r3, r7, #4
 8001916:	4619      	mov	r1, r3
 8001918:	480a      	ldr	r0, [pc, #40]	@ (8001944 <HAL_FMC_MspInit+0x11c>)
 800191a:	f001 f811 	bl	8002940 <HAL_GPIO_Init>
 800191e:	e000      	b.n	8001922 <HAL_FMC_MspInit+0xfa>
    return;
 8001920:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	200002d8 	.word	0x200002d8
 800192c:	40023800 	.word	0x40023800
 8001930:	40021000 	.word	0x40021000
 8001934:	40021800 	.word	0x40021800
 8001938:	40020c00 	.word	0x40020c00
 800193c:	40021400 	.word	0x40021400
 8001940:	40021c00 	.word	0x40021c00
 8001944:	40020800 	.word	0x40020800

08001948 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001950:	f7ff ff6a 	bl	8001828 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001954:	bf00      	nop
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001960:	bf00      	nop
 8001962:	e7fd      	b.n	8001960 <NMI_Handler+0x4>

08001964 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001968:	bf00      	nop
 800196a:	e7fd      	b.n	8001968 <HardFault_Handler+0x4>

0800196c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001970:	bf00      	nop
 8001972:	e7fd      	b.n	8001970 <MemManage_Handler+0x4>

08001974 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001978:	bf00      	nop
 800197a:	e7fd      	b.n	8001978 <BusFault_Handler+0x4>

0800197c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001980:	bf00      	nop
 8001982:	e7fd      	b.n	8001980 <UsageFault_Handler+0x4>

08001984 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019b2:	f000 f8cf 	bl	8001b54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80019c0:	4802      	ldr	r0, [pc, #8]	@ (80019cc <SDMMC1_IRQHandler+0x10>)
 80019c2:	f002 ff09 	bl	80047d8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000160 	.word	0x20000160

080019d0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 80019d4:	4802      	ldr	r0, [pc, #8]	@ (80019e0 <DMA2_Stream3_IRQHandler+0x10>)
 80019d6:	f000 fb43 	bl	8002060 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	200001e4 	.word	0x200001e4

080019e4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 80019e8:	4802      	ldr	r0, [pc, #8]	@ (80019f4 <DMA2_Stream6_IRQHandler+0x10>)
 80019ea:	f000 fb39 	bl	8002060 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000244 	.word	0x20000244

080019f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a00:	4a14      	ldr	r2, [pc, #80]	@ (8001a54 <_sbrk+0x5c>)
 8001a02:	4b15      	ldr	r3, [pc, #84]	@ (8001a58 <_sbrk+0x60>)
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a0c:	4b13      	ldr	r3, [pc, #76]	@ (8001a5c <_sbrk+0x64>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d102      	bne.n	8001a1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a14:	4b11      	ldr	r3, [pc, #68]	@ (8001a5c <_sbrk+0x64>)
 8001a16:	4a12      	ldr	r2, [pc, #72]	@ (8001a60 <_sbrk+0x68>)
 8001a18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a1a:	4b10      	ldr	r3, [pc, #64]	@ (8001a5c <_sbrk+0x64>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4413      	add	r3, r2
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d207      	bcs.n	8001a38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a28:	f007 f94e 	bl	8008cc8 <__errno>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	220c      	movs	r2, #12
 8001a30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a32:	f04f 33ff 	mov.w	r3, #4294967295
 8001a36:	e009      	b.n	8001a4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a38:	4b08      	ldr	r3, [pc, #32]	@ (8001a5c <_sbrk+0x64>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a3e:	4b07      	ldr	r3, [pc, #28]	@ (8001a5c <_sbrk+0x64>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4413      	add	r3, r2
 8001a46:	4a05      	ldr	r2, [pc, #20]	@ (8001a5c <_sbrk+0x64>)
 8001a48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20050000 	.word	0x20050000
 8001a58:	00000800 	.word	0x00000800
 8001a5c:	200002dc 	.word	0x200002dc
 8001a60:	200006a0 	.word	0x200006a0

08001a64 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a68:	4b06      	ldr	r3, [pc, #24]	@ (8001a84 <SystemInit+0x20>)
 8001a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a6e:	4a05      	ldr	r2, [pc, #20]	@ (8001a84 <SystemInit+0x20>)
 8001a70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ac0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a8c:	f7ff ffea 	bl	8001a64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a90:	480c      	ldr	r0, [pc, #48]	@ (8001ac4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a92:	490d      	ldr	r1, [pc, #52]	@ (8001ac8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a94:	4a0d      	ldr	r2, [pc, #52]	@ (8001acc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a98:	e002      	b.n	8001aa0 <LoopCopyDataInit>

08001a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a9e:	3304      	adds	r3, #4

08001aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa4:	d3f9      	bcc.n	8001a9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001aa8:	4c0a      	ldr	r4, [pc, #40]	@ (8001ad4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aac:	e001      	b.n	8001ab2 <LoopFillZerobss>

08001aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab0:	3204      	adds	r2, #4

08001ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab4:	d3fb      	bcc.n	8001aae <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001ab6:	f007 f90d 	bl	8008cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aba:	f7fe fe67 	bl	800078c <main>
  bx  lr    
 8001abe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ac0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001acc:	08009728 	.word	0x08009728
  ldr r2, =_sbss
 8001ad0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001ad4:	200006a0 	.word	0x200006a0

08001ad8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ad8:	e7fe      	b.n	8001ad8 <ADC_IRQHandler>

08001ada <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ade:	2003      	movs	r0, #3
 8001ae0:	f000 f94c 	bl	8001d7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	f000 f805 	bl	8001af4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aea:	f7ff fc55 	bl	8001398 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001afc:	4b12      	ldr	r3, [pc, #72]	@ (8001b48 <HAL_InitTick+0x54>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	4b12      	ldr	r3, [pc, #72]	@ (8001b4c <HAL_InitTick+0x58>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	4619      	mov	r1, r3
 8001b06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b12:	4618      	mov	r0, r3
 8001b14:	f000 f967 	bl	8001de6 <HAL_SYSTICK_Config>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e00e      	b.n	8001b40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b0f      	cmp	r3, #15
 8001b26:	d80a      	bhi.n	8001b3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b30:	f000 f92f 	bl	8001d92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b34:	4a06      	ldr	r2, [pc, #24]	@ (8001b50 <HAL_InitTick+0x5c>)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	e000      	b.n	8001b40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20000000 	.word	0x20000000
 8001b4c:	20000008 	.word	0x20000008
 8001b50:	20000004 	.word	0x20000004

08001b54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b58:	4b06      	ldr	r3, [pc, #24]	@ (8001b74 <HAL_IncTick+0x20>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	4b06      	ldr	r3, [pc, #24]	@ (8001b78 <HAL_IncTick+0x24>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4413      	add	r3, r2
 8001b64:	4a04      	ldr	r2, [pc, #16]	@ (8001b78 <HAL_IncTick+0x24>)
 8001b66:	6013      	str	r3, [r2, #0]
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	20000008 	.word	0x20000008
 8001b78:	200002e0 	.word	0x200002e0

08001b7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b80:	4b03      	ldr	r3, [pc, #12]	@ (8001b90 <HAL_GetTick+0x14>)
 8001b82:	681b      	ldr	r3, [r3, #0]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	200002e0 	.word	0x200002e0

08001b94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b9c:	f7ff ffee 	bl	8001b7c <HAL_GetTick>
 8001ba0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bac:	d005      	beq.n	8001bba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bae:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd8 <HAL_Delay+0x44>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bba:	bf00      	nop
 8001bbc:	f7ff ffde 	bl	8001b7c <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d8f7      	bhi.n	8001bbc <HAL_Delay+0x28>
  {
  }
}
 8001bcc:	bf00      	nop
 8001bce:	bf00      	nop
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000008 	.word	0x20000008

08001bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bec:	4b0b      	ldr	r3, [pc, #44]	@ (8001c1c <__NVIC_SetPriorityGrouping+0x40>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bf2:	68ba      	ldr	r2, [r7, #8]
 8001bf4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c04:	4b06      	ldr	r3, [pc, #24]	@ (8001c20 <__NVIC_SetPriorityGrouping+0x44>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c0a:	4a04      	ldr	r2, [pc, #16]	@ (8001c1c <__NVIC_SetPriorityGrouping+0x40>)
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	60d3      	str	r3, [r2, #12]
}
 8001c10:	bf00      	nop
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	e000ed00 	.word	0xe000ed00
 8001c20:	05fa0000 	.word	0x05fa0000

08001c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c28:	4b04      	ldr	r3, [pc, #16]	@ (8001c3c <__NVIC_GetPriorityGrouping+0x18>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	0a1b      	lsrs	r3, r3, #8
 8001c2e:	f003 0307 	and.w	r3, r3, #7
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	db0b      	blt.n	8001c6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	f003 021f 	and.w	r2, r3, #31
 8001c58:	4907      	ldr	r1, [pc, #28]	@ (8001c78 <__NVIC_EnableIRQ+0x38>)
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5e:	095b      	lsrs	r3, r3, #5
 8001c60:	2001      	movs	r0, #1
 8001c62:	fa00 f202 	lsl.w	r2, r0, r2
 8001c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	e000e100 	.word	0xe000e100

08001c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	6039      	str	r1, [r7, #0]
 8001c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	db0a      	blt.n	8001ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	490c      	ldr	r1, [pc, #48]	@ (8001cc8 <__NVIC_SetPriority+0x4c>)
 8001c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9a:	0112      	lsls	r2, r2, #4
 8001c9c:	b2d2      	uxtb	r2, r2
 8001c9e:	440b      	add	r3, r1
 8001ca0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ca4:	e00a      	b.n	8001cbc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	4908      	ldr	r1, [pc, #32]	@ (8001ccc <__NVIC_SetPriority+0x50>)
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	3b04      	subs	r3, #4
 8001cb4:	0112      	lsls	r2, r2, #4
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	440b      	add	r3, r1
 8001cba:	761a      	strb	r2, [r3, #24]
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	e000e100 	.word	0xe000e100
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b089      	sub	sp, #36	@ 0x24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f1c3 0307 	rsb	r3, r3, #7
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	bf28      	it	cs
 8001cee:	2304      	movcs	r3, #4
 8001cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	2b06      	cmp	r3, #6
 8001cf8:	d902      	bls.n	8001d00 <NVIC_EncodePriority+0x30>
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	3b03      	subs	r3, #3
 8001cfe:	e000      	b.n	8001d02 <NVIC_EncodePriority+0x32>
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d04:	f04f 32ff 	mov.w	r2, #4294967295
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43da      	mvns	r2, r3
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	401a      	ands	r2, r3
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d18:	f04f 31ff 	mov.w	r1, #4294967295
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d22:	43d9      	mvns	r1, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d28:	4313      	orrs	r3, r2
         );
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3724      	adds	r7, #36	@ 0x24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
	...

08001d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3b01      	subs	r3, #1
 8001d44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d48:	d301      	bcc.n	8001d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e00f      	b.n	8001d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d78 <SysTick_Config+0x40>)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d56:	210f      	movs	r1, #15
 8001d58:	f04f 30ff 	mov.w	r0, #4294967295
 8001d5c:	f7ff ff8e 	bl	8001c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d60:	4b05      	ldr	r3, [pc, #20]	@ (8001d78 <SysTick_Config+0x40>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d66:	4b04      	ldr	r3, [pc, #16]	@ (8001d78 <SysTick_Config+0x40>)
 8001d68:	2207      	movs	r2, #7
 8001d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	e000e010 	.word	0xe000e010

08001d7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f7ff ff29 	bl	8001bdc <__NVIC_SetPriorityGrouping>
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b086      	sub	sp, #24
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	4603      	mov	r3, r0
 8001d9a:	60b9      	str	r1, [r7, #8]
 8001d9c:	607a      	str	r2, [r7, #4]
 8001d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001da4:	f7ff ff3e 	bl	8001c24 <__NVIC_GetPriorityGrouping>
 8001da8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	68b9      	ldr	r1, [r7, #8]
 8001dae:	6978      	ldr	r0, [r7, #20]
 8001db0:	f7ff ff8e 	bl	8001cd0 <NVIC_EncodePriority>
 8001db4:	4602      	mov	r2, r0
 8001db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dba:	4611      	mov	r1, r2
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff5d 	bl	8001c7c <__NVIC_SetPriority>
}
 8001dc2:	bf00      	nop
 8001dc4:	3718      	adds	r7, #24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b082      	sub	sp, #8
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff ff31 	bl	8001c40 <__NVIC_EnableIRQ>
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7ff ffa2 	bl	8001d38 <SysTick_Config>
 8001df4:	4603      	mov	r3, r0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
	...

08001e00 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e0c:	f7ff feb6 	bl	8001b7c <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d101      	bne.n	8001e1c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e099      	b.n	8001f50 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2202      	movs	r2, #2
 8001e20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 0201 	bic.w	r2, r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e3c:	e00f      	b.n	8001e5e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e3e:	f7ff fe9d 	bl	8001b7c <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b05      	cmp	r3, #5
 8001e4a:	d908      	bls.n	8001e5e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2220      	movs	r2, #32
 8001e50:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2203      	movs	r2, #3
 8001e56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e078      	b.n	8001f50 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1e8      	bne.n	8001e3e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	4b38      	ldr	r3, [pc, #224]	@ (8001f58 <HAL_DMA_Init+0x158>)
 8001e78:	4013      	ands	r3, r2
 8001e7a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ea2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb4:	2b04      	cmp	r3, #4
 8001eb6:	d107      	bne.n	8001ec8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	f023 0307 	bic.w	r3, r3, #7
 8001ede:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eee:	2b04      	cmp	r3, #4
 8001ef0:	d117      	bne.n	8001f22 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00e      	beq.n	8001f22 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 faa5 	bl	8002454 <DMA_CheckFifoParam>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d008      	beq.n	8001f22 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2240      	movs	r2, #64	@ 0x40
 8001f14:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e016      	b.n	8001f50 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 fa5c 	bl	80023e8 <DMA_CalcBaseAndBitshift>
 8001f30:	4603      	mov	r3, r0
 8001f32:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f38:	223f      	movs	r2, #63	@ 0x3f
 8001f3a:	409a      	lsls	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	f010803f 	.word	0xf010803f

08001f5c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
 8001f68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f72:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d101      	bne.n	8001f82 <HAL_DMA_Start_IT+0x26>
 8001f7e:	2302      	movs	r3, #2
 8001f80:	e048      	b.n	8002014 <HAL_DMA_Start_IT+0xb8>
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d137      	bne.n	8002006 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2202      	movs	r2, #2
 8001f9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	68b9      	ldr	r1, [r7, #8]
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f000 f9ee 	bl	800238c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fb4:	223f      	movs	r2, #63	@ 0x3f
 8001fb6:	409a      	lsls	r2, r3
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f042 0216 	orr.w	r2, r2, #22
 8001fca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	695a      	ldr	r2, [r3, #20]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001fda:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d007      	beq.n	8001ff4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f042 0208 	orr.w	r2, r2, #8
 8001ff2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 0201 	orr.w	r2, r2, #1
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	e005      	b.n	8002012 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800200e:	2302      	movs	r3, #2
 8002010:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002012:	7dfb      	ldrb	r3, [r7, #23]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3718      	adds	r7, #24
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800202a:	b2db      	uxtb	r3, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d004      	beq.n	800203a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2280      	movs	r2, #128	@ 0x80
 8002034:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e00c      	b.n	8002054 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2205      	movs	r2, #5
 800203e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 0201 	bic.w	r2, r2, #1
 8002050:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002068:	2300      	movs	r3, #0
 800206a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800206c:	4b8e      	ldr	r3, [pc, #568]	@ (80022a8 <HAL_DMA_IRQHandler+0x248>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a8e      	ldr	r2, [pc, #568]	@ (80022ac <HAL_DMA_IRQHandler+0x24c>)
 8002072:	fba2 2303 	umull	r2, r3, r2, r3
 8002076:	0a9b      	lsrs	r3, r3, #10
 8002078:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800207e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800208a:	2208      	movs	r2, #8
 800208c:	409a      	lsls	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	4013      	ands	r3, r2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d01a      	beq.n	80020cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d013      	beq.n	80020cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f022 0204 	bic.w	r2, r2, #4
 80020b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b8:	2208      	movs	r2, #8
 80020ba:	409a      	lsls	r2, r3
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c4:	f043 0201 	orr.w	r2, r3, #1
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d0:	2201      	movs	r2, #1
 80020d2:	409a      	lsls	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4013      	ands	r3, r2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d012      	beq.n	8002102 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00b      	beq.n	8002102 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ee:	2201      	movs	r2, #1
 80020f0:	409a      	lsls	r2, r3
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020fa:	f043 0202 	orr.w	r2, r3, #2
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002106:	2204      	movs	r2, #4
 8002108:	409a      	lsls	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	4013      	ands	r3, r2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d012      	beq.n	8002138 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00b      	beq.n	8002138 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002124:	2204      	movs	r2, #4
 8002126:	409a      	lsls	r2, r3
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002130:	f043 0204 	orr.w	r2, r3, #4
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800213c:	2210      	movs	r2, #16
 800213e:	409a      	lsls	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4013      	ands	r3, r2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d043      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0308 	and.w	r3, r3, #8
 8002152:	2b00      	cmp	r3, #0
 8002154:	d03c      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800215a:	2210      	movs	r2, #16
 800215c:	409a      	lsls	r2, r3
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d018      	beq.n	80021a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d108      	bne.n	8002190 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002182:	2b00      	cmp	r3, #0
 8002184:	d024      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	4798      	blx	r3
 800218e:	e01f      	b.n	80021d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002194:	2b00      	cmp	r3, #0
 8002196:	d01b      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	4798      	blx	r3
 80021a0:	e016      	b.n	80021d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d107      	bne.n	80021c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0208 	bic.w	r2, r2, #8
 80021be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d4:	2220      	movs	r2, #32
 80021d6:	409a      	lsls	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4013      	ands	r3, r2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f000 808f 	beq.w	8002300 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0310 	and.w	r3, r3, #16
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 8087 	beq.w	8002300 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021f6:	2220      	movs	r2, #32
 80021f8:	409a      	lsls	r2, r3
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b05      	cmp	r3, #5
 8002208:	d136      	bne.n	8002278 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 0216 	bic.w	r2, r2, #22
 8002218:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	695a      	ldr	r2, [r3, #20]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002228:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222e:	2b00      	cmp	r3, #0
 8002230:	d103      	bne.n	800223a <HAL_DMA_IRQHandler+0x1da>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002236:	2b00      	cmp	r3, #0
 8002238:	d007      	beq.n	800224a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 0208 	bic.w	r2, r2, #8
 8002248:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800224e:	223f      	movs	r2, #63	@ 0x3f
 8002250:	409a      	lsls	r2, r3
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800226a:	2b00      	cmp	r3, #0
 800226c:	d07e      	beq.n	800236c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	4798      	blx	r3
        }
        return;
 8002276:	e079      	b.n	800236c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d01d      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10d      	bne.n	80022b0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002298:	2b00      	cmp	r3, #0
 800229a:	d031      	beq.n	8002300 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	4798      	blx	r3
 80022a4:	e02c      	b.n	8002300 <HAL_DMA_IRQHandler+0x2a0>
 80022a6:	bf00      	nop
 80022a8:	20000000 	.word	0x20000000
 80022ac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d023      	beq.n	8002300 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	4798      	blx	r3
 80022c0:	e01e      	b.n	8002300 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10f      	bne.n	80022f0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 0210 	bic.w	r2, r2, #16
 80022de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002304:	2b00      	cmp	r3, #0
 8002306:	d032      	beq.n	800236e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b00      	cmp	r3, #0
 8002312:	d022      	beq.n	800235a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2205      	movs	r2, #5
 8002318:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0201 	bic.w	r2, r2, #1
 800232a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	3301      	adds	r3, #1
 8002330:	60bb      	str	r3, [r7, #8]
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	429a      	cmp	r2, r3
 8002336:	d307      	bcc.n	8002348 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f2      	bne.n	800232c <HAL_DMA_IRQHandler+0x2cc>
 8002346:	e000      	b.n	800234a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002348:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800235e:	2b00      	cmp	r3, #0
 8002360:	d005      	beq.n	800236e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	4798      	blx	r3
 800236a:	e000      	b.n	800236e <HAL_DMA_IRQHandler+0x30e>
        return;
 800236c:	bf00      	nop
    }
  }
}
 800236e:	3718      	adds	r7, #24
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002380:	4618      	mov	r0, r3
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
 8002398:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80023a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	2b40      	cmp	r3, #64	@ 0x40
 80023b8:	d108      	bne.n	80023cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80023ca:	e007      	b.n	80023dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68ba      	ldr	r2, [r7, #8]
 80023d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	60da      	str	r2, [r3, #12]
}
 80023dc:	bf00      	nop
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	3b10      	subs	r3, #16
 80023f8:	4a13      	ldr	r2, [pc, #76]	@ (8002448 <DMA_CalcBaseAndBitshift+0x60>)
 80023fa:	fba2 2303 	umull	r2, r3, r2, r3
 80023fe:	091b      	lsrs	r3, r3, #4
 8002400:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002402:	4a12      	ldr	r2, [pc, #72]	@ (800244c <DMA_CalcBaseAndBitshift+0x64>)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	4413      	add	r3, r2
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	461a      	mov	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2b03      	cmp	r3, #3
 8002414:	d908      	bls.n	8002428 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	461a      	mov	r2, r3
 800241c:	4b0c      	ldr	r3, [pc, #48]	@ (8002450 <DMA_CalcBaseAndBitshift+0x68>)
 800241e:	4013      	ands	r3, r2
 8002420:	1d1a      	adds	r2, r3, #4
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	659a      	str	r2, [r3, #88]	@ 0x58
 8002426:	e006      	b.n	8002436 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	461a      	mov	r2, r3
 800242e:	4b08      	ldr	r3, [pc, #32]	@ (8002450 <DMA_CalcBaseAndBitshift+0x68>)
 8002430:	4013      	ands	r3, r2
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800243a:	4618      	mov	r0, r3
 800243c:	3714      	adds	r7, #20
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	aaaaaaab 	.word	0xaaaaaaab
 800244c:	08009648 	.word	0x08009648
 8002450:	fffffc00 	.word	0xfffffc00

08002454 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800245c:	2300      	movs	r3, #0
 800245e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002464:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d11f      	bne.n	80024ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	2b03      	cmp	r3, #3
 8002472:	d856      	bhi.n	8002522 <DMA_CheckFifoParam+0xce>
 8002474:	a201      	add	r2, pc, #4	@ (adr r2, 800247c <DMA_CheckFifoParam+0x28>)
 8002476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800247a:	bf00      	nop
 800247c:	0800248d 	.word	0x0800248d
 8002480:	0800249f 	.word	0x0800249f
 8002484:	0800248d 	.word	0x0800248d
 8002488:	08002523 	.word	0x08002523
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002490:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d046      	beq.n	8002526 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800249c:	e043      	b.n	8002526 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80024a6:	d140      	bne.n	800252a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024ac:	e03d      	b.n	800252a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024b6:	d121      	bne.n	80024fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	2b03      	cmp	r3, #3
 80024bc:	d837      	bhi.n	800252e <DMA_CheckFifoParam+0xda>
 80024be:	a201      	add	r2, pc, #4	@ (adr r2, 80024c4 <DMA_CheckFifoParam+0x70>)
 80024c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c4:	080024d5 	.word	0x080024d5
 80024c8:	080024db 	.word	0x080024db
 80024cc:	080024d5 	.word	0x080024d5
 80024d0:	080024ed 	.word	0x080024ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	73fb      	strb	r3, [r7, #15]
      break;
 80024d8:	e030      	b.n	800253c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d025      	beq.n	8002532 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024ea:	e022      	b.n	8002532 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80024f4:	d11f      	bne.n	8002536 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024fa:	e01c      	b.n	8002536 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d903      	bls.n	800250a <DMA_CheckFifoParam+0xb6>
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2b03      	cmp	r3, #3
 8002506:	d003      	beq.n	8002510 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002508:	e018      	b.n	800253c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	73fb      	strb	r3, [r7, #15]
      break;
 800250e:	e015      	b.n	800253c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002514:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00e      	beq.n	800253a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	73fb      	strb	r3, [r7, #15]
      break;
 8002520:	e00b      	b.n	800253a <DMA_CheckFifoParam+0xe6>
      break;
 8002522:	bf00      	nop
 8002524:	e00a      	b.n	800253c <DMA_CheckFifoParam+0xe8>
      break;
 8002526:	bf00      	nop
 8002528:	e008      	b.n	800253c <DMA_CheckFifoParam+0xe8>
      break;
 800252a:	bf00      	nop
 800252c:	e006      	b.n	800253c <DMA_CheckFifoParam+0xe8>
      break;
 800252e:	bf00      	nop
 8002530:	e004      	b.n	800253c <DMA_CheckFifoParam+0xe8>
      break;
 8002532:	bf00      	nop
 8002534:	e002      	b.n	800253c <DMA_CheckFifoParam+0xe8>
      break;   
 8002536:	bf00      	nop
 8002538:	e000      	b.n	800253c <DMA_CheckFifoParam+0xe8>
      break;
 800253a:	bf00      	nop
    }
  } 
  
  return status; 
 800253c:	7bfb      	ldrb	r3, [r7, #15]
}
 800253e:	4618      	mov	r0, r3
 8002540:	3714      	adds	r7, #20
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop

0800254c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e039      	b.n	80025d2 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d106      	bne.n	8002578 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7fe ff34 	bl	80013e0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2202      	movs	r2, #2
 800257c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	430a      	orrs	r2, r1
 8002594:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800259c:	f023 0107 	bic.w	r1, r3, #7
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025b2:	4b0a      	ldr	r3, [pc, #40]	@ (80025dc <HAL_DMA2D_Init+0x90>)
 80025b4:	4013      	ands	r3, r2
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	68d1      	ldr	r1, [r2, #12]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6812      	ldr	r2, [r2, #0]
 80025be:	430b      	orrs	r3, r1
 80025c0:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	ffffc000 	.word	0xffffc000

080025e0 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af02      	add	r7, sp, #8
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
 80025ec:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d101      	bne.n	80025fc <HAL_DMA2D_Start+0x1c>
 80025f8:	2302      	movs	r3, #2
 80025fa:	e018      	b.n	800262e <HAL_DMA2D_Start+0x4e>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2202      	movs	r2, #2
 8002608:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	68b9      	ldr	r1, [r7, #8]
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 f8f6 	bl	8002808 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f042 0201 	orr.w	r2, r2, #1
 800262a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b086      	sub	sp, #24
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
 800263e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8002640:	2300      	movs	r3, #0
 8002642:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d056      	beq.n	8002700 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002652:	f7ff fa93 	bl	8001b7c <HAL_GetTick>
 8002656:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002658:	e04b      	b.n	80026f2 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8002668:	2b00      	cmp	r3, #0
 800266a:	d023      	beq.n	80026b4 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f003 0320 	and.w	r3, r3, #32
 8002672:	2b00      	cmp	r3, #0
 8002674:	d005      	beq.n	8002682 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800267a:	f043 0202 	orr.w	r2, r3, #2
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b00      	cmp	r3, #0
 800268a:	d005      	beq.n	8002698 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002690:	f043 0201 	orr.w	r2, r3, #1
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2221      	movs	r2, #33	@ 0x21
 800269e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2204      	movs	r2, #4
 80026a4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e0a5      	b.n	8002800 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ba:	d01a      	beq.n	80026f2 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026bc:	f7ff fa5e 	bl	8001b7c <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d302      	bcc.n	80026d2 <HAL_DMA2D_PollForTransfer+0x9c>
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10f      	bne.n	80026f2 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026d6:	f043 0220 	orr.w	r2, r3, #32
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2203      	movs	r2, #3
 80026e2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e086      	b.n	8002800 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0ac      	beq.n	800265a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	f003 0320 	and.w	r3, r3, #32
 800270a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002712:	f003 0320 	and.w	r3, r3, #32
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	4313      	orrs	r3, r2
 800271a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d061      	beq.n	80027e6 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002722:	f7ff fa2b 	bl	8001b7c <HAL_GetTick>
 8002726:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002728:	e056      	b.n	80027d8 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8002738:	2b00      	cmp	r3, #0
 800273a:	d02e      	beq.n	800279a <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f003 0308 	and.w	r3, r3, #8
 8002742:	2b00      	cmp	r3, #0
 8002744:	d005      	beq.n	8002752 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800274a:	f043 0204 	orr.w	r2, r3, #4
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f003 0320 	and.w	r3, r3, #32
 8002758:	2b00      	cmp	r3, #0
 800275a:	d005      	beq.n	8002768 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002760:	f043 0202 	orr.w	r2, r3, #2
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d005      	beq.n	800277e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002776:	f043 0201 	orr.w	r2, r3, #1
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2229      	movs	r2, #41	@ 0x29
 8002784:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2204      	movs	r2, #4
 800278a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e032      	b.n	8002800 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a0:	d01a      	beq.n	80027d8 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80027a2:	f7ff f9eb 	bl	8001b7c <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d302      	bcc.n	80027b8 <HAL_DMA2D_PollForTransfer+0x182>
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10f      	bne.n	80027d8 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027bc:	f043 0220 	orr.w	r2, r3, #32
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2203      	movs	r2, #3
 80027c8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e013      	b.n	8002800 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f003 0310 	and.w	r3, r3, #16
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0a1      	beq.n	800272a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2212      	movs	r2, #18
 80027ec:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8002808:	b480      	push	{r7}
 800280a:	b08b      	sub	sp, #44	@ 0x2c
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
 8002814:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281c:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	041a      	lsls	r2, r3, #16
 8002824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002826:	431a      	orrs	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	430a      	orrs	r2, r1
 800282e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002840:	d174      	bne.n	800292c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002848:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002850:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002858:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	b2db      	uxtb	r3, r3
 800285e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d108      	bne.n	800287a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	431a      	orrs	r2, r3
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	4313      	orrs	r3, r2
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	4313      	orrs	r3, r2
 8002876:	627b      	str	r3, [r7, #36]	@ 0x24
 8002878:	e053      	b.n	8002922 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d106      	bne.n	8002890 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	4313      	orrs	r3, r2
 8002888:	697a      	ldr	r2, [r7, #20]
 800288a:	4313      	orrs	r3, r2
 800288c:	627b      	str	r3, [r7, #36]	@ 0x24
 800288e:	e048      	b.n	8002922 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d111      	bne.n	80028bc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	0cdb      	lsrs	r3, r3, #19
 800289c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	0a9b      	lsrs	r3, r3, #10
 80028a2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	08db      	lsrs	r3, r3, #3
 80028a8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	015a      	lsls	r2, r3, #5
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	02db      	lsls	r3, r3, #11
 80028b2:	4313      	orrs	r3, r2
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80028ba:	e032      	b.n	8002922 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	2b03      	cmp	r3, #3
 80028c2:	d117      	bne.n	80028f4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80028c4:	6a3b      	ldr	r3, [r7, #32]
 80028c6:	0fdb      	lsrs	r3, r3, #31
 80028c8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	0cdb      	lsrs	r3, r3, #19
 80028ce:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	0adb      	lsrs	r3, r3, #11
 80028d4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	08db      	lsrs	r3, r3, #3
 80028da:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	015a      	lsls	r2, r3, #5
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	029b      	lsls	r3, r3, #10
 80028e4:	431a      	orrs	r2, r3
 80028e6:	6a3b      	ldr	r3, [r7, #32]
 80028e8:	03db      	lsls	r3, r3, #15
 80028ea:	4313      	orrs	r3, r2
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80028f2:	e016      	b.n	8002922 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80028f4:	6a3b      	ldr	r3, [r7, #32]
 80028f6:	0f1b      	lsrs	r3, r3, #28
 80028f8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	0d1b      	lsrs	r3, r3, #20
 80028fe:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	0b1b      	lsrs	r3, r3, #12
 8002904:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	091b      	lsrs	r3, r3, #4
 800290a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	011a      	lsls	r2, r3, #4
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	021b      	lsls	r3, r3, #8
 8002914:	431a      	orrs	r2, r3
 8002916:	6a3b      	ldr	r3, [r7, #32]
 8002918:	031b      	lsls	r3, r3, #12
 800291a:	4313      	orrs	r3, r2
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	4313      	orrs	r3, r2
 8002920:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002928:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800292a:	e003      	b.n	8002934 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	60da      	str	r2, [r3, #12]
}
 8002934:	bf00      	nop
 8002936:	372c      	adds	r7, #44	@ 0x2c
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002940:	b480      	push	{r7}
 8002942:	b089      	sub	sp, #36	@ 0x24
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800294a:	2300      	movs	r3, #0
 800294c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002952:	2300      	movs	r3, #0
 8002954:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002956:	2300      	movs	r3, #0
 8002958:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800295a:	2300      	movs	r3, #0
 800295c:	61fb      	str	r3, [r7, #28]
 800295e:	e175      	b.n	8002c4c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002960:	2201      	movs	r2, #1
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	4013      	ands	r3, r2
 8002972:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	429a      	cmp	r2, r3
 800297a:	f040 8164 	bne.w	8002c46 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	2b01      	cmp	r3, #1
 8002988:	d005      	beq.n	8002996 <HAL_GPIO_Init+0x56>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f003 0303 	and.w	r3, r3, #3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d130      	bne.n	80029f8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	2203      	movs	r2, #3
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	43db      	mvns	r3, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4013      	ands	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4313      	orrs	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029cc:	2201      	movs	r2, #1
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	43db      	mvns	r3, r3
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4013      	ands	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	091b      	lsrs	r3, r3, #4
 80029e2:	f003 0201 	and.w	r2, r3, #1
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 0303 	and.w	r3, r3, #3
 8002a00:	2b03      	cmp	r3, #3
 8002a02:	d017      	beq.n	8002a34 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	2203      	movs	r2, #3
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	43db      	mvns	r3, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 0303 	and.w	r3, r3, #3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d123      	bne.n	8002a88 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	08da      	lsrs	r2, r3, #3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3208      	adds	r2, #8
 8002a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	220f      	movs	r2, #15
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4013      	ands	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	691a      	ldr	r2, [r3, #16]
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	08da      	lsrs	r2, r3, #3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	3208      	adds	r2, #8
 8002a82:	69b9      	ldr	r1, [r7, #24]
 8002a84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	2203      	movs	r2, #3
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 0203 	and.w	r2, r3, #3
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 80be 	beq.w	8002c46 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aca:	4b66      	ldr	r3, [pc, #408]	@ (8002c64 <HAL_GPIO_Init+0x324>)
 8002acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ace:	4a65      	ldr	r2, [pc, #404]	@ (8002c64 <HAL_GPIO_Init+0x324>)
 8002ad0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ad4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ad6:	4b63      	ldr	r3, [pc, #396]	@ (8002c64 <HAL_GPIO_Init+0x324>)
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ada:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002ae2:	4a61      	ldr	r2, [pc, #388]	@ (8002c68 <HAL_GPIO_Init+0x328>)
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	089b      	lsrs	r3, r3, #2
 8002ae8:	3302      	adds	r3, #2
 8002aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f003 0303 	and.w	r3, r3, #3
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	220f      	movs	r2, #15
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	43db      	mvns	r3, r3
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	4013      	ands	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a58      	ldr	r2, [pc, #352]	@ (8002c6c <HAL_GPIO_Init+0x32c>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d037      	beq.n	8002b7e <HAL_GPIO_Init+0x23e>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a57      	ldr	r2, [pc, #348]	@ (8002c70 <HAL_GPIO_Init+0x330>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d031      	beq.n	8002b7a <HAL_GPIO_Init+0x23a>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a56      	ldr	r2, [pc, #344]	@ (8002c74 <HAL_GPIO_Init+0x334>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d02b      	beq.n	8002b76 <HAL_GPIO_Init+0x236>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a55      	ldr	r2, [pc, #340]	@ (8002c78 <HAL_GPIO_Init+0x338>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d025      	beq.n	8002b72 <HAL_GPIO_Init+0x232>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a54      	ldr	r2, [pc, #336]	@ (8002c7c <HAL_GPIO_Init+0x33c>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d01f      	beq.n	8002b6e <HAL_GPIO_Init+0x22e>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a53      	ldr	r2, [pc, #332]	@ (8002c80 <HAL_GPIO_Init+0x340>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d019      	beq.n	8002b6a <HAL_GPIO_Init+0x22a>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a52      	ldr	r2, [pc, #328]	@ (8002c84 <HAL_GPIO_Init+0x344>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d013      	beq.n	8002b66 <HAL_GPIO_Init+0x226>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a51      	ldr	r2, [pc, #324]	@ (8002c88 <HAL_GPIO_Init+0x348>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d00d      	beq.n	8002b62 <HAL_GPIO_Init+0x222>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a50      	ldr	r2, [pc, #320]	@ (8002c8c <HAL_GPIO_Init+0x34c>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d007      	beq.n	8002b5e <HAL_GPIO_Init+0x21e>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a4f      	ldr	r2, [pc, #316]	@ (8002c90 <HAL_GPIO_Init+0x350>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d101      	bne.n	8002b5a <HAL_GPIO_Init+0x21a>
 8002b56:	2309      	movs	r3, #9
 8002b58:	e012      	b.n	8002b80 <HAL_GPIO_Init+0x240>
 8002b5a:	230a      	movs	r3, #10
 8002b5c:	e010      	b.n	8002b80 <HAL_GPIO_Init+0x240>
 8002b5e:	2308      	movs	r3, #8
 8002b60:	e00e      	b.n	8002b80 <HAL_GPIO_Init+0x240>
 8002b62:	2307      	movs	r3, #7
 8002b64:	e00c      	b.n	8002b80 <HAL_GPIO_Init+0x240>
 8002b66:	2306      	movs	r3, #6
 8002b68:	e00a      	b.n	8002b80 <HAL_GPIO_Init+0x240>
 8002b6a:	2305      	movs	r3, #5
 8002b6c:	e008      	b.n	8002b80 <HAL_GPIO_Init+0x240>
 8002b6e:	2304      	movs	r3, #4
 8002b70:	e006      	b.n	8002b80 <HAL_GPIO_Init+0x240>
 8002b72:	2303      	movs	r3, #3
 8002b74:	e004      	b.n	8002b80 <HAL_GPIO_Init+0x240>
 8002b76:	2302      	movs	r3, #2
 8002b78:	e002      	b.n	8002b80 <HAL_GPIO_Init+0x240>
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e000      	b.n	8002b80 <HAL_GPIO_Init+0x240>
 8002b7e:	2300      	movs	r3, #0
 8002b80:	69fa      	ldr	r2, [r7, #28]
 8002b82:	f002 0203 	and.w	r2, r2, #3
 8002b86:	0092      	lsls	r2, r2, #2
 8002b88:	4093      	lsls	r3, r2
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002b90:	4935      	ldr	r1, [pc, #212]	@ (8002c68 <HAL_GPIO_Init+0x328>)
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	089b      	lsrs	r3, r3, #2
 8002b96:	3302      	adds	r3, #2
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b9e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c94 <HAL_GPIO_Init+0x354>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4013      	ands	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bc2:	4a34      	ldr	r2, [pc, #208]	@ (8002c94 <HAL_GPIO_Init+0x354>)
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bc8:	4b32      	ldr	r3, [pc, #200]	@ (8002c94 <HAL_GPIO_Init+0x354>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bec:	4a29      	ldr	r2, [pc, #164]	@ (8002c94 <HAL_GPIO_Init+0x354>)
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bf2:	4b28      	ldr	r3, [pc, #160]	@ (8002c94 <HAL_GPIO_Init+0x354>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c16:	4a1f      	ldr	r2, [pc, #124]	@ (8002c94 <HAL_GPIO_Init+0x354>)
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002c94 <HAL_GPIO_Init+0x354>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	43db      	mvns	r3, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d003      	beq.n	8002c40 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c40:	4a14      	ldr	r2, [pc, #80]	@ (8002c94 <HAL_GPIO_Init+0x354>)
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	61fb      	str	r3, [r7, #28]
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	2b0f      	cmp	r3, #15
 8002c50:	f67f ae86 	bls.w	8002960 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002c54:	bf00      	nop
 8002c56:	bf00      	nop
 8002c58:	3724      	adds	r7, #36	@ 0x24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	40023800 	.word	0x40023800
 8002c68:	40013800 	.word	0x40013800
 8002c6c:	40020000 	.word	0x40020000
 8002c70:	40020400 	.word	0x40020400
 8002c74:	40020800 	.word	0x40020800
 8002c78:	40020c00 	.word	0x40020c00
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	40021400 	.word	0x40021400
 8002c84:	40021800 	.word	0x40021800
 8002c88:	40021c00 	.word	0x40021c00
 8002c8c:	40022000 	.word	0x40022000
 8002c90:	40022400 	.word	0x40022400
 8002c94:	40013c00 	.word	0x40013c00

08002c98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	691a      	ldr	r2, [r3, #16]
 8002ca8:	887b      	ldrh	r3, [r7, #2]
 8002caa:	4013      	ands	r3, r2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d002      	beq.n	8002cb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	73fb      	strb	r3, [r7, #15]
 8002cb4:	e001      	b.n	8002cba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	807b      	strh	r3, [r7, #2]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cd8:	787b      	ldrb	r3, [r7, #1]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cde:	887a      	ldrh	r2, [r7, #2]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002ce4:	e003      	b.n	8002cee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002ce6:	887b      	ldrh	r3, [r7, #2]
 8002ce8:	041a      	lsls	r2, r3, #16
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	619a      	str	r2, [r3, #24]
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
	...

08002cfc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e0bf      	b.n	8002e8e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d106      	bne.n	8002d28 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7fe fb7c 	bl	8001420 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	699a      	ldr	r2, [r3, #24]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8002d3e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6999      	ldr	r1, [r3, #24]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002d54:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6899      	ldr	r1, [r3, #8]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	4b4a      	ldr	r3, [pc, #296]	@ (8002e98 <HAL_LTDC_Init+0x19c>)
 8002d70:	400b      	ands	r3, r1
 8002d72:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	041b      	lsls	r3, r3, #16
 8002d7a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6899      	ldr	r1, [r3, #8]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	699a      	ldr	r2, [r3, #24]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68d9      	ldr	r1, [r3, #12]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	4b3e      	ldr	r3, [pc, #248]	@ (8002e98 <HAL_LTDC_Init+0x19c>)
 8002d9e:	400b      	ands	r3, r1
 8002da0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	041b      	lsls	r3, r3, #16
 8002da8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68d9      	ldr	r1, [r3, #12]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a1a      	ldr	r2, [r3, #32]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	431a      	orrs	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6919      	ldr	r1, [r3, #16]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	4b33      	ldr	r3, [pc, #204]	@ (8002e98 <HAL_LTDC_Init+0x19c>)
 8002dcc:	400b      	ands	r3, r1
 8002dce:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd4:	041b      	lsls	r3, r3, #16
 8002dd6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6919      	ldr	r1, [r3, #16]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	431a      	orrs	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6959      	ldr	r1, [r3, #20]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	4b27      	ldr	r3, [pc, #156]	@ (8002e98 <HAL_LTDC_Init+0x19c>)
 8002dfa:	400b      	ands	r3, r1
 8002dfc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e02:	041b      	lsls	r3, r3, #16
 8002e04:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6959      	ldr	r1, [r3, #20]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	431a      	orrs	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e22:	021b      	lsls	r3, r3, #8
 8002e24:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8002e2c:	041b      	lsls	r3, r3, #16
 8002e2e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8002e3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8002e52:	431a      	orrs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0206 	orr.w	r2, r2, #6
 8002e6a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	699a      	ldr	r2, [r3, #24]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0201 	orr.w	r2, r2, #1
 8002e7a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	f000f800 	.word	0xf000f800

08002e9c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002e9c:	b5b0      	push	{r4, r5, r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d101      	bne.n	8002eb6 <HAL_LTDC_ConfigLayer+0x1a>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	e02c      	b.n	8002f10 <HAL_LTDC_ConfigLayer+0x74>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2202      	movs	r2, #2
 8002ec2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2134      	movs	r1, #52	@ 0x34
 8002ecc:	fb01 f303 	mul.w	r3, r1, r3
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	4614      	mov	r4, r2
 8002eda:	461d      	mov	r5, r3
 8002edc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ede:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ee0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ee2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ee4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ee6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ee8:	682b      	ldr	r3, [r5, #0]
 8002eea:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	68b9      	ldr	r1, [r7, #8]
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f000 f811 	bl	8002f18 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2201      	movs	r2, #1
 8002efc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bdb0      	pop	{r4, r5, r7, pc}

08002f18 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b089      	sub	sp, #36	@ 0x24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	0c1b      	lsrs	r3, r3, #16
 8002f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f34:	4413      	add	r3, r2
 8002f36:	041b      	lsls	r3, r3, #16
 8002f38:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	01db      	lsls	r3, r3, #7
 8002f44:	4413      	add	r3, r2
 8002f46:	3384      	adds	r3, #132	@ 0x84
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	6812      	ldr	r2, [r2, #0]
 8002f4e:	4611      	mov	r1, r2
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	01d2      	lsls	r2, r2, #7
 8002f54:	440a      	add	r2, r1
 8002f56:	3284      	adds	r2, #132	@ 0x84
 8002f58:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002f5c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	0c1b      	lsrs	r3, r3, #16
 8002f6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002f6e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002f70:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4619      	mov	r1, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	01db      	lsls	r3, r3, #7
 8002f7c:	440b      	add	r3, r1
 8002f7e:	3384      	adds	r3, #132	@ 0x84
 8002f80:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002f86:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	68da      	ldr	r2, [r3, #12]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f96:	4413      	add	r3, r2
 8002f98:	041b      	lsls	r3, r3, #16
 8002f9a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	01db      	lsls	r3, r3, #7
 8002fa6:	4413      	add	r3, r2
 8002fa8:	3384      	adds	r3, #132	@ 0x84
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	6812      	ldr	r2, [r2, #0]
 8002fb0:	4611      	mov	r1, r2
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	01d2      	lsls	r2, r2, #7
 8002fb6:	440a      	add	r2, r1
 8002fb8:	3284      	adds	r2, #132	@ 0x84
 8002fba:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002fbe:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fce:	4413      	add	r3, r2
 8002fd0:	1c5a      	adds	r2, r3, #1
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	01db      	lsls	r3, r3, #7
 8002fdc:	440b      	add	r3, r1
 8002fde:	3384      	adds	r3, #132	@ 0x84
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	461a      	mov	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	01db      	lsls	r3, r3, #7
 8002ff2:	4413      	add	r3, r2
 8002ff4:	3384      	adds	r3, #132	@ 0x84
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	6812      	ldr	r2, [r2, #0]
 8002ffc:	4611      	mov	r1, r2
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	01d2      	lsls	r2, r2, #7
 8003002:	440a      	add	r2, r1
 8003004:	3284      	adds	r2, #132	@ 0x84
 8003006:	f023 0307 	bic.w	r3, r3, #7
 800300a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	461a      	mov	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	01db      	lsls	r3, r3, #7
 8003016:	4413      	add	r3, r2
 8003018:	3384      	adds	r3, #132	@ 0x84
 800301a:	461a      	mov	r2, r3
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003028:	021b      	lsls	r3, r3, #8
 800302a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003032:	041b      	lsls	r3, r3, #16
 8003034:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	061b      	lsls	r3, r3, #24
 800303c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	461a      	mov	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	01db      	lsls	r3, r3, #7
 8003048:	4413      	add	r3, r2
 800304a:	3384      	adds	r3, #132	@ 0x84
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	461a      	mov	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	01db      	lsls	r3, r3, #7
 8003058:	4413      	add	r3, r2
 800305a:	3384      	adds	r3, #132	@ 0x84
 800305c:	461a      	mov	r2, r3
 800305e:	2300      	movs	r3, #0
 8003060:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003068:	461a      	mov	r2, r3
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	431a      	orrs	r2, r3
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	431a      	orrs	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4619      	mov	r1, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	01db      	lsls	r3, r3, #7
 800307c:	440b      	add	r3, r1
 800307e:	3384      	adds	r3, #132	@ 0x84
 8003080:	4619      	mov	r1, r3
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	4313      	orrs	r3, r2
 8003086:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	461a      	mov	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	01db      	lsls	r3, r3, #7
 8003092:	4413      	add	r3, r2
 8003094:	3384      	adds	r3, #132	@ 0x84
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	6812      	ldr	r2, [r2, #0]
 800309c:	4611      	mov	r1, r2
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	01d2      	lsls	r2, r2, #7
 80030a2:	440a      	add	r2, r1
 80030a4:	3284      	adds	r2, #132	@ 0x84
 80030a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80030aa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	461a      	mov	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	01db      	lsls	r3, r3, #7
 80030b6:	4413      	add	r3, r2
 80030b8:	3384      	adds	r3, #132	@ 0x84
 80030ba:	461a      	mov	r2, r3
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	461a      	mov	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	01db      	lsls	r3, r3, #7
 80030cc:	4413      	add	r3, r2
 80030ce:	3384      	adds	r3, #132	@ 0x84
 80030d0:	69da      	ldr	r2, [r3, #28]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4619      	mov	r1, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	01db      	lsls	r3, r3, #7
 80030dc:	440b      	add	r3, r1
 80030de:	3384      	adds	r3, #132	@ 0x84
 80030e0:	4619      	mov	r1, r3
 80030e2:	4b58      	ldr	r3, [pc, #352]	@ (8003244 <LTDC_SetConfig+0x32c>)
 80030e4:	4013      	ands	r3, r2
 80030e6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	69da      	ldr	r2, [r3, #28]
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	68f9      	ldr	r1, [r7, #12]
 80030f2:	6809      	ldr	r1, [r1, #0]
 80030f4:	4608      	mov	r0, r1
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	01c9      	lsls	r1, r1, #7
 80030fa:	4401      	add	r1, r0
 80030fc:	3184      	adds	r1, #132	@ 0x84
 80030fe:	4313      	orrs	r3, r2
 8003100:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	461a      	mov	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	01db      	lsls	r3, r3, #7
 800310c:	4413      	add	r3, r2
 800310e:	3384      	adds	r3, #132	@ 0x84
 8003110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	461a      	mov	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	01db      	lsls	r3, r3, #7
 800311c:	4413      	add	r3, r2
 800311e:	3384      	adds	r3, #132	@ 0x84
 8003120:	461a      	mov	r2, r3
 8003122:	2300      	movs	r3, #0
 8003124:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	461a      	mov	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	01db      	lsls	r3, r3, #7
 8003130:	4413      	add	r3, r2
 8003132:	3384      	adds	r3, #132	@ 0x84
 8003134:	461a      	mov	r2, r3
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800313a:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d102      	bne.n	800314a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8003144:	2304      	movs	r3, #4
 8003146:	61fb      	str	r3, [r7, #28]
 8003148:	e01b      	b.n	8003182 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d102      	bne.n	8003158 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8003152:	2303      	movs	r3, #3
 8003154:	61fb      	str	r3, [r7, #28]
 8003156:	e014      	b.n	8003182 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	2b04      	cmp	r3, #4
 800315e:	d00b      	beq.n	8003178 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003164:	2b02      	cmp	r3, #2
 8003166:	d007      	beq.n	8003178 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800316c:	2b03      	cmp	r3, #3
 800316e:	d003      	beq.n	8003178 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003174:	2b07      	cmp	r3, #7
 8003176:	d102      	bne.n	800317e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8003178:	2302      	movs	r3, #2
 800317a:	61fb      	str	r3, [r7, #28]
 800317c:	e001      	b.n	8003182 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800317e:	2301      	movs	r3, #1
 8003180:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	461a      	mov	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	01db      	lsls	r3, r3, #7
 800318c:	4413      	add	r3, r2
 800318e:	3384      	adds	r3, #132	@ 0x84
 8003190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	6812      	ldr	r2, [r2, #0]
 8003196:	4611      	mov	r1, r2
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	01d2      	lsls	r2, r2, #7
 800319c:	440a      	add	r2, r1
 800319e:	3284      	adds	r2, #132	@ 0x84
 80031a0:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80031a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031aa:	69fa      	ldr	r2, [r7, #28]
 80031ac:	fb02 f303 	mul.w	r3, r2, r3
 80031b0:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	6859      	ldr	r1, [r3, #4]
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	1acb      	subs	r3, r1, r3
 80031bc:	69f9      	ldr	r1, [r7, #28]
 80031be:	fb01 f303 	mul.w	r3, r1, r3
 80031c2:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80031c4:	68f9      	ldr	r1, [r7, #12]
 80031c6:	6809      	ldr	r1, [r1, #0]
 80031c8:	4608      	mov	r0, r1
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	01c9      	lsls	r1, r1, #7
 80031ce:	4401      	add	r1, r0
 80031d0:	3184      	adds	r1, #132	@ 0x84
 80031d2:	4313      	orrs	r3, r2
 80031d4:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	461a      	mov	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	01db      	lsls	r3, r3, #7
 80031e0:	4413      	add	r3, r2
 80031e2:	3384      	adds	r3, #132	@ 0x84
 80031e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4619      	mov	r1, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	01db      	lsls	r3, r3, #7
 80031f0:	440b      	add	r3, r1
 80031f2:	3384      	adds	r3, #132	@ 0x84
 80031f4:	4619      	mov	r1, r3
 80031f6:	4b14      	ldr	r3, [pc, #80]	@ (8003248 <LTDC_SetConfig+0x330>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	461a      	mov	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	01db      	lsls	r3, r3, #7
 8003206:	4413      	add	r3, r2
 8003208:	3384      	adds	r3, #132	@ 0x84
 800320a:	461a      	mov	r2, r3
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003210:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	461a      	mov	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	01db      	lsls	r3, r3, #7
 800321c:	4413      	add	r3, r2
 800321e:	3384      	adds	r3, #132	@ 0x84
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	6812      	ldr	r2, [r2, #0]
 8003226:	4611      	mov	r1, r2
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	01d2      	lsls	r2, r2, #7
 800322c:	440a      	add	r2, r1
 800322e:	3284      	adds	r2, #132	@ 0x84
 8003230:	f043 0301 	orr.w	r3, r3, #1
 8003234:	6013      	str	r3, [r2, #0]
}
 8003236:	bf00      	nop
 8003238:	3724      	adds	r7, #36	@ 0x24
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	fffff8f8 	.word	0xfffff8f8
 8003248:	fffff800 	.word	0xfffff800

0800324c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003254:	2300      	movs	r3, #0
 8003256:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e291      	b.n	8003786 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 8087 	beq.w	800337e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003270:	4b96      	ldr	r3, [pc, #600]	@ (80034cc <HAL_RCC_OscConfig+0x280>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f003 030c 	and.w	r3, r3, #12
 8003278:	2b04      	cmp	r3, #4
 800327a:	d00c      	beq.n	8003296 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800327c:	4b93      	ldr	r3, [pc, #588]	@ (80034cc <HAL_RCC_OscConfig+0x280>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 030c 	and.w	r3, r3, #12
 8003284:	2b08      	cmp	r3, #8
 8003286:	d112      	bne.n	80032ae <HAL_RCC_OscConfig+0x62>
 8003288:	4b90      	ldr	r3, [pc, #576]	@ (80034cc <HAL_RCC_OscConfig+0x280>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003290:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003294:	d10b      	bne.n	80032ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003296:	4b8d      	ldr	r3, [pc, #564]	@ (80034cc <HAL_RCC_OscConfig+0x280>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d06c      	beq.n	800337c <HAL_RCC_OscConfig+0x130>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d168      	bne.n	800337c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e26b      	b.n	8003786 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032b6:	d106      	bne.n	80032c6 <HAL_RCC_OscConfig+0x7a>
 80032b8:	4b84      	ldr	r3, [pc, #528]	@ (80034cc <HAL_RCC_OscConfig+0x280>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a83      	ldr	r2, [pc, #524]	@ (80034cc <HAL_RCC_OscConfig+0x280>)
 80032be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032c2:	6013      	str	r3, [r2, #0]
 80032c4:	e02e      	b.n	8003324 <HAL_RCC_OscConfig+0xd8>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10c      	bne.n	80032e8 <HAL_RCC_OscConfig+0x9c>
 80032ce:	4b7f      	ldr	r3, [pc, #508]	@ (80034cc <HAL_RCC_OscConfig+0x280>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a7e      	ldr	r2, [pc, #504]	@ (80034cc <HAL_RCC_OscConfig+0x280>)
 80032d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032d8:	6013      	str	r3, [r2, #0]
 80032da:	4b7c      	ldr	r3, [pc, #496]	@ (80034cc <HAL_RCC_OscConfig+0x280>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a7b      	ldr	r2, [pc, #492]	@ (80034cc <HAL_RCC_OscConfig+0x280>)
 80032e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	e01d      	b.n	8003324 <HAL_RCC_OscConfig+0xd8>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032f0:	d10c      	bne.n	800330c <HAL_RCC_OscConfig+0xc0>
 80032f2:	4b76      	ldr	r3, [pc, #472]	@ (80034cc <HAL_RCC_OscConfig+0x280>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a75      	ldr	r2, [pc, #468]	@ (80034cc <HAL_RCC_OscConfig+0x280>)
 80032f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032fc:	6013      	str	r3, [r2, #0]
 80032fe:	4b73      	ldr	r3, [pc, #460]	@ (80034cc <HAL_RCC_OscConfig+0x280>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a72      	ldr	r2, [pc, #456]	@ (80034cc <HAL_RCC_OscConfig+0x280>)
 8003304:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003308:	6013      	str	r3, [r2, #0]
 800330a:	e00b      	b.n	8003324 <HAL_RCC_OscConfig+0xd8>
 800330c:	4b6f      	ldr	r3, [pc, #444]	@ (80034cc <HAL_RCC_OscConfig+0x280>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a6e      	ldr	r2, [pc, #440]	@ (80034cc <HAL_RCC_OscConfig+0x280>)
 8003312:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003316:	6013      	str	r3, [r2, #0]
 8003318:	4b6c      	ldr	r3, [pc, #432]	@ (80034cc <HAL_RCC_OscConfig+0x280>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a6b      	ldr	r2, [pc, #428]	@ (80034cc <HAL_RCC_OscConfig+0x280>)
 800331e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003322:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d013      	beq.n	8003354 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332c:	f7fe fc26 	bl	8001b7c <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003334:	f7fe fc22 	bl	8001b7c <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b64      	cmp	r3, #100	@ 0x64
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e21f      	b.n	8003786 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003346:	4b61      	ldr	r3, [pc, #388]	@ (80034cc <HAL_RCC_OscConfig+0x280>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d0f0      	beq.n	8003334 <HAL_RCC_OscConfig+0xe8>
 8003352:	e014      	b.n	800337e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003354:	f7fe fc12 	bl	8001b7c <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800335c:	f7fe fc0e 	bl	8001b7c <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b64      	cmp	r3, #100	@ 0x64
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e20b      	b.n	8003786 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800336e:	4b57      	ldr	r3, [pc, #348]	@ (80034cc <HAL_RCC_OscConfig+0x280>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f0      	bne.n	800335c <HAL_RCC_OscConfig+0x110>
 800337a:	e000      	b.n	800337e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800337c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d069      	beq.n	800345e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800338a:	4b50      	ldr	r3, [pc, #320]	@ (80034cc <HAL_RCC_OscConfig+0x280>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 030c 	and.w	r3, r3, #12
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00b      	beq.n	80033ae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003396:	4b4d      	ldr	r3, [pc, #308]	@ (80034cc <HAL_RCC_OscConfig+0x280>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 030c 	and.w	r3, r3, #12
 800339e:	2b08      	cmp	r3, #8
 80033a0:	d11c      	bne.n	80033dc <HAL_RCC_OscConfig+0x190>
 80033a2:	4b4a      	ldr	r3, [pc, #296]	@ (80034cc <HAL_RCC_OscConfig+0x280>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d116      	bne.n	80033dc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ae:	4b47      	ldr	r3, [pc, #284]	@ (80034cc <HAL_RCC_OscConfig+0x280>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d005      	beq.n	80033c6 <HAL_RCC_OscConfig+0x17a>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d001      	beq.n	80033c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e1df      	b.n	8003786 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c6:	4b41      	ldr	r3, [pc, #260]	@ (80034cc <HAL_RCC_OscConfig+0x280>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	493d      	ldr	r1, [pc, #244]	@ (80034cc <HAL_RCC_OscConfig+0x280>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033da:	e040      	b.n	800345e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d023      	beq.n	800342c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033e4:	4b39      	ldr	r3, [pc, #228]	@ (80034cc <HAL_RCC_OscConfig+0x280>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a38      	ldr	r2, [pc, #224]	@ (80034cc <HAL_RCC_OscConfig+0x280>)
 80033ea:	f043 0301 	orr.w	r3, r3, #1
 80033ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f0:	f7fe fbc4 	bl	8001b7c <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033f8:	f7fe fbc0 	bl	8001b7c <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e1bd      	b.n	8003786 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800340a:	4b30      	ldr	r3, [pc, #192]	@ (80034cc <HAL_RCC_OscConfig+0x280>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d0f0      	beq.n	80033f8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003416:	4b2d      	ldr	r3, [pc, #180]	@ (80034cc <HAL_RCC_OscConfig+0x280>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	4929      	ldr	r1, [pc, #164]	@ (80034cc <HAL_RCC_OscConfig+0x280>)
 8003426:	4313      	orrs	r3, r2
 8003428:	600b      	str	r3, [r1, #0]
 800342a:	e018      	b.n	800345e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800342c:	4b27      	ldr	r3, [pc, #156]	@ (80034cc <HAL_RCC_OscConfig+0x280>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a26      	ldr	r2, [pc, #152]	@ (80034cc <HAL_RCC_OscConfig+0x280>)
 8003432:	f023 0301 	bic.w	r3, r3, #1
 8003436:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003438:	f7fe fba0 	bl	8001b7c <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003440:	f7fe fb9c 	bl	8001b7c <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e199      	b.n	8003786 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003452:	4b1e      	ldr	r3, [pc, #120]	@ (80034cc <HAL_RCC_OscConfig+0x280>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1f0      	bne.n	8003440 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0308 	and.w	r3, r3, #8
 8003466:	2b00      	cmp	r3, #0
 8003468:	d038      	beq.n	80034dc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d019      	beq.n	80034a6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003472:	4b16      	ldr	r3, [pc, #88]	@ (80034cc <HAL_RCC_OscConfig+0x280>)
 8003474:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003476:	4a15      	ldr	r2, [pc, #84]	@ (80034cc <HAL_RCC_OscConfig+0x280>)
 8003478:	f043 0301 	orr.w	r3, r3, #1
 800347c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800347e:	f7fe fb7d 	bl	8001b7c <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003484:	e008      	b.n	8003498 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003486:	f7fe fb79 	bl	8001b7c <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e176      	b.n	8003786 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003498:	4b0c      	ldr	r3, [pc, #48]	@ (80034cc <HAL_RCC_OscConfig+0x280>)
 800349a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0f0      	beq.n	8003486 <HAL_RCC_OscConfig+0x23a>
 80034a4:	e01a      	b.n	80034dc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034a6:	4b09      	ldr	r3, [pc, #36]	@ (80034cc <HAL_RCC_OscConfig+0x280>)
 80034a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034aa:	4a08      	ldr	r2, [pc, #32]	@ (80034cc <HAL_RCC_OscConfig+0x280>)
 80034ac:	f023 0301 	bic.w	r3, r3, #1
 80034b0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b2:	f7fe fb63 	bl	8001b7c <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034b8:	e00a      	b.n	80034d0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034ba:	f7fe fb5f 	bl	8001b7c <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d903      	bls.n	80034d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e15c      	b.n	8003786 <HAL_RCC_OscConfig+0x53a>
 80034cc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034d0:	4b91      	ldr	r3, [pc, #580]	@ (8003718 <HAL_RCC_OscConfig+0x4cc>)
 80034d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1ee      	bne.n	80034ba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0304 	and.w	r3, r3, #4
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 80a4 	beq.w	8003632 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ea:	4b8b      	ldr	r3, [pc, #556]	@ (8003718 <HAL_RCC_OscConfig+0x4cc>)
 80034ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10d      	bne.n	8003512 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80034f6:	4b88      	ldr	r3, [pc, #544]	@ (8003718 <HAL_RCC_OscConfig+0x4cc>)
 80034f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fa:	4a87      	ldr	r2, [pc, #540]	@ (8003718 <HAL_RCC_OscConfig+0x4cc>)
 80034fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003500:	6413      	str	r3, [r2, #64]	@ 0x40
 8003502:	4b85      	ldr	r3, [pc, #532]	@ (8003718 <HAL_RCC_OscConfig+0x4cc>)
 8003504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003506:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800350a:	60bb      	str	r3, [r7, #8]
 800350c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800350e:	2301      	movs	r3, #1
 8003510:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003512:	4b82      	ldr	r3, [pc, #520]	@ (800371c <HAL_RCC_OscConfig+0x4d0>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800351a:	2b00      	cmp	r3, #0
 800351c:	d118      	bne.n	8003550 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800351e:	4b7f      	ldr	r3, [pc, #508]	@ (800371c <HAL_RCC_OscConfig+0x4d0>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a7e      	ldr	r2, [pc, #504]	@ (800371c <HAL_RCC_OscConfig+0x4d0>)
 8003524:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003528:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800352a:	f7fe fb27 	bl	8001b7c <HAL_GetTick>
 800352e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003530:	e008      	b.n	8003544 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003532:	f7fe fb23 	bl	8001b7c <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b64      	cmp	r3, #100	@ 0x64
 800353e:	d901      	bls.n	8003544 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e120      	b.n	8003786 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003544:	4b75      	ldr	r3, [pc, #468]	@ (800371c <HAL_RCC_OscConfig+0x4d0>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800354c:	2b00      	cmp	r3, #0
 800354e:	d0f0      	beq.n	8003532 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d106      	bne.n	8003566 <HAL_RCC_OscConfig+0x31a>
 8003558:	4b6f      	ldr	r3, [pc, #444]	@ (8003718 <HAL_RCC_OscConfig+0x4cc>)
 800355a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800355c:	4a6e      	ldr	r2, [pc, #440]	@ (8003718 <HAL_RCC_OscConfig+0x4cc>)
 800355e:	f043 0301 	orr.w	r3, r3, #1
 8003562:	6713      	str	r3, [r2, #112]	@ 0x70
 8003564:	e02d      	b.n	80035c2 <HAL_RCC_OscConfig+0x376>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10c      	bne.n	8003588 <HAL_RCC_OscConfig+0x33c>
 800356e:	4b6a      	ldr	r3, [pc, #424]	@ (8003718 <HAL_RCC_OscConfig+0x4cc>)
 8003570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003572:	4a69      	ldr	r2, [pc, #420]	@ (8003718 <HAL_RCC_OscConfig+0x4cc>)
 8003574:	f023 0301 	bic.w	r3, r3, #1
 8003578:	6713      	str	r3, [r2, #112]	@ 0x70
 800357a:	4b67      	ldr	r3, [pc, #412]	@ (8003718 <HAL_RCC_OscConfig+0x4cc>)
 800357c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800357e:	4a66      	ldr	r2, [pc, #408]	@ (8003718 <HAL_RCC_OscConfig+0x4cc>)
 8003580:	f023 0304 	bic.w	r3, r3, #4
 8003584:	6713      	str	r3, [r2, #112]	@ 0x70
 8003586:	e01c      	b.n	80035c2 <HAL_RCC_OscConfig+0x376>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	2b05      	cmp	r3, #5
 800358e:	d10c      	bne.n	80035aa <HAL_RCC_OscConfig+0x35e>
 8003590:	4b61      	ldr	r3, [pc, #388]	@ (8003718 <HAL_RCC_OscConfig+0x4cc>)
 8003592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003594:	4a60      	ldr	r2, [pc, #384]	@ (8003718 <HAL_RCC_OscConfig+0x4cc>)
 8003596:	f043 0304 	orr.w	r3, r3, #4
 800359a:	6713      	str	r3, [r2, #112]	@ 0x70
 800359c:	4b5e      	ldr	r3, [pc, #376]	@ (8003718 <HAL_RCC_OscConfig+0x4cc>)
 800359e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035a0:	4a5d      	ldr	r2, [pc, #372]	@ (8003718 <HAL_RCC_OscConfig+0x4cc>)
 80035a2:	f043 0301 	orr.w	r3, r3, #1
 80035a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80035a8:	e00b      	b.n	80035c2 <HAL_RCC_OscConfig+0x376>
 80035aa:	4b5b      	ldr	r3, [pc, #364]	@ (8003718 <HAL_RCC_OscConfig+0x4cc>)
 80035ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ae:	4a5a      	ldr	r2, [pc, #360]	@ (8003718 <HAL_RCC_OscConfig+0x4cc>)
 80035b0:	f023 0301 	bic.w	r3, r3, #1
 80035b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80035b6:	4b58      	ldr	r3, [pc, #352]	@ (8003718 <HAL_RCC_OscConfig+0x4cc>)
 80035b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ba:	4a57      	ldr	r2, [pc, #348]	@ (8003718 <HAL_RCC_OscConfig+0x4cc>)
 80035bc:	f023 0304 	bic.w	r3, r3, #4
 80035c0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d015      	beq.n	80035f6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ca:	f7fe fad7 	bl	8001b7c <HAL_GetTick>
 80035ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d0:	e00a      	b.n	80035e8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035d2:	f7fe fad3 	bl	8001b7c <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e0ce      	b.n	8003786 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035e8:	4b4b      	ldr	r3, [pc, #300]	@ (8003718 <HAL_RCC_OscConfig+0x4cc>)
 80035ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ec:	f003 0302 	and.w	r3, r3, #2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0ee      	beq.n	80035d2 <HAL_RCC_OscConfig+0x386>
 80035f4:	e014      	b.n	8003620 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f6:	f7fe fac1 	bl	8001b7c <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035fc:	e00a      	b.n	8003614 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035fe:	f7fe fabd 	bl	8001b7c <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	f241 3288 	movw	r2, #5000	@ 0x1388
 800360c:	4293      	cmp	r3, r2
 800360e:	d901      	bls.n	8003614 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e0b8      	b.n	8003786 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003614:	4b40      	ldr	r3, [pc, #256]	@ (8003718 <HAL_RCC_OscConfig+0x4cc>)
 8003616:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1ee      	bne.n	80035fe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003620:	7dfb      	ldrb	r3, [r7, #23]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d105      	bne.n	8003632 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003626:	4b3c      	ldr	r3, [pc, #240]	@ (8003718 <HAL_RCC_OscConfig+0x4cc>)
 8003628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362a:	4a3b      	ldr	r2, [pc, #236]	@ (8003718 <HAL_RCC_OscConfig+0x4cc>)
 800362c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003630:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	2b00      	cmp	r3, #0
 8003638:	f000 80a4 	beq.w	8003784 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800363c:	4b36      	ldr	r3, [pc, #216]	@ (8003718 <HAL_RCC_OscConfig+0x4cc>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f003 030c 	and.w	r3, r3, #12
 8003644:	2b08      	cmp	r3, #8
 8003646:	d06b      	beq.n	8003720 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	2b02      	cmp	r3, #2
 800364e:	d149      	bne.n	80036e4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003650:	4b31      	ldr	r3, [pc, #196]	@ (8003718 <HAL_RCC_OscConfig+0x4cc>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a30      	ldr	r2, [pc, #192]	@ (8003718 <HAL_RCC_OscConfig+0x4cc>)
 8003656:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800365a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365c:	f7fe fa8e 	bl	8001b7c <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003664:	f7fe fa8a 	bl	8001b7c <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e087      	b.n	8003786 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003676:	4b28      	ldr	r3, [pc, #160]	@ (8003718 <HAL_RCC_OscConfig+0x4cc>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f0      	bne.n	8003664 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	69da      	ldr	r2, [r3, #28]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003690:	019b      	lsls	r3, r3, #6
 8003692:	431a      	orrs	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003698:	085b      	lsrs	r3, r3, #1
 800369a:	3b01      	subs	r3, #1
 800369c:	041b      	lsls	r3, r3, #16
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a4:	061b      	lsls	r3, r3, #24
 80036a6:	4313      	orrs	r3, r2
 80036a8:	4a1b      	ldr	r2, [pc, #108]	@ (8003718 <HAL_RCC_OscConfig+0x4cc>)
 80036aa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80036ae:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036b0:	4b19      	ldr	r3, [pc, #100]	@ (8003718 <HAL_RCC_OscConfig+0x4cc>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a18      	ldr	r2, [pc, #96]	@ (8003718 <HAL_RCC_OscConfig+0x4cc>)
 80036b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036bc:	f7fe fa5e 	bl	8001b7c <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036c4:	f7fe fa5a 	bl	8001b7c <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e057      	b.n	8003786 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036d6:	4b10      	ldr	r3, [pc, #64]	@ (8003718 <HAL_RCC_OscConfig+0x4cc>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d0f0      	beq.n	80036c4 <HAL_RCC_OscConfig+0x478>
 80036e2:	e04f      	b.n	8003784 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003718 <HAL_RCC_OscConfig+0x4cc>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a0b      	ldr	r2, [pc, #44]	@ (8003718 <HAL_RCC_OscConfig+0x4cc>)
 80036ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f0:	f7fe fa44 	bl	8001b7c <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f8:	f7fe fa40 	bl	8001b7c <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e03d      	b.n	8003786 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800370a:	4b03      	ldr	r3, [pc, #12]	@ (8003718 <HAL_RCC_OscConfig+0x4cc>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1f0      	bne.n	80036f8 <HAL_RCC_OscConfig+0x4ac>
 8003716:	e035      	b.n	8003784 <HAL_RCC_OscConfig+0x538>
 8003718:	40023800 	.word	0x40023800
 800371c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003720:	4b1b      	ldr	r3, [pc, #108]	@ (8003790 <HAL_RCC_OscConfig+0x544>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d028      	beq.n	8003780 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003738:	429a      	cmp	r2, r3
 800373a:	d121      	bne.n	8003780 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003746:	429a      	cmp	r2, r3
 8003748:	d11a      	bne.n	8003780 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003750:	4013      	ands	r3, r2
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003756:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003758:	4293      	cmp	r3, r2
 800375a:	d111      	bne.n	8003780 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003766:	085b      	lsrs	r3, r3, #1
 8003768:	3b01      	subs	r3, #1
 800376a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800376c:	429a      	cmp	r2, r3
 800376e:	d107      	bne.n	8003780 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800377a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800377c:	429a      	cmp	r2, r3
 800377e:	d001      	beq.n	8003784 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e000      	b.n	8003786 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3718      	adds	r7, #24
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40023800 	.word	0x40023800

08003794 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800379e:	2300      	movs	r3, #0
 80037a0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e0d0      	b.n	800394e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037ac:	4b6a      	ldr	r3, [pc, #424]	@ (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 030f 	and.w	r3, r3, #15
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d910      	bls.n	80037dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ba:	4b67      	ldr	r3, [pc, #412]	@ (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f023 020f 	bic.w	r2, r3, #15
 80037c2:	4965      	ldr	r1, [pc, #404]	@ (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ca:	4b63      	ldr	r3, [pc, #396]	@ (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 030f 	and.w	r3, r3, #15
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d001      	beq.n	80037dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e0b8      	b.n	800394e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d020      	beq.n	800382a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0304 	and.w	r3, r3, #4
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d005      	beq.n	8003800 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037f4:	4b59      	ldr	r3, [pc, #356]	@ (800395c <HAL_RCC_ClockConfig+0x1c8>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	4a58      	ldr	r2, [pc, #352]	@ (800395c <HAL_RCC_ClockConfig+0x1c8>)
 80037fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80037fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0308 	and.w	r3, r3, #8
 8003808:	2b00      	cmp	r3, #0
 800380a:	d005      	beq.n	8003818 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800380c:	4b53      	ldr	r3, [pc, #332]	@ (800395c <HAL_RCC_ClockConfig+0x1c8>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	4a52      	ldr	r2, [pc, #328]	@ (800395c <HAL_RCC_ClockConfig+0x1c8>)
 8003812:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003816:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003818:	4b50      	ldr	r3, [pc, #320]	@ (800395c <HAL_RCC_ClockConfig+0x1c8>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	494d      	ldr	r1, [pc, #308]	@ (800395c <HAL_RCC_ClockConfig+0x1c8>)
 8003826:	4313      	orrs	r3, r2
 8003828:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b00      	cmp	r3, #0
 8003834:	d040      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d107      	bne.n	800384e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800383e:	4b47      	ldr	r3, [pc, #284]	@ (800395c <HAL_RCC_ClockConfig+0x1c8>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d115      	bne.n	8003876 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e07f      	b.n	800394e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2b02      	cmp	r3, #2
 8003854:	d107      	bne.n	8003866 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003856:	4b41      	ldr	r3, [pc, #260]	@ (800395c <HAL_RCC_ClockConfig+0x1c8>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d109      	bne.n	8003876 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e073      	b.n	800394e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003866:	4b3d      	ldr	r3, [pc, #244]	@ (800395c <HAL_RCC_ClockConfig+0x1c8>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e06b      	b.n	800394e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003876:	4b39      	ldr	r3, [pc, #228]	@ (800395c <HAL_RCC_ClockConfig+0x1c8>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f023 0203 	bic.w	r2, r3, #3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	4936      	ldr	r1, [pc, #216]	@ (800395c <HAL_RCC_ClockConfig+0x1c8>)
 8003884:	4313      	orrs	r3, r2
 8003886:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003888:	f7fe f978 	bl	8001b7c <HAL_GetTick>
 800388c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800388e:	e00a      	b.n	80038a6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003890:	f7fe f974 	bl	8001b7c <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800389e:	4293      	cmp	r3, r2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e053      	b.n	800394e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a6:	4b2d      	ldr	r3, [pc, #180]	@ (800395c <HAL_RCC_ClockConfig+0x1c8>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f003 020c 	and.w	r2, r3, #12
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d1eb      	bne.n	8003890 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038b8:	4b27      	ldr	r3, [pc, #156]	@ (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 030f 	and.w	r3, r3, #15
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d210      	bcs.n	80038e8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038c6:	4b24      	ldr	r3, [pc, #144]	@ (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f023 020f 	bic.w	r2, r3, #15
 80038ce:	4922      	ldr	r1, [pc, #136]	@ (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038d6:	4b20      	ldr	r3, [pc, #128]	@ (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 030f 	and.w	r3, r3, #15
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d001      	beq.n	80038e8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e032      	b.n	800394e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0304 	and.w	r3, r3, #4
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d008      	beq.n	8003906 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038f4:	4b19      	ldr	r3, [pc, #100]	@ (800395c <HAL_RCC_ClockConfig+0x1c8>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	4916      	ldr	r1, [pc, #88]	@ (800395c <HAL_RCC_ClockConfig+0x1c8>)
 8003902:	4313      	orrs	r3, r2
 8003904:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0308 	and.w	r3, r3, #8
 800390e:	2b00      	cmp	r3, #0
 8003910:	d009      	beq.n	8003926 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003912:	4b12      	ldr	r3, [pc, #72]	@ (800395c <HAL_RCC_ClockConfig+0x1c8>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	490e      	ldr	r1, [pc, #56]	@ (800395c <HAL_RCC_ClockConfig+0x1c8>)
 8003922:	4313      	orrs	r3, r2
 8003924:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003926:	f000 f821 	bl	800396c <HAL_RCC_GetSysClockFreq>
 800392a:	4602      	mov	r2, r0
 800392c:	4b0b      	ldr	r3, [pc, #44]	@ (800395c <HAL_RCC_ClockConfig+0x1c8>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	091b      	lsrs	r3, r3, #4
 8003932:	f003 030f 	and.w	r3, r3, #15
 8003936:	490a      	ldr	r1, [pc, #40]	@ (8003960 <HAL_RCC_ClockConfig+0x1cc>)
 8003938:	5ccb      	ldrb	r3, [r1, r3]
 800393a:	fa22 f303 	lsr.w	r3, r2, r3
 800393e:	4a09      	ldr	r2, [pc, #36]	@ (8003964 <HAL_RCC_ClockConfig+0x1d0>)
 8003940:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003942:	4b09      	ldr	r3, [pc, #36]	@ (8003968 <HAL_RCC_ClockConfig+0x1d4>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f7fe f8d4 	bl	8001af4 <HAL_InitTick>

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	40023c00 	.word	0x40023c00
 800395c:	40023800 	.word	0x40023800
 8003960:	08009638 	.word	0x08009638
 8003964:	20000000 	.word	0x20000000
 8003968:	20000004 	.word	0x20000004

0800396c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800396c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003970:	b090      	sub	sp, #64	@ 0x40
 8003972:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003974:	2300      	movs	r3, #0
 8003976:	637b      	str	r3, [r7, #52]	@ 0x34
 8003978:	2300      	movs	r3, #0
 800397a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800397c:	2300      	movs	r3, #0
 800397e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003980:	2300      	movs	r3, #0
 8003982:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003984:	4b59      	ldr	r3, [pc, #356]	@ (8003aec <HAL_RCC_GetSysClockFreq+0x180>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 030c 	and.w	r3, r3, #12
 800398c:	2b08      	cmp	r3, #8
 800398e:	d00d      	beq.n	80039ac <HAL_RCC_GetSysClockFreq+0x40>
 8003990:	2b08      	cmp	r3, #8
 8003992:	f200 80a1 	bhi.w	8003ad8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003996:	2b00      	cmp	r3, #0
 8003998:	d002      	beq.n	80039a0 <HAL_RCC_GetSysClockFreq+0x34>
 800399a:	2b04      	cmp	r3, #4
 800399c:	d003      	beq.n	80039a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800399e:	e09b      	b.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039a0:	4b53      	ldr	r3, [pc, #332]	@ (8003af0 <HAL_RCC_GetSysClockFreq+0x184>)
 80039a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80039a4:	e09b      	b.n	8003ade <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039a6:	4b53      	ldr	r3, [pc, #332]	@ (8003af4 <HAL_RCC_GetSysClockFreq+0x188>)
 80039a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80039aa:	e098      	b.n	8003ade <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039ac:	4b4f      	ldr	r3, [pc, #316]	@ (8003aec <HAL_RCC_GetSysClockFreq+0x180>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039b4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80039b6:	4b4d      	ldr	r3, [pc, #308]	@ (8003aec <HAL_RCC_GetSysClockFreq+0x180>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d028      	beq.n	8003a14 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039c2:	4b4a      	ldr	r3, [pc, #296]	@ (8003aec <HAL_RCC_GetSysClockFreq+0x180>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	099b      	lsrs	r3, r3, #6
 80039c8:	2200      	movs	r2, #0
 80039ca:	623b      	str	r3, [r7, #32]
 80039cc:	627a      	str	r2, [r7, #36]	@ 0x24
 80039ce:	6a3b      	ldr	r3, [r7, #32]
 80039d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80039d4:	2100      	movs	r1, #0
 80039d6:	4b47      	ldr	r3, [pc, #284]	@ (8003af4 <HAL_RCC_GetSysClockFreq+0x188>)
 80039d8:	fb03 f201 	mul.w	r2, r3, r1
 80039dc:	2300      	movs	r3, #0
 80039de:	fb00 f303 	mul.w	r3, r0, r3
 80039e2:	4413      	add	r3, r2
 80039e4:	4a43      	ldr	r2, [pc, #268]	@ (8003af4 <HAL_RCC_GetSysClockFreq+0x188>)
 80039e6:	fba0 1202 	umull	r1, r2, r0, r2
 80039ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039ec:	460a      	mov	r2, r1
 80039ee:	62ba      	str	r2, [r7, #40]	@ 0x28
 80039f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039f2:	4413      	add	r3, r2
 80039f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039f8:	2200      	movs	r2, #0
 80039fa:	61bb      	str	r3, [r7, #24]
 80039fc:	61fa      	str	r2, [r7, #28]
 80039fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a02:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003a06:	f7fc fc53 	bl	80002b0 <__aeabi_uldivmod>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	4613      	mov	r3, r2
 8003a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a12:	e053      	b.n	8003abc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a14:	4b35      	ldr	r3, [pc, #212]	@ (8003aec <HAL_RCC_GetSysClockFreq+0x180>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	099b      	lsrs	r3, r3, #6
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	613b      	str	r3, [r7, #16]
 8003a1e:	617a      	str	r2, [r7, #20]
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003a26:	f04f 0b00 	mov.w	fp, #0
 8003a2a:	4652      	mov	r2, sl
 8003a2c:	465b      	mov	r3, fp
 8003a2e:	f04f 0000 	mov.w	r0, #0
 8003a32:	f04f 0100 	mov.w	r1, #0
 8003a36:	0159      	lsls	r1, r3, #5
 8003a38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a3c:	0150      	lsls	r0, r2, #5
 8003a3e:	4602      	mov	r2, r0
 8003a40:	460b      	mov	r3, r1
 8003a42:	ebb2 080a 	subs.w	r8, r2, sl
 8003a46:	eb63 090b 	sbc.w	r9, r3, fp
 8003a4a:	f04f 0200 	mov.w	r2, #0
 8003a4e:	f04f 0300 	mov.w	r3, #0
 8003a52:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003a56:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003a5a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003a5e:	ebb2 0408 	subs.w	r4, r2, r8
 8003a62:	eb63 0509 	sbc.w	r5, r3, r9
 8003a66:	f04f 0200 	mov.w	r2, #0
 8003a6a:	f04f 0300 	mov.w	r3, #0
 8003a6e:	00eb      	lsls	r3, r5, #3
 8003a70:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a74:	00e2      	lsls	r2, r4, #3
 8003a76:	4614      	mov	r4, r2
 8003a78:	461d      	mov	r5, r3
 8003a7a:	eb14 030a 	adds.w	r3, r4, sl
 8003a7e:	603b      	str	r3, [r7, #0]
 8003a80:	eb45 030b 	adc.w	r3, r5, fp
 8003a84:	607b      	str	r3, [r7, #4]
 8003a86:	f04f 0200 	mov.w	r2, #0
 8003a8a:	f04f 0300 	mov.w	r3, #0
 8003a8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a92:	4629      	mov	r1, r5
 8003a94:	028b      	lsls	r3, r1, #10
 8003a96:	4621      	mov	r1, r4
 8003a98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a9c:	4621      	mov	r1, r4
 8003a9e:	028a      	lsls	r2, r1, #10
 8003aa0:	4610      	mov	r0, r2
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	60bb      	str	r3, [r7, #8]
 8003aaa:	60fa      	str	r2, [r7, #12]
 8003aac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ab0:	f7fc fbfe 	bl	80002b0 <__aeabi_uldivmod>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4613      	mov	r3, r2
 8003aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003abc:	4b0b      	ldr	r3, [pc, #44]	@ (8003aec <HAL_RCC_GetSysClockFreq+0x180>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	0c1b      	lsrs	r3, r3, #16
 8003ac2:	f003 0303 	and.w	r3, r3, #3
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003acc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ad6:	e002      	b.n	8003ade <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ad8:	4b05      	ldr	r3, [pc, #20]	@ (8003af0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ada:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003adc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3740      	adds	r7, #64	@ 0x40
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003aea:	bf00      	nop
 8003aec:	40023800 	.word	0x40023800
 8003af0:	00f42400 	.word	0x00f42400
 8003af4:	017d7840 	.word	0x017d7840

08003af8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b088      	sub	sp, #32
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003b00:	2300      	movs	r3, #0
 8003b02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003b04:	2300      	movs	r3, #0
 8003b06:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003b10:	2300      	movs	r3, #0
 8003b12:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d012      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b20:	4b69      	ldr	r3, [pc, #420]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	4a68      	ldr	r2, [pc, #416]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b26:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003b2a:	6093      	str	r3, [r2, #8]
 8003b2c:	4b66      	ldr	r3, [pc, #408]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b34:	4964      	ldr	r1, [pc, #400]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003b42:	2301      	movs	r3, #1
 8003b44:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d017      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b52:	4b5d      	ldr	r3, [pc, #372]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b58:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b60:	4959      	ldr	r1, [pc, #356]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b70:	d101      	bne.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003b72:	2301      	movs	r3, #1
 8003b74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d017      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b8e:	4b4e      	ldr	r3, [pc, #312]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b94:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9c:	494a      	ldr	r1, [pc, #296]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bac:	d101      	bne.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0320 	and.w	r3, r3, #32
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 808b 	beq.w	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bdc:	4b3a      	ldr	r3, [pc, #232]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be0:	4a39      	ldr	r2, [pc, #228]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003be2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003be6:	6413      	str	r3, [r2, #64]	@ 0x40
 8003be8:	4b37      	ldr	r3, [pc, #220]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bf0:	60bb      	str	r3, [r7, #8]
 8003bf2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003bf4:	4b35      	ldr	r3, [pc, #212]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a34      	ldr	r2, [pc, #208]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c00:	f7fd ffbc 	bl	8001b7c <HAL_GetTick>
 8003c04:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c06:	e008      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c08:	f7fd ffb8 	bl	8001b7c <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b64      	cmp	r3, #100	@ 0x64
 8003c14:	d901      	bls.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e357      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c1a:	4b2c      	ldr	r3, [pc, #176]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0f0      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c26:	4b28      	ldr	r3, [pc, #160]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c2e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d035      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d02e      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c44:	4b20      	ldr	r3, [pc, #128]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c4c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c4e:	4b1e      	ldr	r3, [pc, #120]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c52:	4a1d      	ldr	r2, [pc, #116]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c58:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c5a:	4b1b      	ldr	r3, [pc, #108]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c5e:	4a1a      	ldr	r2, [pc, #104]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c64:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003c66:	4a18      	ldr	r2, [pc, #96]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c6c:	4b16      	ldr	r3, [pc, #88]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d114      	bne.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c78:	f7fd ff80 	bl	8001b7c <HAL_GetTick>
 8003c7c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c7e:	e00a      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c80:	f7fd ff7c 	bl	8001b7c <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e319      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c96:	4b0c      	ldr	r3, [pc, #48]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d0ee      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003caa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cae:	d111      	bne.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003cb0:	4b05      	ldr	r3, [pc, #20]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003cbc:	4b04      	ldr	r3, [pc, #16]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003cbe:	400b      	ands	r3, r1
 8003cc0:	4901      	ldr	r1, [pc, #4]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	608b      	str	r3, [r1, #8]
 8003cc6:	e00b      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	40007000 	.word	0x40007000
 8003cd0:	0ffffcff 	.word	0x0ffffcff
 8003cd4:	4baa      	ldr	r3, [pc, #680]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	4aa9      	ldr	r2, [pc, #676]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cda:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003cde:	6093      	str	r3, [r2, #8]
 8003ce0:	4ba7      	ldr	r3, [pc, #668]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ce2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cec:	49a4      	ldr	r1, [pc, #656]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0310 	and.w	r3, r3, #16
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d010      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003cfe:	4ba0      	ldr	r3, [pc, #640]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d04:	4a9e      	ldr	r2, [pc, #632]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d0a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003d0e:	4b9c      	ldr	r3, [pc, #624]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d10:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d18:	4999      	ldr	r1, [pc, #612]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00a      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d2c:	4b94      	ldr	r3, [pc, #592]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d32:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d3a:	4991      	ldr	r1, [pc, #580]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d4e:	4b8c      	ldr	r3, [pc, #560]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d54:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d5c:	4988      	ldr	r1, [pc, #544]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00a      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d70:	4b83      	ldr	r3, [pc, #524]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d7e:	4980      	ldr	r1, [pc, #512]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d92:	4b7b      	ldr	r3, [pc, #492]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d98:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da0:	4977      	ldr	r1, [pc, #476]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00a      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003db4:	4b72      	ldr	r3, [pc, #456]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dba:	f023 0203 	bic.w	r2, r3, #3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc2:	496f      	ldr	r1, [pc, #444]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00a      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dd6:	4b6a      	ldr	r3, [pc, #424]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ddc:	f023 020c 	bic.w	r2, r3, #12
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003de4:	4966      	ldr	r1, [pc, #408]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00a      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003df8:	4b61      	ldr	r3, [pc, #388]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dfe:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e06:	495e      	ldr	r1, [pc, #376]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e1a:	4b59      	ldr	r3, [pc, #356]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e20:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e28:	4955      	ldr	r1, [pc, #340]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00a      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e3c:	4b50      	ldr	r3, [pc, #320]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e42:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e4a:	494d      	ldr	r1, [pc, #308]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00a      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003e5e:	4b48      	ldr	r3, [pc, #288]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e64:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e6c:	4944      	ldr	r1, [pc, #272]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00a      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003e80:	4b3f      	ldr	r3, [pc, #252]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e86:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e8e:	493c      	ldr	r1, [pc, #240]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00a      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003ea2:	4b37      	ldr	r3, [pc, #220]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ea8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eb0:	4933      	ldr	r1, [pc, #204]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00a      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ec4:	4b2e      	ldr	r3, [pc, #184]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eca:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ed2:	492b      	ldr	r1, [pc, #172]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d011      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ee6:	4b26      	ldr	r3, [pc, #152]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eec:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ef4:	4922      	ldr	r1, [pc, #136]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f04:	d101      	bne.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003f06:	2301      	movs	r3, #1
 8003f08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0308 	and.w	r3, r3, #8
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003f16:	2301      	movs	r3, #1
 8003f18:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00a      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f26:	4b16      	ldr	r3, [pc, #88]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f2c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f34:	4912      	ldr	r1, [pc, #72]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00b      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f48:	4b0d      	ldr	r3, [pc, #52]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f4e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f58:	4909      	ldr	r1, [pc, #36]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d006      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f000 80d9 	beq.w	8004126 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003f74:	4b02      	ldr	r3, [pc, #8]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a01      	ldr	r2, [pc, #4]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f7a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f7e:	e001      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003f80:	40023800 	.word	0x40023800
 8003f84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f86:	f7fd fdf9 	bl	8001b7c <HAL_GetTick>
 8003f8a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f8c:	e008      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f8e:	f7fd fdf5 	bl	8001b7c <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	2b64      	cmp	r3, #100	@ 0x64
 8003f9a:	d901      	bls.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e194      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fa0:	4b6c      	ldr	r3, [pc, #432]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1f0      	bne.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d021      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d11d      	bne.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003fc0:	4b64      	ldr	r3, [pc, #400]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fc6:	0c1b      	lsrs	r3, r3, #16
 8003fc8:	f003 0303 	and.w	r3, r3, #3
 8003fcc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003fce:	4b61      	ldr	r3, [pc, #388]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fd4:	0e1b      	lsrs	r3, r3, #24
 8003fd6:	f003 030f 	and.w	r3, r3, #15
 8003fda:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	019a      	lsls	r2, r3, #6
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	041b      	lsls	r3, r3, #16
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	061b      	lsls	r3, r3, #24
 8003fec:	431a      	orrs	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	071b      	lsls	r3, r3, #28
 8003ff4:	4957      	ldr	r1, [pc, #348]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d004      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800400c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004010:	d00a      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800401a:	2b00      	cmp	r3, #0
 800401c:	d02e      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004022:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004026:	d129      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004028:	4b4a      	ldr	r3, [pc, #296]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800402a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800402e:	0c1b      	lsrs	r3, r3, #16
 8004030:	f003 0303 	and.w	r3, r3, #3
 8004034:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004036:	4b47      	ldr	r3, [pc, #284]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004038:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800403c:	0f1b      	lsrs	r3, r3, #28
 800403e:	f003 0307 	and.w	r3, r3, #7
 8004042:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	019a      	lsls	r2, r3, #6
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	041b      	lsls	r3, r3, #16
 800404e:	431a      	orrs	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	061b      	lsls	r3, r3, #24
 8004056:	431a      	orrs	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	071b      	lsls	r3, r3, #28
 800405c:	493d      	ldr	r1, [pc, #244]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800405e:	4313      	orrs	r3, r2
 8004060:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004064:	4b3b      	ldr	r3, [pc, #236]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004066:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800406a:	f023 021f 	bic.w	r2, r3, #31
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004072:	3b01      	subs	r3, #1
 8004074:	4937      	ldr	r1, [pc, #220]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004076:	4313      	orrs	r3, r2
 8004078:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d01d      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004088:	4b32      	ldr	r3, [pc, #200]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800408a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800408e:	0e1b      	lsrs	r3, r3, #24
 8004090:	f003 030f 	and.w	r3, r3, #15
 8004094:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004096:	4b2f      	ldr	r3, [pc, #188]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004098:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800409c:	0f1b      	lsrs	r3, r3, #28
 800409e:	f003 0307 	and.w	r3, r3, #7
 80040a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	019a      	lsls	r2, r3, #6
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	041b      	lsls	r3, r3, #16
 80040b0:	431a      	orrs	r2, r3
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	061b      	lsls	r3, r3, #24
 80040b6:	431a      	orrs	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	071b      	lsls	r3, r3, #28
 80040bc:	4925      	ldr	r1, [pc, #148]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d011      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	019a      	lsls	r2, r3, #6
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	041b      	lsls	r3, r3, #16
 80040dc:	431a      	orrs	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	061b      	lsls	r3, r3, #24
 80040e4:	431a      	orrs	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	071b      	lsls	r3, r3, #28
 80040ec:	4919      	ldr	r1, [pc, #100]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80040f4:	4b17      	ldr	r3, [pc, #92]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a16      	ldr	r2, [pc, #88]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80040fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004100:	f7fd fd3c 	bl	8001b7c <HAL_GetTick>
 8004104:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004106:	e008      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004108:	f7fd fd38 	bl	8001b7c <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b64      	cmp	r3, #100	@ 0x64
 8004114:	d901      	bls.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e0d7      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800411a:	4b0e      	ldr	r3, [pc, #56]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d0f0      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	2b01      	cmp	r3, #1
 800412a:	f040 80cd 	bne.w	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800412e:	4b09      	ldr	r3, [pc, #36]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a08      	ldr	r2, [pc, #32]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004134:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004138:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800413a:	f7fd fd1f 	bl	8001b7c <HAL_GetTick>
 800413e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004140:	e00a      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004142:	f7fd fd1b 	bl	8001b7c <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b64      	cmp	r3, #100	@ 0x64
 800414e:	d903      	bls.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e0ba      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004154:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004158:	4b5e      	ldr	r3, [pc, #376]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004160:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004164:	d0ed      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004176:	2b00      	cmp	r3, #0
 8004178:	d009      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004182:	2b00      	cmp	r3, #0
 8004184:	d02e      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418a:	2b00      	cmp	r3, #0
 800418c:	d12a      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800418e:	4b51      	ldr	r3, [pc, #324]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004194:	0c1b      	lsrs	r3, r3, #16
 8004196:	f003 0303 	and.w	r3, r3, #3
 800419a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800419c:	4b4d      	ldr	r3, [pc, #308]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800419e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a2:	0f1b      	lsrs	r3, r3, #28
 80041a4:	f003 0307 	and.w	r3, r3, #7
 80041a8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	019a      	lsls	r2, r3, #6
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	041b      	lsls	r3, r3, #16
 80041b4:	431a      	orrs	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	061b      	lsls	r3, r3, #24
 80041bc:	431a      	orrs	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	071b      	lsls	r3, r3, #28
 80041c2:	4944      	ldr	r1, [pc, #272]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80041ca:	4b42      	ldr	r3, [pc, #264]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041d0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d8:	3b01      	subs	r3, #1
 80041da:	021b      	lsls	r3, r3, #8
 80041dc:	493d      	ldr	r1, [pc, #244]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d022      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041f8:	d11d      	bne.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80041fa:	4b36      	ldr	r3, [pc, #216]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004200:	0e1b      	lsrs	r3, r3, #24
 8004202:	f003 030f 	and.w	r3, r3, #15
 8004206:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004208:	4b32      	ldr	r3, [pc, #200]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800420a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800420e:	0f1b      	lsrs	r3, r3, #28
 8004210:	f003 0307 	and.w	r3, r3, #7
 8004214:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	019a      	lsls	r2, r3, #6
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	041b      	lsls	r3, r3, #16
 8004222:	431a      	orrs	r2, r3
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	061b      	lsls	r3, r3, #24
 8004228:	431a      	orrs	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	071b      	lsls	r3, r3, #28
 800422e:	4929      	ldr	r1, [pc, #164]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004230:	4313      	orrs	r3, r2
 8004232:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0308 	and.w	r3, r3, #8
 800423e:	2b00      	cmp	r3, #0
 8004240:	d028      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004242:	4b24      	ldr	r3, [pc, #144]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004248:	0e1b      	lsrs	r3, r3, #24
 800424a:	f003 030f 	and.w	r3, r3, #15
 800424e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004250:	4b20      	ldr	r3, [pc, #128]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004256:	0c1b      	lsrs	r3, r3, #16
 8004258:	f003 0303 	and.w	r3, r3, #3
 800425c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	019a      	lsls	r2, r3, #6
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	041b      	lsls	r3, r3, #16
 8004268:	431a      	orrs	r2, r3
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	061b      	lsls	r3, r3, #24
 800426e:	431a      	orrs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	69db      	ldr	r3, [r3, #28]
 8004274:	071b      	lsls	r3, r3, #28
 8004276:	4917      	ldr	r1, [pc, #92]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004278:	4313      	orrs	r3, r2
 800427a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800427e:	4b15      	ldr	r3, [pc, #84]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004280:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004284:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800428c:	4911      	ldr	r1, [pc, #68]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800428e:	4313      	orrs	r3, r2
 8004290:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004294:	4b0f      	ldr	r3, [pc, #60]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a0e      	ldr	r2, [pc, #56]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800429a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800429e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042a0:	f7fd fc6c 	bl	8001b7c <HAL_GetTick>
 80042a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042a6:	e008      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80042a8:	f7fd fc68 	bl	8001b7c <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b64      	cmp	r3, #100	@ 0x64
 80042b4:	d901      	bls.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e007      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042ba:	4b06      	ldr	r3, [pc, #24]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80042c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042c6:	d1ef      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3720      	adds	r7, #32
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	40023800 	.word	0x40023800

080042d8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e022      	b.n	8004330 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d105      	bne.n	8004302 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f7fd f987 	bl	8001610 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2203      	movs	r2, #3
 8004306:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f814 	bl	8004338 <HAL_SD_InitCard>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e00a      	b.n	8004330 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3708      	adds	r7, #8
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004338:	b5b0      	push	{r4, r5, r7, lr}
 800433a:	b08e      	sub	sp, #56	@ 0x38
 800433c:	af04      	add	r7, sp, #16
 800433e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8004340:	2300      	movs	r3, #0
 8004342:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8004344:	2300      	movs	r3, #0
 8004346:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004348:	2300      	movs	r3, #0
 800434a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800434c:	2300      	movs	r3, #0
 800434e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004350:	2300      	movs	r3, #0
 8004352:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8004354:	2376      	movs	r3, #118	@ 0x76
 8004356:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681d      	ldr	r5, [r3, #0]
 800435c:	466c      	mov	r4, sp
 800435e:	f107 0314 	add.w	r3, r7, #20
 8004362:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004366:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800436a:	f107 0308 	add.w	r3, r7, #8
 800436e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004370:	4628      	mov	r0, r5
 8004372:	f001 f9d3 	bl	800571c <SDMMC_Init>
 8004376:	4603      	mov	r3, r0
 8004378:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 800437c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e059      	b.n	800443c <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004396:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4618      	mov	r0, r3
 800439e:	f001 fa07 	bl	80057b0 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043b0:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80043b2:	2002      	movs	r0, #2
 80043b4:	f7fd fbee 	bl	8001b94 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 ff59 	bl	8005270 <SD_PowerON>
 80043be:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80043c0:	6a3b      	ldr	r3, [r7, #32]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00b      	beq.n	80043de <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043d2:	6a3b      	ldr	r3, [r7, #32]
 80043d4:	431a      	orrs	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e02e      	b.n	800443c <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 fe78 	bl	80050d4 <SD_InitCard>
 80043e4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80043e6:	6a3b      	ldr	r3, [r7, #32]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00b      	beq.n	8004404 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043f8:	6a3b      	ldr	r3, [r7, #32]
 80043fa:	431a      	orrs	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e01b      	b.n	800443c <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800440c:	4618      	mov	r0, r3
 800440e:	f001 fa61 	bl	80058d4 <SDMMC_CmdBlockLength>
 8004412:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004414:	6a3b      	ldr	r3, [r7, #32]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00f      	beq.n	800443a <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a09      	ldr	r2, [pc, #36]	@ (8004444 <HAL_SD_InitCard+0x10c>)
 8004420:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	431a      	orrs	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e000      	b.n	800443c <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3728      	adds	r7, #40	@ 0x28
 8004440:	46bd      	mov	sp, r7
 8004442:	bdb0      	pop	{r4, r5, r7, pc}
 8004444:	004005ff 	.word	0x004005ff

08004448 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b08c      	sub	sp, #48	@ 0x30
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
 8004454:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d107      	bne.n	8004470 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004464:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e0c3      	b.n	80045f8 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b01      	cmp	r3, #1
 800447a:	f040 80bc 	bne.w	80045f6 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004484:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	441a      	add	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800448e:	429a      	cmp	r2, r3
 8004490:	d907      	bls.n	80044a2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004496:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e0aa      	b.n	80045f8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2203      	movs	r2, #3
 80044a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2200      	movs	r2, #0
 80044b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 80044c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c6:	4a4e      	ldr	r2, [pc, #312]	@ (8004600 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80044c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ce:	4a4d      	ldr	r2, [pc, #308]	@ (8004604 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80044d0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d6:	2200      	movs	r2, #0
 80044d8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044de:	2200      	movs	r2, #0
 80044e0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	3380      	adds	r3, #128	@ 0x80
 8004508:	4619      	mov	r1, r3
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	025b      	lsls	r3, r3, #9
 8004510:	089b      	lsrs	r3, r3, #2
 8004512:	f7fd fd23 	bl	8001f5c <HAL_DMA_Start_IT>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d017      	beq.n	800454c <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800452a:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a35      	ldr	r2, [pc, #212]	@ (8004608 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8004532:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004538:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e055      	b.n	80045f8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f042 0208 	orr.w	r2, r2, #8
 800455a:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004560:	2b01      	cmp	r3, #1
 8004562:	d002      	beq.n	800456a <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8004564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004566:	025b      	lsls	r3, r3, #9
 8004568:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800456a:	f04f 33ff 	mov.w	r3, #4294967295
 800456e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	025b      	lsls	r3, r3, #9
 8004574:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004576:	2390      	movs	r3, #144	@ 0x90
 8004578:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800457a:	2302      	movs	r3, #2
 800457c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800457e:	2300      	movs	r3, #0
 8004580:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8004582:	2301      	movs	r3, #1
 8004584:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f107 0210 	add.w	r2, r7, #16
 800458e:	4611      	mov	r1, r2
 8004590:	4618      	mov	r0, r3
 8004592:	f001 f973 	bl	800587c <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d90a      	bls.n	80045b2 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2282      	movs	r2, #130	@ 0x82
 80045a0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045a8:	4618      	mov	r0, r3
 80045aa:	f001 f9d7 	bl	800595c <SDMMC_CmdReadMultiBlock>
 80045ae:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80045b0:	e009      	b.n	80045c6 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2281      	movs	r2, #129	@ 0x81
 80045b6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045be:	4618      	mov	r0, r3
 80045c0:	f001 f9aa 	bl	8005918 <SDMMC_CmdReadSingleBlock>
 80045c4:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80045c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d012      	beq.n	80045f2 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a0d      	ldr	r2, [pc, #52]	@ (8004608 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80045d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045da:	431a      	orrs	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e002      	b.n	80045f8 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 80045f2:	2300      	movs	r3, #0
 80045f4:	e000      	b.n	80045f8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 80045f6:	2302      	movs	r3, #2
  }
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3730      	adds	r7, #48	@ 0x30
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	08004ee3 	.word	0x08004ee3
 8004604:	08004f55 	.word	0x08004f55
 8004608:	004005ff 	.word	0x004005ff

0800460c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b08c      	sub	sp, #48	@ 0x30
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
 8004618:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d107      	bne.n	8004634 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004628:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e0c6      	b.n	80047c2 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b01      	cmp	r3, #1
 800463e:	f040 80bf 	bne.w	80047c0 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004648:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	441a      	add	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004652:	429a      	cmp	r2, r3
 8004654:	d907      	bls.n	8004666 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800465a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e0ad      	b.n	80047c2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2203      	movs	r2, #3
 800466a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2200      	movs	r2, #0
 8004674:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f042 021a 	orr.w	r2, r2, #26
 8004684:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800468a:	4a50      	ldr	r2, [pc, #320]	@ (80047cc <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800468c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004692:	4a4f      	ldr	r2, [pc, #316]	@ (80047d0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004694:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800469a:	2200      	movs	r2, #0
 800469c:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d002      	beq.n	80046ac <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80046a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a8:	025b      	lsls	r3, r3, #9
 80046aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d90a      	bls.n	80046c8 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	22a0      	movs	r2, #160	@ 0xa0
 80046b6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046be:	4618      	mov	r0, r3
 80046c0:	f001 f990 	bl	80059e4 <SDMMC_CmdWriteMultiBlock>
 80046c4:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80046c6:	e009      	b.n	80046dc <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2290      	movs	r2, #144	@ 0x90
 80046cc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046d4:	4618      	mov	r0, r3
 80046d6:	f001 f963 	bl	80059a0 <SDMMC_CmdWriteSingleBlock>
 80046da:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80046dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d012      	beq.n	8004708 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a3b      	ldr	r2, [pc, #236]	@ (80047d4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80046e8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046f0:	431a      	orrs	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e05c      	b.n	80047c2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f042 0208 	orr.w	r2, r2, #8
 8004716:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800471c:	2240      	movs	r2, #64	@ 0x40
 800471e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004730:	689a      	ldr	r2, [r3, #8]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004740:	68b9      	ldr	r1, [r7, #8]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	3380      	adds	r3, #128	@ 0x80
 8004748:	461a      	mov	r2, r3
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	025b      	lsls	r3, r3, #9
 800474e:	089b      	lsrs	r3, r3, #2
 8004750:	f7fd fc04 	bl	8001f5c <HAL_DMA_Start_IT>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d01a      	beq.n	8004790 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 021a 	bic.w	r2, r2, #26
 8004768:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a19      	ldr	r2, [pc, #100]	@ (80047d4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8004770:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004776:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e018      	b.n	80047c2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004790:	f04f 33ff 	mov.w	r3, #4294967295
 8004794:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	025b      	lsls	r3, r3, #9
 800479a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800479c:	2390      	movs	r3, #144	@ 0x90
 800479e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80047a0:	2300      	movs	r3, #0
 80047a2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80047a4:	2300      	movs	r3, #0
 80047a6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80047a8:	2301      	movs	r3, #1
 80047aa:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f107 0210 	add.w	r2, r7, #16
 80047b4:	4611      	mov	r1, r2
 80047b6:	4618      	mov	r0, r3
 80047b8:	f001 f860 	bl	800587c <SDMMC_ConfigData>

      return HAL_OK;
 80047bc:	2300      	movs	r3, #0
 80047be:	e000      	b.n	80047c2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 80047c0:	2302      	movs	r3, #2
  }
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3730      	adds	r7, #48	@ 0x30
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	08004eb9 	.word	0x08004eb9
 80047d0:	08004f55 	.word	0x08004f55
 80047d4:	004005ff 	.word	0x004005ff

080047d8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d008      	beq.n	8004806 <HAL_SD_IRQHandler+0x2e>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f003 0308 	and.w	r3, r3, #8
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 fdec 	bl	80053dc <SD_Read_IT>
 8004804:	e15a      	b.n	8004abc <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800480c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 808d 	beq.w	8004930 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800481e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	4b9a      	ldr	r3, [pc, #616]	@ (8004a94 <HAL_SD_IRQHandler+0x2bc>)
 800482c:	400b      	ands	r3, r1
 800482e:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f022 0201 	bic.w	r2, r2, #1
 800483e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f003 0308 	and.w	r3, r3, #8
 8004846:	2b00      	cmp	r3, #0
 8004848:	d039      	beq.n	80048be <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b00      	cmp	r3, #0
 8004852:	d104      	bne.n	800485e <HAL_SD_IRQHandler+0x86>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f003 0320 	and.w	r3, r3, #32
 800485a:	2b00      	cmp	r3, #0
 800485c:	d011      	beq.n	8004882 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4618      	mov	r0, r3
 8004864:	f001 f8e0 	bl	8005a28 <SDMMC_CmdStopTransfer>
 8004868:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d008      	beq.n	8004882 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	431a      	orrs	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 f921 	bl	8004ac4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f240 523a 	movw	r2, #1338	@ 0x53a
 800488a:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f003 0301 	and.w	r3, r3, #1
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d104      	bne.n	80048ae <HAL_SD_IRQHandler+0xd6>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d003      	beq.n	80048b6 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f001 fcfe 	bl	80062b0 <HAL_SD_RxCpltCallback>
 80048b4:	e102      	b.n	8004abc <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f001 fcf0 	bl	800629c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80048bc:	e0fe      	b.n	8004abc <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f000 80f9 	beq.w	8004abc <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f003 0320 	and.w	r3, r3, #32
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d011      	beq.n	80048f8 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4618      	mov	r0, r3
 80048da:	f001 f8a5 	bl	8005a28 <SDMMC_CmdStopTransfer>
 80048de:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d008      	beq.n	80048f8 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	431a      	orrs	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 f8e6 	bl	8004ac4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f040 80dc 	bne.w	8004abc <HAL_SD_IRQHandler+0x2e4>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	f040 80d6 	bne.w	8004abc <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 0208 	bic.w	r2, r2, #8
 800491e:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f001 fcb7 	bl	800629c <HAL_SD_TxCpltCallback>
}
 800492e:	e0c5      	b.n	8004abc <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004936:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d008      	beq.n	8004950 <HAL_SD_IRQHandler+0x178>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f003 0308 	and.w	r3, r3, #8
 8004944:	2b00      	cmp	r3, #0
 8004946:	d003      	beq.n	8004950 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 fd98 	bl	800547e <SD_Write_IT>
 800494e:	e0b5      	b.n	8004abc <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004956:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 80ae 	beq.w	8004abc <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d005      	beq.n	800497a <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004972:	f043 0202 	orr.w	r2, r3, #2
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004980:	f003 0308 	and.w	r3, r3, #8
 8004984:	2b00      	cmp	r3, #0
 8004986:	d005      	beq.n	8004994 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800498c:	f043 0208 	orr.w	r2, r3, #8
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800499a:	f003 0320 	and.w	r3, r3, #32
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d005      	beq.n	80049ae <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049a6:	f043 0220 	orr.w	r2, r3, #32
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049b4:	f003 0310 	and.w	r3, r3, #16
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d005      	beq.n	80049c8 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c0:	f043 0210 	orr.w	r2, r3, #16
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f240 523a 	movw	r2, #1338	@ 0x53a
 80049d0:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 80049e0:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4618      	mov	r0, r3
 80049e8:	f001 f81e 	bl	8005a28 <SDMMC_CmdStopTransfer>
 80049ec:	4602      	mov	r2, r0
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049f2:	431a      	orrs	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f003 0308 	and.w	r3, r3, #8
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00a      	beq.n	8004a18 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 f857 	bl	8004ac4 <HAL_SD_ErrorCallback>
}
 8004a16:	e051      	b.n	8004abc <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d04c      	beq.n	8004abc <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f003 0310 	and.w	r3, r3, #16
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d104      	bne.n	8004a36 <HAL_SD_IRQHandler+0x25e>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f003 0320 	and.w	r3, r3, #32
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d011      	beq.n	8004a5a <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a3a:	4a17      	ldr	r2, [pc, #92]	@ (8004a98 <HAL_SD_IRQHandler+0x2c0>)
 8004a3c:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7fd faea 	bl	800201c <HAL_DMA_Abort_IT>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d036      	beq.n	8004abc <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 fad0 	bl	8004ff8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004a58:	e030      	b.n	8004abc <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f003 0301 	and.w	r3, r3, #1
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d104      	bne.n	8004a6e <HAL_SD_IRQHandler+0x296>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d018      	beq.n	8004aa0 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a72:	4a0a      	ldr	r2, [pc, #40]	@ (8004a9c <HAL_SD_IRQHandler+0x2c4>)
 8004a74:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7fd face 	bl	800201c <HAL_DMA_Abort_IT>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d01a      	beq.n	8004abc <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 faeb 	bl	8005066 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004a90:	e014      	b.n	8004abc <HAL_SD_IRQHandler+0x2e4>
 8004a92:	bf00      	nop
 8004a94:	ffff3ec5 	.word	0xffff3ec5
 8004a98:	08004ff9 	.word	0x08004ff9
 8004a9c:	08005067 	.word	0x08005067
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f001 fbe7 	bl	8006288 <HAL_SD_AbortCallback>
}
 8004aba:	e7ff      	b.n	8004abc <HAL_SD_IRQHandler+0x2e4>
 8004abc:	bf00      	nop
 8004abe:	3710      	adds	r7, #16
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ae6:	0f9b      	lsrs	r3, r3, #30
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004af2:	0e9b      	lsrs	r3, r3, #26
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	f003 030f 	and.w	r3, r3, #15
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b04:	0e1b      	lsrs	r3, r3, #24
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	f003 0303 	and.w	r3, r3, #3
 8004b0c:	b2da      	uxtb	r2, r3
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b16:	0c1b      	lsrs	r3, r3, #16
 8004b18:	b2da      	uxtb	r2, r3
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b22:	0a1b      	lsrs	r3, r3, #8
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b2e:	b2da      	uxtb	r2, r3
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b38:	0d1b      	lsrs	r3, r3, #20
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b44:	0c1b      	lsrs	r3, r3, #16
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	f003 030f 	and.w	r3, r3, #15
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b56:	0bdb      	lsrs	r3, r3, #15
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	b2da      	uxtb	r2, r3
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b68:	0b9b      	lsrs	r3, r3, #14
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	b2da      	uxtb	r2, r3
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b7a:	0b5b      	lsrs	r3, r3, #13
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	b2da      	uxtb	r2, r3
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b8c:	0b1b      	lsrs	r3, r3, #12
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	b2da      	uxtb	r2, r3
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d163      	bne.n	8004c70 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004bac:	009a      	lsls	r2, r3, #2
 8004bae:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8004bb8:	0f92      	lsrs	r2, r2, #30
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bc4:	0edb      	lsrs	r3, r3, #27
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bd6:	0e1b      	lsrs	r3, r3, #24
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	f003 0307 	and.w	r3, r3, #7
 8004bde:	b2da      	uxtb	r2, r3
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004be8:	0d5b      	lsrs	r3, r3, #21
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	f003 0307 	and.w	r3, r3, #7
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bfa:	0c9b      	lsrs	r3, r3, #18
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	f003 0307 	and.w	r3, r3, #7
 8004c02:	b2da      	uxtb	r2, r3
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c0c:	0bdb      	lsrs	r3, r3, #15
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	f003 0307 	and.w	r3, r3, #7
 8004c14:	b2da      	uxtb	r2, r3
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	1c5a      	adds	r2, r3, #1
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	7e1b      	ldrb	r3, [r3, #24]
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	f003 0307 	and.w	r3, r3, #7
 8004c2e:	3302      	adds	r3, #2
 8004c30:	2201      	movs	r2, #1
 8004c32:	fa02 f303 	lsl.w	r3, r2, r3
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004c3a:	fb03 f202 	mul.w	r2, r3, r2
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	7a1b      	ldrb	r3, [r3, #8]
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	f003 030f 	and.w	r3, r3, #15
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	409a      	lsls	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004c5c:	0a52      	lsrs	r2, r2, #9
 8004c5e:	fb03 f202 	mul.w	r2, r3, r2
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c6c:	661a      	str	r2, [r3, #96]	@ 0x60
 8004c6e:	e031      	b.n	8004cd4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d11d      	bne.n	8004cb4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c7c:	041b      	lsls	r3, r3, #16
 8004c7e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c86:	0c1b      	lsrs	r3, r3, #16
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	3301      	adds	r3, #1
 8004c94:	029a      	lsls	r2, r3, #10
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ca8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	661a      	str	r2, [r3, #96]	@ 0x60
 8004cb2:	e00f      	b.n	8004cd4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a58      	ldr	r2, [pc, #352]	@ (8004e1c <HAL_SD_GetCardCSD+0x344>)
 8004cba:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cc0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e09d      	b.n	8004e10 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cd8:	0b9b      	lsrs	r3, r3, #14
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	b2da      	uxtb	r2, r3
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cea:	09db      	lsrs	r3, r3, #7
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cf2:	b2da      	uxtb	r2, r3
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d02:	b2da      	uxtb	r2, r3
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d0c:	0fdb      	lsrs	r3, r3, #31
 8004d0e:	b2da      	uxtb	r2, r3
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d18:	0f5b      	lsrs	r3, r3, #29
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	f003 0303 	and.w	r3, r3, #3
 8004d20:	b2da      	uxtb	r2, r3
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d2a:	0e9b      	lsrs	r3, r3, #26
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	f003 0307 	and.w	r3, r3, #7
 8004d32:	b2da      	uxtb	r2, r3
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d3c:	0d9b      	lsrs	r3, r3, #22
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	f003 030f 	and.w	r3, r3, #15
 8004d44:	b2da      	uxtb	r2, r3
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d4e:	0d5b      	lsrs	r3, r3, #21
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	b2da      	uxtb	r2, r3
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d6a:	0c1b      	lsrs	r3, r3, #16
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	b2da      	uxtb	r2, r3
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d7e:	0bdb      	lsrs	r3, r3, #15
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	f003 0301 	and.w	r3, r3, #1
 8004d86:	b2da      	uxtb	r2, r3
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d92:	0b9b      	lsrs	r3, r3, #14
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	b2da      	uxtb	r2, r3
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004da6:	0b5b      	lsrs	r3, r3, #13
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	b2da      	uxtb	r2, r3
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dba:	0b1b      	lsrs	r3, r3, #12
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	b2da      	uxtb	r2, r3
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dce:	0a9b      	lsrs	r3, r3, #10
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	f003 0303 	and.w	r3, r3, #3
 8004dd6:	b2da      	uxtb	r2, r3
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004de2:	0a1b      	lsrs	r3, r3, #8
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	f003 0303 	and.w	r3, r3, #3
 8004dea:	b2da      	uxtb	r2, r3
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004df6:	085b      	lsrs	r3, r3, #1
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr
 8004e1c:	004005ff 	.word	0x004005ff

08004e20 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004e80:	2300      	movs	r3, #0
 8004e82:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004e84:	f107 030c 	add.w	r3, r7, #12
 8004e88:	4619      	mov	r1, r3
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 fa7e 	bl	800538c <SD_SendStatus>
 8004e90:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d005      	beq.n	8004ea4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	0a5b      	lsrs	r3, r3, #9
 8004ea8:	f003 030f 	and.w	r3, r3, #15
 8004eac:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004eae:	693b      	ldr	r3, [r7, #16]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3718      	adds	r7, #24
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ec4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ed4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004ed6:	bf00      	nop
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b084      	sub	sp, #16
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eee:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef4:	2b82      	cmp	r3, #130	@ 0x82
 8004ef6:	d111      	bne.n	8004f1c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4618      	mov	r0, r3
 8004efe:	f000 fd93 	bl	8005a28 <SDMMC_CmdStopTransfer>
 8004f02:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d008      	beq.n	8004f1c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	431a      	orrs	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f7ff fdd4 	bl	8004ac4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f022 0208 	bic.w	r2, r2, #8
 8004f2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004f34:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f001 f9b3 	bl	80062b0 <HAL_SD_RxCpltCallback>
#endif
}
 8004f4a:	bf00      	nop
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
	...

08004f54 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f60:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f7fd fa06 	bl	8002374 <HAL_DMA_GetError>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d03e      	beq.n	8004fec <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f74:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f7c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d002      	beq.n	8004f8a <SD_DMAError+0x36>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d12d      	bne.n	8004fe6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a19      	ldr	r2, [pc, #100]	@ (8004ff4 <SD_DMAError+0xa0>)
 8004f90:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8004fa0:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8004fae:	6978      	ldr	r0, [r7, #20]
 8004fb0:	f7ff ff62 	bl	8004e78 <HAL_SD_GetCardState>
 8004fb4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	2b06      	cmp	r3, #6
 8004fba:	d002      	beq.n	8004fc2 <SD_DMAError+0x6e>
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	2b05      	cmp	r3, #5
 8004fc0:	d10a      	bne.n	8004fd8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 fd2e 	bl	8005a28 <SDMMC_CmdStopTransfer>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8004fe6:	6978      	ldr	r0, [r7, #20]
 8004fe8:	f7ff fd6c 	bl	8004ac4 <HAL_SD_ErrorCallback>
#endif
  }
}
 8004fec:	bf00      	nop
 8004fee:	3718      	adds	r7, #24
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	004005ff 	.word	0x004005ff

08004ff8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005004:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800500e:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005010:	68f8      	ldr	r0, [r7, #12]
 8005012:	f7ff ff31 	bl	8004e78 <HAL_SD_GetCardState>
 8005016:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	2b06      	cmp	r3, #6
 800502a:	d002      	beq.n	8005032 <SD_DMATxAbort+0x3a>
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	2b05      	cmp	r3, #5
 8005030:	d10a      	bne.n	8005048 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4618      	mov	r0, r3
 8005038:	f000 fcf6 	bl	8005a28 <SDMMC_CmdStopTransfer>
 800503c:	4602      	mov	r2, r0
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005042:	431a      	orrs	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800504c:	2b00      	cmp	r3, #0
 800504e:	d103      	bne.n	8005058 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005050:	68f8      	ldr	r0, [r7, #12]
 8005052:	f001 f919 	bl	8006288 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005056:	e002      	b.n	800505e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f7ff fd33 	bl	8004ac4 <HAL_SD_ErrorCallback>
}
 800505e:	bf00      	nop
 8005060:	3710      	adds	r7, #16
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}

08005066 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b084      	sub	sp, #16
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005072:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f240 523a 	movw	r2, #1338	@ 0x53a
 800507c:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f7ff fefa 	bl	8004e78 <HAL_SD_GetCardState>
 8005084:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	2b06      	cmp	r3, #6
 8005098:	d002      	beq.n	80050a0 <SD_DMARxAbort+0x3a>
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	2b05      	cmp	r3, #5
 800509e:	d10a      	bne.n	80050b6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f000 fcbf 	bl	8005a28 <SDMMC_CmdStopTransfer>
 80050aa:	4602      	mov	r2, r0
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050b0:	431a      	orrs	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d103      	bne.n	80050c6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f001 f8e2 	bl	8006288 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80050c4:	e002      	b.n	80050cc <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f7ff fcfc 	bl	8004ac4 <HAL_SD_ErrorCallback>
}
 80050cc:	bf00      	nop
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80050d4:	b5b0      	push	{r4, r5, r7, lr}
 80050d6:	b094      	sub	sp, #80	@ 0x50
 80050d8:	af04      	add	r7, sp, #16
 80050da:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80050dc:	2301      	movs	r3, #1
 80050de:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4618      	mov	r0, r3
 80050e6:	f000 fb71 	bl	80057cc <SDMMC_GetPowerState>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d102      	bne.n	80050f6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80050f0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80050f4:	e0b8      	b.n	8005268 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050fa:	2b03      	cmp	r3, #3
 80050fc:	d02f      	beq.n	800515e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4618      	mov	r0, r3
 8005104:	f000 fd58 	bl	8005bb8 <SDMMC_CmdSendCID>
 8005108:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800510a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800510c:	2b00      	cmp	r3, #0
 800510e:	d001      	beq.n	8005114 <SD_InitCard+0x40>
    {
      return errorstate;
 8005110:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005112:	e0a9      	b.n	8005268 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2100      	movs	r1, #0
 800511a:	4618      	mov	r0, r3
 800511c:	f000 fb9b 	bl	8005856 <SDMMC_GetResponse>
 8005120:	4602      	mov	r2, r0
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2104      	movs	r1, #4
 800512c:	4618      	mov	r0, r3
 800512e:	f000 fb92 	bl	8005856 <SDMMC_GetResponse>
 8005132:	4602      	mov	r2, r0
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2108      	movs	r1, #8
 800513e:	4618      	mov	r0, r3
 8005140:	f000 fb89 	bl	8005856 <SDMMC_GetResponse>
 8005144:	4602      	mov	r2, r0
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	210c      	movs	r1, #12
 8005150:	4618      	mov	r0, r3
 8005152:	f000 fb80 	bl	8005856 <SDMMC_GetResponse>
 8005156:	4602      	mov	r2, r0
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005162:	2b03      	cmp	r3, #3
 8005164:	d00d      	beq.n	8005182 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f107 020e 	add.w	r2, r7, #14
 800516e:	4611      	mov	r1, r2
 8005170:	4618      	mov	r0, r3
 8005172:	f000 fd5e 	bl	8005c32 <SDMMC_CmdSetRelAdd>
 8005176:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005178:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <SD_InitCard+0xae>
    {
      return errorstate;
 800517e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005180:	e072      	b.n	8005268 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005186:	2b03      	cmp	r3, #3
 8005188:	d036      	beq.n	80051f8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800518a:	89fb      	ldrh	r3, [r7, #14]
 800518c:	461a      	mov	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800519a:	041b      	lsls	r3, r3, #16
 800519c:	4619      	mov	r1, r3
 800519e:	4610      	mov	r0, r2
 80051a0:	f000 fd28 	bl	8005bf4 <SDMMC_CmdSendCSD>
 80051a4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80051a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d001      	beq.n	80051b0 <SD_InitCard+0xdc>
    {
      return errorstate;
 80051ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051ae:	e05b      	b.n	8005268 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2100      	movs	r1, #0
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 fb4d 	bl	8005856 <SDMMC_GetResponse>
 80051bc:	4602      	mov	r2, r0
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2104      	movs	r1, #4
 80051c8:	4618      	mov	r0, r3
 80051ca:	f000 fb44 	bl	8005856 <SDMMC_GetResponse>
 80051ce:	4602      	mov	r2, r0
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2108      	movs	r1, #8
 80051da:	4618      	mov	r0, r3
 80051dc:	f000 fb3b 	bl	8005856 <SDMMC_GetResponse>
 80051e0:	4602      	mov	r2, r0
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	210c      	movs	r1, #12
 80051ec:	4618      	mov	r0, r3
 80051ee:	f000 fb32 	bl	8005856 <SDMMC_GetResponse>
 80051f2:	4602      	mov	r2, r0
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2104      	movs	r1, #4
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 fb29 	bl	8005856 <SDMMC_GetResponse>
 8005204:	4603      	mov	r3, r0
 8005206:	0d1a      	lsrs	r2, r3, #20
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800520c:	f107 0310 	add.w	r3, r7, #16
 8005210:	4619      	mov	r1, r3
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f7ff fc60 	bl	8004ad8 <HAL_SD_GetCardCSD>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d002      	beq.n	8005224 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800521e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005222:	e021      	b.n	8005268 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6819      	ldr	r1, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800522c:	041b      	lsls	r3, r3, #16
 800522e:	2200      	movs	r2, #0
 8005230:	461c      	mov	r4, r3
 8005232:	4615      	mov	r5, r2
 8005234:	4622      	mov	r2, r4
 8005236:	462b      	mov	r3, r5
 8005238:	4608      	mov	r0, r1
 800523a:	f000 fc17 	bl	8005a6c <SDMMC_CmdSelDesel>
 800523e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005240:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005242:	2b00      	cmp	r3, #0
 8005244:	d001      	beq.n	800524a <SD_InitCard+0x176>
  {
    return errorstate;
 8005246:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005248:	e00e      	b.n	8005268 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681d      	ldr	r5, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	466c      	mov	r4, sp
 8005252:	f103 0210 	add.w	r2, r3, #16
 8005256:	ca07      	ldmia	r2, {r0, r1, r2}
 8005258:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800525c:	3304      	adds	r3, #4
 800525e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005260:	4628      	mov	r0, r5
 8005262:	f000 fa5b 	bl	800571c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	3740      	adds	r7, #64	@ 0x40
 800526c:	46bd      	mov	sp, r7
 800526e:	bdb0      	pop	{r4, r5, r7, pc}

08005270 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005278:	2300      	movs	r3, #0
 800527a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800527c:	2300      	movs	r3, #0
 800527e:	617b      	str	r3, [r7, #20]
 8005280:	2300      	movs	r3, #0
 8005282:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4618      	mov	r0, r3
 800528a:	f000 fc12 	bl	8005ab2 <SDMMC_CmdGoIdleState>
 800528e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d001      	beq.n	800529a <SD_PowerON+0x2a>
  {
    return errorstate;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	e072      	b.n	8005380 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4618      	mov	r0, r3
 80052a0:	f000 fc25 	bl	8005aee <SDMMC_CmdOperCond>
 80052a4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00d      	beq.n	80052c8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4618      	mov	r0, r3
 80052b8:	f000 fbfb 	bl	8005ab2 <SDMMC_CmdGoIdleState>
 80052bc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d004      	beq.n	80052ce <SD_PowerON+0x5e>
    {
      return errorstate;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	e05b      	b.n	8005380 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d137      	bne.n	8005346 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2100      	movs	r1, #0
 80052dc:	4618      	mov	r0, r3
 80052de:	f000 fc25 	bl	8005b2c <SDMMC_CmdAppCommand>
 80052e2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d02d      	beq.n	8005346 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80052ea:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80052ee:	e047      	b.n	8005380 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2100      	movs	r1, #0
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 fc18 	bl	8005b2c <SDMMC_CmdAppCommand>
 80052fc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d001      	beq.n	8005308 <SD_PowerON+0x98>
    {
      return errorstate;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	e03b      	b.n	8005380 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	491e      	ldr	r1, [pc, #120]	@ (8005388 <SD_PowerON+0x118>)
 800530e:	4618      	mov	r0, r3
 8005310:	f000 fc2e 	bl	8005b70 <SDMMC_CmdAppOperCommand>
 8005314:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d002      	beq.n	8005322 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800531c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005320:	e02e      	b.n	8005380 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2100      	movs	r1, #0
 8005328:	4618      	mov	r0, r3
 800532a:	f000 fa94 	bl	8005856 <SDMMC_GetResponse>
 800532e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	0fdb      	lsrs	r3, r3, #31
 8005334:	2b01      	cmp	r3, #1
 8005336:	d101      	bne.n	800533c <SD_PowerON+0xcc>
 8005338:	2301      	movs	r3, #1
 800533a:	e000      	b.n	800533e <SD_PowerON+0xce>
 800533c:	2300      	movs	r3, #0
 800533e:	613b      	str	r3, [r7, #16]

    count++;
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	3301      	adds	r3, #1
 8005344:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800534c:	4293      	cmp	r3, r2
 800534e:	d802      	bhi.n	8005356 <SD_PowerON+0xe6>
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d0cc      	beq.n	80052f0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800535c:	4293      	cmp	r3, r2
 800535e:	d902      	bls.n	8005366 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005360:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005364:	e00c      	b.n	8005380 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d003      	beq.n	8005378 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	645a      	str	r2, [r3, #68]	@ 0x44
 8005376:	e002      	b.n	800537e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3718      	adds	r7, #24
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	c1100000 	.word	0xc1100000

0800538c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d102      	bne.n	80053a2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800539c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80053a0:	e018      	b.n	80053d4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053aa:	041b      	lsls	r3, r3, #16
 80053ac:	4619      	mov	r1, r3
 80053ae:	4610      	mov	r0, r2
 80053b0:	f000 fc60 	bl	8005c74 <SDMMC_CmdSendStatus>
 80053b4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d001      	beq.n	80053c0 <SD_SendStatus+0x34>
  {
    return errorstate;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	e009      	b.n	80053d4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2100      	movs	r1, #0
 80053c6:	4618      	mov	r0, r3
 80053c8:	f000 fa45 	bl	8005856 <SDMMC_GetResponse>
 80053cc:	4602      	mov	r2, r0
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053e8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ee:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d03f      	beq.n	8005476 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80053f6:	2300      	movs	r3, #0
 80053f8:	617b      	str	r3, [r7, #20]
 80053fa:	e033      	b.n	8005464 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4618      	mov	r0, r3
 8005402:	f000 f9b7 	bl	8005774 <SDMMC_ReadFIFO>
 8005406:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	b2da      	uxtb	r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	3301      	adds	r3, #1
 8005414:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	3b01      	subs	r3, #1
 800541a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	0a1b      	lsrs	r3, r3, #8
 8005420:	b2da      	uxtb	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	3301      	adds	r3, #1
 800542a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	3b01      	subs	r3, #1
 8005430:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	0c1b      	lsrs	r3, r3, #16
 8005436:	b2da      	uxtb	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	3301      	adds	r3, #1
 8005440:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	3b01      	subs	r3, #1
 8005446:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	0e1b      	lsrs	r3, r3, #24
 800544c:	b2da      	uxtb	r2, r3
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	3301      	adds	r3, #1
 8005456:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	3b01      	subs	r3, #1
 800545c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	3301      	adds	r3, #1
 8005462:	617b      	str	r3, [r7, #20]
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	2b07      	cmp	r3, #7
 8005468:	d9c8      	bls.n	80053fc <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	693a      	ldr	r2, [r7, #16]
 8005474:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8005476:	bf00      	nop
 8005478:	3718      	adds	r7, #24
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800547e:	b580      	push	{r7, lr}
 8005480:	b086      	sub	sp, #24
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005490:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d043      	beq.n	8005520 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8005498:	2300      	movs	r3, #0
 800549a:	617b      	str	r3, [r7, #20]
 800549c:	e037      	b.n	800550e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	3301      	adds	r3, #1
 80054a8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	3b01      	subs	r3, #1
 80054ae:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	021a      	lsls	r2, r3, #8
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	60bb      	str	r3, [r7, #8]
      tmp++;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	3301      	adds	r3, #1
 80054c0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	3b01      	subs	r3, #1
 80054c6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	041a      	lsls	r2, r3, #16
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	3301      	adds	r3, #1
 80054d8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	3b01      	subs	r3, #1
 80054de:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	061a      	lsls	r2, r3, #24
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	60bb      	str	r3, [r7, #8]
      tmp++;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	3301      	adds	r3, #1
 80054f0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	3b01      	subs	r3, #1
 80054f6:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f107 0208 	add.w	r2, r7, #8
 8005500:	4611      	mov	r1, r2
 8005502:	4618      	mov	r0, r3
 8005504:	f000 f943 	bl	800578e <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	3301      	adds	r3, #1
 800550c:	617b      	str	r3, [r7, #20]
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	2b07      	cmp	r3, #7
 8005512:	d9c4      	bls.n	800549e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8005520:	bf00      	nop
 8005522:	3718      	adds	r7, #24
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d101      	bne.n	800553c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e025      	b.n	8005588 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005542:	b2db      	uxtb	r3, r3
 8005544:	2b00      	cmp	r3, #0
 8005546:	d106      	bne.n	8005556 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f7fc f9f9 	bl	8001948 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2202      	movs	r2, #2
 800555a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	3304      	adds	r3, #4
 8005566:	4619      	mov	r1, r3
 8005568:	4610      	mov	r0, r2
 800556a:	f000 f811 	bl	8005590 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6818      	ldr	r0, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	461a      	mov	r2, r3
 8005578:	6839      	ldr	r1, [r7, #0]
 800557a:	f000 f865 	bl	8005648 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3708      	adds	r7, #8
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d121      	bne.n	80055e6 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	4b27      	ldr	r3, [pc, #156]	@ (8005644 <FMC_SDRAM_Init+0xb4>)
 80055a8:	4013      	ands	r3, r2
 80055aa:	683a      	ldr	r2, [r7, #0]
 80055ac:	6851      	ldr	r1, [r2, #4]
 80055ae:	683a      	ldr	r2, [r7, #0]
 80055b0:	6892      	ldr	r2, [r2, #8]
 80055b2:	4311      	orrs	r1, r2
 80055b4:	683a      	ldr	r2, [r7, #0]
 80055b6:	68d2      	ldr	r2, [r2, #12]
 80055b8:	4311      	orrs	r1, r2
 80055ba:	683a      	ldr	r2, [r7, #0]
 80055bc:	6912      	ldr	r2, [r2, #16]
 80055be:	4311      	orrs	r1, r2
 80055c0:	683a      	ldr	r2, [r7, #0]
 80055c2:	6952      	ldr	r2, [r2, #20]
 80055c4:	4311      	orrs	r1, r2
 80055c6:	683a      	ldr	r2, [r7, #0]
 80055c8:	6992      	ldr	r2, [r2, #24]
 80055ca:	4311      	orrs	r1, r2
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	69d2      	ldr	r2, [r2, #28]
 80055d0:	4311      	orrs	r1, r2
 80055d2:	683a      	ldr	r2, [r7, #0]
 80055d4:	6a12      	ldr	r2, [r2, #32]
 80055d6:	4311      	orrs	r1, r2
 80055d8:	683a      	ldr	r2, [r7, #0]
 80055da:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80055dc:	430a      	orrs	r2, r1
 80055de:	431a      	orrs	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	e026      	b.n	8005634 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	69d9      	ldr	r1, [r3, #28]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	4319      	orrs	r1, r3
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055fc:	430b      	orrs	r3, r1
 80055fe:	431a      	orrs	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685a      	ldr	r2, [r3, #4]
 8005608:	4b0e      	ldr	r3, [pc, #56]	@ (8005644 <FMC_SDRAM_Init+0xb4>)
 800560a:	4013      	ands	r3, r2
 800560c:	683a      	ldr	r2, [r7, #0]
 800560e:	6851      	ldr	r1, [r2, #4]
 8005610:	683a      	ldr	r2, [r7, #0]
 8005612:	6892      	ldr	r2, [r2, #8]
 8005614:	4311      	orrs	r1, r2
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	68d2      	ldr	r2, [r2, #12]
 800561a:	4311      	orrs	r1, r2
 800561c:	683a      	ldr	r2, [r7, #0]
 800561e:	6912      	ldr	r2, [r2, #16]
 8005620:	4311      	orrs	r1, r2
 8005622:	683a      	ldr	r2, [r7, #0]
 8005624:	6952      	ldr	r2, [r2, #20]
 8005626:	4311      	orrs	r1, r2
 8005628:	683a      	ldr	r2, [r7, #0]
 800562a:	6992      	ldr	r2, [r2, #24]
 800562c:	430a      	orrs	r2, r1
 800562e:	431a      	orrs	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	ffff8000 	.word	0xffff8000

08005648 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d128      	bne.n	80056ac <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	1e59      	subs	r1, r3, #1
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	3b01      	subs	r3, #1
 800566e:	011b      	lsls	r3, r3, #4
 8005670:	4319      	orrs	r1, r3
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	3b01      	subs	r3, #1
 8005678:	021b      	lsls	r3, r3, #8
 800567a:	4319      	orrs	r1, r3
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	3b01      	subs	r3, #1
 8005682:	031b      	lsls	r3, r3, #12
 8005684:	4319      	orrs	r1, r3
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	3b01      	subs	r3, #1
 800568c:	041b      	lsls	r3, r3, #16
 800568e:	4319      	orrs	r1, r3
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	695b      	ldr	r3, [r3, #20]
 8005694:	3b01      	subs	r3, #1
 8005696:	051b      	lsls	r3, r3, #20
 8005698:	4319      	orrs	r1, r3
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	3b01      	subs	r3, #1
 80056a0:	061b      	lsls	r3, r3, #24
 80056a2:	430b      	orrs	r3, r1
 80056a4:	431a      	orrs	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	609a      	str	r2, [r3, #8]
 80056aa:	e02d      	b.n	8005708 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	689a      	ldr	r2, [r3, #8]
 80056b0:	4b19      	ldr	r3, [pc, #100]	@ (8005718 <FMC_SDRAM_Timing_Init+0xd0>)
 80056b2:	4013      	ands	r3, r2
 80056b4:	68ba      	ldr	r2, [r7, #8]
 80056b6:	68d2      	ldr	r2, [r2, #12]
 80056b8:	3a01      	subs	r2, #1
 80056ba:	0311      	lsls	r1, r2, #12
 80056bc:	68ba      	ldr	r2, [r7, #8]
 80056be:	6952      	ldr	r2, [r2, #20]
 80056c0:	3a01      	subs	r2, #1
 80056c2:	0512      	lsls	r2, r2, #20
 80056c4:	430a      	orrs	r2, r1
 80056c6:	431a      	orrs	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	1e59      	subs	r1, r3, #1
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	3b01      	subs	r3, #1
 80056e0:	011b      	lsls	r3, r3, #4
 80056e2:	4319      	orrs	r1, r3
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	3b01      	subs	r3, #1
 80056ea:	021b      	lsls	r3, r3, #8
 80056ec:	4319      	orrs	r1, r3
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	3b01      	subs	r3, #1
 80056f4:	041b      	lsls	r3, r3, #16
 80056f6:	4319      	orrs	r1, r3
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	3b01      	subs	r3, #1
 80056fe:	061b      	lsls	r3, r3, #24
 8005700:	430b      	orrs	r3, r1
 8005702:	431a      	orrs	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	ff0f0fff 	.word	0xff0f0fff

0800571c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800571c:	b084      	sub	sp, #16
 800571e:	b480      	push	{r7}
 8005720:	b085      	sub	sp, #20
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
 8005726:	f107 001c 	add.w	r0, r7, #28
 800572a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800572e:	2300      	movs	r3, #0
 8005730:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005732:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005734:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005736:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800573a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800573c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800573e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8005742:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8005746:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	4313      	orrs	r3, r2
 800574c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685a      	ldr	r2, [r3, #4]
 8005752:	4b07      	ldr	r3, [pc, #28]	@ (8005770 <SDMMC_Init+0x54>)
 8005754:	4013      	ands	r3, r2
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	431a      	orrs	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3714      	adds	r7, #20
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	b004      	add	sp, #16
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	ffff8100 	.word	0xffff8100

08005774 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8005782:	4618      	mov	r0, r3
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800578e:	b480      	push	{r7}
 8005790:	b083      	sub	sp, #12
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
 8005796:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2203      	movs	r2, #3
 80057bc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0303 	and.w	r3, r3, #3
}
 80057dc:	4618      	mov	r0, r3
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80057f2:	2300      	movs	r3, #0
 80057f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005806:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800580c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005812:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	4313      	orrs	r3, r2
 8005818:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	68da      	ldr	r2, [r3, #12]
 800581e:	4b06      	ldr	r3, [pc, #24]	@ (8005838 <SDMMC_SendCommand+0x50>)
 8005820:	4013      	ands	r3, r2
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	431a      	orrs	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3714      	adds	r7, #20
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr
 8005838:	fffff000 	.word	0xfffff000

0800583c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	b2db      	uxtb	r3, r3
}
 800584a:	4618      	mov	r0, r3
 800584c:	370c      	adds	r7, #12
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8005856:	b480      	push	{r7}
 8005858:	b085      	sub	sp, #20
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
 800585e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	3314      	adds	r3, #20
 8005864:	461a      	mov	r2, r3
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	4413      	add	r3, r2
 800586a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
}  
 8005870:	4618      	mov	r0, r3
 8005872:	3714      	adds	r7, #20
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005886:	2300      	movs	r3, #0
 8005888:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80058a2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80058a8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80058ae:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ba:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	431a      	orrs	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80058c6:	2300      	movs	r3, #0

}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3714      	adds	r7, #20
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b088      	sub	sp, #32
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80058e2:	2310      	movs	r3, #16
 80058e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80058e6:	2340      	movs	r3, #64	@ 0x40
 80058e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80058ea:	2300      	movs	r3, #0
 80058ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80058ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80058f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80058f4:	f107 0308 	add.w	r3, r7, #8
 80058f8:	4619      	mov	r1, r3
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f7ff ff74 	bl	80057e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8005900:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005904:	2110      	movs	r1, #16
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f9d6 	bl	8005cb8 <SDMMC_GetCmdResp1>
 800590c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800590e:	69fb      	ldr	r3, [r7, #28]
}
 8005910:	4618      	mov	r0, r3
 8005912:	3720      	adds	r7, #32
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b088      	sub	sp, #32
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005926:	2311      	movs	r3, #17
 8005928:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800592a:	2340      	movs	r3, #64	@ 0x40
 800592c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800592e:	2300      	movs	r3, #0
 8005930:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005932:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005936:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005938:	f107 0308 	add.w	r3, r7, #8
 800593c:	4619      	mov	r1, r3
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7ff ff52 	bl	80057e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005944:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005948:	2111      	movs	r1, #17
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 f9b4 	bl	8005cb8 <SDMMC_GetCmdResp1>
 8005950:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005952:	69fb      	ldr	r3, [r7, #28]
}
 8005954:	4618      	mov	r0, r3
 8005956:	3720      	adds	r7, #32
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b088      	sub	sp, #32
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800596a:	2312      	movs	r3, #18
 800596c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800596e:	2340      	movs	r3, #64	@ 0x40
 8005970:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005972:	2300      	movs	r3, #0
 8005974:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005976:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800597a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800597c:	f107 0308 	add.w	r3, r7, #8
 8005980:	4619      	mov	r1, r3
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f7ff ff30 	bl	80057e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005988:	f241 3288 	movw	r2, #5000	@ 0x1388
 800598c:	2112      	movs	r1, #18
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 f992 	bl	8005cb8 <SDMMC_GetCmdResp1>
 8005994:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005996:	69fb      	ldr	r3, [r7, #28]
}
 8005998:	4618      	mov	r0, r3
 800599a:	3720      	adds	r7, #32
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b088      	sub	sp, #32
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80059ae:	2318      	movs	r3, #24
 80059b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80059b2:	2340      	movs	r3, #64	@ 0x40
 80059b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80059b6:	2300      	movs	r3, #0
 80059b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80059ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80059be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80059c0:	f107 0308 	add.w	r3, r7, #8
 80059c4:	4619      	mov	r1, r3
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f7ff ff0e 	bl	80057e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80059cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059d0:	2118      	movs	r1, #24
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f970 	bl	8005cb8 <SDMMC_GetCmdResp1>
 80059d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80059da:	69fb      	ldr	r3, [r7, #28]
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3720      	adds	r7, #32
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b088      	sub	sp, #32
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80059f2:	2319      	movs	r3, #25
 80059f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80059f6:	2340      	movs	r3, #64	@ 0x40
 80059f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80059fa:	2300      	movs	r3, #0
 80059fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80059fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a02:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005a04:	f107 0308 	add.w	r3, r7, #8
 8005a08:	4619      	mov	r1, r3
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f7ff feec 	bl	80057e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005a10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a14:	2119      	movs	r1, #25
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 f94e 	bl	8005cb8 <SDMMC_GetCmdResp1>
 8005a1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a1e:	69fb      	ldr	r3, [r7, #28]
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3720      	adds	r7, #32
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b088      	sub	sp, #32
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005a30:	2300      	movs	r3, #0
 8005a32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005a34:	230c      	movs	r3, #12
 8005a36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005a38:	2340      	movs	r3, #64	@ 0x40
 8005a3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005a40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a44:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005a46:	f107 0308 	add.w	r3, r7, #8
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f7ff fecb 	bl	80057e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8005a52:	4a05      	ldr	r2, [pc, #20]	@ (8005a68 <SDMMC_CmdStopTransfer+0x40>)
 8005a54:	210c      	movs	r1, #12
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f92e 	bl	8005cb8 <SDMMC_GetCmdResp1>
 8005a5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a5e:	69fb      	ldr	r3, [r7, #28]
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3720      	adds	r7, #32
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	05f5e100 	.word	0x05f5e100

08005a6c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b08a      	sub	sp, #40	@ 0x28
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005a7c:	2307      	movs	r3, #7
 8005a7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005a80:	2340      	movs	r3, #64	@ 0x40
 8005a82:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005a84:	2300      	movs	r3, #0
 8005a86:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005a88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a8c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005a8e:	f107 0310 	add.w	r3, r7, #16
 8005a92:	4619      	mov	r1, r3
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f7ff fea7 	bl	80057e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8005a9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a9e:	2107      	movs	r1, #7
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f000 f909 	bl	8005cb8 <SDMMC_GetCmdResp1>
 8005aa6:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3728      	adds	r7, #40	@ 0x28
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b088      	sub	sp, #32
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005aba:	2300      	movs	r3, #0
 8005abc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005aca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005ace:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005ad0:	f107 0308 	add.w	r3, r7, #8
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f7ff fe86 	bl	80057e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 fb23 	bl	8006128 <SDMMC_GetCmdError>
 8005ae2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ae4:	69fb      	ldr	r3, [r7, #28]
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3720      	adds	r7, #32
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b088      	sub	sp, #32
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005af6:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8005afa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005afc:	2308      	movs	r3, #8
 8005afe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005b00:	2340      	movs	r3, #64	@ 0x40
 8005b02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005b04:	2300      	movs	r3, #0
 8005b06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005b08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b0c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005b0e:	f107 0308 	add.w	r3, r7, #8
 8005b12:	4619      	mov	r1, r3
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f7ff fe67 	bl	80057e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 fab6 	bl	800608c <SDMMC_GetCmdResp7>
 8005b20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b22:	69fb      	ldr	r3, [r7, #28]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3720      	adds	r7, #32
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b088      	sub	sp, #32
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005b3a:	2337      	movs	r3, #55	@ 0x37
 8005b3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005b3e:	2340      	movs	r3, #64	@ 0x40
 8005b40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005b42:	2300      	movs	r3, #0
 8005b44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005b46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b4a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005b4c:	f107 0308 	add.w	r3, r7, #8
 8005b50:	4619      	mov	r1, r3
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f7ff fe48 	bl	80057e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8005b58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b5c:	2137      	movs	r1, #55	@ 0x37
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f8aa 	bl	8005cb8 <SDMMC_GetCmdResp1>
 8005b64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b66:	69fb      	ldr	r3, [r7, #28]
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3720      	adds	r7, #32
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b088      	sub	sp, #32
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005b7a:	683a      	ldr	r2, [r7, #0]
 8005b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8005bb4 <SDMMC_CmdAppOperCommand+0x44>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005b82:	2329      	movs	r3, #41	@ 0x29
 8005b84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005b86:	2340      	movs	r3, #64	@ 0x40
 8005b88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005b8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005b94:	f107 0308 	add.w	r3, r7, #8
 8005b98:	4619      	mov	r1, r3
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f7ff fe24 	bl	80057e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 f9bf 	bl	8005f24 <SDMMC_GetCmdResp3>
 8005ba6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ba8:	69fb      	ldr	r3, [r7, #28]
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3720      	adds	r7, #32
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	80100000 	.word	0x80100000

08005bb8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b088      	sub	sp, #32
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005bc8:	23c0      	movs	r3, #192	@ 0xc0
 8005bca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005bd0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005bd4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005bd6:	f107 0308 	add.w	r3, r7, #8
 8005bda:	4619      	mov	r1, r3
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f7ff fe03 	bl	80057e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f956 	bl	8005e94 <SDMMC_GetCmdResp2>
 8005be8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005bea:	69fb      	ldr	r3, [r7, #28]
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3720      	adds	r7, #32
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b088      	sub	sp, #32
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005c02:	2309      	movs	r3, #9
 8005c04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005c06:	23c0      	movs	r3, #192	@ 0xc0
 8005c08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005c0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c12:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005c14:	f107 0308 	add.w	r3, r7, #8
 8005c18:	4619      	mov	r1, r3
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f7ff fde4 	bl	80057e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 f937 	bl	8005e94 <SDMMC_GetCmdResp2>
 8005c26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c28:	69fb      	ldr	r3, [r7, #28]
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3720      	adds	r7, #32
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b088      	sub	sp, #32
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
 8005c3a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005c40:	2303      	movs	r3, #3
 8005c42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005c44:	2340      	movs	r3, #64	@ 0x40
 8005c46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005c4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c50:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005c52:	f107 0308 	add.w	r3, r7, #8
 8005c56:	4619      	mov	r1, r3
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f7ff fdc5 	bl	80057e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005c5e:	683a      	ldr	r2, [r7, #0]
 8005c60:	2103      	movs	r1, #3
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 f99c 	bl	8005fa0 <SDMMC_GetCmdResp6>
 8005c68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c6a:	69fb      	ldr	r3, [r7, #28]
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3720      	adds	r7, #32
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b088      	sub	sp, #32
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005c82:	230d      	movs	r3, #13
 8005c84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005c86:	2340      	movs	r3, #64	@ 0x40
 8005c88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005c8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005c94:	f107 0308 	add.w	r3, r7, #8
 8005c98:	4619      	mov	r1, r3
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f7ff fda4 	bl	80057e8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8005ca0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ca4:	210d      	movs	r1, #13
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 f806 	bl	8005cb8 <SDMMC_GetCmdResp1>
 8005cac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005cae:	69fb      	ldr	r3, [r7, #28]
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3720      	adds	r7, #32
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b088      	sub	sp, #32
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	607a      	str	r2, [r7, #4]
 8005cc4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005cc6:	4b70      	ldr	r3, [pc, #448]	@ (8005e88 <SDMMC_GetCmdResp1+0x1d0>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a70      	ldr	r2, [pc, #448]	@ (8005e8c <SDMMC_GetCmdResp1+0x1d4>)
 8005ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd0:	0a5a      	lsrs	r2, r3, #9
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	fb02 f303 	mul.w	r3, r2, r3
 8005cd8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	1e5a      	subs	r2, r3, #1
 8005cde:	61fa      	str	r2, [r7, #28]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d102      	bne.n	8005cea <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005ce4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005ce8:	e0c9      	b.n	8005e7e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cee:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d0ef      	beq.n	8005cda <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1ea      	bne.n	8005cda <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d08:	f003 0304 	and.w	r3, r3, #4
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d004      	beq.n	8005d1a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2204      	movs	r2, #4
 8005d14:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005d16:	2304      	movs	r3, #4
 8005d18:	e0b1      	b.n	8005e7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d004      	beq.n	8005d30 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e0a6      	b.n	8005e7e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	22c5      	movs	r2, #197	@ 0xc5
 8005d34:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	f7ff fd80 	bl	800583c <SDMMC_GetCommandResponse>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	461a      	mov	r2, r3
 8005d40:	7afb      	ldrb	r3, [r7, #11]
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d001      	beq.n	8005d4a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e099      	b.n	8005e7e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005d4a:	2100      	movs	r1, #0
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	f7ff fd82 	bl	8005856 <SDMMC_GetResponse>
 8005d52:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005d54:	697a      	ldr	r2, [r7, #20]
 8005d56:	4b4e      	ldr	r3, [pc, #312]	@ (8005e90 <SDMMC_GetCmdResp1+0x1d8>)
 8005d58:	4013      	ands	r3, r2
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d101      	bne.n	8005d62 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	e08d      	b.n	8005e7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	da02      	bge.n	8005d6e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005d68:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d6c:	e087      	b.n	8005e7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d001      	beq.n	8005d7c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005d78:	2340      	movs	r3, #64	@ 0x40
 8005d7a:	e080      	b.n	8005e7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d001      	beq.n	8005d8a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005d86:	2380      	movs	r3, #128	@ 0x80
 8005d88:	e079      	b.n	8005e7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d002      	beq.n	8005d9a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005d94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005d98:	e071      	b.n	8005e7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d002      	beq.n	8005daa <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005da4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005da8:	e069      	b.n	8005e7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d002      	beq.n	8005dba <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005db4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005db8:	e061      	b.n	8005e7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d002      	beq.n	8005dca <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005dc4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005dc8:	e059      	b.n	8005e7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d002      	beq.n	8005dda <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005dd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005dd8:	e051      	b.n	8005e7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d002      	beq.n	8005dea <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005de4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005de8:	e049      	b.n	8005e7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d002      	beq.n	8005dfa <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005df4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005df8:	e041      	b.n	8005e7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d002      	beq.n	8005e0a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005e04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e08:	e039      	b.n	8005e7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d002      	beq.n	8005e1a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005e14:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005e18:	e031      	b.n	8005e7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d002      	beq.n	8005e2a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005e24:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005e28:	e029      	b.n	8005e7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d002      	beq.n	8005e3a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005e34:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005e38:	e021      	b.n	8005e7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d002      	beq.n	8005e4a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005e44:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005e48:	e019      	b.n	8005e7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d002      	beq.n	8005e5a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005e54:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005e58:	e011      	b.n	8005e7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d002      	beq.n	8005e6a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005e64:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005e68:	e009      	b.n	8005e7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	f003 0308 	and.w	r3, r3, #8
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d002      	beq.n	8005e7a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005e74:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8005e78:	e001      	b.n	8005e7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005e7a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3720      	adds	r7, #32
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	20000000 	.word	0x20000000
 8005e8c:	10624dd3 	.word	0x10624dd3
 8005e90:	fdffe008 	.word	0xfdffe008

08005e94 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005e9c:	4b1f      	ldr	r3, [pc, #124]	@ (8005f1c <SDMMC_GetCmdResp2+0x88>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a1f      	ldr	r2, [pc, #124]	@ (8005f20 <SDMMC_GetCmdResp2+0x8c>)
 8005ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea6:	0a5b      	lsrs	r3, r3, #9
 8005ea8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005eac:	fb02 f303 	mul.w	r3, r2, r3
 8005eb0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	1e5a      	subs	r2, r3, #1
 8005eb6:	60fa      	str	r2, [r7, #12]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d102      	bne.n	8005ec2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005ebc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005ec0:	e026      	b.n	8005f10 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ec6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d0ef      	beq.n	8005eb2 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d1ea      	bne.n	8005eb2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ee0:	f003 0304 	and.w	r3, r3, #4
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d004      	beq.n	8005ef2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2204      	movs	r2, #4
 8005eec:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005eee:	2304      	movs	r3, #4
 8005ef0:	e00e      	b.n	8005f10 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d004      	beq.n	8005f08 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2201      	movs	r2, #1
 8005f02:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e003      	b.n	8005f10 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	22c5      	movs	r2, #197	@ 0xc5
 8005f0c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3714      	adds	r7, #20
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr
 8005f1c:	20000000 	.word	0x20000000
 8005f20:	10624dd3 	.word	0x10624dd3

08005f24 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b085      	sub	sp, #20
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8005f98 <SDMMC_GetCmdResp3+0x74>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a1a      	ldr	r2, [pc, #104]	@ (8005f9c <SDMMC_GetCmdResp3+0x78>)
 8005f32:	fba2 2303 	umull	r2, r3, r2, r3
 8005f36:	0a5b      	lsrs	r3, r3, #9
 8005f38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f3c:	fb02 f303 	mul.w	r3, r2, r3
 8005f40:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	1e5a      	subs	r2, r3, #1
 8005f46:	60fa      	str	r2, [r7, #12]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d102      	bne.n	8005f52 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005f4c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005f50:	e01b      	b.n	8005f8a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f56:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d0ef      	beq.n	8005f42 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1ea      	bne.n	8005f42 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f70:	f003 0304 	and.w	r3, r3, #4
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d004      	beq.n	8005f82 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2204      	movs	r2, #4
 8005f7c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005f7e:	2304      	movs	r3, #4
 8005f80:	e003      	b.n	8005f8a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	22c5      	movs	r2, #197	@ 0xc5
 8005f86:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3714      	adds	r7, #20
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	20000000 	.word	0x20000000
 8005f9c:	10624dd3 	.word	0x10624dd3

08005fa0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b088      	sub	sp, #32
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	460b      	mov	r3, r1
 8005faa:	607a      	str	r2, [r7, #4]
 8005fac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005fae:	4b35      	ldr	r3, [pc, #212]	@ (8006084 <SDMMC_GetCmdResp6+0xe4>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a35      	ldr	r2, [pc, #212]	@ (8006088 <SDMMC_GetCmdResp6+0xe8>)
 8005fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb8:	0a5b      	lsrs	r3, r3, #9
 8005fba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fbe:	fb02 f303 	mul.w	r3, r2, r3
 8005fc2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	1e5a      	subs	r2, r3, #1
 8005fc8:	61fa      	str	r2, [r7, #28]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d102      	bne.n	8005fd4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005fce:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005fd2:	e052      	b.n	800607a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fd8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d0ef      	beq.n	8005fc4 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1ea      	bne.n	8005fc4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ff2:	f003 0304 	and.w	r3, r3, #4
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d004      	beq.n	8006004 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2204      	movs	r2, #4
 8005ffe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006000:	2304      	movs	r3, #4
 8006002:	e03a      	b.n	800607a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006008:	f003 0301 	and.w	r3, r3, #1
 800600c:	2b00      	cmp	r3, #0
 800600e:	d004      	beq.n	800601a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2201      	movs	r2, #1
 8006014:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006016:	2301      	movs	r3, #1
 8006018:	e02f      	b.n	800607a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	f7ff fc0e 	bl	800583c <SDMMC_GetCommandResponse>
 8006020:	4603      	mov	r3, r0
 8006022:	461a      	mov	r2, r3
 8006024:	7afb      	ldrb	r3, [r7, #11]
 8006026:	4293      	cmp	r3, r2
 8006028:	d001      	beq.n	800602e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800602a:	2301      	movs	r3, #1
 800602c:	e025      	b.n	800607a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	22c5      	movs	r2, #197	@ 0xc5
 8006032:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006034:	2100      	movs	r1, #0
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	f7ff fc0d 	bl	8005856 <SDMMC_GetResponse>
 800603c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d106      	bne.n	8006056 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	0c1b      	lsrs	r3, r3, #16
 800604c:	b29a      	uxth	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8006052:	2300      	movs	r3, #0
 8006054:	e011      	b.n	800607a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800605c:	2b00      	cmp	r3, #0
 800605e:	d002      	beq.n	8006066 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006060:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006064:	e009      	b.n	800607a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800606c:	2b00      	cmp	r3, #0
 800606e:	d002      	beq.n	8006076 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006070:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006074:	e001      	b.n	800607a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006076:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800607a:	4618      	mov	r0, r3
 800607c:	3720      	adds	r7, #32
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	20000000 	.word	0x20000000
 8006088:	10624dd3 	.word	0x10624dd3

0800608c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006094:	4b22      	ldr	r3, [pc, #136]	@ (8006120 <SDMMC_GetCmdResp7+0x94>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a22      	ldr	r2, [pc, #136]	@ (8006124 <SDMMC_GetCmdResp7+0x98>)
 800609a:	fba2 2303 	umull	r2, r3, r2, r3
 800609e:	0a5b      	lsrs	r3, r3, #9
 80060a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060a4:	fb02 f303 	mul.w	r3, r2, r3
 80060a8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	1e5a      	subs	r2, r3, #1
 80060ae:	60fa      	str	r2, [r7, #12]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d102      	bne.n	80060ba <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80060b4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80060b8:	e02c      	b.n	8006114 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060be:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d0ef      	beq.n	80060aa <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1ea      	bne.n	80060aa <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060d8:	f003 0304 	and.w	r3, r3, #4
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d004      	beq.n	80060ea <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2204      	movs	r2, #4
 80060e4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80060e6:	2304      	movs	r3, #4
 80060e8:	e014      	b.n	8006114 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d004      	beq.n	8006100 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2201      	movs	r2, #1
 80060fa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e009      	b.n	8006114 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006108:	2b00      	cmp	r3, #0
 800610a:	d002      	beq.n	8006112 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2240      	movs	r2, #64	@ 0x40
 8006110:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006112:	2300      	movs	r3, #0
  
}
 8006114:	4618      	mov	r0, r3
 8006116:	3714      	adds	r7, #20
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr
 8006120:	20000000 	.word	0x20000000
 8006124:	10624dd3 	.word	0x10624dd3

08006128 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006130:	4b11      	ldr	r3, [pc, #68]	@ (8006178 <SDMMC_GetCmdError+0x50>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a11      	ldr	r2, [pc, #68]	@ (800617c <SDMMC_GetCmdError+0x54>)
 8006136:	fba2 2303 	umull	r2, r3, r2, r3
 800613a:	0a5b      	lsrs	r3, r3, #9
 800613c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006140:	fb02 f303 	mul.w	r3, r2, r3
 8006144:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	1e5a      	subs	r2, r3, #1
 800614a:	60fa      	str	r2, [r7, #12]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d102      	bne.n	8006156 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006150:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006154:	e009      	b.n	800616a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800615a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800615e:	2b00      	cmp	r3, #0
 8006160:	d0f1      	beq.n	8006146 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	22c5      	movs	r2, #197	@ 0xc5
 8006166:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3714      	adds	r7, #20
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	20000000 	.word	0x20000000
 800617c:	10624dd3 	.word	0x10624dd3

08006180 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006184:	4904      	ldr	r1, [pc, #16]	@ (8006198 <MX_FATFS_Init+0x18>)
 8006186:	4805      	ldr	r0, [pc, #20]	@ (800619c <MX_FATFS_Init+0x1c>)
 8006188:	f002 fd50 	bl	8008c2c <FATFS_LinkDriver>
 800618c:	4603      	mov	r3, r0
 800618e:	461a      	mov	r2, r3
 8006190:	4b03      	ldr	r3, [pc, #12]	@ (80061a0 <MX_FATFS_Init+0x20>)
 8006192:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006194:	bf00      	nop
 8006196:	bd80      	pop	{r7, pc}
 8006198:	200002e8 	.word	0x200002e8
 800619c:	08009650 	.word	0x08009650
 80061a0:	200002e4 	.word	0x200002e4

080061a4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80061a4:	b480      	push	{r7}
 80061a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80061a8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80061ba:	2300      	movs	r3, #0
 80061bc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80061be:	f000 f888 	bl	80062d2 <BSP_SD_IsDetected>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d001      	beq.n	80061cc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80061c8:	2302      	movs	r3, #2
 80061ca:	e005      	b.n	80061d8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80061cc:	4804      	ldr	r0, [pc, #16]	@ (80061e0 <BSP_SD_Init+0x2c>)
 80061ce:	f7fe f883 	bl	80042d8 <HAL_SD_Init>
 80061d2:	4603      	mov	r3, r0
 80061d4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80061d6:	79fb      	ldrb	r3, [r7, #7]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3708      	adds	r7, #8
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	20000160 	.word	0x20000160

080061e4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b086      	sub	sp, #24
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80061f0:	2300      	movs	r3, #0
 80061f2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	68ba      	ldr	r2, [r7, #8]
 80061f8:	68f9      	ldr	r1, [r7, #12]
 80061fa:	4806      	ldr	r0, [pc, #24]	@ (8006214 <BSP_SD_ReadBlocks_DMA+0x30>)
 80061fc:	f7fe f924 	bl	8004448 <HAL_SD_ReadBlocks_DMA>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d001      	beq.n	800620a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800620a:	7dfb      	ldrb	r3, [r7, #23]
}
 800620c:	4618      	mov	r0, r3
 800620e:	3718      	adds	r7, #24
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}
 8006214:	20000160 	.word	0x20000160

08006218 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b086      	sub	sp, #24
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006224:	2300      	movs	r3, #0
 8006226:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	68f9      	ldr	r1, [r7, #12]
 800622e:	4806      	ldr	r0, [pc, #24]	@ (8006248 <BSP_SD_WriteBlocks_DMA+0x30>)
 8006230:	f7fe f9ec 	bl	800460c <HAL_SD_WriteBlocks_DMA>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d001      	beq.n	800623e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800623e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006240:	4618      	mov	r0, r3
 8006242:	3718      	adds	r7, #24
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	20000160 	.word	0x20000160

0800624c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006250:	4805      	ldr	r0, [pc, #20]	@ (8006268 <BSP_SD_GetCardState+0x1c>)
 8006252:	f7fe fe11 	bl	8004e78 <HAL_SD_GetCardState>
 8006256:	4603      	mov	r3, r0
 8006258:	2b04      	cmp	r3, #4
 800625a:	bf14      	ite	ne
 800625c:	2301      	movne	r3, #1
 800625e:	2300      	moveq	r3, #0
 8006260:	b2db      	uxtb	r3, r3
}
 8006262:	4618      	mov	r0, r3
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	20000160 	.word	0x20000160

0800626c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8006274:	6879      	ldr	r1, [r7, #4]
 8006276:	4803      	ldr	r0, [pc, #12]	@ (8006284 <BSP_SD_GetCardInfo+0x18>)
 8006278:	f7fe fdd2 	bl	8004e20 <HAL_SD_GetCardInfo>
}
 800627c:	bf00      	nop
 800627e:	3708      	adds	r7, #8
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	20000160 	.word	0x20000160

08006288 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8006290:	f000 f818 	bl	80062c4 <BSP_SD_AbortCallback>
}
 8006294:	bf00      	nop
 8006296:	3708      	adds	r7, #8
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80062a4:	f000 f9a8 	bl	80065f8 <BSP_SD_WriteCpltCallback>
}
 80062a8:	bf00      	nop
 80062aa:	3708      	adds	r7, #8
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80062b8:	f000 f9aa 	bl	8006610 <BSP_SD_ReadCpltCallback>
}
 80062bc:	bf00      	nop
 80062be:	3708      	adds	r7, #8
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80062c4:	b480      	push	{r7}
 80062c6:	af00      	add	r7, sp, #0

}
 80062c8:	bf00      	nop
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr

080062d2 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b082      	sub	sp, #8
 80062d6:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80062d8:	2301      	movs	r3, #1
 80062da:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80062dc:	f000 f80c 	bl	80062f8 <BSP_PlatformIsDetected>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d101      	bne.n	80062ea <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80062e6:	2300      	movs	r3, #0
 80062e8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80062ea:	79fb      	ldrb	r3, [r7, #7]
 80062ec:	b2db      	uxtb	r3, r3
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3708      	adds	r7, #8
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
	...

080062f8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80062fe:	2301      	movs	r3, #1
 8006300:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8006302:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006306:	4806      	ldr	r0, [pc, #24]	@ (8006320 <BSP_PlatformIsDetected+0x28>)
 8006308:	f7fc fcc6 	bl	8002c98 <HAL_GPIO_ReadPin>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d001      	beq.n	8006316 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8006312:	2300      	movs	r3, #0
 8006314:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8006316:	79fb      	ldrb	r3, [r7, #7]
}
 8006318:	4618      	mov	r0, r3
 800631a:	3708      	adds	r7, #8
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	40020800 	.word	0x40020800

08006324 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800632c:	f7fb fc26 	bl	8001b7c <HAL_GetTick>
 8006330:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8006332:	e006      	b.n	8006342 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006334:	f7ff ff8a 	bl	800624c <BSP_SD_GetCardState>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800633e:	2300      	movs	r3, #0
 8006340:	e009      	b.n	8006356 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8006342:	f7fb fc1b 	bl	8001b7c <HAL_GetTick>
 8006346:	4602      	mov	r2, r0
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	429a      	cmp	r2, r3
 8006350:	d8f0      	bhi.n	8006334 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8006352:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006356:	4618      	mov	r0, r3
 8006358:	3710      	adds	r7, #16
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
	...

08006360 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
 8006366:	4603      	mov	r3, r0
 8006368:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800636a:	4b0b      	ldr	r3, [pc, #44]	@ (8006398 <SD_CheckStatus+0x38>)
 800636c:	2201      	movs	r2, #1
 800636e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8006370:	f7ff ff6c 	bl	800624c <BSP_SD_GetCardState>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d107      	bne.n	800638a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800637a:	4b07      	ldr	r3, [pc, #28]	@ (8006398 <SD_CheckStatus+0x38>)
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	b2db      	uxtb	r3, r3
 8006380:	f023 0301 	bic.w	r3, r3, #1
 8006384:	b2da      	uxtb	r2, r3
 8006386:	4b04      	ldr	r3, [pc, #16]	@ (8006398 <SD_CheckStatus+0x38>)
 8006388:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800638a:	4b03      	ldr	r3, [pc, #12]	@ (8006398 <SD_CheckStatus+0x38>)
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	b2db      	uxtb	r3, r3
}
 8006390:	4618      	mov	r0, r3
 8006392:	3708      	adds	r7, #8
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}
 8006398:	20000009 	.word	0x20000009

0800639c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	4603      	mov	r3, r0
 80063a4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80063a6:	f7ff ff05 	bl	80061b4 <BSP_SD_Init>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d107      	bne.n	80063c0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80063b0:	79fb      	ldrb	r3, [r7, #7]
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7ff ffd4 	bl	8006360 <SD_CheckStatus>
 80063b8:	4603      	mov	r3, r0
 80063ba:	461a      	mov	r2, r3
 80063bc:	4b04      	ldr	r3, [pc, #16]	@ (80063d0 <SD_initialize+0x34>)
 80063be:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80063c0:	4b03      	ldr	r3, [pc, #12]	@ (80063d0 <SD_initialize+0x34>)
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	b2db      	uxtb	r3, r3
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3708      	adds	r7, #8
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	20000009 	.word	0x20000009

080063d4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	4603      	mov	r3, r0
 80063dc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80063de:	79fb      	ldrb	r3, [r7, #7]
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7ff ffbd 	bl	8006360 <SD_CheckStatus>
 80063e6:	4603      	mov	r3, r0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3708      	adds	r7, #8
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b086      	sub	sp, #24
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60b9      	str	r1, [r7, #8]
 80063f8:	607a      	str	r2, [r7, #4]
 80063fa:	603b      	str	r3, [r7, #0]
 80063fc:	4603      	mov	r3, r0
 80063fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006404:	f247 5030 	movw	r0, #30000	@ 0x7530
 8006408:	f7ff ff8c 	bl	8006324 <SD_CheckStatusWithTimeout>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	da01      	bge.n	8006416 <SD_read+0x26>
  {
    return res;
 8006412:	7dfb      	ldrb	r3, [r7, #23]
 8006414:	e03b      	b.n	800648e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8006416:	683a      	ldr	r2, [r7, #0]
 8006418:	6879      	ldr	r1, [r7, #4]
 800641a:	68b8      	ldr	r0, [r7, #8]
 800641c:	f7ff fee2 	bl	80061e4 <BSP_SD_ReadBlocks_DMA>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d132      	bne.n	800648c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8006426:	4b1c      	ldr	r3, [pc, #112]	@ (8006498 <SD_read+0xa8>)
 8006428:	2200      	movs	r2, #0
 800642a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800642c:	f7fb fba6 	bl	8001b7c <HAL_GetTick>
 8006430:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8006432:	bf00      	nop
 8006434:	4b18      	ldr	r3, [pc, #96]	@ (8006498 <SD_read+0xa8>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d108      	bne.n	800644e <SD_read+0x5e>
 800643c:	f7fb fb9e 	bl	8001b7c <HAL_GetTick>
 8006440:	4602      	mov	r2, r0
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	f247 522f 	movw	r2, #29999	@ 0x752f
 800644a:	4293      	cmp	r3, r2
 800644c:	d9f2      	bls.n	8006434 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800644e:	4b12      	ldr	r3, [pc, #72]	@ (8006498 <SD_read+0xa8>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d102      	bne.n	800645c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	75fb      	strb	r3, [r7, #23]
 800645a:	e017      	b.n	800648c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800645c:	4b0e      	ldr	r3, [pc, #56]	@ (8006498 <SD_read+0xa8>)
 800645e:	2200      	movs	r2, #0
 8006460:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8006462:	f7fb fb8b 	bl	8001b7c <HAL_GetTick>
 8006466:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006468:	e007      	b.n	800647a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800646a:	f7ff feef 	bl	800624c <BSP_SD_GetCardState>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d102      	bne.n	800647a <SD_read+0x8a>
          {
            res = RES_OK;
 8006474:	2300      	movs	r3, #0
 8006476:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8006478:	e008      	b.n	800648c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800647a:	f7fb fb7f 	bl	8001b7c <HAL_GetTick>
 800647e:	4602      	mov	r2, r0
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	f247 522f 	movw	r2, #29999	@ 0x752f
 8006488:	4293      	cmp	r3, r2
 800648a:	d9ee      	bls.n	800646a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800648c:	7dfb      	ldrb	r3, [r7, #23]
}
 800648e:	4618      	mov	r0, r3
 8006490:	3718      	adds	r7, #24
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	20000520 	.word	0x20000520

0800649c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b086      	sub	sp, #24
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60b9      	str	r1, [r7, #8]
 80064a4:	607a      	str	r2, [r7, #4]
 80064a6:	603b      	str	r3, [r7, #0]
 80064a8:	4603      	mov	r3, r0
 80064aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80064b0:	4b24      	ldr	r3, [pc, #144]	@ (8006544 <SD_write+0xa8>)
 80064b2:	2200      	movs	r2, #0
 80064b4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80064b6:	f247 5030 	movw	r0, #30000	@ 0x7530
 80064ba:	f7ff ff33 	bl	8006324 <SD_CheckStatusWithTimeout>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	da01      	bge.n	80064c8 <SD_write+0x2c>
  {
    return res;
 80064c4:	7dfb      	ldrb	r3, [r7, #23]
 80064c6:	e038      	b.n	800653a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80064c8:	683a      	ldr	r2, [r7, #0]
 80064ca:	6879      	ldr	r1, [r7, #4]
 80064cc:	68b8      	ldr	r0, [r7, #8]
 80064ce:	f7ff fea3 	bl	8006218 <BSP_SD_WriteBlocks_DMA>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d12f      	bne.n	8006538 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80064d8:	f7fb fb50 	bl	8001b7c <HAL_GetTick>
 80064dc:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80064de:	bf00      	nop
 80064e0:	4b18      	ldr	r3, [pc, #96]	@ (8006544 <SD_write+0xa8>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d108      	bne.n	80064fa <SD_write+0x5e>
 80064e8:	f7fb fb48 	bl	8001b7c <HAL_GetTick>
 80064ec:	4602      	mov	r2, r0
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	f247 522f 	movw	r2, #29999	@ 0x752f
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d9f2      	bls.n	80064e0 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80064fa:	4b12      	ldr	r3, [pc, #72]	@ (8006544 <SD_write+0xa8>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d102      	bne.n	8006508 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	75fb      	strb	r3, [r7, #23]
 8006506:	e017      	b.n	8006538 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8006508:	4b0e      	ldr	r3, [pc, #56]	@ (8006544 <SD_write+0xa8>)
 800650a:	2200      	movs	r2, #0
 800650c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800650e:	f7fb fb35 	bl	8001b7c <HAL_GetTick>
 8006512:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006514:	e007      	b.n	8006526 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006516:	f7ff fe99 	bl	800624c <BSP_SD_GetCardState>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d102      	bne.n	8006526 <SD_write+0x8a>
          {
            res = RES_OK;
 8006520:	2300      	movs	r3, #0
 8006522:	75fb      	strb	r3, [r7, #23]
            break;
 8006524:	e008      	b.n	8006538 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006526:	f7fb fb29 	bl	8001b7c <HAL_GetTick>
 800652a:	4602      	mov	r2, r0
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	f247 522f 	movw	r2, #29999	@ 0x752f
 8006534:	4293      	cmp	r3, r2
 8006536:	d9ee      	bls.n	8006516 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8006538:	7dfb      	ldrb	r3, [r7, #23]
}
 800653a:	4618      	mov	r0, r3
 800653c:	3718      	adds	r7, #24
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	2000051c 	.word	0x2000051c

08006548 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b08c      	sub	sp, #48	@ 0x30
 800654c:	af00      	add	r7, sp, #0
 800654e:	4603      	mov	r3, r0
 8006550:	603a      	str	r2, [r7, #0]
 8006552:	71fb      	strb	r3, [r7, #7]
 8006554:	460b      	mov	r3, r1
 8006556:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800655e:	4b25      	ldr	r3, [pc, #148]	@ (80065f4 <SD_ioctl+0xac>)
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	b2db      	uxtb	r3, r3
 8006564:	f003 0301 	and.w	r3, r3, #1
 8006568:	2b00      	cmp	r3, #0
 800656a:	d001      	beq.n	8006570 <SD_ioctl+0x28>
 800656c:	2303      	movs	r3, #3
 800656e:	e03c      	b.n	80065ea <SD_ioctl+0xa2>

  switch (cmd)
 8006570:	79bb      	ldrb	r3, [r7, #6]
 8006572:	2b03      	cmp	r3, #3
 8006574:	d834      	bhi.n	80065e0 <SD_ioctl+0x98>
 8006576:	a201      	add	r2, pc, #4	@ (adr r2, 800657c <SD_ioctl+0x34>)
 8006578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800657c:	0800658d 	.word	0x0800658d
 8006580:	08006595 	.word	0x08006595
 8006584:	080065ad 	.word	0x080065ad
 8006588:	080065c7 	.word	0x080065c7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800658c:	2300      	movs	r3, #0
 800658e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006592:	e028      	b.n	80065e6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006594:	f107 030c 	add.w	r3, r7, #12
 8006598:	4618      	mov	r0, r3
 800659a:	f7ff fe67 	bl	800626c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800659e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80065a4:	2300      	movs	r3, #0
 80065a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80065aa:	e01c      	b.n	80065e6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80065ac:	f107 030c 	add.w	r3, r7, #12
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7ff fe5b 	bl	800626c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80065b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80065be:	2300      	movs	r3, #0
 80065c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80065c4:	e00f      	b.n	80065e6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80065c6:	f107 030c 	add.w	r3, r7, #12
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7ff fe4e 	bl	800626c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80065d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065d2:	0a5a      	lsrs	r2, r3, #9
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80065d8:	2300      	movs	r3, #0
 80065da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80065de:	e002      	b.n	80065e6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80065e0:	2304      	movs	r3, #4
 80065e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80065e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3730      	adds	r7, #48	@ 0x30
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	20000009 	.word	0x20000009

080065f8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80065f8:	b480      	push	{r7}
 80065fa:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80065fc:	4b03      	ldr	r3, [pc, #12]	@ (800660c <BSP_SD_WriteCpltCallback+0x14>)
 80065fe:	2201      	movs	r2, #1
 8006600:	601a      	str	r2, [r3, #0]
}
 8006602:	bf00      	nop
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr
 800660c:	2000051c 	.word	0x2000051c

08006610 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8006610:	b480      	push	{r7}
 8006612:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8006614:	4b03      	ldr	r3, [pc, #12]	@ (8006624 <BSP_SD_ReadCpltCallback+0x14>)
 8006616:	2201      	movs	r2, #1
 8006618:	601a      	str	r2, [r3, #0]
}
 800661a:	bf00      	nop
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr
 8006624:	20000520 	.word	0x20000520

08006628 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	4603      	mov	r3, r0
 8006630:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006632:	79fb      	ldrb	r3, [r7, #7]
 8006634:	4a08      	ldr	r2, [pc, #32]	@ (8006658 <disk_status+0x30>)
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	4413      	add	r3, r2
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	79fa      	ldrb	r2, [r7, #7]
 8006640:	4905      	ldr	r1, [pc, #20]	@ (8006658 <disk_status+0x30>)
 8006642:	440a      	add	r2, r1
 8006644:	7a12      	ldrb	r2, [r2, #8]
 8006646:	4610      	mov	r0, r2
 8006648:	4798      	blx	r3
 800664a:	4603      	mov	r3, r0
 800664c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800664e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006650:	4618      	mov	r0, r3
 8006652:	3710      	adds	r7, #16
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	2000054c 	.word	0x2000054c

0800665c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	4603      	mov	r3, r0
 8006664:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006666:	2300      	movs	r3, #0
 8006668:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800666a:	79fb      	ldrb	r3, [r7, #7]
 800666c:	4a0d      	ldr	r2, [pc, #52]	@ (80066a4 <disk_initialize+0x48>)
 800666e:	5cd3      	ldrb	r3, [r2, r3]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d111      	bne.n	8006698 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006674:	79fb      	ldrb	r3, [r7, #7]
 8006676:	4a0b      	ldr	r2, [pc, #44]	@ (80066a4 <disk_initialize+0x48>)
 8006678:	2101      	movs	r1, #1
 800667a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800667c:	79fb      	ldrb	r3, [r7, #7]
 800667e:	4a09      	ldr	r2, [pc, #36]	@ (80066a4 <disk_initialize+0x48>)
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	4413      	add	r3, r2
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	79fa      	ldrb	r2, [r7, #7]
 800668a:	4906      	ldr	r1, [pc, #24]	@ (80066a4 <disk_initialize+0x48>)
 800668c:	440a      	add	r2, r1
 800668e:	7a12      	ldrb	r2, [r2, #8]
 8006690:	4610      	mov	r0, r2
 8006692:	4798      	blx	r3
 8006694:	4603      	mov	r3, r0
 8006696:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006698:	7bfb      	ldrb	r3, [r7, #15]
}
 800669a:	4618      	mov	r0, r3
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	2000054c 	.word	0x2000054c

080066a8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80066a8:	b590      	push	{r4, r7, lr}
 80066aa:	b087      	sub	sp, #28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60b9      	str	r1, [r7, #8]
 80066b0:	607a      	str	r2, [r7, #4]
 80066b2:	603b      	str	r3, [r7, #0]
 80066b4:	4603      	mov	r3, r0
 80066b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80066b8:	7bfb      	ldrb	r3, [r7, #15]
 80066ba:	4a0a      	ldr	r2, [pc, #40]	@ (80066e4 <disk_read+0x3c>)
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4413      	add	r3, r2
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	689c      	ldr	r4, [r3, #8]
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
 80066c6:	4a07      	ldr	r2, [pc, #28]	@ (80066e4 <disk_read+0x3c>)
 80066c8:	4413      	add	r3, r2
 80066ca:	7a18      	ldrb	r0, [r3, #8]
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	68b9      	ldr	r1, [r7, #8]
 80066d2:	47a0      	blx	r4
 80066d4:	4603      	mov	r3, r0
 80066d6:	75fb      	strb	r3, [r7, #23]
  return res;
 80066d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80066da:	4618      	mov	r0, r3
 80066dc:	371c      	adds	r7, #28
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd90      	pop	{r4, r7, pc}
 80066e2:	bf00      	nop
 80066e4:	2000054c 	.word	0x2000054c

080066e8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80066e8:	b590      	push	{r4, r7, lr}
 80066ea:	b087      	sub	sp, #28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60b9      	str	r1, [r7, #8]
 80066f0:	607a      	str	r2, [r7, #4]
 80066f2:	603b      	str	r3, [r7, #0]
 80066f4:	4603      	mov	r3, r0
 80066f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80066f8:	7bfb      	ldrb	r3, [r7, #15]
 80066fa:	4a0a      	ldr	r2, [pc, #40]	@ (8006724 <disk_write+0x3c>)
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	4413      	add	r3, r2
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	68dc      	ldr	r4, [r3, #12]
 8006704:	7bfb      	ldrb	r3, [r7, #15]
 8006706:	4a07      	ldr	r2, [pc, #28]	@ (8006724 <disk_write+0x3c>)
 8006708:	4413      	add	r3, r2
 800670a:	7a18      	ldrb	r0, [r3, #8]
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	68b9      	ldr	r1, [r7, #8]
 8006712:	47a0      	blx	r4
 8006714:	4603      	mov	r3, r0
 8006716:	75fb      	strb	r3, [r7, #23]
  return res;
 8006718:	7dfb      	ldrb	r3, [r7, #23]
}
 800671a:	4618      	mov	r0, r3
 800671c:	371c      	adds	r7, #28
 800671e:	46bd      	mov	sp, r7
 8006720:	bd90      	pop	{r4, r7, pc}
 8006722:	bf00      	nop
 8006724:	2000054c 	.word	0x2000054c

08006728 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	4603      	mov	r3, r0
 8006730:	603a      	str	r2, [r7, #0]
 8006732:	71fb      	strb	r3, [r7, #7]
 8006734:	460b      	mov	r3, r1
 8006736:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006738:	79fb      	ldrb	r3, [r7, #7]
 800673a:	4a09      	ldr	r2, [pc, #36]	@ (8006760 <disk_ioctl+0x38>)
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	4413      	add	r3, r2
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	79fa      	ldrb	r2, [r7, #7]
 8006746:	4906      	ldr	r1, [pc, #24]	@ (8006760 <disk_ioctl+0x38>)
 8006748:	440a      	add	r2, r1
 800674a:	7a10      	ldrb	r0, [r2, #8]
 800674c:	79b9      	ldrb	r1, [r7, #6]
 800674e:	683a      	ldr	r2, [r7, #0]
 8006750:	4798      	blx	r3
 8006752:	4603      	mov	r3, r0
 8006754:	73fb      	strb	r3, [r7, #15]
  return res;
 8006756:	7bfb      	ldrb	r3, [r7, #15]
}
 8006758:	4618      	mov	r0, r3
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	2000054c 	.word	0x2000054c

08006764 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006764:	b480      	push	{r7}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	3301      	adds	r3, #1
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006774:	89fb      	ldrh	r3, [r7, #14]
 8006776:	021b      	lsls	r3, r3, #8
 8006778:	b21a      	sxth	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	b21b      	sxth	r3, r3
 8006780:	4313      	orrs	r3, r2
 8006782:	b21b      	sxth	r3, r3
 8006784:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006786:	89fb      	ldrh	r3, [r7, #14]
}
 8006788:	4618      	mov	r0, r3
 800678a:	3714      	adds	r7, #20
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	3303      	adds	r3, #3
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	021b      	lsls	r3, r3, #8
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	3202      	adds	r2, #2
 80067ac:	7812      	ldrb	r2, [r2, #0]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	021b      	lsls	r3, r3, #8
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	3201      	adds	r2, #1
 80067ba:	7812      	ldrb	r2, [r2, #0]
 80067bc:	4313      	orrs	r3, r2
 80067be:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	021b      	lsls	r3, r3, #8
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	7812      	ldrb	r2, [r2, #0]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	60fb      	str	r3, [r7, #12]
	return rv;
 80067cc:	68fb      	ldr	r3, [r7, #12]
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3714      	adds	r7, #20
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr

080067da <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80067da:	b480      	push	{r7}
 80067dc:	b083      	sub	sp, #12
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
 80067e2:	460b      	mov	r3, r1
 80067e4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	1c5a      	adds	r2, r3, #1
 80067ea:	607a      	str	r2, [r7, #4]
 80067ec:	887a      	ldrh	r2, [r7, #2]
 80067ee:	b2d2      	uxtb	r2, r2
 80067f0:	701a      	strb	r2, [r3, #0]
 80067f2:	887b      	ldrh	r3, [r7, #2]
 80067f4:	0a1b      	lsrs	r3, r3, #8
 80067f6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	1c5a      	adds	r2, r3, #1
 80067fc:	607a      	str	r2, [r7, #4]
 80067fe:	887a      	ldrh	r2, [r7, #2]
 8006800:	b2d2      	uxtb	r2, r2
 8006802:	701a      	strb	r2, [r3, #0]
}
 8006804:	bf00      	nop
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	1c5a      	adds	r2, r3, #1
 800681e:	607a      	str	r2, [r7, #4]
 8006820:	683a      	ldr	r2, [r7, #0]
 8006822:	b2d2      	uxtb	r2, r2
 8006824:	701a      	strb	r2, [r3, #0]
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	0a1b      	lsrs	r3, r3, #8
 800682a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	1c5a      	adds	r2, r3, #1
 8006830:	607a      	str	r2, [r7, #4]
 8006832:	683a      	ldr	r2, [r7, #0]
 8006834:	b2d2      	uxtb	r2, r2
 8006836:	701a      	strb	r2, [r3, #0]
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	0a1b      	lsrs	r3, r3, #8
 800683c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	1c5a      	adds	r2, r3, #1
 8006842:	607a      	str	r2, [r7, #4]
 8006844:	683a      	ldr	r2, [r7, #0]
 8006846:	b2d2      	uxtb	r2, r2
 8006848:	701a      	strb	r2, [r3, #0]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	0a1b      	lsrs	r3, r3, #8
 800684e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	1c5a      	adds	r2, r3, #1
 8006854:	607a      	str	r2, [r7, #4]
 8006856:	683a      	ldr	r2, [r7, #0]
 8006858:	b2d2      	uxtb	r2, r2
 800685a:	701a      	strb	r2, [r3, #0]
}
 800685c:	bf00      	nop
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006868:	b480      	push	{r7}
 800686a:	b087      	sub	sp, #28
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00d      	beq.n	800689e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006882:	693a      	ldr	r2, [r7, #16]
 8006884:	1c53      	adds	r3, r2, #1
 8006886:	613b      	str	r3, [r7, #16]
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	1c59      	adds	r1, r3, #1
 800688c:	6179      	str	r1, [r7, #20]
 800688e:	7812      	ldrb	r2, [r2, #0]
 8006890:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	3b01      	subs	r3, #1
 8006896:	607b      	str	r3, [r7, #4]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1f1      	bne.n	8006882 <mem_cpy+0x1a>
	}
}
 800689e:	bf00      	nop
 80068a0:	371c      	adds	r7, #28
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr

080068aa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80068aa:	b480      	push	{r7}
 80068ac:	b087      	sub	sp, #28
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	60f8      	str	r0, [r7, #12]
 80068b2:	60b9      	str	r1, [r7, #8]
 80068b4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	1c5a      	adds	r2, r3, #1
 80068be:	617a      	str	r2, [r7, #20]
 80068c0:	68ba      	ldr	r2, [r7, #8]
 80068c2:	b2d2      	uxtb	r2, r2
 80068c4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	3b01      	subs	r3, #1
 80068ca:	607b      	str	r3, [r7, #4]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1f3      	bne.n	80068ba <mem_set+0x10>
}
 80068d2:	bf00      	nop
 80068d4:	bf00      	nop
 80068d6:	371c      	adds	r7, #28
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80068e0:	b480      	push	{r7}
 80068e2:	b089      	sub	sp, #36	@ 0x24
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	61fb      	str	r3, [r7, #28]
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80068f4:	2300      	movs	r3, #0
 80068f6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	1c5a      	adds	r2, r3, #1
 80068fc:	61fa      	str	r2, [r7, #28]
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	4619      	mov	r1, r3
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	1c5a      	adds	r2, r3, #1
 8006906:	61ba      	str	r2, [r7, #24]
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	1acb      	subs	r3, r1, r3
 800690c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	3b01      	subs	r3, #1
 8006912:	607b      	str	r3, [r7, #4]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d002      	beq.n	8006920 <mem_cmp+0x40>
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d0eb      	beq.n	80068f8 <mem_cmp+0x18>

	return r;
 8006920:	697b      	ldr	r3, [r7, #20]
}
 8006922:	4618      	mov	r0, r3
 8006924:	3724      	adds	r7, #36	@ 0x24
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr

0800692e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800692e:	b480      	push	{r7}
 8006930:	b083      	sub	sp, #12
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
 8006936:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006938:	e002      	b.n	8006940 <chk_chr+0x12>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	3301      	adds	r3, #1
 800693e:	607b      	str	r3, [r7, #4]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d005      	beq.n	8006954 <chk_chr+0x26>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	461a      	mov	r2, r3
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	4293      	cmp	r3, r2
 8006952:	d1f2      	bne.n	800693a <chk_chr+0xc>
	return *str;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	781b      	ldrb	r3, [r3, #0]
}
 8006958:	4618      	mov	r0, r3
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006964:	b480      	push	{r7}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800696e:	2300      	movs	r3, #0
 8006970:	60bb      	str	r3, [r7, #8]
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	60fb      	str	r3, [r7, #12]
 8006976:	e029      	b.n	80069cc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006978:	4a27      	ldr	r2, [pc, #156]	@ (8006a18 <chk_lock+0xb4>)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	011b      	lsls	r3, r3, #4
 800697e:	4413      	add	r3, r2
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d01d      	beq.n	80069c2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006986:	4a24      	ldr	r2, [pc, #144]	@ (8006a18 <chk_lock+0xb4>)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	011b      	lsls	r3, r3, #4
 800698c:	4413      	add	r3, r2
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	429a      	cmp	r2, r3
 8006996:	d116      	bne.n	80069c6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006998:	4a1f      	ldr	r2, [pc, #124]	@ (8006a18 <chk_lock+0xb4>)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	011b      	lsls	r3, r3, #4
 800699e:	4413      	add	r3, r2
 80069a0:	3304      	adds	r3, #4
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d10c      	bne.n	80069c6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80069ac:	4a1a      	ldr	r2, [pc, #104]	@ (8006a18 <chk_lock+0xb4>)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	011b      	lsls	r3, r3, #4
 80069b2:	4413      	add	r3, r2
 80069b4:	3308      	adds	r3, #8
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80069bc:	429a      	cmp	r2, r3
 80069be:	d102      	bne.n	80069c6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80069c0:	e007      	b.n	80069d2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80069c2:	2301      	movs	r3, #1
 80069c4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	3301      	adds	r3, #1
 80069ca:	60fb      	str	r3, [r7, #12]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d9d2      	bls.n	8006978 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	d109      	bne.n	80069ec <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d102      	bne.n	80069e4 <chk_lock+0x80>
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	d101      	bne.n	80069e8 <chk_lock+0x84>
 80069e4:	2300      	movs	r3, #0
 80069e6:	e010      	b.n	8006a0a <chk_lock+0xa6>
 80069e8:	2312      	movs	r3, #18
 80069ea:	e00e      	b.n	8006a0a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d108      	bne.n	8006a04 <chk_lock+0xa0>
 80069f2:	4a09      	ldr	r2, [pc, #36]	@ (8006a18 <chk_lock+0xb4>)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	011b      	lsls	r3, r3, #4
 80069f8:	4413      	add	r3, r2
 80069fa:	330c      	adds	r3, #12
 80069fc:	881b      	ldrh	r3, [r3, #0]
 80069fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a02:	d101      	bne.n	8006a08 <chk_lock+0xa4>
 8006a04:	2310      	movs	r3, #16
 8006a06:	e000      	b.n	8006a0a <chk_lock+0xa6>
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3714      	adds	r7, #20
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr
 8006a16:	bf00      	nop
 8006a18:	2000052c 	.word	0x2000052c

08006a1c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006a22:	2300      	movs	r3, #0
 8006a24:	607b      	str	r3, [r7, #4]
 8006a26:	e002      	b.n	8006a2e <enq_lock+0x12>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	607b      	str	r3, [r7, #4]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d806      	bhi.n	8006a42 <enq_lock+0x26>
 8006a34:	4a09      	ldr	r2, [pc, #36]	@ (8006a5c <enq_lock+0x40>)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	011b      	lsls	r3, r3, #4
 8006a3a:	4413      	add	r3, r2
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1f2      	bne.n	8006a28 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	bf14      	ite	ne
 8006a48:	2301      	movne	r3, #1
 8006a4a:	2300      	moveq	r3, #0
 8006a4c:	b2db      	uxtb	r3, r3
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	370c      	adds	r7, #12
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	2000052c 	.word	0x2000052c

08006a60 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	60fb      	str	r3, [r7, #12]
 8006a6e:	e01f      	b.n	8006ab0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006a70:	4a41      	ldr	r2, [pc, #260]	@ (8006b78 <inc_lock+0x118>)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	011b      	lsls	r3, r3, #4
 8006a76:	4413      	add	r3, r2
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d113      	bne.n	8006aaa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006a82:	4a3d      	ldr	r2, [pc, #244]	@ (8006b78 <inc_lock+0x118>)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	011b      	lsls	r3, r3, #4
 8006a88:	4413      	add	r3, r2
 8006a8a:	3304      	adds	r3, #4
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d109      	bne.n	8006aaa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006a96:	4a38      	ldr	r2, [pc, #224]	@ (8006b78 <inc_lock+0x118>)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	011b      	lsls	r3, r3, #4
 8006a9c:	4413      	add	r3, r2
 8006a9e:	3308      	adds	r3, #8
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d006      	beq.n	8006ab8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	3301      	adds	r3, #1
 8006aae:	60fb      	str	r3, [r7, #12]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d9dc      	bls.n	8006a70 <inc_lock+0x10>
 8006ab6:	e000      	b.n	8006aba <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006ab8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d132      	bne.n	8006b26 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	60fb      	str	r3, [r7, #12]
 8006ac4:	e002      	b.n	8006acc <inc_lock+0x6c>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	60fb      	str	r3, [r7, #12]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d806      	bhi.n	8006ae0 <inc_lock+0x80>
 8006ad2:	4a29      	ldr	r2, [pc, #164]	@ (8006b78 <inc_lock+0x118>)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	011b      	lsls	r3, r3, #4
 8006ad8:	4413      	add	r3, r2
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d1f2      	bne.n	8006ac6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d101      	bne.n	8006aea <inc_lock+0x8a>
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	e040      	b.n	8006b6c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	4922      	ldr	r1, [pc, #136]	@ (8006b78 <inc_lock+0x118>)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	011b      	lsls	r3, r3, #4
 8006af4:	440b      	add	r3, r1
 8006af6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	689a      	ldr	r2, [r3, #8]
 8006afc:	491e      	ldr	r1, [pc, #120]	@ (8006b78 <inc_lock+0x118>)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	011b      	lsls	r3, r3, #4
 8006b02:	440b      	add	r3, r1
 8006b04:	3304      	adds	r3, #4
 8006b06:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	695a      	ldr	r2, [r3, #20]
 8006b0c:	491a      	ldr	r1, [pc, #104]	@ (8006b78 <inc_lock+0x118>)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	011b      	lsls	r3, r3, #4
 8006b12:	440b      	add	r3, r1
 8006b14:	3308      	adds	r3, #8
 8006b16:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006b18:	4a17      	ldr	r2, [pc, #92]	@ (8006b78 <inc_lock+0x118>)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	011b      	lsls	r3, r3, #4
 8006b1e:	4413      	add	r3, r2
 8006b20:	330c      	adds	r3, #12
 8006b22:	2200      	movs	r2, #0
 8006b24:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d009      	beq.n	8006b40 <inc_lock+0xe0>
 8006b2c:	4a12      	ldr	r2, [pc, #72]	@ (8006b78 <inc_lock+0x118>)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	011b      	lsls	r3, r3, #4
 8006b32:	4413      	add	r3, r2
 8006b34:	330c      	adds	r3, #12
 8006b36:	881b      	ldrh	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d001      	beq.n	8006b40 <inc_lock+0xe0>
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	e015      	b.n	8006b6c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d108      	bne.n	8006b58 <inc_lock+0xf8>
 8006b46:	4a0c      	ldr	r2, [pc, #48]	@ (8006b78 <inc_lock+0x118>)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	011b      	lsls	r3, r3, #4
 8006b4c:	4413      	add	r3, r2
 8006b4e:	330c      	adds	r3, #12
 8006b50:	881b      	ldrh	r3, [r3, #0]
 8006b52:	3301      	adds	r3, #1
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	e001      	b.n	8006b5c <inc_lock+0xfc>
 8006b58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006b5c:	4906      	ldr	r1, [pc, #24]	@ (8006b78 <inc_lock+0x118>)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	011b      	lsls	r3, r3, #4
 8006b62:	440b      	add	r3, r1
 8006b64:	330c      	adds	r3, #12
 8006b66:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	3301      	adds	r3, #1
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3714      	adds	r7, #20
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr
 8006b78:	2000052c 	.word	0x2000052c

08006b7c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	3b01      	subs	r3, #1
 8006b88:	607b      	str	r3, [r7, #4]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d825      	bhi.n	8006bdc <dec_lock+0x60>
		n = Files[i].ctr;
 8006b90:	4a17      	ldr	r2, [pc, #92]	@ (8006bf0 <dec_lock+0x74>)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	011b      	lsls	r3, r3, #4
 8006b96:	4413      	add	r3, r2
 8006b98:	330c      	adds	r3, #12
 8006b9a:	881b      	ldrh	r3, [r3, #0]
 8006b9c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006b9e:	89fb      	ldrh	r3, [r7, #14]
 8006ba0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ba4:	d101      	bne.n	8006baa <dec_lock+0x2e>
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006baa:	89fb      	ldrh	r3, [r7, #14]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d002      	beq.n	8006bb6 <dec_lock+0x3a>
 8006bb0:	89fb      	ldrh	r3, [r7, #14]
 8006bb2:	3b01      	subs	r3, #1
 8006bb4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006bb6:	4a0e      	ldr	r2, [pc, #56]	@ (8006bf0 <dec_lock+0x74>)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	011b      	lsls	r3, r3, #4
 8006bbc:	4413      	add	r3, r2
 8006bbe:	330c      	adds	r3, #12
 8006bc0:	89fa      	ldrh	r2, [r7, #14]
 8006bc2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006bc4:	89fb      	ldrh	r3, [r7, #14]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d105      	bne.n	8006bd6 <dec_lock+0x5a>
 8006bca:	4a09      	ldr	r2, [pc, #36]	@ (8006bf0 <dec_lock+0x74>)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	011b      	lsls	r3, r3, #4
 8006bd0:	4413      	add	r3, r2
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	737b      	strb	r3, [r7, #13]
 8006bda:	e001      	b.n	8006be0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006bdc:	2302      	movs	r3, #2
 8006bde:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006be0:	7b7b      	ldrb	r3, [r7, #13]
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3714      	adds	r7, #20
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr
 8006bee:	bf00      	nop
 8006bf0:	2000052c 	.word	0x2000052c

08006bf4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b085      	sub	sp, #20
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	60fb      	str	r3, [r7, #12]
 8006c00:	e010      	b.n	8006c24 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006c02:	4a0d      	ldr	r2, [pc, #52]	@ (8006c38 <clear_lock+0x44>)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	011b      	lsls	r3, r3, #4
 8006c08:	4413      	add	r3, r2
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d105      	bne.n	8006c1e <clear_lock+0x2a>
 8006c12:	4a09      	ldr	r2, [pc, #36]	@ (8006c38 <clear_lock+0x44>)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	011b      	lsls	r3, r3, #4
 8006c18:	4413      	add	r3, r2
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	3301      	adds	r3, #1
 8006c22:	60fb      	str	r3, [r7, #12]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d9eb      	bls.n	8006c02 <clear_lock+0xe>
	}
}
 8006c2a:	bf00      	nop
 8006c2c:	bf00      	nop
 8006c2e:	3714      	adds	r7, #20
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr
 8006c38:	2000052c 	.word	0x2000052c

08006c3c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b086      	sub	sp, #24
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006c44:	2300      	movs	r3, #0
 8006c46:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	78db      	ldrb	r3, [r3, #3]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d034      	beq.n	8006cba <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c54:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	7858      	ldrb	r0, [r3, #1]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006c60:	2301      	movs	r3, #1
 8006c62:	697a      	ldr	r2, [r7, #20]
 8006c64:	f7ff fd40 	bl	80066e8 <disk_write>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d002      	beq.n	8006c74 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	73fb      	strb	r3, [r7, #15]
 8006c72:	e022      	b.n	8006cba <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
 8006c7e:	697a      	ldr	r2, [r7, #20]
 8006c80:	1ad2      	subs	r2, r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	699b      	ldr	r3, [r3, #24]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d217      	bcs.n	8006cba <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	789b      	ldrb	r3, [r3, #2]
 8006c8e:	613b      	str	r3, [r7, #16]
 8006c90:	e010      	b.n	8006cb4 <sync_window+0x78>
					wsect += fs->fsize;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	699b      	ldr	r3, [r3, #24]
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	4413      	add	r3, r2
 8006c9a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	7858      	ldrb	r0, [r3, #1]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	697a      	ldr	r2, [r7, #20]
 8006caa:	f7ff fd1d 	bl	80066e8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	613b      	str	r3, [r7, #16]
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d8eb      	bhi.n	8006c92 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3718      	adds	r7, #24
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd6:	683a      	ldr	r2, [r7, #0]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d01b      	beq.n	8006d14 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f7ff ffad 	bl	8006c3c <sync_window>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006ce6:	7bfb      	ldrb	r3, [r7, #15]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d113      	bne.n	8006d14 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	7858      	ldrb	r0, [r3, #1]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	683a      	ldr	r2, [r7, #0]
 8006cfa:	f7ff fcd5 	bl	80066a8 <disk_read>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d004      	beq.n	8006d0e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006d04:	f04f 33ff 	mov.w	r3, #4294967295
 8006d08:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	683a      	ldr	r2, [r7, #0]
 8006d12:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8006d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
	...

08006d20 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f7ff ff87 	bl	8006c3c <sync_window>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006d32:	7bfb      	ldrb	r3, [r7, #15]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d158      	bne.n	8006dea <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	2b03      	cmp	r3, #3
 8006d3e:	d148      	bne.n	8006dd2 <sync_fs+0xb2>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	791b      	ldrb	r3, [r3, #4]
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d144      	bne.n	8006dd2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	3330      	adds	r3, #48	@ 0x30
 8006d4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d50:	2100      	movs	r1, #0
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7ff fda9 	bl	80068aa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	3330      	adds	r3, #48	@ 0x30
 8006d5c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006d60:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8006d64:	4618      	mov	r0, r3
 8006d66:	f7ff fd38 	bl	80067da <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	3330      	adds	r3, #48	@ 0x30
 8006d6e:	4921      	ldr	r1, [pc, #132]	@ (8006df4 <sync_fs+0xd4>)
 8006d70:	4618      	mov	r0, r3
 8006d72:	f7ff fd4d 	bl	8006810 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	3330      	adds	r3, #48	@ 0x30
 8006d7a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006d7e:	491e      	ldr	r1, [pc, #120]	@ (8006df8 <sync_fs+0xd8>)
 8006d80:	4618      	mov	r0, r3
 8006d82:	f7ff fd45 	bl	8006810 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	3330      	adds	r3, #48	@ 0x30
 8006d8a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	4619      	mov	r1, r3
 8006d94:	4610      	mov	r0, r2
 8006d96:	f7ff fd3b 	bl	8006810 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	3330      	adds	r3, #48	@ 0x30
 8006d9e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	4619      	mov	r1, r3
 8006da8:	4610      	mov	r0, r2
 8006daa:	f7ff fd31 	bl	8006810 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	69db      	ldr	r3, [r3, #28]
 8006db2:	1c5a      	adds	r2, r3, #1
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	7858      	ldrb	r0, [r3, #1]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	f7ff fc8e 	bl	80066e8 <disk_write>
			fs->fsi_flag = 0;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	785b      	ldrb	r3, [r3, #1]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	2100      	movs	r1, #0
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7ff fca4 	bl	8006728 <disk_ioctl>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d001      	beq.n	8006dea <sync_fs+0xca>
 8006de6:	2301      	movs	r3, #1
 8006de8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3710      	adds	r7, #16
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	41615252 	.word	0x41615252
 8006df8:	61417272 	.word	0x61417272

08006dfc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	3b02      	subs	r3, #2
 8006e0a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	695b      	ldr	r3, [r3, #20]
 8006e10:	3b02      	subs	r3, #2
 8006e12:	683a      	ldr	r2, [r7, #0]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d301      	bcc.n	8006e1c <clust2sect+0x20>
 8006e18:	2300      	movs	r3, #0
 8006e1a:	e008      	b.n	8006e2e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	895b      	ldrh	r3, [r3, #10]
 8006e20:	461a      	mov	r2, r3
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	fb03 f202 	mul.w	r2, r3, r2
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e2c:	4413      	add	r3, r2
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	370c      	adds	r7, #12
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr

08006e3a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006e3a:	b580      	push	{r7, lr}
 8006e3c:	b086      	sub	sp, #24
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
 8006e42:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d904      	bls.n	8006e5a <get_fat+0x20>
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	683a      	ldr	r2, [r7, #0]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d302      	bcc.n	8006e60 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	617b      	str	r3, [r7, #20]
 8006e5e:	e08e      	b.n	8006f7e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006e60:	f04f 33ff 	mov.w	r3, #4294967295
 8006e64:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	2b03      	cmp	r3, #3
 8006e6c:	d061      	beq.n	8006f32 <get_fat+0xf8>
 8006e6e:	2b03      	cmp	r3, #3
 8006e70:	dc7b      	bgt.n	8006f6a <get_fat+0x130>
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d002      	beq.n	8006e7c <get_fat+0x42>
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d041      	beq.n	8006efe <get_fat+0xc4>
 8006e7a:	e076      	b.n	8006f6a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	60fb      	str	r3, [r7, #12]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	085b      	lsrs	r3, r3, #1
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	4413      	add	r3, r2
 8006e88:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	6a1a      	ldr	r2, [r3, #32]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	0a5b      	lsrs	r3, r3, #9
 8006e92:	4413      	add	r3, r2
 8006e94:	4619      	mov	r1, r3
 8006e96:	6938      	ldr	r0, [r7, #16]
 8006e98:	f7ff ff14 	bl	8006cc4 <move_window>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d166      	bne.n	8006f70 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	1c5a      	adds	r2, r3, #1
 8006ea6:	60fa      	str	r2, [r7, #12]
 8006ea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eac:	693a      	ldr	r2, [r7, #16]
 8006eae:	4413      	add	r3, r2
 8006eb0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006eb4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	6a1a      	ldr	r2, [r3, #32]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	0a5b      	lsrs	r3, r3, #9
 8006ebe:	4413      	add	r3, r2
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	6938      	ldr	r0, [r7, #16]
 8006ec4:	f7ff fefe 	bl	8006cc4 <move_window>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d152      	bne.n	8006f74 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ed4:	693a      	ldr	r2, [r7, #16]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006edc:	021b      	lsls	r3, r3, #8
 8006ede:	68ba      	ldr	r2, [r7, #8]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	f003 0301 	and.w	r3, r3, #1
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d002      	beq.n	8006ef4 <get_fat+0xba>
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	091b      	lsrs	r3, r3, #4
 8006ef2:	e002      	b.n	8006efa <get_fat+0xc0>
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006efa:	617b      	str	r3, [r7, #20]
			break;
 8006efc:	e03f      	b.n	8006f7e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	6a1a      	ldr	r2, [r3, #32]
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	0a1b      	lsrs	r3, r3, #8
 8006f06:	4413      	add	r3, r2
 8006f08:	4619      	mov	r1, r3
 8006f0a:	6938      	ldr	r0, [r7, #16]
 8006f0c:	f7ff feda 	bl	8006cc4 <move_window>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d130      	bne.n	8006f78 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	005b      	lsls	r3, r3, #1
 8006f20:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006f24:	4413      	add	r3, r2
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7ff fc1c 	bl	8006764 <ld_word>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	617b      	str	r3, [r7, #20]
			break;
 8006f30:	e025      	b.n	8006f7e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	6a1a      	ldr	r2, [r3, #32]
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	09db      	lsrs	r3, r3, #7
 8006f3a:	4413      	add	r3, r2
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	6938      	ldr	r0, [r7, #16]
 8006f40:	f7ff fec0 	bl	8006cc4 <move_window>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d118      	bne.n	8006f7c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006f58:	4413      	add	r3, r2
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f7ff fc1a 	bl	8006794 <ld_dword>
 8006f60:	4603      	mov	r3, r0
 8006f62:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006f66:	617b      	str	r3, [r7, #20]
			break;
 8006f68:	e009      	b.n	8006f7e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	617b      	str	r3, [r7, #20]
 8006f6e:	e006      	b.n	8006f7e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006f70:	bf00      	nop
 8006f72:	e004      	b.n	8006f7e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006f74:	bf00      	nop
 8006f76:	e002      	b.n	8006f7e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006f78:	bf00      	nop
 8006f7a:	e000      	b.n	8006f7e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006f7c:	bf00      	nop
		}
	}

	return val;
 8006f7e:	697b      	ldr	r3, [r7, #20]
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3718      	adds	r7, #24
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006f88:	b590      	push	{r4, r7, lr}
 8006f8a:	b089      	sub	sp, #36	@ 0x24
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006f94:	2302      	movs	r3, #2
 8006f96:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	f240 80d9 	bls.w	8007152 <put_fat+0x1ca>
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	695b      	ldr	r3, [r3, #20]
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	f080 80d3 	bcs.w	8007152 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	2b03      	cmp	r3, #3
 8006fb2:	f000 8096 	beq.w	80070e2 <put_fat+0x15a>
 8006fb6:	2b03      	cmp	r3, #3
 8006fb8:	f300 80cb 	bgt.w	8007152 <put_fat+0x1ca>
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d002      	beq.n	8006fc6 <put_fat+0x3e>
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	d06e      	beq.n	80070a2 <put_fat+0x11a>
 8006fc4:	e0c5      	b.n	8007152 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	61bb      	str	r3, [r7, #24]
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	085b      	lsrs	r3, r3, #1
 8006fce:	69ba      	ldr	r2, [r7, #24]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6a1a      	ldr	r2, [r3, #32]
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	0a5b      	lsrs	r3, r3, #9
 8006fdc:	4413      	add	r3, r2
 8006fde:	4619      	mov	r1, r3
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	f7ff fe6f 	bl	8006cc4 <move_window>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006fea:	7ffb      	ldrb	r3, [r7, #31]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f040 80a9 	bne.w	8007144 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	1c59      	adds	r1, r3, #1
 8006ffc:	61b9      	str	r1, [r7, #24]
 8006ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007002:	4413      	add	r3, r2
 8007004:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	f003 0301 	and.w	r3, r3, #1
 800700c:	2b00      	cmp	r3, #0
 800700e:	d00d      	beq.n	800702c <put_fat+0xa4>
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	b25b      	sxtb	r3, r3
 8007016:	f003 030f 	and.w	r3, r3, #15
 800701a:	b25a      	sxtb	r2, r3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	b2db      	uxtb	r3, r3
 8007020:	011b      	lsls	r3, r3, #4
 8007022:	b25b      	sxtb	r3, r3
 8007024:	4313      	orrs	r3, r2
 8007026:	b25b      	sxtb	r3, r3
 8007028:	b2db      	uxtb	r3, r3
 800702a:	e001      	b.n	8007030 <put_fat+0xa8>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	b2db      	uxtb	r3, r3
 8007030:	697a      	ldr	r2, [r7, #20]
 8007032:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2201      	movs	r2, #1
 8007038:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	6a1a      	ldr	r2, [r3, #32]
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	0a5b      	lsrs	r3, r3, #9
 8007042:	4413      	add	r3, r2
 8007044:	4619      	mov	r1, r3
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f7ff fe3c 	bl	8006cc4 <move_window>
 800704c:	4603      	mov	r3, r0
 800704e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007050:	7ffb      	ldrb	r3, [r7, #31]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d178      	bne.n	8007148 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007062:	4413      	add	r3, r2
 8007064:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	f003 0301 	and.w	r3, r3, #1
 800706c:	2b00      	cmp	r3, #0
 800706e:	d003      	beq.n	8007078 <put_fat+0xf0>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	091b      	lsrs	r3, r3, #4
 8007074:	b2db      	uxtb	r3, r3
 8007076:	e00e      	b.n	8007096 <put_fat+0x10e>
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	b25b      	sxtb	r3, r3
 800707e:	f023 030f 	bic.w	r3, r3, #15
 8007082:	b25a      	sxtb	r2, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	0a1b      	lsrs	r3, r3, #8
 8007088:	b25b      	sxtb	r3, r3
 800708a:	f003 030f 	and.w	r3, r3, #15
 800708e:	b25b      	sxtb	r3, r3
 8007090:	4313      	orrs	r3, r2
 8007092:	b25b      	sxtb	r3, r3
 8007094:	b2db      	uxtb	r3, r3
 8007096:	697a      	ldr	r2, [r7, #20]
 8007098:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2201      	movs	r2, #1
 800709e:	70da      	strb	r2, [r3, #3]
			break;
 80070a0:	e057      	b.n	8007152 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6a1a      	ldr	r2, [r3, #32]
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	0a1b      	lsrs	r3, r3, #8
 80070aa:	4413      	add	r3, r2
 80070ac:	4619      	mov	r1, r3
 80070ae:	68f8      	ldr	r0, [r7, #12]
 80070b0:	f7ff fe08 	bl	8006cc4 <move_window>
 80070b4:	4603      	mov	r3, r0
 80070b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80070b8:	7ffb      	ldrb	r3, [r7, #31]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d146      	bne.n	800714c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	005b      	lsls	r3, r3, #1
 80070c8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80070cc:	4413      	add	r3, r2
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	b292      	uxth	r2, r2
 80070d2:	4611      	mov	r1, r2
 80070d4:	4618      	mov	r0, r3
 80070d6:	f7ff fb80 	bl	80067da <st_word>
			fs->wflag = 1;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2201      	movs	r2, #1
 80070de:	70da      	strb	r2, [r3, #3]
			break;
 80070e0:	e037      	b.n	8007152 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6a1a      	ldr	r2, [r3, #32]
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	09db      	lsrs	r3, r3, #7
 80070ea:	4413      	add	r3, r2
 80070ec:	4619      	mov	r1, r3
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f7ff fde8 	bl	8006cc4 <move_window>
 80070f4:	4603      	mov	r3, r0
 80070f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80070f8:	7ffb      	ldrb	r3, [r7, #31]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d128      	bne.n	8007150 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007112:	4413      	add	r3, r2
 8007114:	4618      	mov	r0, r3
 8007116:	f7ff fb3d 	bl	8006794 <ld_dword>
 800711a:	4603      	mov	r3, r0
 800711c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007120:	4323      	orrs	r3, r4
 8007122:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007132:	4413      	add	r3, r2
 8007134:	6879      	ldr	r1, [r7, #4]
 8007136:	4618      	mov	r0, r3
 8007138:	f7ff fb6a 	bl	8006810 <st_dword>
			fs->wflag = 1;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2201      	movs	r2, #1
 8007140:	70da      	strb	r2, [r3, #3]
			break;
 8007142:	e006      	b.n	8007152 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007144:	bf00      	nop
 8007146:	e004      	b.n	8007152 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007148:	bf00      	nop
 800714a:	e002      	b.n	8007152 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800714c:	bf00      	nop
 800714e:	e000      	b.n	8007152 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007150:	bf00      	nop
		}
	}
	return res;
 8007152:	7ffb      	ldrb	r3, [r7, #31]
}
 8007154:	4618      	mov	r0, r3
 8007156:	3724      	adds	r7, #36	@ 0x24
 8007158:	46bd      	mov	sp, r7
 800715a:	bd90      	pop	{r4, r7, pc}

0800715c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b088      	sub	sp, #32
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007168:	2300      	movs	r3, #0
 800716a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	2b01      	cmp	r3, #1
 8007176:	d904      	bls.n	8007182 <remove_chain+0x26>
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	695b      	ldr	r3, [r3, #20]
 800717c:	68ba      	ldr	r2, [r7, #8]
 800717e:	429a      	cmp	r2, r3
 8007180:	d301      	bcc.n	8007186 <remove_chain+0x2a>
 8007182:	2302      	movs	r3, #2
 8007184:	e04b      	b.n	800721e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00c      	beq.n	80071a6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800718c:	f04f 32ff 	mov.w	r2, #4294967295
 8007190:	6879      	ldr	r1, [r7, #4]
 8007192:	69b8      	ldr	r0, [r7, #24]
 8007194:	f7ff fef8 	bl	8006f88 <put_fat>
 8007198:	4603      	mov	r3, r0
 800719a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800719c:	7ffb      	ldrb	r3, [r7, #31]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d001      	beq.n	80071a6 <remove_chain+0x4a>
 80071a2:	7ffb      	ldrb	r3, [r7, #31]
 80071a4:	e03b      	b.n	800721e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80071a6:	68b9      	ldr	r1, [r7, #8]
 80071a8:	68f8      	ldr	r0, [r7, #12]
 80071aa:	f7ff fe46 	bl	8006e3a <get_fat>
 80071ae:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d031      	beq.n	800721a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d101      	bne.n	80071c0 <remove_chain+0x64>
 80071bc:	2302      	movs	r3, #2
 80071be:	e02e      	b.n	800721e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071c6:	d101      	bne.n	80071cc <remove_chain+0x70>
 80071c8:	2301      	movs	r3, #1
 80071ca:	e028      	b.n	800721e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80071cc:	2200      	movs	r2, #0
 80071ce:	68b9      	ldr	r1, [r7, #8]
 80071d0:	69b8      	ldr	r0, [r7, #24]
 80071d2:	f7ff fed9 	bl	8006f88 <put_fat>
 80071d6:	4603      	mov	r3, r0
 80071d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80071da:	7ffb      	ldrb	r3, [r7, #31]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d001      	beq.n	80071e4 <remove_chain+0x88>
 80071e0:	7ffb      	ldrb	r3, [r7, #31]
 80071e2:	e01c      	b.n	800721e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	691a      	ldr	r2, [r3, #16]
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	695b      	ldr	r3, [r3, #20]
 80071ec:	3b02      	subs	r3, #2
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d20b      	bcs.n	800720a <remove_chain+0xae>
			fs->free_clst++;
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	1c5a      	adds	r2, r3, #1
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	791b      	ldrb	r3, [r3, #4]
 8007200:	f043 0301 	orr.w	r3, r3, #1
 8007204:	b2da      	uxtb	r2, r3
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	695b      	ldr	r3, [r3, #20]
 8007212:	68ba      	ldr	r2, [r7, #8]
 8007214:	429a      	cmp	r2, r3
 8007216:	d3c6      	bcc.n	80071a6 <remove_chain+0x4a>
 8007218:	e000      	b.n	800721c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800721a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	3720      	adds	r7, #32
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}

08007226 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007226:	b580      	push	{r7, lr}
 8007228:	b088      	sub	sp, #32
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
 800722e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d10d      	bne.n	8007258 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d004      	beq.n	8007252 <create_chain+0x2c>
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	695b      	ldr	r3, [r3, #20]
 800724c:	69ba      	ldr	r2, [r7, #24]
 800724e:	429a      	cmp	r2, r3
 8007250:	d31b      	bcc.n	800728a <create_chain+0x64>
 8007252:	2301      	movs	r3, #1
 8007254:	61bb      	str	r3, [r7, #24]
 8007256:	e018      	b.n	800728a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007258:	6839      	ldr	r1, [r7, #0]
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f7ff fded 	bl	8006e3a <get_fat>
 8007260:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2b01      	cmp	r3, #1
 8007266:	d801      	bhi.n	800726c <create_chain+0x46>
 8007268:	2301      	movs	r3, #1
 800726a:	e070      	b.n	800734e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007272:	d101      	bne.n	8007278 <create_chain+0x52>
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	e06a      	b.n	800734e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	695b      	ldr	r3, [r3, #20]
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	429a      	cmp	r2, r3
 8007280:	d201      	bcs.n	8007286 <create_chain+0x60>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	e063      	b.n	800734e <create_chain+0x128>
		scl = clst;
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	3301      	adds	r3, #1
 8007292:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	695b      	ldr	r3, [r3, #20]
 8007298:	69fa      	ldr	r2, [r7, #28]
 800729a:	429a      	cmp	r2, r3
 800729c:	d307      	bcc.n	80072ae <create_chain+0x88>
				ncl = 2;
 800729e:	2302      	movs	r3, #2
 80072a0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80072a2:	69fa      	ldr	r2, [r7, #28]
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d901      	bls.n	80072ae <create_chain+0x88>
 80072aa:	2300      	movs	r3, #0
 80072ac:	e04f      	b.n	800734e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80072ae:	69f9      	ldr	r1, [r7, #28]
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f7ff fdc2 	bl	8006e3a <get_fat>
 80072b6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00e      	beq.n	80072dc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d003      	beq.n	80072cc <create_chain+0xa6>
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ca:	d101      	bne.n	80072d0 <create_chain+0xaa>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	e03e      	b.n	800734e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80072d0:	69fa      	ldr	r2, [r7, #28]
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d1da      	bne.n	800728e <create_chain+0x68>
 80072d8:	2300      	movs	r3, #0
 80072da:	e038      	b.n	800734e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80072dc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80072de:	f04f 32ff 	mov.w	r2, #4294967295
 80072e2:	69f9      	ldr	r1, [r7, #28]
 80072e4:	6938      	ldr	r0, [r7, #16]
 80072e6:	f7ff fe4f 	bl	8006f88 <put_fat>
 80072ea:	4603      	mov	r3, r0
 80072ec:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80072ee:	7dfb      	ldrb	r3, [r7, #23]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d109      	bne.n	8007308 <create_chain+0xe2>
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d006      	beq.n	8007308 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80072fa:	69fa      	ldr	r2, [r7, #28]
 80072fc:	6839      	ldr	r1, [r7, #0]
 80072fe:	6938      	ldr	r0, [r7, #16]
 8007300:	f7ff fe42 	bl	8006f88 <put_fat>
 8007304:	4603      	mov	r3, r0
 8007306:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007308:	7dfb      	ldrb	r3, [r7, #23]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d116      	bne.n	800733c <create_chain+0x116>
		fs->last_clst = ncl;
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	69fa      	ldr	r2, [r7, #28]
 8007312:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	691a      	ldr	r2, [r3, #16]
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	695b      	ldr	r3, [r3, #20]
 800731c:	3b02      	subs	r3, #2
 800731e:	429a      	cmp	r2, r3
 8007320:	d804      	bhi.n	800732c <create_chain+0x106>
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	1e5a      	subs	r2, r3, #1
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	791b      	ldrb	r3, [r3, #4]
 8007330:	f043 0301 	orr.w	r3, r3, #1
 8007334:	b2da      	uxtb	r2, r3
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	711a      	strb	r2, [r3, #4]
 800733a:	e007      	b.n	800734c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800733c:	7dfb      	ldrb	r3, [r7, #23]
 800733e:	2b01      	cmp	r3, #1
 8007340:	d102      	bne.n	8007348 <create_chain+0x122>
 8007342:	f04f 33ff 	mov.w	r3, #4294967295
 8007346:	e000      	b.n	800734a <create_chain+0x124>
 8007348:	2301      	movs	r3, #1
 800734a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800734c:	69fb      	ldr	r3, [r7, #28]
}
 800734e:	4618      	mov	r0, r3
 8007350:	3720      	adds	r7, #32
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007356:	b480      	push	{r7}
 8007358:	b087      	sub	sp, #28
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
 800735e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800736a:	3304      	adds	r3, #4
 800736c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	0a5b      	lsrs	r3, r3, #9
 8007372:	68fa      	ldr	r2, [r7, #12]
 8007374:	8952      	ldrh	r2, [r2, #10]
 8007376:	fbb3 f3f2 	udiv	r3, r3, r2
 800737a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	1d1a      	adds	r2, r3, #4
 8007380:	613a      	str	r2, [r7, #16]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d101      	bne.n	8007390 <clmt_clust+0x3a>
 800738c:	2300      	movs	r3, #0
 800738e:	e010      	b.n	80073b2 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007390:	697a      	ldr	r2, [r7, #20]
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	429a      	cmp	r2, r3
 8007396:	d307      	bcc.n	80073a8 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007398:	697a      	ldr	r2, [r7, #20]
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	617b      	str	r3, [r7, #20]
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	3304      	adds	r3, #4
 80073a4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80073a6:	e7e9      	b.n	800737c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80073a8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	4413      	add	r3, r2
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	371c      	adds	r7, #28
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr

080073be <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b086      	sub	sp, #24
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
 80073c6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80073d4:	d204      	bcs.n	80073e0 <dir_sdi+0x22>
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	f003 031f 	and.w	r3, r3, #31
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d001      	beq.n	80073e4 <dir_sdi+0x26>
		return FR_INT_ERR;
 80073e0:	2302      	movs	r3, #2
 80073e2:	e063      	b.n	80074ac <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	683a      	ldr	r2, [r7, #0]
 80073e8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d106      	bne.n	8007404 <dir_sdi+0x46>
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	2b02      	cmp	r3, #2
 80073fc:	d902      	bls.n	8007404 <dir_sdi+0x46>
		clst = fs->dirbase;
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007402:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d10c      	bne.n	8007424 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	095b      	lsrs	r3, r3, #5
 800740e:	693a      	ldr	r2, [r7, #16]
 8007410:	8912      	ldrh	r2, [r2, #8]
 8007412:	4293      	cmp	r3, r2
 8007414:	d301      	bcc.n	800741a <dir_sdi+0x5c>
 8007416:	2302      	movs	r3, #2
 8007418:	e048      	b.n	80074ac <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	61da      	str	r2, [r3, #28]
 8007422:	e029      	b.n	8007478 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	895b      	ldrh	r3, [r3, #10]
 8007428:	025b      	lsls	r3, r3, #9
 800742a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800742c:	e019      	b.n	8007462 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6979      	ldr	r1, [r7, #20]
 8007432:	4618      	mov	r0, r3
 8007434:	f7ff fd01 	bl	8006e3a <get_fat>
 8007438:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007440:	d101      	bne.n	8007446 <dir_sdi+0x88>
 8007442:	2301      	movs	r3, #1
 8007444:	e032      	b.n	80074ac <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d904      	bls.n	8007456 <dir_sdi+0x98>
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	695b      	ldr	r3, [r3, #20]
 8007450:	697a      	ldr	r2, [r7, #20]
 8007452:	429a      	cmp	r2, r3
 8007454:	d301      	bcc.n	800745a <dir_sdi+0x9c>
 8007456:	2302      	movs	r3, #2
 8007458:	e028      	b.n	80074ac <dir_sdi+0xee>
			ofs -= csz;
 800745a:	683a      	ldr	r2, [r7, #0]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	1ad3      	subs	r3, r2, r3
 8007460:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007462:	683a      	ldr	r2, [r7, #0]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	429a      	cmp	r2, r3
 8007468:	d2e1      	bcs.n	800742e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800746a:	6979      	ldr	r1, [r7, #20]
 800746c:	6938      	ldr	r0, [r7, #16]
 800746e:	f7ff fcc5 	bl	8006dfc <clust2sect>
 8007472:	4602      	mov	r2, r0
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	697a      	ldr	r2, [r7, #20]
 800747c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	69db      	ldr	r3, [r3, #28]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d101      	bne.n	800748a <dir_sdi+0xcc>
 8007486:	2302      	movs	r3, #2
 8007488:	e010      	b.n	80074ac <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	69da      	ldr	r2, [r3, #28]
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	0a5b      	lsrs	r3, r3, #9
 8007492:	441a      	add	r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074a4:	441a      	add	r2, r3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3718      	adds	r7, #24
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b086      	sub	sp, #24
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	695b      	ldr	r3, [r3, #20]
 80074c8:	3320      	adds	r3, #32
 80074ca:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	69db      	ldr	r3, [r3, #28]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d003      	beq.n	80074dc <dir_next+0x28>
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80074da:	d301      	bcc.n	80074e0 <dir_next+0x2c>
 80074dc:	2304      	movs	r3, #4
 80074de:	e0aa      	b.n	8007636 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	f040 8098 	bne.w	800761c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	69db      	ldr	r3, [r3, #28]
 80074f0:	1c5a      	adds	r2, r3, #1
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	699b      	ldr	r3, [r3, #24]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d10b      	bne.n	8007516 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	095b      	lsrs	r3, r3, #5
 8007502:	68fa      	ldr	r2, [r7, #12]
 8007504:	8912      	ldrh	r2, [r2, #8]
 8007506:	4293      	cmp	r3, r2
 8007508:	f0c0 8088 	bcc.w	800761c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	61da      	str	r2, [r3, #28]
 8007512:	2304      	movs	r3, #4
 8007514:	e08f      	b.n	8007636 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	0a5b      	lsrs	r3, r3, #9
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	8952      	ldrh	r2, [r2, #10]
 800751e:	3a01      	subs	r2, #1
 8007520:	4013      	ands	r3, r2
 8007522:	2b00      	cmp	r3, #0
 8007524:	d17a      	bne.n	800761c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	699b      	ldr	r3, [r3, #24]
 800752c:	4619      	mov	r1, r3
 800752e:	4610      	mov	r0, r2
 8007530:	f7ff fc83 	bl	8006e3a <get_fat>
 8007534:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	2b01      	cmp	r3, #1
 800753a:	d801      	bhi.n	8007540 <dir_next+0x8c>
 800753c:	2302      	movs	r3, #2
 800753e:	e07a      	b.n	8007636 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007546:	d101      	bne.n	800754c <dir_next+0x98>
 8007548:	2301      	movs	r3, #1
 800754a:	e074      	b.n	8007636 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	695b      	ldr	r3, [r3, #20]
 8007550:	697a      	ldr	r2, [r7, #20]
 8007552:	429a      	cmp	r2, r3
 8007554:	d358      	bcc.n	8007608 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d104      	bne.n	8007566 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	61da      	str	r2, [r3, #28]
 8007562:	2304      	movs	r3, #4
 8007564:	e067      	b.n	8007636 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	699b      	ldr	r3, [r3, #24]
 800756c:	4619      	mov	r1, r3
 800756e:	4610      	mov	r0, r2
 8007570:	f7ff fe59 	bl	8007226 <create_chain>
 8007574:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d101      	bne.n	8007580 <dir_next+0xcc>
 800757c:	2307      	movs	r3, #7
 800757e:	e05a      	b.n	8007636 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	2b01      	cmp	r3, #1
 8007584:	d101      	bne.n	800758a <dir_next+0xd6>
 8007586:	2302      	movs	r3, #2
 8007588:	e055      	b.n	8007636 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007590:	d101      	bne.n	8007596 <dir_next+0xe2>
 8007592:	2301      	movs	r3, #1
 8007594:	e04f      	b.n	8007636 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	f7ff fb50 	bl	8006c3c <sync_window>
 800759c:	4603      	mov	r3, r0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d001      	beq.n	80075a6 <dir_next+0xf2>
 80075a2:	2301      	movs	r3, #1
 80075a4:	e047      	b.n	8007636 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	3330      	adds	r3, #48	@ 0x30
 80075aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80075ae:	2100      	movs	r1, #0
 80075b0:	4618      	mov	r0, r3
 80075b2:	f7ff f97a 	bl	80068aa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80075b6:	2300      	movs	r3, #0
 80075b8:	613b      	str	r3, [r7, #16]
 80075ba:	6979      	ldr	r1, [r7, #20]
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f7ff fc1d 	bl	8006dfc <clust2sect>
 80075c2:	4602      	mov	r2, r0
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80075c8:	e012      	b.n	80075f0 <dir_next+0x13c>
						fs->wflag = 1;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2201      	movs	r2, #1
 80075ce:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	f7ff fb33 	bl	8006c3c <sync_window>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d001      	beq.n	80075e0 <dir_next+0x12c>
 80075dc:	2301      	movs	r3, #1
 80075de:	e02a      	b.n	8007636 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	3301      	adds	r3, #1
 80075e4:	613b      	str	r3, [r7, #16]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ea:	1c5a      	adds	r2, r3, #1
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	62da      	str	r2, [r3, #44]	@ 0x2c
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	895b      	ldrh	r3, [r3, #10]
 80075f4:	461a      	mov	r2, r3
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d3e6      	bcc.n	80075ca <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	1ad2      	subs	r2, r2, r3
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	697a      	ldr	r2, [r7, #20]
 800760c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800760e:	6979      	ldr	r1, [r7, #20]
 8007610:	68f8      	ldr	r0, [r7, #12]
 8007612:	f7ff fbf3 	bl	8006dfc <clust2sect>
 8007616:	4602      	mov	r2, r0
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	68ba      	ldr	r2, [r7, #8]
 8007620:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800762e:	441a      	add	r2, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3718      	adds	r7, #24
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b086      	sub	sp, #24
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
 8007646:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800764e:	2100      	movs	r1, #0
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f7ff feb4 	bl	80073be <dir_sdi>
 8007656:	4603      	mov	r3, r0
 8007658:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800765a:	7dfb      	ldrb	r3, [r7, #23]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d12b      	bne.n	80076b8 <dir_alloc+0x7a>
		n = 0;
 8007660:	2300      	movs	r3, #0
 8007662:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	69db      	ldr	r3, [r3, #28]
 8007668:	4619      	mov	r1, r3
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	f7ff fb2a 	bl	8006cc4 <move_window>
 8007670:	4603      	mov	r3, r0
 8007672:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007674:	7dfb      	ldrb	r3, [r7, #23]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d11d      	bne.n	80076b6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a1b      	ldr	r3, [r3, #32]
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	2be5      	cmp	r3, #229	@ 0xe5
 8007682:	d004      	beq.n	800768e <dir_alloc+0x50>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6a1b      	ldr	r3, [r3, #32]
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d107      	bne.n	800769e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	3301      	adds	r3, #1
 8007692:	613b      	str	r3, [r7, #16]
 8007694:	693a      	ldr	r2, [r7, #16]
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	429a      	cmp	r2, r3
 800769a:	d102      	bne.n	80076a2 <dir_alloc+0x64>
 800769c:	e00c      	b.n	80076b8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800769e:	2300      	movs	r3, #0
 80076a0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80076a2:	2101      	movs	r1, #1
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f7ff ff05 	bl	80074b4 <dir_next>
 80076aa:	4603      	mov	r3, r0
 80076ac:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80076ae:	7dfb      	ldrb	r3, [r7, #23]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d0d7      	beq.n	8007664 <dir_alloc+0x26>
 80076b4:	e000      	b.n	80076b8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80076b6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80076b8:	7dfb      	ldrb	r3, [r7, #23]
 80076ba:	2b04      	cmp	r3, #4
 80076bc:	d101      	bne.n	80076c2 <dir_alloc+0x84>
 80076be:	2307      	movs	r3, #7
 80076c0:	75fb      	strb	r3, [r7, #23]
	return res;
 80076c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3718      	adds	r7, #24
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	331a      	adds	r3, #26
 80076da:	4618      	mov	r0, r3
 80076dc:	f7ff f842 	bl	8006764 <ld_word>
 80076e0:	4603      	mov	r3, r0
 80076e2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	2b03      	cmp	r3, #3
 80076ea:	d109      	bne.n	8007700 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	3314      	adds	r3, #20
 80076f0:	4618      	mov	r0, r3
 80076f2:	f7ff f837 	bl	8006764 <ld_word>
 80076f6:	4603      	mov	r3, r0
 80076f8:	041b      	lsls	r3, r3, #16
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007700:	68fb      	ldr	r3, [r7, #12]
}
 8007702:	4618      	mov	r0, r3
 8007704:	3710      	adds	r7, #16
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b084      	sub	sp, #16
 800770e:	af00      	add	r7, sp, #0
 8007710:	60f8      	str	r0, [r7, #12]
 8007712:	60b9      	str	r1, [r7, #8]
 8007714:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	331a      	adds	r3, #26
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	b292      	uxth	r2, r2
 800771e:	4611      	mov	r1, r2
 8007720:	4618      	mov	r0, r3
 8007722:	f7ff f85a 	bl	80067da <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	2b03      	cmp	r3, #3
 800772c:	d109      	bne.n	8007742 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	f103 0214 	add.w	r2, r3, #20
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	0c1b      	lsrs	r3, r3, #16
 8007738:	b29b      	uxth	r3, r3
 800773a:	4619      	mov	r1, r3
 800773c:	4610      	mov	r0, r2
 800773e:	f7ff f84c 	bl	80067da <st_word>
	}
}
 8007742:	bf00      	nop
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}

0800774a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800774a:	b580      	push	{r7, lr}
 800774c:	b086      	sub	sp, #24
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
 8007752:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8007754:	2304      	movs	r3, #4
 8007756:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800775e:	e03c      	b.n	80077da <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	69db      	ldr	r3, [r3, #28]
 8007764:	4619      	mov	r1, r3
 8007766:	6938      	ldr	r0, [r7, #16]
 8007768:	f7ff faac 	bl	8006cc4 <move_window>
 800776c:	4603      	mov	r3, r0
 800776e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007770:	7dfb      	ldrb	r3, [r7, #23]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d136      	bne.n	80077e4 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a1b      	ldr	r3, [r3, #32]
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800777e:	7bfb      	ldrb	r3, [r7, #15]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d102      	bne.n	800778a <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8007784:	2304      	movs	r3, #4
 8007786:	75fb      	strb	r3, [r7, #23]
 8007788:	e031      	b.n	80077ee <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a1b      	ldr	r3, [r3, #32]
 800778e:	330b      	adds	r3, #11
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007796:	73bb      	strb	r3, [r7, #14]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	7bba      	ldrb	r2, [r7, #14]
 800779c:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800779e:	7bfb      	ldrb	r3, [r7, #15]
 80077a0:	2be5      	cmp	r3, #229	@ 0xe5
 80077a2:	d011      	beq.n	80077c8 <dir_read+0x7e>
 80077a4:	7bfb      	ldrb	r3, [r7, #15]
 80077a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80077a8:	d00e      	beq.n	80077c8 <dir_read+0x7e>
 80077aa:	7bbb      	ldrb	r3, [r7, #14]
 80077ac:	2b0f      	cmp	r3, #15
 80077ae:	d00b      	beq.n	80077c8 <dir_read+0x7e>
 80077b0:	7bbb      	ldrb	r3, [r7, #14]
 80077b2:	f023 0320 	bic.w	r3, r3, #32
 80077b6:	2b08      	cmp	r3, #8
 80077b8:	bf0c      	ite	eq
 80077ba:	2301      	moveq	r3, #1
 80077bc:	2300      	movne	r3, #0
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	461a      	mov	r2, r3
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d00f      	beq.n	80077e8 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80077c8:	2100      	movs	r1, #0
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f7ff fe72 	bl	80074b4 <dir_next>
 80077d0:	4603      	mov	r3, r0
 80077d2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80077d4:	7dfb      	ldrb	r3, [r7, #23]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d108      	bne.n	80077ec <dir_read+0xa2>
	while (dp->sect) {
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	69db      	ldr	r3, [r3, #28]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d1be      	bne.n	8007760 <dir_read+0x16>
 80077e2:	e004      	b.n	80077ee <dir_read+0xa4>
		if (res != FR_OK) break;
 80077e4:	bf00      	nop
 80077e6:	e002      	b.n	80077ee <dir_read+0xa4>
				break;
 80077e8:	bf00      	nop
 80077ea:	e000      	b.n	80077ee <dir_read+0xa4>
		if (res != FR_OK) break;
 80077ec:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80077ee:	7dfb      	ldrb	r3, [r7, #23]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d002      	beq.n	80077fa <dir_read+0xb0>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	61da      	str	r2, [r3, #28]
	return res;
 80077fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3718      	adds	r7, #24
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b086      	sub	sp, #24
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007812:	2100      	movs	r1, #0
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f7ff fdd2 	bl	80073be <dir_sdi>
 800781a:	4603      	mov	r3, r0
 800781c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800781e:	7dfb      	ldrb	r3, [r7, #23]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d001      	beq.n	8007828 <dir_find+0x24>
 8007824:	7dfb      	ldrb	r3, [r7, #23]
 8007826:	e03e      	b.n	80078a6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	69db      	ldr	r3, [r3, #28]
 800782c:	4619      	mov	r1, r3
 800782e:	6938      	ldr	r0, [r7, #16]
 8007830:	f7ff fa48 	bl	8006cc4 <move_window>
 8007834:	4603      	mov	r3, r0
 8007836:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007838:	7dfb      	ldrb	r3, [r7, #23]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d12f      	bne.n	800789e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a1b      	ldr	r3, [r3, #32]
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007846:	7bfb      	ldrb	r3, [r7, #15]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d102      	bne.n	8007852 <dir_find+0x4e>
 800784c:	2304      	movs	r3, #4
 800784e:	75fb      	strb	r3, [r7, #23]
 8007850:	e028      	b.n	80078a4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a1b      	ldr	r3, [r3, #32]
 8007856:	330b      	adds	r3, #11
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800785e:	b2da      	uxtb	r2, r3
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a1b      	ldr	r3, [r3, #32]
 8007868:	330b      	adds	r3, #11
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	f003 0308 	and.w	r3, r3, #8
 8007870:	2b00      	cmp	r3, #0
 8007872:	d10a      	bne.n	800788a <dir_find+0x86>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6a18      	ldr	r0, [r3, #32]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	3324      	adds	r3, #36	@ 0x24
 800787c:	220b      	movs	r2, #11
 800787e:	4619      	mov	r1, r3
 8007880:	f7ff f82e 	bl	80068e0 <mem_cmp>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00b      	beq.n	80078a2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800788a:	2100      	movs	r1, #0
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f7ff fe11 	bl	80074b4 <dir_next>
 8007892:	4603      	mov	r3, r0
 8007894:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007896:	7dfb      	ldrb	r3, [r7, #23]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d0c5      	beq.n	8007828 <dir_find+0x24>
 800789c:	e002      	b.n	80078a4 <dir_find+0xa0>
		if (res != FR_OK) break;
 800789e:	bf00      	nop
 80078a0:	e000      	b.n	80078a4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80078a2:	bf00      	nop

	return res;
 80078a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3718      	adds	r7, #24
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b084      	sub	sp, #16
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80078bc:	2101      	movs	r1, #1
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f7ff febd 	bl	800763e <dir_alloc>
 80078c4:	4603      	mov	r3, r0
 80078c6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80078c8:	7bfb      	ldrb	r3, [r7, #15]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d11c      	bne.n	8007908 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	69db      	ldr	r3, [r3, #28]
 80078d2:	4619      	mov	r1, r3
 80078d4:	68b8      	ldr	r0, [r7, #8]
 80078d6:	f7ff f9f5 	bl	8006cc4 <move_window>
 80078da:	4603      	mov	r3, r0
 80078dc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80078de:	7bfb      	ldrb	r3, [r7, #15]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d111      	bne.n	8007908 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6a1b      	ldr	r3, [r3, #32]
 80078e8:	2220      	movs	r2, #32
 80078ea:	2100      	movs	r1, #0
 80078ec:	4618      	mov	r0, r3
 80078ee:	f7fe ffdc 	bl	80068aa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a18      	ldr	r0, [r3, #32]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	3324      	adds	r3, #36	@ 0x24
 80078fa:	220b      	movs	r2, #11
 80078fc:	4619      	mov	r1, r3
 80078fe:	f7fe ffb3 	bl	8006868 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	2201      	movs	r2, #1
 8007906:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007908:	7bfb      	ldrb	r3, [r7, #15]
}
 800790a:	4618      	mov	r0, r3
 800790c:	3710      	adds	r7, #16
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8007912:	b580      	push	{r7, lr}
 8007914:	b086      	sub	sp, #24
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
 800791a:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	2200      	movs	r2, #0
 8007920:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	69db      	ldr	r3, [r3, #28]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d04f      	beq.n	80079ca <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800792a:	2300      	movs	r3, #0
 800792c:	613b      	str	r3, [r7, #16]
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8007932:	e022      	b.n	800797a <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6a1a      	ldr	r2, [r3, #32]
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	1c59      	adds	r1, r3, #1
 800793c:	6179      	str	r1, [r7, #20]
 800793e:	4413      	add	r3, r2
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8007944:	7bfb      	ldrb	r3, [r7, #15]
 8007946:	2b20      	cmp	r3, #32
 8007948:	d016      	beq.n	8007978 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800794a:	7bfb      	ldrb	r3, [r7, #15]
 800794c:	2b05      	cmp	r3, #5
 800794e:	d101      	bne.n	8007954 <get_fileinfo+0x42>
 8007950:	23e5      	movs	r3, #229	@ 0xe5
 8007952:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	2b09      	cmp	r3, #9
 8007958:	d106      	bne.n	8007968 <get_fileinfo+0x56>
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	1c5a      	adds	r2, r3, #1
 800795e:	613a      	str	r2, [r7, #16]
 8007960:	683a      	ldr	r2, [r7, #0]
 8007962:	4413      	add	r3, r2
 8007964:	222e      	movs	r2, #46	@ 0x2e
 8007966:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	1c5a      	adds	r2, r3, #1
 800796c:	613a      	str	r2, [r7, #16]
 800796e:	683a      	ldr	r2, [r7, #0]
 8007970:	4413      	add	r3, r2
 8007972:	7bfa      	ldrb	r2, [r7, #15]
 8007974:	725a      	strb	r2, [r3, #9]
 8007976:	e000      	b.n	800797a <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 8007978:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	2b0a      	cmp	r3, #10
 800797e:	d9d9      	bls.n	8007934 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8007980:	683a      	ldr	r2, [r7, #0]
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	4413      	add	r3, r2
 8007986:	3309      	adds	r3, #9
 8007988:	2200      	movs	r2, #0
 800798a:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6a1b      	ldr	r3, [r3, #32]
 8007990:	7ada      	ldrb	r2, [r3, #11]
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a1b      	ldr	r3, [r3, #32]
 800799a:	331c      	adds	r3, #28
 800799c:	4618      	mov	r0, r3
 800799e:	f7fe fef9 	bl	8006794 <ld_dword>
 80079a2:	4602      	mov	r2, r0
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6a1b      	ldr	r3, [r3, #32]
 80079ac:	3316      	adds	r3, #22
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7fe fef0 	bl	8006794 <ld_dword>
 80079b4:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	b29a      	uxth	r2, r3
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	80da      	strh	r2, [r3, #6]
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	0c1b      	lsrs	r3, r3, #16
 80079c2:	b29a      	uxth	r2, r3
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	809a      	strh	r2, [r3, #4]
 80079c8:	e000      	b.n	80079cc <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80079ca:	bf00      	nop
}
 80079cc:	3718      	adds	r7, #24
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
	...

080079d4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b088      	sub	sp, #32
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	60fb      	str	r3, [r7, #12]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	3324      	adds	r3, #36	@ 0x24
 80079e8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80079ea:	220b      	movs	r2, #11
 80079ec:	2120      	movs	r1, #32
 80079ee:	68b8      	ldr	r0, [r7, #8]
 80079f0:	f7fe ff5b 	bl	80068aa <mem_set>
	si = i = 0; ni = 8;
 80079f4:	2300      	movs	r3, #0
 80079f6:	613b      	str	r3, [r7, #16]
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	61fb      	str	r3, [r7, #28]
 80079fc:	2308      	movs	r3, #8
 80079fe:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	1c5a      	adds	r2, r3, #1
 8007a04:	61fa      	str	r2, [r7, #28]
 8007a06:	68fa      	ldr	r2, [r7, #12]
 8007a08:	4413      	add	r3, r2
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007a0e:	7efb      	ldrb	r3, [r7, #27]
 8007a10:	2b20      	cmp	r3, #32
 8007a12:	d94e      	bls.n	8007ab2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007a14:	7efb      	ldrb	r3, [r7, #27]
 8007a16:	2b2f      	cmp	r3, #47	@ 0x2f
 8007a18:	d006      	beq.n	8007a28 <create_name+0x54>
 8007a1a:	7efb      	ldrb	r3, [r7, #27]
 8007a1c:	2b5c      	cmp	r3, #92	@ 0x5c
 8007a1e:	d110      	bne.n	8007a42 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007a20:	e002      	b.n	8007a28 <create_name+0x54>
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	3301      	adds	r3, #1
 8007a26:	61fb      	str	r3, [r7, #28]
 8007a28:	68fa      	ldr	r2, [r7, #12]
 8007a2a:	69fb      	ldr	r3, [r7, #28]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	2b2f      	cmp	r3, #47	@ 0x2f
 8007a32:	d0f6      	beq.n	8007a22 <create_name+0x4e>
 8007a34:	68fa      	ldr	r2, [r7, #12]
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	4413      	add	r3, r2
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	2b5c      	cmp	r3, #92	@ 0x5c
 8007a3e:	d0f0      	beq.n	8007a22 <create_name+0x4e>
			break;
 8007a40:	e038      	b.n	8007ab4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007a42:	7efb      	ldrb	r3, [r7, #27]
 8007a44:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a46:	d003      	beq.n	8007a50 <create_name+0x7c>
 8007a48:	693a      	ldr	r2, [r7, #16]
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d30c      	bcc.n	8007a6a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	2b0b      	cmp	r3, #11
 8007a54:	d002      	beq.n	8007a5c <create_name+0x88>
 8007a56:	7efb      	ldrb	r3, [r7, #27]
 8007a58:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a5a:	d001      	beq.n	8007a60 <create_name+0x8c>
 8007a5c:	2306      	movs	r3, #6
 8007a5e:	e044      	b.n	8007aea <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007a60:	2308      	movs	r3, #8
 8007a62:	613b      	str	r3, [r7, #16]
 8007a64:	230b      	movs	r3, #11
 8007a66:	617b      	str	r3, [r7, #20]
			continue;
 8007a68:	e022      	b.n	8007ab0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007a6a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	da04      	bge.n	8007a7c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007a72:	7efb      	ldrb	r3, [r7, #27]
 8007a74:	3b80      	subs	r3, #128	@ 0x80
 8007a76:	4a1f      	ldr	r2, [pc, #124]	@ (8007af4 <create_name+0x120>)
 8007a78:	5cd3      	ldrb	r3, [r2, r3]
 8007a7a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007a7c:	7efb      	ldrb	r3, [r7, #27]
 8007a7e:	4619      	mov	r1, r3
 8007a80:	481d      	ldr	r0, [pc, #116]	@ (8007af8 <create_name+0x124>)
 8007a82:	f7fe ff54 	bl	800692e <chk_chr>
 8007a86:	4603      	mov	r3, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d001      	beq.n	8007a90 <create_name+0xbc>
 8007a8c:	2306      	movs	r3, #6
 8007a8e:	e02c      	b.n	8007aea <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007a90:	7efb      	ldrb	r3, [r7, #27]
 8007a92:	2b60      	cmp	r3, #96	@ 0x60
 8007a94:	d905      	bls.n	8007aa2 <create_name+0xce>
 8007a96:	7efb      	ldrb	r3, [r7, #27]
 8007a98:	2b7a      	cmp	r3, #122	@ 0x7a
 8007a9a:	d802      	bhi.n	8007aa2 <create_name+0xce>
 8007a9c:	7efb      	ldrb	r3, [r7, #27]
 8007a9e:	3b20      	subs	r3, #32
 8007aa0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	1c5a      	adds	r2, r3, #1
 8007aa6:	613a      	str	r2, [r7, #16]
 8007aa8:	68ba      	ldr	r2, [r7, #8]
 8007aaa:	4413      	add	r3, r2
 8007aac:	7efa      	ldrb	r2, [r7, #27]
 8007aae:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007ab0:	e7a6      	b.n	8007a00 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007ab2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	441a      	add	r2, r3
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d101      	bne.n	8007ac8 <create_name+0xf4>
 8007ac4:	2306      	movs	r3, #6
 8007ac6:	e010      	b.n	8007aea <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	2be5      	cmp	r3, #229	@ 0xe5
 8007ace:	d102      	bne.n	8007ad6 <create_name+0x102>
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	2205      	movs	r2, #5
 8007ad4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007ad6:	7efb      	ldrb	r3, [r7, #27]
 8007ad8:	2b20      	cmp	r3, #32
 8007ada:	d801      	bhi.n	8007ae0 <create_name+0x10c>
 8007adc:	2204      	movs	r2, #4
 8007ade:	e000      	b.n	8007ae2 <create_name+0x10e>
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	330b      	adds	r3, #11
 8007ae6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007ae8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3720      	adds	r7, #32
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	08009664 	.word	0x08009664
 8007af8:	080095f4 	.word	0x080095f4

08007afc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b086      	sub	sp, #24
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007b10:	e002      	b.n	8007b18 <follow_path+0x1c>
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	3301      	adds	r3, #1
 8007b16:	603b      	str	r3, [r7, #0]
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	2b2f      	cmp	r3, #47	@ 0x2f
 8007b1e:	d0f8      	beq.n	8007b12 <follow_path+0x16>
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	2b5c      	cmp	r3, #92	@ 0x5c
 8007b26:	d0f4      	beq.n	8007b12 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	2b1f      	cmp	r3, #31
 8007b34:	d80a      	bhi.n	8007b4c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2280      	movs	r2, #128	@ 0x80
 8007b3a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8007b3e:	2100      	movs	r1, #0
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f7ff fc3c 	bl	80073be <dir_sdi>
 8007b46:	4603      	mov	r3, r0
 8007b48:	75fb      	strb	r3, [r7, #23]
 8007b4a:	e043      	b.n	8007bd4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007b4c:	463b      	mov	r3, r7
 8007b4e:	4619      	mov	r1, r3
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f7ff ff3f 	bl	80079d4 <create_name>
 8007b56:	4603      	mov	r3, r0
 8007b58:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007b5a:	7dfb      	ldrb	r3, [r7, #23]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d134      	bne.n	8007bca <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f7ff fe4f 	bl	8007804 <dir_find>
 8007b66:	4603      	mov	r3, r0
 8007b68:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007b70:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007b72:	7dfb      	ldrb	r3, [r7, #23]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d00a      	beq.n	8007b8e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007b78:	7dfb      	ldrb	r3, [r7, #23]
 8007b7a:	2b04      	cmp	r3, #4
 8007b7c:	d127      	bne.n	8007bce <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007b7e:	7afb      	ldrb	r3, [r7, #11]
 8007b80:	f003 0304 	and.w	r3, r3, #4
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d122      	bne.n	8007bce <follow_path+0xd2>
 8007b88:	2305      	movs	r3, #5
 8007b8a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007b8c:	e01f      	b.n	8007bce <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007b8e:	7afb      	ldrb	r3, [r7, #11]
 8007b90:	f003 0304 	and.w	r3, r3, #4
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d11c      	bne.n	8007bd2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	799b      	ldrb	r3, [r3, #6]
 8007b9c:	f003 0310 	and.w	r3, r3, #16
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d102      	bne.n	8007baa <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007ba4:	2305      	movs	r3, #5
 8007ba6:	75fb      	strb	r3, [r7, #23]
 8007ba8:	e014      	b.n	8007bd4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	695b      	ldr	r3, [r3, #20]
 8007bb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bb8:	4413      	add	r3, r2
 8007bba:	4619      	mov	r1, r3
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f7ff fd85 	bl	80076cc <ld_clust>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007bc8:	e7c0      	b.n	8007b4c <follow_path+0x50>
			if (res != FR_OK) break;
 8007bca:	bf00      	nop
 8007bcc:	e002      	b.n	8007bd4 <follow_path+0xd8>
				break;
 8007bce:	bf00      	nop
 8007bd0:	e000      	b.n	8007bd4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007bd2:	bf00      	nop
			}
		}
	}

	return res;
 8007bd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3718      	adds	r7, #24
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}

08007bde <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007bde:	b480      	push	{r7}
 8007be0:	b087      	sub	sp, #28
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007be6:	f04f 33ff 	mov.w	r3, #4294967295
 8007bea:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d031      	beq.n	8007c58 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	617b      	str	r3, [r7, #20]
 8007bfa:	e002      	b.n	8007c02 <get_ldnumber+0x24>
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	3301      	adds	r3, #1
 8007c00:	617b      	str	r3, [r7, #20]
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	2b20      	cmp	r3, #32
 8007c08:	d903      	bls.n	8007c12 <get_ldnumber+0x34>
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	2b3a      	cmp	r3, #58	@ 0x3a
 8007c10:	d1f4      	bne.n	8007bfc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	2b3a      	cmp	r3, #58	@ 0x3a
 8007c18:	d11c      	bne.n	8007c54 <get_ldnumber+0x76>
			tp = *path;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	1c5a      	adds	r2, r3, #1
 8007c24:	60fa      	str	r2, [r7, #12]
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	3b30      	subs	r3, #48	@ 0x30
 8007c2a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	2b09      	cmp	r3, #9
 8007c30:	d80e      	bhi.n	8007c50 <get_ldnumber+0x72>
 8007c32:	68fa      	ldr	r2, [r7, #12]
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d10a      	bne.n	8007c50 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d107      	bne.n	8007c50 <get_ldnumber+0x72>
					vol = (int)i;
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	3301      	adds	r3, #1
 8007c48:	617b      	str	r3, [r7, #20]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	697a      	ldr	r2, [r7, #20]
 8007c4e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	e002      	b.n	8007c5a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007c54:	2300      	movs	r3, #0
 8007c56:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007c58:	693b      	ldr	r3, [r7, #16]
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	371c      	adds	r7, #28
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr
	...

08007c68 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	70da      	strb	r2, [r3, #3]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c7e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007c80:	6839      	ldr	r1, [r7, #0]
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f7ff f81e 	bl	8006cc4 <move_window>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d001      	beq.n	8007c92 <check_fs+0x2a>
 8007c8e:	2304      	movs	r3, #4
 8007c90:	e038      	b.n	8007d04 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	3330      	adds	r3, #48	@ 0x30
 8007c96:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f7fe fd62 	bl	8006764 <ld_word>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d001      	beq.n	8007cb0 <check_fs+0x48>
 8007cac:	2303      	movs	r3, #3
 8007cae:	e029      	b.n	8007d04 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007cb6:	2be9      	cmp	r3, #233	@ 0xe9
 8007cb8:	d009      	beq.n	8007cce <check_fs+0x66>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007cc0:	2beb      	cmp	r3, #235	@ 0xeb
 8007cc2:	d11e      	bne.n	8007d02 <check_fs+0x9a>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007cca:	2b90      	cmp	r3, #144	@ 0x90
 8007ccc:	d119      	bne.n	8007d02 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	3330      	adds	r3, #48	@ 0x30
 8007cd2:	3336      	adds	r3, #54	@ 0x36
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f7fe fd5d 	bl	8006794 <ld_dword>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007ce0:	4a0a      	ldr	r2, [pc, #40]	@ (8007d0c <check_fs+0xa4>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d101      	bne.n	8007cea <check_fs+0x82>
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	e00c      	b.n	8007d04 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	3330      	adds	r3, #48	@ 0x30
 8007cee:	3352      	adds	r3, #82	@ 0x52
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7fe fd4f 	bl	8006794 <ld_dword>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	4a05      	ldr	r2, [pc, #20]	@ (8007d10 <check_fs+0xa8>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d101      	bne.n	8007d02 <check_fs+0x9a>
 8007cfe:	2300      	movs	r3, #0
 8007d00:	e000      	b.n	8007d04 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007d02:	2302      	movs	r3, #2
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3708      	adds	r7, #8
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}
 8007d0c:	00544146 	.word	0x00544146
 8007d10:	33544146 	.word	0x33544146

08007d14 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b096      	sub	sp, #88	@ 0x58
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	60f8      	str	r0, [r7, #12]
 8007d1c:	60b9      	str	r1, [r7, #8]
 8007d1e:	4613      	mov	r3, r2
 8007d20:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	2200      	movs	r2, #0
 8007d26:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007d28:	68f8      	ldr	r0, [r7, #12]
 8007d2a:	f7ff ff58 	bl	8007bde <get_ldnumber>
 8007d2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007d30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	da01      	bge.n	8007d3a <find_volume+0x26>
 8007d36:	230b      	movs	r3, #11
 8007d38:	e22d      	b.n	8008196 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007d3a:	4aa1      	ldr	r2, [pc, #644]	@ (8007fc0 <find_volume+0x2ac>)
 8007d3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d42:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d101      	bne.n	8007d4e <find_volume+0x3a>
 8007d4a:	230c      	movs	r3, #12
 8007d4c:	e223      	b.n	8008196 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d52:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007d54:	79fb      	ldrb	r3, [r7, #7]
 8007d56:	f023 0301 	bic.w	r3, r3, #1
 8007d5a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d01a      	beq.n	8007d9a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d66:	785b      	ldrb	r3, [r3, #1]
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f7fe fc5d 	bl	8006628 <disk_status>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007d74:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007d78:	f003 0301 	and.w	r3, r3, #1
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d10c      	bne.n	8007d9a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007d80:	79fb      	ldrb	r3, [r7, #7]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d007      	beq.n	8007d96 <find_volume+0x82>
 8007d86:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007d8a:	f003 0304 	and.w	r3, r3, #4
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d001      	beq.n	8007d96 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007d92:	230a      	movs	r3, #10
 8007d94:	e1ff      	b.n	8008196 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8007d96:	2300      	movs	r3, #0
 8007d98:	e1fd      	b.n	8008196 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007da0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007da2:	b2da      	uxtb	r2, r3
 8007da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007da6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007daa:	785b      	ldrb	r3, [r3, #1]
 8007dac:	4618      	mov	r0, r3
 8007dae:	f7fe fc55 	bl	800665c <disk_initialize>
 8007db2:	4603      	mov	r3, r0
 8007db4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007db8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007dbc:	f003 0301 	and.w	r3, r3, #1
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d001      	beq.n	8007dc8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007dc4:	2303      	movs	r3, #3
 8007dc6:	e1e6      	b.n	8008196 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007dc8:	79fb      	ldrb	r3, [r7, #7]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d007      	beq.n	8007dde <find_volume+0xca>
 8007dce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007dd2:	f003 0304 	and.w	r3, r3, #4
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d001      	beq.n	8007dde <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007dda:	230a      	movs	r3, #10
 8007ddc:	e1db      	b.n	8008196 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007dde:	2300      	movs	r3, #0
 8007de0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007de2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007de4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007de6:	f7ff ff3f 	bl	8007c68 <check_fs>
 8007dea:	4603      	mov	r3, r0
 8007dec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007df0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	d149      	bne.n	8007e8c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007df8:	2300      	movs	r3, #0
 8007dfa:	643b      	str	r3, [r7, #64]	@ 0x40
 8007dfc:	e01e      	b.n	8007e3c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e00:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007e04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e06:	011b      	lsls	r3, r3, #4
 8007e08:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8007e0c:	4413      	add	r3, r2
 8007e0e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e12:	3304      	adds	r3, #4
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d006      	beq.n	8007e28 <find_volume+0x114>
 8007e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e1c:	3308      	adds	r3, #8
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7fe fcb8 	bl	8006794 <ld_dword>
 8007e24:	4602      	mov	r2, r0
 8007e26:	e000      	b.n	8007e2a <find_volume+0x116>
 8007e28:	2200      	movs	r2, #0
 8007e2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	3358      	adds	r3, #88	@ 0x58
 8007e30:	443b      	add	r3, r7
 8007e32:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007e36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e38:	3301      	adds	r3, #1
 8007e3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e3e:	2b03      	cmp	r3, #3
 8007e40:	d9dd      	bls.n	8007dfe <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007e42:	2300      	movs	r3, #0
 8007e44:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8007e46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d002      	beq.n	8007e52 <find_volume+0x13e>
 8007e4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e4e:	3b01      	subs	r3, #1
 8007e50:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007e52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	3358      	adds	r3, #88	@ 0x58
 8007e58:	443b      	add	r3, r7
 8007e5a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007e5e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007e60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d005      	beq.n	8007e72 <find_volume+0x15e>
 8007e66:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007e68:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007e6a:	f7ff fefd 	bl	8007c68 <check_fs>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	e000      	b.n	8007e74 <find_volume+0x160>
 8007e72:	2303      	movs	r3, #3
 8007e74:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007e78:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d905      	bls.n	8007e8c <find_volume+0x178>
 8007e80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e82:	3301      	adds	r3, #1
 8007e84:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e88:	2b03      	cmp	r3, #3
 8007e8a:	d9e2      	bls.n	8007e52 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007e8c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007e90:	2b04      	cmp	r3, #4
 8007e92:	d101      	bne.n	8007e98 <find_volume+0x184>
 8007e94:	2301      	movs	r3, #1
 8007e96:	e17e      	b.n	8008196 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007e98:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d901      	bls.n	8007ea4 <find_volume+0x190>
 8007ea0:	230d      	movs	r3, #13
 8007ea2:	e178      	b.n	8008196 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ea6:	3330      	adds	r3, #48	@ 0x30
 8007ea8:	330b      	adds	r3, #11
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7fe fc5a 	bl	8006764 <ld_word>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007eb6:	d001      	beq.n	8007ebc <find_volume+0x1a8>
 8007eb8:	230d      	movs	r3, #13
 8007eba:	e16c      	b.n	8008196 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ebe:	3330      	adds	r3, #48	@ 0x30
 8007ec0:	3316      	adds	r3, #22
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7fe fc4e 	bl	8006764 <ld_word>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007ecc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d106      	bne.n	8007ee0 <find_volume+0x1cc>
 8007ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ed4:	3330      	adds	r3, #48	@ 0x30
 8007ed6:	3324      	adds	r3, #36	@ 0x24
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f7fe fc5b 	bl	8006794 <ld_dword>
 8007ede:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8007ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ee2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007ee4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ee8:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8007eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eee:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ef2:	789b      	ldrb	r3, [r3, #2]
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d005      	beq.n	8007f04 <find_volume+0x1f0>
 8007ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007efa:	789b      	ldrb	r3, [r3, #2]
 8007efc:	2b02      	cmp	r3, #2
 8007efe:	d001      	beq.n	8007f04 <find_volume+0x1f0>
 8007f00:	230d      	movs	r3, #13
 8007f02:	e148      	b.n	8008196 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f06:	789b      	ldrb	r3, [r3, #2]
 8007f08:	461a      	mov	r2, r3
 8007f0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f0c:	fb02 f303 	mul.w	r3, r2, r3
 8007f10:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f18:	461a      	mov	r2, r3
 8007f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f1c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f20:	895b      	ldrh	r3, [r3, #10]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d008      	beq.n	8007f38 <find_volume+0x224>
 8007f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f28:	895b      	ldrh	r3, [r3, #10]
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f2e:	895b      	ldrh	r3, [r3, #10]
 8007f30:	3b01      	subs	r3, #1
 8007f32:	4013      	ands	r3, r2
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d001      	beq.n	8007f3c <find_volume+0x228>
 8007f38:	230d      	movs	r3, #13
 8007f3a:	e12c      	b.n	8008196 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f3e:	3330      	adds	r3, #48	@ 0x30
 8007f40:	3311      	adds	r3, #17
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7fe fc0e 	bl	8006764 <ld_word>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f4e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f52:	891b      	ldrh	r3, [r3, #8]
 8007f54:	f003 030f 	and.w	r3, r3, #15
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d001      	beq.n	8007f62 <find_volume+0x24e>
 8007f5e:	230d      	movs	r3, #13
 8007f60:	e119      	b.n	8008196 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f64:	3330      	adds	r3, #48	@ 0x30
 8007f66:	3313      	adds	r3, #19
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f7fe fbfb 	bl	8006764 <ld_word>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007f72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d106      	bne.n	8007f86 <find_volume+0x272>
 8007f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f7a:	3330      	adds	r3, #48	@ 0x30
 8007f7c:	3320      	adds	r3, #32
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7fe fc08 	bl	8006794 <ld_dword>
 8007f84:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f88:	3330      	adds	r3, #48	@ 0x30
 8007f8a:	330e      	adds	r3, #14
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f7fe fbe9 	bl	8006764 <ld_word>
 8007f92:	4603      	mov	r3, r0
 8007f94:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007f96:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d101      	bne.n	8007fa0 <find_volume+0x28c>
 8007f9c:	230d      	movs	r3, #13
 8007f9e:	e0fa      	b.n	8008196 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007fa0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007fa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fa4:	4413      	add	r3, r2
 8007fa6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007fa8:	8912      	ldrh	r2, [r2, #8]
 8007faa:	0912      	lsrs	r2, r2, #4
 8007fac:	b292      	uxth	r2, r2
 8007fae:	4413      	add	r3, r2
 8007fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007fb2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d204      	bcs.n	8007fc4 <find_volume+0x2b0>
 8007fba:	230d      	movs	r3, #13
 8007fbc:	e0eb      	b.n	8008196 <find_volume+0x482>
 8007fbe:	bf00      	nop
 8007fc0:	20000524 	.word	0x20000524
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007fc4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fc8:	1ad3      	subs	r3, r2, r3
 8007fca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007fcc:	8952      	ldrh	r2, [r2, #10]
 8007fce:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fd2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d101      	bne.n	8007fde <find_volume+0x2ca>
 8007fda:	230d      	movs	r3, #13
 8007fdc:	e0db      	b.n	8008196 <find_volume+0x482>
		fmt = FS_FAT32;
 8007fde:	2303      	movs	r3, #3
 8007fe0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d802      	bhi.n	8007ff4 <find_volume+0x2e0>
 8007fee:	2302      	movs	r3, #2
 8007ff0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d802      	bhi.n	8008004 <find_volume+0x2f0>
 8007ffe:	2301      	movs	r3, #1
 8008000:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008006:	1c9a      	adds	r2, r3, #2
 8008008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800800a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800800c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800800e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008010:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008012:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008014:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008016:	441a      	add	r2, r3
 8008018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800801a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800801c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800801e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008020:	441a      	add	r2, r3
 8008022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008024:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8008026:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800802a:	2b03      	cmp	r3, #3
 800802c:	d11e      	bne.n	800806c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800802e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008030:	3330      	adds	r3, #48	@ 0x30
 8008032:	332a      	adds	r3, #42	@ 0x2a
 8008034:	4618      	mov	r0, r3
 8008036:	f7fe fb95 	bl	8006764 <ld_word>
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d001      	beq.n	8008044 <find_volume+0x330>
 8008040:	230d      	movs	r3, #13
 8008042:	e0a8      	b.n	8008196 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008046:	891b      	ldrh	r3, [r3, #8]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d001      	beq.n	8008050 <find_volume+0x33c>
 800804c:	230d      	movs	r3, #13
 800804e:	e0a2      	b.n	8008196 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008052:	3330      	adds	r3, #48	@ 0x30
 8008054:	332c      	adds	r3, #44	@ 0x2c
 8008056:	4618      	mov	r0, r3
 8008058:	f7fe fb9c 	bl	8006794 <ld_dword>
 800805c:	4602      	mov	r2, r0
 800805e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008060:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008064:	695b      	ldr	r3, [r3, #20]
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	647b      	str	r3, [r7, #68]	@ 0x44
 800806a:	e01f      	b.n	80080ac <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800806c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800806e:	891b      	ldrh	r3, [r3, #8]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d101      	bne.n	8008078 <find_volume+0x364>
 8008074:	230d      	movs	r3, #13
 8008076:	e08e      	b.n	8008196 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800807a:	6a1a      	ldr	r2, [r3, #32]
 800807c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800807e:	441a      	add	r2, r3
 8008080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008082:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008084:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008088:	2b02      	cmp	r3, #2
 800808a:	d103      	bne.n	8008094 <find_volume+0x380>
 800808c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800808e:	695b      	ldr	r3, [r3, #20]
 8008090:	005b      	lsls	r3, r3, #1
 8008092:	e00a      	b.n	80080aa <find_volume+0x396>
 8008094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008096:	695a      	ldr	r2, [r3, #20]
 8008098:	4613      	mov	r3, r2
 800809a:	005b      	lsls	r3, r3, #1
 800809c:	4413      	add	r3, r2
 800809e:	085a      	lsrs	r2, r3, #1
 80080a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080a2:	695b      	ldr	r3, [r3, #20]
 80080a4:	f003 0301 	and.w	r3, r3, #1
 80080a8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80080aa:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80080ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ae:	699a      	ldr	r2, [r3, #24]
 80080b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080b2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80080b6:	0a5b      	lsrs	r3, r3, #9
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d201      	bcs.n	80080c0 <find_volume+0x3ac>
 80080bc:	230d      	movs	r3, #13
 80080be:	e06a      	b.n	8008196 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80080c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080c2:	f04f 32ff 	mov.w	r2, #4294967295
 80080c6:	611a      	str	r2, [r3, #16]
 80080c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ca:	691a      	ldr	r2, [r3, #16]
 80080cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ce:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80080d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080d2:	2280      	movs	r2, #128	@ 0x80
 80080d4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80080d6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80080da:	2b03      	cmp	r3, #3
 80080dc:	d149      	bne.n	8008172 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80080de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080e0:	3330      	adds	r3, #48	@ 0x30
 80080e2:	3330      	adds	r3, #48	@ 0x30
 80080e4:	4618      	mov	r0, r3
 80080e6:	f7fe fb3d 	bl	8006764 <ld_word>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d140      	bne.n	8008172 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80080f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080f2:	3301      	adds	r3, #1
 80080f4:	4619      	mov	r1, r3
 80080f6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80080f8:	f7fe fde4 	bl	8006cc4 <move_window>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d137      	bne.n	8008172 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8008102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008104:	2200      	movs	r2, #0
 8008106:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800810a:	3330      	adds	r3, #48	@ 0x30
 800810c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008110:	4618      	mov	r0, r3
 8008112:	f7fe fb27 	bl	8006764 <ld_word>
 8008116:	4603      	mov	r3, r0
 8008118:	461a      	mov	r2, r3
 800811a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800811e:	429a      	cmp	r2, r3
 8008120:	d127      	bne.n	8008172 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008124:	3330      	adds	r3, #48	@ 0x30
 8008126:	4618      	mov	r0, r3
 8008128:	f7fe fb34 	bl	8006794 <ld_dword>
 800812c:	4603      	mov	r3, r0
 800812e:	4a1c      	ldr	r2, [pc, #112]	@ (80081a0 <find_volume+0x48c>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d11e      	bne.n	8008172 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008136:	3330      	adds	r3, #48	@ 0x30
 8008138:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800813c:	4618      	mov	r0, r3
 800813e:	f7fe fb29 	bl	8006794 <ld_dword>
 8008142:	4603      	mov	r3, r0
 8008144:	4a17      	ldr	r2, [pc, #92]	@ (80081a4 <find_volume+0x490>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d113      	bne.n	8008172 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800814a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800814c:	3330      	adds	r3, #48	@ 0x30
 800814e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8008152:	4618      	mov	r0, r3
 8008154:	f7fe fb1e 	bl	8006794 <ld_dword>
 8008158:	4602      	mov	r2, r0
 800815a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800815c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800815e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008160:	3330      	adds	r3, #48	@ 0x30
 8008162:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8008166:	4618      	mov	r0, r3
 8008168:	f7fe fb14 	bl	8006794 <ld_dword>
 800816c:	4602      	mov	r2, r0
 800816e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008170:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008174:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8008178:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800817a:	4b0b      	ldr	r3, [pc, #44]	@ (80081a8 <find_volume+0x494>)
 800817c:	881b      	ldrh	r3, [r3, #0]
 800817e:	3301      	adds	r3, #1
 8008180:	b29a      	uxth	r2, r3
 8008182:	4b09      	ldr	r3, [pc, #36]	@ (80081a8 <find_volume+0x494>)
 8008184:	801a      	strh	r2, [r3, #0]
 8008186:	4b08      	ldr	r3, [pc, #32]	@ (80081a8 <find_volume+0x494>)
 8008188:	881a      	ldrh	r2, [r3, #0]
 800818a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800818c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800818e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008190:	f7fe fd30 	bl	8006bf4 <clear_lock>
#endif
	return FR_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	3758      	adds	r7, #88	@ 0x58
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	41615252 	.word	0x41615252
 80081a4:	61417272 	.word	0x61417272
 80081a8:	20000528 	.word	0x20000528

080081ac <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80081b6:	2309      	movs	r3, #9
 80081b8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d01c      	beq.n	80081fa <validate+0x4e>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d018      	beq.n	80081fa <validate+0x4e>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d013      	beq.n	80081fa <validate+0x4e>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	889a      	ldrh	r2, [r3, #4]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	88db      	ldrh	r3, [r3, #6]
 80081dc:	429a      	cmp	r2, r3
 80081de:	d10c      	bne.n	80081fa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	785b      	ldrb	r3, [r3, #1]
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7fe fa1e 	bl	8006628 <disk_status>
 80081ec:	4603      	mov	r3, r0
 80081ee:	f003 0301 	and.w	r3, r3, #1
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d101      	bne.n	80081fa <validate+0x4e>
			res = FR_OK;
 80081f6:	2300      	movs	r3, #0
 80081f8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80081fa:	7bfb      	ldrb	r3, [r7, #15]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d102      	bne.n	8008206 <validate+0x5a>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	e000      	b.n	8008208 <validate+0x5c>
 8008206:	2300      	movs	r3, #0
 8008208:	683a      	ldr	r2, [r7, #0]
 800820a:	6013      	str	r3, [r2, #0]
	return res;
 800820c:	7bfb      	ldrb	r3, [r7, #15]
}
 800820e:	4618      	mov	r0, r3
 8008210:	3710      	adds	r7, #16
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
	...

08008218 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b088      	sub	sp, #32
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	4613      	mov	r3, r2
 8008224:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800822a:	f107 0310 	add.w	r3, r7, #16
 800822e:	4618      	mov	r0, r3
 8008230:	f7ff fcd5 	bl	8007bde <get_ldnumber>
 8008234:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008236:	69fb      	ldr	r3, [r7, #28]
 8008238:	2b00      	cmp	r3, #0
 800823a:	da01      	bge.n	8008240 <f_mount+0x28>
 800823c:	230b      	movs	r3, #11
 800823e:	e02b      	b.n	8008298 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008240:	4a17      	ldr	r2, [pc, #92]	@ (80082a0 <f_mount+0x88>)
 8008242:	69fb      	ldr	r3, [r7, #28]
 8008244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008248:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800824a:	69bb      	ldr	r3, [r7, #24]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d005      	beq.n	800825c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008250:	69b8      	ldr	r0, [r7, #24]
 8008252:	f7fe fccf 	bl	8006bf4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008256:	69bb      	ldr	r3, [r7, #24]
 8008258:	2200      	movs	r2, #0
 800825a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d002      	beq.n	8008268 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2200      	movs	r2, #0
 8008266:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008268:	68fa      	ldr	r2, [r7, #12]
 800826a:	490d      	ldr	r1, [pc, #52]	@ (80082a0 <f_mount+0x88>)
 800826c:	69fb      	ldr	r3, [r7, #28]
 800826e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d002      	beq.n	800827e <f_mount+0x66>
 8008278:	79fb      	ldrb	r3, [r7, #7]
 800827a:	2b01      	cmp	r3, #1
 800827c:	d001      	beq.n	8008282 <f_mount+0x6a>
 800827e:	2300      	movs	r3, #0
 8008280:	e00a      	b.n	8008298 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008282:	f107 010c 	add.w	r1, r7, #12
 8008286:	f107 0308 	add.w	r3, r7, #8
 800828a:	2200      	movs	r2, #0
 800828c:	4618      	mov	r0, r3
 800828e:	f7ff fd41 	bl	8007d14 <find_volume>
 8008292:	4603      	mov	r3, r0
 8008294:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008296:	7dfb      	ldrb	r3, [r7, #23]
}
 8008298:	4618      	mov	r0, r3
 800829a:	3720      	adds	r7, #32
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	20000524 	.word	0x20000524

080082a4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b098      	sub	sp, #96	@ 0x60
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	60b9      	str	r1, [r7, #8]
 80082ae:	4613      	mov	r3, r2
 80082b0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d101      	bne.n	80082bc <f_open+0x18>
 80082b8:	2309      	movs	r3, #9
 80082ba:	e1a9      	b.n	8008610 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80082bc:	79fb      	ldrb	r3, [r7, #7]
 80082be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80082c2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80082c4:	79fa      	ldrb	r2, [r7, #7]
 80082c6:	f107 0110 	add.w	r1, r7, #16
 80082ca:	f107 0308 	add.w	r3, r7, #8
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7ff fd20 	bl	8007d14 <find_volume>
 80082d4:	4603      	mov	r3, r0
 80082d6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 80082da:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80082de:	2b00      	cmp	r3, #0
 80082e0:	f040 818d 	bne.w	80085fe <f_open+0x35a>
		dj.obj.fs = fs;
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80082e8:	68ba      	ldr	r2, [r7, #8]
 80082ea:	f107 0314 	add.w	r3, r7, #20
 80082ee:	4611      	mov	r1, r2
 80082f0:	4618      	mov	r0, r3
 80082f2:	f7ff fc03 	bl	8007afc <follow_path>
 80082f6:	4603      	mov	r3, r0
 80082f8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80082fc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008300:	2b00      	cmp	r3, #0
 8008302:	d118      	bne.n	8008336 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008304:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008308:	b25b      	sxtb	r3, r3
 800830a:	2b00      	cmp	r3, #0
 800830c:	da03      	bge.n	8008316 <f_open+0x72>
				res = FR_INVALID_NAME;
 800830e:	2306      	movs	r3, #6
 8008310:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008314:	e00f      	b.n	8008336 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008316:	79fb      	ldrb	r3, [r7, #7]
 8008318:	2b01      	cmp	r3, #1
 800831a:	bf8c      	ite	hi
 800831c:	2301      	movhi	r3, #1
 800831e:	2300      	movls	r3, #0
 8008320:	b2db      	uxtb	r3, r3
 8008322:	461a      	mov	r2, r3
 8008324:	f107 0314 	add.w	r3, r7, #20
 8008328:	4611      	mov	r1, r2
 800832a:	4618      	mov	r0, r3
 800832c:	f7fe fb1a 	bl	8006964 <chk_lock>
 8008330:	4603      	mov	r3, r0
 8008332:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008336:	79fb      	ldrb	r3, [r7, #7]
 8008338:	f003 031c 	and.w	r3, r3, #28
 800833c:	2b00      	cmp	r3, #0
 800833e:	d07f      	beq.n	8008440 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8008340:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008344:	2b00      	cmp	r3, #0
 8008346:	d017      	beq.n	8008378 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008348:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800834c:	2b04      	cmp	r3, #4
 800834e:	d10e      	bne.n	800836e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008350:	f7fe fb64 	bl	8006a1c <enq_lock>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d006      	beq.n	8008368 <f_open+0xc4>
 800835a:	f107 0314 	add.w	r3, r7, #20
 800835e:	4618      	mov	r0, r3
 8008360:	f7ff faa5 	bl	80078ae <dir_register>
 8008364:	4603      	mov	r3, r0
 8008366:	e000      	b.n	800836a <f_open+0xc6>
 8008368:	2312      	movs	r3, #18
 800836a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800836e:	79fb      	ldrb	r3, [r7, #7]
 8008370:	f043 0308 	orr.w	r3, r3, #8
 8008374:	71fb      	strb	r3, [r7, #7]
 8008376:	e010      	b.n	800839a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008378:	7ebb      	ldrb	r3, [r7, #26]
 800837a:	f003 0311 	and.w	r3, r3, #17
 800837e:	2b00      	cmp	r3, #0
 8008380:	d003      	beq.n	800838a <f_open+0xe6>
					res = FR_DENIED;
 8008382:	2307      	movs	r3, #7
 8008384:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008388:	e007      	b.n	800839a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800838a:	79fb      	ldrb	r3, [r7, #7]
 800838c:	f003 0304 	and.w	r3, r3, #4
 8008390:	2b00      	cmp	r3, #0
 8008392:	d002      	beq.n	800839a <f_open+0xf6>
 8008394:	2308      	movs	r3, #8
 8008396:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800839a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d168      	bne.n	8008474 <f_open+0x1d0>
 80083a2:	79fb      	ldrb	r3, [r7, #7]
 80083a4:	f003 0308 	and.w	r3, r3, #8
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d063      	beq.n	8008474 <f_open+0x1d0>
				dw = GET_FATTIME();
 80083ac:	f7fd fefa 	bl	80061a4 <get_fattime>
 80083b0:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80083b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083b4:	330e      	adds	r3, #14
 80083b6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80083b8:	4618      	mov	r0, r3
 80083ba:	f7fe fa29 	bl	8006810 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80083be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083c0:	3316      	adds	r3, #22
 80083c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80083c4:	4618      	mov	r0, r3
 80083c6:	f7fe fa23 	bl	8006810 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80083ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083cc:	330b      	adds	r3, #11
 80083ce:	2220      	movs	r2, #32
 80083d0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80083d6:	4611      	mov	r1, r2
 80083d8:	4618      	mov	r0, r3
 80083da:	f7ff f977 	bl	80076cc <ld_clust>
 80083de:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80083e4:	2200      	movs	r2, #0
 80083e6:	4618      	mov	r0, r3
 80083e8:	f7ff f98f 	bl	800770a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80083ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083ee:	331c      	adds	r3, #28
 80083f0:	2100      	movs	r1, #0
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7fe fa0c 	bl	8006810 <st_dword>
					fs->wflag = 1;
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	2201      	movs	r2, #1
 80083fc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80083fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008400:	2b00      	cmp	r3, #0
 8008402:	d037      	beq.n	8008474 <f_open+0x1d0>
						dw = fs->winsect;
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008408:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800840a:	f107 0314 	add.w	r3, r7, #20
 800840e:	2200      	movs	r2, #0
 8008410:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8008412:	4618      	mov	r0, r3
 8008414:	f7fe fea2 	bl	800715c <remove_chain>
 8008418:	4603      	mov	r3, r0
 800841a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800841e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008422:	2b00      	cmp	r3, #0
 8008424:	d126      	bne.n	8008474 <f_open+0x1d0>
							res = move_window(fs, dw);
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800842a:	4618      	mov	r0, r3
 800842c:	f7fe fc4a 	bl	8006cc4 <move_window>
 8008430:	4603      	mov	r3, r0
 8008432:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800843a:	3a01      	subs	r2, #1
 800843c:	60da      	str	r2, [r3, #12]
 800843e:	e019      	b.n	8008474 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008440:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008444:	2b00      	cmp	r3, #0
 8008446:	d115      	bne.n	8008474 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008448:	7ebb      	ldrb	r3, [r7, #26]
 800844a:	f003 0310 	and.w	r3, r3, #16
 800844e:	2b00      	cmp	r3, #0
 8008450:	d003      	beq.n	800845a <f_open+0x1b6>
					res = FR_NO_FILE;
 8008452:	2304      	movs	r3, #4
 8008454:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008458:	e00c      	b.n	8008474 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800845a:	79fb      	ldrb	r3, [r7, #7]
 800845c:	f003 0302 	and.w	r3, r3, #2
 8008460:	2b00      	cmp	r3, #0
 8008462:	d007      	beq.n	8008474 <f_open+0x1d0>
 8008464:	7ebb      	ldrb	r3, [r7, #26]
 8008466:	f003 0301 	and.w	r3, r3, #1
 800846a:	2b00      	cmp	r3, #0
 800846c:	d002      	beq.n	8008474 <f_open+0x1d0>
						res = FR_DENIED;
 800846e:	2307      	movs	r3, #7
 8008470:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008474:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008478:	2b00      	cmp	r3, #0
 800847a:	d126      	bne.n	80084ca <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800847c:	79fb      	ldrb	r3, [r7, #7]
 800847e:	f003 0308 	and.w	r3, r3, #8
 8008482:	2b00      	cmp	r3, #0
 8008484:	d003      	beq.n	800848e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8008486:	79fb      	ldrb	r3, [r7, #7]
 8008488:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800848c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8008496:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800849c:	79fb      	ldrb	r3, [r7, #7]
 800849e:	2b01      	cmp	r3, #1
 80084a0:	bf8c      	ite	hi
 80084a2:	2301      	movhi	r3, #1
 80084a4:	2300      	movls	r3, #0
 80084a6:	b2db      	uxtb	r3, r3
 80084a8:	461a      	mov	r2, r3
 80084aa:	f107 0314 	add.w	r3, r7, #20
 80084ae:	4611      	mov	r1, r2
 80084b0:	4618      	mov	r0, r3
 80084b2:	f7fe fad5 	bl	8006a60 <inc_lock>
 80084b6:	4602      	mov	r2, r0
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	691b      	ldr	r3, [r3, #16]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d102      	bne.n	80084ca <f_open+0x226>
 80084c4:	2302      	movs	r3, #2
 80084c6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80084ca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	f040 8095 	bne.w	80085fe <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80084d8:	4611      	mov	r1, r2
 80084da:	4618      	mov	r0, r3
 80084dc:	f7ff f8f6 	bl	80076cc <ld_clust>
 80084e0:	4602      	mov	r2, r0
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80084e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084e8:	331c      	adds	r3, #28
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7fe f952 	bl	8006794 <ld_dword>
 80084f0:	4602      	mov	r2, r0
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2200      	movs	r2, #0
 80084fa:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80084fc:	693a      	ldr	r2, [r7, #16]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	88da      	ldrh	r2, [r3, #6]
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	79fa      	ldrb	r2, [r7, #7]
 800850e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2200      	movs	r2, #0
 8008514:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2200      	movs	r2, #0
 800851a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2200      	movs	r2, #0
 8008520:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	3330      	adds	r3, #48	@ 0x30
 8008526:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800852a:	2100      	movs	r1, #0
 800852c:	4618      	mov	r0, r3
 800852e:	f7fe f9bc 	bl	80068aa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008532:	79fb      	ldrb	r3, [r7, #7]
 8008534:	f003 0320 	and.w	r3, r3, #32
 8008538:	2b00      	cmp	r3, #0
 800853a:	d060      	beq.n	80085fe <f_open+0x35a>
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d05c      	beq.n	80085fe <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	68da      	ldr	r2, [r3, #12]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	895b      	ldrh	r3, [r3, #10]
 8008550:	025b      	lsls	r3, r3, #9
 8008552:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	68db      	ldr	r3, [r3, #12]
 800855e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008560:	e016      	b.n	8008590 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008566:	4618      	mov	r0, r3
 8008568:	f7fe fc67 	bl	8006e3a <get_fat>
 800856c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800856e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008570:	2b01      	cmp	r3, #1
 8008572:	d802      	bhi.n	800857a <f_open+0x2d6>
 8008574:	2302      	movs	r3, #2
 8008576:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800857a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800857c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008580:	d102      	bne.n	8008588 <f_open+0x2e4>
 8008582:	2301      	movs	r3, #1
 8008584:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008588:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800858a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800858c:	1ad3      	subs	r3, r2, r3
 800858e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008590:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008594:	2b00      	cmp	r3, #0
 8008596:	d103      	bne.n	80085a0 <f_open+0x2fc>
 8008598:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800859a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800859c:	429a      	cmp	r2, r3
 800859e:	d8e0      	bhi.n	8008562 <f_open+0x2be>
				}
				fp->clust = clst;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80085a4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80085a6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d127      	bne.n	80085fe <f_open+0x35a>
 80085ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80085b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d022      	beq.n	80085fe <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80085bc:	4618      	mov	r0, r3
 80085be:	f7fe fc1d 	bl	8006dfc <clust2sect>
 80085c2:	6478      	str	r0, [r7, #68]	@ 0x44
 80085c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d103      	bne.n	80085d2 <f_open+0x32e>
						res = FR_INT_ERR;
 80085ca:	2302      	movs	r3, #2
 80085cc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80085d0:	e015      	b.n	80085fe <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80085d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80085d4:	0a5a      	lsrs	r2, r3, #9
 80085d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085d8:	441a      	add	r2, r3
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	7858      	ldrb	r0, [r3, #1]
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6a1a      	ldr	r2, [r3, #32]
 80085ec:	2301      	movs	r3, #1
 80085ee:	f7fe f85b 	bl	80066a8 <disk_read>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d002      	beq.n	80085fe <f_open+0x35a>
 80085f8:	2301      	movs	r3, #1
 80085fa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80085fe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008602:	2b00      	cmp	r3, #0
 8008604:	d002      	beq.n	800860c <f_open+0x368>
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2200      	movs	r2, #0
 800860a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800860c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8008610:	4618      	mov	r0, r3
 8008612:	3760      	adds	r7, #96	@ 0x60
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b08e      	sub	sp, #56	@ 0x38
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	607a      	str	r2, [r7, #4]
 8008624:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	2200      	movs	r2, #0
 800862e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f107 0214 	add.w	r2, r7, #20
 8008636:	4611      	mov	r1, r2
 8008638:	4618      	mov	r0, r3
 800863a:	f7ff fdb7 	bl	80081ac <validate>
 800863e:	4603      	mov	r3, r0
 8008640:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008644:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008648:	2b00      	cmp	r3, #0
 800864a:	d107      	bne.n	800865c <f_read+0x44>
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	7d5b      	ldrb	r3, [r3, #21]
 8008650:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8008654:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008658:	2b00      	cmp	r3, #0
 800865a:	d002      	beq.n	8008662 <f_read+0x4a>
 800865c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008660:	e115      	b.n	800888e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	7d1b      	ldrb	r3, [r3, #20]
 8008666:	f003 0301 	and.w	r3, r3, #1
 800866a:	2b00      	cmp	r3, #0
 800866c:	d101      	bne.n	8008672 <f_read+0x5a>
 800866e:	2307      	movs	r3, #7
 8008670:	e10d      	b.n	800888e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	68da      	ldr	r2, [r3, #12]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	699b      	ldr	r3, [r3, #24]
 800867a:	1ad3      	subs	r3, r2, r3
 800867c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	6a3b      	ldr	r3, [r7, #32]
 8008682:	429a      	cmp	r2, r3
 8008684:	f240 80fe 	bls.w	8008884 <f_read+0x26c>
 8008688:	6a3b      	ldr	r3, [r7, #32]
 800868a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800868c:	e0fa      	b.n	8008884 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	699b      	ldr	r3, [r3, #24]
 8008692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008696:	2b00      	cmp	r3, #0
 8008698:	f040 80c6 	bne.w	8008828 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	699b      	ldr	r3, [r3, #24]
 80086a0:	0a5b      	lsrs	r3, r3, #9
 80086a2:	697a      	ldr	r2, [r7, #20]
 80086a4:	8952      	ldrh	r2, [r2, #10]
 80086a6:	3a01      	subs	r2, #1
 80086a8:	4013      	ands	r3, r2
 80086aa:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80086ac:	69fb      	ldr	r3, [r7, #28]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d12f      	bne.n	8008712 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	699b      	ldr	r3, [r3, #24]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d103      	bne.n	80086c2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	633b      	str	r3, [r7, #48]	@ 0x30
 80086c0:	e013      	b.n	80086ea <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d007      	beq.n	80086da <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	699b      	ldr	r3, [r3, #24]
 80086ce:	4619      	mov	r1, r3
 80086d0:	68f8      	ldr	r0, [r7, #12]
 80086d2:	f7fe fe40 	bl	8007356 <clmt_clust>
 80086d6:	6338      	str	r0, [r7, #48]	@ 0x30
 80086d8:	e007      	b.n	80086ea <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80086da:	68fa      	ldr	r2, [r7, #12]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	69db      	ldr	r3, [r3, #28]
 80086e0:	4619      	mov	r1, r3
 80086e2:	4610      	mov	r0, r2
 80086e4:	f7fe fba9 	bl	8006e3a <get_fat>
 80086e8:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80086ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d804      	bhi.n	80086fa <f_read+0xe2>
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2202      	movs	r2, #2
 80086f4:	755a      	strb	r2, [r3, #21]
 80086f6:	2302      	movs	r3, #2
 80086f8:	e0c9      	b.n	800888e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80086fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008700:	d104      	bne.n	800870c <f_read+0xf4>
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2201      	movs	r2, #1
 8008706:	755a      	strb	r2, [r3, #21]
 8008708:	2301      	movs	r3, #1
 800870a:	e0c0      	b.n	800888e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008710:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008712:	697a      	ldr	r2, [r7, #20]
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	69db      	ldr	r3, [r3, #28]
 8008718:	4619      	mov	r1, r3
 800871a:	4610      	mov	r0, r2
 800871c:	f7fe fb6e 	bl	8006dfc <clust2sect>
 8008720:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d104      	bne.n	8008732 <f_read+0x11a>
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2202      	movs	r2, #2
 800872c:	755a      	strb	r2, [r3, #21]
 800872e:	2302      	movs	r3, #2
 8008730:	e0ad      	b.n	800888e <f_read+0x276>
			sect += csect;
 8008732:	69ba      	ldr	r2, [r7, #24]
 8008734:	69fb      	ldr	r3, [r7, #28]
 8008736:	4413      	add	r3, r2
 8008738:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	0a5b      	lsrs	r3, r3, #9
 800873e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008742:	2b00      	cmp	r3, #0
 8008744:	d039      	beq.n	80087ba <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008746:	69fa      	ldr	r2, [r7, #28]
 8008748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800874a:	4413      	add	r3, r2
 800874c:	697a      	ldr	r2, [r7, #20]
 800874e:	8952      	ldrh	r2, [r2, #10]
 8008750:	4293      	cmp	r3, r2
 8008752:	d905      	bls.n	8008760 <f_read+0x148>
					cc = fs->csize - csect;
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	895b      	ldrh	r3, [r3, #10]
 8008758:	461a      	mov	r2, r3
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	1ad3      	subs	r3, r2, r3
 800875e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	7858      	ldrb	r0, [r3, #1]
 8008764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008766:	69ba      	ldr	r2, [r7, #24]
 8008768:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800876a:	f7fd ff9d 	bl	80066a8 <disk_read>
 800876e:	4603      	mov	r3, r0
 8008770:	2b00      	cmp	r3, #0
 8008772:	d004      	beq.n	800877e <f_read+0x166>
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2201      	movs	r2, #1
 8008778:	755a      	strb	r2, [r3, #21]
 800877a:	2301      	movs	r3, #1
 800877c:	e087      	b.n	800888e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	7d1b      	ldrb	r3, [r3, #20]
 8008782:	b25b      	sxtb	r3, r3
 8008784:	2b00      	cmp	r3, #0
 8008786:	da14      	bge.n	80087b2 <f_read+0x19a>
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	6a1a      	ldr	r2, [r3, #32]
 800878c:	69bb      	ldr	r3, [r7, #24]
 800878e:	1ad3      	subs	r3, r2, r3
 8008790:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008792:	429a      	cmp	r2, r3
 8008794:	d90d      	bls.n	80087b2 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	6a1a      	ldr	r2, [r3, #32]
 800879a:	69bb      	ldr	r3, [r7, #24]
 800879c:	1ad3      	subs	r3, r2, r3
 800879e:	025b      	lsls	r3, r3, #9
 80087a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087a2:	18d0      	adds	r0, r2, r3
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	3330      	adds	r3, #48	@ 0x30
 80087a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80087ac:	4619      	mov	r1, r3
 80087ae:	f7fe f85b 	bl	8006868 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80087b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087b4:	025b      	lsls	r3, r3, #9
 80087b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80087b8:	e050      	b.n	800885c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	6a1b      	ldr	r3, [r3, #32]
 80087be:	69ba      	ldr	r2, [r7, #24]
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d02e      	beq.n	8008822 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	7d1b      	ldrb	r3, [r3, #20]
 80087c8:	b25b      	sxtb	r3, r3
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	da18      	bge.n	8008800 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	7858      	ldrb	r0, [r3, #1]
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	6a1a      	ldr	r2, [r3, #32]
 80087dc:	2301      	movs	r3, #1
 80087de:	f7fd ff83 	bl	80066e8 <disk_write>
 80087e2:	4603      	mov	r3, r0
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d004      	beq.n	80087f2 <f_read+0x1da>
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2201      	movs	r2, #1
 80087ec:	755a      	strb	r2, [r3, #21]
 80087ee:	2301      	movs	r3, #1
 80087f0:	e04d      	b.n	800888e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	7d1b      	ldrb	r3, [r3, #20]
 80087f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087fa:	b2da      	uxtb	r2, r3
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	7858      	ldrb	r0, [r3, #1]
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800880a:	2301      	movs	r3, #1
 800880c:	69ba      	ldr	r2, [r7, #24]
 800880e:	f7fd ff4b 	bl	80066a8 <disk_read>
 8008812:	4603      	mov	r3, r0
 8008814:	2b00      	cmp	r3, #0
 8008816:	d004      	beq.n	8008822 <f_read+0x20a>
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2201      	movs	r2, #1
 800881c:	755a      	strb	r2, [r3, #21]
 800881e:	2301      	movs	r3, #1
 8008820:	e035      	b.n	800888e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	69ba      	ldr	r2, [r7, #24]
 8008826:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	699b      	ldr	r3, [r3, #24]
 800882c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008830:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8008834:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008836:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	429a      	cmp	r2, r3
 800883c:	d901      	bls.n	8008842 <f_read+0x22a>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	699b      	ldr	r3, [r3, #24]
 800884c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008850:	4413      	add	r3, r2
 8008852:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008854:	4619      	mov	r1, r3
 8008856:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008858:	f7fe f806 	bl	8006868 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800885c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800885e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008860:	4413      	add	r3, r2
 8008862:	627b      	str	r3, [r7, #36]	@ 0x24
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	699a      	ldr	r2, [r3, #24]
 8008868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800886a:	441a      	add	r2, r3
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	619a      	str	r2, [r3, #24]
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008876:	441a      	add	r2, r3
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	601a      	str	r2, [r3, #0]
 800887c:	687a      	ldr	r2, [r7, #4]
 800887e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008880:	1ad3      	subs	r3, r2, r3
 8008882:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2b00      	cmp	r3, #0
 8008888:	f47f af01 	bne.w	800868e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800888c:	2300      	movs	r3, #0
}
 800888e:	4618      	mov	r0, r3
 8008890:	3738      	adds	r7, #56	@ 0x38
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b086      	sub	sp, #24
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f107 0208 	add.w	r2, r7, #8
 80088a4:	4611      	mov	r1, r2
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7ff fc80 	bl	80081ac <validate>
 80088ac:	4603      	mov	r3, r0
 80088ae:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80088b0:	7dfb      	ldrb	r3, [r7, #23]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d168      	bne.n	8008988 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	7d1b      	ldrb	r3, [r3, #20]
 80088ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d062      	beq.n	8008988 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	7d1b      	ldrb	r3, [r3, #20]
 80088c6:	b25b      	sxtb	r3, r3
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	da15      	bge.n	80088f8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	7858      	ldrb	r0, [r3, #1]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6a1a      	ldr	r2, [r3, #32]
 80088da:	2301      	movs	r3, #1
 80088dc:	f7fd ff04 	bl	80066e8 <disk_write>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d001      	beq.n	80088ea <f_sync+0x54>
 80088e6:	2301      	movs	r3, #1
 80088e8:	e04f      	b.n	800898a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	7d1b      	ldrb	r3, [r3, #20]
 80088ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088f2:	b2da      	uxtb	r2, r3
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80088f8:	f7fd fc54 	bl	80061a4 <get_fattime>
 80088fc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80088fe:	68ba      	ldr	r2, [r7, #8]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008904:	4619      	mov	r1, r3
 8008906:	4610      	mov	r0, r2
 8008908:	f7fe f9dc 	bl	8006cc4 <move_window>
 800890c:	4603      	mov	r3, r0
 800890e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008910:	7dfb      	ldrb	r3, [r7, #23]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d138      	bne.n	8008988 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800891a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	330b      	adds	r3, #11
 8008920:	781a      	ldrb	r2, [r3, #0]
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	330b      	adds	r3, #11
 8008926:	f042 0220 	orr.w	r2, r2, #32
 800892a:	b2d2      	uxtb	r2, r2
 800892c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6818      	ldr	r0, [r3, #0]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	461a      	mov	r2, r3
 8008938:	68f9      	ldr	r1, [r7, #12]
 800893a:	f7fe fee6 	bl	800770a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f103 021c 	add.w	r2, r3, #28
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	4619      	mov	r1, r3
 800894a:	4610      	mov	r0, r2
 800894c:	f7fd ff60 	bl	8006810 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	3316      	adds	r3, #22
 8008954:	6939      	ldr	r1, [r7, #16]
 8008956:	4618      	mov	r0, r3
 8008958:	f7fd ff5a 	bl	8006810 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	3312      	adds	r3, #18
 8008960:	2100      	movs	r1, #0
 8008962:	4618      	mov	r0, r3
 8008964:	f7fd ff39 	bl	80067da <st_word>
					fs->wflag = 1;
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	2201      	movs	r2, #1
 800896c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	4618      	mov	r0, r3
 8008972:	f7fe f9d5 	bl	8006d20 <sync_fs>
 8008976:	4603      	mov	r3, r0
 8008978:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	7d1b      	ldrb	r3, [r3, #20]
 800897e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008982:	b2da      	uxtb	r2, r3
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008988:	7dfb      	ldrb	r3, [r7, #23]
}
 800898a:	4618      	mov	r0, r3
 800898c:	3718      	adds	r7, #24
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}

08008992 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008992:	b580      	push	{r7, lr}
 8008994:	b084      	sub	sp, #16
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f7ff ff7b 	bl	8008896 <f_sync>
 80089a0:	4603      	mov	r3, r0
 80089a2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80089a4:	7bfb      	ldrb	r3, [r7, #15]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d118      	bne.n	80089dc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f107 0208 	add.w	r2, r7, #8
 80089b0:	4611      	mov	r1, r2
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7ff fbfa 	bl	80081ac <validate>
 80089b8:	4603      	mov	r3, r0
 80089ba:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80089bc:	7bfb      	ldrb	r3, [r7, #15]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d10c      	bne.n	80089dc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	691b      	ldr	r3, [r3, #16]
 80089c6:	4618      	mov	r0, r3
 80089c8:	f7fe f8d8 	bl	8006b7c <dec_lock>
 80089cc:	4603      	mov	r3, r0
 80089ce:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80089d0:	7bfb      	ldrb	r3, [r7, #15]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d102      	bne.n	80089dc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80089dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3710      	adds	r7, #16
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b086      	sub	sp, #24
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
 80089ee:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d101      	bne.n	80089fa <f_opendir+0x14>
 80089f6:	2309      	movs	r3, #9
 80089f8:	e064      	b.n	8008ac4 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 80089fe:	f107 010c 	add.w	r1, r7, #12
 8008a02:	463b      	mov	r3, r7
 8008a04:	2200      	movs	r2, #0
 8008a06:	4618      	mov	r0, r3
 8008a08:	f7ff f984 	bl	8007d14 <find_volume>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008a10:	7dfb      	ldrb	r3, [r7, #23]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d14f      	bne.n	8008ab6 <f_opendir+0xd0>
		obj->fs = fs;
 8008a16:	68fa      	ldr	r2, [r7, #12]
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	4619      	mov	r1, r3
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f7ff f86b 	bl	8007afc <follow_path>
 8008a26:	4603      	mov	r3, r0
 8008a28:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8008a2a:	7dfb      	ldrb	r3, [r7, #23]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d13d      	bne.n	8008aac <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008a36:	b25b      	sxtb	r3, r3
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	db12      	blt.n	8008a62 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	799b      	ldrb	r3, [r3, #6]
 8008a40:	f003 0310 	and.w	r3, r3, #16
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d00a      	beq.n	8008a5e <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8008a48:	68fa      	ldr	r2, [r7, #12]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6a1b      	ldr	r3, [r3, #32]
 8008a4e:	4619      	mov	r1, r3
 8008a50:	4610      	mov	r0, r2
 8008a52:	f7fe fe3b 	bl	80076cc <ld_clust>
 8008a56:	4602      	mov	r2, r0
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	609a      	str	r2, [r3, #8]
 8008a5c:	e001      	b.n	8008a62 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8008a5e:	2305      	movs	r3, #5
 8008a60:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8008a62:	7dfb      	ldrb	r3, [r7, #23]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d121      	bne.n	8008aac <f_opendir+0xc6>
				obj->id = fs->id;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	88da      	ldrh	r2, [r3, #6]
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8008a70:	2100      	movs	r1, #0
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f7fe fca3 	bl	80073be <dir_sdi>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8008a7c:	7dfb      	ldrb	r3, [r7, #23]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d114      	bne.n	8008aac <f_opendir+0xc6>
					if (obj->sclust) {
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d00d      	beq.n	8008aa6 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8008a8a:	2100      	movs	r1, #0
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f7fd ffe7 	bl	8006a60 <inc_lock>
 8008a92:	4602      	mov	r2, r0
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	691b      	ldr	r3, [r3, #16]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d105      	bne.n	8008aac <f_opendir+0xc6>
 8008aa0:	2312      	movs	r3, #18
 8008aa2:	75fb      	strb	r3, [r7, #23]
 8008aa4:	e002      	b.n	8008aac <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8008aac:	7dfb      	ldrb	r3, [r7, #23]
 8008aae:	2b04      	cmp	r3, #4
 8008ab0:	d101      	bne.n	8008ab6 <f_opendir+0xd0>
 8008ab2:	2305      	movs	r3, #5
 8008ab4:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8008ab6:	7dfb      	ldrb	r3, [r7, #23]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d002      	beq.n	8008ac2 <f_opendir+0xdc>
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3718      	adds	r7, #24
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f107 0208 	add.w	r2, r7, #8
 8008ada:	4611      	mov	r1, r2
 8008adc:	4618      	mov	r0, r3
 8008ade:	f7ff fb65 	bl	80081ac <validate>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008ae6:	7bfb      	ldrb	r3, [r7, #15]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d110      	bne.n	8008b0e <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	691b      	ldr	r3, [r3, #16]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d006      	beq.n	8008b02 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	691b      	ldr	r3, [r3, #16]
 8008af8:	4618      	mov	r0, r3
 8008afa:	f7fe f83f 	bl	8006b7c <dec_lock>
 8008afe:	4603      	mov	r3, r0
 8008b00:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8008b02:	7bfb      	ldrb	r3, [r7, #15]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d102      	bne.n	8008b0e <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8008b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3710      	adds	r7, #16
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f107 0208 	add.w	r2, r7, #8
 8008b28:	4611      	mov	r1, r2
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f7ff fb3e 	bl	80081ac <validate>
 8008b30:	4603      	mov	r3, r0
 8008b32:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008b34:	7bfb      	ldrb	r3, [r7, #15]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d126      	bne.n	8008b88 <f_readdir+0x70>
		if (!fno) {
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d106      	bne.n	8008b4e <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8008b40:	2100      	movs	r1, #0
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f7fe fc3b 	bl	80073be <dir_sdi>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	73fb      	strb	r3, [r7, #15]
 8008b4c:	e01c      	b.n	8008b88 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8008b4e:	2100      	movs	r1, #0
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f7fe fdfa 	bl	800774a <dir_read>
 8008b56:	4603      	mov	r3, r0
 8008b58:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8008b5a:	7bfb      	ldrb	r3, [r7, #15]
 8008b5c:	2b04      	cmp	r3, #4
 8008b5e:	d101      	bne.n	8008b64 <f_readdir+0x4c>
 8008b60:	2300      	movs	r3, #0
 8008b62:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8008b64:	7bfb      	ldrb	r3, [r7, #15]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d10e      	bne.n	8008b88 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8008b6a:	6839      	ldr	r1, [r7, #0]
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f7fe fed0 	bl	8007912 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8008b72:	2100      	movs	r1, #0
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f7fe fc9d 	bl	80074b4 <dir_next>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8008b7e:	7bfb      	ldrb	r3, [r7, #15]
 8008b80:	2b04      	cmp	r3, #4
 8008b82:	d101      	bne.n	8008b88 <f_readdir+0x70>
 8008b84:	2300      	movs	r3, #0
 8008b86:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8008b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3710      	adds	r7, #16
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
	...

08008b94 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b087      	sub	sp, #28
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	4613      	mov	r3, r2
 8008ba0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008baa:	4b1f      	ldr	r3, [pc, #124]	@ (8008c28 <FATFS_LinkDriverEx+0x94>)
 8008bac:	7a5b      	ldrb	r3, [r3, #9]
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d131      	bne.n	8008c18 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008bb4:	4b1c      	ldr	r3, [pc, #112]	@ (8008c28 <FATFS_LinkDriverEx+0x94>)
 8008bb6:	7a5b      	ldrb	r3, [r3, #9]
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	461a      	mov	r2, r3
 8008bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8008c28 <FATFS_LinkDriverEx+0x94>)
 8008bbe:	2100      	movs	r1, #0
 8008bc0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008bc2:	4b19      	ldr	r3, [pc, #100]	@ (8008c28 <FATFS_LinkDriverEx+0x94>)
 8008bc4:	7a5b      	ldrb	r3, [r3, #9]
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	4a17      	ldr	r2, [pc, #92]	@ (8008c28 <FATFS_LinkDriverEx+0x94>)
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	4413      	add	r3, r2
 8008bce:	68fa      	ldr	r2, [r7, #12]
 8008bd0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008bd2:	4b15      	ldr	r3, [pc, #84]	@ (8008c28 <FATFS_LinkDriverEx+0x94>)
 8008bd4:	7a5b      	ldrb	r3, [r3, #9]
 8008bd6:	b2db      	uxtb	r3, r3
 8008bd8:	461a      	mov	r2, r3
 8008bda:	4b13      	ldr	r3, [pc, #76]	@ (8008c28 <FATFS_LinkDriverEx+0x94>)
 8008bdc:	4413      	add	r3, r2
 8008bde:	79fa      	ldrb	r2, [r7, #7]
 8008be0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008be2:	4b11      	ldr	r3, [pc, #68]	@ (8008c28 <FATFS_LinkDriverEx+0x94>)
 8008be4:	7a5b      	ldrb	r3, [r3, #9]
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	1c5a      	adds	r2, r3, #1
 8008bea:	b2d1      	uxtb	r1, r2
 8008bec:	4a0e      	ldr	r2, [pc, #56]	@ (8008c28 <FATFS_LinkDriverEx+0x94>)
 8008bee:	7251      	strb	r1, [r2, #9]
 8008bf0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008bf2:	7dbb      	ldrb	r3, [r7, #22]
 8008bf4:	3330      	adds	r3, #48	@ 0x30
 8008bf6:	b2da      	uxtb	r2, r3
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	3301      	adds	r3, #1
 8008c00:	223a      	movs	r2, #58	@ 0x3a
 8008c02:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	3302      	adds	r3, #2
 8008c08:	222f      	movs	r2, #47	@ 0x2f
 8008c0a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	3303      	adds	r3, #3
 8008c10:	2200      	movs	r2, #0
 8008c12:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008c14:	2300      	movs	r3, #0
 8008c16:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008c18:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	371c      	adds	r7, #28
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c24:	4770      	bx	lr
 8008c26:	bf00      	nop
 8008c28:	2000054c 	.word	0x2000054c

08008c2c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b082      	sub	sp, #8
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008c36:	2200      	movs	r2, #0
 8008c38:	6839      	ldr	r1, [r7, #0]
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f7ff ffaa 	bl	8008b94 <FATFS_LinkDriverEx>
 8008c40:	4603      	mov	r3, r0
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3708      	adds	r7, #8
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
	...

08008c4c <siprintf>:
 8008c4c:	b40e      	push	{r1, r2, r3}
 8008c4e:	b500      	push	{lr}
 8008c50:	b09c      	sub	sp, #112	@ 0x70
 8008c52:	ab1d      	add	r3, sp, #116	@ 0x74
 8008c54:	9002      	str	r0, [sp, #8]
 8008c56:	9006      	str	r0, [sp, #24]
 8008c58:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008c5c:	4809      	ldr	r0, [pc, #36]	@ (8008c84 <siprintf+0x38>)
 8008c5e:	9107      	str	r1, [sp, #28]
 8008c60:	9104      	str	r1, [sp, #16]
 8008c62:	4909      	ldr	r1, [pc, #36]	@ (8008c88 <siprintf+0x3c>)
 8008c64:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c68:	9105      	str	r1, [sp, #20]
 8008c6a:	6800      	ldr	r0, [r0, #0]
 8008c6c:	9301      	str	r3, [sp, #4]
 8008c6e:	a902      	add	r1, sp, #8
 8008c70:	f000 f9aa 	bl	8008fc8 <_svfiprintf_r>
 8008c74:	9b02      	ldr	r3, [sp, #8]
 8008c76:	2200      	movs	r2, #0
 8008c78:	701a      	strb	r2, [r3, #0]
 8008c7a:	b01c      	add	sp, #112	@ 0x70
 8008c7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c80:	b003      	add	sp, #12
 8008c82:	4770      	bx	lr
 8008c84:	2000000c 	.word	0x2000000c
 8008c88:	ffff0208 	.word	0xffff0208

08008c8c <memset>:
 8008c8c:	4402      	add	r2, r0
 8008c8e:	4603      	mov	r3, r0
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d100      	bne.n	8008c96 <memset+0xa>
 8008c94:	4770      	bx	lr
 8008c96:	f803 1b01 	strb.w	r1, [r3], #1
 8008c9a:	e7f9      	b.n	8008c90 <memset+0x4>

08008c9c <strstr>:
 8008c9c:	780a      	ldrb	r2, [r1, #0]
 8008c9e:	b570      	push	{r4, r5, r6, lr}
 8008ca0:	b96a      	cbnz	r2, 8008cbe <strstr+0x22>
 8008ca2:	bd70      	pop	{r4, r5, r6, pc}
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d109      	bne.n	8008cbc <strstr+0x20>
 8008ca8:	460c      	mov	r4, r1
 8008caa:	4605      	mov	r5, r0
 8008cac:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d0f6      	beq.n	8008ca2 <strstr+0x6>
 8008cb4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008cb8:	429e      	cmp	r6, r3
 8008cba:	d0f7      	beq.n	8008cac <strstr+0x10>
 8008cbc:	3001      	adds	r0, #1
 8008cbe:	7803      	ldrb	r3, [r0, #0]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d1ef      	bne.n	8008ca4 <strstr+0x8>
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	e7ec      	b.n	8008ca2 <strstr+0x6>

08008cc8 <__errno>:
 8008cc8:	4b01      	ldr	r3, [pc, #4]	@ (8008cd0 <__errno+0x8>)
 8008cca:	6818      	ldr	r0, [r3, #0]
 8008ccc:	4770      	bx	lr
 8008cce:	bf00      	nop
 8008cd0:	2000000c 	.word	0x2000000c

08008cd4 <__libc_init_array>:
 8008cd4:	b570      	push	{r4, r5, r6, lr}
 8008cd6:	4d0d      	ldr	r5, [pc, #52]	@ (8008d0c <__libc_init_array+0x38>)
 8008cd8:	4c0d      	ldr	r4, [pc, #52]	@ (8008d10 <__libc_init_array+0x3c>)
 8008cda:	1b64      	subs	r4, r4, r5
 8008cdc:	10a4      	asrs	r4, r4, #2
 8008cde:	2600      	movs	r6, #0
 8008ce0:	42a6      	cmp	r6, r4
 8008ce2:	d109      	bne.n	8008cf8 <__libc_init_array+0x24>
 8008ce4:	4d0b      	ldr	r5, [pc, #44]	@ (8008d14 <__libc_init_array+0x40>)
 8008ce6:	4c0c      	ldr	r4, [pc, #48]	@ (8008d18 <__libc_init_array+0x44>)
 8008ce8:	f000 fc66 	bl	80095b8 <_init>
 8008cec:	1b64      	subs	r4, r4, r5
 8008cee:	10a4      	asrs	r4, r4, #2
 8008cf0:	2600      	movs	r6, #0
 8008cf2:	42a6      	cmp	r6, r4
 8008cf4:	d105      	bne.n	8008d02 <__libc_init_array+0x2e>
 8008cf6:	bd70      	pop	{r4, r5, r6, pc}
 8008cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cfc:	4798      	blx	r3
 8008cfe:	3601      	adds	r6, #1
 8008d00:	e7ee      	b.n	8008ce0 <__libc_init_array+0xc>
 8008d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d06:	4798      	blx	r3
 8008d08:	3601      	adds	r6, #1
 8008d0a:	e7f2      	b.n	8008cf2 <__libc_init_array+0x1e>
 8008d0c:	08009720 	.word	0x08009720
 8008d10:	08009720 	.word	0x08009720
 8008d14:	08009720 	.word	0x08009720
 8008d18:	08009724 	.word	0x08009724

08008d1c <__retarget_lock_acquire_recursive>:
 8008d1c:	4770      	bx	lr

08008d1e <__retarget_lock_release_recursive>:
 8008d1e:	4770      	bx	lr

08008d20 <_free_r>:
 8008d20:	b538      	push	{r3, r4, r5, lr}
 8008d22:	4605      	mov	r5, r0
 8008d24:	2900      	cmp	r1, #0
 8008d26:	d041      	beq.n	8008dac <_free_r+0x8c>
 8008d28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d2c:	1f0c      	subs	r4, r1, #4
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	bfb8      	it	lt
 8008d32:	18e4      	addlt	r4, r4, r3
 8008d34:	f000 f8e0 	bl	8008ef8 <__malloc_lock>
 8008d38:	4a1d      	ldr	r2, [pc, #116]	@ (8008db0 <_free_r+0x90>)
 8008d3a:	6813      	ldr	r3, [r2, #0]
 8008d3c:	b933      	cbnz	r3, 8008d4c <_free_r+0x2c>
 8008d3e:	6063      	str	r3, [r4, #4]
 8008d40:	6014      	str	r4, [r2, #0]
 8008d42:	4628      	mov	r0, r5
 8008d44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d48:	f000 b8dc 	b.w	8008f04 <__malloc_unlock>
 8008d4c:	42a3      	cmp	r3, r4
 8008d4e:	d908      	bls.n	8008d62 <_free_r+0x42>
 8008d50:	6820      	ldr	r0, [r4, #0]
 8008d52:	1821      	adds	r1, r4, r0
 8008d54:	428b      	cmp	r3, r1
 8008d56:	bf01      	itttt	eq
 8008d58:	6819      	ldreq	r1, [r3, #0]
 8008d5a:	685b      	ldreq	r3, [r3, #4]
 8008d5c:	1809      	addeq	r1, r1, r0
 8008d5e:	6021      	streq	r1, [r4, #0]
 8008d60:	e7ed      	b.n	8008d3e <_free_r+0x1e>
 8008d62:	461a      	mov	r2, r3
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	b10b      	cbz	r3, 8008d6c <_free_r+0x4c>
 8008d68:	42a3      	cmp	r3, r4
 8008d6a:	d9fa      	bls.n	8008d62 <_free_r+0x42>
 8008d6c:	6811      	ldr	r1, [r2, #0]
 8008d6e:	1850      	adds	r0, r2, r1
 8008d70:	42a0      	cmp	r0, r4
 8008d72:	d10b      	bne.n	8008d8c <_free_r+0x6c>
 8008d74:	6820      	ldr	r0, [r4, #0]
 8008d76:	4401      	add	r1, r0
 8008d78:	1850      	adds	r0, r2, r1
 8008d7a:	4283      	cmp	r3, r0
 8008d7c:	6011      	str	r1, [r2, #0]
 8008d7e:	d1e0      	bne.n	8008d42 <_free_r+0x22>
 8008d80:	6818      	ldr	r0, [r3, #0]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	6053      	str	r3, [r2, #4]
 8008d86:	4408      	add	r0, r1
 8008d88:	6010      	str	r0, [r2, #0]
 8008d8a:	e7da      	b.n	8008d42 <_free_r+0x22>
 8008d8c:	d902      	bls.n	8008d94 <_free_r+0x74>
 8008d8e:	230c      	movs	r3, #12
 8008d90:	602b      	str	r3, [r5, #0]
 8008d92:	e7d6      	b.n	8008d42 <_free_r+0x22>
 8008d94:	6820      	ldr	r0, [r4, #0]
 8008d96:	1821      	adds	r1, r4, r0
 8008d98:	428b      	cmp	r3, r1
 8008d9a:	bf04      	itt	eq
 8008d9c:	6819      	ldreq	r1, [r3, #0]
 8008d9e:	685b      	ldreq	r3, [r3, #4]
 8008da0:	6063      	str	r3, [r4, #4]
 8008da2:	bf04      	itt	eq
 8008da4:	1809      	addeq	r1, r1, r0
 8008da6:	6021      	streq	r1, [r4, #0]
 8008da8:	6054      	str	r4, [r2, #4]
 8008daa:	e7ca      	b.n	8008d42 <_free_r+0x22>
 8008dac:	bd38      	pop	{r3, r4, r5, pc}
 8008dae:	bf00      	nop
 8008db0:	2000069c 	.word	0x2000069c

08008db4 <sbrk_aligned>:
 8008db4:	b570      	push	{r4, r5, r6, lr}
 8008db6:	4e0f      	ldr	r6, [pc, #60]	@ (8008df4 <sbrk_aligned+0x40>)
 8008db8:	460c      	mov	r4, r1
 8008dba:	6831      	ldr	r1, [r6, #0]
 8008dbc:	4605      	mov	r5, r0
 8008dbe:	b911      	cbnz	r1, 8008dc6 <sbrk_aligned+0x12>
 8008dc0:	f000 fba6 	bl	8009510 <_sbrk_r>
 8008dc4:	6030      	str	r0, [r6, #0]
 8008dc6:	4621      	mov	r1, r4
 8008dc8:	4628      	mov	r0, r5
 8008dca:	f000 fba1 	bl	8009510 <_sbrk_r>
 8008dce:	1c43      	adds	r3, r0, #1
 8008dd0:	d103      	bne.n	8008dda <sbrk_aligned+0x26>
 8008dd2:	f04f 34ff 	mov.w	r4, #4294967295
 8008dd6:	4620      	mov	r0, r4
 8008dd8:	bd70      	pop	{r4, r5, r6, pc}
 8008dda:	1cc4      	adds	r4, r0, #3
 8008ddc:	f024 0403 	bic.w	r4, r4, #3
 8008de0:	42a0      	cmp	r0, r4
 8008de2:	d0f8      	beq.n	8008dd6 <sbrk_aligned+0x22>
 8008de4:	1a21      	subs	r1, r4, r0
 8008de6:	4628      	mov	r0, r5
 8008de8:	f000 fb92 	bl	8009510 <_sbrk_r>
 8008dec:	3001      	adds	r0, #1
 8008dee:	d1f2      	bne.n	8008dd6 <sbrk_aligned+0x22>
 8008df0:	e7ef      	b.n	8008dd2 <sbrk_aligned+0x1e>
 8008df2:	bf00      	nop
 8008df4:	20000698 	.word	0x20000698

08008df8 <_malloc_r>:
 8008df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008dfc:	1ccd      	adds	r5, r1, #3
 8008dfe:	f025 0503 	bic.w	r5, r5, #3
 8008e02:	3508      	adds	r5, #8
 8008e04:	2d0c      	cmp	r5, #12
 8008e06:	bf38      	it	cc
 8008e08:	250c      	movcc	r5, #12
 8008e0a:	2d00      	cmp	r5, #0
 8008e0c:	4606      	mov	r6, r0
 8008e0e:	db01      	blt.n	8008e14 <_malloc_r+0x1c>
 8008e10:	42a9      	cmp	r1, r5
 8008e12:	d904      	bls.n	8008e1e <_malloc_r+0x26>
 8008e14:	230c      	movs	r3, #12
 8008e16:	6033      	str	r3, [r6, #0]
 8008e18:	2000      	movs	r0, #0
 8008e1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008ef4 <_malloc_r+0xfc>
 8008e22:	f000 f869 	bl	8008ef8 <__malloc_lock>
 8008e26:	f8d8 3000 	ldr.w	r3, [r8]
 8008e2a:	461c      	mov	r4, r3
 8008e2c:	bb44      	cbnz	r4, 8008e80 <_malloc_r+0x88>
 8008e2e:	4629      	mov	r1, r5
 8008e30:	4630      	mov	r0, r6
 8008e32:	f7ff ffbf 	bl	8008db4 <sbrk_aligned>
 8008e36:	1c43      	adds	r3, r0, #1
 8008e38:	4604      	mov	r4, r0
 8008e3a:	d158      	bne.n	8008eee <_malloc_r+0xf6>
 8008e3c:	f8d8 4000 	ldr.w	r4, [r8]
 8008e40:	4627      	mov	r7, r4
 8008e42:	2f00      	cmp	r7, #0
 8008e44:	d143      	bne.n	8008ece <_malloc_r+0xd6>
 8008e46:	2c00      	cmp	r4, #0
 8008e48:	d04b      	beq.n	8008ee2 <_malloc_r+0xea>
 8008e4a:	6823      	ldr	r3, [r4, #0]
 8008e4c:	4639      	mov	r1, r7
 8008e4e:	4630      	mov	r0, r6
 8008e50:	eb04 0903 	add.w	r9, r4, r3
 8008e54:	f000 fb5c 	bl	8009510 <_sbrk_r>
 8008e58:	4581      	cmp	r9, r0
 8008e5a:	d142      	bne.n	8008ee2 <_malloc_r+0xea>
 8008e5c:	6821      	ldr	r1, [r4, #0]
 8008e5e:	1a6d      	subs	r5, r5, r1
 8008e60:	4629      	mov	r1, r5
 8008e62:	4630      	mov	r0, r6
 8008e64:	f7ff ffa6 	bl	8008db4 <sbrk_aligned>
 8008e68:	3001      	adds	r0, #1
 8008e6a:	d03a      	beq.n	8008ee2 <_malloc_r+0xea>
 8008e6c:	6823      	ldr	r3, [r4, #0]
 8008e6e:	442b      	add	r3, r5
 8008e70:	6023      	str	r3, [r4, #0]
 8008e72:	f8d8 3000 	ldr.w	r3, [r8]
 8008e76:	685a      	ldr	r2, [r3, #4]
 8008e78:	bb62      	cbnz	r2, 8008ed4 <_malloc_r+0xdc>
 8008e7a:	f8c8 7000 	str.w	r7, [r8]
 8008e7e:	e00f      	b.n	8008ea0 <_malloc_r+0xa8>
 8008e80:	6822      	ldr	r2, [r4, #0]
 8008e82:	1b52      	subs	r2, r2, r5
 8008e84:	d420      	bmi.n	8008ec8 <_malloc_r+0xd0>
 8008e86:	2a0b      	cmp	r2, #11
 8008e88:	d917      	bls.n	8008eba <_malloc_r+0xc2>
 8008e8a:	1961      	adds	r1, r4, r5
 8008e8c:	42a3      	cmp	r3, r4
 8008e8e:	6025      	str	r5, [r4, #0]
 8008e90:	bf18      	it	ne
 8008e92:	6059      	strne	r1, [r3, #4]
 8008e94:	6863      	ldr	r3, [r4, #4]
 8008e96:	bf08      	it	eq
 8008e98:	f8c8 1000 	streq.w	r1, [r8]
 8008e9c:	5162      	str	r2, [r4, r5]
 8008e9e:	604b      	str	r3, [r1, #4]
 8008ea0:	4630      	mov	r0, r6
 8008ea2:	f000 f82f 	bl	8008f04 <__malloc_unlock>
 8008ea6:	f104 000b 	add.w	r0, r4, #11
 8008eaa:	1d23      	adds	r3, r4, #4
 8008eac:	f020 0007 	bic.w	r0, r0, #7
 8008eb0:	1ac2      	subs	r2, r0, r3
 8008eb2:	bf1c      	itt	ne
 8008eb4:	1a1b      	subne	r3, r3, r0
 8008eb6:	50a3      	strne	r3, [r4, r2]
 8008eb8:	e7af      	b.n	8008e1a <_malloc_r+0x22>
 8008eba:	6862      	ldr	r2, [r4, #4]
 8008ebc:	42a3      	cmp	r3, r4
 8008ebe:	bf0c      	ite	eq
 8008ec0:	f8c8 2000 	streq.w	r2, [r8]
 8008ec4:	605a      	strne	r2, [r3, #4]
 8008ec6:	e7eb      	b.n	8008ea0 <_malloc_r+0xa8>
 8008ec8:	4623      	mov	r3, r4
 8008eca:	6864      	ldr	r4, [r4, #4]
 8008ecc:	e7ae      	b.n	8008e2c <_malloc_r+0x34>
 8008ece:	463c      	mov	r4, r7
 8008ed0:	687f      	ldr	r7, [r7, #4]
 8008ed2:	e7b6      	b.n	8008e42 <_malloc_r+0x4a>
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	42a3      	cmp	r3, r4
 8008eda:	d1fb      	bne.n	8008ed4 <_malloc_r+0xdc>
 8008edc:	2300      	movs	r3, #0
 8008ede:	6053      	str	r3, [r2, #4]
 8008ee0:	e7de      	b.n	8008ea0 <_malloc_r+0xa8>
 8008ee2:	230c      	movs	r3, #12
 8008ee4:	6033      	str	r3, [r6, #0]
 8008ee6:	4630      	mov	r0, r6
 8008ee8:	f000 f80c 	bl	8008f04 <__malloc_unlock>
 8008eec:	e794      	b.n	8008e18 <_malloc_r+0x20>
 8008eee:	6005      	str	r5, [r0, #0]
 8008ef0:	e7d6      	b.n	8008ea0 <_malloc_r+0xa8>
 8008ef2:	bf00      	nop
 8008ef4:	2000069c 	.word	0x2000069c

08008ef8 <__malloc_lock>:
 8008ef8:	4801      	ldr	r0, [pc, #4]	@ (8008f00 <__malloc_lock+0x8>)
 8008efa:	f7ff bf0f 	b.w	8008d1c <__retarget_lock_acquire_recursive>
 8008efe:	bf00      	nop
 8008f00:	20000694 	.word	0x20000694

08008f04 <__malloc_unlock>:
 8008f04:	4801      	ldr	r0, [pc, #4]	@ (8008f0c <__malloc_unlock+0x8>)
 8008f06:	f7ff bf0a 	b.w	8008d1e <__retarget_lock_release_recursive>
 8008f0a:	bf00      	nop
 8008f0c:	20000694 	.word	0x20000694

08008f10 <__ssputs_r>:
 8008f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f14:	688e      	ldr	r6, [r1, #8]
 8008f16:	461f      	mov	r7, r3
 8008f18:	42be      	cmp	r6, r7
 8008f1a:	680b      	ldr	r3, [r1, #0]
 8008f1c:	4682      	mov	sl, r0
 8008f1e:	460c      	mov	r4, r1
 8008f20:	4690      	mov	r8, r2
 8008f22:	d82d      	bhi.n	8008f80 <__ssputs_r+0x70>
 8008f24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f28:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008f2c:	d026      	beq.n	8008f7c <__ssputs_r+0x6c>
 8008f2e:	6965      	ldr	r5, [r4, #20]
 8008f30:	6909      	ldr	r1, [r1, #16]
 8008f32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f36:	eba3 0901 	sub.w	r9, r3, r1
 8008f3a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f3e:	1c7b      	adds	r3, r7, #1
 8008f40:	444b      	add	r3, r9
 8008f42:	106d      	asrs	r5, r5, #1
 8008f44:	429d      	cmp	r5, r3
 8008f46:	bf38      	it	cc
 8008f48:	461d      	movcc	r5, r3
 8008f4a:	0553      	lsls	r3, r2, #21
 8008f4c:	d527      	bpl.n	8008f9e <__ssputs_r+0x8e>
 8008f4e:	4629      	mov	r1, r5
 8008f50:	f7ff ff52 	bl	8008df8 <_malloc_r>
 8008f54:	4606      	mov	r6, r0
 8008f56:	b360      	cbz	r0, 8008fb2 <__ssputs_r+0xa2>
 8008f58:	6921      	ldr	r1, [r4, #16]
 8008f5a:	464a      	mov	r2, r9
 8008f5c:	f000 fae8 	bl	8009530 <memcpy>
 8008f60:	89a3      	ldrh	r3, [r4, #12]
 8008f62:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008f66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f6a:	81a3      	strh	r3, [r4, #12]
 8008f6c:	6126      	str	r6, [r4, #16]
 8008f6e:	6165      	str	r5, [r4, #20]
 8008f70:	444e      	add	r6, r9
 8008f72:	eba5 0509 	sub.w	r5, r5, r9
 8008f76:	6026      	str	r6, [r4, #0]
 8008f78:	60a5      	str	r5, [r4, #8]
 8008f7a:	463e      	mov	r6, r7
 8008f7c:	42be      	cmp	r6, r7
 8008f7e:	d900      	bls.n	8008f82 <__ssputs_r+0x72>
 8008f80:	463e      	mov	r6, r7
 8008f82:	6820      	ldr	r0, [r4, #0]
 8008f84:	4632      	mov	r2, r6
 8008f86:	4641      	mov	r1, r8
 8008f88:	f000 faa8 	bl	80094dc <memmove>
 8008f8c:	68a3      	ldr	r3, [r4, #8]
 8008f8e:	1b9b      	subs	r3, r3, r6
 8008f90:	60a3      	str	r3, [r4, #8]
 8008f92:	6823      	ldr	r3, [r4, #0]
 8008f94:	4433      	add	r3, r6
 8008f96:	6023      	str	r3, [r4, #0]
 8008f98:	2000      	movs	r0, #0
 8008f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f9e:	462a      	mov	r2, r5
 8008fa0:	f000 fad4 	bl	800954c <_realloc_r>
 8008fa4:	4606      	mov	r6, r0
 8008fa6:	2800      	cmp	r0, #0
 8008fa8:	d1e0      	bne.n	8008f6c <__ssputs_r+0x5c>
 8008faa:	6921      	ldr	r1, [r4, #16]
 8008fac:	4650      	mov	r0, sl
 8008fae:	f7ff feb7 	bl	8008d20 <_free_r>
 8008fb2:	230c      	movs	r3, #12
 8008fb4:	f8ca 3000 	str.w	r3, [sl]
 8008fb8:	89a3      	ldrh	r3, [r4, #12]
 8008fba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fbe:	81a3      	strh	r3, [r4, #12]
 8008fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8008fc4:	e7e9      	b.n	8008f9a <__ssputs_r+0x8a>
	...

08008fc8 <_svfiprintf_r>:
 8008fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fcc:	4698      	mov	r8, r3
 8008fce:	898b      	ldrh	r3, [r1, #12]
 8008fd0:	061b      	lsls	r3, r3, #24
 8008fd2:	b09d      	sub	sp, #116	@ 0x74
 8008fd4:	4607      	mov	r7, r0
 8008fd6:	460d      	mov	r5, r1
 8008fd8:	4614      	mov	r4, r2
 8008fda:	d510      	bpl.n	8008ffe <_svfiprintf_r+0x36>
 8008fdc:	690b      	ldr	r3, [r1, #16]
 8008fde:	b973      	cbnz	r3, 8008ffe <_svfiprintf_r+0x36>
 8008fe0:	2140      	movs	r1, #64	@ 0x40
 8008fe2:	f7ff ff09 	bl	8008df8 <_malloc_r>
 8008fe6:	6028      	str	r0, [r5, #0]
 8008fe8:	6128      	str	r0, [r5, #16]
 8008fea:	b930      	cbnz	r0, 8008ffa <_svfiprintf_r+0x32>
 8008fec:	230c      	movs	r3, #12
 8008fee:	603b      	str	r3, [r7, #0]
 8008ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff4:	b01d      	add	sp, #116	@ 0x74
 8008ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ffa:	2340      	movs	r3, #64	@ 0x40
 8008ffc:	616b      	str	r3, [r5, #20]
 8008ffe:	2300      	movs	r3, #0
 8009000:	9309      	str	r3, [sp, #36]	@ 0x24
 8009002:	2320      	movs	r3, #32
 8009004:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009008:	f8cd 800c 	str.w	r8, [sp, #12]
 800900c:	2330      	movs	r3, #48	@ 0x30
 800900e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80091ac <_svfiprintf_r+0x1e4>
 8009012:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009016:	f04f 0901 	mov.w	r9, #1
 800901a:	4623      	mov	r3, r4
 800901c:	469a      	mov	sl, r3
 800901e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009022:	b10a      	cbz	r2, 8009028 <_svfiprintf_r+0x60>
 8009024:	2a25      	cmp	r2, #37	@ 0x25
 8009026:	d1f9      	bne.n	800901c <_svfiprintf_r+0x54>
 8009028:	ebba 0b04 	subs.w	fp, sl, r4
 800902c:	d00b      	beq.n	8009046 <_svfiprintf_r+0x7e>
 800902e:	465b      	mov	r3, fp
 8009030:	4622      	mov	r2, r4
 8009032:	4629      	mov	r1, r5
 8009034:	4638      	mov	r0, r7
 8009036:	f7ff ff6b 	bl	8008f10 <__ssputs_r>
 800903a:	3001      	adds	r0, #1
 800903c:	f000 80a7 	beq.w	800918e <_svfiprintf_r+0x1c6>
 8009040:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009042:	445a      	add	r2, fp
 8009044:	9209      	str	r2, [sp, #36]	@ 0x24
 8009046:	f89a 3000 	ldrb.w	r3, [sl]
 800904a:	2b00      	cmp	r3, #0
 800904c:	f000 809f 	beq.w	800918e <_svfiprintf_r+0x1c6>
 8009050:	2300      	movs	r3, #0
 8009052:	f04f 32ff 	mov.w	r2, #4294967295
 8009056:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800905a:	f10a 0a01 	add.w	sl, sl, #1
 800905e:	9304      	str	r3, [sp, #16]
 8009060:	9307      	str	r3, [sp, #28]
 8009062:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009066:	931a      	str	r3, [sp, #104]	@ 0x68
 8009068:	4654      	mov	r4, sl
 800906a:	2205      	movs	r2, #5
 800906c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009070:	484e      	ldr	r0, [pc, #312]	@ (80091ac <_svfiprintf_r+0x1e4>)
 8009072:	f7f7 f8cd 	bl	8000210 <memchr>
 8009076:	9a04      	ldr	r2, [sp, #16]
 8009078:	b9d8      	cbnz	r0, 80090b2 <_svfiprintf_r+0xea>
 800907a:	06d0      	lsls	r0, r2, #27
 800907c:	bf44      	itt	mi
 800907e:	2320      	movmi	r3, #32
 8009080:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009084:	0711      	lsls	r1, r2, #28
 8009086:	bf44      	itt	mi
 8009088:	232b      	movmi	r3, #43	@ 0x2b
 800908a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800908e:	f89a 3000 	ldrb.w	r3, [sl]
 8009092:	2b2a      	cmp	r3, #42	@ 0x2a
 8009094:	d015      	beq.n	80090c2 <_svfiprintf_r+0xfa>
 8009096:	9a07      	ldr	r2, [sp, #28]
 8009098:	4654      	mov	r4, sl
 800909a:	2000      	movs	r0, #0
 800909c:	f04f 0c0a 	mov.w	ip, #10
 80090a0:	4621      	mov	r1, r4
 80090a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090a6:	3b30      	subs	r3, #48	@ 0x30
 80090a8:	2b09      	cmp	r3, #9
 80090aa:	d94b      	bls.n	8009144 <_svfiprintf_r+0x17c>
 80090ac:	b1b0      	cbz	r0, 80090dc <_svfiprintf_r+0x114>
 80090ae:	9207      	str	r2, [sp, #28]
 80090b0:	e014      	b.n	80090dc <_svfiprintf_r+0x114>
 80090b2:	eba0 0308 	sub.w	r3, r0, r8
 80090b6:	fa09 f303 	lsl.w	r3, r9, r3
 80090ba:	4313      	orrs	r3, r2
 80090bc:	9304      	str	r3, [sp, #16]
 80090be:	46a2      	mov	sl, r4
 80090c0:	e7d2      	b.n	8009068 <_svfiprintf_r+0xa0>
 80090c2:	9b03      	ldr	r3, [sp, #12]
 80090c4:	1d19      	adds	r1, r3, #4
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	9103      	str	r1, [sp, #12]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	bfbb      	ittet	lt
 80090ce:	425b      	neglt	r3, r3
 80090d0:	f042 0202 	orrlt.w	r2, r2, #2
 80090d4:	9307      	strge	r3, [sp, #28]
 80090d6:	9307      	strlt	r3, [sp, #28]
 80090d8:	bfb8      	it	lt
 80090da:	9204      	strlt	r2, [sp, #16]
 80090dc:	7823      	ldrb	r3, [r4, #0]
 80090de:	2b2e      	cmp	r3, #46	@ 0x2e
 80090e0:	d10a      	bne.n	80090f8 <_svfiprintf_r+0x130>
 80090e2:	7863      	ldrb	r3, [r4, #1]
 80090e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80090e6:	d132      	bne.n	800914e <_svfiprintf_r+0x186>
 80090e8:	9b03      	ldr	r3, [sp, #12]
 80090ea:	1d1a      	adds	r2, r3, #4
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	9203      	str	r2, [sp, #12]
 80090f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80090f4:	3402      	adds	r4, #2
 80090f6:	9305      	str	r3, [sp, #20]
 80090f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80091bc <_svfiprintf_r+0x1f4>
 80090fc:	7821      	ldrb	r1, [r4, #0]
 80090fe:	2203      	movs	r2, #3
 8009100:	4650      	mov	r0, sl
 8009102:	f7f7 f885 	bl	8000210 <memchr>
 8009106:	b138      	cbz	r0, 8009118 <_svfiprintf_r+0x150>
 8009108:	9b04      	ldr	r3, [sp, #16]
 800910a:	eba0 000a 	sub.w	r0, r0, sl
 800910e:	2240      	movs	r2, #64	@ 0x40
 8009110:	4082      	lsls	r2, r0
 8009112:	4313      	orrs	r3, r2
 8009114:	3401      	adds	r4, #1
 8009116:	9304      	str	r3, [sp, #16]
 8009118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800911c:	4824      	ldr	r0, [pc, #144]	@ (80091b0 <_svfiprintf_r+0x1e8>)
 800911e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009122:	2206      	movs	r2, #6
 8009124:	f7f7 f874 	bl	8000210 <memchr>
 8009128:	2800      	cmp	r0, #0
 800912a:	d036      	beq.n	800919a <_svfiprintf_r+0x1d2>
 800912c:	4b21      	ldr	r3, [pc, #132]	@ (80091b4 <_svfiprintf_r+0x1ec>)
 800912e:	bb1b      	cbnz	r3, 8009178 <_svfiprintf_r+0x1b0>
 8009130:	9b03      	ldr	r3, [sp, #12]
 8009132:	3307      	adds	r3, #7
 8009134:	f023 0307 	bic.w	r3, r3, #7
 8009138:	3308      	adds	r3, #8
 800913a:	9303      	str	r3, [sp, #12]
 800913c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800913e:	4433      	add	r3, r6
 8009140:	9309      	str	r3, [sp, #36]	@ 0x24
 8009142:	e76a      	b.n	800901a <_svfiprintf_r+0x52>
 8009144:	fb0c 3202 	mla	r2, ip, r2, r3
 8009148:	460c      	mov	r4, r1
 800914a:	2001      	movs	r0, #1
 800914c:	e7a8      	b.n	80090a0 <_svfiprintf_r+0xd8>
 800914e:	2300      	movs	r3, #0
 8009150:	3401      	adds	r4, #1
 8009152:	9305      	str	r3, [sp, #20]
 8009154:	4619      	mov	r1, r3
 8009156:	f04f 0c0a 	mov.w	ip, #10
 800915a:	4620      	mov	r0, r4
 800915c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009160:	3a30      	subs	r2, #48	@ 0x30
 8009162:	2a09      	cmp	r2, #9
 8009164:	d903      	bls.n	800916e <_svfiprintf_r+0x1a6>
 8009166:	2b00      	cmp	r3, #0
 8009168:	d0c6      	beq.n	80090f8 <_svfiprintf_r+0x130>
 800916a:	9105      	str	r1, [sp, #20]
 800916c:	e7c4      	b.n	80090f8 <_svfiprintf_r+0x130>
 800916e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009172:	4604      	mov	r4, r0
 8009174:	2301      	movs	r3, #1
 8009176:	e7f0      	b.n	800915a <_svfiprintf_r+0x192>
 8009178:	ab03      	add	r3, sp, #12
 800917a:	9300      	str	r3, [sp, #0]
 800917c:	462a      	mov	r2, r5
 800917e:	4b0e      	ldr	r3, [pc, #56]	@ (80091b8 <_svfiprintf_r+0x1f0>)
 8009180:	a904      	add	r1, sp, #16
 8009182:	4638      	mov	r0, r7
 8009184:	f3af 8000 	nop.w
 8009188:	1c42      	adds	r2, r0, #1
 800918a:	4606      	mov	r6, r0
 800918c:	d1d6      	bne.n	800913c <_svfiprintf_r+0x174>
 800918e:	89ab      	ldrh	r3, [r5, #12]
 8009190:	065b      	lsls	r3, r3, #25
 8009192:	f53f af2d 	bmi.w	8008ff0 <_svfiprintf_r+0x28>
 8009196:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009198:	e72c      	b.n	8008ff4 <_svfiprintf_r+0x2c>
 800919a:	ab03      	add	r3, sp, #12
 800919c:	9300      	str	r3, [sp, #0]
 800919e:	462a      	mov	r2, r5
 80091a0:	4b05      	ldr	r3, [pc, #20]	@ (80091b8 <_svfiprintf_r+0x1f0>)
 80091a2:	a904      	add	r1, sp, #16
 80091a4:	4638      	mov	r0, r7
 80091a6:	f000 f879 	bl	800929c <_printf_i>
 80091aa:	e7ed      	b.n	8009188 <_svfiprintf_r+0x1c0>
 80091ac:	080096e4 	.word	0x080096e4
 80091b0:	080096ee 	.word	0x080096ee
 80091b4:	00000000 	.word	0x00000000
 80091b8:	08008f11 	.word	0x08008f11
 80091bc:	080096ea 	.word	0x080096ea

080091c0 <_printf_common>:
 80091c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091c4:	4616      	mov	r6, r2
 80091c6:	4698      	mov	r8, r3
 80091c8:	688a      	ldr	r2, [r1, #8]
 80091ca:	690b      	ldr	r3, [r1, #16]
 80091cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80091d0:	4293      	cmp	r3, r2
 80091d2:	bfb8      	it	lt
 80091d4:	4613      	movlt	r3, r2
 80091d6:	6033      	str	r3, [r6, #0]
 80091d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80091dc:	4607      	mov	r7, r0
 80091de:	460c      	mov	r4, r1
 80091e0:	b10a      	cbz	r2, 80091e6 <_printf_common+0x26>
 80091e2:	3301      	adds	r3, #1
 80091e4:	6033      	str	r3, [r6, #0]
 80091e6:	6823      	ldr	r3, [r4, #0]
 80091e8:	0699      	lsls	r1, r3, #26
 80091ea:	bf42      	ittt	mi
 80091ec:	6833      	ldrmi	r3, [r6, #0]
 80091ee:	3302      	addmi	r3, #2
 80091f0:	6033      	strmi	r3, [r6, #0]
 80091f2:	6825      	ldr	r5, [r4, #0]
 80091f4:	f015 0506 	ands.w	r5, r5, #6
 80091f8:	d106      	bne.n	8009208 <_printf_common+0x48>
 80091fa:	f104 0a19 	add.w	sl, r4, #25
 80091fe:	68e3      	ldr	r3, [r4, #12]
 8009200:	6832      	ldr	r2, [r6, #0]
 8009202:	1a9b      	subs	r3, r3, r2
 8009204:	42ab      	cmp	r3, r5
 8009206:	dc26      	bgt.n	8009256 <_printf_common+0x96>
 8009208:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800920c:	6822      	ldr	r2, [r4, #0]
 800920e:	3b00      	subs	r3, #0
 8009210:	bf18      	it	ne
 8009212:	2301      	movne	r3, #1
 8009214:	0692      	lsls	r2, r2, #26
 8009216:	d42b      	bmi.n	8009270 <_printf_common+0xb0>
 8009218:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800921c:	4641      	mov	r1, r8
 800921e:	4638      	mov	r0, r7
 8009220:	47c8      	blx	r9
 8009222:	3001      	adds	r0, #1
 8009224:	d01e      	beq.n	8009264 <_printf_common+0xa4>
 8009226:	6823      	ldr	r3, [r4, #0]
 8009228:	6922      	ldr	r2, [r4, #16]
 800922a:	f003 0306 	and.w	r3, r3, #6
 800922e:	2b04      	cmp	r3, #4
 8009230:	bf02      	ittt	eq
 8009232:	68e5      	ldreq	r5, [r4, #12]
 8009234:	6833      	ldreq	r3, [r6, #0]
 8009236:	1aed      	subeq	r5, r5, r3
 8009238:	68a3      	ldr	r3, [r4, #8]
 800923a:	bf0c      	ite	eq
 800923c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009240:	2500      	movne	r5, #0
 8009242:	4293      	cmp	r3, r2
 8009244:	bfc4      	itt	gt
 8009246:	1a9b      	subgt	r3, r3, r2
 8009248:	18ed      	addgt	r5, r5, r3
 800924a:	2600      	movs	r6, #0
 800924c:	341a      	adds	r4, #26
 800924e:	42b5      	cmp	r5, r6
 8009250:	d11a      	bne.n	8009288 <_printf_common+0xc8>
 8009252:	2000      	movs	r0, #0
 8009254:	e008      	b.n	8009268 <_printf_common+0xa8>
 8009256:	2301      	movs	r3, #1
 8009258:	4652      	mov	r2, sl
 800925a:	4641      	mov	r1, r8
 800925c:	4638      	mov	r0, r7
 800925e:	47c8      	blx	r9
 8009260:	3001      	adds	r0, #1
 8009262:	d103      	bne.n	800926c <_printf_common+0xac>
 8009264:	f04f 30ff 	mov.w	r0, #4294967295
 8009268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800926c:	3501      	adds	r5, #1
 800926e:	e7c6      	b.n	80091fe <_printf_common+0x3e>
 8009270:	18e1      	adds	r1, r4, r3
 8009272:	1c5a      	adds	r2, r3, #1
 8009274:	2030      	movs	r0, #48	@ 0x30
 8009276:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800927a:	4422      	add	r2, r4
 800927c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009280:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009284:	3302      	adds	r3, #2
 8009286:	e7c7      	b.n	8009218 <_printf_common+0x58>
 8009288:	2301      	movs	r3, #1
 800928a:	4622      	mov	r2, r4
 800928c:	4641      	mov	r1, r8
 800928e:	4638      	mov	r0, r7
 8009290:	47c8      	blx	r9
 8009292:	3001      	adds	r0, #1
 8009294:	d0e6      	beq.n	8009264 <_printf_common+0xa4>
 8009296:	3601      	adds	r6, #1
 8009298:	e7d9      	b.n	800924e <_printf_common+0x8e>
	...

0800929c <_printf_i>:
 800929c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092a0:	7e0f      	ldrb	r7, [r1, #24]
 80092a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80092a4:	2f78      	cmp	r7, #120	@ 0x78
 80092a6:	4691      	mov	r9, r2
 80092a8:	4680      	mov	r8, r0
 80092aa:	460c      	mov	r4, r1
 80092ac:	469a      	mov	sl, r3
 80092ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80092b2:	d807      	bhi.n	80092c4 <_printf_i+0x28>
 80092b4:	2f62      	cmp	r7, #98	@ 0x62
 80092b6:	d80a      	bhi.n	80092ce <_printf_i+0x32>
 80092b8:	2f00      	cmp	r7, #0
 80092ba:	f000 80d2 	beq.w	8009462 <_printf_i+0x1c6>
 80092be:	2f58      	cmp	r7, #88	@ 0x58
 80092c0:	f000 80b9 	beq.w	8009436 <_printf_i+0x19a>
 80092c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80092c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80092cc:	e03a      	b.n	8009344 <_printf_i+0xa8>
 80092ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80092d2:	2b15      	cmp	r3, #21
 80092d4:	d8f6      	bhi.n	80092c4 <_printf_i+0x28>
 80092d6:	a101      	add	r1, pc, #4	@ (adr r1, 80092dc <_printf_i+0x40>)
 80092d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80092dc:	08009335 	.word	0x08009335
 80092e0:	08009349 	.word	0x08009349
 80092e4:	080092c5 	.word	0x080092c5
 80092e8:	080092c5 	.word	0x080092c5
 80092ec:	080092c5 	.word	0x080092c5
 80092f0:	080092c5 	.word	0x080092c5
 80092f4:	08009349 	.word	0x08009349
 80092f8:	080092c5 	.word	0x080092c5
 80092fc:	080092c5 	.word	0x080092c5
 8009300:	080092c5 	.word	0x080092c5
 8009304:	080092c5 	.word	0x080092c5
 8009308:	08009449 	.word	0x08009449
 800930c:	08009373 	.word	0x08009373
 8009310:	08009403 	.word	0x08009403
 8009314:	080092c5 	.word	0x080092c5
 8009318:	080092c5 	.word	0x080092c5
 800931c:	0800946b 	.word	0x0800946b
 8009320:	080092c5 	.word	0x080092c5
 8009324:	08009373 	.word	0x08009373
 8009328:	080092c5 	.word	0x080092c5
 800932c:	080092c5 	.word	0x080092c5
 8009330:	0800940b 	.word	0x0800940b
 8009334:	6833      	ldr	r3, [r6, #0]
 8009336:	1d1a      	adds	r2, r3, #4
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	6032      	str	r2, [r6, #0]
 800933c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009340:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009344:	2301      	movs	r3, #1
 8009346:	e09d      	b.n	8009484 <_printf_i+0x1e8>
 8009348:	6833      	ldr	r3, [r6, #0]
 800934a:	6820      	ldr	r0, [r4, #0]
 800934c:	1d19      	adds	r1, r3, #4
 800934e:	6031      	str	r1, [r6, #0]
 8009350:	0606      	lsls	r6, r0, #24
 8009352:	d501      	bpl.n	8009358 <_printf_i+0xbc>
 8009354:	681d      	ldr	r5, [r3, #0]
 8009356:	e003      	b.n	8009360 <_printf_i+0xc4>
 8009358:	0645      	lsls	r5, r0, #25
 800935a:	d5fb      	bpl.n	8009354 <_printf_i+0xb8>
 800935c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009360:	2d00      	cmp	r5, #0
 8009362:	da03      	bge.n	800936c <_printf_i+0xd0>
 8009364:	232d      	movs	r3, #45	@ 0x2d
 8009366:	426d      	negs	r5, r5
 8009368:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800936c:	4859      	ldr	r0, [pc, #356]	@ (80094d4 <_printf_i+0x238>)
 800936e:	230a      	movs	r3, #10
 8009370:	e011      	b.n	8009396 <_printf_i+0xfa>
 8009372:	6821      	ldr	r1, [r4, #0]
 8009374:	6833      	ldr	r3, [r6, #0]
 8009376:	0608      	lsls	r0, r1, #24
 8009378:	f853 5b04 	ldr.w	r5, [r3], #4
 800937c:	d402      	bmi.n	8009384 <_printf_i+0xe8>
 800937e:	0649      	lsls	r1, r1, #25
 8009380:	bf48      	it	mi
 8009382:	b2ad      	uxthmi	r5, r5
 8009384:	2f6f      	cmp	r7, #111	@ 0x6f
 8009386:	4853      	ldr	r0, [pc, #332]	@ (80094d4 <_printf_i+0x238>)
 8009388:	6033      	str	r3, [r6, #0]
 800938a:	bf14      	ite	ne
 800938c:	230a      	movne	r3, #10
 800938e:	2308      	moveq	r3, #8
 8009390:	2100      	movs	r1, #0
 8009392:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009396:	6866      	ldr	r6, [r4, #4]
 8009398:	60a6      	str	r6, [r4, #8]
 800939a:	2e00      	cmp	r6, #0
 800939c:	bfa2      	ittt	ge
 800939e:	6821      	ldrge	r1, [r4, #0]
 80093a0:	f021 0104 	bicge.w	r1, r1, #4
 80093a4:	6021      	strge	r1, [r4, #0]
 80093a6:	b90d      	cbnz	r5, 80093ac <_printf_i+0x110>
 80093a8:	2e00      	cmp	r6, #0
 80093aa:	d04b      	beq.n	8009444 <_printf_i+0x1a8>
 80093ac:	4616      	mov	r6, r2
 80093ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80093b2:	fb03 5711 	mls	r7, r3, r1, r5
 80093b6:	5dc7      	ldrb	r7, [r0, r7]
 80093b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80093bc:	462f      	mov	r7, r5
 80093be:	42bb      	cmp	r3, r7
 80093c0:	460d      	mov	r5, r1
 80093c2:	d9f4      	bls.n	80093ae <_printf_i+0x112>
 80093c4:	2b08      	cmp	r3, #8
 80093c6:	d10b      	bne.n	80093e0 <_printf_i+0x144>
 80093c8:	6823      	ldr	r3, [r4, #0]
 80093ca:	07df      	lsls	r7, r3, #31
 80093cc:	d508      	bpl.n	80093e0 <_printf_i+0x144>
 80093ce:	6923      	ldr	r3, [r4, #16]
 80093d0:	6861      	ldr	r1, [r4, #4]
 80093d2:	4299      	cmp	r1, r3
 80093d4:	bfde      	ittt	le
 80093d6:	2330      	movle	r3, #48	@ 0x30
 80093d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80093dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80093e0:	1b92      	subs	r2, r2, r6
 80093e2:	6122      	str	r2, [r4, #16]
 80093e4:	f8cd a000 	str.w	sl, [sp]
 80093e8:	464b      	mov	r3, r9
 80093ea:	aa03      	add	r2, sp, #12
 80093ec:	4621      	mov	r1, r4
 80093ee:	4640      	mov	r0, r8
 80093f0:	f7ff fee6 	bl	80091c0 <_printf_common>
 80093f4:	3001      	adds	r0, #1
 80093f6:	d14a      	bne.n	800948e <_printf_i+0x1f2>
 80093f8:	f04f 30ff 	mov.w	r0, #4294967295
 80093fc:	b004      	add	sp, #16
 80093fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009402:	6823      	ldr	r3, [r4, #0]
 8009404:	f043 0320 	orr.w	r3, r3, #32
 8009408:	6023      	str	r3, [r4, #0]
 800940a:	4833      	ldr	r0, [pc, #204]	@ (80094d8 <_printf_i+0x23c>)
 800940c:	2778      	movs	r7, #120	@ 0x78
 800940e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009412:	6823      	ldr	r3, [r4, #0]
 8009414:	6831      	ldr	r1, [r6, #0]
 8009416:	061f      	lsls	r7, r3, #24
 8009418:	f851 5b04 	ldr.w	r5, [r1], #4
 800941c:	d402      	bmi.n	8009424 <_printf_i+0x188>
 800941e:	065f      	lsls	r7, r3, #25
 8009420:	bf48      	it	mi
 8009422:	b2ad      	uxthmi	r5, r5
 8009424:	6031      	str	r1, [r6, #0]
 8009426:	07d9      	lsls	r1, r3, #31
 8009428:	bf44      	itt	mi
 800942a:	f043 0320 	orrmi.w	r3, r3, #32
 800942e:	6023      	strmi	r3, [r4, #0]
 8009430:	b11d      	cbz	r5, 800943a <_printf_i+0x19e>
 8009432:	2310      	movs	r3, #16
 8009434:	e7ac      	b.n	8009390 <_printf_i+0xf4>
 8009436:	4827      	ldr	r0, [pc, #156]	@ (80094d4 <_printf_i+0x238>)
 8009438:	e7e9      	b.n	800940e <_printf_i+0x172>
 800943a:	6823      	ldr	r3, [r4, #0]
 800943c:	f023 0320 	bic.w	r3, r3, #32
 8009440:	6023      	str	r3, [r4, #0]
 8009442:	e7f6      	b.n	8009432 <_printf_i+0x196>
 8009444:	4616      	mov	r6, r2
 8009446:	e7bd      	b.n	80093c4 <_printf_i+0x128>
 8009448:	6833      	ldr	r3, [r6, #0]
 800944a:	6825      	ldr	r5, [r4, #0]
 800944c:	6961      	ldr	r1, [r4, #20]
 800944e:	1d18      	adds	r0, r3, #4
 8009450:	6030      	str	r0, [r6, #0]
 8009452:	062e      	lsls	r6, r5, #24
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	d501      	bpl.n	800945c <_printf_i+0x1c0>
 8009458:	6019      	str	r1, [r3, #0]
 800945a:	e002      	b.n	8009462 <_printf_i+0x1c6>
 800945c:	0668      	lsls	r0, r5, #25
 800945e:	d5fb      	bpl.n	8009458 <_printf_i+0x1bc>
 8009460:	8019      	strh	r1, [r3, #0]
 8009462:	2300      	movs	r3, #0
 8009464:	6123      	str	r3, [r4, #16]
 8009466:	4616      	mov	r6, r2
 8009468:	e7bc      	b.n	80093e4 <_printf_i+0x148>
 800946a:	6833      	ldr	r3, [r6, #0]
 800946c:	1d1a      	adds	r2, r3, #4
 800946e:	6032      	str	r2, [r6, #0]
 8009470:	681e      	ldr	r6, [r3, #0]
 8009472:	6862      	ldr	r2, [r4, #4]
 8009474:	2100      	movs	r1, #0
 8009476:	4630      	mov	r0, r6
 8009478:	f7f6 feca 	bl	8000210 <memchr>
 800947c:	b108      	cbz	r0, 8009482 <_printf_i+0x1e6>
 800947e:	1b80      	subs	r0, r0, r6
 8009480:	6060      	str	r0, [r4, #4]
 8009482:	6863      	ldr	r3, [r4, #4]
 8009484:	6123      	str	r3, [r4, #16]
 8009486:	2300      	movs	r3, #0
 8009488:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800948c:	e7aa      	b.n	80093e4 <_printf_i+0x148>
 800948e:	6923      	ldr	r3, [r4, #16]
 8009490:	4632      	mov	r2, r6
 8009492:	4649      	mov	r1, r9
 8009494:	4640      	mov	r0, r8
 8009496:	47d0      	blx	sl
 8009498:	3001      	adds	r0, #1
 800949a:	d0ad      	beq.n	80093f8 <_printf_i+0x15c>
 800949c:	6823      	ldr	r3, [r4, #0]
 800949e:	079b      	lsls	r3, r3, #30
 80094a0:	d413      	bmi.n	80094ca <_printf_i+0x22e>
 80094a2:	68e0      	ldr	r0, [r4, #12]
 80094a4:	9b03      	ldr	r3, [sp, #12]
 80094a6:	4298      	cmp	r0, r3
 80094a8:	bfb8      	it	lt
 80094aa:	4618      	movlt	r0, r3
 80094ac:	e7a6      	b.n	80093fc <_printf_i+0x160>
 80094ae:	2301      	movs	r3, #1
 80094b0:	4632      	mov	r2, r6
 80094b2:	4649      	mov	r1, r9
 80094b4:	4640      	mov	r0, r8
 80094b6:	47d0      	blx	sl
 80094b8:	3001      	adds	r0, #1
 80094ba:	d09d      	beq.n	80093f8 <_printf_i+0x15c>
 80094bc:	3501      	adds	r5, #1
 80094be:	68e3      	ldr	r3, [r4, #12]
 80094c0:	9903      	ldr	r1, [sp, #12]
 80094c2:	1a5b      	subs	r3, r3, r1
 80094c4:	42ab      	cmp	r3, r5
 80094c6:	dcf2      	bgt.n	80094ae <_printf_i+0x212>
 80094c8:	e7eb      	b.n	80094a2 <_printf_i+0x206>
 80094ca:	2500      	movs	r5, #0
 80094cc:	f104 0619 	add.w	r6, r4, #25
 80094d0:	e7f5      	b.n	80094be <_printf_i+0x222>
 80094d2:	bf00      	nop
 80094d4:	080096f5 	.word	0x080096f5
 80094d8:	08009706 	.word	0x08009706

080094dc <memmove>:
 80094dc:	4288      	cmp	r0, r1
 80094de:	b510      	push	{r4, lr}
 80094e0:	eb01 0402 	add.w	r4, r1, r2
 80094e4:	d902      	bls.n	80094ec <memmove+0x10>
 80094e6:	4284      	cmp	r4, r0
 80094e8:	4623      	mov	r3, r4
 80094ea:	d807      	bhi.n	80094fc <memmove+0x20>
 80094ec:	1e43      	subs	r3, r0, #1
 80094ee:	42a1      	cmp	r1, r4
 80094f0:	d008      	beq.n	8009504 <memmove+0x28>
 80094f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094fa:	e7f8      	b.n	80094ee <memmove+0x12>
 80094fc:	4402      	add	r2, r0
 80094fe:	4601      	mov	r1, r0
 8009500:	428a      	cmp	r2, r1
 8009502:	d100      	bne.n	8009506 <memmove+0x2a>
 8009504:	bd10      	pop	{r4, pc}
 8009506:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800950a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800950e:	e7f7      	b.n	8009500 <memmove+0x24>

08009510 <_sbrk_r>:
 8009510:	b538      	push	{r3, r4, r5, lr}
 8009512:	4d06      	ldr	r5, [pc, #24]	@ (800952c <_sbrk_r+0x1c>)
 8009514:	2300      	movs	r3, #0
 8009516:	4604      	mov	r4, r0
 8009518:	4608      	mov	r0, r1
 800951a:	602b      	str	r3, [r5, #0]
 800951c:	f7f8 fa6c 	bl	80019f8 <_sbrk>
 8009520:	1c43      	adds	r3, r0, #1
 8009522:	d102      	bne.n	800952a <_sbrk_r+0x1a>
 8009524:	682b      	ldr	r3, [r5, #0]
 8009526:	b103      	cbz	r3, 800952a <_sbrk_r+0x1a>
 8009528:	6023      	str	r3, [r4, #0]
 800952a:	bd38      	pop	{r3, r4, r5, pc}
 800952c:	20000690 	.word	0x20000690

08009530 <memcpy>:
 8009530:	440a      	add	r2, r1
 8009532:	4291      	cmp	r1, r2
 8009534:	f100 33ff 	add.w	r3, r0, #4294967295
 8009538:	d100      	bne.n	800953c <memcpy+0xc>
 800953a:	4770      	bx	lr
 800953c:	b510      	push	{r4, lr}
 800953e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009542:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009546:	4291      	cmp	r1, r2
 8009548:	d1f9      	bne.n	800953e <memcpy+0xe>
 800954a:	bd10      	pop	{r4, pc}

0800954c <_realloc_r>:
 800954c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009550:	4680      	mov	r8, r0
 8009552:	4615      	mov	r5, r2
 8009554:	460c      	mov	r4, r1
 8009556:	b921      	cbnz	r1, 8009562 <_realloc_r+0x16>
 8009558:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800955c:	4611      	mov	r1, r2
 800955e:	f7ff bc4b 	b.w	8008df8 <_malloc_r>
 8009562:	b92a      	cbnz	r2, 8009570 <_realloc_r+0x24>
 8009564:	f7ff fbdc 	bl	8008d20 <_free_r>
 8009568:	2400      	movs	r4, #0
 800956a:	4620      	mov	r0, r4
 800956c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009570:	f000 f81a 	bl	80095a8 <_malloc_usable_size_r>
 8009574:	4285      	cmp	r5, r0
 8009576:	4606      	mov	r6, r0
 8009578:	d802      	bhi.n	8009580 <_realloc_r+0x34>
 800957a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800957e:	d8f4      	bhi.n	800956a <_realloc_r+0x1e>
 8009580:	4629      	mov	r1, r5
 8009582:	4640      	mov	r0, r8
 8009584:	f7ff fc38 	bl	8008df8 <_malloc_r>
 8009588:	4607      	mov	r7, r0
 800958a:	2800      	cmp	r0, #0
 800958c:	d0ec      	beq.n	8009568 <_realloc_r+0x1c>
 800958e:	42b5      	cmp	r5, r6
 8009590:	462a      	mov	r2, r5
 8009592:	4621      	mov	r1, r4
 8009594:	bf28      	it	cs
 8009596:	4632      	movcs	r2, r6
 8009598:	f7ff ffca 	bl	8009530 <memcpy>
 800959c:	4621      	mov	r1, r4
 800959e:	4640      	mov	r0, r8
 80095a0:	f7ff fbbe 	bl	8008d20 <_free_r>
 80095a4:	463c      	mov	r4, r7
 80095a6:	e7e0      	b.n	800956a <_realloc_r+0x1e>

080095a8 <_malloc_usable_size_r>:
 80095a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095ac:	1f18      	subs	r0, r3, #4
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	bfbc      	itt	lt
 80095b2:	580b      	ldrlt	r3, [r1, r0]
 80095b4:	18c0      	addlt	r0, r0, r3
 80095b6:	4770      	bx	lr

080095b8 <_init>:
 80095b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ba:	bf00      	nop
 80095bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095be:	bc08      	pop	{r3}
 80095c0:	469e      	mov	lr, r3
 80095c2:	4770      	bx	lr

080095c4 <_fini>:
 80095c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095c6:	bf00      	nop
 80095c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ca:	bc08      	pop	{r3}
 80095cc:	469e      	mov	lr, r3
 80095ce:	4770      	bx	lr
