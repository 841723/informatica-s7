
SdImageDisplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000816c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  0800833c  0800833c  0000933c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008484  08008484  0000a05c  2**0
                  CONTENTS
  4 .ARM          00000008  08008484  08008484  00009484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800848c  0800848c  0000a05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800848c  0800848c  0000948c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008490  08008490  00009490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08008494  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000060c  2000005c  080084f0  0000a05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20000668  080084f0  0000a668  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a2f  00000000  00000000  0000a08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e5b  00000000  00000000  0001aabb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  0001d918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b27  00000000  00000000  0001e7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027e9f  00000000  00000000  0001f317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015545  00000000  00000000  000471b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ece47  00000000  00000000  0005c6fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00149542  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004108  00000000  00000000  00149588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0014d690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008324 	.word	0x08008324

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08008324 	.word	0x08008324

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <FATFS_Init>:
FRESULT res; /* FatFs function common result code */
uint32_t byteswritten; /* File write/read counts */
uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
uint8_t rtext[_MAX_SS];/* File read buffer */

void FATFS_Init() {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 80005a4:	2200      	movs	r2, #0
 80005a6:	4905      	ldr	r1, [pc, #20]	@ (80005bc <FATFS_Init+0x1c>)
 80005a8:	4805      	ldr	r0, [pc, #20]	@ (80005c0 <FATFS_Init+0x20>)
 80005aa:	f007 f88d 	bl	80076c8 <f_mount>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <FATFS_Init+0x18>
	{
		Error_Handler();
 80005b4:	f000 fe5a 	bl	800126c <Error_Handler>
	}
}
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	200002b0 	.word	0x200002b0
 80005c0:	200002b4 	.word	0x200002b4

080005c4 <FATFS_Scan>:
		}
	}
	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
}

void FATFS_Scan(char* path, char filenames[8][64]) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b096      	sub	sp, #88	@ 0x58
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]
	DIR dir;
	FILINFO fno;
    FRESULT res;
    unsigned int idx = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	657b      	str	r3, [r7, #84]	@ 0x54

    res = f_opendir(&dir, path);  // Open directory
 80005d2:	f107 0320 	add.w	r3, r7, #32
 80005d6:	6879      	ldr	r1, [r7, #4]
 80005d8:	4618      	mov	r0, r3
 80005da:	f007 f8bb 	bl	8007754 <f_opendir>
 80005de:	4603      	mov	r3, r0
 80005e0:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    if (res == FR_OK) {
 80005e4:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d13e      	bne.n	800066a <FATFS_Scan+0xa6>
        while (1) {
            res = f_readdir(&dir, &fno);  // Read a directory item
 80005ec:	f107 0208 	add.w	r2, r7, #8
 80005f0:	f107 0320 	add.w	r3, r7, #32
 80005f4:	4611      	mov	r1, r2
 80005f6:	4618      	mov	r0, r3
 80005f8:	f007 f945 	bl	8007886 <f_readdir>
 80005fc:	4603      	mov	r3, r0
 80005fe:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
            if (res != FR_OK || fno.fname[0] == 0) {
 8000602:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000606:	2b00      	cmp	r3, #0
 8000608:	d12a      	bne.n	8000660 <FATFS_Scan+0x9c>
 800060a:	7c7b      	ldrb	r3, [r7, #17]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d027      	beq.n	8000660 <FATFS_Scan+0x9c>
                break;  // No more items
            }

            if (fno.fattrib & AM_DIR) {
 8000610:	7c3b      	ldrb	r3, [r7, #16]
 8000612:	f003 0310 	and.w	r3, r3, #16
 8000616:	2b00      	cmp	r3, #0
 8000618:	d1e8      	bne.n	80005ec <FATFS_Scan+0x28>
                // If it's a directory, you can optionally recurse into it
            } else {
                // Check if the file is an image
                if (strstr(fno.fname, ".BMP") || strstr(fno.fname, ".JPG")) {
 800061a:	f107 0308 	add.w	r3, r7, #8
 800061e:	3309      	adds	r3, #9
 8000620:	4914      	ldr	r1, [pc, #80]	@ (8000674 <FATFS_Scan+0xb0>)
 8000622:	4618      	mov	r0, r3
 8000624:	f007 f9f0 	bl	8007a08 <strstr>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d109      	bne.n	8000642 <FATFS_Scan+0x7e>
 800062e:	f107 0308 	add.w	r3, r7, #8
 8000632:	3309      	adds	r3, #9
 8000634:	4910      	ldr	r1, [pc, #64]	@ (8000678 <FATFS_Scan+0xb4>)
 8000636:	4618      	mov	r0, r3
 8000638:	f007 f9e6 	bl	8007a08 <strstr>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d0d4      	beq.n	80005ec <FATFS_Scan+0x28>
                    // Full file path (assuming 'path' is the current directory)
                    sprintf(filenames[idx], "%s", fno.fname);
 8000642:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000644:	019b      	lsls	r3, r3, #6
 8000646:	683a      	ldr	r2, [r7, #0]
 8000648:	18d0      	adds	r0, r2, r3
 800064a:	f107 0308 	add.w	r3, r7, #8
 800064e:	3309      	adds	r3, #9
 8000650:	461a      	mov	r2, r3
 8000652:	490a      	ldr	r1, [pc, #40]	@ (800067c <FATFS_Scan+0xb8>)
 8000654:	f007 f9b0 	bl	80079b8 <siprintf>
                    idx++;
 8000658:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800065a:	3301      	adds	r3, #1
 800065c:	657b      	str	r3, [r7, #84]	@ 0x54
            res = f_readdir(&dir, &fno);  // Read a directory item
 800065e:	e7c5      	b.n	80005ec <FATFS_Scan+0x28>
                    // Read and display the image
                    //  Read_Image_File(buffer);
                }
            }
        }
        f_closedir(&dir);  // Close the directory
 8000660:	f107 0320 	add.w	r3, r7, #32
 8000664:	4618      	mov	r0, r3
 8000666:	f007 f8e8 	bl	800783a <f_closedir>
    }
}
 800066a:	bf00      	nop
 800066c:	3758      	adds	r7, #88	@ 0x58
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	08008348 	.word	0x08008348
 8000678:	08008350 	.word	0x08008350
 800067c:	08008358 	.word	0x08008358

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000686:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	char filenames[8][64];

  for (unsigned int i = 0; i<8 ;i++) {
 8000688:	2300      	movs	r3, #0
 800068a:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 800068e:	e01e      	b.n	80006ce <main+0x4e>
    for (unsigned int j = 0; j<64 ;j++) {
 8000690:	2300      	movs	r3, #0
 8000692:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 8000696:	e011      	b.n	80006bc <main+0x3c>
      filenames[i][j] = 0;
 8000698:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800069c:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 80006a0:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 80006a4:	019b      	lsls	r3, r3, #6
 80006a6:	441a      	add	r2, r3
 80006a8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80006ac:	4413      	add	r3, r2
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]
    for (unsigned int j = 0; j<64 ;j++) {
 80006b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80006b6:	3301      	adds	r3, #1
 80006b8:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 80006bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80006c0:	2b3f      	cmp	r3, #63	@ 0x3f
 80006c2:	d9e9      	bls.n	8000698 <main+0x18>
  for (unsigned int i = 0; i<8 ;i++) {
 80006c4:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 80006c8:	3301      	adds	r3, #1
 80006ca:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 80006ce:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 80006d2:	2b07      	cmp	r3, #7
 80006d4:	d9dc      	bls.n	8000690 <main+0x10>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d6:	f001 f8d6 	bl	8001886 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006da:	f000 f817 	bl	800070c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006de:	f000 f9a7 	bl	8000a30 <MX_GPIO_Init>
  MX_DMA_Init();
 80006e2:	f000 f97f 	bl	80009e4 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 80006e6:	f000 f95d 	bl	80009a4 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80006ea:	f005 fa07 	bl	8005afc <MX_FATFS_Init>
  MX_DMA2D_Init();
 80006ee:	f000 f875 	bl	80007dc <MX_DMA2D_Init>
  MX_LTDC_Init();
 80006f2:	f000 f8a5 	bl	8000840 <MX_LTDC_Init>
  /* USER CODE BEGIN 2 */
  FATFS_Init();
 80006f6:	f7ff ff53 	bl	80005a0 <FATFS_Init>
  FATFS_Scan("", filenames);
 80006fa:	463b      	mov	r3, r7
 80006fc:	4619      	mov	r1, r3
 80006fe:	4802      	ldr	r0, [pc, #8]	@ (8000708 <main+0x88>)
 8000700:	f7ff ff60 	bl	80005c4 <FATFS_Scan>
  // Display_Image(filenames)
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000704:	bf00      	nop
 8000706:	e7fd      	b.n	8000704 <main+0x84>
 8000708:	0800835c 	.word	0x0800835c

0800070c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b094      	sub	sp, #80	@ 0x50
 8000710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000712:	f107 0320 	add.w	r3, r7, #32
 8000716:	2230      	movs	r2, #48	@ 0x30
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f007 f96c 	bl	80079f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000720:	f107 030c 	add.w	r3, r7, #12
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000730:	4b28      	ldr	r3, [pc, #160]	@ (80007d4 <SystemClock_Config+0xc8>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000734:	4a27      	ldr	r2, [pc, #156]	@ (80007d4 <SystemClock_Config+0xc8>)
 8000736:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800073a:	6413      	str	r3, [r2, #64]	@ 0x40
 800073c:	4b25      	ldr	r3, [pc, #148]	@ (80007d4 <SystemClock_Config+0xc8>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000740:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000748:	4b23      	ldr	r3, [pc, #140]	@ (80007d8 <SystemClock_Config+0xcc>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000750:	4a21      	ldr	r2, [pc, #132]	@ (80007d8 <SystemClock_Config+0xcc>)
 8000752:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000756:	6013      	str	r3, [r2, #0]
 8000758:	4b1f      	ldr	r3, [pc, #124]	@ (80007d8 <SystemClock_Config+0xcc>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000764:	2302      	movs	r3, #2
 8000766:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000768:	2301      	movs	r3, #1
 800076a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800076c:	2310      	movs	r3, #16
 800076e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000770:	2302      	movs	r3, #2
 8000772:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000774:	2300      	movs	r3, #0
 8000776:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000778:	2308      	movs	r3, #8
 800077a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800077c:	2332      	movs	r3, #50	@ 0x32
 800077e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000780:	2302      	movs	r3, #2
 8000782:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000784:	2302      	movs	r3, #2
 8000786:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000788:	f107 0320 	add.w	r3, r7, #32
 800078c:	4618      	mov	r0, r3
 800078e:	f002 fb15 	bl	8002dbc <HAL_RCC_OscConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000798:	f000 fd68 	bl	800126c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079c:	230f      	movs	r3, #15
 800079e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a0:	2302      	movs	r3, #2
 80007a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007a8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	2101      	movs	r1, #1
 80007ba:	4618      	mov	r0, r3
 80007bc:	f002 fda2 	bl	8003304 <HAL_RCC_ClockConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80007c6:	f000 fd51 	bl	800126c <Error_Handler>
  }
}
 80007ca:	bf00      	nop
 80007cc:	3750      	adds	r7, #80	@ 0x50
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40007000 	.word	0x40007000

080007dc <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80007e0:	4b15      	ldr	r3, [pc, #84]	@ (8000838 <MX_DMA2D_Init+0x5c>)
 80007e2:	4a16      	ldr	r2, [pc, #88]	@ (800083c <MX_DMA2D_Init+0x60>)
 80007e4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80007e6:	4b14      	ldr	r3, [pc, #80]	@ (8000838 <MX_DMA2D_Init+0x5c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80007ec:	4b12      	ldr	r3, [pc, #72]	@ (8000838 <MX_DMA2D_Init+0x5c>)
 80007ee:	2202      	movs	r2, #2
 80007f0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80007f2:	4b11      	ldr	r3, [pc, #68]	@ (8000838 <MX_DMA2D_Init+0x5c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000838 <MX_DMA2D_Init+0x5c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000838 <MX_DMA2D_Init+0x5c>)
 8000800:	2202      	movs	r2, #2
 8000802:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000804:	4b0c      	ldr	r3, [pc, #48]	@ (8000838 <MX_DMA2D_Init+0x5c>)
 8000806:	2200      	movs	r2, #0
 8000808:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800080a:	4b0b      	ldr	r3, [pc, #44]	@ (8000838 <MX_DMA2D_Init+0x5c>)
 800080c:	2200      	movs	r2, #0
 800080e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000810:	4809      	ldr	r0, [pc, #36]	@ (8000838 <MX_DMA2D_Init+0x5c>)
 8000812:	f001 fd71 	bl	80022f8 <HAL_DMA2D_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800081c:	f000 fd26 	bl	800126c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000820:	2101      	movs	r1, #1
 8000822:	4805      	ldr	r0, [pc, #20]	@ (8000838 <MX_DMA2D_Init+0x5c>)
 8000824:	f001 fdb2 	bl	800238c <HAL_DMA2D_ConfigLayer>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800082e:	f000 fd1d 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000078 	.word	0x20000078
 800083c:	4002b000 	.word	0x4002b000

08000840 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b09a      	sub	sp, #104	@ 0x68
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000846:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800084a:	2234      	movs	r2, #52	@ 0x34
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f007 f8d2 	bl	80079f8 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000854:	463b      	mov	r3, r7
 8000856:	2234      	movs	r2, #52	@ 0x34
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f007 f8cc 	bl	80079f8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000860:	4b4e      	ldr	r3, [pc, #312]	@ (800099c <MX_LTDC_Init+0x15c>)
 8000862:	4a4f      	ldr	r2, [pc, #316]	@ (80009a0 <MX_LTDC_Init+0x160>)
 8000864:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000866:	4b4d      	ldr	r3, [pc, #308]	@ (800099c <MX_LTDC_Init+0x15c>)
 8000868:	2200      	movs	r2, #0
 800086a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800086c:	4b4b      	ldr	r3, [pc, #300]	@ (800099c <MX_LTDC_Init+0x15c>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000872:	4b4a      	ldr	r3, [pc, #296]	@ (800099c <MX_LTDC_Init+0x15c>)
 8000874:	2200      	movs	r2, #0
 8000876:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000878:	4b48      	ldr	r3, [pc, #288]	@ (800099c <MX_LTDC_Init+0x15c>)
 800087a:	2200      	movs	r2, #0
 800087c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800087e:	4b47      	ldr	r3, [pc, #284]	@ (800099c <MX_LTDC_Init+0x15c>)
 8000880:	2207      	movs	r2, #7
 8000882:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000884:	4b45      	ldr	r3, [pc, #276]	@ (800099c <MX_LTDC_Init+0x15c>)
 8000886:	2203      	movs	r2, #3
 8000888:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800088a:	4b44      	ldr	r3, [pc, #272]	@ (800099c <MX_LTDC_Init+0x15c>)
 800088c:	220e      	movs	r2, #14
 800088e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000890:	4b42      	ldr	r3, [pc, #264]	@ (800099c <MX_LTDC_Init+0x15c>)
 8000892:	2205      	movs	r2, #5
 8000894:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8000896:	4b41      	ldr	r3, [pc, #260]	@ (800099c <MX_LTDC_Init+0x15c>)
 8000898:	f240 228e 	movw	r2, #654	@ 0x28e
 800089c:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800089e:	4b3f      	ldr	r3, [pc, #252]	@ (800099c <MX_LTDC_Init+0x15c>)
 80008a0:	f240 12e5 	movw	r2, #485	@ 0x1e5
 80008a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 80008a6:	4b3d      	ldr	r3, [pc, #244]	@ (800099c <MX_LTDC_Init+0x15c>)
 80008a8:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80008ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 80008ae:	4b3b      	ldr	r3, [pc, #236]	@ (800099c <MX_LTDC_Init+0x15c>)
 80008b0:	f240 12e7 	movw	r2, #487	@ 0x1e7
 80008b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80008b6:	4b39      	ldr	r3, [pc, #228]	@ (800099c <MX_LTDC_Init+0x15c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80008be:	4b37      	ldr	r3, [pc, #220]	@ (800099c <MX_LTDC_Init+0x15c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80008c6:	4b35      	ldr	r3, [pc, #212]	@ (800099c <MX_LTDC_Init+0x15c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80008ce:	4833      	ldr	r0, [pc, #204]	@ (800099c <MX_LTDC_Init+0x15c>)
 80008d0:	f001 ffcc 	bl	800286c <HAL_LTDC_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80008da:	f000 fcc7 	bl	800126c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80008ee:	2300      	movs	r3, #0
 80008f0:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80008fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008fe:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000900:	2305      	movs	r3, #5
 8000902:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000922:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000926:	2200      	movs	r2, #0
 8000928:	4619      	mov	r1, r3
 800092a:	481c      	ldr	r0, [pc, #112]	@ (800099c <MX_LTDC_Init+0x15c>)
 800092c:	f002 f86e 	bl	8002a0c <HAL_LTDC_ConfigLayer>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8000936:	f000 fc99 	bl	800126c <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000956:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800095a:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800095c:	2305      	movs	r3, #5
 800095e:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800097e:	463b      	mov	r3, r7
 8000980:	2201      	movs	r2, #1
 8000982:	4619      	mov	r1, r3
 8000984:	4805      	ldr	r0, [pc, #20]	@ (800099c <MX_LTDC_Init+0x15c>)
 8000986:	f002 f841 	bl	8002a0c <HAL_LTDC_ConfigLayer>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8000990:	f000 fc6c 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000994:	bf00      	nop
 8000996:	3768      	adds	r7, #104	@ 0x68
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	200000b8 	.word	0x200000b8
 80009a0:	40016800 	.word	0x40016800

080009a4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	@ (80009dc <MX_SDMMC1_SD_Init+0x38>)
 80009aa:	4a0d      	ldr	r2, [pc, #52]	@ (80009e0 <MX_SDMMC1_SD_Init+0x3c>)
 80009ac:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	@ (80009dc <MX_SDMMC1_SD_Init+0x38>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80009b4:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <MX_SDMMC1_SD_Init+0x38>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80009ba:	4b08      	ldr	r3, [pc, #32]	@ (80009dc <MX_SDMMC1_SD_Init+0x38>)
 80009bc:	2200      	movs	r2, #0
 80009be:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80009c0:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <MX_SDMMC1_SD_Init+0x38>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80009c6:	4b05      	ldr	r3, [pc, #20]	@ (80009dc <MX_SDMMC1_SD_Init+0x38>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80009cc:	4b03      	ldr	r3, [pc, #12]	@ (80009dc <MX_SDMMC1_SD_Init+0x38>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	20000160 	.word	0x20000160
 80009e0:	40012c00 	.word	0x40012c00

080009e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009ea:	4b10      	ldr	r3, [pc, #64]	@ (8000a2c <MX_DMA_Init+0x48>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	4a0f      	ldr	r2, [pc, #60]	@ (8000a2c <MX_DMA_Init+0x48>)
 80009f0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80009f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a2c <MX_DMA_Init+0x48>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2100      	movs	r1, #0
 8000a06:	203b      	movs	r0, #59	@ 0x3b
 8000a08:	f001 f899 	bl	8001b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000a0c:	203b      	movs	r0, #59	@ 0x3b
 8000a0e:	f001 f8b2 	bl	8001b76 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2100      	movs	r1, #0
 8000a16:	2045      	movs	r0, #69	@ 0x45
 8000a18:	f001 f891 	bl	8001b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000a1c:	2045      	movs	r0, #69	@ 0x45
 8000a1e:	f001 f8aa 	bl	8001b76 <HAL_NVIC_EnableIRQ>

}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40023800 	.word	0x40023800

08000a30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b090      	sub	sp, #64	@ 0x40
 8000a34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
 8000a44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a46:	4bad      	ldr	r3, [pc, #692]	@ (8000cfc <MX_GPIO_Init+0x2cc>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	4aac      	ldr	r2, [pc, #688]	@ (8000cfc <MX_GPIO_Init+0x2cc>)
 8000a4c:	f043 0310 	orr.w	r3, r3, #16
 8000a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a52:	4baa      	ldr	r3, [pc, #680]	@ (8000cfc <MX_GPIO_Init+0x2cc>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	f003 0310 	and.w	r3, r3, #16
 8000a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a5e:	4ba7      	ldr	r3, [pc, #668]	@ (8000cfc <MX_GPIO_Init+0x2cc>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	4aa6      	ldr	r2, [pc, #664]	@ (8000cfc <MX_GPIO_Init+0x2cc>)
 8000a64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6a:	4ba4      	ldr	r3, [pc, #656]	@ (8000cfc <MX_GPIO_Init+0x2cc>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a72:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	4ba1      	ldr	r3, [pc, #644]	@ (8000cfc <MX_GPIO_Init+0x2cc>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	4aa0      	ldr	r2, [pc, #640]	@ (8000cfc <MX_GPIO_Init+0x2cc>)
 8000a7c:	f043 0302 	orr.w	r3, r3, #2
 8000a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a82:	4b9e      	ldr	r3, [pc, #632]	@ (8000cfc <MX_GPIO_Init+0x2cc>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	f003 0302 	and.w	r3, r3, #2
 8000a8a:	623b      	str	r3, [r7, #32]
 8000a8c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a8e:	4b9b      	ldr	r3, [pc, #620]	@ (8000cfc <MX_GPIO_Init+0x2cc>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	4a9a      	ldr	r2, [pc, #616]	@ (8000cfc <MX_GPIO_Init+0x2cc>)
 8000a94:	f043 0308 	orr.w	r3, r3, #8
 8000a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9a:	4b98      	ldr	r3, [pc, #608]	@ (8000cfc <MX_GPIO_Init+0x2cc>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	f003 0308 	and.w	r3, r3, #8
 8000aa2:	61fb      	str	r3, [r7, #28]
 8000aa4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa6:	4b95      	ldr	r3, [pc, #596]	@ (8000cfc <MX_GPIO_Init+0x2cc>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	4a94      	ldr	r2, [pc, #592]	@ (8000cfc <MX_GPIO_Init+0x2cc>)
 8000aac:	f043 0304 	orr.w	r3, r3, #4
 8000ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab2:	4b92      	ldr	r3, [pc, #584]	@ (8000cfc <MX_GPIO_Init+0x2cc>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	f003 0304 	and.w	r3, r3, #4
 8000aba:	61bb      	str	r3, [r7, #24]
 8000abc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	4b8f      	ldr	r3, [pc, #572]	@ (8000cfc <MX_GPIO_Init+0x2cc>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	4a8e      	ldr	r2, [pc, #568]	@ (8000cfc <MX_GPIO_Init+0x2cc>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aca:	4b8c      	ldr	r3, [pc, #560]	@ (8000cfc <MX_GPIO_Init+0x2cc>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	617b      	str	r3, [r7, #20]
 8000ad4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000ad6:	4b89      	ldr	r3, [pc, #548]	@ (8000cfc <MX_GPIO_Init+0x2cc>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	4a88      	ldr	r2, [pc, #544]	@ (8000cfc <MX_GPIO_Init+0x2cc>)
 8000adc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae2:	4b86      	ldr	r3, [pc, #536]	@ (8000cfc <MX_GPIO_Init+0x2cc>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000aee:	4b83      	ldr	r3, [pc, #524]	@ (8000cfc <MX_GPIO_Init+0x2cc>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	4a82      	ldr	r2, [pc, #520]	@ (8000cfc <MX_GPIO_Init+0x2cc>)
 8000af4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afa:	4b80      	ldr	r3, [pc, #512]	@ (8000cfc <MX_GPIO_Init+0x2cc>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000b06:	4b7d      	ldr	r3, [pc, #500]	@ (8000cfc <MX_GPIO_Init+0x2cc>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	4a7c      	ldr	r2, [pc, #496]	@ (8000cfc <MX_GPIO_Init+0x2cc>)
 8000b0c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b12:	4b7a      	ldr	r3, [pc, #488]	@ (8000cfc <MX_GPIO_Init+0x2cc>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b1e:	4b77      	ldr	r3, [pc, #476]	@ (8000cfc <MX_GPIO_Init+0x2cc>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	4a76      	ldr	r2, [pc, #472]	@ (8000cfc <MX_GPIO_Init+0x2cc>)
 8000b24:	f043 0320 	orr.w	r3, r3, #32
 8000b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2a:	4b74      	ldr	r3, [pc, #464]	@ (8000cfc <MX_GPIO_Init+0x2cc>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	f003 0320 	and.w	r3, r3, #32
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b36:	4b71      	ldr	r3, [pc, #452]	@ (8000cfc <MX_GPIO_Init+0x2cc>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	4a70      	ldr	r2, [pc, #448]	@ (8000cfc <MX_GPIO_Init+0x2cc>)
 8000b3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b42:	4b6e      	ldr	r3, [pc, #440]	@ (8000cfc <MX_GPIO_Init+0x2cc>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b4a:	603b      	str	r3, [r7, #0]
 8000b4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000b4e:	2201      	movs	r2, #1
 8000b50:	2120      	movs	r1, #32
 8000b52:	486b      	ldr	r0, [pc, #428]	@ (8000d00 <MX_GPIO_Init+0x2d0>)
 8000b54:	f001 fe70 	bl	8002838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f241 010c 	movw	r1, #4108	@ 0x100c
 8000b5e:	4869      	ldr	r0, [pc, #420]	@ (8000d04 <MX_GPIO_Init+0x2d4>)
 8000b60:	f001 fe6a 	bl	8002838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2108      	movs	r1, #8
 8000b68:	4867      	ldr	r0, [pc, #412]	@ (8000d08 <MX_GPIO_Init+0x2d8>)
 8000b6a:	f001 fe65 	bl	8002838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b74:	4865      	ldr	r0, [pc, #404]	@ (8000d0c <MX_GPIO_Init+0x2dc>)
 8000b76:	f001 fe5f 	bl	8002838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	21c8      	movs	r1, #200	@ 0xc8
 8000b7e:	4864      	ldr	r0, [pc, #400]	@ (8000d10 <MX_GPIO_Init+0x2e0>)
 8000b80:	f001 fe5a 	bl	8002838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000b84:	2308      	movs	r3, #8
 8000b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b94:	4619      	mov	r1, r3
 8000b96:	485f      	ldr	r0, [pc, #380]	@ (8000d14 <MX_GPIO_Init+0x2e4>)
 8000b98:	f001 fc8a 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000b9c:	2304      	movs	r3, #4
 8000b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000bac:	2309      	movs	r3, #9
 8000bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000bb0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4857      	ldr	r0, [pc, #348]	@ (8000d14 <MX_GPIO_Init+0x2e4>)
 8000bb8:	f001 fc7a 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000bbc:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8000bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bce:	230b      	movs	r3, #11
 8000bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bd2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	484d      	ldr	r0, [pc, #308]	@ (8000d10 <MX_GPIO_Init+0x2e0>)
 8000bda:	f001 fc69 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000bde:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bec:	2303      	movs	r3, #3
 8000bee:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bf0:	230c      	movs	r3, #12
 8000bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bf4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4846      	ldr	r0, [pc, #280]	@ (8000d14 <MX_GPIO_Init+0x2e4>)
 8000bfc:	f001 fc58 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000c00:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c06:	2312      	movs	r3, #18
 8000c08:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c12:	2304      	movs	r3, #4
 8000c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	483e      	ldr	r0, [pc, #248]	@ (8000d18 <MX_GPIO_Init+0x2e8>)
 8000c1e:	f001 fc47 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000c22:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8000c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c30:	2303      	movs	r3, #3
 8000c32:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000c34:	230a      	movs	r3, #10
 8000c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4836      	ldr	r0, [pc, #216]	@ (8000d18 <MX_GPIO_Init+0x2e8>)
 8000c40:	f001 fc36 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000c44:	2310      	movs	r3, #16
 8000c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c54:	2302      	movs	r3, #2
 8000c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000c58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	482e      	ldr	r0, [pc, #184]	@ (8000d18 <MX_GPIO_Init+0x2e8>)
 8000c60:	f001 fc26 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000c64:	2380      	movs	r3, #128	@ 0x80
 8000c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000c74:	2308      	movs	r3, #8
 8000c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000c78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4820      	ldr	r0, [pc, #128]	@ (8000d00 <MX_GPIO_Init+0x2d0>)
 8000c80:	f001 fc16 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000c84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c96:	2301      	movs	r3, #1
 8000c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	481e      	ldr	r0, [pc, #120]	@ (8000d1c <MX_GPIO_Init+0x2ec>)
 8000ca2:	f001 fc05 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000ca6:	2360      	movs	r3, #96	@ 0x60
 8000ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000cb6:	230d      	movs	r3, #13
 8000cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4814      	ldr	r0, [pc, #80]	@ (8000d14 <MX_GPIO_Init+0x2e4>)
 8000cc2:	f001 fbf5 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000cc6:	2380      	movs	r3, #128	@ 0x80
 8000cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cd6:	2307      	movs	r3, #7
 8000cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000cda:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cde:	4619      	mov	r1, r3
 8000ce0:	480d      	ldr	r0, [pc, #52]	@ (8000d18 <MX_GPIO_Init+0x2e8>)
 8000ce2:	f001 fbe5 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000ce6:	2340      	movs	r3, #64	@ 0x40
 8000ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000cf6:	230a      	movs	r3, #10
 8000cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000cfa:	e011      	b.n	8000d20 <MX_GPIO_Init+0x2f0>
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40020c00 	.word	0x40020c00
 8000d04:	40022000 	.word	0x40022000
 8000d08:	40022800 	.word	0x40022800
 8000d0c:	40021c00 	.word	0x40021c00
 8000d10:	40021800 	.word	0x40021800
 8000d14:	40021000 	.word	0x40021000
 8000d18:	40020400 	.word	0x40020400
 8000d1c:	40020000 	.word	0x40020000
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000d20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d24:	4619      	mov	r1, r3
 8000d26:	48bd      	ldr	r0, [pc, #756]	@ (800101c <MX_GPIO_Init+0x5ec>)
 8000d28:	f001 fbc2 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000d2c:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d3e:	230c      	movs	r3, #12
 8000d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d42:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d46:	4619      	mov	r1, r3
 8000d48:	48b5      	ldr	r0, [pc, #724]	@ (8001020 <MX_GPIO_Init+0x5f0>)
 8000d4a:	f001 fbb1 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000d4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d54:	2300      	movs	r3, #0
 8000d56:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d60:	4619      	mov	r1, r3
 8000d62:	48b0      	ldr	r0, [pc, #704]	@ (8001024 <MX_GPIO_Init+0x5f4>)
 8000d64:	f001 fba4 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000d68:	2340      	movs	r3, #64	@ 0x40
 8000d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d6c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000d70:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000d76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	48aa      	ldr	r0, [pc, #680]	@ (8001028 <MX_GPIO_Init+0x5f8>)
 8000d7e:	f001 fb97 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000d82:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d90:	2303      	movs	r3, #3
 8000d92:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d94:	230c      	movs	r3, #12
 8000d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	48a2      	ldr	r0, [pc, #648]	@ (8001028 <MX_GPIO_Init+0x5f8>)
 8000da0:	f001 fb86 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000da4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	2302      	movs	r3, #2
 8000dac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db2:	2303      	movs	r3, #3
 8000db4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000db6:	230a      	movs	r3, #10
 8000db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	489a      	ldr	r0, [pc, #616]	@ (800102c <MX_GPIO_Init+0x5fc>)
 8000dc2:	f001 fb75 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000dc6:	23f0      	movs	r3, #240	@ 0xf0
 8000dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000dd6:	230a      	movs	r3, #10
 8000dd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000dda:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dde:	4619      	mov	r1, r3
 8000de0:	4893      	ldr	r0, [pc, #588]	@ (8001030 <MX_GPIO_Init+0x600>)
 8000de2:	f001 fb65 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000de6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	2302      	movs	r3, #2
 8000dee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df4:	2300      	movs	r3, #0
 8000df6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000df8:	230a      	movs	r3, #10
 8000dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000dfc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e00:	4619      	mov	r1, r3
 8000e02:	4887      	ldr	r0, [pc, #540]	@ (8001020 <MX_GPIO_Init+0x5f0>)
 8000e04:	f001 fb54 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000e08:	2320      	movs	r3, #32
 8000e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e14:	2300      	movs	r3, #0
 8000e16:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4882      	ldr	r0, [pc, #520]	@ (8001028 <MX_GPIO_Init+0x5f8>)
 8000e20:	f001 fb46 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000e24:	2308      	movs	r3, #8
 8000e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e30:	2300      	movs	r3, #0
 8000e32:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e34:	230d      	movs	r3, #13
 8000e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000e38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	487a      	ldr	r0, [pc, #488]	@ (8001028 <MX_GPIO_Init+0x5f8>)
 8000e40:	f001 fb36 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000e44:	f241 030c 	movw	r3, #4108	@ 0x100c
 8000e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4874      	ldr	r0, [pc, #464]	@ (8001030 <MX_GPIO_Init+0x600>)
 8000e5e:	f001 fb27 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000e62:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000e70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e74:	4619      	mov	r1, r3
 8000e76:	486f      	ldr	r0, [pc, #444]	@ (8001034 <MX_GPIO_Init+0x604>)
 8000e78:	f001 fb1a 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000e7c:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e82:	2302      	movs	r3, #2
 8000e84:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e8e:	230c      	movs	r3, #12
 8000e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e92:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e96:	4619      	mov	r1, r3
 8000e98:	4867      	ldr	r0, [pc, #412]	@ (8001038 <MX_GPIO_Init+0x608>)
 8000e9a:	f001 fb09 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000e9e:	2308      	movs	r3, #8
 8000ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000eae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4861      	ldr	r0, [pc, #388]	@ (800103c <MX_GPIO_Init+0x60c>)
 8000eb6:	f001 fafb 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000eba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ecc:	230d      	movs	r3, #13
 8000ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000ed0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4852      	ldr	r0, [pc, #328]	@ (8001020 <MX_GPIO_Init+0x5f0>)
 8000ed8:	f001 faea 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000edc:	2310      	movs	r3, #16
 8000ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ee8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eec:	4619      	mov	r1, r3
 8000eee:	484e      	ldr	r0, [pc, #312]	@ (8001028 <MX_GPIO_Init+0x5f8>)
 8000ef0:	f001 fade 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000ef4:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000efa:	2300      	movs	r3, #0
 8000efc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f06:	4619      	mov	r1, r3
 8000f08:	484d      	ldr	r0, [pc, #308]	@ (8001040 <MX_GPIO_Init+0x610>)
 8000f0a:	f001 fad1 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f12:	2302      	movs	r3, #2
 8000f14:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f1e:	2305      	movs	r3, #5
 8000f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8000f22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f26:	4619      	mov	r1, r3
 8000f28:	4841      	ldr	r0, [pc, #260]	@ (8001030 <MX_GPIO_Init+0x600>)
 8000f2a:	f001 fac1 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000f2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f34:	2301      	movs	r3, #1
 8000f36:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000f40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f44:	4619      	mov	r1, r3
 8000f46:	483e      	ldr	r0, [pc, #248]	@ (8001040 <MX_GPIO_Init+0x610>)
 8000f48:	f001 fab2 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000f4c:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8000f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
 8000f54:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000f5e:	230d      	movs	r3, #13
 8000f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f66:	4619      	mov	r1, r3
 8000f68:	4835      	ldr	r0, [pc, #212]	@ (8001040 <MX_GPIO_Init+0x610>)
 8000f6a:	f001 faa1 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f72:	2302      	movs	r3, #2
 8000f74:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000f82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f86:	4619      	mov	r1, r3
 8000f88:	4829      	ldr	r0, [pc, #164]	@ (8001030 <MX_GPIO_Init+0x600>)
 8000f8a:	f001 fa91 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000f8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fa0:	2307      	movs	r3, #7
 8000fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4820      	ldr	r0, [pc, #128]	@ (800102c <MX_GPIO_Init+0x5fc>)
 8000fac:	f001 fa80 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000fb0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000fc6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4817      	ldr	r0, [pc, #92]	@ (800102c <MX_GPIO_Init+0x5fc>)
 8000fce:	f001 fa6f 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000fd2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000fd8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000fdc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000fe2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4811      	ldr	r0, [pc, #68]	@ (8001030 <MX_GPIO_Init+0x600>)
 8000fea:	f001 fa61 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000fee:	23c0      	movs	r3, #192	@ 0xc0
 8000ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000ffe:	2308      	movs	r3, #8
 8001000:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001002:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001006:	4619      	mov	r1, r3
 8001008:	480a      	ldr	r0, [pc, #40]	@ (8001034 <MX_GPIO_Init+0x604>)
 800100a:	f001 fa51 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800100e:	2310      	movs	r3, #16
 8001010:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	2302      	movs	r3, #2
 8001014:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	e014      	b.n	8001044 <MX_GPIO_Init+0x614>
 800101a:	bf00      	nop
 800101c:	40020400 	.word	0x40020400
 8001020:	40021800 	.word	0x40021800
 8001024:	40022400 	.word	0x40022400
 8001028:	40020c00 	.word	0x40020c00
 800102c:	40020000 	.word	0x40020000
 8001030:	40022000 	.word	0x40022000
 8001034:	40020800 	.word	0x40020800
 8001038:	40021400 	.word	0x40021400
 800103c:	40022800 	.word	0x40022800
 8001040:	40021c00 	.word	0x40021c00
 8001044:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001046:	2303      	movs	r3, #3
 8001048:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800104a:	230a      	movs	r3, #10
 800104c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800104e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001052:	4619      	mov	r1, r3
 8001054:	487e      	ldr	r0, [pc, #504]	@ (8001250 <MX_GPIO_Init+0x820>)
 8001056:	f001 fa2b 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800105a:	2328      	movs	r3, #40	@ 0x28
 800105c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001066:	2303      	movs	r3, #3
 8001068:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800106a:	230c      	movs	r3, #12
 800106c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800106e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001072:	4619      	mov	r1, r3
 8001074:	4876      	ldr	r0, [pc, #472]	@ (8001250 <MX_GPIO_Init+0x820>)
 8001076:	f001 fa1b 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800107a:	23c8      	movs	r3, #200	@ 0xc8
 800107c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107e:	2301      	movs	r3, #1
 8001080:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001086:	2300      	movs	r3, #0
 8001088:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800108a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800108e:	4619      	mov	r1, r3
 8001090:	4870      	ldr	r0, [pc, #448]	@ (8001254 <MX_GPIO_Init+0x824>)
 8001092:	f001 fa0d 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001096:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 800109a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800109c:	2303      	movs	r3, #3
 800109e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010a8:	4619      	mov	r1, r3
 80010aa:	486b      	ldr	r0, [pc, #428]	@ (8001258 <MX_GPIO_Init+0x828>)
 80010ac:	f001 fa00 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80010b0:	2308      	movs	r3, #8
 80010b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	2302      	movs	r3, #2
 80010b6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010bc:	2303      	movs	r3, #3
 80010be:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010c0:	230c      	movs	r3, #12
 80010c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80010c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010c8:	4619      	mov	r1, r3
 80010ca:	4864      	ldr	r0, [pc, #400]	@ (800125c <MX_GPIO_Init+0x82c>)
 80010cc:	f001 f9f0 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80010d0:	2305      	movs	r3, #5
 80010d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d4:	2302      	movs	r3, #2
 80010d6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010dc:	2303      	movs	r3, #3
 80010de:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80010e0:	230a      	movs	r3, #10
 80010e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010e8:	4619      	mov	r1, r3
 80010ea:	485c      	ldr	r0, [pc, #368]	@ (800125c <MX_GPIO_Init+0x82c>)
 80010ec:	f001 f9e0 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80010f0:	2332      	movs	r3, #50	@ 0x32
 80010f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fc:	2303      	movs	r3, #3
 80010fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001100:	230b      	movs	r3, #11
 8001102:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001104:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001108:	4619      	mov	r1, r3
 800110a:	4854      	ldr	r0, [pc, #336]	@ (800125c <MX_GPIO_Init+0x82c>)
 800110c:	f001 f9d0 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001110:	2304      	movs	r3, #4
 8001112:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001114:	2302      	movs	r3, #2
 8001116:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111c:	2303      	movs	r3, #3
 800111e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001120:	2309      	movs	r3, #9
 8001122:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001124:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001128:	4619      	mov	r1, r3
 800112a:	484d      	ldr	r0, [pc, #308]	@ (8001260 <MX_GPIO_Init+0x830>)
 800112c:	f001 f9c0 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001130:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001134:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001136:	2302      	movs	r3, #2
 8001138:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113e:	2303      	movs	r3, #3
 8001140:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001142:	2309      	movs	r3, #9
 8001144:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001146:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800114a:	4619      	mov	r1, r3
 800114c:	4845      	ldr	r0, [pc, #276]	@ (8001264 <MX_GPIO_Init+0x834>)
 800114e:	f001 f9af 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001152:	2304      	movs	r3, #4
 8001154:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001156:	2300      	movs	r3, #0
 8001158:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800115e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001162:	4619      	mov	r1, r3
 8001164:	483b      	ldr	r0, [pc, #236]	@ (8001254 <MX_GPIO_Init+0x824>)
 8001166:	f001 f9a3 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800116a:	2386      	movs	r3, #134	@ 0x86
 800116c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116e:	2302      	movs	r3, #2
 8001170:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001176:	2303      	movs	r3, #3
 8001178:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800117a:	230b      	movs	r3, #11
 800117c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001182:	4619      	mov	r1, r3
 8001184:	4838      	ldr	r0, [pc, #224]	@ (8001268 <MX_GPIO_Init+0x838>)
 8001186:	f001 f993 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800118a:	2301      	movs	r3, #1
 800118c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800118e:	2303      	movs	r3, #3
 8001190:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001196:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800119a:	4619      	mov	r1, r3
 800119c:	4832      	ldr	r0, [pc, #200]	@ (8001268 <MX_GPIO_Init+0x838>)
 800119e:	f001 f987 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80011a2:	2350      	movs	r3, #80	@ 0x50
 80011a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a6:	2302      	movs	r3, #2
 80011a8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ae:	2300      	movs	r3, #0
 80011b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80011b2:	230d      	movs	r3, #13
 80011b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011ba:	4619      	mov	r1, r3
 80011bc:	482a      	ldr	r0, [pc, #168]	@ (8001268 <MX_GPIO_Init+0x838>)
 80011be:	f001 f977 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80011c2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80011c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011c8:	2312      	movs	r3, #18
 80011ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d0:	2303      	movs	r3, #3
 80011d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80011d4:	2304      	movs	r3, #4
 80011d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80011d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011dc:	4619      	mov	r1, r3
 80011de:	481c      	ldr	r0, [pc, #112]	@ (8001250 <MX_GPIO_Init+0x820>)
 80011e0:	f001 f966 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80011e4:	2328      	movs	r3, #40	@ 0x28
 80011e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e8:	2302      	movs	r3, #2
 80011ea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f0:	2303      	movs	r3, #3
 80011f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80011f4:	230a      	movs	r3, #10
 80011f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011fc:	4619      	mov	r1, r3
 80011fe:	481a      	ldr	r0, [pc, #104]	@ (8001268 <MX_GPIO_Init+0x838>)
 8001200:	f001 f956 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001204:	2340      	movs	r3, #64	@ 0x40
 8001206:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001208:	2302      	movs	r3, #2
 800120a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001210:	2300      	movs	r3, #0
 8001212:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001214:	2309      	movs	r3, #9
 8001216:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001218:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800121c:	4619      	mov	r1, r3
 800121e:	480c      	ldr	r0, [pc, #48]	@ (8001250 <MX_GPIO_Init+0x820>)
 8001220:	f001 f946 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001224:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001228:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	2302      	movs	r3, #2
 800122c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001232:	2300      	movs	r3, #0
 8001234:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001236:	2305      	movs	r3, #5
 8001238:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800123e:	4619      	mov	r1, r3
 8001240:	4807      	ldr	r0, [pc, #28]	@ (8001260 <MX_GPIO_Init+0x830>)
 8001242:	f001 f935 	bl	80024b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001246:	bf00      	nop
 8001248:	3740      	adds	r7, #64	@ 0x40
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40021c00 	.word	0x40021c00
 8001254:	40021800 	.word	0x40021800
 8001258:	40021400 	.word	0x40021400
 800125c:	40020800 	.word	0x40020800
 8001260:	40020400 	.word	0x40020400
 8001264:	40020c00 	.word	0x40020c00
 8001268:	40020000 	.word	0x40020000

0800126c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001270:	b672      	cpsid	i
}
 8001272:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <Error_Handler+0x8>

08001278 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800127e:	4b0f      	ldr	r3, [pc, #60]	@ (80012bc <HAL_MspInit+0x44>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001282:	4a0e      	ldr	r2, [pc, #56]	@ (80012bc <HAL_MspInit+0x44>)
 8001284:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001288:	6413      	str	r3, [r2, #64]	@ 0x40
 800128a:	4b0c      	ldr	r3, [pc, #48]	@ (80012bc <HAL_MspInit+0x44>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001296:	4b09      	ldr	r3, [pc, #36]	@ (80012bc <HAL_MspInit+0x44>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800129a:	4a08      	ldr	r2, [pc, #32]	@ (80012bc <HAL_MspInit+0x44>)
 800129c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012a2:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <HAL_MspInit+0x44>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012aa:	603b      	str	r3, [r7, #0]
 80012ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800

080012c0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a0a      	ldr	r2, [pc, #40]	@ (80012f8 <HAL_DMA2D_MspInit+0x38>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d10b      	bne.n	80012ea <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80012d2:	4b0a      	ldr	r3, [pc, #40]	@ (80012fc <HAL_DMA2D_MspInit+0x3c>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	4a09      	ldr	r2, [pc, #36]	@ (80012fc <HAL_DMA2D_MspInit+0x3c>)
 80012d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80012dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012de:	4b07      	ldr	r3, [pc, #28]	@ (80012fc <HAL_DMA2D_MspInit+0x3c>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 80012ea:	bf00      	nop
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	4002b000 	.word	0x4002b000
 80012fc:	40023800 	.word	0x40023800

08001300 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b0ae      	sub	sp, #184	@ 0xb8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001318:	f107 0320 	add.w	r3, r7, #32
 800131c:	2284      	movs	r2, #132	@ 0x84
 800131e:	2100      	movs	r1, #0
 8001320:	4618      	mov	r0, r3
 8001322:	f006 fb69 	bl	80079f8 <memset>
  if(hltdc->Instance==LTDC)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a6a      	ldr	r2, [pc, #424]	@ (80014d4 <HAL_LTDC_MspInit+0x1d4>)
 800132c:	4293      	cmp	r3, r2
 800132e:	f040 80cc 	bne.w	80014ca <HAL_LTDC_MspInit+0x1ca>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001332:	2308      	movs	r3, #8
 8001334:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001336:	2332      	movs	r3, #50	@ 0x32
 8001338:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800133a:	2302      	movs	r3, #2
 800133c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800133e:	2302      	movs	r3, #2
 8001340:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001342:	2300      	movs	r3, #0
 8001344:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001346:	2301      	movs	r3, #1
 8001348:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800134a:	2300      	movs	r3, #0
 800134c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800134e:	f107 0320 	add.w	r3, r7, #32
 8001352:	4618      	mov	r0, r3
 8001354:	f002 f988 	bl	8003668 <HAL_RCCEx_PeriphCLKConfig>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <HAL_LTDC_MspInit+0x62>
    {
      Error_Handler();
 800135e:	f7ff ff85 	bl	800126c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001362:	4b5d      	ldr	r3, [pc, #372]	@ (80014d8 <HAL_LTDC_MspInit+0x1d8>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001366:	4a5c      	ldr	r2, [pc, #368]	@ (80014d8 <HAL_LTDC_MspInit+0x1d8>)
 8001368:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800136c:	6453      	str	r3, [r2, #68]	@ 0x44
 800136e:	4b5a      	ldr	r3, [pc, #360]	@ (80014d8 <HAL_LTDC_MspInit+0x1d8>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001372:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001376:	61fb      	str	r3, [r7, #28]
 8001378:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800137a:	4b57      	ldr	r3, [pc, #348]	@ (80014d8 <HAL_LTDC_MspInit+0x1d8>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	4a56      	ldr	r2, [pc, #344]	@ (80014d8 <HAL_LTDC_MspInit+0x1d8>)
 8001380:	f043 0310 	orr.w	r3, r3, #16
 8001384:	6313      	str	r3, [r2, #48]	@ 0x30
 8001386:	4b54      	ldr	r3, [pc, #336]	@ (80014d8 <HAL_LTDC_MspInit+0x1d8>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	f003 0310 	and.w	r3, r3, #16
 800138e:	61bb      	str	r3, [r7, #24]
 8001390:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001392:	4b51      	ldr	r3, [pc, #324]	@ (80014d8 <HAL_LTDC_MspInit+0x1d8>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	4a50      	ldr	r2, [pc, #320]	@ (80014d8 <HAL_LTDC_MspInit+0x1d8>)
 8001398:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800139c:	6313      	str	r3, [r2, #48]	@ 0x30
 800139e:	4b4e      	ldr	r3, [pc, #312]	@ (80014d8 <HAL_LTDC_MspInit+0x1d8>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013a6:	617b      	str	r3, [r7, #20]
 80013a8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80013aa:	4b4b      	ldr	r3, [pc, #300]	@ (80014d8 <HAL_LTDC_MspInit+0x1d8>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ae:	4a4a      	ldr	r2, [pc, #296]	@ (80014d8 <HAL_LTDC_MspInit+0x1d8>)
 80013b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b6:	4b48      	ldr	r3, [pc, #288]	@ (80014d8 <HAL_LTDC_MspInit+0x1d8>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013be:	613b      	str	r3, [r7, #16]
 80013c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80013c2:	4b45      	ldr	r3, [pc, #276]	@ (80014d8 <HAL_LTDC_MspInit+0x1d8>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	4a44      	ldr	r2, [pc, #272]	@ (80014d8 <HAL_LTDC_MspInit+0x1d8>)
 80013c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ce:	4b42      	ldr	r3, [pc, #264]	@ (80014d8 <HAL_LTDC_MspInit+0x1d8>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80013da:	4b3f      	ldr	r3, [pc, #252]	@ (80014d8 <HAL_LTDC_MspInit+0x1d8>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	4a3e      	ldr	r2, [pc, #248]	@ (80014d8 <HAL_LTDC_MspInit+0x1d8>)
 80013e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e6:	4b3c      	ldr	r3, [pc, #240]	@ (80014d8 <HAL_LTDC_MspInit+0x1d8>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80013f2:	2310      	movs	r3, #16
 80013f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f8:	2302      	movs	r3, #2
 80013fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	2300      	movs	r3, #0
 8001406:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800140a:	230e      	movs	r3, #14
 800140c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001410:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001414:	4619      	mov	r1, r3
 8001416:	4831      	ldr	r0, [pc, #196]	@ (80014dc <HAL_LTDC_MspInit+0x1dc>)
 8001418:	f001 f84a 	bl	80024b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800141c:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8001420:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001424:	2302      	movs	r3, #2
 8001426:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001430:	2300      	movs	r3, #0
 8001432:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001436:	230e      	movs	r3, #14
 8001438:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800143c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001440:	4619      	mov	r1, r3
 8001442:	4827      	ldr	r0, [pc, #156]	@ (80014e0 <HAL_LTDC_MspInit+0x1e0>)
 8001444:	f001 f834 	bl	80024b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001448:	23f7      	movs	r3, #247	@ 0xf7
 800144a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144e:	2302      	movs	r3, #2
 8001450:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145a:	2300      	movs	r3, #0
 800145c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001460:	230e      	movs	r3, #14
 8001462:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001466:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800146a:	4619      	mov	r1, r3
 800146c:	481d      	ldr	r0, [pc, #116]	@ (80014e4 <HAL_LTDC_MspInit+0x1e4>)
 800146e:	f001 f81f 	bl	80024b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001472:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001476:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147a:	2302      	movs	r3, #2
 800147c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001486:	2300      	movs	r3, #0
 8001488:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800148c:	2309      	movs	r3, #9
 800148e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001492:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001496:	4619      	mov	r1, r3
 8001498:	4813      	ldr	r0, [pc, #76]	@ (80014e8 <HAL_LTDC_MspInit+0x1e8>)
 800149a:	f001 f809 	bl	80024b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800149e:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 80014a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a6:	2302      	movs	r3, #2
 80014a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b2:	2300      	movs	r3, #0
 80014b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014b8:	230e      	movs	r3, #14
 80014ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80014be:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80014c2:	4619      	mov	r1, r3
 80014c4:	4809      	ldr	r0, [pc, #36]	@ (80014ec <HAL_LTDC_MspInit+0x1ec>)
 80014c6:	f000 fff3 	bl	80024b0 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80014ca:	bf00      	nop
 80014cc:	37b8      	adds	r7, #184	@ 0xb8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40016800 	.word	0x40016800
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40022400 	.word	0x40022400
 80014e4:	40022800 	.word	0x40022800
 80014e8:	40021800 	.word	0x40021800
 80014ec:	40022000 	.word	0x40022000

080014f0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b0ac      	sub	sp, #176	@ 0xb0
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001508:	f107 0318 	add.w	r3, r7, #24
 800150c:	2284      	movs	r2, #132	@ 0x84
 800150e:	2100      	movs	r1, #0
 8001510:	4618      	mov	r0, r3
 8001512:	f006 fa71 	bl	80079f8 <memset>
  if(hsd->Instance==SDMMC1)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a73      	ldr	r2, [pc, #460]	@ (80016e8 <HAL_SD_MspInit+0x1f8>)
 800151c:	4293      	cmp	r3, r2
 800151e:	f040 80de 	bne.w	80016de <HAL_SD_MspInit+0x1ee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001522:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8001526:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_SYSCLK;
 8001528:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800152c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001530:	f107 0318 	add.w	r3, r7, #24
 8001534:	4618      	mov	r0, r3
 8001536:	f002 f897 	bl	8003668 <HAL_RCCEx_PeriphCLKConfig>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001540:	f7ff fe94 	bl	800126c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001544:	4b69      	ldr	r3, [pc, #420]	@ (80016ec <HAL_SD_MspInit+0x1fc>)
 8001546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001548:	4a68      	ldr	r2, [pc, #416]	@ (80016ec <HAL_SD_MspInit+0x1fc>)
 800154a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800154e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001550:	4b66      	ldr	r3, [pc, #408]	@ (80016ec <HAL_SD_MspInit+0x1fc>)
 8001552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001554:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001558:	617b      	str	r3, [r7, #20]
 800155a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800155c:	4b63      	ldr	r3, [pc, #396]	@ (80016ec <HAL_SD_MspInit+0x1fc>)
 800155e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001560:	4a62      	ldr	r2, [pc, #392]	@ (80016ec <HAL_SD_MspInit+0x1fc>)
 8001562:	f043 0304 	orr.w	r3, r3, #4
 8001566:	6313      	str	r3, [r2, #48]	@ 0x30
 8001568:	4b60      	ldr	r3, [pc, #384]	@ (80016ec <HAL_SD_MspInit+0x1fc>)
 800156a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001574:	4b5d      	ldr	r3, [pc, #372]	@ (80016ec <HAL_SD_MspInit+0x1fc>)
 8001576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001578:	4a5c      	ldr	r2, [pc, #368]	@ (80016ec <HAL_SD_MspInit+0x1fc>)
 800157a:	f043 0308 	orr.w	r3, r3, #8
 800157e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001580:	4b5a      	ldr	r3, [pc, #360]	@ (80016ec <HAL_SD_MspInit+0x1fc>)
 8001582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001584:	f003 0308 	and.w	r3, r3, #8
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800158c:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001590:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001594:	2302      	movs	r3, #2
 8001596:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a0:	2303      	movs	r3, #3
 80015a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80015a6:	230c      	movs	r3, #12
 80015a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ac:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015b0:	4619      	mov	r1, r3
 80015b2:	484f      	ldr	r0, [pc, #316]	@ (80016f0 <HAL_SD_MspInit+0x200>)
 80015b4:	f000 ff7c 	bl	80024b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 80015b8:	2304      	movs	r3, #4
 80015ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	2302      	movs	r3, #2
 80015c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ca:	2303      	movs	r3, #3
 80015cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80015d0:	230c      	movs	r3, #12
 80015d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 80015d6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015da:	4619      	mov	r1, r3
 80015dc:	4845      	ldr	r0, [pc, #276]	@ (80016f4 <HAL_SD_MspInit+0x204>)
 80015de:	f000 ff67 	bl	80024b0 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 80015e2:	4b45      	ldr	r3, [pc, #276]	@ (80016f8 <HAL_SD_MspInit+0x208>)
 80015e4:	4a45      	ldr	r2, [pc, #276]	@ (80016fc <HAL_SD_MspInit+0x20c>)
 80015e6:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80015e8:	4b43      	ldr	r3, [pc, #268]	@ (80016f8 <HAL_SD_MspInit+0x208>)
 80015ea:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80015ee:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015f0:	4b41      	ldr	r3, [pc, #260]	@ (80016f8 <HAL_SD_MspInit+0x208>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015f6:	4b40      	ldr	r3, [pc, #256]	@ (80016f8 <HAL_SD_MspInit+0x208>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015fc:	4b3e      	ldr	r3, [pc, #248]	@ (80016f8 <HAL_SD_MspInit+0x208>)
 80015fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001602:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001604:	4b3c      	ldr	r3, [pc, #240]	@ (80016f8 <HAL_SD_MspInit+0x208>)
 8001606:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800160a:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800160c:	4b3a      	ldr	r3, [pc, #232]	@ (80016f8 <HAL_SD_MspInit+0x208>)
 800160e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001612:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8001614:	4b38      	ldr	r3, [pc, #224]	@ (80016f8 <HAL_SD_MspInit+0x208>)
 8001616:	2220      	movs	r2, #32
 8001618:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800161a:	4b37      	ldr	r3, [pc, #220]	@ (80016f8 <HAL_SD_MspInit+0x208>)
 800161c:	2200      	movs	r2, #0
 800161e:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001620:	4b35      	ldr	r3, [pc, #212]	@ (80016f8 <HAL_SD_MspInit+0x208>)
 8001622:	2204      	movs	r2, #4
 8001624:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001626:	4b34      	ldr	r3, [pc, #208]	@ (80016f8 <HAL_SD_MspInit+0x208>)
 8001628:	2203      	movs	r2, #3
 800162a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 800162c:	4b32      	ldr	r3, [pc, #200]	@ (80016f8 <HAL_SD_MspInit+0x208>)
 800162e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001632:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001634:	4b30      	ldr	r3, [pc, #192]	@ (80016f8 <HAL_SD_MspInit+0x208>)
 8001636:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800163a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 800163c:	482e      	ldr	r0, [pc, #184]	@ (80016f8 <HAL_SD_MspInit+0x208>)
 800163e:	f000 fab5 	bl	8001bac <HAL_DMA_Init>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <HAL_SD_MspInit+0x15c>
    {
      Error_Handler();
 8001648:	f7ff fe10 	bl	800126c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a2a      	ldr	r2, [pc, #168]	@ (80016f8 <HAL_SD_MspInit+0x208>)
 8001650:	641a      	str	r2, [r3, #64]	@ 0x40
 8001652:	4a29      	ldr	r2, [pc, #164]	@ (80016f8 <HAL_SD_MspInit+0x208>)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8001658:	4b29      	ldr	r3, [pc, #164]	@ (8001700 <HAL_SD_MspInit+0x210>)
 800165a:	4a2a      	ldr	r2, [pc, #168]	@ (8001704 <HAL_SD_MspInit+0x214>)
 800165c:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 800165e:	4b28      	ldr	r3, [pc, #160]	@ (8001700 <HAL_SD_MspInit+0x210>)
 8001660:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001664:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001666:	4b26      	ldr	r3, [pc, #152]	@ (8001700 <HAL_SD_MspInit+0x210>)
 8001668:	2240      	movs	r2, #64	@ 0x40
 800166a:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800166c:	4b24      	ldr	r3, [pc, #144]	@ (8001700 <HAL_SD_MspInit+0x210>)
 800166e:	2200      	movs	r2, #0
 8001670:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001672:	4b23      	ldr	r3, [pc, #140]	@ (8001700 <HAL_SD_MspInit+0x210>)
 8001674:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001678:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800167a:	4b21      	ldr	r3, [pc, #132]	@ (8001700 <HAL_SD_MspInit+0x210>)
 800167c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001680:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001682:	4b1f      	ldr	r3, [pc, #124]	@ (8001700 <HAL_SD_MspInit+0x210>)
 8001684:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001688:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 800168a:	4b1d      	ldr	r3, [pc, #116]	@ (8001700 <HAL_SD_MspInit+0x210>)
 800168c:	2220      	movs	r2, #32
 800168e:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001690:	4b1b      	ldr	r3, [pc, #108]	@ (8001700 <HAL_SD_MspInit+0x210>)
 8001692:	2200      	movs	r2, #0
 8001694:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001696:	4b1a      	ldr	r3, [pc, #104]	@ (8001700 <HAL_SD_MspInit+0x210>)
 8001698:	2204      	movs	r2, #4
 800169a:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800169c:	4b18      	ldr	r3, [pc, #96]	@ (8001700 <HAL_SD_MspInit+0x210>)
 800169e:	2203      	movs	r2, #3
 80016a0:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 80016a2:	4b17      	ldr	r3, [pc, #92]	@ (8001700 <HAL_SD_MspInit+0x210>)
 80016a4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80016a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80016aa:	4b15      	ldr	r3, [pc, #84]	@ (8001700 <HAL_SD_MspInit+0x210>)
 80016ac:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80016b0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80016b2:	4813      	ldr	r0, [pc, #76]	@ (8001700 <HAL_SD_MspInit+0x210>)
 80016b4:	f000 fa7a 	bl	8001bac <HAL_DMA_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <HAL_SD_MspInit+0x1d2>
    {
      Error_Handler();
 80016be:	f7ff fdd5 	bl	800126c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a0e      	ldr	r2, [pc, #56]	@ (8001700 <HAL_SD_MspInit+0x210>)
 80016c6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80016c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001700 <HAL_SD_MspInit+0x210>)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2100      	movs	r1, #0
 80016d2:	2031      	movs	r0, #49	@ 0x31
 80016d4:	f000 fa33 	bl	8001b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80016d8:	2031      	movs	r0, #49	@ 0x31
 80016da:	f000 fa4c 	bl	8001b76 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 80016de:	bf00      	nop
 80016e0:	37b0      	adds	r7, #176	@ 0xb0
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40012c00 	.word	0x40012c00
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40020800 	.word	0x40020800
 80016f4:	40020c00 	.word	0x40020c00
 80016f8:	200001e4 	.word	0x200001e4
 80016fc:	40026458 	.word	0x40026458
 8001700:	20000244 	.word	0x20000244
 8001704:	400264a0 	.word	0x400264a0

08001708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800170c:	bf00      	nop
 800170e:	e7fd      	b.n	800170c <NMI_Handler+0x4>

08001710 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001714:	bf00      	nop
 8001716:	e7fd      	b.n	8001714 <HardFault_Handler+0x4>

08001718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800171c:	bf00      	nop
 800171e:	e7fd      	b.n	800171c <MemManage_Handler+0x4>

08001720 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001724:	bf00      	nop
 8001726:	e7fd      	b.n	8001724 <BusFault_Handler+0x4>

08001728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800172c:	bf00      	nop
 800172e:	e7fd      	b.n	800172c <UsageFault_Handler+0x4>

08001730 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800175e:	f000 f8cf 	bl	8001900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800176c:	4802      	ldr	r0, [pc, #8]	@ (8001778 <SDMMC1_IRQHandler+0x10>)
 800176e:	f002 fdeb 	bl	8004348 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000160 	.word	0x20000160

0800177c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001780:	4802      	ldr	r0, [pc, #8]	@ (800178c <DMA2_Stream3_IRQHandler+0x10>)
 8001782:	f000 fb43 	bl	8001e0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	200001e4 	.word	0x200001e4

08001790 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001794:	4802      	ldr	r0, [pc, #8]	@ (80017a0 <DMA2_Stream6_IRQHandler+0x10>)
 8001796:	f000 fb39 	bl	8001e0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000244 	.word	0x20000244

080017a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017ac:	4a14      	ldr	r2, [pc, #80]	@ (8001800 <_sbrk+0x5c>)
 80017ae:	4b15      	ldr	r3, [pc, #84]	@ (8001804 <_sbrk+0x60>)
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b8:	4b13      	ldr	r3, [pc, #76]	@ (8001808 <_sbrk+0x64>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d102      	bne.n	80017c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c0:	4b11      	ldr	r3, [pc, #68]	@ (8001808 <_sbrk+0x64>)
 80017c2:	4a12      	ldr	r2, [pc, #72]	@ (800180c <_sbrk+0x68>)
 80017c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017c6:	4b10      	ldr	r3, [pc, #64]	@ (8001808 <_sbrk+0x64>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d207      	bcs.n	80017e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d4:	f006 f92e 	bl	8007a34 <__errno>
 80017d8:	4603      	mov	r3, r0
 80017da:	220c      	movs	r2, #12
 80017dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017de:	f04f 33ff 	mov.w	r3, #4294967295
 80017e2:	e009      	b.n	80017f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e4:	4b08      	ldr	r3, [pc, #32]	@ (8001808 <_sbrk+0x64>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ea:	4b07      	ldr	r3, [pc, #28]	@ (8001808 <_sbrk+0x64>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	4a05      	ldr	r2, [pc, #20]	@ (8001808 <_sbrk+0x64>)
 80017f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017f6:	68fb      	ldr	r3, [r7, #12]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20050000 	.word	0x20050000
 8001804:	00000800 	.word	0x00000800
 8001808:	200002a4 	.word	0x200002a4
 800180c:	20000668 	.word	0x20000668

08001810 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001814:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <SystemInit+0x20>)
 8001816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800181a:	4a05      	ldr	r2, [pc, #20]	@ (8001830 <SystemInit+0x20>)
 800181c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001820:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001834:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800186c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001838:	f7ff ffea 	bl	8001810 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800183c:	480c      	ldr	r0, [pc, #48]	@ (8001870 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800183e:	490d      	ldr	r1, [pc, #52]	@ (8001874 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001840:	4a0d      	ldr	r2, [pc, #52]	@ (8001878 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001844:	e002      	b.n	800184c <LoopCopyDataInit>

08001846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800184a:	3304      	adds	r3, #4

0800184c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800184c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800184e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001850:	d3f9      	bcc.n	8001846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001852:	4a0a      	ldr	r2, [pc, #40]	@ (800187c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001854:	4c0a      	ldr	r4, [pc, #40]	@ (8001880 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001858:	e001      	b.n	800185e <LoopFillZerobss>

0800185a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800185a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800185c:	3204      	adds	r2, #4

0800185e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800185e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001860:	d3fb      	bcc.n	800185a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001862:	f006 f8ed 	bl	8007a40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001866:	f7fe ff0b 	bl	8000680 <main>
  bx  lr    
 800186a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800186c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001874:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001878:	08008494 	.word	0x08008494
  ldr r2, =_sbss
 800187c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001880:	20000668 	.word	0x20000668

08001884 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001884:	e7fe      	b.n	8001884 <ADC_IRQHandler>

08001886 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800188a:	2003      	movs	r0, #3
 800188c:	f000 f94c 	bl	8001b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001890:	2000      	movs	r0, #0
 8001892:	f000 f805 	bl	80018a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001896:	f7ff fcef 	bl	8001278 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	bd80      	pop	{r7, pc}

080018a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018a8:	4b12      	ldr	r3, [pc, #72]	@ (80018f4 <HAL_InitTick+0x54>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4b12      	ldr	r3, [pc, #72]	@ (80018f8 <HAL_InitTick+0x58>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	4619      	mov	r1, r3
 80018b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80018be:	4618      	mov	r0, r3
 80018c0:	f000 f967 	bl	8001b92 <HAL_SYSTICK_Config>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e00e      	b.n	80018ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b0f      	cmp	r3, #15
 80018d2:	d80a      	bhi.n	80018ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018d4:	2200      	movs	r2, #0
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	f04f 30ff 	mov.w	r0, #4294967295
 80018dc:	f000 f92f 	bl	8001b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018e0:	4a06      	ldr	r2, [pc, #24]	@ (80018fc <HAL_InitTick+0x5c>)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
 80018e8:	e000      	b.n	80018ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000000 	.word	0x20000000
 80018f8:	20000008 	.word	0x20000008
 80018fc:	20000004 	.word	0x20000004

08001900 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001904:	4b06      	ldr	r3, [pc, #24]	@ (8001920 <HAL_IncTick+0x20>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	461a      	mov	r2, r3
 800190a:	4b06      	ldr	r3, [pc, #24]	@ (8001924 <HAL_IncTick+0x24>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4413      	add	r3, r2
 8001910:	4a04      	ldr	r2, [pc, #16]	@ (8001924 <HAL_IncTick+0x24>)
 8001912:	6013      	str	r3, [r2, #0]
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	20000008 	.word	0x20000008
 8001924:	200002a8 	.word	0x200002a8

08001928 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return uwTick;
 800192c:	4b03      	ldr	r3, [pc, #12]	@ (800193c <HAL_GetTick+0x14>)
 800192e:	681b      	ldr	r3, [r3, #0]
}
 8001930:	4618      	mov	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	200002a8 	.word	0x200002a8

08001940 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001948:	f7ff ffee 	bl	8001928 <HAL_GetTick>
 800194c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001958:	d005      	beq.n	8001966 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800195a:	4b0a      	ldr	r3, [pc, #40]	@ (8001984 <HAL_Delay+0x44>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	461a      	mov	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4413      	add	r3, r2
 8001964:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001966:	bf00      	nop
 8001968:	f7ff ffde 	bl	8001928 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	429a      	cmp	r2, r3
 8001976:	d8f7      	bhi.n	8001968 <HAL_Delay+0x28>
  {
  }
}
 8001978:	bf00      	nop
 800197a:	bf00      	nop
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000008 	.word	0x20000008

08001988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001998:	4b0b      	ldr	r3, [pc, #44]	@ (80019c8 <__NVIC_SetPriorityGrouping+0x40>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019a4:	4013      	ands	r3, r2
 80019a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019b0:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019b6:	4a04      	ldr	r2, [pc, #16]	@ (80019c8 <__NVIC_SetPriorityGrouping+0x40>)
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	60d3      	str	r3, [r2, #12]
}
 80019bc:	bf00      	nop
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000ed00 	.word	0xe000ed00
 80019cc:	05fa0000 	.word	0x05fa0000

080019d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d4:	4b04      	ldr	r3, [pc, #16]	@ (80019e8 <__NVIC_GetPriorityGrouping+0x18>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	0a1b      	lsrs	r3, r3, #8
 80019da:	f003 0307 	and.w	r3, r3, #7
}
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	db0b      	blt.n	8001a16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	f003 021f 	and.w	r2, r3, #31
 8001a04:	4907      	ldr	r1, [pc, #28]	@ (8001a24 <__NVIC_EnableIRQ+0x38>)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	095b      	lsrs	r3, r3, #5
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000e100 	.word	0xe000e100

08001a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	6039      	str	r1, [r7, #0]
 8001a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	db0a      	blt.n	8001a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	490c      	ldr	r1, [pc, #48]	@ (8001a74 <__NVIC_SetPriority+0x4c>)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	0112      	lsls	r2, r2, #4
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a50:	e00a      	b.n	8001a68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	4908      	ldr	r1, [pc, #32]	@ (8001a78 <__NVIC_SetPriority+0x50>)
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	3b04      	subs	r3, #4
 8001a60:	0112      	lsls	r2, r2, #4
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	440b      	add	r3, r1
 8001a66:	761a      	strb	r2, [r3, #24]
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	e000e100 	.word	0xe000e100
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b089      	sub	sp, #36	@ 0x24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	f1c3 0307 	rsb	r3, r3, #7
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	bf28      	it	cs
 8001a9a:	2304      	movcs	r3, #4
 8001a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	2b06      	cmp	r3, #6
 8001aa4:	d902      	bls.n	8001aac <NVIC_EncodePriority+0x30>
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3b03      	subs	r3, #3
 8001aaa:	e000      	b.n	8001aae <NVIC_EncodePriority+0x32>
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43da      	mvns	r2, r3
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	401a      	ands	r2, r3
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ace:	43d9      	mvns	r1, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad4:	4313      	orrs	r3, r2
         );
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3724      	adds	r7, #36	@ 0x24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
	...

08001ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001af4:	d301      	bcc.n	8001afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001af6:	2301      	movs	r3, #1
 8001af8:	e00f      	b.n	8001b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001afa:	4a0a      	ldr	r2, [pc, #40]	@ (8001b24 <SysTick_Config+0x40>)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b02:	210f      	movs	r1, #15
 8001b04:	f04f 30ff 	mov.w	r0, #4294967295
 8001b08:	f7ff ff8e 	bl	8001a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b0c:	4b05      	ldr	r3, [pc, #20]	@ (8001b24 <SysTick_Config+0x40>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b12:	4b04      	ldr	r3, [pc, #16]	@ (8001b24 <SysTick_Config+0x40>)
 8001b14:	2207      	movs	r2, #7
 8001b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	e000e010 	.word	0xe000e010

08001b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff ff29 	bl	8001988 <__NVIC_SetPriorityGrouping>
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b086      	sub	sp, #24
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	4603      	mov	r3, r0
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	607a      	str	r2, [r7, #4]
 8001b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b50:	f7ff ff3e 	bl	80019d0 <__NVIC_GetPriorityGrouping>
 8001b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	68b9      	ldr	r1, [r7, #8]
 8001b5a:	6978      	ldr	r0, [r7, #20]
 8001b5c:	f7ff ff8e 	bl	8001a7c <NVIC_EncodePriority>
 8001b60:	4602      	mov	r2, r0
 8001b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b66:	4611      	mov	r1, r2
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff ff5d 	bl	8001a28 <__NVIC_SetPriority>
}
 8001b6e:	bf00      	nop
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b082      	sub	sp, #8
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff31 	bl	80019ec <__NVIC_EnableIRQ>
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff ffa2 	bl	8001ae4 <SysTick_Config>
 8001ba0:	4603      	mov	r3, r0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bb8:	f7ff feb6 	bl	8001928 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e099      	b.n	8001cfc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2202      	movs	r2, #2
 8001bcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f022 0201 	bic.w	r2, r2, #1
 8001be6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001be8:	e00f      	b.n	8001c0a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bea:	f7ff fe9d 	bl	8001928 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b05      	cmp	r3, #5
 8001bf6:	d908      	bls.n	8001c0a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2220      	movs	r2, #32
 8001bfc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2203      	movs	r2, #3
 8001c02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e078      	b.n	8001cfc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1e8      	bne.n	8001bea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	4b38      	ldr	r3, [pc, #224]	@ (8001d04 <HAL_DMA_Init+0x158>)
 8001c24:	4013      	ands	r3, r2
 8001c26:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a1b      	ldr	r3, [r3, #32]
 8001c54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c60:	2b04      	cmp	r3, #4
 8001c62:	d107      	bne.n	8001c74 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	697a      	ldr	r2, [r7, #20]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	f023 0307 	bic.w	r3, r3, #7
 8001c8a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	d117      	bne.n	8001cce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d00e      	beq.n	8001cce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 faa5 	bl	8002200 <DMA_CheckFifoParam>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d008      	beq.n	8001cce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2240      	movs	r2, #64	@ 0x40
 8001cc0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e016      	b.n	8001cfc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 fa5c 	bl	8002194 <DMA_CalcBaseAndBitshift>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce4:	223f      	movs	r2, #63	@ 0x3f
 8001ce6:	409a      	lsls	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	f010803f 	.word	0xf010803f

08001d08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
 8001d14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d16:	2300      	movs	r3, #0
 8001d18:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d1e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d101      	bne.n	8001d2e <HAL_DMA_Start_IT+0x26>
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	e048      	b.n	8001dc0 <HAL_DMA_Start_IT+0xb8>
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d137      	bne.n	8001db2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2202      	movs	r2, #2
 8001d46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	68b9      	ldr	r1, [r7, #8]
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f000 f9ee 	bl	8002138 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d60:	223f      	movs	r2, #63	@ 0x3f
 8001d62:	409a      	lsls	r2, r3
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f042 0216 	orr.w	r2, r2, #22
 8001d76:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	695a      	ldr	r2, [r3, #20]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001d86:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d007      	beq.n	8001da0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 0208 	orr.w	r2, r2, #8
 8001d9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 0201 	orr.w	r2, r2, #1
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	e005      	b.n	8001dbe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d004      	beq.n	8001de6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2280      	movs	r2, #128	@ 0x80
 8001de0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e00c      	b.n	8001e00 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2205      	movs	r2, #5
 8001dea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 0201 	bic.w	r2, r2, #1
 8001dfc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001e18:	4b8e      	ldr	r3, [pc, #568]	@ (8002054 <HAL_DMA_IRQHandler+0x248>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a8e      	ldr	r2, [pc, #568]	@ (8002058 <HAL_DMA_IRQHandler+0x24c>)
 8001e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e22:	0a9b      	lsrs	r3, r3, #10
 8001e24:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e2a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e36:	2208      	movs	r2, #8
 8001e38:	409a      	lsls	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d01a      	beq.n	8001e78 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d013      	beq.n	8001e78 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f022 0204 	bic.w	r2, r2, #4
 8001e5e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e64:	2208      	movs	r2, #8
 8001e66:	409a      	lsls	r2, r3
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e70:	f043 0201 	orr.w	r2, r3, #1
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	409a      	lsls	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	4013      	ands	r3, r2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d012      	beq.n	8001eae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00b      	beq.n	8001eae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	409a      	lsls	r2, r3
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ea6:	f043 0202 	orr.w	r2, r3, #2
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eb2:	2204      	movs	r2, #4
 8001eb4:	409a      	lsls	r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d012      	beq.n	8001ee4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d00b      	beq.n	8001ee4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ed0:	2204      	movs	r2, #4
 8001ed2:	409a      	lsls	r2, r3
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001edc:	f043 0204 	orr.w	r2, r3, #4
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ee8:	2210      	movs	r2, #16
 8001eea:	409a      	lsls	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d043      	beq.n	8001f7c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0308 	and.w	r3, r3, #8
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d03c      	beq.n	8001f7c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f06:	2210      	movs	r2, #16
 8001f08:	409a      	lsls	r2, r3
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d018      	beq.n	8001f4e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d108      	bne.n	8001f3c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d024      	beq.n	8001f7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	4798      	blx	r3
 8001f3a:	e01f      	b.n	8001f7c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d01b      	beq.n	8001f7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	4798      	blx	r3
 8001f4c:	e016      	b.n	8001f7c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d107      	bne.n	8001f6c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 0208 	bic.w	r2, r2, #8
 8001f6a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f80:	2220      	movs	r2, #32
 8001f82:	409a      	lsls	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4013      	ands	r3, r2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 808f 	beq.w	80020ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0310 	and.w	r3, r3, #16
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 8087 	beq.w	80020ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	409a      	lsls	r2, r3
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b05      	cmp	r3, #5
 8001fb4:	d136      	bne.n	8002024 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 0216 	bic.w	r2, r2, #22
 8001fc4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	695a      	ldr	r2, [r3, #20]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001fd4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d103      	bne.n	8001fe6 <HAL_DMA_IRQHandler+0x1da>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d007      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 0208 	bic.w	r2, r2, #8
 8001ff4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ffa:	223f      	movs	r2, #63	@ 0x3f
 8001ffc:	409a      	lsls	r2, r3
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002016:	2b00      	cmp	r3, #0
 8002018:	d07e      	beq.n	8002118 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	4798      	blx	r3
        }
        return;
 8002022:	e079      	b.n	8002118 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d01d      	beq.n	800206e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d10d      	bne.n	800205c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002044:	2b00      	cmp	r3, #0
 8002046:	d031      	beq.n	80020ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	4798      	blx	r3
 8002050:	e02c      	b.n	80020ac <HAL_DMA_IRQHandler+0x2a0>
 8002052:	bf00      	nop
 8002054:	20000000 	.word	0x20000000
 8002058:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002060:	2b00      	cmp	r3, #0
 8002062:	d023      	beq.n	80020ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	4798      	blx	r3
 800206c:	e01e      	b.n	80020ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002078:	2b00      	cmp	r3, #0
 800207a:	d10f      	bne.n	800209c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 0210 	bic.w	r2, r2, #16
 800208a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d032      	beq.n	800211a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d022      	beq.n	8002106 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2205      	movs	r2, #5
 80020c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 0201 	bic.w	r2, r2, #1
 80020d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	3301      	adds	r3, #1
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d307      	bcc.n	80020f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f2      	bne.n	80020d8 <HAL_DMA_IRQHandler+0x2cc>
 80020f2:	e000      	b.n	80020f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80020f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800210a:	2b00      	cmp	r3, #0
 800210c:	d005      	beq.n	800211a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	4798      	blx	r3
 8002116:	e000      	b.n	800211a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002118:	bf00      	nop
    }
  }
}
 800211a:	3718      	adds	r7, #24
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800212c:	4618      	mov	r0, r3
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
 8002144:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002154:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	2b40      	cmp	r3, #64	@ 0x40
 8002164:	d108      	bne.n	8002178 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002176:	e007      	b.n	8002188 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68ba      	ldr	r2, [r7, #8]
 800217e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	60da      	str	r2, [r3, #12]
}
 8002188:	bf00      	nop
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	3b10      	subs	r3, #16
 80021a4:	4a13      	ldr	r2, [pc, #76]	@ (80021f4 <DMA_CalcBaseAndBitshift+0x60>)
 80021a6:	fba2 2303 	umull	r2, r3, r2, r3
 80021aa:	091b      	lsrs	r3, r3, #4
 80021ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021ae:	4a12      	ldr	r2, [pc, #72]	@ (80021f8 <DMA_CalcBaseAndBitshift+0x64>)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	4413      	add	r3, r2
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	461a      	mov	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2b03      	cmp	r3, #3
 80021c0:	d908      	bls.n	80021d4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	461a      	mov	r2, r3
 80021c8:	4b0c      	ldr	r3, [pc, #48]	@ (80021fc <DMA_CalcBaseAndBitshift+0x68>)
 80021ca:	4013      	ands	r3, r2
 80021cc:	1d1a      	adds	r2, r3, #4
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	659a      	str	r2, [r3, #88]	@ 0x58
 80021d2:	e006      	b.n	80021e2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	461a      	mov	r2, r3
 80021da:	4b08      	ldr	r3, [pc, #32]	@ (80021fc <DMA_CalcBaseAndBitshift+0x68>)
 80021dc:	4013      	ands	r3, r2
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	aaaaaaab 	.word	0xaaaaaaab
 80021f8:	080083b4 	.word	0x080083b4
 80021fc:	fffffc00 	.word	0xfffffc00

08002200 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002208:	2300      	movs	r3, #0
 800220a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002210:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d11f      	bne.n	800225a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	2b03      	cmp	r3, #3
 800221e:	d856      	bhi.n	80022ce <DMA_CheckFifoParam+0xce>
 8002220:	a201      	add	r2, pc, #4	@ (adr r2, 8002228 <DMA_CheckFifoParam+0x28>)
 8002222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002226:	bf00      	nop
 8002228:	08002239 	.word	0x08002239
 800222c:	0800224b 	.word	0x0800224b
 8002230:	08002239 	.word	0x08002239
 8002234:	080022cf 	.word	0x080022cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800223c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d046      	beq.n	80022d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002248:	e043      	b.n	80022d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800224e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002252:	d140      	bne.n	80022d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002258:	e03d      	b.n	80022d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002262:	d121      	bne.n	80022a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	2b03      	cmp	r3, #3
 8002268:	d837      	bhi.n	80022da <DMA_CheckFifoParam+0xda>
 800226a:	a201      	add	r2, pc, #4	@ (adr r2, 8002270 <DMA_CheckFifoParam+0x70>)
 800226c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002270:	08002281 	.word	0x08002281
 8002274:	08002287 	.word	0x08002287
 8002278:	08002281 	.word	0x08002281
 800227c:	08002299 	.word	0x08002299
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	73fb      	strb	r3, [r7, #15]
      break;
 8002284:	e030      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800228a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d025      	beq.n	80022de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002296:	e022      	b.n	80022de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800229c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80022a0:	d11f      	bne.n	80022e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80022a6:	e01c      	b.n	80022e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d903      	bls.n	80022b6 <DMA_CheckFifoParam+0xb6>
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	2b03      	cmp	r3, #3
 80022b2:	d003      	beq.n	80022bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80022b4:	e018      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	73fb      	strb	r3, [r7, #15]
      break;
 80022ba:	e015      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00e      	beq.n	80022e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	73fb      	strb	r3, [r7, #15]
      break;
 80022cc:	e00b      	b.n	80022e6 <DMA_CheckFifoParam+0xe6>
      break;
 80022ce:	bf00      	nop
 80022d0:	e00a      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      break;
 80022d2:	bf00      	nop
 80022d4:	e008      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      break;
 80022d6:	bf00      	nop
 80022d8:	e006      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      break;
 80022da:	bf00      	nop
 80022dc:	e004      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      break;
 80022de:	bf00      	nop
 80022e0:	e002      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80022e2:	bf00      	nop
 80022e4:	e000      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      break;
 80022e6:	bf00      	nop
    }
  } 
  
  return status; 
 80022e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop

080022f8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e039      	b.n	800237e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d106      	bne.n	8002324 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7fe ffce 	bl	80012c0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2202      	movs	r2, #2
 8002328:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	430a      	orrs	r2, r1
 8002340:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002348:	f023 0107 	bic.w	r1, r3, #7
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800235e:	4b0a      	ldr	r3, [pc, #40]	@ (8002388 <HAL_DMA2D_Init+0x90>)
 8002360:	4013      	ands	r3, r2
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	68d1      	ldr	r1, [r2, #12]
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	6812      	ldr	r2, [r2, #0]
 800236a:	430b      	orrs	r3, r1
 800236c:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	ffffc000 	.word	0xffffc000

0800238c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800238c:	b480      	push	{r7}
 800238e:	b087      	sub	sp, #28
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d101      	bne.n	80023ac <HAL_DMA2D_ConfigLayer+0x20>
 80023a8:	2302      	movs	r3, #2
 80023aa:	e079      	b.n	80024a0 <HAL_DMA2D_ConfigLayer+0x114>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2202      	movs	r2, #2
 80023b8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	011b      	lsls	r3, r3, #4
 80023c0:	3318      	adds	r3, #24
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	4413      	add	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	041b      	lsls	r3, r3, #16
 80023d2:	4313      	orrs	r3, r2
 80023d4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80023d6:	4b35      	ldr	r3, [pc, #212]	@ (80024ac <HAL_DMA2D_ConfigLayer+0x120>)
 80023d8:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b0a      	cmp	r3, #10
 80023e0:	d003      	beq.n	80023ea <HAL_DMA2D_ConfigLayer+0x5e>
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b09      	cmp	r3, #9
 80023e8:	d107      	bne.n	80023fa <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	617b      	str	r3, [r7, #20]
 80023f8:	e005      	b.n	8002406 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	061b      	lsls	r3, r3, #24
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	4313      	orrs	r3, r2
 8002404:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d120      	bne.n	800244e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	43db      	mvns	r3, r3
 8002416:	ea02 0103 	and.w	r1, r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	430a      	orrs	r2, r1
 8002422:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	6812      	ldr	r2, [r2, #0]
 800242c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b0a      	cmp	r3, #10
 8002434:	d003      	beq.n	800243e <HAL_DMA2D_ConfigLayer+0xb2>
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b09      	cmp	r3, #9
 800243c:	d127      	bne.n	800248e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800244a:	629a      	str	r2, [r3, #40]	@ 0x28
 800244c:	e01f      	b.n	800248e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	69da      	ldr	r2, [r3, #28]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	43db      	mvns	r3, r3
 8002458:	ea02 0103 	and.w	r1, r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	430a      	orrs	r2, r1
 8002464:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	6812      	ldr	r2, [r2, #0]
 800246e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2b0a      	cmp	r3, #10
 8002476:	d003      	beq.n	8002480 <HAL_DMA2D_ConfigLayer+0xf4>
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	2b09      	cmp	r3, #9
 800247e:	d106      	bne.n	800248e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	68da      	ldr	r2, [r3, #12]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800248c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	371c      	adds	r7, #28
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	ff03000f 	.word	0xff03000f

080024b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b089      	sub	sp, #36	@ 0x24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80024ba:	2300      	movs	r3, #0
 80024bc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80024c2:	2300      	movs	r3, #0
 80024c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80024c6:	2300      	movs	r3, #0
 80024c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80024ca:	2300      	movs	r3, #0
 80024cc:	61fb      	str	r3, [r7, #28]
 80024ce:	e175      	b.n	80027bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80024d0:	2201      	movs	r2, #1
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	4013      	ands	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	f040 8164 	bne.w	80027b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d005      	beq.n	8002506 <HAL_GPIO_Init+0x56>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d130      	bne.n	8002568 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	2203      	movs	r2, #3
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	43db      	mvns	r3, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4013      	ands	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	68da      	ldr	r2, [r3, #12]
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4313      	orrs	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800253c:	2201      	movs	r2, #1
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4013      	ands	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	091b      	lsrs	r3, r3, #4
 8002552:	f003 0201 	and.w	r2, r3, #1
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4313      	orrs	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 0303 	and.w	r3, r3, #3
 8002570:	2b03      	cmp	r3, #3
 8002572:	d017      	beq.n	80025a4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	2203      	movs	r2, #3
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 0303 	and.w	r3, r3, #3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d123      	bne.n	80025f8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	08da      	lsrs	r2, r3, #3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3208      	adds	r2, #8
 80025b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	220f      	movs	r2, #15
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4013      	ands	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	691a      	ldr	r2, [r3, #16]
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	08da      	lsrs	r2, r3, #3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	3208      	adds	r2, #8
 80025f2:	69b9      	ldr	r1, [r7, #24]
 80025f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	2203      	movs	r2, #3
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4013      	ands	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 0203 	and.w	r2, r3, #3
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4313      	orrs	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 80be 	beq.w	80027b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800263a:	4b66      	ldr	r3, [pc, #408]	@ (80027d4 <HAL_GPIO_Init+0x324>)
 800263c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800263e:	4a65      	ldr	r2, [pc, #404]	@ (80027d4 <HAL_GPIO_Init+0x324>)
 8002640:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002644:	6453      	str	r3, [r2, #68]	@ 0x44
 8002646:	4b63      	ldr	r3, [pc, #396]	@ (80027d4 <HAL_GPIO_Init+0x324>)
 8002648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800264a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002652:	4a61      	ldr	r2, [pc, #388]	@ (80027d8 <HAL_GPIO_Init+0x328>)
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	089b      	lsrs	r3, r3, #2
 8002658:	3302      	adds	r3, #2
 800265a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800265e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	220f      	movs	r2, #15
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43db      	mvns	r3, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4013      	ands	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a58      	ldr	r2, [pc, #352]	@ (80027dc <HAL_GPIO_Init+0x32c>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d037      	beq.n	80026ee <HAL_GPIO_Init+0x23e>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a57      	ldr	r2, [pc, #348]	@ (80027e0 <HAL_GPIO_Init+0x330>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d031      	beq.n	80026ea <HAL_GPIO_Init+0x23a>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a56      	ldr	r2, [pc, #344]	@ (80027e4 <HAL_GPIO_Init+0x334>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d02b      	beq.n	80026e6 <HAL_GPIO_Init+0x236>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a55      	ldr	r2, [pc, #340]	@ (80027e8 <HAL_GPIO_Init+0x338>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d025      	beq.n	80026e2 <HAL_GPIO_Init+0x232>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a54      	ldr	r2, [pc, #336]	@ (80027ec <HAL_GPIO_Init+0x33c>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d01f      	beq.n	80026de <HAL_GPIO_Init+0x22e>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a53      	ldr	r2, [pc, #332]	@ (80027f0 <HAL_GPIO_Init+0x340>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d019      	beq.n	80026da <HAL_GPIO_Init+0x22a>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a52      	ldr	r2, [pc, #328]	@ (80027f4 <HAL_GPIO_Init+0x344>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d013      	beq.n	80026d6 <HAL_GPIO_Init+0x226>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a51      	ldr	r2, [pc, #324]	@ (80027f8 <HAL_GPIO_Init+0x348>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d00d      	beq.n	80026d2 <HAL_GPIO_Init+0x222>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a50      	ldr	r2, [pc, #320]	@ (80027fc <HAL_GPIO_Init+0x34c>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d007      	beq.n	80026ce <HAL_GPIO_Init+0x21e>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a4f      	ldr	r2, [pc, #316]	@ (8002800 <HAL_GPIO_Init+0x350>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d101      	bne.n	80026ca <HAL_GPIO_Init+0x21a>
 80026c6:	2309      	movs	r3, #9
 80026c8:	e012      	b.n	80026f0 <HAL_GPIO_Init+0x240>
 80026ca:	230a      	movs	r3, #10
 80026cc:	e010      	b.n	80026f0 <HAL_GPIO_Init+0x240>
 80026ce:	2308      	movs	r3, #8
 80026d0:	e00e      	b.n	80026f0 <HAL_GPIO_Init+0x240>
 80026d2:	2307      	movs	r3, #7
 80026d4:	e00c      	b.n	80026f0 <HAL_GPIO_Init+0x240>
 80026d6:	2306      	movs	r3, #6
 80026d8:	e00a      	b.n	80026f0 <HAL_GPIO_Init+0x240>
 80026da:	2305      	movs	r3, #5
 80026dc:	e008      	b.n	80026f0 <HAL_GPIO_Init+0x240>
 80026de:	2304      	movs	r3, #4
 80026e0:	e006      	b.n	80026f0 <HAL_GPIO_Init+0x240>
 80026e2:	2303      	movs	r3, #3
 80026e4:	e004      	b.n	80026f0 <HAL_GPIO_Init+0x240>
 80026e6:	2302      	movs	r3, #2
 80026e8:	e002      	b.n	80026f0 <HAL_GPIO_Init+0x240>
 80026ea:	2301      	movs	r3, #1
 80026ec:	e000      	b.n	80026f0 <HAL_GPIO_Init+0x240>
 80026ee:	2300      	movs	r3, #0
 80026f0:	69fa      	ldr	r2, [r7, #28]
 80026f2:	f002 0203 	and.w	r2, r2, #3
 80026f6:	0092      	lsls	r2, r2, #2
 80026f8:	4093      	lsls	r3, r2
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002700:	4935      	ldr	r1, [pc, #212]	@ (80027d8 <HAL_GPIO_Init+0x328>)
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	089b      	lsrs	r3, r3, #2
 8002706:	3302      	adds	r3, #2
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800270e:	4b3d      	ldr	r3, [pc, #244]	@ (8002804 <HAL_GPIO_Init+0x354>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	43db      	mvns	r3, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4013      	ands	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	4313      	orrs	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002732:	4a34      	ldr	r2, [pc, #208]	@ (8002804 <HAL_GPIO_Init+0x354>)
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002738:	4b32      	ldr	r3, [pc, #200]	@ (8002804 <HAL_GPIO_Init+0x354>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	43db      	mvns	r3, r3
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4013      	ands	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d003      	beq.n	800275c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	4313      	orrs	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800275c:	4a29      	ldr	r2, [pc, #164]	@ (8002804 <HAL_GPIO_Init+0x354>)
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002762:	4b28      	ldr	r3, [pc, #160]	@ (8002804 <HAL_GPIO_Init+0x354>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	43db      	mvns	r3, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4013      	ands	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	4313      	orrs	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002786:	4a1f      	ldr	r2, [pc, #124]	@ (8002804 <HAL_GPIO_Init+0x354>)
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800278c:	4b1d      	ldr	r3, [pc, #116]	@ (8002804 <HAL_GPIO_Init+0x354>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	43db      	mvns	r3, r3
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4013      	ands	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d003      	beq.n	80027b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027b0:	4a14      	ldr	r2, [pc, #80]	@ (8002804 <HAL_GPIO_Init+0x354>)
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	3301      	adds	r3, #1
 80027ba:	61fb      	str	r3, [r7, #28]
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	2b0f      	cmp	r3, #15
 80027c0:	f67f ae86 	bls.w	80024d0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80027c4:	bf00      	nop
 80027c6:	bf00      	nop
 80027c8:	3724      	adds	r7, #36	@ 0x24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40013800 	.word	0x40013800
 80027dc:	40020000 	.word	0x40020000
 80027e0:	40020400 	.word	0x40020400
 80027e4:	40020800 	.word	0x40020800
 80027e8:	40020c00 	.word	0x40020c00
 80027ec:	40021000 	.word	0x40021000
 80027f0:	40021400 	.word	0x40021400
 80027f4:	40021800 	.word	0x40021800
 80027f8:	40021c00 	.word	0x40021c00
 80027fc:	40022000 	.word	0x40022000
 8002800:	40022400 	.word	0x40022400
 8002804:	40013c00 	.word	0x40013c00

08002808 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	691a      	ldr	r2, [r3, #16]
 8002818:	887b      	ldrh	r3, [r7, #2]
 800281a:	4013      	ands	r3, r2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d002      	beq.n	8002826 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002820:	2301      	movs	r3, #1
 8002822:	73fb      	strb	r3, [r7, #15]
 8002824:	e001      	b.n	800282a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002826:	2300      	movs	r3, #0
 8002828:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800282a:	7bfb      	ldrb	r3, [r7, #15]
}
 800282c:	4618      	mov	r0, r3
 800282e:	3714      	adds	r7, #20
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	460b      	mov	r3, r1
 8002842:	807b      	strh	r3, [r7, #2]
 8002844:	4613      	mov	r3, r2
 8002846:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002848:	787b      	ldrb	r3, [r7, #1]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800284e:	887a      	ldrh	r2, [r7, #2]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002854:	e003      	b.n	800285e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002856:	887b      	ldrh	r3, [r7, #2]
 8002858:	041a      	lsls	r2, r3, #16
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	619a      	str	r2, [r3, #24]
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
	...

0800286c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e0bf      	b.n	80029fe <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d106      	bne.n	8002898 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7fe fd34 	bl	8001300 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2202      	movs	r2, #2
 800289c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	699a      	ldr	r2, [r3, #24]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80028ae:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6999      	ldr	r1, [r3, #24]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80028c4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6899      	ldr	r1, [r3, #8]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	4b4a      	ldr	r3, [pc, #296]	@ (8002a08 <HAL_LTDC_Init+0x19c>)
 80028e0:	400b      	ands	r3, r1
 80028e2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	041b      	lsls	r3, r3, #16
 80028ea:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6899      	ldr	r1, [r3, #8]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	699a      	ldr	r2, [r3, #24]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	431a      	orrs	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68d9      	ldr	r1, [r3, #12]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	4b3e      	ldr	r3, [pc, #248]	@ (8002a08 <HAL_LTDC_Init+0x19c>)
 800290e:	400b      	ands	r3, r1
 8002910:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	041b      	lsls	r3, r3, #16
 8002918:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68d9      	ldr	r1, [r3, #12]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a1a      	ldr	r2, [r3, #32]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	431a      	orrs	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	430a      	orrs	r2, r1
 800292e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6919      	ldr	r1, [r3, #16]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	4b33      	ldr	r3, [pc, #204]	@ (8002a08 <HAL_LTDC_Init+0x19c>)
 800293c:	400b      	ands	r3, r1
 800293e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002944:	041b      	lsls	r3, r3, #16
 8002946:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6919      	ldr	r1, [r3, #16]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	431a      	orrs	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6959      	ldr	r1, [r3, #20]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	4b27      	ldr	r3, [pc, #156]	@ (8002a08 <HAL_LTDC_Init+0x19c>)
 800296a:	400b      	ands	r3, r1
 800296c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002972:	041b      	lsls	r3, r3, #16
 8002974:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6959      	ldr	r1, [r3, #20]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	431a      	orrs	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	430a      	orrs	r2, r1
 800298a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002992:	021b      	lsls	r3, r3, #8
 8002994:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800299c:	041b      	lsls	r3, r3, #16
 800299e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80029ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80029b6:	68ba      	ldr	r2, [r7, #8]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80029c2:	431a      	orrs	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	430a      	orrs	r2, r1
 80029ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f042 0206 	orr.w	r2, r2, #6
 80029da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	699a      	ldr	r2, [r3, #24]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0201 	orr.w	r2, r2, #1
 80029ea:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	f000f800 	.word	0xf000f800

08002a0c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002a0c:	b5b0      	push	{r4, r5, r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d101      	bne.n	8002a26 <HAL_LTDC_ConfigLayer+0x1a>
 8002a22:	2302      	movs	r3, #2
 8002a24:	e02c      	b.n	8002a80 <HAL_LTDC_ConfigLayer+0x74>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2202      	movs	r2, #2
 8002a32:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2134      	movs	r1, #52	@ 0x34
 8002a3c:	fb01 f303 	mul.w	r3, r1, r3
 8002a40:	4413      	add	r3, r2
 8002a42:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	4614      	mov	r4, r2
 8002a4a:	461d      	mov	r5, r3
 8002a4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a58:	682b      	ldr	r3, [r5, #0]
 8002a5a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	68b9      	ldr	r1, [r7, #8]
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f000 f811 	bl	8002a88 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bdb0      	pop	{r4, r5, r7, pc}

08002a88 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b089      	sub	sp, #36	@ 0x24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	0c1b      	lsrs	r3, r3, #16
 8002aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aa4:	4413      	add	r3, r2
 8002aa6:	041b      	lsls	r3, r3, #16
 8002aa8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	01db      	lsls	r3, r3, #7
 8002ab4:	4413      	add	r3, r2
 8002ab6:	3384      	adds	r3, #132	@ 0x84
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	6812      	ldr	r2, [r2, #0]
 8002abe:	4611      	mov	r1, r2
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	01d2      	lsls	r2, r2, #7
 8002ac4:	440a      	add	r2, r1
 8002ac6:	3284      	adds	r2, #132	@ 0x84
 8002ac8:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002acc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	0c1b      	lsrs	r3, r3, #16
 8002ada:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002ade:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002ae0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	01db      	lsls	r3, r3, #7
 8002aec:	440b      	add	r3, r1
 8002aee:	3384      	adds	r3, #132	@ 0x84
 8002af0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002af6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	68da      	ldr	r2, [r3, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b06:	4413      	add	r3, r2
 8002b08:	041b      	lsls	r3, r3, #16
 8002b0a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	461a      	mov	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	01db      	lsls	r3, r3, #7
 8002b16:	4413      	add	r3, r2
 8002b18:	3384      	adds	r3, #132	@ 0x84
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	6812      	ldr	r2, [r2, #0]
 8002b20:	4611      	mov	r1, r2
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	01d2      	lsls	r2, r2, #7
 8002b26:	440a      	add	r2, r1
 8002b28:	3284      	adds	r2, #132	@ 0x84
 8002b2a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002b2e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b3e:	4413      	add	r3, r2
 8002b40:	1c5a      	adds	r2, r3, #1
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4619      	mov	r1, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	01db      	lsls	r3, r3, #7
 8002b4c:	440b      	add	r3, r1
 8002b4e:	3384      	adds	r3, #132	@ 0x84
 8002b50:	4619      	mov	r1, r3
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	01db      	lsls	r3, r3, #7
 8002b62:	4413      	add	r3, r2
 8002b64:	3384      	adds	r3, #132	@ 0x84
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	6812      	ldr	r2, [r2, #0]
 8002b6c:	4611      	mov	r1, r2
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	01d2      	lsls	r2, r2, #7
 8002b72:	440a      	add	r2, r1
 8002b74:	3284      	adds	r2, #132	@ 0x84
 8002b76:	f023 0307 	bic.w	r3, r3, #7
 8002b7a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	461a      	mov	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	01db      	lsls	r3, r3, #7
 8002b86:	4413      	add	r3, r2
 8002b88:	3384      	adds	r3, #132	@ 0x84
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002b98:	021b      	lsls	r3, r3, #8
 8002b9a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002ba2:	041b      	lsls	r3, r3, #16
 8002ba4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	061b      	lsls	r3, r3, #24
 8002bac:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	01db      	lsls	r3, r3, #7
 8002bb8:	4413      	add	r3, r2
 8002bba:	3384      	adds	r3, #132	@ 0x84
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	01db      	lsls	r3, r3, #7
 8002bc8:	4413      	add	r3, r2
 8002bca:	3384      	adds	r3, #132	@ 0x84
 8002bcc:	461a      	mov	r2, r3
 8002bce:	2300      	movs	r3, #0
 8002bd0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002bd8:	461a      	mov	r2, r3
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	431a      	orrs	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4619      	mov	r1, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	01db      	lsls	r3, r3, #7
 8002bec:	440b      	add	r3, r1
 8002bee:	3384      	adds	r3, #132	@ 0x84
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	01db      	lsls	r3, r3, #7
 8002c02:	4413      	add	r3, r2
 8002c04:	3384      	adds	r3, #132	@ 0x84
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	6812      	ldr	r2, [r2, #0]
 8002c0c:	4611      	mov	r1, r2
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	01d2      	lsls	r2, r2, #7
 8002c12:	440a      	add	r2, r1
 8002c14:	3284      	adds	r2, #132	@ 0x84
 8002c16:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002c1a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	461a      	mov	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	01db      	lsls	r3, r3, #7
 8002c26:	4413      	add	r3, r2
 8002c28:	3384      	adds	r3, #132	@ 0x84
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	461a      	mov	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	01db      	lsls	r3, r3, #7
 8002c3c:	4413      	add	r3, r2
 8002c3e:	3384      	adds	r3, #132	@ 0x84
 8002c40:	69da      	ldr	r2, [r3, #28]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4619      	mov	r1, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	01db      	lsls	r3, r3, #7
 8002c4c:	440b      	add	r3, r1
 8002c4e:	3384      	adds	r3, #132	@ 0x84
 8002c50:	4619      	mov	r1, r3
 8002c52:	4b58      	ldr	r3, [pc, #352]	@ (8002db4 <LTDC_SetConfig+0x32c>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	69da      	ldr	r2, [r3, #28]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	68f9      	ldr	r1, [r7, #12]
 8002c62:	6809      	ldr	r1, [r1, #0]
 8002c64:	4608      	mov	r0, r1
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	01c9      	lsls	r1, r1, #7
 8002c6a:	4401      	add	r1, r0
 8002c6c:	3184      	adds	r1, #132	@ 0x84
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	461a      	mov	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	01db      	lsls	r3, r3, #7
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3384      	adds	r3, #132	@ 0x84
 8002c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	461a      	mov	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	01db      	lsls	r3, r3, #7
 8002c8c:	4413      	add	r3, r2
 8002c8e:	3384      	adds	r3, #132	@ 0x84
 8002c90:	461a      	mov	r2, r3
 8002c92:	2300      	movs	r3, #0
 8002c94:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	01db      	lsls	r3, r3, #7
 8002ca0:	4413      	add	r3, r2
 8002ca2:	3384      	adds	r3, #132	@ 0x84
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002caa:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d102      	bne.n	8002cba <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8002cb4:	2304      	movs	r3, #4
 8002cb6:	61fb      	str	r3, [r7, #28]
 8002cb8:	e01b      	b.n	8002cf2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d102      	bne.n	8002cc8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	61fb      	str	r3, [r7, #28]
 8002cc6:	e014      	b.n	8002cf2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d00b      	beq.n	8002ce8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d007      	beq.n	8002ce8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002cdc:	2b03      	cmp	r3, #3
 8002cde:	d003      	beq.n	8002ce8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002ce4:	2b07      	cmp	r3, #7
 8002ce6:	d102      	bne.n	8002cee <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8002ce8:	2302      	movs	r3, #2
 8002cea:	61fb      	str	r3, [r7, #28]
 8002cec:	e001      	b.n	8002cf2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	01db      	lsls	r3, r3, #7
 8002cfc:	4413      	add	r3, r2
 8002cfe:	3384      	adds	r3, #132	@ 0x84
 8002d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	6812      	ldr	r2, [r2, #0]
 8002d06:	4611      	mov	r1, r2
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	01d2      	lsls	r2, r2, #7
 8002d0c:	440a      	add	r2, r1
 8002d0e:	3284      	adds	r2, #132	@ 0x84
 8002d10:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8002d14:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d1a:	69fa      	ldr	r2, [r7, #28]
 8002d1c:	fb02 f303 	mul.w	r3, r2, r3
 8002d20:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	6859      	ldr	r1, [r3, #4]
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	1acb      	subs	r3, r1, r3
 8002d2c:	69f9      	ldr	r1, [r7, #28]
 8002d2e:	fb01 f303 	mul.w	r3, r1, r3
 8002d32:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002d34:	68f9      	ldr	r1, [r7, #12]
 8002d36:	6809      	ldr	r1, [r1, #0]
 8002d38:	4608      	mov	r0, r1
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	01c9      	lsls	r1, r1, #7
 8002d3e:	4401      	add	r1, r0
 8002d40:	3184      	adds	r1, #132	@ 0x84
 8002d42:	4313      	orrs	r3, r2
 8002d44:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	01db      	lsls	r3, r3, #7
 8002d50:	4413      	add	r3, r2
 8002d52:	3384      	adds	r3, #132	@ 0x84
 8002d54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	01db      	lsls	r3, r3, #7
 8002d60:	440b      	add	r3, r1
 8002d62:	3384      	adds	r3, #132	@ 0x84
 8002d64:	4619      	mov	r1, r3
 8002d66:	4b14      	ldr	r3, [pc, #80]	@ (8002db8 <LTDC_SetConfig+0x330>)
 8002d68:	4013      	ands	r3, r2
 8002d6a:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	461a      	mov	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	01db      	lsls	r3, r3, #7
 8002d76:	4413      	add	r3, r2
 8002d78:	3384      	adds	r3, #132	@ 0x84
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d80:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	461a      	mov	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	01db      	lsls	r3, r3, #7
 8002d8c:	4413      	add	r3, r2
 8002d8e:	3384      	adds	r3, #132	@ 0x84
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	6812      	ldr	r2, [r2, #0]
 8002d96:	4611      	mov	r1, r2
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	01d2      	lsls	r2, r2, #7
 8002d9c:	440a      	add	r2, r1
 8002d9e:	3284      	adds	r2, #132	@ 0x84
 8002da0:	f043 0301 	orr.w	r3, r3, #1
 8002da4:	6013      	str	r3, [r2, #0]
}
 8002da6:	bf00      	nop
 8002da8:	3724      	adds	r7, #36	@ 0x24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	fffff8f8 	.word	0xfffff8f8
 8002db8:	fffff800 	.word	0xfffff800

08002dbc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e291      	b.n	80032f6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f000 8087 	beq.w	8002eee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002de0:	4b96      	ldr	r3, [pc, #600]	@ (800303c <HAL_RCC_OscConfig+0x280>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f003 030c 	and.w	r3, r3, #12
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d00c      	beq.n	8002e06 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dec:	4b93      	ldr	r3, [pc, #588]	@ (800303c <HAL_RCC_OscConfig+0x280>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f003 030c 	and.w	r3, r3, #12
 8002df4:	2b08      	cmp	r3, #8
 8002df6:	d112      	bne.n	8002e1e <HAL_RCC_OscConfig+0x62>
 8002df8:	4b90      	ldr	r3, [pc, #576]	@ (800303c <HAL_RCC_OscConfig+0x280>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e04:	d10b      	bne.n	8002e1e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e06:	4b8d      	ldr	r3, [pc, #564]	@ (800303c <HAL_RCC_OscConfig+0x280>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d06c      	beq.n	8002eec <HAL_RCC_OscConfig+0x130>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d168      	bne.n	8002eec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e26b      	b.n	80032f6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e26:	d106      	bne.n	8002e36 <HAL_RCC_OscConfig+0x7a>
 8002e28:	4b84      	ldr	r3, [pc, #528]	@ (800303c <HAL_RCC_OscConfig+0x280>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a83      	ldr	r2, [pc, #524]	@ (800303c <HAL_RCC_OscConfig+0x280>)
 8002e2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e32:	6013      	str	r3, [r2, #0]
 8002e34:	e02e      	b.n	8002e94 <HAL_RCC_OscConfig+0xd8>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10c      	bne.n	8002e58 <HAL_RCC_OscConfig+0x9c>
 8002e3e:	4b7f      	ldr	r3, [pc, #508]	@ (800303c <HAL_RCC_OscConfig+0x280>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a7e      	ldr	r2, [pc, #504]	@ (800303c <HAL_RCC_OscConfig+0x280>)
 8002e44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e48:	6013      	str	r3, [r2, #0]
 8002e4a:	4b7c      	ldr	r3, [pc, #496]	@ (800303c <HAL_RCC_OscConfig+0x280>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a7b      	ldr	r2, [pc, #492]	@ (800303c <HAL_RCC_OscConfig+0x280>)
 8002e50:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e54:	6013      	str	r3, [r2, #0]
 8002e56:	e01d      	b.n	8002e94 <HAL_RCC_OscConfig+0xd8>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e60:	d10c      	bne.n	8002e7c <HAL_RCC_OscConfig+0xc0>
 8002e62:	4b76      	ldr	r3, [pc, #472]	@ (800303c <HAL_RCC_OscConfig+0x280>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a75      	ldr	r2, [pc, #468]	@ (800303c <HAL_RCC_OscConfig+0x280>)
 8002e68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e6c:	6013      	str	r3, [r2, #0]
 8002e6e:	4b73      	ldr	r3, [pc, #460]	@ (800303c <HAL_RCC_OscConfig+0x280>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a72      	ldr	r2, [pc, #456]	@ (800303c <HAL_RCC_OscConfig+0x280>)
 8002e74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e78:	6013      	str	r3, [r2, #0]
 8002e7a:	e00b      	b.n	8002e94 <HAL_RCC_OscConfig+0xd8>
 8002e7c:	4b6f      	ldr	r3, [pc, #444]	@ (800303c <HAL_RCC_OscConfig+0x280>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a6e      	ldr	r2, [pc, #440]	@ (800303c <HAL_RCC_OscConfig+0x280>)
 8002e82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e86:	6013      	str	r3, [r2, #0]
 8002e88:	4b6c      	ldr	r3, [pc, #432]	@ (800303c <HAL_RCC_OscConfig+0x280>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a6b      	ldr	r2, [pc, #428]	@ (800303c <HAL_RCC_OscConfig+0x280>)
 8002e8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d013      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9c:	f7fe fd44 	bl	8001928 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ea4:	f7fe fd40 	bl	8001928 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b64      	cmp	r3, #100	@ 0x64
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e21f      	b.n	80032f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eb6:	4b61      	ldr	r3, [pc, #388]	@ (800303c <HAL_RCC_OscConfig+0x280>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0f0      	beq.n	8002ea4 <HAL_RCC_OscConfig+0xe8>
 8002ec2:	e014      	b.n	8002eee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec4:	f7fe fd30 	bl	8001928 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ecc:	f7fe fd2c 	bl	8001928 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b64      	cmp	r3, #100	@ 0x64
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e20b      	b.n	80032f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ede:	4b57      	ldr	r3, [pc, #348]	@ (800303c <HAL_RCC_OscConfig+0x280>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1f0      	bne.n	8002ecc <HAL_RCC_OscConfig+0x110>
 8002eea:	e000      	b.n	8002eee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d069      	beq.n	8002fce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002efa:	4b50      	ldr	r3, [pc, #320]	@ (800303c <HAL_RCC_OscConfig+0x280>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 030c 	and.w	r3, r3, #12
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00b      	beq.n	8002f1e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f06:	4b4d      	ldr	r3, [pc, #308]	@ (800303c <HAL_RCC_OscConfig+0x280>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 030c 	and.w	r3, r3, #12
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d11c      	bne.n	8002f4c <HAL_RCC_OscConfig+0x190>
 8002f12:	4b4a      	ldr	r3, [pc, #296]	@ (800303c <HAL_RCC_OscConfig+0x280>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d116      	bne.n	8002f4c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f1e:	4b47      	ldr	r3, [pc, #284]	@ (800303c <HAL_RCC_OscConfig+0x280>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d005      	beq.n	8002f36 <HAL_RCC_OscConfig+0x17a>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d001      	beq.n	8002f36 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e1df      	b.n	80032f6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f36:	4b41      	ldr	r3, [pc, #260]	@ (800303c <HAL_RCC_OscConfig+0x280>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	493d      	ldr	r1, [pc, #244]	@ (800303c <HAL_RCC_OscConfig+0x280>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f4a:	e040      	b.n	8002fce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d023      	beq.n	8002f9c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f54:	4b39      	ldr	r3, [pc, #228]	@ (800303c <HAL_RCC_OscConfig+0x280>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a38      	ldr	r2, [pc, #224]	@ (800303c <HAL_RCC_OscConfig+0x280>)
 8002f5a:	f043 0301 	orr.w	r3, r3, #1
 8002f5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f60:	f7fe fce2 	bl	8001928 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f68:	f7fe fcde 	bl	8001928 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e1bd      	b.n	80032f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f7a:	4b30      	ldr	r3, [pc, #192]	@ (800303c <HAL_RCC_OscConfig+0x280>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d0f0      	beq.n	8002f68 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f86:	4b2d      	ldr	r3, [pc, #180]	@ (800303c <HAL_RCC_OscConfig+0x280>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	4929      	ldr	r1, [pc, #164]	@ (800303c <HAL_RCC_OscConfig+0x280>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	600b      	str	r3, [r1, #0]
 8002f9a:	e018      	b.n	8002fce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f9c:	4b27      	ldr	r3, [pc, #156]	@ (800303c <HAL_RCC_OscConfig+0x280>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a26      	ldr	r2, [pc, #152]	@ (800303c <HAL_RCC_OscConfig+0x280>)
 8002fa2:	f023 0301 	bic.w	r3, r3, #1
 8002fa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa8:	f7fe fcbe 	bl	8001928 <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fb0:	f7fe fcba 	bl	8001928 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e199      	b.n	80032f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fc2:	4b1e      	ldr	r3, [pc, #120]	@ (800303c <HAL_RCC_OscConfig+0x280>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1f0      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0308 	and.w	r3, r3, #8
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d038      	beq.n	800304c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d019      	beq.n	8003016 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fe2:	4b16      	ldr	r3, [pc, #88]	@ (800303c <HAL_RCC_OscConfig+0x280>)
 8002fe4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fe6:	4a15      	ldr	r2, [pc, #84]	@ (800303c <HAL_RCC_OscConfig+0x280>)
 8002fe8:	f043 0301 	orr.w	r3, r3, #1
 8002fec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fee:	f7fe fc9b 	bl	8001928 <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ff6:	f7fe fc97 	bl	8001928 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e176      	b.n	80032f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003008:	4b0c      	ldr	r3, [pc, #48]	@ (800303c <HAL_RCC_OscConfig+0x280>)
 800300a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0f0      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x23a>
 8003014:	e01a      	b.n	800304c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003016:	4b09      	ldr	r3, [pc, #36]	@ (800303c <HAL_RCC_OscConfig+0x280>)
 8003018:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800301a:	4a08      	ldr	r2, [pc, #32]	@ (800303c <HAL_RCC_OscConfig+0x280>)
 800301c:	f023 0301 	bic.w	r3, r3, #1
 8003020:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003022:	f7fe fc81 	bl	8001928 <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003028:	e00a      	b.n	8003040 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800302a:	f7fe fc7d 	bl	8001928 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d903      	bls.n	8003040 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e15c      	b.n	80032f6 <HAL_RCC_OscConfig+0x53a>
 800303c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003040:	4b91      	ldr	r3, [pc, #580]	@ (8003288 <HAL_RCC_OscConfig+0x4cc>)
 8003042:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1ee      	bne.n	800302a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b00      	cmp	r3, #0
 8003056:	f000 80a4 	beq.w	80031a2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800305a:	4b8b      	ldr	r3, [pc, #556]	@ (8003288 <HAL_RCC_OscConfig+0x4cc>)
 800305c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10d      	bne.n	8003082 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003066:	4b88      	ldr	r3, [pc, #544]	@ (8003288 <HAL_RCC_OscConfig+0x4cc>)
 8003068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306a:	4a87      	ldr	r2, [pc, #540]	@ (8003288 <HAL_RCC_OscConfig+0x4cc>)
 800306c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003070:	6413      	str	r3, [r2, #64]	@ 0x40
 8003072:	4b85      	ldr	r3, [pc, #532]	@ (8003288 <HAL_RCC_OscConfig+0x4cc>)
 8003074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003076:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800307a:	60bb      	str	r3, [r7, #8]
 800307c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800307e:	2301      	movs	r3, #1
 8003080:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003082:	4b82      	ldr	r3, [pc, #520]	@ (800328c <HAL_RCC_OscConfig+0x4d0>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800308a:	2b00      	cmp	r3, #0
 800308c:	d118      	bne.n	80030c0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800308e:	4b7f      	ldr	r3, [pc, #508]	@ (800328c <HAL_RCC_OscConfig+0x4d0>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a7e      	ldr	r2, [pc, #504]	@ (800328c <HAL_RCC_OscConfig+0x4d0>)
 8003094:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003098:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800309a:	f7fe fc45 	bl	8001928 <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030a0:	e008      	b.n	80030b4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030a2:	f7fe fc41 	bl	8001928 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b64      	cmp	r3, #100	@ 0x64
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e120      	b.n	80032f6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030b4:	4b75      	ldr	r3, [pc, #468]	@ (800328c <HAL_RCC_OscConfig+0x4d0>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d0f0      	beq.n	80030a2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d106      	bne.n	80030d6 <HAL_RCC_OscConfig+0x31a>
 80030c8:	4b6f      	ldr	r3, [pc, #444]	@ (8003288 <HAL_RCC_OscConfig+0x4cc>)
 80030ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030cc:	4a6e      	ldr	r2, [pc, #440]	@ (8003288 <HAL_RCC_OscConfig+0x4cc>)
 80030ce:	f043 0301 	orr.w	r3, r3, #1
 80030d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80030d4:	e02d      	b.n	8003132 <HAL_RCC_OscConfig+0x376>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10c      	bne.n	80030f8 <HAL_RCC_OscConfig+0x33c>
 80030de:	4b6a      	ldr	r3, [pc, #424]	@ (8003288 <HAL_RCC_OscConfig+0x4cc>)
 80030e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030e2:	4a69      	ldr	r2, [pc, #420]	@ (8003288 <HAL_RCC_OscConfig+0x4cc>)
 80030e4:	f023 0301 	bic.w	r3, r3, #1
 80030e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80030ea:	4b67      	ldr	r3, [pc, #412]	@ (8003288 <HAL_RCC_OscConfig+0x4cc>)
 80030ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ee:	4a66      	ldr	r2, [pc, #408]	@ (8003288 <HAL_RCC_OscConfig+0x4cc>)
 80030f0:	f023 0304 	bic.w	r3, r3, #4
 80030f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80030f6:	e01c      	b.n	8003132 <HAL_RCC_OscConfig+0x376>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	2b05      	cmp	r3, #5
 80030fe:	d10c      	bne.n	800311a <HAL_RCC_OscConfig+0x35e>
 8003100:	4b61      	ldr	r3, [pc, #388]	@ (8003288 <HAL_RCC_OscConfig+0x4cc>)
 8003102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003104:	4a60      	ldr	r2, [pc, #384]	@ (8003288 <HAL_RCC_OscConfig+0x4cc>)
 8003106:	f043 0304 	orr.w	r3, r3, #4
 800310a:	6713      	str	r3, [r2, #112]	@ 0x70
 800310c:	4b5e      	ldr	r3, [pc, #376]	@ (8003288 <HAL_RCC_OscConfig+0x4cc>)
 800310e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003110:	4a5d      	ldr	r2, [pc, #372]	@ (8003288 <HAL_RCC_OscConfig+0x4cc>)
 8003112:	f043 0301 	orr.w	r3, r3, #1
 8003116:	6713      	str	r3, [r2, #112]	@ 0x70
 8003118:	e00b      	b.n	8003132 <HAL_RCC_OscConfig+0x376>
 800311a:	4b5b      	ldr	r3, [pc, #364]	@ (8003288 <HAL_RCC_OscConfig+0x4cc>)
 800311c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800311e:	4a5a      	ldr	r2, [pc, #360]	@ (8003288 <HAL_RCC_OscConfig+0x4cc>)
 8003120:	f023 0301 	bic.w	r3, r3, #1
 8003124:	6713      	str	r3, [r2, #112]	@ 0x70
 8003126:	4b58      	ldr	r3, [pc, #352]	@ (8003288 <HAL_RCC_OscConfig+0x4cc>)
 8003128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800312a:	4a57      	ldr	r2, [pc, #348]	@ (8003288 <HAL_RCC_OscConfig+0x4cc>)
 800312c:	f023 0304 	bic.w	r3, r3, #4
 8003130:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d015      	beq.n	8003166 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313a:	f7fe fbf5 	bl	8001928 <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003140:	e00a      	b.n	8003158 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003142:	f7fe fbf1 	bl	8001928 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003150:	4293      	cmp	r3, r2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e0ce      	b.n	80032f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003158:	4b4b      	ldr	r3, [pc, #300]	@ (8003288 <HAL_RCC_OscConfig+0x4cc>)
 800315a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0ee      	beq.n	8003142 <HAL_RCC_OscConfig+0x386>
 8003164:	e014      	b.n	8003190 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003166:	f7fe fbdf 	bl	8001928 <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800316c:	e00a      	b.n	8003184 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800316e:	f7fe fbdb 	bl	8001928 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	f241 3288 	movw	r2, #5000	@ 0x1388
 800317c:	4293      	cmp	r3, r2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e0b8      	b.n	80032f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003184:	4b40      	ldr	r3, [pc, #256]	@ (8003288 <HAL_RCC_OscConfig+0x4cc>)
 8003186:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1ee      	bne.n	800316e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003190:	7dfb      	ldrb	r3, [r7, #23]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d105      	bne.n	80031a2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003196:	4b3c      	ldr	r3, [pc, #240]	@ (8003288 <HAL_RCC_OscConfig+0x4cc>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319a:	4a3b      	ldr	r2, [pc, #236]	@ (8003288 <HAL_RCC_OscConfig+0x4cc>)
 800319c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031a0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 80a4 	beq.w	80032f4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031ac:	4b36      	ldr	r3, [pc, #216]	@ (8003288 <HAL_RCC_OscConfig+0x4cc>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f003 030c 	and.w	r3, r3, #12
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	d06b      	beq.n	8003290 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d149      	bne.n	8003254 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c0:	4b31      	ldr	r3, [pc, #196]	@ (8003288 <HAL_RCC_OscConfig+0x4cc>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a30      	ldr	r2, [pc, #192]	@ (8003288 <HAL_RCC_OscConfig+0x4cc>)
 80031c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031cc:	f7fe fbac 	bl	8001928 <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d4:	f7fe fba8 	bl	8001928 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e087      	b.n	80032f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e6:	4b28      	ldr	r3, [pc, #160]	@ (8003288 <HAL_RCC_OscConfig+0x4cc>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1f0      	bne.n	80031d4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	69da      	ldr	r2, [r3, #28]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	431a      	orrs	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003200:	019b      	lsls	r3, r3, #6
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003208:	085b      	lsrs	r3, r3, #1
 800320a:	3b01      	subs	r3, #1
 800320c:	041b      	lsls	r3, r3, #16
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003214:	061b      	lsls	r3, r3, #24
 8003216:	4313      	orrs	r3, r2
 8003218:	4a1b      	ldr	r2, [pc, #108]	@ (8003288 <HAL_RCC_OscConfig+0x4cc>)
 800321a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800321e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003220:	4b19      	ldr	r3, [pc, #100]	@ (8003288 <HAL_RCC_OscConfig+0x4cc>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a18      	ldr	r2, [pc, #96]	@ (8003288 <HAL_RCC_OscConfig+0x4cc>)
 8003226:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800322a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322c:	f7fe fb7c 	bl	8001928 <HAL_GetTick>
 8003230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003232:	e008      	b.n	8003246 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003234:	f7fe fb78 	bl	8001928 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e057      	b.n	80032f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003246:	4b10      	ldr	r3, [pc, #64]	@ (8003288 <HAL_RCC_OscConfig+0x4cc>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d0f0      	beq.n	8003234 <HAL_RCC_OscConfig+0x478>
 8003252:	e04f      	b.n	80032f4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003254:	4b0c      	ldr	r3, [pc, #48]	@ (8003288 <HAL_RCC_OscConfig+0x4cc>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a0b      	ldr	r2, [pc, #44]	@ (8003288 <HAL_RCC_OscConfig+0x4cc>)
 800325a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800325e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003260:	f7fe fb62 	bl	8001928 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003268:	f7fe fb5e 	bl	8001928 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e03d      	b.n	80032f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800327a:	4b03      	ldr	r3, [pc, #12]	@ (8003288 <HAL_RCC_OscConfig+0x4cc>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f0      	bne.n	8003268 <HAL_RCC_OscConfig+0x4ac>
 8003286:	e035      	b.n	80032f4 <HAL_RCC_OscConfig+0x538>
 8003288:	40023800 	.word	0x40023800
 800328c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003290:	4b1b      	ldr	r3, [pc, #108]	@ (8003300 <HAL_RCC_OscConfig+0x544>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d028      	beq.n	80032f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d121      	bne.n	80032f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d11a      	bne.n	80032f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80032c0:	4013      	ands	r3, r2
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80032c6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d111      	bne.n	80032f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d6:	085b      	lsrs	r3, r3, #1
 80032d8:	3b01      	subs	r3, #1
 80032da:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032dc:	429a      	cmp	r2, r3
 80032de:	d107      	bne.n	80032f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d001      	beq.n	80032f4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e000      	b.n	80032f6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3718      	adds	r7, #24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	40023800 	.word	0x40023800

08003304 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800330e:	2300      	movs	r3, #0
 8003310:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d101      	bne.n	800331c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e0d0      	b.n	80034be <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800331c:	4b6a      	ldr	r3, [pc, #424]	@ (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 030f 	and.w	r3, r3, #15
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	429a      	cmp	r2, r3
 8003328:	d910      	bls.n	800334c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800332a:	4b67      	ldr	r3, [pc, #412]	@ (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f023 020f 	bic.w	r2, r3, #15
 8003332:	4965      	ldr	r1, [pc, #404]	@ (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	4313      	orrs	r3, r2
 8003338:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800333a:	4b63      	ldr	r3, [pc, #396]	@ (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	429a      	cmp	r2, r3
 8003346:	d001      	beq.n	800334c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e0b8      	b.n	80034be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d020      	beq.n	800339a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0304 	and.w	r3, r3, #4
 8003360:	2b00      	cmp	r3, #0
 8003362:	d005      	beq.n	8003370 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003364:	4b59      	ldr	r3, [pc, #356]	@ (80034cc <HAL_RCC_ClockConfig+0x1c8>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	4a58      	ldr	r2, [pc, #352]	@ (80034cc <HAL_RCC_ClockConfig+0x1c8>)
 800336a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800336e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0308 	and.w	r3, r3, #8
 8003378:	2b00      	cmp	r3, #0
 800337a:	d005      	beq.n	8003388 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800337c:	4b53      	ldr	r3, [pc, #332]	@ (80034cc <HAL_RCC_ClockConfig+0x1c8>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	4a52      	ldr	r2, [pc, #328]	@ (80034cc <HAL_RCC_ClockConfig+0x1c8>)
 8003382:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003386:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003388:	4b50      	ldr	r3, [pc, #320]	@ (80034cc <HAL_RCC_ClockConfig+0x1c8>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	494d      	ldr	r1, [pc, #308]	@ (80034cc <HAL_RCC_ClockConfig+0x1c8>)
 8003396:	4313      	orrs	r3, r2
 8003398:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d040      	beq.n	8003428 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d107      	bne.n	80033be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ae:	4b47      	ldr	r3, [pc, #284]	@ (80034cc <HAL_RCC_ClockConfig+0x1c8>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d115      	bne.n	80033e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e07f      	b.n	80034be <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d107      	bne.n	80033d6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033c6:	4b41      	ldr	r3, [pc, #260]	@ (80034cc <HAL_RCC_ClockConfig+0x1c8>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d109      	bne.n	80033e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e073      	b.n	80034be <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d6:	4b3d      	ldr	r3, [pc, #244]	@ (80034cc <HAL_RCC_ClockConfig+0x1c8>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e06b      	b.n	80034be <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033e6:	4b39      	ldr	r3, [pc, #228]	@ (80034cc <HAL_RCC_ClockConfig+0x1c8>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f023 0203 	bic.w	r2, r3, #3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	4936      	ldr	r1, [pc, #216]	@ (80034cc <HAL_RCC_ClockConfig+0x1c8>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033f8:	f7fe fa96 	bl	8001928 <HAL_GetTick>
 80033fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033fe:	e00a      	b.n	8003416 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003400:	f7fe fa92 	bl	8001928 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800340e:	4293      	cmp	r3, r2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e053      	b.n	80034be <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003416:	4b2d      	ldr	r3, [pc, #180]	@ (80034cc <HAL_RCC_ClockConfig+0x1c8>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f003 020c 	and.w	r2, r3, #12
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	429a      	cmp	r2, r3
 8003426:	d1eb      	bne.n	8003400 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003428:	4b27      	ldr	r3, [pc, #156]	@ (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 030f 	and.w	r3, r3, #15
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	429a      	cmp	r2, r3
 8003434:	d210      	bcs.n	8003458 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003436:	4b24      	ldr	r3, [pc, #144]	@ (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f023 020f 	bic.w	r2, r3, #15
 800343e:	4922      	ldr	r1, [pc, #136]	@ (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	4313      	orrs	r3, r2
 8003444:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003446:	4b20      	ldr	r3, [pc, #128]	@ (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	429a      	cmp	r2, r3
 8003452:	d001      	beq.n	8003458 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e032      	b.n	80034be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b00      	cmp	r3, #0
 8003462:	d008      	beq.n	8003476 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003464:	4b19      	ldr	r3, [pc, #100]	@ (80034cc <HAL_RCC_ClockConfig+0x1c8>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	4916      	ldr	r1, [pc, #88]	@ (80034cc <HAL_RCC_ClockConfig+0x1c8>)
 8003472:	4313      	orrs	r3, r2
 8003474:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0308 	and.w	r3, r3, #8
 800347e:	2b00      	cmp	r3, #0
 8003480:	d009      	beq.n	8003496 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003482:	4b12      	ldr	r3, [pc, #72]	@ (80034cc <HAL_RCC_ClockConfig+0x1c8>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	490e      	ldr	r1, [pc, #56]	@ (80034cc <HAL_RCC_ClockConfig+0x1c8>)
 8003492:	4313      	orrs	r3, r2
 8003494:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003496:	f000 f821 	bl	80034dc <HAL_RCC_GetSysClockFreq>
 800349a:	4602      	mov	r2, r0
 800349c:	4b0b      	ldr	r3, [pc, #44]	@ (80034cc <HAL_RCC_ClockConfig+0x1c8>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	091b      	lsrs	r3, r3, #4
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	490a      	ldr	r1, [pc, #40]	@ (80034d0 <HAL_RCC_ClockConfig+0x1cc>)
 80034a8:	5ccb      	ldrb	r3, [r1, r3]
 80034aa:	fa22 f303 	lsr.w	r3, r2, r3
 80034ae:	4a09      	ldr	r2, [pc, #36]	@ (80034d4 <HAL_RCC_ClockConfig+0x1d0>)
 80034b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034b2:	4b09      	ldr	r3, [pc, #36]	@ (80034d8 <HAL_RCC_ClockConfig+0x1d4>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fe f9f2 	bl	80018a0 <HAL_InitTick>

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	40023c00 	.word	0x40023c00
 80034cc:	40023800 	.word	0x40023800
 80034d0:	080083a4 	.word	0x080083a4
 80034d4:	20000000 	.word	0x20000000
 80034d8:	20000004 	.word	0x20000004

080034dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034e0:	b090      	sub	sp, #64	@ 0x40
 80034e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80034e4:	2300      	movs	r3, #0
 80034e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80034e8:	2300      	movs	r3, #0
 80034ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034ec:	2300      	movs	r3, #0
 80034ee:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80034f0:	2300      	movs	r3, #0
 80034f2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034f4:	4b59      	ldr	r3, [pc, #356]	@ (800365c <HAL_RCC_GetSysClockFreq+0x180>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f003 030c 	and.w	r3, r3, #12
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d00d      	beq.n	800351c <HAL_RCC_GetSysClockFreq+0x40>
 8003500:	2b08      	cmp	r3, #8
 8003502:	f200 80a1 	bhi.w	8003648 <HAL_RCC_GetSysClockFreq+0x16c>
 8003506:	2b00      	cmp	r3, #0
 8003508:	d002      	beq.n	8003510 <HAL_RCC_GetSysClockFreq+0x34>
 800350a:	2b04      	cmp	r3, #4
 800350c:	d003      	beq.n	8003516 <HAL_RCC_GetSysClockFreq+0x3a>
 800350e:	e09b      	b.n	8003648 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003510:	4b53      	ldr	r3, [pc, #332]	@ (8003660 <HAL_RCC_GetSysClockFreq+0x184>)
 8003512:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003514:	e09b      	b.n	800364e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003516:	4b53      	ldr	r3, [pc, #332]	@ (8003664 <HAL_RCC_GetSysClockFreq+0x188>)
 8003518:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800351a:	e098      	b.n	800364e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800351c:	4b4f      	ldr	r3, [pc, #316]	@ (800365c <HAL_RCC_GetSysClockFreq+0x180>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003524:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003526:	4b4d      	ldr	r3, [pc, #308]	@ (800365c <HAL_RCC_GetSysClockFreq+0x180>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d028      	beq.n	8003584 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003532:	4b4a      	ldr	r3, [pc, #296]	@ (800365c <HAL_RCC_GetSysClockFreq+0x180>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	099b      	lsrs	r3, r3, #6
 8003538:	2200      	movs	r2, #0
 800353a:	623b      	str	r3, [r7, #32]
 800353c:	627a      	str	r2, [r7, #36]	@ 0x24
 800353e:	6a3b      	ldr	r3, [r7, #32]
 8003540:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003544:	2100      	movs	r1, #0
 8003546:	4b47      	ldr	r3, [pc, #284]	@ (8003664 <HAL_RCC_GetSysClockFreq+0x188>)
 8003548:	fb03 f201 	mul.w	r2, r3, r1
 800354c:	2300      	movs	r3, #0
 800354e:	fb00 f303 	mul.w	r3, r0, r3
 8003552:	4413      	add	r3, r2
 8003554:	4a43      	ldr	r2, [pc, #268]	@ (8003664 <HAL_RCC_GetSysClockFreq+0x188>)
 8003556:	fba0 1202 	umull	r1, r2, r0, r2
 800355a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800355c:	460a      	mov	r2, r1
 800355e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003560:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003562:	4413      	add	r3, r2
 8003564:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003568:	2200      	movs	r2, #0
 800356a:	61bb      	str	r3, [r7, #24]
 800356c:	61fa      	str	r2, [r7, #28]
 800356e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003572:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003576:	f7fc fe9b 	bl	80002b0 <__aeabi_uldivmod>
 800357a:	4602      	mov	r2, r0
 800357c:	460b      	mov	r3, r1
 800357e:	4613      	mov	r3, r2
 8003580:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003582:	e053      	b.n	800362c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003584:	4b35      	ldr	r3, [pc, #212]	@ (800365c <HAL_RCC_GetSysClockFreq+0x180>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	099b      	lsrs	r3, r3, #6
 800358a:	2200      	movs	r2, #0
 800358c:	613b      	str	r3, [r7, #16]
 800358e:	617a      	str	r2, [r7, #20]
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003596:	f04f 0b00 	mov.w	fp, #0
 800359a:	4652      	mov	r2, sl
 800359c:	465b      	mov	r3, fp
 800359e:	f04f 0000 	mov.w	r0, #0
 80035a2:	f04f 0100 	mov.w	r1, #0
 80035a6:	0159      	lsls	r1, r3, #5
 80035a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035ac:	0150      	lsls	r0, r2, #5
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	ebb2 080a 	subs.w	r8, r2, sl
 80035b6:	eb63 090b 	sbc.w	r9, r3, fp
 80035ba:	f04f 0200 	mov.w	r2, #0
 80035be:	f04f 0300 	mov.w	r3, #0
 80035c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80035c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80035ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80035ce:	ebb2 0408 	subs.w	r4, r2, r8
 80035d2:	eb63 0509 	sbc.w	r5, r3, r9
 80035d6:	f04f 0200 	mov.w	r2, #0
 80035da:	f04f 0300 	mov.w	r3, #0
 80035de:	00eb      	lsls	r3, r5, #3
 80035e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035e4:	00e2      	lsls	r2, r4, #3
 80035e6:	4614      	mov	r4, r2
 80035e8:	461d      	mov	r5, r3
 80035ea:	eb14 030a 	adds.w	r3, r4, sl
 80035ee:	603b      	str	r3, [r7, #0]
 80035f0:	eb45 030b 	adc.w	r3, r5, fp
 80035f4:	607b      	str	r3, [r7, #4]
 80035f6:	f04f 0200 	mov.w	r2, #0
 80035fa:	f04f 0300 	mov.w	r3, #0
 80035fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003602:	4629      	mov	r1, r5
 8003604:	028b      	lsls	r3, r1, #10
 8003606:	4621      	mov	r1, r4
 8003608:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800360c:	4621      	mov	r1, r4
 800360e:	028a      	lsls	r2, r1, #10
 8003610:	4610      	mov	r0, r2
 8003612:	4619      	mov	r1, r3
 8003614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003616:	2200      	movs	r2, #0
 8003618:	60bb      	str	r3, [r7, #8]
 800361a:	60fa      	str	r2, [r7, #12]
 800361c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003620:	f7fc fe46 	bl	80002b0 <__aeabi_uldivmod>
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	4613      	mov	r3, r2
 800362a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800362c:	4b0b      	ldr	r3, [pc, #44]	@ (800365c <HAL_RCC_GetSysClockFreq+0x180>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	0c1b      	lsrs	r3, r3, #16
 8003632:	f003 0303 	and.w	r3, r3, #3
 8003636:	3301      	adds	r3, #1
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800363c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800363e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003640:	fbb2 f3f3 	udiv	r3, r2, r3
 8003644:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003646:	e002      	b.n	800364e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003648:	4b05      	ldr	r3, [pc, #20]	@ (8003660 <HAL_RCC_GetSysClockFreq+0x184>)
 800364a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800364c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800364e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003650:	4618      	mov	r0, r3
 8003652:	3740      	adds	r7, #64	@ 0x40
 8003654:	46bd      	mov	sp, r7
 8003656:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800365a:	bf00      	nop
 800365c:	40023800 	.word	0x40023800
 8003660:	00f42400 	.word	0x00f42400
 8003664:	017d7840 	.word	0x017d7840

08003668 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b088      	sub	sp, #32
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003670:	2300      	movs	r3, #0
 8003672:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003674:	2300      	movs	r3, #0
 8003676:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003678:	2300      	movs	r3, #0
 800367a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800367c:	2300      	movs	r3, #0
 800367e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003680:	2300      	movs	r3, #0
 8003682:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	2b00      	cmp	r3, #0
 800368e:	d012      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003690:	4b69      	ldr	r3, [pc, #420]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	4a68      	ldr	r2, [pc, #416]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003696:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800369a:	6093      	str	r3, [r2, #8]
 800369c:	4b66      	ldr	r3, [pc, #408]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036a4:	4964      	ldr	r1, [pc, #400]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80036b2:	2301      	movs	r3, #1
 80036b4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d017      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036c2:	4b5d      	ldr	r3, [pc, #372]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036c8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036d0:	4959      	ldr	r1, [pc, #356]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036e0:	d101      	bne.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80036e2:	2301      	movs	r3, #1
 80036e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80036ee:	2301      	movs	r3, #1
 80036f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d017      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80036fe:	4b4e      	ldr	r3, [pc, #312]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003700:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003704:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370c:	494a      	ldr	r1, [pc, #296]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800370e:	4313      	orrs	r3, r2
 8003710:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003718:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800371c:	d101      	bne.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800371e:	2301      	movs	r3, #1
 8003720:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800372a:	2301      	movs	r3, #1
 800372c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800373a:	2301      	movs	r3, #1
 800373c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0320 	and.w	r3, r3, #32
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 808b 	beq.w	8003862 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800374c:	4b3a      	ldr	r3, [pc, #232]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800374e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003750:	4a39      	ldr	r2, [pc, #228]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003752:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003756:	6413      	str	r3, [r2, #64]	@ 0x40
 8003758:	4b37      	ldr	r3, [pc, #220]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800375a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003760:	60bb      	str	r3, [r7, #8]
 8003762:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003764:	4b35      	ldr	r3, [pc, #212]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a34      	ldr	r2, [pc, #208]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800376a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800376e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003770:	f7fe f8da 	bl	8001928 <HAL_GetTick>
 8003774:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003776:	e008      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003778:	f7fe f8d6 	bl	8001928 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b64      	cmp	r3, #100	@ 0x64
 8003784:	d901      	bls.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e357      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800378a:	4b2c      	ldr	r3, [pc, #176]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003792:	2b00      	cmp	r3, #0
 8003794:	d0f0      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003796:	4b28      	ldr	r3, [pc, #160]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800379a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800379e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d035      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d02e      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037b4:	4b20      	ldr	r3, [pc, #128]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037bc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037be:	4b1e      	ldr	r3, [pc, #120]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c2:	4a1d      	ldr	r2, [pc, #116]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037c8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ce:	4a1a      	ldr	r2, [pc, #104]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037d4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80037d6:	4a18      	ldr	r2, [pc, #96]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80037dc:	4b16      	ldr	r3, [pc, #88]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d114      	bne.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e8:	f7fe f89e 	bl	8001928 <HAL_GetTick>
 80037ec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ee:	e00a      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037f0:	f7fe f89a 	bl	8001928 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037fe:	4293      	cmp	r3, r2
 8003800:	d901      	bls.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e319      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003806:	4b0c      	ldr	r3, [pc, #48]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d0ee      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003816:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800381a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800381e:	d111      	bne.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003820:	4b05      	ldr	r3, [pc, #20]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800382c:	4b04      	ldr	r3, [pc, #16]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800382e:	400b      	ands	r3, r1
 8003830:	4901      	ldr	r1, [pc, #4]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003832:	4313      	orrs	r3, r2
 8003834:	608b      	str	r3, [r1, #8]
 8003836:	e00b      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003838:	40023800 	.word	0x40023800
 800383c:	40007000 	.word	0x40007000
 8003840:	0ffffcff 	.word	0x0ffffcff
 8003844:	4baa      	ldr	r3, [pc, #680]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	4aa9      	ldr	r2, [pc, #676]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800384a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800384e:	6093      	str	r3, [r2, #8]
 8003850:	4ba7      	ldr	r3, [pc, #668]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003852:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800385c:	49a4      	ldr	r1, [pc, #656]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800385e:	4313      	orrs	r3, r2
 8003860:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0310 	and.w	r3, r3, #16
 800386a:	2b00      	cmp	r3, #0
 800386c:	d010      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800386e:	4ba0      	ldr	r3, [pc, #640]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003870:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003874:	4a9e      	ldr	r2, [pc, #632]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003876:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800387a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800387e:	4b9c      	ldr	r3, [pc, #624]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003880:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003888:	4999      	ldr	r1, [pc, #612]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800388a:	4313      	orrs	r3, r2
 800388c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00a      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800389c:	4b94      	ldr	r3, [pc, #592]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800389e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038a2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038aa:	4991      	ldr	r1, [pc, #580]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00a      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038be:	4b8c      	ldr	r3, [pc, #560]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038c4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038cc:	4988      	ldr	r1, [pc, #544]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00a      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038e0:	4b83      	ldr	r3, [pc, #524]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038ee:	4980      	ldr	r1, [pc, #512]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00a      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003902:	4b7b      	ldr	r3, [pc, #492]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003908:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003910:	4977      	ldr	r1, [pc, #476]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003912:	4313      	orrs	r3, r2
 8003914:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00a      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003924:	4b72      	ldr	r3, [pc, #456]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800392a:	f023 0203 	bic.w	r2, r3, #3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003932:	496f      	ldr	r1, [pc, #444]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003934:	4313      	orrs	r3, r2
 8003936:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00a      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003946:	4b6a      	ldr	r3, [pc, #424]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003948:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800394c:	f023 020c 	bic.w	r2, r3, #12
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003954:	4966      	ldr	r1, [pc, #408]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003956:	4313      	orrs	r3, r2
 8003958:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00a      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003968:	4b61      	ldr	r3, [pc, #388]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800396a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800396e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003976:	495e      	ldr	r1, [pc, #376]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003978:	4313      	orrs	r3, r2
 800397a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00a      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800398a:	4b59      	ldr	r3, [pc, #356]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800398c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003990:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003998:	4955      	ldr	r1, [pc, #340]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800399a:	4313      	orrs	r3, r2
 800399c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00a      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039ac:	4b50      	ldr	r3, [pc, #320]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039b2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ba:	494d      	ldr	r1, [pc, #308]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00a      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80039ce:	4b48      	ldr	r3, [pc, #288]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039d4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039dc:	4944      	ldr	r1, [pc, #272]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00a      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80039f0:	4b3f      	ldr	r3, [pc, #252]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039f6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039fe:	493c      	ldr	r1, [pc, #240]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00a      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003a12:	4b37      	ldr	r3, [pc, #220]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a18:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a20:	4933      	ldr	r1, [pc, #204]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00a      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a34:	4b2e      	ldr	r3, [pc, #184]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a3a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a42:	492b      	ldr	r1, [pc, #172]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d011      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003a56:	4b26      	ldr	r3, [pc, #152]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a5c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a64:	4922      	ldr	r1, [pc, #136]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a74:	d101      	bne.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003a76:	2301      	movs	r3, #1
 8003a78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003a86:	2301      	movs	r3, #1
 8003a88:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00a      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a96:	4b16      	ldr	r3, [pc, #88]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a9c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aa4:	4912      	ldr	r1, [pc, #72]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00b      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ab8:	4b0d      	ldr	r3, [pc, #52]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003abe:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ac8:	4909      	ldr	r1, [pc, #36]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d006      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f000 80d9 	beq.w	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ae4:	4b02      	ldr	r3, [pc, #8]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a01      	ldr	r2, [pc, #4]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003aea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003aee:	e001      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003af0:	40023800 	.word	0x40023800
 8003af4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003af6:	f7fd ff17 	bl	8001928 <HAL_GetTick>
 8003afa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003afc:	e008      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003afe:	f7fd ff13 	bl	8001928 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b64      	cmp	r3, #100	@ 0x64
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e194      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b10:	4b6c      	ldr	r3, [pc, #432]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1f0      	bne.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d021      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d11d      	bne.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003b30:	4b64      	ldr	r3, [pc, #400]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b36:	0c1b      	lsrs	r3, r3, #16
 8003b38:	f003 0303 	and.w	r3, r3, #3
 8003b3c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b3e:	4b61      	ldr	r3, [pc, #388]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b44:	0e1b      	lsrs	r3, r3, #24
 8003b46:	f003 030f 	and.w	r3, r3, #15
 8003b4a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	019a      	lsls	r2, r3, #6
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	041b      	lsls	r3, r3, #16
 8003b56:	431a      	orrs	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	061b      	lsls	r3, r3, #24
 8003b5c:	431a      	orrs	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	071b      	lsls	r3, r3, #28
 8003b64:	4957      	ldr	r1, [pc, #348]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d004      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b80:	d00a      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d02e      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b96:	d129      	bne.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003b98:	4b4a      	ldr	r3, [pc, #296]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b9e:	0c1b      	lsrs	r3, r3, #16
 8003ba0:	f003 0303 	and.w	r3, r3, #3
 8003ba4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ba6:	4b47      	ldr	r3, [pc, #284]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bac:	0f1b      	lsrs	r3, r3, #28
 8003bae:	f003 0307 	and.w	r3, r3, #7
 8003bb2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	019a      	lsls	r2, r3, #6
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	041b      	lsls	r3, r3, #16
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	061b      	lsls	r3, r3, #24
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	071b      	lsls	r3, r3, #28
 8003bcc:	493d      	ldr	r1, [pc, #244]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003bd4:	4b3b      	ldr	r3, [pc, #236]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bda:	f023 021f 	bic.w	r2, r3, #31
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be2:	3b01      	subs	r3, #1
 8003be4:	4937      	ldr	r1, [pc, #220]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d01d      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003bf8:	4b32      	ldr	r3, [pc, #200]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bfe:	0e1b      	lsrs	r3, r3, #24
 8003c00:	f003 030f 	and.w	r3, r3, #15
 8003c04:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c06:	4b2f      	ldr	r3, [pc, #188]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c0c:	0f1b      	lsrs	r3, r3, #28
 8003c0e:	f003 0307 	and.w	r3, r3, #7
 8003c12:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	019a      	lsls	r2, r3, #6
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	041b      	lsls	r3, r3, #16
 8003c20:	431a      	orrs	r2, r3
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	061b      	lsls	r3, r3, #24
 8003c26:	431a      	orrs	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	071b      	lsls	r3, r3, #28
 8003c2c:	4925      	ldr	r1, [pc, #148]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d011      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	019a      	lsls	r2, r3, #6
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	041b      	lsls	r3, r3, #16
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	061b      	lsls	r3, r3, #24
 8003c54:	431a      	orrs	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	071b      	lsls	r3, r3, #28
 8003c5c:	4919      	ldr	r1, [pc, #100]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c64:	4b17      	ldr	r3, [pc, #92]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a16      	ldr	r2, [pc, #88]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c6a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003c6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c70:	f7fd fe5a 	bl	8001928 <HAL_GetTick>
 8003c74:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c76:	e008      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c78:	f7fd fe56 	bl	8001928 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b64      	cmp	r3, #100	@ 0x64
 8003c84:	d901      	bls.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e0d7      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d0f0      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	f040 80cd 	bne.w	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003c9e:	4b09      	ldr	r3, [pc, #36]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a08      	ldr	r2, [pc, #32]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ca4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ca8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003caa:	f7fd fe3d 	bl	8001928 <HAL_GetTick>
 8003cae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003cb0:	e00a      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003cb2:	f7fd fe39 	bl	8001928 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b64      	cmp	r3, #100	@ 0x64
 8003cbe:	d903      	bls.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e0ba      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003cc4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003cc8:	4b5e      	ldr	r3, [pc, #376]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003cd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cd4:	d0ed      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d009      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d02e      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d12a      	bne.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003cfe:	4b51      	ldr	r3, [pc, #324]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d04:	0c1b      	lsrs	r3, r3, #16
 8003d06:	f003 0303 	and.w	r3, r3, #3
 8003d0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d0c:	4b4d      	ldr	r3, [pc, #308]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d12:	0f1b      	lsrs	r3, r3, #28
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	019a      	lsls	r2, r3, #6
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	041b      	lsls	r3, r3, #16
 8003d24:	431a      	orrs	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	061b      	lsls	r3, r3, #24
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	071b      	lsls	r3, r3, #28
 8003d32:	4944      	ldr	r1, [pc, #272]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003d3a:	4b42      	ldr	r3, [pc, #264]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d40:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	021b      	lsls	r3, r3, #8
 8003d4c:	493d      	ldr	r1, [pc, #244]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d022      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d68:	d11d      	bne.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d6a:	4b36      	ldr	r3, [pc, #216]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d70:	0e1b      	lsrs	r3, r3, #24
 8003d72:	f003 030f 	and.w	r3, r3, #15
 8003d76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d78:	4b32      	ldr	r3, [pc, #200]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d7e:	0f1b      	lsrs	r3, r3, #28
 8003d80:	f003 0307 	and.w	r3, r3, #7
 8003d84:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	019a      	lsls	r2, r3, #6
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	041b      	lsls	r3, r3, #16
 8003d92:	431a      	orrs	r2, r3
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	061b      	lsls	r3, r3, #24
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	071b      	lsls	r3, r3, #28
 8003d9e:	4929      	ldr	r1, [pc, #164]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0308 	and.w	r3, r3, #8
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d028      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003db2:	4b24      	ldr	r3, [pc, #144]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003db8:	0e1b      	lsrs	r3, r3, #24
 8003dba:	f003 030f 	and.w	r3, r3, #15
 8003dbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003dc0:	4b20      	ldr	r3, [pc, #128]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dc6:	0c1b      	lsrs	r3, r3, #16
 8003dc8:	f003 0303 	and.w	r3, r3, #3
 8003dcc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	019a      	lsls	r2, r3, #6
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	041b      	lsls	r3, r3, #16
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	061b      	lsls	r3, r3, #24
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	071b      	lsls	r3, r3, #28
 8003de6:	4917      	ldr	r1, [pc, #92]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003dee:	4b15      	ldr	r3, [pc, #84]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003df0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003df4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dfc:	4911      	ldr	r1, [pc, #68]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003e04:	4b0f      	ldr	r3, [pc, #60]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a0e      	ldr	r2, [pc, #56]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e10:	f7fd fd8a 	bl	8001928 <HAL_GetTick>
 8003e14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e16:	e008      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e18:	f7fd fd86 	bl	8001928 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b64      	cmp	r3, #100	@ 0x64
 8003e24:	d901      	bls.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e007      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e2a:	4b06      	ldr	r3, [pc, #24]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e36:	d1ef      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3720      	adds	r7, #32
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	40023800 	.word	0x40023800

08003e48 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d101      	bne.n	8003e5a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e022      	b.n	8003ea0 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d105      	bne.n	8003e72 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f7fd fb3f 	bl	80014f0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2203      	movs	r2, #3
 8003e76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f814 	bl	8003ea8 <HAL_SD_InitCard>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e00a      	b.n	8003ea0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003ea8:	b5b0      	push	{r4, r5, r7, lr}
 8003eaa:	b08e      	sub	sp, #56	@ 0x38
 8003eac:	af04      	add	r7, sp, #16
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8003ec4:	2376      	movs	r3, #118	@ 0x76
 8003ec6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681d      	ldr	r5, [r3, #0]
 8003ecc:	466c      	mov	r4, sp
 8003ece:	f107 0314 	add.w	r3, r7, #20
 8003ed2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003ed6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003eda:	f107 0308 	add.w	r3, r7, #8
 8003ede:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ee0:	4628      	mov	r0, r5
 8003ee2:	f001 f8d9 	bl	8005098 <SDMMC_Init>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8003eec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e059      	b.n	8003fac <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f06:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f001 f90d 	bl	800512c <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f20:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8003f22:	2002      	movs	r0, #2
 8003f24:	f7fd fd0c 	bl	8001940 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 ff59 	bl	8004de0 <SD_PowerON>
 8003f2e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00b      	beq.n	8003f4e <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f42:	6a3b      	ldr	r3, [r7, #32]
 8003f44:	431a      	orrs	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e02e      	b.n	8003fac <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 fe78 	bl	8004c44 <SD_InitCard>
 8003f54:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f56:	6a3b      	ldr	r3, [r7, #32]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00b      	beq.n	8003f74 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e01b      	b.n	8003fac <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f001 f967 	bl	8005250 <SDMMC_CmdBlockLength>
 8003f82:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f84:	6a3b      	ldr	r3, [r7, #32]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00f      	beq.n	8003faa <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a09      	ldr	r2, [pc, #36]	@ (8003fb4 <HAL_SD_InitCard+0x10c>)
 8003f90:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f96:	6a3b      	ldr	r3, [r7, #32]
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e000      	b.n	8003fac <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3728      	adds	r7, #40	@ 0x28
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bdb0      	pop	{r4, r5, r7, pc}
 8003fb4:	004005ff 	.word	0x004005ff

08003fb8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b08c      	sub	sp, #48	@ 0x30
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
 8003fc4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d107      	bne.n	8003fe0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fd4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e0c3      	b.n	8004168 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	f040 80bc 	bne.w	8004166 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003ff4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	441a      	add	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d907      	bls.n	8004012 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004006:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e0aa      	b.n	8004168 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2203      	movs	r2, #3
 8004016:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2200      	movs	r2, #0
 8004020:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8004030:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004036:	4a4e      	ldr	r2, [pc, #312]	@ (8004170 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8004038:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403e:	4a4d      	ldr	r2, [pc, #308]	@ (8004174 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8004040:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004046:	2200      	movs	r2, #0
 8004048:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404e:	2200      	movs	r2, #0
 8004050:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	430a      	orrs	r2, r1
 800406c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	3380      	adds	r3, #128	@ 0x80
 8004078:	4619      	mov	r1, r3
 800407a:	68ba      	ldr	r2, [r7, #8]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	025b      	lsls	r3, r3, #9
 8004080:	089b      	lsrs	r3, r3, #2
 8004082:	f7fd fe41 	bl	8001d08 <HAL_DMA_Start_IT>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d017      	beq.n	80040bc <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800409a:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a35      	ldr	r2, [pc, #212]	@ (8004178 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80040a2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e055      	b.n	8004168 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f042 0208 	orr.w	r2, r2, #8
 80040ca:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d002      	beq.n	80040da <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 80040d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040d6:	025b      	lsls	r3, r3, #9
 80040d8:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80040da:	f04f 33ff 	mov.w	r3, #4294967295
 80040de:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	025b      	lsls	r3, r3, #9
 80040e4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80040e6:	2390      	movs	r3, #144	@ 0x90
 80040e8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80040ea:	2302      	movs	r3, #2
 80040ec:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80040ee:	2300      	movs	r3, #0
 80040f0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80040f2:	2301      	movs	r3, #1
 80040f4:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f107 0210 	add.w	r2, r7, #16
 80040fe:	4611      	mov	r1, r2
 8004100:	4618      	mov	r0, r3
 8004102:	f001 f879 	bl	80051f8 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d90a      	bls.n	8004122 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2282      	movs	r2, #130	@ 0x82
 8004110:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004118:	4618      	mov	r0, r3
 800411a:	f001 f8dd 	bl	80052d8 <SDMMC_CmdReadMultiBlock>
 800411e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8004120:	e009      	b.n	8004136 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2281      	movs	r2, #129	@ 0x81
 8004126:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800412e:	4618      	mov	r0, r3
 8004130:	f001 f8b0 	bl	8005294 <SDMMC_CmdReadSingleBlock>
 8004134:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8004136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004138:	2b00      	cmp	r3, #0
 800413a:	d012      	beq.n	8004162 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a0d      	ldr	r2, [pc, #52]	@ (8004178 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8004142:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800414a:	431a      	orrs	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e002      	b.n	8004168 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8004162:	2300      	movs	r3, #0
 8004164:	e000      	b.n	8004168 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8004166:	2302      	movs	r3, #2
  }
}
 8004168:	4618      	mov	r0, r3
 800416a:	3730      	adds	r7, #48	@ 0x30
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	08004a53 	.word	0x08004a53
 8004174:	08004ac5 	.word	0x08004ac5
 8004178:	004005ff 	.word	0x004005ff

0800417c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b08c      	sub	sp, #48	@ 0x30
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
 8004188:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d107      	bne.n	80041a4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004198:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e0c6      	b.n	8004332 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	f040 80bf 	bne.w	8004330 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80041b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	441a      	add	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d907      	bls.n	80041d6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ca:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e0ad      	b.n	8004332 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2203      	movs	r2, #3
 80041da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2200      	movs	r2, #0
 80041e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f042 021a 	orr.w	r2, r2, #26
 80041f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041fa:	4a50      	ldr	r2, [pc, #320]	@ (800433c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80041fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004202:	4a4f      	ldr	r2, [pc, #316]	@ (8004340 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004204:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800420a:	2200      	movs	r2, #0
 800420c:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004212:	2b01      	cmp	r3, #1
 8004214:	d002      	beq.n	800421c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8004216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004218:	025b      	lsls	r3, r3, #9
 800421a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d90a      	bls.n	8004238 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	22a0      	movs	r2, #160	@ 0xa0
 8004226:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800422e:	4618      	mov	r0, r3
 8004230:	f001 f896 	bl	8005360 <SDMMC_CmdWriteMultiBlock>
 8004234:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8004236:	e009      	b.n	800424c <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2290      	movs	r2, #144	@ 0x90
 800423c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004244:	4618      	mov	r0, r3
 8004246:	f001 f869 	bl	800531c <SDMMC_CmdWriteSingleBlock>
 800424a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800424c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800424e:	2b00      	cmp	r3, #0
 8004250:	d012      	beq.n	8004278 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a3b      	ldr	r2, [pc, #236]	@ (8004344 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8004258:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800425e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004260:	431a      	orrs	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e05c      	b.n	8004332 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f042 0208 	orr.w	r2, r2, #8
 8004286:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800428c:	2240      	movs	r2, #64	@ 0x40
 800428e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042a0:	689a      	ldr	r2, [r3, #8]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	430a      	orrs	r2, r1
 80042aa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80042b0:	68b9      	ldr	r1, [r7, #8]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	3380      	adds	r3, #128	@ 0x80
 80042b8:	461a      	mov	r2, r3
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	025b      	lsls	r3, r3, #9
 80042be:	089b      	lsrs	r3, r3, #2
 80042c0:	f7fd fd22 	bl	8001d08 <HAL_DMA_Start_IT>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d01a      	beq.n	8004300 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f022 021a 	bic.w	r2, r2, #26
 80042d8:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a19      	ldr	r2, [pc, #100]	@ (8004344 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80042e0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e018      	b.n	8004332 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004300:	f04f 33ff 	mov.w	r3, #4294967295
 8004304:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	025b      	lsls	r3, r3, #9
 800430a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800430c:	2390      	movs	r3, #144	@ 0x90
 800430e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8004310:	2300      	movs	r3, #0
 8004312:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004314:	2300      	movs	r3, #0
 8004316:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8004318:	2301      	movs	r3, #1
 800431a:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f107 0210 	add.w	r2, r7, #16
 8004324:	4611      	mov	r1, r2
 8004326:	4618      	mov	r0, r3
 8004328:	f000 ff66 	bl	80051f8 <SDMMC_ConfigData>

      return HAL_OK;
 800432c:	2300      	movs	r3, #0
 800432e:	e000      	b.n	8004332 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8004330:	2302      	movs	r3, #2
  }
}
 8004332:	4618      	mov	r0, r3
 8004334:	3730      	adds	r7, #48	@ 0x30
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	08004a29 	.word	0x08004a29
 8004340:	08004ac5 	.word	0x08004ac5
 8004344:	004005ff 	.word	0x004005ff

08004348 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004354:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800435c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d008      	beq.n	8004376 <HAL_SD_IRQHandler+0x2e>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f003 0308 	and.w	r3, r3, #8
 800436a:	2b00      	cmp	r3, #0
 800436c:	d003      	beq.n	8004376 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 fdec 	bl	8004f4c <SD_Read_IT>
 8004374:	e15a      	b.n	800462c <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800437c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 808d 	beq.w	80044a0 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800438e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	4b9a      	ldr	r3, [pc, #616]	@ (8004604 <HAL_SD_IRQHandler+0x2bc>)
 800439c:	400b      	ands	r3, r1
 800439e:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 0201 	bic.w	r2, r2, #1
 80043ae:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f003 0308 	and.w	r3, r3, #8
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d039      	beq.n	800442e <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d104      	bne.n	80043ce <HAL_SD_IRQHandler+0x86>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f003 0320 	and.w	r3, r3, #32
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d011      	beq.n	80043f2 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 ffe6 	bl	80053a4 <SDMMC_CmdStopTransfer>
 80043d8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d008      	beq.n	80043f2 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	431a      	orrs	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 f921 	bl	8004634 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f240 523a 	movw	r2, #1338	@ 0x53a
 80043fa:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f003 0301 	and.w	r3, r3, #1
 8004410:	2b00      	cmp	r3, #0
 8004412:	d104      	bne.n	800441e <HAL_SD_IRQHandler+0xd6>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d003      	beq.n	8004426 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f001 fbfc 	bl	8005c1c <HAL_SD_RxCpltCallback>
 8004424:	e102      	b.n	800462c <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f001 fbee 	bl	8005c08 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800442c:	e0fe      	b.n	800462c <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 80f9 	beq.w	800462c <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f003 0320 	and.w	r3, r3, #32
 8004440:	2b00      	cmp	r3, #0
 8004442:	d011      	beq.n	8004468 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4618      	mov	r0, r3
 800444a:	f000 ffab 	bl	80053a4 <SDMMC_CmdStopTransfer>
 800444e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d008      	beq.n	8004468 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	431a      	orrs	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f8e6 	bl	8004634 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b00      	cmp	r3, #0
 8004470:	f040 80dc 	bne.w	800462c <HAL_SD_IRQHandler+0x2e4>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	f040 80d6 	bne.w	800462c <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0208 	bic.w	r2, r2, #8
 800448e:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f001 fbb5 	bl	8005c08 <HAL_SD_TxCpltCallback>
}
 800449e:	e0c5      	b.n	800462c <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d008      	beq.n	80044c0 <HAL_SD_IRQHandler+0x178>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f003 0308 	and.w	r3, r3, #8
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d003      	beq.n	80044c0 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 fd98 	bl	8004fee <SD_Write_IT>
 80044be:	e0b5      	b.n	800462c <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044c6:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f000 80ae 	beq.w	800462c <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d005      	beq.n	80044ea <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044e2:	f043 0202 	orr.w	r2, r3, #2
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044f0:	f003 0308 	and.w	r3, r3, #8
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d005      	beq.n	8004504 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044fc:	f043 0208 	orr.w	r2, r3, #8
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800450a:	f003 0320 	and.w	r3, r3, #32
 800450e:	2b00      	cmp	r3, #0
 8004510:	d005      	beq.n	800451e <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004516:	f043 0220 	orr.w	r2, r3, #32
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004524:	f003 0310 	and.w	r3, r3, #16
 8004528:	2b00      	cmp	r3, #0
 800452a:	d005      	beq.n	8004538 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004530:	f043 0210 	orr.w	r2, r3, #16
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004540:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8004550:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4618      	mov	r0, r3
 8004558:	f000 ff24 	bl	80053a4 <SDMMC_CmdStopTransfer>
 800455c:	4602      	mov	r2, r0
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004562:	431a      	orrs	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00a      	beq.n	8004588 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 f857 	bl	8004634 <HAL_SD_ErrorCallback>
}
 8004586:	e051      	b.n	800462c <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800458e:	2b00      	cmp	r3, #0
 8004590:	d04c      	beq.n	800462c <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f003 0310 	and.w	r3, r3, #16
 8004598:	2b00      	cmp	r3, #0
 800459a:	d104      	bne.n	80045a6 <HAL_SD_IRQHandler+0x25e>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f003 0320 	and.w	r3, r3, #32
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d011      	beq.n	80045ca <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045aa:	4a17      	ldr	r2, [pc, #92]	@ (8004608 <HAL_SD_IRQHandler+0x2c0>)
 80045ac:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7fd fc08 	bl	8001dc8 <HAL_DMA_Abort_IT>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d036      	beq.n	800462c <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 fad0 	bl	8004b68 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80045c8:	e030      	b.n	800462c <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d104      	bne.n	80045de <HAL_SD_IRQHandler+0x296>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d018      	beq.n	8004610 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e2:	4a0a      	ldr	r2, [pc, #40]	@ (800460c <HAL_SD_IRQHandler+0x2c4>)
 80045e4:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7fd fbec 	bl	8001dc8 <HAL_DMA_Abort_IT>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d01a      	beq.n	800462c <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fa:	4618      	mov	r0, r3
 80045fc:	f000 faeb 	bl	8004bd6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004600:	e014      	b.n	800462c <HAL_SD_IRQHandler+0x2e4>
 8004602:	bf00      	nop
 8004604:	ffff3ec5 	.word	0xffff3ec5
 8004608:	08004b69 	.word	0x08004b69
 800460c:	08004bd7 	.word	0x08004bd7
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2201      	movs	r2, #1
 800461a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f001 fae5 	bl	8005bf4 <HAL_SD_AbortCallback>
}
 800462a:	e7ff      	b.n	800462c <HAL_SD_IRQHandler+0x2e4>
 800462c:	bf00      	nop
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004656:	0f9b      	lsrs	r3, r3, #30
 8004658:	b2da      	uxtb	r2, r3
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004662:	0e9b      	lsrs	r3, r3, #26
 8004664:	b2db      	uxtb	r3, r3
 8004666:	f003 030f 	and.w	r3, r3, #15
 800466a:	b2da      	uxtb	r2, r3
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004674:	0e1b      	lsrs	r3, r3, #24
 8004676:	b2db      	uxtb	r3, r3
 8004678:	f003 0303 	and.w	r3, r3, #3
 800467c:	b2da      	uxtb	r2, r3
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004686:	0c1b      	lsrs	r3, r3, #16
 8004688:	b2da      	uxtb	r2, r3
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004692:	0a1b      	lsrs	r3, r3, #8
 8004694:	b2da      	uxtb	r2, r3
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800469e:	b2da      	uxtb	r2, r3
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046a8:	0d1b      	lsrs	r3, r3, #20
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046b4:	0c1b      	lsrs	r3, r3, #16
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	f003 030f 	and.w	r3, r3, #15
 80046bc:	b2da      	uxtb	r2, r3
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046c6:	0bdb      	lsrs	r3, r3, #15
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	b2da      	uxtb	r2, r3
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046d8:	0b9b      	lsrs	r3, r3, #14
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	b2da      	uxtb	r2, r3
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046ea:	0b5b      	lsrs	r3, r3, #13
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	b2da      	uxtb	r2, r3
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046fc:	0b1b      	lsrs	r3, r3, #12
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	f003 0301 	and.w	r3, r3, #1
 8004704:	b2da      	uxtb	r2, r3
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2200      	movs	r2, #0
 800470e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004714:	2b00      	cmp	r3, #0
 8004716:	d163      	bne.n	80047e0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800471c:	009a      	lsls	r2, r3, #2
 800471e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004722:	4013      	ands	r3, r2
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8004728:	0f92      	lsrs	r2, r2, #30
 800472a:	431a      	orrs	r2, r3
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004734:	0edb      	lsrs	r3, r3, #27
 8004736:	b2db      	uxtb	r3, r3
 8004738:	f003 0307 	and.w	r3, r3, #7
 800473c:	b2da      	uxtb	r2, r3
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004746:	0e1b      	lsrs	r3, r3, #24
 8004748:	b2db      	uxtb	r3, r3
 800474a:	f003 0307 	and.w	r3, r3, #7
 800474e:	b2da      	uxtb	r2, r3
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004758:	0d5b      	lsrs	r3, r3, #21
 800475a:	b2db      	uxtb	r3, r3
 800475c:	f003 0307 	and.w	r3, r3, #7
 8004760:	b2da      	uxtb	r2, r3
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800476a:	0c9b      	lsrs	r3, r3, #18
 800476c:	b2db      	uxtb	r3, r3
 800476e:	f003 0307 	and.w	r3, r3, #7
 8004772:	b2da      	uxtb	r2, r3
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800477c:	0bdb      	lsrs	r3, r3, #15
 800477e:	b2db      	uxtb	r3, r3
 8004780:	f003 0307 	and.w	r3, r3, #7
 8004784:	b2da      	uxtb	r2, r3
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	1c5a      	adds	r2, r3, #1
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	7e1b      	ldrb	r3, [r3, #24]
 8004798:	b2db      	uxtb	r3, r3
 800479a:	f003 0307 	and.w	r3, r3, #7
 800479e:	3302      	adds	r3, #2
 80047a0:	2201      	movs	r2, #1
 80047a2:	fa02 f303 	lsl.w	r3, r2, r3
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80047aa:	fb03 f202 	mul.w	r2, r3, r2
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	7a1b      	ldrb	r3, [r3, #8]
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	f003 030f 	and.w	r3, r3, #15
 80047bc:	2201      	movs	r2, #1
 80047be:	409a      	lsls	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80047cc:	0a52      	lsrs	r2, r2, #9
 80047ce:	fb03 f202 	mul.w	r2, r3, r2
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047dc:	661a      	str	r2, [r3, #96]	@ 0x60
 80047de:	e031      	b.n	8004844 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d11d      	bne.n	8004824 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047ec:	041b      	lsls	r3, r3, #16
 80047ee:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047f6:	0c1b      	lsrs	r3, r3, #16
 80047f8:	431a      	orrs	r2, r3
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	3301      	adds	r3, #1
 8004804:	029a      	lsls	r2, r3, #10
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004818:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	661a      	str	r2, [r3, #96]	@ 0x60
 8004822:	e00f      	b.n	8004844 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a58      	ldr	r2, [pc, #352]	@ (800498c <HAL_SD_GetCardCSD+0x344>)
 800482a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004830:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e09d      	b.n	8004980 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004848:	0b9b      	lsrs	r3, r3, #14
 800484a:	b2db      	uxtb	r3, r3
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	b2da      	uxtb	r2, r3
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800485a:	09db      	lsrs	r3, r3, #7
 800485c:	b2db      	uxtb	r3, r3
 800485e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004862:	b2da      	uxtb	r2, r3
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800486c:	b2db      	uxtb	r3, r3
 800486e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004872:	b2da      	uxtb	r2, r3
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800487c:	0fdb      	lsrs	r3, r3, #31
 800487e:	b2da      	uxtb	r2, r3
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004888:	0f5b      	lsrs	r3, r3, #29
 800488a:	b2db      	uxtb	r3, r3
 800488c:	f003 0303 	and.w	r3, r3, #3
 8004890:	b2da      	uxtb	r2, r3
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800489a:	0e9b      	lsrs	r3, r3, #26
 800489c:	b2db      	uxtb	r3, r3
 800489e:	f003 0307 	and.w	r3, r3, #7
 80048a2:	b2da      	uxtb	r2, r3
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ac:	0d9b      	lsrs	r3, r3, #22
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	f003 030f 	and.w	r3, r3, #15
 80048b4:	b2da      	uxtb	r2, r3
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048be:	0d5b      	lsrs	r3, r3, #21
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	b2da      	uxtb	r2, r3
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048da:	0c1b      	lsrs	r3, r3, #16
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	b2da      	uxtb	r2, r3
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ee:	0bdb      	lsrs	r3, r3, #15
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	b2da      	uxtb	r2, r3
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004902:	0b9b      	lsrs	r3, r3, #14
 8004904:	b2db      	uxtb	r3, r3
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	b2da      	uxtb	r2, r3
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004916:	0b5b      	lsrs	r3, r3, #13
 8004918:	b2db      	uxtb	r3, r3
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	b2da      	uxtb	r2, r3
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800492a:	0b1b      	lsrs	r3, r3, #12
 800492c:	b2db      	uxtb	r3, r3
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	b2da      	uxtb	r2, r3
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800493e:	0a9b      	lsrs	r3, r3, #10
 8004940:	b2db      	uxtb	r3, r3
 8004942:	f003 0303 	and.w	r3, r3, #3
 8004946:	b2da      	uxtb	r2, r3
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004952:	0a1b      	lsrs	r3, r3, #8
 8004954:	b2db      	uxtb	r3, r3
 8004956:	f003 0303 	and.w	r3, r3, #3
 800495a:	b2da      	uxtb	r2, r3
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004966:	085b      	lsrs	r3, r3, #1
 8004968:	b2db      	uxtb	r3, r3
 800496a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800496e:	b2da      	uxtb	r2, r3
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr
 800498c:	004005ff 	.word	0x004005ff

08004990 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80049f0:	2300      	movs	r3, #0
 80049f2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80049f4:	f107 030c 	add.w	r3, r7, #12
 80049f8:	4619      	mov	r1, r3
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 fa7e 	bl	8004efc <SD_SendStatus>
 8004a00:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d005      	beq.n	8004a14 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	0a5b      	lsrs	r3, r3, #9
 8004a18:	f003 030f 	and.w	r3, r3, #15
 8004a1c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004a1e:	693b      	ldr	r3, [r7, #16]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3718      	adds	r7, #24
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a34:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a44:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004a46:	bf00      	nop
 8004a48:	3714      	adds	r7, #20
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b084      	sub	sp, #16
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a5e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a64:	2b82      	cmp	r3, #130	@ 0x82
 8004a66:	d111      	bne.n	8004a8c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f000 fc99 	bl	80053a4 <SDMMC_CmdStopTransfer>
 8004a72:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d008      	beq.n	8004a8c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	431a      	orrs	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f7ff fdd4 	bl	8004634 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f022 0208 	bic.w	r2, r2, #8
 8004a9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004aa4:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f001 f8b1 	bl	8005c1c <HAL_SD_RxCpltCallback>
#endif
}
 8004aba:	bf00      	nop
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
	...

08004ac4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b086      	sub	sp, #24
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ad0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f7fd fb24 	bl	8002120 <HAL_DMA_GetError>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d03e      	beq.n	8004b5c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ae4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aec:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d002      	beq.n	8004afa <SD_DMAError+0x36>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d12d      	bne.n	8004b56 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a19      	ldr	r2, [pc, #100]	@ (8004b64 <SD_DMAError+0xa0>)
 8004b00:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8004b10:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b16:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8004b1e:	6978      	ldr	r0, [r7, #20]
 8004b20:	f7ff ff62 	bl	80049e8 <HAL_SD_GetCardState>
 8004b24:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	2b06      	cmp	r3, #6
 8004b2a:	d002      	beq.n	8004b32 <SD_DMAError+0x6e>
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	2b05      	cmp	r3, #5
 8004b30:	d10a      	bne.n	8004b48 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 fc34 	bl	80053a4 <SDMMC_CmdStopTransfer>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b42:	431a      	orrs	r2, r3
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	2200      	movs	r2, #0
 8004b54:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8004b56:	6978      	ldr	r0, [r7, #20]
 8004b58:	f7ff fd6c 	bl	8004634 <HAL_SD_ErrorCallback>
#endif
  }
}
 8004b5c:	bf00      	nop
 8004b5e:	3718      	adds	r7, #24
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	004005ff 	.word	0x004005ff

08004b68 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b74:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004b7e:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f7ff ff31 	bl	80049e8 <HAL_SD_GetCardState>
 8004b86:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	2b06      	cmp	r3, #6
 8004b9a:	d002      	beq.n	8004ba2 <SD_DMATxAbort+0x3a>
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	2b05      	cmp	r3, #5
 8004ba0:	d10a      	bne.n	8004bb8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 fbfc 	bl	80053a4 <SDMMC_CmdStopTransfer>
 8004bac:	4602      	mov	r2, r0
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d103      	bne.n	8004bc8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f001 f817 	bl	8005bf4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004bc6:	e002      	b.n	8004bce <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f7ff fd33 	bl	8004634 <HAL_SD_ErrorCallback>
}
 8004bce:	bf00      	nop
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b084      	sub	sp, #16
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004bec:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f7ff fefa 	bl	80049e8 <HAL_SD_GetCardState>
 8004bf4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	2b06      	cmp	r3, #6
 8004c08:	d002      	beq.n	8004c10 <SD_DMARxAbort+0x3a>
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	2b05      	cmp	r3, #5
 8004c0e:	d10a      	bne.n	8004c26 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f000 fbc5 	bl	80053a4 <SDMMC_CmdStopTransfer>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c20:	431a      	orrs	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d103      	bne.n	8004c36 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f000 ffe0 	bl	8005bf4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004c34:	e002      	b.n	8004c3c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f7ff fcfc 	bl	8004634 <HAL_SD_ErrorCallback>
}
 8004c3c:	bf00      	nop
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004c44:	b5b0      	push	{r4, r5, r7, lr}
 8004c46:	b094      	sub	sp, #80	@ 0x50
 8004c48:	af04      	add	r7, sp, #16
 8004c4a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4618      	mov	r0, r3
 8004c56:	f000 fa77 	bl	8005148 <SDMMC_GetPowerState>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d102      	bne.n	8004c66 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004c60:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004c64:	e0b8      	b.n	8004dd8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c6a:	2b03      	cmp	r3, #3
 8004c6c:	d02f      	beq.n	8004cce <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f000 fc5e 	bl	8005534 <SDMMC_CmdSendCID>
 8004c78:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d001      	beq.n	8004c84 <SD_InitCard+0x40>
    {
      return errorstate;
 8004c80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c82:	e0a9      	b.n	8004dd8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2100      	movs	r1, #0
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 faa1 	bl	80051d2 <SDMMC_GetResponse>
 8004c90:	4602      	mov	r2, r0
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2104      	movs	r1, #4
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f000 fa98 	bl	80051d2 <SDMMC_GetResponse>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2108      	movs	r1, #8
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 fa8f 	bl	80051d2 <SDMMC_GetResponse>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	210c      	movs	r1, #12
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f000 fa86 	bl	80051d2 <SDMMC_GetResponse>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cd2:	2b03      	cmp	r3, #3
 8004cd4:	d00d      	beq.n	8004cf2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f107 020e 	add.w	r2, r7, #14
 8004cde:	4611      	mov	r1, r2
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f000 fc64 	bl	80055ae <SDMMC_CmdSetRelAdd>
 8004ce6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ce8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d001      	beq.n	8004cf2 <SD_InitCard+0xae>
    {
      return errorstate;
 8004cee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cf0:	e072      	b.n	8004dd8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cf6:	2b03      	cmp	r3, #3
 8004cf8:	d036      	beq.n	8004d68 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004cfa:	89fb      	ldrh	r3, [r7, #14]
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d0a:	041b      	lsls	r3, r3, #16
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	4610      	mov	r0, r2
 8004d10:	f000 fc2e 	bl	8005570 <SDMMC_CmdSendCSD>
 8004d14:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d001      	beq.n	8004d20 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004d1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d1e:	e05b      	b.n	8004dd8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2100      	movs	r1, #0
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 fa53 	bl	80051d2 <SDMMC_GetResponse>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2104      	movs	r1, #4
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f000 fa4a 	bl	80051d2 <SDMMC_GetResponse>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2108      	movs	r1, #8
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 fa41 	bl	80051d2 <SDMMC_GetResponse>
 8004d50:	4602      	mov	r2, r0
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	210c      	movs	r1, #12
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f000 fa38 	bl	80051d2 <SDMMC_GetResponse>
 8004d62:	4602      	mov	r2, r0
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2104      	movs	r1, #4
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 fa2f 	bl	80051d2 <SDMMC_GetResponse>
 8004d74:	4603      	mov	r3, r0
 8004d76:	0d1a      	lsrs	r2, r3, #20
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004d7c:	f107 0310 	add.w	r3, r7, #16
 8004d80:	4619      	mov	r1, r3
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7ff fc60 	bl	8004648 <HAL_SD_GetCardCSD>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d002      	beq.n	8004d94 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004d8e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004d92:	e021      	b.n	8004dd8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6819      	ldr	r1, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d9c:	041b      	lsls	r3, r3, #16
 8004d9e:	2200      	movs	r2, #0
 8004da0:	461c      	mov	r4, r3
 8004da2:	4615      	mov	r5, r2
 8004da4:	4622      	mov	r2, r4
 8004da6:	462b      	mov	r3, r5
 8004da8:	4608      	mov	r0, r1
 8004daa:	f000 fb1d 	bl	80053e8 <SDMMC_CmdSelDesel>
 8004dae:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004db0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <SD_InitCard+0x176>
  {
    return errorstate;
 8004db6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004db8:	e00e      	b.n	8004dd8 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681d      	ldr	r5, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	466c      	mov	r4, sp
 8004dc2:	f103 0210 	add.w	r2, r3, #16
 8004dc6:	ca07      	ldmia	r2, {r0, r1, r2}
 8004dc8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004dcc:	3304      	adds	r3, #4
 8004dce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004dd0:	4628      	mov	r0, r5
 8004dd2:	f000 f961 	bl	8005098 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3740      	adds	r7, #64	@ 0x40
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bdb0      	pop	{r4, r5, r7, pc}

08004de0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004de8:	2300      	movs	r3, #0
 8004dea:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004dec:	2300      	movs	r3, #0
 8004dee:	617b      	str	r3, [r7, #20]
 8004df0:	2300      	movs	r3, #0
 8004df2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 fb18 	bl	800542e <SDMMC_CmdGoIdleState>
 8004dfe:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <SD_PowerON+0x2a>
  {
    return errorstate;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	e072      	b.n	8004ef0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f000 fb2b 	bl	800546a <SDMMC_CmdOperCond>
 8004e14:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00d      	beq.n	8004e38 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 fb01 	bl	800542e <SDMMC_CmdGoIdleState>
 8004e2c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d004      	beq.n	8004e3e <SD_PowerON+0x5e>
    {
      return errorstate;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	e05b      	b.n	8004ef0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d137      	bne.n	8004eb6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f000 fb2b 	bl	80054a8 <SDMMC_CmdAppCommand>
 8004e52:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d02d      	beq.n	8004eb6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004e5a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004e5e:	e047      	b.n	8004ef0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2100      	movs	r1, #0
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 fb1e 	bl	80054a8 <SDMMC_CmdAppCommand>
 8004e6c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d001      	beq.n	8004e78 <SD_PowerON+0x98>
    {
      return errorstate;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	e03b      	b.n	8004ef0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	491e      	ldr	r1, [pc, #120]	@ (8004ef8 <SD_PowerON+0x118>)
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 fb34 	bl	80054ec <SDMMC_CmdAppOperCommand>
 8004e84:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d002      	beq.n	8004e92 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004e8c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004e90:	e02e      	b.n	8004ef0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2100      	movs	r1, #0
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f000 f99a 	bl	80051d2 <SDMMC_GetResponse>
 8004e9e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	0fdb      	lsrs	r3, r3, #31
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d101      	bne.n	8004eac <SD_PowerON+0xcc>
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e000      	b.n	8004eae <SD_PowerON+0xce>
 8004eac:	2300      	movs	r3, #0
 8004eae:	613b      	str	r3, [r7, #16]

    count++;
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d802      	bhi.n	8004ec6 <SD_PowerON+0xe6>
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d0cc      	beq.n	8004e60 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d902      	bls.n	8004ed6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004ed0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ed4:	e00c      	b.n	8004ef0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d003      	beq.n	8004ee8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	645a      	str	r2, [r3, #68]	@ 0x44
 8004ee6:	e002      	b.n	8004eee <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3718      	adds	r7, #24
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	c1100000 	.word	0xc1100000

08004efc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d102      	bne.n	8004f12 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004f0c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004f10:	e018      	b.n	8004f44 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f1a:	041b      	lsls	r3, r3, #16
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	4610      	mov	r0, r2
 8004f20:	f000 fb66 	bl	80055f0 <SDMMC_CmdSendStatus>
 8004f24:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d001      	beq.n	8004f30 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	e009      	b.n	8004f44 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2100      	movs	r1, #0
 8004f36:	4618      	mov	r0, r3
 8004f38:	f000 f94b 	bl	80051d2 <SDMMC_GetResponse>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f58:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f5e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d03f      	beq.n	8004fe6 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004f66:	2300      	movs	r3, #0
 8004f68:	617b      	str	r3, [r7, #20]
 8004f6a:	e033      	b.n	8004fd4 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4618      	mov	r0, r3
 8004f72:	f000 f8bd 	bl	80050f0 <SDMMC_ReadFIFO>
 8004f76:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	b2da      	uxtb	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	3301      	adds	r3, #1
 8004f84:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	0a1b      	lsrs	r3, r3, #8
 8004f90:	b2da      	uxtb	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	0c1b      	lsrs	r3, r3, #16
 8004fa6:	b2da      	uxtb	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	0e1b      	lsrs	r3, r3, #24
 8004fbc:	b2da      	uxtb	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	617b      	str	r3, [r7, #20]
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	2b07      	cmp	r3, #7
 8004fd8:	d9c8      	bls.n	8004f6c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8004fe6:	bf00      	nop
 8004fe8:	3718      	adds	r7, #24
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b086      	sub	sp, #24
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005000:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d043      	beq.n	8005090 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8005008:	2300      	movs	r3, #0
 800500a:	617b      	str	r3, [r7, #20]
 800500c:	e037      	b.n	800507e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	3301      	adds	r3, #1
 8005018:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	3b01      	subs	r3, #1
 800501e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	021a      	lsls	r2, r3, #8
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	4313      	orrs	r3, r2
 800502a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	3301      	adds	r3, #1
 8005030:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	3b01      	subs	r3, #1
 8005036:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	041a      	lsls	r2, r3, #16
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	4313      	orrs	r3, r2
 8005042:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	3301      	adds	r3, #1
 8005048:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	3b01      	subs	r3, #1
 800504e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	061a      	lsls	r2, r3, #24
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	4313      	orrs	r3, r2
 800505a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	3301      	adds	r3, #1
 8005060:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	3b01      	subs	r3, #1
 8005066:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f107 0208 	add.w	r2, r7, #8
 8005070:	4611      	mov	r1, r2
 8005072:	4618      	mov	r0, r3
 8005074:	f000 f849 	bl	800510a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	3301      	adds	r3, #1
 800507c:	617b      	str	r3, [r7, #20]
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	2b07      	cmp	r3, #7
 8005082:	d9c4      	bls.n	800500e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8005090:	bf00      	nop
 8005092:	3718      	adds	r7, #24
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8005098:	b084      	sub	sp, #16
 800509a:	b480      	push	{r7}
 800509c:	b085      	sub	sp, #20
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	f107 001c 	add.w	r0, r7, #28
 80050a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80050aa:	2300      	movs	r3, #0
 80050ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80050ae:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80050b0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80050b2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80050b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 80050b6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80050b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 80050ba:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80050bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 80050be:	431a      	orrs	r2, r3
             Init.ClockDiv
 80050c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 80050c2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685a      	ldr	r2, [r3, #4]
 80050ce:	4b07      	ldr	r3, [pc, #28]	@ (80050ec <SDMMC_Init+0x54>)
 80050d0:	4013      	ands	r3, r2
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	431a      	orrs	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3714      	adds	r7, #20
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	b004      	add	sp, #16
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	ffff8100 	.word	0xffff8100

080050f0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80050fe:	4618      	mov	r0, r3
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800510a:	b480      	push	{r7}
 800510c:	b083      	sub	sp, #12
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
 8005112:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2203      	movs	r2, #3
 8005138:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0303 	and.w	r3, r3, #3
}
 8005158:	4618      	mov	r0, r3
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800516e:	2300      	movs	r3, #0
 8005170:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005182:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005188:	431a      	orrs	r2, r3
                       Command->CPSM);
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800518e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	4313      	orrs	r3, r2
 8005194:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	68da      	ldr	r2, [r3, #12]
 800519a:	4b06      	ldr	r3, [pc, #24]	@ (80051b4 <SDMMC_SendCommand+0x50>)
 800519c:	4013      	ands	r3, r2
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	431a      	orrs	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3714      	adds	r7, #20
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr
 80051b4:	fffff000 	.word	0xfffff000

080051b8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	b2db      	uxtb	r3, r3
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	370c      	adds	r7, #12
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr

080051d2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80051d2:	b480      	push	{r7}
 80051d4:	b085      	sub	sp, #20
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
 80051da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	3314      	adds	r3, #20
 80051e0:	461a      	mov	r2, r3
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	4413      	add	r3, r2
 80051e6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
}  
 80051ec:	4618      	mov	r0, r3
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005202:	2300      	movs	r3, #0
 8005204:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	685a      	ldr	r2, [r3, #4]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800521e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005224:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800522a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	4313      	orrs	r3, r2
 8005230:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005236:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	431a      	orrs	r2, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005242:	2300      	movs	r3, #0

}
 8005244:	4618      	mov	r0, r3
 8005246:	3714      	adds	r7, #20
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b088      	sub	sp, #32
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800525e:	2310      	movs	r3, #16
 8005260:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005262:	2340      	movs	r3, #64	@ 0x40
 8005264:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005266:	2300      	movs	r3, #0
 8005268:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800526a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800526e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005270:	f107 0308 	add.w	r3, r7, #8
 8005274:	4619      	mov	r1, r3
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7ff ff74 	bl	8005164 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800527c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005280:	2110      	movs	r1, #16
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f9d6 	bl	8005634 <SDMMC_GetCmdResp1>
 8005288:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800528a:	69fb      	ldr	r3, [r7, #28]
}
 800528c:	4618      	mov	r0, r3
 800528e:	3720      	adds	r7, #32
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b088      	sub	sp, #32
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80052a2:	2311      	movs	r3, #17
 80052a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80052a6:	2340      	movs	r3, #64	@ 0x40
 80052a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80052aa:	2300      	movs	r3, #0
 80052ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80052ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80052b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80052b4:	f107 0308 	add.w	r3, r7, #8
 80052b8:	4619      	mov	r1, r3
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f7ff ff52 	bl	8005164 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80052c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052c4:	2111      	movs	r1, #17
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f9b4 	bl	8005634 <SDMMC_GetCmdResp1>
 80052cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052ce:	69fb      	ldr	r3, [r7, #28]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3720      	adds	r7, #32
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b088      	sub	sp, #32
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80052e6:	2312      	movs	r3, #18
 80052e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80052ea:	2340      	movs	r3, #64	@ 0x40
 80052ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80052ee:	2300      	movs	r3, #0
 80052f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80052f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80052f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80052f8:	f107 0308 	add.w	r3, r7, #8
 80052fc:	4619      	mov	r1, r3
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f7ff ff30 	bl	8005164 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005304:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005308:	2112      	movs	r1, #18
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f992 	bl	8005634 <SDMMC_GetCmdResp1>
 8005310:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005312:	69fb      	ldr	r3, [r7, #28]
}
 8005314:	4618      	mov	r0, r3
 8005316:	3720      	adds	r7, #32
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b088      	sub	sp, #32
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800532a:	2318      	movs	r3, #24
 800532c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800532e:	2340      	movs	r3, #64	@ 0x40
 8005330:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005332:	2300      	movs	r3, #0
 8005334:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005336:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800533a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800533c:	f107 0308 	add.w	r3, r7, #8
 8005340:	4619      	mov	r1, r3
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7ff ff0e 	bl	8005164 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005348:	f241 3288 	movw	r2, #5000	@ 0x1388
 800534c:	2118      	movs	r1, #24
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f970 	bl	8005634 <SDMMC_GetCmdResp1>
 8005354:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005356:	69fb      	ldr	r3, [r7, #28]
}
 8005358:	4618      	mov	r0, r3
 800535a:	3720      	adds	r7, #32
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b088      	sub	sp, #32
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800536e:	2319      	movs	r3, #25
 8005370:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005372:	2340      	movs	r3, #64	@ 0x40
 8005374:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005376:	2300      	movs	r3, #0
 8005378:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800537a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800537e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005380:	f107 0308 	add.w	r3, r7, #8
 8005384:	4619      	mov	r1, r3
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7ff feec 	bl	8005164 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800538c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005390:	2119      	movs	r1, #25
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f94e 	bl	8005634 <SDMMC_GetCmdResp1>
 8005398:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800539a:	69fb      	ldr	r3, [r7, #28]
}
 800539c:	4618      	mov	r0, r3
 800539e:	3720      	adds	r7, #32
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b088      	sub	sp, #32
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80053ac:	2300      	movs	r3, #0
 80053ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80053b0:	230c      	movs	r3, #12
 80053b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80053b4:	2340      	movs	r3, #64	@ 0x40
 80053b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80053b8:	2300      	movs	r3, #0
 80053ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80053bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80053c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80053c2:	f107 0308 	add.w	r3, r7, #8
 80053c6:	4619      	mov	r1, r3
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f7ff fecb 	bl	8005164 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80053ce:	4a05      	ldr	r2, [pc, #20]	@ (80053e4 <SDMMC_CmdStopTransfer+0x40>)
 80053d0:	210c      	movs	r1, #12
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f92e 	bl	8005634 <SDMMC_GetCmdResp1>
 80053d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053da:	69fb      	ldr	r3, [r7, #28]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3720      	adds	r7, #32
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	05f5e100 	.word	0x05f5e100

080053e8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b08a      	sub	sp, #40	@ 0x28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80053f8:	2307      	movs	r3, #7
 80053fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80053fc:	2340      	movs	r3, #64	@ 0x40
 80053fe:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005400:	2300      	movs	r3, #0
 8005402:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005404:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005408:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800540a:	f107 0310 	add.w	r3, r7, #16
 800540e:	4619      	mov	r1, r3
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f7ff fea7 	bl	8005164 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8005416:	f241 3288 	movw	r2, #5000	@ 0x1388
 800541a:	2107      	movs	r1, #7
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f000 f909 	bl	8005634 <SDMMC_GetCmdResp1>
 8005422:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8005424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005426:	4618      	mov	r0, r3
 8005428:	3728      	adds	r7, #40	@ 0x28
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800542e:	b580      	push	{r7, lr}
 8005430:	b088      	sub	sp, #32
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005436:	2300      	movs	r3, #0
 8005438:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800543a:	2300      	movs	r3, #0
 800543c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800543e:	2300      	movs	r3, #0
 8005440:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005442:	2300      	movs	r3, #0
 8005444:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005446:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800544a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800544c:	f107 0308 	add.w	r3, r7, #8
 8005450:	4619      	mov	r1, r3
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7ff fe86 	bl	8005164 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 fb23 	bl	8005aa4 <SDMMC_GetCmdError>
 800545e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005460:	69fb      	ldr	r3, [r7, #28]
}
 8005462:	4618      	mov	r0, r3
 8005464:	3720      	adds	r7, #32
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b088      	sub	sp, #32
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005472:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8005476:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005478:	2308      	movs	r3, #8
 800547a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800547c:	2340      	movs	r3, #64	@ 0x40
 800547e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005480:	2300      	movs	r3, #0
 8005482:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005484:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005488:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800548a:	f107 0308 	add.w	r3, r7, #8
 800548e:	4619      	mov	r1, r3
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f7ff fe67 	bl	8005164 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 fab6 	bl	8005a08 <SDMMC_GetCmdResp7>
 800549c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800549e:	69fb      	ldr	r3, [r7, #28]
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3720      	adds	r7, #32
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b088      	sub	sp, #32
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80054b6:	2337      	movs	r3, #55	@ 0x37
 80054b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80054ba:	2340      	movs	r3, #64	@ 0x40
 80054bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80054be:	2300      	movs	r3, #0
 80054c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80054c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80054c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80054c8:	f107 0308 	add.w	r3, r7, #8
 80054cc:	4619      	mov	r1, r3
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f7ff fe48 	bl	8005164 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80054d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054d8:	2137      	movs	r1, #55	@ 0x37
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f8aa 	bl	8005634 <SDMMC_GetCmdResp1>
 80054e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054e2:	69fb      	ldr	r3, [r7, #28]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3720      	adds	r7, #32
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b088      	sub	sp, #32
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80054f6:	683a      	ldr	r2, [r7, #0]
 80054f8:	4b0d      	ldr	r3, [pc, #52]	@ (8005530 <SDMMC_CmdAppOperCommand+0x44>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80054fe:	2329      	movs	r3, #41	@ 0x29
 8005500:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005502:	2340      	movs	r3, #64	@ 0x40
 8005504:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005506:	2300      	movs	r3, #0
 8005508:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800550a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800550e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005510:	f107 0308 	add.w	r3, r7, #8
 8005514:	4619      	mov	r1, r3
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7ff fe24 	bl	8005164 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 f9bf 	bl	80058a0 <SDMMC_GetCmdResp3>
 8005522:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005524:	69fb      	ldr	r3, [r7, #28]
}
 8005526:	4618      	mov	r0, r3
 8005528:	3720      	adds	r7, #32
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	80100000 	.word	0x80100000

08005534 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b088      	sub	sp, #32
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800553c:	2300      	movs	r3, #0
 800553e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005540:	2302      	movs	r3, #2
 8005542:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005544:	23c0      	movs	r3, #192	@ 0xc0
 8005546:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005548:	2300      	movs	r3, #0
 800554a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800554c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005550:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005552:	f107 0308 	add.w	r3, r7, #8
 8005556:	4619      	mov	r1, r3
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f7ff fe03 	bl	8005164 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 f956 	bl	8005810 <SDMMC_GetCmdResp2>
 8005564:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005566:	69fb      	ldr	r3, [r7, #28]
}
 8005568:	4618      	mov	r0, r3
 800556a:	3720      	adds	r7, #32
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b088      	sub	sp, #32
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800557e:	2309      	movs	r3, #9
 8005580:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005582:	23c0      	movs	r3, #192	@ 0xc0
 8005584:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005586:	2300      	movs	r3, #0
 8005588:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800558a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800558e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005590:	f107 0308 	add.w	r3, r7, #8
 8005594:	4619      	mov	r1, r3
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f7ff fde4 	bl	8005164 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 f937 	bl	8005810 <SDMMC_GetCmdResp2>
 80055a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055a4:	69fb      	ldr	r3, [r7, #28]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3720      	adds	r7, #32
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b088      	sub	sp, #32
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
 80055b6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80055b8:	2300      	movs	r3, #0
 80055ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80055bc:	2303      	movs	r3, #3
 80055be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80055c0:	2340      	movs	r3, #64	@ 0x40
 80055c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80055c4:	2300      	movs	r3, #0
 80055c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80055c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80055cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80055ce:	f107 0308 	add.w	r3, r7, #8
 80055d2:	4619      	mov	r1, r3
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f7ff fdc5 	bl	8005164 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80055da:	683a      	ldr	r2, [r7, #0]
 80055dc:	2103      	movs	r1, #3
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f99c 	bl	800591c <SDMMC_GetCmdResp6>
 80055e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055e6:	69fb      	ldr	r3, [r7, #28]
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3720      	adds	r7, #32
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b088      	sub	sp, #32
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80055fe:	230d      	movs	r3, #13
 8005600:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005602:	2340      	movs	r3, #64	@ 0x40
 8005604:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005606:	2300      	movs	r3, #0
 8005608:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800560a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800560e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005610:	f107 0308 	add.w	r3, r7, #8
 8005614:	4619      	mov	r1, r3
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f7ff fda4 	bl	8005164 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800561c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005620:	210d      	movs	r1, #13
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f806 	bl	8005634 <SDMMC_GetCmdResp1>
 8005628:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800562a:	69fb      	ldr	r3, [r7, #28]
}
 800562c:	4618      	mov	r0, r3
 800562e:	3720      	adds	r7, #32
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b088      	sub	sp, #32
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	460b      	mov	r3, r1
 800563e:	607a      	str	r2, [r7, #4]
 8005640:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005642:	4b70      	ldr	r3, [pc, #448]	@ (8005804 <SDMMC_GetCmdResp1+0x1d0>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a70      	ldr	r2, [pc, #448]	@ (8005808 <SDMMC_GetCmdResp1+0x1d4>)
 8005648:	fba2 2303 	umull	r2, r3, r2, r3
 800564c:	0a5a      	lsrs	r2, r3, #9
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	fb02 f303 	mul.w	r3, r2, r3
 8005654:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	1e5a      	subs	r2, r3, #1
 800565a:	61fa      	str	r2, [r7, #28]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d102      	bne.n	8005666 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005660:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005664:	e0c9      	b.n	80057fa <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800566a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005672:	2b00      	cmp	r3, #0
 8005674:	d0ef      	beq.n	8005656 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1ea      	bne.n	8005656 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005684:	f003 0304 	and.w	r3, r3, #4
 8005688:	2b00      	cmp	r3, #0
 800568a:	d004      	beq.n	8005696 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2204      	movs	r2, #4
 8005690:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005692:	2304      	movs	r3, #4
 8005694:	e0b1      	b.n	80057fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d004      	beq.n	80056ac <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2201      	movs	r2, #1
 80056a6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e0a6      	b.n	80057fa <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	22c5      	movs	r2, #197	@ 0xc5
 80056b0:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f7ff fd80 	bl	80051b8 <SDMMC_GetCommandResponse>
 80056b8:	4603      	mov	r3, r0
 80056ba:	461a      	mov	r2, r3
 80056bc:	7afb      	ldrb	r3, [r7, #11]
 80056be:	4293      	cmp	r3, r2
 80056c0:	d001      	beq.n	80056c6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e099      	b.n	80057fa <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80056c6:	2100      	movs	r1, #0
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f7ff fd82 	bl	80051d2 <SDMMC_GetResponse>
 80056ce:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	4b4e      	ldr	r3, [pc, #312]	@ (800580c <SDMMC_GetCmdResp1+0x1d8>)
 80056d4:	4013      	ands	r3, r2
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d101      	bne.n	80056de <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80056da:	2300      	movs	r3, #0
 80056dc:	e08d      	b.n	80057fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	da02      	bge.n	80056ea <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80056e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80056e8:	e087      	b.n	80057fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d001      	beq.n	80056f8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80056f4:	2340      	movs	r3, #64	@ 0x40
 80056f6:	e080      	b.n	80057fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005702:	2380      	movs	r3, #128	@ 0x80
 8005704:	e079      	b.n	80057fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d002      	beq.n	8005716 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005710:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005714:	e071      	b.n	80057fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d002      	beq.n	8005726 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005720:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005724:	e069      	b.n	80057fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d002      	beq.n	8005736 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005730:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005734:	e061      	b.n	80057fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d002      	beq.n	8005746 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005740:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005744:	e059      	b.n	80057fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d002      	beq.n	8005756 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005750:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005754:	e051      	b.n	80057fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d002      	beq.n	8005766 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005760:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005764:	e049      	b.n	80057fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d002      	beq.n	8005776 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005770:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005774:	e041      	b.n	80057fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d002      	beq.n	8005786 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005780:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005784:	e039      	b.n	80057fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d002      	beq.n	8005796 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005790:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005794:	e031      	b.n	80057fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d002      	beq.n	80057a6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80057a0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80057a4:	e029      	b.n	80057fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d002      	beq.n	80057b6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80057b0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80057b4:	e021      	b.n	80057fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d002      	beq.n	80057c6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80057c0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80057c4:	e019      	b.n	80057fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d002      	beq.n	80057d6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80057d0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80057d4:	e011      	b.n	80057fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d002      	beq.n	80057e6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80057e0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80057e4:	e009      	b.n	80057fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	f003 0308 	and.w	r3, r3, #8
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d002      	beq.n	80057f6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80057f0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80057f4:	e001      	b.n	80057fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80057f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3720      	adds	r7, #32
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	20000000 	.word	0x20000000
 8005808:	10624dd3 	.word	0x10624dd3
 800580c:	fdffe008 	.word	0xfdffe008

08005810 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005818:	4b1f      	ldr	r3, [pc, #124]	@ (8005898 <SDMMC_GetCmdResp2+0x88>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a1f      	ldr	r2, [pc, #124]	@ (800589c <SDMMC_GetCmdResp2+0x8c>)
 800581e:	fba2 2303 	umull	r2, r3, r2, r3
 8005822:	0a5b      	lsrs	r3, r3, #9
 8005824:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005828:	fb02 f303 	mul.w	r3, r2, r3
 800582c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	1e5a      	subs	r2, r3, #1
 8005832:	60fa      	str	r2, [r7, #12]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d102      	bne.n	800583e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005838:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800583c:	e026      	b.n	800588c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005842:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800584a:	2b00      	cmp	r3, #0
 800584c:	d0ef      	beq.n	800582e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1ea      	bne.n	800582e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800585c:	f003 0304 	and.w	r3, r3, #4
 8005860:	2b00      	cmp	r3, #0
 8005862:	d004      	beq.n	800586e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2204      	movs	r2, #4
 8005868:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800586a:	2304      	movs	r3, #4
 800586c:	e00e      	b.n	800588c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	2b00      	cmp	r3, #0
 8005878:	d004      	beq.n	8005884 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2201      	movs	r2, #1
 800587e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005880:	2301      	movs	r3, #1
 8005882:	e003      	b.n	800588c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	22c5      	movs	r2, #197	@ 0xc5
 8005888:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3714      	adds	r7, #20
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr
 8005898:	20000000 	.word	0x20000000
 800589c:	10624dd3 	.word	0x10624dd3

080058a0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80058a8:	4b1a      	ldr	r3, [pc, #104]	@ (8005914 <SDMMC_GetCmdResp3+0x74>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a1a      	ldr	r2, [pc, #104]	@ (8005918 <SDMMC_GetCmdResp3+0x78>)
 80058ae:	fba2 2303 	umull	r2, r3, r2, r3
 80058b2:	0a5b      	lsrs	r3, r3, #9
 80058b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058b8:	fb02 f303 	mul.w	r3, r2, r3
 80058bc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	1e5a      	subs	r2, r3, #1
 80058c2:	60fa      	str	r2, [r7, #12]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d102      	bne.n	80058ce <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80058c8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80058cc:	e01b      	b.n	8005906 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058d2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d0ef      	beq.n	80058be <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1ea      	bne.n	80058be <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058ec:	f003 0304 	and.w	r3, r3, #4
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d004      	beq.n	80058fe <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2204      	movs	r2, #4
 80058f8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80058fa:	2304      	movs	r3, #4
 80058fc:	e003      	b.n	8005906 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	22c5      	movs	r2, #197	@ 0xc5
 8005902:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3714      	adds	r7, #20
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	20000000 	.word	0x20000000
 8005918:	10624dd3 	.word	0x10624dd3

0800591c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b088      	sub	sp, #32
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	460b      	mov	r3, r1
 8005926:	607a      	str	r2, [r7, #4]
 8005928:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800592a:	4b35      	ldr	r3, [pc, #212]	@ (8005a00 <SDMMC_GetCmdResp6+0xe4>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a35      	ldr	r2, [pc, #212]	@ (8005a04 <SDMMC_GetCmdResp6+0xe8>)
 8005930:	fba2 2303 	umull	r2, r3, r2, r3
 8005934:	0a5b      	lsrs	r3, r3, #9
 8005936:	f241 3288 	movw	r2, #5000	@ 0x1388
 800593a:	fb02 f303 	mul.w	r3, r2, r3
 800593e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	1e5a      	subs	r2, r3, #1
 8005944:	61fa      	str	r2, [r7, #28]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d102      	bne.n	8005950 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800594a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800594e:	e052      	b.n	80059f6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005954:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800595c:	2b00      	cmp	r3, #0
 800595e:	d0ef      	beq.n	8005940 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1ea      	bne.n	8005940 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800596e:	f003 0304 	and.w	r3, r3, #4
 8005972:	2b00      	cmp	r3, #0
 8005974:	d004      	beq.n	8005980 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2204      	movs	r2, #4
 800597a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800597c:	2304      	movs	r3, #4
 800597e:	e03a      	b.n	80059f6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005984:	f003 0301 	and.w	r3, r3, #1
 8005988:	2b00      	cmp	r3, #0
 800598a:	d004      	beq.n	8005996 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2201      	movs	r2, #1
 8005990:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005992:	2301      	movs	r3, #1
 8005994:	e02f      	b.n	80059f6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f7ff fc0e 	bl	80051b8 <SDMMC_GetCommandResponse>
 800599c:	4603      	mov	r3, r0
 800599e:	461a      	mov	r2, r3
 80059a0:	7afb      	ldrb	r3, [r7, #11]
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d001      	beq.n	80059aa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e025      	b.n	80059f6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	22c5      	movs	r2, #197	@ 0xc5
 80059ae:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80059b0:	2100      	movs	r1, #0
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f7ff fc0d 	bl	80051d2 <SDMMC_GetResponse>
 80059b8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d106      	bne.n	80059d2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	0c1b      	lsrs	r3, r3, #16
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80059ce:	2300      	movs	r3, #0
 80059d0:	e011      	b.n	80059f6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d002      	beq.n	80059e2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80059dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80059e0:	e009      	b.n	80059f6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d002      	beq.n	80059f2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80059ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80059f0:	e001      	b.n	80059f6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80059f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3720      	adds	r7, #32
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	20000000 	.word	0x20000000
 8005a04:	10624dd3 	.word	0x10624dd3

08005a08 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005a10:	4b22      	ldr	r3, [pc, #136]	@ (8005a9c <SDMMC_GetCmdResp7+0x94>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a22      	ldr	r2, [pc, #136]	@ (8005aa0 <SDMMC_GetCmdResp7+0x98>)
 8005a16:	fba2 2303 	umull	r2, r3, r2, r3
 8005a1a:	0a5b      	lsrs	r3, r3, #9
 8005a1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a20:	fb02 f303 	mul.w	r3, r2, r3
 8005a24:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	1e5a      	subs	r2, r3, #1
 8005a2a:	60fa      	str	r2, [r7, #12]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d102      	bne.n	8005a36 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005a30:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005a34:	e02c      	b.n	8005a90 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a3a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d0ef      	beq.n	8005a26 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1ea      	bne.n	8005a26 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a54:	f003 0304 	and.w	r3, r3, #4
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d004      	beq.n	8005a66 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2204      	movs	r2, #4
 8005a60:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005a62:	2304      	movs	r3, #4
 8005a64:	e014      	b.n	8005a90 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d004      	beq.n	8005a7c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2201      	movs	r2, #1
 8005a76:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e009      	b.n	8005a90 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d002      	beq.n	8005a8e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2240      	movs	r2, #64	@ 0x40
 8005a8c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005a8e:	2300      	movs	r3, #0
  
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3714      	adds	r7, #20
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr
 8005a9c:	20000000 	.word	0x20000000
 8005aa0:	10624dd3 	.word	0x10624dd3

08005aa4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005aac:	4b11      	ldr	r3, [pc, #68]	@ (8005af4 <SDMMC_GetCmdError+0x50>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a11      	ldr	r2, [pc, #68]	@ (8005af8 <SDMMC_GetCmdError+0x54>)
 8005ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab6:	0a5b      	lsrs	r3, r3, #9
 8005ab8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005abc:	fb02 f303 	mul.w	r3, r2, r3
 8005ac0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	1e5a      	subs	r2, r3, #1
 8005ac6:	60fa      	str	r2, [r7, #12]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d102      	bne.n	8005ad2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005acc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005ad0:	e009      	b.n	8005ae6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d0f1      	beq.n	8005ac2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	22c5      	movs	r2, #197	@ 0xc5
 8005ae2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3714      	adds	r7, #20
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	20000000 	.word	0x20000000
 8005af8:	10624dd3 	.word	0x10624dd3

08005afc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005b00:	4904      	ldr	r1, [pc, #16]	@ (8005b14 <MX_FATFS_Init+0x18>)
 8005b02:	4805      	ldr	r0, [pc, #20]	@ (8005b18 <MX_FATFS_Init+0x1c>)
 8005b04:	f001 ff48 	bl	8007998 <FATFS_LinkDriver>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	4b03      	ldr	r3, [pc, #12]	@ (8005b1c <MX_FATFS_Init+0x20>)
 8005b0e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005b10:	bf00      	nop
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	200002b0 	.word	0x200002b0
 8005b18:	080083bc 	.word	0x080083bc
 8005b1c:	200002ac 	.word	0x200002ac

08005b20 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005b26:	2300      	movs	r3, #0
 8005b28:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005b2a:	f000 f888 	bl	8005c3e <BSP_SD_IsDetected>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d001      	beq.n	8005b38 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8005b34:	2302      	movs	r3, #2
 8005b36:	e005      	b.n	8005b44 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8005b38:	4804      	ldr	r0, [pc, #16]	@ (8005b4c <BSP_SD_Init+0x2c>)
 8005b3a:	f7fe f985 	bl	8003e48 <HAL_SD_Init>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8005b42:	79fb      	ldrb	r3, [r7, #7]
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3708      	adds	r7, #8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	20000160 	.word	0x20000160

08005b50 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b086      	sub	sp, #24
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	68f9      	ldr	r1, [r7, #12]
 8005b66:	4806      	ldr	r0, [pc, #24]	@ (8005b80 <BSP_SD_ReadBlocks_DMA+0x30>)
 8005b68:	f7fe fa26 	bl	8003fb8 <HAL_SD_ReadBlocks_DMA>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3718      	adds	r7, #24
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	20000160 	.word	0x20000160

08005b84 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b086      	sub	sp, #24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005b90:	2300      	movs	r3, #0
 8005b92:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	68f9      	ldr	r1, [r7, #12]
 8005b9a:	4806      	ldr	r0, [pc, #24]	@ (8005bb4 <BSP_SD_WriteBlocks_DMA+0x30>)
 8005b9c:	f7fe faee 	bl	800417c <HAL_SD_WriteBlocks_DMA>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d001      	beq.n	8005baa <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005baa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3718      	adds	r7, #24
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	20000160 	.word	0x20000160

08005bb8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005bbc:	4805      	ldr	r0, [pc, #20]	@ (8005bd4 <BSP_SD_GetCardState+0x1c>)
 8005bbe:	f7fe ff13 	bl	80049e8 <HAL_SD_GetCardState>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b04      	cmp	r3, #4
 8005bc6:	bf14      	ite	ne
 8005bc8:	2301      	movne	r3, #1
 8005bca:	2300      	moveq	r3, #0
 8005bcc:	b2db      	uxtb	r3, r3
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	20000160 	.word	0x20000160

08005bd8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8005be0:	6879      	ldr	r1, [r7, #4]
 8005be2:	4803      	ldr	r0, [pc, #12]	@ (8005bf0 <BSP_SD_GetCardInfo+0x18>)
 8005be4:	f7fe fed4 	bl	8004990 <HAL_SD_GetCardInfo>
}
 8005be8:	bf00      	nop
 8005bea:	3708      	adds	r7, #8
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	20000160 	.word	0x20000160

08005bf4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8005bfc:	f000 f818 	bl	8005c30 <BSP_SD_AbortCallback>
}
 8005c00:	bf00      	nop
 8005c02:	3708      	adds	r7, #8
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8005c10:	f000 f9a8 	bl	8005f64 <BSP_SD_WriteCpltCallback>
}
 8005c14:	bf00      	nop
 8005c16:	3708      	adds	r7, #8
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005c24:	f000 f9aa 	bl	8005f7c <BSP_SD_ReadCpltCallback>
}
 8005c28:	bf00      	nop
 8005c2a:	3708      	adds	r7, #8
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8005c30:	b480      	push	{r7}
 8005c32:	af00      	add	r7, sp, #0

}
 8005c34:	bf00      	nop
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr

08005c3e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b082      	sub	sp, #8
 8005c42:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005c44:	2301      	movs	r3, #1
 8005c46:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8005c48:	f000 f80c 	bl	8005c64 <BSP_PlatformIsDetected>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d101      	bne.n	8005c56 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8005c52:	2300      	movs	r3, #0
 8005c54:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005c56:	79fb      	ldrb	r3, [r7, #7]
 8005c58:	b2db      	uxtb	r3, r3
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3708      	adds	r7, #8
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
	...

08005c64 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8005c6e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005c72:	4806      	ldr	r0, [pc, #24]	@ (8005c8c <BSP_PlatformIsDetected+0x28>)
 8005c74:	f7fc fdc8 	bl	8002808 <HAL_GPIO_ReadPin>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d001      	beq.n	8005c82 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8005c82:	79fb      	ldrb	r3, [r7, #7]
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3708      	adds	r7, #8
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	40020800 	.word	0x40020800

08005c90 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8005c98:	f7fb fe46 	bl	8001928 <HAL_GetTick>
 8005c9c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8005c9e:	e006      	b.n	8005cae <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005ca0:	f7ff ff8a 	bl	8005bb8 <BSP_SD_GetCardState>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d101      	bne.n	8005cae <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8005caa:	2300      	movs	r3, #0
 8005cac:	e009      	b.n	8005cc2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8005cae:	f7fb fe3b 	bl	8001928 <HAL_GetTick>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d8f0      	bhi.n	8005ca0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8005cbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
	...

08005ccc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8005d04 <SD_CheckStatus+0x38>)
 8005cd8:	2201      	movs	r2, #1
 8005cda:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005cdc:	f7ff ff6c 	bl	8005bb8 <BSP_SD_GetCardState>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d107      	bne.n	8005cf6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005ce6:	4b07      	ldr	r3, [pc, #28]	@ (8005d04 <SD_CheckStatus+0x38>)
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	f023 0301 	bic.w	r3, r3, #1
 8005cf0:	b2da      	uxtb	r2, r3
 8005cf2:	4b04      	ldr	r3, [pc, #16]	@ (8005d04 <SD_CheckStatus+0x38>)
 8005cf4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005cf6:	4b03      	ldr	r3, [pc, #12]	@ (8005d04 <SD_CheckStatus+0x38>)
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	b2db      	uxtb	r3, r3
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3708      	adds	r7, #8
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	20000009 	.word	0x20000009

08005d08 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	4603      	mov	r3, r0
 8005d10:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005d12:	f7ff ff05 	bl	8005b20 <BSP_SD_Init>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d107      	bne.n	8005d2c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8005d1c:	79fb      	ldrb	r3, [r7, #7]
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7ff ffd4 	bl	8005ccc <SD_CheckStatus>
 8005d24:	4603      	mov	r3, r0
 8005d26:	461a      	mov	r2, r3
 8005d28:	4b04      	ldr	r3, [pc, #16]	@ (8005d3c <SD_initialize+0x34>)
 8005d2a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005d2c:	4b03      	ldr	r3, [pc, #12]	@ (8005d3c <SD_initialize+0x34>)
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	b2db      	uxtb	r3, r3
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3708      	adds	r7, #8
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	20000009 	.word	0x20000009

08005d40 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	4603      	mov	r3, r0
 8005d48:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005d4a:	79fb      	ldrb	r3, [r7, #7]
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f7ff ffbd 	bl	8005ccc <SD_CheckStatus>
 8005d52:	4603      	mov	r3, r0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3708      	adds	r7, #8
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b086      	sub	sp, #24
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60b9      	str	r1, [r7, #8]
 8005d64:	607a      	str	r2, [r7, #4]
 8005d66:	603b      	str	r3, [r7, #0]
 8005d68:	4603      	mov	r3, r0
 8005d6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005d70:	f247 5030 	movw	r0, #30000	@ 0x7530
 8005d74:	f7ff ff8c 	bl	8005c90 <SD_CheckStatusWithTimeout>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	da01      	bge.n	8005d82 <SD_read+0x26>
  {
    return res;
 8005d7e:	7dfb      	ldrb	r3, [r7, #23]
 8005d80:	e03b      	b.n	8005dfa <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8005d82:	683a      	ldr	r2, [r7, #0]
 8005d84:	6879      	ldr	r1, [r7, #4]
 8005d86:	68b8      	ldr	r0, [r7, #8]
 8005d88:	f7ff fee2 	bl	8005b50 <BSP_SD_ReadBlocks_DMA>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d132      	bne.n	8005df8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8005d92:	4b1c      	ldr	r3, [pc, #112]	@ (8005e04 <SD_read+0xa8>)
 8005d94:	2200      	movs	r2, #0
 8005d96:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8005d98:	f7fb fdc6 	bl	8001928 <HAL_GetTick>
 8005d9c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8005d9e:	bf00      	nop
 8005da0:	4b18      	ldr	r3, [pc, #96]	@ (8005e04 <SD_read+0xa8>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d108      	bne.n	8005dba <SD_read+0x5e>
 8005da8:	f7fb fdbe 	bl	8001928 <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	f247 522f 	movw	r2, #29999	@ 0x752f
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d9f2      	bls.n	8005da0 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8005dba:	4b12      	ldr	r3, [pc, #72]	@ (8005e04 <SD_read+0xa8>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d102      	bne.n	8005dc8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	75fb      	strb	r3, [r7, #23]
 8005dc6:	e017      	b.n	8005df8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8005dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8005e04 <SD_read+0xa8>)
 8005dca:	2200      	movs	r2, #0
 8005dcc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8005dce:	f7fb fdab 	bl	8001928 <HAL_GetTick>
 8005dd2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005dd4:	e007      	b.n	8005de6 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005dd6:	f7ff feef 	bl	8005bb8 <BSP_SD_GetCardState>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d102      	bne.n	8005de6 <SD_read+0x8a>
          {
            res = RES_OK;
 8005de0:	2300      	movs	r3, #0
 8005de2:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8005de4:	e008      	b.n	8005df8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005de6:	f7fb fd9f 	bl	8001928 <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	f247 522f 	movw	r2, #29999	@ 0x752f
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d9ee      	bls.n	8005dd6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8005df8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3718      	adds	r7, #24
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	200004e8 	.word	0x200004e8

08005e08 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60b9      	str	r1, [r7, #8]
 8005e10:	607a      	str	r2, [r7, #4]
 8005e12:	603b      	str	r3, [r7, #0]
 8005e14:	4603      	mov	r3, r0
 8005e16:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8005e1c:	4b24      	ldr	r3, [pc, #144]	@ (8005eb0 <SD_write+0xa8>)
 8005e1e:	2200      	movs	r2, #0
 8005e20:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005e22:	f247 5030 	movw	r0, #30000	@ 0x7530
 8005e26:	f7ff ff33 	bl	8005c90 <SD_CheckStatusWithTimeout>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	da01      	bge.n	8005e34 <SD_write+0x2c>
  {
    return res;
 8005e30:	7dfb      	ldrb	r3, [r7, #23]
 8005e32:	e038      	b.n	8005ea6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8005e34:	683a      	ldr	r2, [r7, #0]
 8005e36:	6879      	ldr	r1, [r7, #4]
 8005e38:	68b8      	ldr	r0, [r7, #8]
 8005e3a:	f7ff fea3 	bl	8005b84 <BSP_SD_WriteBlocks_DMA>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d12f      	bne.n	8005ea4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8005e44:	f7fb fd70 	bl	8001928 <HAL_GetTick>
 8005e48:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8005e4a:	bf00      	nop
 8005e4c:	4b18      	ldr	r3, [pc, #96]	@ (8005eb0 <SD_write+0xa8>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d108      	bne.n	8005e66 <SD_write+0x5e>
 8005e54:	f7fb fd68 	bl	8001928 <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	f247 522f 	movw	r2, #29999	@ 0x752f
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d9f2      	bls.n	8005e4c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8005e66:	4b12      	ldr	r3, [pc, #72]	@ (8005eb0 <SD_write+0xa8>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d102      	bne.n	8005e74 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	75fb      	strb	r3, [r7, #23]
 8005e72:	e017      	b.n	8005ea4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8005e74:	4b0e      	ldr	r3, [pc, #56]	@ (8005eb0 <SD_write+0xa8>)
 8005e76:	2200      	movs	r2, #0
 8005e78:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8005e7a:	f7fb fd55 	bl	8001928 <HAL_GetTick>
 8005e7e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005e80:	e007      	b.n	8005e92 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005e82:	f7ff fe99 	bl	8005bb8 <BSP_SD_GetCardState>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d102      	bne.n	8005e92 <SD_write+0x8a>
          {
            res = RES_OK;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	75fb      	strb	r3, [r7, #23]
            break;
 8005e90:	e008      	b.n	8005ea4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005e92:	f7fb fd49 	bl	8001928 <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d9ee      	bls.n	8005e82 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8005ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3718      	adds	r7, #24
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	200004e4 	.word	0x200004e4

08005eb4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b08c      	sub	sp, #48	@ 0x30
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	4603      	mov	r3, r0
 8005ebc:	603a      	str	r2, [r7, #0]
 8005ebe:	71fb      	strb	r3, [r7, #7]
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005eca:	4b25      	ldr	r3, [pc, #148]	@ (8005f60 <SD_ioctl+0xac>)
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	f003 0301 	and.w	r3, r3, #1
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d001      	beq.n	8005edc <SD_ioctl+0x28>
 8005ed8:	2303      	movs	r3, #3
 8005eda:	e03c      	b.n	8005f56 <SD_ioctl+0xa2>

  switch (cmd)
 8005edc:	79bb      	ldrb	r3, [r7, #6]
 8005ede:	2b03      	cmp	r3, #3
 8005ee0:	d834      	bhi.n	8005f4c <SD_ioctl+0x98>
 8005ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ee8 <SD_ioctl+0x34>)
 8005ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee8:	08005ef9 	.word	0x08005ef9
 8005eec:	08005f01 	.word	0x08005f01
 8005ef0:	08005f19 	.word	0x08005f19
 8005ef4:	08005f33 	.word	0x08005f33
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005efe:	e028      	b.n	8005f52 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005f00:	f107 030c 	add.w	r3, r7, #12
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7ff fe67 	bl	8005bd8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005f0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005f10:	2300      	movs	r3, #0
 8005f12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005f16:	e01c      	b.n	8005f52 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005f18:	f107 030c 	add.w	r3, r7, #12
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7ff fe5b 	bl	8005bd8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005f30:	e00f      	b.n	8005f52 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005f32:	f107 030c 	add.w	r3, r7, #12
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7ff fe4e 	bl	8005bd8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f3e:	0a5a      	lsrs	r2, r3, #9
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005f44:	2300      	movs	r3, #0
 8005f46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005f4a:	e002      	b.n	8005f52 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005f4c:	2304      	movs	r3, #4
 8005f4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8005f52:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3730      	adds	r7, #48	@ 0x30
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	20000009 	.word	0x20000009

08005f64 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8005f64:	b480      	push	{r7}
 8005f66:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8005f68:	4b03      	ldr	r3, [pc, #12]	@ (8005f78 <BSP_SD_WriteCpltCallback+0x14>)
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	601a      	str	r2, [r3, #0]
}
 8005f6e:	bf00      	nop
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr
 8005f78:	200004e4 	.word	0x200004e4

08005f7c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8005f80:	4b03      	ldr	r3, [pc, #12]	@ (8005f90 <BSP_SD_ReadCpltCallback+0x14>)
 8005f82:	2201      	movs	r2, #1
 8005f84:	601a      	str	r2, [r3, #0]
}
 8005f86:	bf00      	nop
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr
 8005f90:	200004e8 	.word	0x200004e8

08005f94 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005f9e:	79fb      	ldrb	r3, [r7, #7]
 8005fa0:	4a08      	ldr	r2, [pc, #32]	@ (8005fc4 <disk_status+0x30>)
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	4413      	add	r3, r2
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	79fa      	ldrb	r2, [r7, #7]
 8005fac:	4905      	ldr	r1, [pc, #20]	@ (8005fc4 <disk_status+0x30>)
 8005fae:	440a      	add	r2, r1
 8005fb0:	7a12      	ldrb	r2, [r2, #8]
 8005fb2:	4610      	mov	r0, r2
 8005fb4:	4798      	blx	r3
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3710      	adds	r7, #16
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	20000514 	.word	0x20000514

08005fc8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	4603      	mov	r3, r0
 8005fd0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005fd6:	79fb      	ldrb	r3, [r7, #7]
 8005fd8:	4a0d      	ldr	r2, [pc, #52]	@ (8006010 <disk_initialize+0x48>)
 8005fda:	5cd3      	ldrb	r3, [r2, r3]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d111      	bne.n	8006004 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005fe0:	79fb      	ldrb	r3, [r7, #7]
 8005fe2:	4a0b      	ldr	r2, [pc, #44]	@ (8006010 <disk_initialize+0x48>)
 8005fe4:	2101      	movs	r1, #1
 8005fe6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005fe8:	79fb      	ldrb	r3, [r7, #7]
 8005fea:	4a09      	ldr	r2, [pc, #36]	@ (8006010 <disk_initialize+0x48>)
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4413      	add	r3, r2
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	79fa      	ldrb	r2, [r7, #7]
 8005ff6:	4906      	ldr	r1, [pc, #24]	@ (8006010 <disk_initialize+0x48>)
 8005ff8:	440a      	add	r2, r1
 8005ffa:	7a12      	ldrb	r2, [r2, #8]
 8005ffc:	4610      	mov	r0, r2
 8005ffe:	4798      	blx	r3
 8006000:	4603      	mov	r3, r0
 8006002:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006004:	7bfb      	ldrb	r3, [r7, #15]
}
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	20000514 	.word	0x20000514

08006014 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006014:	b590      	push	{r4, r7, lr}
 8006016:	b087      	sub	sp, #28
 8006018:	af00      	add	r7, sp, #0
 800601a:	60b9      	str	r1, [r7, #8]
 800601c:	607a      	str	r2, [r7, #4]
 800601e:	603b      	str	r3, [r7, #0]
 8006020:	4603      	mov	r3, r0
 8006022:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006024:	7bfb      	ldrb	r3, [r7, #15]
 8006026:	4a0a      	ldr	r2, [pc, #40]	@ (8006050 <disk_read+0x3c>)
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4413      	add	r3, r2
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	689c      	ldr	r4, [r3, #8]
 8006030:	7bfb      	ldrb	r3, [r7, #15]
 8006032:	4a07      	ldr	r2, [pc, #28]	@ (8006050 <disk_read+0x3c>)
 8006034:	4413      	add	r3, r2
 8006036:	7a18      	ldrb	r0, [r3, #8]
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	68b9      	ldr	r1, [r7, #8]
 800603e:	47a0      	blx	r4
 8006040:	4603      	mov	r3, r0
 8006042:	75fb      	strb	r3, [r7, #23]
  return res;
 8006044:	7dfb      	ldrb	r3, [r7, #23]
}
 8006046:	4618      	mov	r0, r3
 8006048:	371c      	adds	r7, #28
 800604a:	46bd      	mov	sp, r7
 800604c:	bd90      	pop	{r4, r7, pc}
 800604e:	bf00      	nop
 8006050:	20000514 	.word	0x20000514

08006054 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006054:	b590      	push	{r4, r7, lr}
 8006056:	b087      	sub	sp, #28
 8006058:	af00      	add	r7, sp, #0
 800605a:	60b9      	str	r1, [r7, #8]
 800605c:	607a      	str	r2, [r7, #4]
 800605e:	603b      	str	r3, [r7, #0]
 8006060:	4603      	mov	r3, r0
 8006062:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006064:	7bfb      	ldrb	r3, [r7, #15]
 8006066:	4a0a      	ldr	r2, [pc, #40]	@ (8006090 <disk_write+0x3c>)
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4413      	add	r3, r2
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	68dc      	ldr	r4, [r3, #12]
 8006070:	7bfb      	ldrb	r3, [r7, #15]
 8006072:	4a07      	ldr	r2, [pc, #28]	@ (8006090 <disk_write+0x3c>)
 8006074:	4413      	add	r3, r2
 8006076:	7a18      	ldrb	r0, [r3, #8]
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	68b9      	ldr	r1, [r7, #8]
 800607e:	47a0      	blx	r4
 8006080:	4603      	mov	r3, r0
 8006082:	75fb      	strb	r3, [r7, #23]
  return res;
 8006084:	7dfb      	ldrb	r3, [r7, #23]
}
 8006086:	4618      	mov	r0, r3
 8006088:	371c      	adds	r7, #28
 800608a:	46bd      	mov	sp, r7
 800608c:	bd90      	pop	{r4, r7, pc}
 800608e:	bf00      	nop
 8006090:	20000514 	.word	0x20000514

08006094 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	3301      	adds	r3, #1
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80060a4:	89fb      	ldrh	r3, [r7, #14]
 80060a6:	021b      	lsls	r3, r3, #8
 80060a8:	b21a      	sxth	r2, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	b21b      	sxth	r3, r3
 80060b0:	4313      	orrs	r3, r2
 80060b2:	b21b      	sxth	r3, r3
 80060b4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80060b6:	89fb      	ldrh	r3, [r7, #14]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3714      	adds	r7, #20
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	3303      	adds	r3, #3
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	021b      	lsls	r3, r3, #8
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	3202      	adds	r2, #2
 80060dc:	7812      	ldrb	r2, [r2, #0]
 80060de:	4313      	orrs	r3, r2
 80060e0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	021b      	lsls	r3, r3, #8
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	3201      	adds	r2, #1
 80060ea:	7812      	ldrb	r2, [r2, #0]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	021b      	lsls	r3, r3, #8
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	7812      	ldrb	r2, [r2, #0]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	60fb      	str	r3, [r7, #12]
	return rv;
 80060fc:	68fb      	ldr	r3, [r7, #12]
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3714      	adds	r7, #20
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr

0800610a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800610a:	b480      	push	{r7}
 800610c:	b083      	sub	sp, #12
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
 8006112:	460b      	mov	r3, r1
 8006114:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	1c5a      	adds	r2, r3, #1
 800611a:	607a      	str	r2, [r7, #4]
 800611c:	887a      	ldrh	r2, [r7, #2]
 800611e:	b2d2      	uxtb	r2, r2
 8006120:	701a      	strb	r2, [r3, #0]
 8006122:	887b      	ldrh	r3, [r7, #2]
 8006124:	0a1b      	lsrs	r3, r3, #8
 8006126:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	1c5a      	adds	r2, r3, #1
 800612c:	607a      	str	r2, [r7, #4]
 800612e:	887a      	ldrh	r2, [r7, #2]
 8006130:	b2d2      	uxtb	r2, r2
 8006132:	701a      	strb	r2, [r3, #0]
}
 8006134:	bf00      	nop
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	1c5a      	adds	r2, r3, #1
 800614e:	607a      	str	r2, [r7, #4]
 8006150:	683a      	ldr	r2, [r7, #0]
 8006152:	b2d2      	uxtb	r2, r2
 8006154:	701a      	strb	r2, [r3, #0]
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	0a1b      	lsrs	r3, r3, #8
 800615a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	1c5a      	adds	r2, r3, #1
 8006160:	607a      	str	r2, [r7, #4]
 8006162:	683a      	ldr	r2, [r7, #0]
 8006164:	b2d2      	uxtb	r2, r2
 8006166:	701a      	strb	r2, [r3, #0]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	0a1b      	lsrs	r3, r3, #8
 800616c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	1c5a      	adds	r2, r3, #1
 8006172:	607a      	str	r2, [r7, #4]
 8006174:	683a      	ldr	r2, [r7, #0]
 8006176:	b2d2      	uxtb	r2, r2
 8006178:	701a      	strb	r2, [r3, #0]
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	0a1b      	lsrs	r3, r3, #8
 800617e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	1c5a      	adds	r2, r3, #1
 8006184:	607a      	str	r2, [r7, #4]
 8006186:	683a      	ldr	r2, [r7, #0]
 8006188:	b2d2      	uxtb	r2, r2
 800618a:	701a      	strb	r2, [r3, #0]
}
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006198:	b480      	push	{r7}
 800619a:	b087      	sub	sp, #28
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	1c5a      	adds	r2, r3, #1
 80061ac:	617a      	str	r2, [r7, #20]
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	b2d2      	uxtb	r2, r2
 80061b2:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	3b01      	subs	r3, #1
 80061b8:	607b      	str	r3, [r7, #4]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d1f3      	bne.n	80061a8 <mem_set+0x10>
}
 80061c0:	bf00      	nop
 80061c2:	bf00      	nop
 80061c4:	371c      	adds	r7, #28
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80061ce:	b480      	push	{r7}
 80061d0:	b089      	sub	sp, #36	@ 0x24
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	60f8      	str	r0, [r7, #12]
 80061d6:	60b9      	str	r1, [r7, #8]
 80061d8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	61fb      	str	r3, [r7, #28]
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80061e2:	2300      	movs	r3, #0
 80061e4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	1c5a      	adds	r2, r3, #1
 80061ea:	61fa      	str	r2, [r7, #28]
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	4619      	mov	r1, r3
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	1c5a      	adds	r2, r3, #1
 80061f4:	61ba      	str	r2, [r7, #24]
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	1acb      	subs	r3, r1, r3
 80061fa:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	3b01      	subs	r3, #1
 8006200:	607b      	str	r3, [r7, #4]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d002      	beq.n	800620e <mem_cmp+0x40>
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d0eb      	beq.n	80061e6 <mem_cmp+0x18>

	return r;
 800620e:	697b      	ldr	r3, [r7, #20]
}
 8006210:	4618      	mov	r0, r3
 8006212:	3724      	adds	r7, #36	@ 0x24
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006226:	e002      	b.n	800622e <chk_chr+0x12>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	3301      	adds	r3, #1
 800622c:	607b      	str	r3, [r7, #4]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d005      	beq.n	8006242 <chk_chr+0x26>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	461a      	mov	r2, r3
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	4293      	cmp	r3, r2
 8006240:	d1f2      	bne.n	8006228 <chk_chr+0xc>
	return *str;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	781b      	ldrb	r3, [r3, #0]
}
 8006246:	4618      	mov	r0, r3
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
	...

08006254 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800625e:	2300      	movs	r3, #0
 8006260:	60fb      	str	r3, [r7, #12]
 8006262:	e01f      	b.n	80062a4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006264:	4a41      	ldr	r2, [pc, #260]	@ (800636c <inc_lock+0x118>)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	011b      	lsls	r3, r3, #4
 800626a:	4413      	add	r3, r2
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	429a      	cmp	r2, r3
 8006274:	d113      	bne.n	800629e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006276:	4a3d      	ldr	r2, [pc, #244]	@ (800636c <inc_lock+0x118>)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	011b      	lsls	r3, r3, #4
 800627c:	4413      	add	r3, r2
 800627e:	3304      	adds	r3, #4
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006286:	429a      	cmp	r2, r3
 8006288:	d109      	bne.n	800629e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800628a:	4a38      	ldr	r2, [pc, #224]	@ (800636c <inc_lock+0x118>)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	011b      	lsls	r3, r3, #4
 8006290:	4413      	add	r3, r2
 8006292:	3308      	adds	r3, #8
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800629a:	429a      	cmp	r2, r3
 800629c:	d006      	beq.n	80062ac <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	3301      	adds	r3, #1
 80062a2:	60fb      	str	r3, [r7, #12]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d9dc      	bls.n	8006264 <inc_lock+0x10>
 80062aa:	e000      	b.n	80062ae <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80062ac:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d132      	bne.n	800631a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80062b4:	2300      	movs	r3, #0
 80062b6:	60fb      	str	r3, [r7, #12]
 80062b8:	e002      	b.n	80062c0 <inc_lock+0x6c>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	3301      	adds	r3, #1
 80062be:	60fb      	str	r3, [r7, #12]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d806      	bhi.n	80062d4 <inc_lock+0x80>
 80062c6:	4a29      	ldr	r2, [pc, #164]	@ (800636c <inc_lock+0x118>)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	011b      	lsls	r3, r3, #4
 80062cc:	4413      	add	r3, r2
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1f2      	bne.n	80062ba <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d101      	bne.n	80062de <inc_lock+0x8a>
 80062da:	2300      	movs	r3, #0
 80062dc:	e040      	b.n	8006360 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	4922      	ldr	r1, [pc, #136]	@ (800636c <inc_lock+0x118>)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	011b      	lsls	r3, r3, #4
 80062e8:	440b      	add	r3, r1
 80062ea:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	689a      	ldr	r2, [r3, #8]
 80062f0:	491e      	ldr	r1, [pc, #120]	@ (800636c <inc_lock+0x118>)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	011b      	lsls	r3, r3, #4
 80062f6:	440b      	add	r3, r1
 80062f8:	3304      	adds	r3, #4
 80062fa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	695a      	ldr	r2, [r3, #20]
 8006300:	491a      	ldr	r1, [pc, #104]	@ (800636c <inc_lock+0x118>)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	011b      	lsls	r3, r3, #4
 8006306:	440b      	add	r3, r1
 8006308:	3308      	adds	r3, #8
 800630a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800630c:	4a17      	ldr	r2, [pc, #92]	@ (800636c <inc_lock+0x118>)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	011b      	lsls	r3, r3, #4
 8006312:	4413      	add	r3, r2
 8006314:	330c      	adds	r3, #12
 8006316:	2200      	movs	r2, #0
 8006318:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d009      	beq.n	8006334 <inc_lock+0xe0>
 8006320:	4a12      	ldr	r2, [pc, #72]	@ (800636c <inc_lock+0x118>)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	011b      	lsls	r3, r3, #4
 8006326:	4413      	add	r3, r2
 8006328:	330c      	adds	r3, #12
 800632a:	881b      	ldrh	r3, [r3, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d001      	beq.n	8006334 <inc_lock+0xe0>
 8006330:	2300      	movs	r3, #0
 8006332:	e015      	b.n	8006360 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d108      	bne.n	800634c <inc_lock+0xf8>
 800633a:	4a0c      	ldr	r2, [pc, #48]	@ (800636c <inc_lock+0x118>)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	011b      	lsls	r3, r3, #4
 8006340:	4413      	add	r3, r2
 8006342:	330c      	adds	r3, #12
 8006344:	881b      	ldrh	r3, [r3, #0]
 8006346:	3301      	adds	r3, #1
 8006348:	b29a      	uxth	r2, r3
 800634a:	e001      	b.n	8006350 <inc_lock+0xfc>
 800634c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006350:	4906      	ldr	r1, [pc, #24]	@ (800636c <inc_lock+0x118>)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	011b      	lsls	r3, r3, #4
 8006356:	440b      	add	r3, r1
 8006358:	330c      	adds	r3, #12
 800635a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	3301      	adds	r3, #1
}
 8006360:	4618      	mov	r0, r3
 8006362:	3714      	adds	r7, #20
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr
 800636c:	200004f4 	.word	0x200004f4

08006370 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	3b01      	subs	r3, #1
 800637c:	607b      	str	r3, [r7, #4]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d825      	bhi.n	80063d0 <dec_lock+0x60>
		n = Files[i].ctr;
 8006384:	4a17      	ldr	r2, [pc, #92]	@ (80063e4 <dec_lock+0x74>)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	011b      	lsls	r3, r3, #4
 800638a:	4413      	add	r3, r2
 800638c:	330c      	adds	r3, #12
 800638e:	881b      	ldrh	r3, [r3, #0]
 8006390:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006392:	89fb      	ldrh	r3, [r7, #14]
 8006394:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006398:	d101      	bne.n	800639e <dec_lock+0x2e>
 800639a:	2300      	movs	r3, #0
 800639c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800639e:	89fb      	ldrh	r3, [r7, #14]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d002      	beq.n	80063aa <dec_lock+0x3a>
 80063a4:	89fb      	ldrh	r3, [r7, #14]
 80063a6:	3b01      	subs	r3, #1
 80063a8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80063aa:	4a0e      	ldr	r2, [pc, #56]	@ (80063e4 <dec_lock+0x74>)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	011b      	lsls	r3, r3, #4
 80063b0:	4413      	add	r3, r2
 80063b2:	330c      	adds	r3, #12
 80063b4:	89fa      	ldrh	r2, [r7, #14]
 80063b6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80063b8:	89fb      	ldrh	r3, [r7, #14]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d105      	bne.n	80063ca <dec_lock+0x5a>
 80063be:	4a09      	ldr	r2, [pc, #36]	@ (80063e4 <dec_lock+0x74>)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	011b      	lsls	r3, r3, #4
 80063c4:	4413      	add	r3, r2
 80063c6:	2200      	movs	r2, #0
 80063c8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80063ca:	2300      	movs	r3, #0
 80063cc:	737b      	strb	r3, [r7, #13]
 80063ce:	e001      	b.n	80063d4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80063d0:	2302      	movs	r3, #2
 80063d2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80063d4:	7b7b      	ldrb	r3, [r7, #13]
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3714      	adds	r7, #20
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	200004f4 	.word	0x200004f4

080063e8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80063f0:	2300      	movs	r3, #0
 80063f2:	60fb      	str	r3, [r7, #12]
 80063f4:	e010      	b.n	8006418 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80063f6:	4a0d      	ldr	r2, [pc, #52]	@ (800642c <clear_lock+0x44>)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	011b      	lsls	r3, r3, #4
 80063fc:	4413      	add	r3, r2
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	429a      	cmp	r2, r3
 8006404:	d105      	bne.n	8006412 <clear_lock+0x2a>
 8006406:	4a09      	ldr	r2, [pc, #36]	@ (800642c <clear_lock+0x44>)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	011b      	lsls	r3, r3, #4
 800640c:	4413      	add	r3, r2
 800640e:	2200      	movs	r2, #0
 8006410:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	3301      	adds	r3, #1
 8006416:	60fb      	str	r3, [r7, #12]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2b01      	cmp	r3, #1
 800641c:	d9eb      	bls.n	80063f6 <clear_lock+0xe>
	}
}
 800641e:	bf00      	nop
 8006420:	bf00      	nop
 8006422:	3714      	adds	r7, #20
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr
 800642c:	200004f4 	.word	0x200004f4

08006430 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b086      	sub	sp, #24
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006438:	2300      	movs	r3, #0
 800643a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	78db      	ldrb	r3, [r3, #3]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d034      	beq.n	80064ae <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006448:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	7858      	ldrb	r0, [r3, #1]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006454:	2301      	movs	r3, #1
 8006456:	697a      	ldr	r2, [r7, #20]
 8006458:	f7ff fdfc 	bl	8006054 <disk_write>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d002      	beq.n	8006468 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006462:	2301      	movs	r3, #1
 8006464:	73fb      	strb	r3, [r7, #15]
 8006466:	e022      	b.n	80064ae <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a1b      	ldr	r3, [r3, #32]
 8006472:	697a      	ldr	r2, [r7, #20]
 8006474:	1ad2      	subs	r2, r2, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	429a      	cmp	r2, r3
 800647c:	d217      	bcs.n	80064ae <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	789b      	ldrb	r3, [r3, #2]
 8006482:	613b      	str	r3, [r7, #16]
 8006484:	e010      	b.n	80064a8 <sync_window+0x78>
					wsect += fs->fsize;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	697a      	ldr	r2, [r7, #20]
 800648c:	4413      	add	r3, r2
 800648e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	7858      	ldrb	r0, [r3, #1]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800649a:	2301      	movs	r3, #1
 800649c:	697a      	ldr	r2, [r7, #20]
 800649e:	f7ff fdd9 	bl	8006054 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	3b01      	subs	r3, #1
 80064a6:	613b      	str	r3, [r7, #16]
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d8eb      	bhi.n	8006486 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80064ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3718      	adds	r7, #24
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ca:	683a      	ldr	r2, [r7, #0]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d01b      	beq.n	8006508 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f7ff ffad 	bl	8006430 <sync_window>
 80064d6:	4603      	mov	r3, r0
 80064d8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80064da:	7bfb      	ldrb	r3, [r7, #15]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d113      	bne.n	8006508 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	7858      	ldrb	r0, [r3, #1]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80064ea:	2301      	movs	r3, #1
 80064ec:	683a      	ldr	r2, [r7, #0]
 80064ee:	f7ff fd91 	bl	8006014 <disk_read>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d004      	beq.n	8006502 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80064f8:	f04f 33ff 	mov.w	r3, #4294967295
 80064fc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80064fe:	2301      	movs	r3, #1
 8006500:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	683a      	ldr	r2, [r7, #0]
 8006506:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8006508:	7bfb      	ldrb	r3, [r7, #15]
}
 800650a:	4618      	mov	r0, r3
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}

08006512 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006512:	b480      	push	{r7}
 8006514:	b083      	sub	sp, #12
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
 800651a:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	3b02      	subs	r3, #2
 8006520:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	3b02      	subs	r3, #2
 8006528:	683a      	ldr	r2, [r7, #0]
 800652a:	429a      	cmp	r2, r3
 800652c:	d301      	bcc.n	8006532 <clust2sect+0x20>
 800652e:	2300      	movs	r3, #0
 8006530:	e008      	b.n	8006544 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	895b      	ldrh	r3, [r3, #10]
 8006536:	461a      	mov	r2, r3
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	fb03 f202 	mul.w	r2, r3, r2
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006542:	4413      	add	r3, r2
}
 8006544:	4618      	mov	r0, r3
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b086      	sub	sp, #24
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	2b01      	cmp	r3, #1
 8006564:	d904      	bls.n	8006570 <get_fat+0x20>
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	683a      	ldr	r2, [r7, #0]
 800656c:	429a      	cmp	r2, r3
 800656e:	d302      	bcc.n	8006576 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006570:	2301      	movs	r3, #1
 8006572:	617b      	str	r3, [r7, #20]
 8006574:	e08e      	b.n	8006694 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006576:	f04f 33ff 	mov.w	r3, #4294967295
 800657a:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	2b03      	cmp	r3, #3
 8006582:	d061      	beq.n	8006648 <get_fat+0xf8>
 8006584:	2b03      	cmp	r3, #3
 8006586:	dc7b      	bgt.n	8006680 <get_fat+0x130>
 8006588:	2b01      	cmp	r3, #1
 800658a:	d002      	beq.n	8006592 <get_fat+0x42>
 800658c:	2b02      	cmp	r3, #2
 800658e:	d041      	beq.n	8006614 <get_fat+0xc4>
 8006590:	e076      	b.n	8006680 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	60fb      	str	r3, [r7, #12]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	085b      	lsrs	r3, r3, #1
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	4413      	add	r3, r2
 800659e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	6a1a      	ldr	r2, [r3, #32]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	0a5b      	lsrs	r3, r3, #9
 80065a8:	4413      	add	r3, r2
 80065aa:	4619      	mov	r1, r3
 80065ac:	6938      	ldr	r0, [r7, #16]
 80065ae:	f7ff ff83 	bl	80064b8 <move_window>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d166      	bne.n	8006686 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	1c5a      	adds	r2, r3, #1
 80065bc:	60fa      	str	r2, [r7, #12]
 80065be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065c2:	693a      	ldr	r2, [r7, #16]
 80065c4:	4413      	add	r3, r2
 80065c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80065ca:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	6a1a      	ldr	r2, [r3, #32]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	0a5b      	lsrs	r3, r3, #9
 80065d4:	4413      	add	r3, r2
 80065d6:	4619      	mov	r1, r3
 80065d8:	6938      	ldr	r0, [r7, #16]
 80065da:	f7ff ff6d 	bl	80064b8 <move_window>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d152      	bne.n	800668a <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065ea:	693a      	ldr	r2, [r7, #16]
 80065ec:	4413      	add	r3, r2
 80065ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80065f2:	021b      	lsls	r3, r3, #8
 80065f4:	68ba      	ldr	r2, [r7, #8]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	f003 0301 	and.w	r3, r3, #1
 8006600:	2b00      	cmp	r3, #0
 8006602:	d002      	beq.n	800660a <get_fat+0xba>
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	091b      	lsrs	r3, r3, #4
 8006608:	e002      	b.n	8006610 <get_fat+0xc0>
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006610:	617b      	str	r3, [r7, #20]
			break;
 8006612:	e03f      	b.n	8006694 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	6a1a      	ldr	r2, [r3, #32]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	0a1b      	lsrs	r3, r3, #8
 800661c:	4413      	add	r3, r2
 800661e:	4619      	mov	r1, r3
 8006620:	6938      	ldr	r0, [r7, #16]
 8006622:	f7ff ff49 	bl	80064b8 <move_window>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d130      	bne.n	800668e <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	005b      	lsls	r3, r3, #1
 8006636:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800663a:	4413      	add	r3, r2
 800663c:	4618      	mov	r0, r3
 800663e:	f7ff fd29 	bl	8006094 <ld_word>
 8006642:	4603      	mov	r3, r0
 8006644:	617b      	str	r3, [r7, #20]
			break;
 8006646:	e025      	b.n	8006694 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	6a1a      	ldr	r2, [r3, #32]
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	09db      	lsrs	r3, r3, #7
 8006650:	4413      	add	r3, r2
 8006652:	4619      	mov	r1, r3
 8006654:	6938      	ldr	r0, [r7, #16]
 8006656:	f7ff ff2f 	bl	80064b8 <move_window>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d118      	bne.n	8006692 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800666e:	4413      	add	r3, r2
 8006670:	4618      	mov	r0, r3
 8006672:	f7ff fd27 	bl	80060c4 <ld_dword>
 8006676:	4603      	mov	r3, r0
 8006678:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800667c:	617b      	str	r3, [r7, #20]
			break;
 800667e:	e009      	b.n	8006694 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006680:	2301      	movs	r3, #1
 8006682:	617b      	str	r3, [r7, #20]
 8006684:	e006      	b.n	8006694 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006686:	bf00      	nop
 8006688:	e004      	b.n	8006694 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800668a:	bf00      	nop
 800668c:	e002      	b.n	8006694 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800668e:	bf00      	nop
 8006690:	e000      	b.n	8006694 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006692:	bf00      	nop
		}
	}

	return val;
 8006694:	697b      	ldr	r3, [r7, #20]
}
 8006696:	4618      	mov	r0, r3
 8006698:	3718      	adds	r7, #24
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800669e:	b590      	push	{r4, r7, lr}
 80066a0:	b089      	sub	sp, #36	@ 0x24
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	60f8      	str	r0, [r7, #12]
 80066a6:	60b9      	str	r1, [r7, #8]
 80066a8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80066aa:	2302      	movs	r3, #2
 80066ac:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	f240 80d9 	bls.w	8006868 <put_fat+0x1ca>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	695b      	ldr	r3, [r3, #20]
 80066ba:	68ba      	ldr	r2, [r7, #8]
 80066bc:	429a      	cmp	r2, r3
 80066be:	f080 80d3 	bcs.w	8006868 <put_fat+0x1ca>
		switch (fs->fs_type) {
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	2b03      	cmp	r3, #3
 80066c8:	f000 8096 	beq.w	80067f8 <put_fat+0x15a>
 80066cc:	2b03      	cmp	r3, #3
 80066ce:	f300 80cb 	bgt.w	8006868 <put_fat+0x1ca>
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d002      	beq.n	80066dc <put_fat+0x3e>
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d06e      	beq.n	80067b8 <put_fat+0x11a>
 80066da:	e0c5      	b.n	8006868 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	61bb      	str	r3, [r7, #24]
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	085b      	lsrs	r3, r3, #1
 80066e4:	69ba      	ldr	r2, [r7, #24]
 80066e6:	4413      	add	r3, r2
 80066e8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6a1a      	ldr	r2, [r3, #32]
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	0a5b      	lsrs	r3, r3, #9
 80066f2:	4413      	add	r3, r2
 80066f4:	4619      	mov	r1, r3
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f7ff fede 	bl	80064b8 <move_window>
 80066fc:	4603      	mov	r3, r0
 80066fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006700:	7ffb      	ldrb	r3, [r7, #31]
 8006702:	2b00      	cmp	r3, #0
 8006704:	f040 80a9 	bne.w	800685a <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	1c59      	adds	r1, r3, #1
 8006712:	61b9      	str	r1, [r7, #24]
 8006714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006718:	4413      	add	r3, r2
 800671a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00d      	beq.n	8006742 <put_fat+0xa4>
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	b25b      	sxtb	r3, r3
 800672c:	f003 030f 	and.w	r3, r3, #15
 8006730:	b25a      	sxtb	r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	b2db      	uxtb	r3, r3
 8006736:	011b      	lsls	r3, r3, #4
 8006738:	b25b      	sxtb	r3, r3
 800673a:	4313      	orrs	r3, r2
 800673c:	b25b      	sxtb	r3, r3
 800673e:	b2db      	uxtb	r3, r3
 8006740:	e001      	b.n	8006746 <put_fat+0xa8>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	b2db      	uxtb	r3, r3
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2201      	movs	r2, #1
 800674e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6a1a      	ldr	r2, [r3, #32]
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	0a5b      	lsrs	r3, r3, #9
 8006758:	4413      	add	r3, r2
 800675a:	4619      	mov	r1, r3
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f7ff feab 	bl	80064b8 <move_window>
 8006762:	4603      	mov	r3, r0
 8006764:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006766:	7ffb      	ldrb	r3, [r7, #31]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d178      	bne.n	800685e <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006778:	4413      	add	r3, r2
 800677a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	f003 0301 	and.w	r3, r3, #1
 8006782:	2b00      	cmp	r3, #0
 8006784:	d003      	beq.n	800678e <put_fat+0xf0>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	091b      	lsrs	r3, r3, #4
 800678a:	b2db      	uxtb	r3, r3
 800678c:	e00e      	b.n	80067ac <put_fat+0x10e>
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	b25b      	sxtb	r3, r3
 8006794:	f023 030f 	bic.w	r3, r3, #15
 8006798:	b25a      	sxtb	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	0a1b      	lsrs	r3, r3, #8
 800679e:	b25b      	sxtb	r3, r3
 80067a0:	f003 030f 	and.w	r3, r3, #15
 80067a4:	b25b      	sxtb	r3, r3
 80067a6:	4313      	orrs	r3, r2
 80067a8:	b25b      	sxtb	r3, r3
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	697a      	ldr	r2, [r7, #20]
 80067ae:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2201      	movs	r2, #1
 80067b4:	70da      	strb	r2, [r3, #3]
			break;
 80067b6:	e057      	b.n	8006868 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6a1a      	ldr	r2, [r3, #32]
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	0a1b      	lsrs	r3, r3, #8
 80067c0:	4413      	add	r3, r2
 80067c2:	4619      	mov	r1, r3
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f7ff fe77 	bl	80064b8 <move_window>
 80067ca:	4603      	mov	r3, r0
 80067cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80067ce:	7ffb      	ldrb	r3, [r7, #31]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d146      	bne.n	8006862 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	005b      	lsls	r3, r3, #1
 80067de:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80067e2:	4413      	add	r3, r2
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	b292      	uxth	r2, r2
 80067e8:	4611      	mov	r1, r2
 80067ea:	4618      	mov	r0, r3
 80067ec:	f7ff fc8d 	bl	800610a <st_word>
			fs->wflag = 1;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2201      	movs	r2, #1
 80067f4:	70da      	strb	r2, [r3, #3]
			break;
 80067f6:	e037      	b.n	8006868 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6a1a      	ldr	r2, [r3, #32]
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	09db      	lsrs	r3, r3, #7
 8006800:	4413      	add	r3, r2
 8006802:	4619      	mov	r1, r3
 8006804:	68f8      	ldr	r0, [r7, #12]
 8006806:	f7ff fe57 	bl	80064b8 <move_window>
 800680a:	4603      	mov	r3, r0
 800680c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800680e:	7ffb      	ldrb	r3, [r7, #31]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d128      	bne.n	8006866 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006828:	4413      	add	r3, r2
 800682a:	4618      	mov	r0, r3
 800682c:	f7ff fc4a 	bl	80060c4 <ld_dword>
 8006830:	4603      	mov	r3, r0
 8006832:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006836:	4323      	orrs	r3, r4
 8006838:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006848:	4413      	add	r3, r2
 800684a:	6879      	ldr	r1, [r7, #4]
 800684c:	4618      	mov	r0, r3
 800684e:	f7ff fc77 	bl	8006140 <st_dword>
			fs->wflag = 1;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2201      	movs	r2, #1
 8006856:	70da      	strb	r2, [r3, #3]
			break;
 8006858:	e006      	b.n	8006868 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800685a:	bf00      	nop
 800685c:	e004      	b.n	8006868 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800685e:	bf00      	nop
 8006860:	e002      	b.n	8006868 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006862:	bf00      	nop
 8006864:	e000      	b.n	8006868 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006866:	bf00      	nop
		}
	}
	return res;
 8006868:	7ffb      	ldrb	r3, [r7, #31]
}
 800686a:	4618      	mov	r0, r3
 800686c:	3724      	adds	r7, #36	@ 0x24
 800686e:	46bd      	mov	sp, r7
 8006870:	bd90      	pop	{r4, r7, pc}

08006872 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b088      	sub	sp, #32
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
 800687a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d10d      	bne.n	80068a4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d004      	beq.n	800689e <create_chain+0x2c>
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	695b      	ldr	r3, [r3, #20]
 8006898:	69ba      	ldr	r2, [r7, #24]
 800689a:	429a      	cmp	r2, r3
 800689c:	d31b      	bcc.n	80068d6 <create_chain+0x64>
 800689e:	2301      	movs	r3, #1
 80068a0:	61bb      	str	r3, [r7, #24]
 80068a2:	e018      	b.n	80068d6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80068a4:	6839      	ldr	r1, [r7, #0]
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7ff fe52 	bl	8006550 <get_fat>
 80068ac:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d801      	bhi.n	80068b8 <create_chain+0x46>
 80068b4:	2301      	movs	r3, #1
 80068b6:	e070      	b.n	800699a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068be:	d101      	bne.n	80068c4 <create_chain+0x52>
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	e06a      	b.n	800699a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	695b      	ldr	r3, [r3, #20]
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d201      	bcs.n	80068d2 <create_chain+0x60>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	e063      	b.n	800699a <create_chain+0x128>
		scl = clst;
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	3301      	adds	r3, #1
 80068de:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	695b      	ldr	r3, [r3, #20]
 80068e4:	69fa      	ldr	r2, [r7, #28]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d307      	bcc.n	80068fa <create_chain+0x88>
				ncl = 2;
 80068ea:	2302      	movs	r3, #2
 80068ec:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80068ee:	69fa      	ldr	r2, [r7, #28]
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d901      	bls.n	80068fa <create_chain+0x88>
 80068f6:	2300      	movs	r3, #0
 80068f8:	e04f      	b.n	800699a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80068fa:	69f9      	ldr	r1, [r7, #28]
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f7ff fe27 	bl	8006550 <get_fat>
 8006902:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00e      	beq.n	8006928 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2b01      	cmp	r3, #1
 800690e:	d003      	beq.n	8006918 <create_chain+0xa6>
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006916:	d101      	bne.n	800691c <create_chain+0xaa>
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	e03e      	b.n	800699a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800691c:	69fa      	ldr	r2, [r7, #28]
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	429a      	cmp	r2, r3
 8006922:	d1da      	bne.n	80068da <create_chain+0x68>
 8006924:	2300      	movs	r3, #0
 8006926:	e038      	b.n	800699a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006928:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800692a:	f04f 32ff 	mov.w	r2, #4294967295
 800692e:	69f9      	ldr	r1, [r7, #28]
 8006930:	6938      	ldr	r0, [r7, #16]
 8006932:	f7ff feb4 	bl	800669e <put_fat>
 8006936:	4603      	mov	r3, r0
 8006938:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800693a:	7dfb      	ldrb	r3, [r7, #23]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d109      	bne.n	8006954 <create_chain+0xe2>
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d006      	beq.n	8006954 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006946:	69fa      	ldr	r2, [r7, #28]
 8006948:	6839      	ldr	r1, [r7, #0]
 800694a:	6938      	ldr	r0, [r7, #16]
 800694c:	f7ff fea7 	bl	800669e <put_fat>
 8006950:	4603      	mov	r3, r0
 8006952:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006954:	7dfb      	ldrb	r3, [r7, #23]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d116      	bne.n	8006988 <create_chain+0x116>
		fs->last_clst = ncl;
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	69fa      	ldr	r2, [r7, #28]
 800695e:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	691a      	ldr	r2, [r3, #16]
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	695b      	ldr	r3, [r3, #20]
 8006968:	3b02      	subs	r3, #2
 800696a:	429a      	cmp	r2, r3
 800696c:	d804      	bhi.n	8006978 <create_chain+0x106>
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	1e5a      	subs	r2, r3, #1
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	791b      	ldrb	r3, [r3, #4]
 800697c:	f043 0301 	orr.w	r3, r3, #1
 8006980:	b2da      	uxtb	r2, r3
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	711a      	strb	r2, [r3, #4]
 8006986:	e007      	b.n	8006998 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006988:	7dfb      	ldrb	r3, [r7, #23]
 800698a:	2b01      	cmp	r3, #1
 800698c:	d102      	bne.n	8006994 <create_chain+0x122>
 800698e:	f04f 33ff 	mov.w	r3, #4294967295
 8006992:	e000      	b.n	8006996 <create_chain+0x124>
 8006994:	2301      	movs	r3, #1
 8006996:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006998:	69fb      	ldr	r3, [r7, #28]
}
 800699a:	4618      	mov	r0, r3
 800699c:	3720      	adds	r7, #32
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b086      	sub	sp, #24
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
 80069aa:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80069b8:	d204      	bcs.n	80069c4 <dir_sdi+0x22>
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	f003 031f 	and.w	r3, r3, #31
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d001      	beq.n	80069c8 <dir_sdi+0x26>
		return FR_INT_ERR;
 80069c4:	2302      	movs	r3, #2
 80069c6:	e063      	b.n	8006a90 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	683a      	ldr	r2, [r7, #0]
 80069cc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d106      	bne.n	80069e8 <dir_sdi+0x46>
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d902      	bls.n	80069e8 <dir_sdi+0x46>
		clst = fs->dirbase;
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d10c      	bne.n	8006a08 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	095b      	lsrs	r3, r3, #5
 80069f2:	693a      	ldr	r2, [r7, #16]
 80069f4:	8912      	ldrh	r2, [r2, #8]
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d301      	bcc.n	80069fe <dir_sdi+0x5c>
 80069fa:	2302      	movs	r3, #2
 80069fc:	e048      	b.n	8006a90 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	61da      	str	r2, [r3, #28]
 8006a06:	e029      	b.n	8006a5c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	895b      	ldrh	r3, [r3, #10]
 8006a0c:	025b      	lsls	r3, r3, #9
 8006a0e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006a10:	e019      	b.n	8006a46 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6979      	ldr	r1, [r7, #20]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f7ff fd9a 	bl	8006550 <get_fat>
 8006a1c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a24:	d101      	bne.n	8006a2a <dir_sdi+0x88>
 8006a26:	2301      	movs	r3, #1
 8006a28:	e032      	b.n	8006a90 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d904      	bls.n	8006a3a <dir_sdi+0x98>
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	695b      	ldr	r3, [r3, #20]
 8006a34:	697a      	ldr	r2, [r7, #20]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d301      	bcc.n	8006a3e <dir_sdi+0x9c>
 8006a3a:	2302      	movs	r3, #2
 8006a3c:	e028      	b.n	8006a90 <dir_sdi+0xee>
			ofs -= csz;
 8006a3e:	683a      	ldr	r2, [r7, #0]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006a46:	683a      	ldr	r2, [r7, #0]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d2e1      	bcs.n	8006a12 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006a4e:	6979      	ldr	r1, [r7, #20]
 8006a50:	6938      	ldr	r0, [r7, #16]
 8006a52:	f7ff fd5e 	bl	8006512 <clust2sect>
 8006a56:	4602      	mov	r2, r0
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	697a      	ldr	r2, [r7, #20]
 8006a60:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	69db      	ldr	r3, [r3, #28]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d101      	bne.n	8006a6e <dir_sdi+0xcc>
 8006a6a:	2302      	movs	r3, #2
 8006a6c:	e010      	b.n	8006a90 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	69da      	ldr	r2, [r3, #28]
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	0a5b      	lsrs	r3, r3, #9
 8006a76:	441a      	add	r2, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a88:	441a      	add	r2, r3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3718      	adds	r7, #24
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b086      	sub	sp, #24
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	695b      	ldr	r3, [r3, #20]
 8006aac:	3320      	adds	r3, #32
 8006aae:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	69db      	ldr	r3, [r3, #28]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d003      	beq.n	8006ac0 <dir_next+0x28>
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006abe:	d301      	bcc.n	8006ac4 <dir_next+0x2c>
 8006ac0:	2304      	movs	r3, #4
 8006ac2:	e0aa      	b.n	8006c1a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	f040 8098 	bne.w	8006c00 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	69db      	ldr	r3, [r3, #28]
 8006ad4:	1c5a      	adds	r2, r3, #1
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d10b      	bne.n	8006afa <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	095b      	lsrs	r3, r3, #5
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	8912      	ldrh	r2, [r2, #8]
 8006aea:	4293      	cmp	r3, r2
 8006aec:	f0c0 8088 	bcc.w	8006c00 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	61da      	str	r2, [r3, #28]
 8006af6:	2304      	movs	r3, #4
 8006af8:	e08f      	b.n	8006c1a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	0a5b      	lsrs	r3, r3, #9
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	8952      	ldrh	r2, [r2, #10]
 8006b02:	3a01      	subs	r2, #1
 8006b04:	4013      	ands	r3, r2
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d17a      	bne.n	8006c00 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	699b      	ldr	r3, [r3, #24]
 8006b10:	4619      	mov	r1, r3
 8006b12:	4610      	mov	r0, r2
 8006b14:	f7ff fd1c 	bl	8006550 <get_fat>
 8006b18:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d801      	bhi.n	8006b24 <dir_next+0x8c>
 8006b20:	2302      	movs	r3, #2
 8006b22:	e07a      	b.n	8006c1a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b2a:	d101      	bne.n	8006b30 <dir_next+0x98>
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e074      	b.n	8006c1a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	695b      	ldr	r3, [r3, #20]
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d358      	bcc.n	8006bec <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d104      	bne.n	8006b4a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	61da      	str	r2, [r3, #28]
 8006b46:	2304      	movs	r3, #4
 8006b48:	e067      	b.n	8006c1a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	4619      	mov	r1, r3
 8006b52:	4610      	mov	r0, r2
 8006b54:	f7ff fe8d 	bl	8006872 <create_chain>
 8006b58:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d101      	bne.n	8006b64 <dir_next+0xcc>
 8006b60:	2307      	movs	r3, #7
 8006b62:	e05a      	b.n	8006c1a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d101      	bne.n	8006b6e <dir_next+0xd6>
 8006b6a:	2302      	movs	r3, #2
 8006b6c:	e055      	b.n	8006c1a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b74:	d101      	bne.n	8006b7a <dir_next+0xe2>
 8006b76:	2301      	movs	r3, #1
 8006b78:	e04f      	b.n	8006c1a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006b7a:	68f8      	ldr	r0, [r7, #12]
 8006b7c:	f7ff fc58 	bl	8006430 <sync_window>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d001      	beq.n	8006b8a <dir_next+0xf2>
 8006b86:	2301      	movs	r3, #1
 8006b88:	e047      	b.n	8006c1a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	3330      	adds	r3, #48	@ 0x30
 8006b8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b92:	2100      	movs	r1, #0
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7ff faff 	bl	8006198 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	613b      	str	r3, [r7, #16]
 8006b9e:	6979      	ldr	r1, [r7, #20]
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f7ff fcb6 	bl	8006512 <clust2sect>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006bac:	e012      	b.n	8006bd4 <dir_next+0x13c>
						fs->wflag = 1;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f7ff fc3b 	bl	8006430 <sync_window>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d001      	beq.n	8006bc4 <dir_next+0x12c>
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e02a      	b.n	8006c1a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	613b      	str	r3, [r7, #16]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bce:	1c5a      	adds	r2, r3, #1
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	895b      	ldrh	r3, [r3, #10]
 8006bd8:	461a      	mov	r2, r3
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d3e6      	bcc.n	8006bae <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	1ad2      	subs	r2, r2, r3
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	697a      	ldr	r2, [r7, #20]
 8006bf0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006bf2:	6979      	ldr	r1, [r7, #20]
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f7ff fc8c 	bl	8006512 <clust2sect>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	68ba      	ldr	r2, [r7, #8]
 8006c04:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c12:	441a      	add	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3718      	adds	r7, #24
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b084      	sub	sp, #16
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
 8006c2a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	331a      	adds	r3, #26
 8006c30:	4618      	mov	r0, r3
 8006c32:	f7ff fa2f 	bl	8006094 <ld_word>
 8006c36:	4603      	mov	r3, r0
 8006c38:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	2b03      	cmp	r3, #3
 8006c40:	d109      	bne.n	8006c56 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	3314      	adds	r3, #20
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7ff fa24 	bl	8006094 <ld_word>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	041b      	lsls	r3, r3, #16
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006c56:	68fb      	ldr	r3, [r7, #12]
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3710      	adds	r7, #16
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b086      	sub	sp, #24
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8006c6a:	2304      	movs	r3, #4
 8006c6c:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8006c74:	e03c      	b.n	8006cf0 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	69db      	ldr	r3, [r3, #28]
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	6938      	ldr	r0, [r7, #16]
 8006c7e:	f7ff fc1b 	bl	80064b8 <move_window>
 8006c82:	4603      	mov	r3, r0
 8006c84:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006c86:	7dfb      	ldrb	r3, [r7, #23]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d136      	bne.n	8006cfa <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a1b      	ldr	r3, [r3, #32]
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8006c94:	7bfb      	ldrb	r3, [r7, #15]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d102      	bne.n	8006ca0 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8006c9a:	2304      	movs	r3, #4
 8006c9c:	75fb      	strb	r3, [r7, #23]
 8006c9e:	e031      	b.n	8006d04 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6a1b      	ldr	r3, [r3, #32]
 8006ca4:	330b      	adds	r3, #11
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006cac:	73bb      	strb	r3, [r7, #14]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	7bba      	ldrb	r2, [r7, #14]
 8006cb2:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8006cb4:	7bfb      	ldrb	r3, [r7, #15]
 8006cb6:	2be5      	cmp	r3, #229	@ 0xe5
 8006cb8:	d011      	beq.n	8006cde <dir_read+0x7e>
 8006cba:	7bfb      	ldrb	r3, [r7, #15]
 8006cbc:	2b2e      	cmp	r3, #46	@ 0x2e
 8006cbe:	d00e      	beq.n	8006cde <dir_read+0x7e>
 8006cc0:	7bbb      	ldrb	r3, [r7, #14]
 8006cc2:	2b0f      	cmp	r3, #15
 8006cc4:	d00b      	beq.n	8006cde <dir_read+0x7e>
 8006cc6:	7bbb      	ldrb	r3, [r7, #14]
 8006cc8:	f023 0320 	bic.w	r3, r3, #32
 8006ccc:	2b08      	cmp	r3, #8
 8006cce:	bf0c      	ite	eq
 8006cd0:	2301      	moveq	r3, #1
 8006cd2:	2300      	movne	r3, #0
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d00f      	beq.n	8006cfe <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8006cde:	2100      	movs	r1, #0
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f7ff fed9 	bl	8006a98 <dir_next>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006cea:	7dfb      	ldrb	r3, [r7, #23]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d108      	bne.n	8006d02 <dir_read+0xa2>
	while (dp->sect) {
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	69db      	ldr	r3, [r3, #28]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1be      	bne.n	8006c76 <dir_read+0x16>
 8006cf8:	e004      	b.n	8006d04 <dir_read+0xa4>
		if (res != FR_OK) break;
 8006cfa:	bf00      	nop
 8006cfc:	e002      	b.n	8006d04 <dir_read+0xa4>
				break;
 8006cfe:	bf00      	nop
 8006d00:	e000      	b.n	8006d04 <dir_read+0xa4>
		if (res != FR_OK) break;
 8006d02:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8006d04:	7dfb      	ldrb	r3, [r7, #23]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d002      	beq.n	8006d10 <dir_read+0xb0>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	61da      	str	r2, [r3, #28]
	return res;
 8006d10:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3718      	adds	r7, #24
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b086      	sub	sp, #24
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006d28:	2100      	movs	r1, #0
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f7ff fe39 	bl	80069a2 <dir_sdi>
 8006d30:	4603      	mov	r3, r0
 8006d32:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006d34:	7dfb      	ldrb	r3, [r7, #23]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d001      	beq.n	8006d3e <dir_find+0x24>
 8006d3a:	7dfb      	ldrb	r3, [r7, #23]
 8006d3c:	e03e      	b.n	8006dbc <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	69db      	ldr	r3, [r3, #28]
 8006d42:	4619      	mov	r1, r3
 8006d44:	6938      	ldr	r0, [r7, #16]
 8006d46:	f7ff fbb7 	bl	80064b8 <move_window>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006d4e:	7dfb      	ldrb	r3, [r7, #23]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d12f      	bne.n	8006db4 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6a1b      	ldr	r3, [r3, #32]
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006d5c:	7bfb      	ldrb	r3, [r7, #15]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d102      	bne.n	8006d68 <dir_find+0x4e>
 8006d62:	2304      	movs	r3, #4
 8006d64:	75fb      	strb	r3, [r7, #23]
 8006d66:	e028      	b.n	8006dba <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a1b      	ldr	r3, [r3, #32]
 8006d6c:	330b      	adds	r3, #11
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d74:	b2da      	uxtb	r2, r3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a1b      	ldr	r3, [r3, #32]
 8006d7e:	330b      	adds	r3, #11
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	f003 0308 	and.w	r3, r3, #8
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d10a      	bne.n	8006da0 <dir_find+0x86>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a18      	ldr	r0, [r3, #32]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	3324      	adds	r3, #36	@ 0x24
 8006d92:	220b      	movs	r2, #11
 8006d94:	4619      	mov	r1, r3
 8006d96:	f7ff fa1a 	bl	80061ce <mem_cmp>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00b      	beq.n	8006db8 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006da0:	2100      	movs	r1, #0
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f7ff fe78 	bl	8006a98 <dir_next>
 8006da8:	4603      	mov	r3, r0
 8006daa:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006dac:	7dfb      	ldrb	r3, [r7, #23]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d0c5      	beq.n	8006d3e <dir_find+0x24>
 8006db2:	e002      	b.n	8006dba <dir_find+0xa0>
		if (res != FR_OK) break;
 8006db4:	bf00      	nop
 8006db6:	e000      	b.n	8006dba <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006db8:	bf00      	nop

	return res;
 8006dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3718      	adds	r7, #24
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b086      	sub	sp, #24
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	69db      	ldr	r3, [r3, #28]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d04f      	beq.n	8006e7c <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	613b      	str	r3, [r7, #16]
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8006de4:	e022      	b.n	8006e2c <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a1a      	ldr	r2, [r3, #32]
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	1c59      	adds	r1, r3, #1
 8006dee:	6179      	str	r1, [r7, #20]
 8006df0:	4413      	add	r3, r2
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8006df6:	7bfb      	ldrb	r3, [r7, #15]
 8006df8:	2b20      	cmp	r3, #32
 8006dfa:	d016      	beq.n	8006e2a <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8006dfc:	7bfb      	ldrb	r3, [r7, #15]
 8006dfe:	2b05      	cmp	r3, #5
 8006e00:	d101      	bne.n	8006e06 <get_fileinfo+0x42>
 8006e02:	23e5      	movs	r3, #229	@ 0xe5
 8006e04:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	2b09      	cmp	r3, #9
 8006e0a:	d106      	bne.n	8006e1a <get_fileinfo+0x56>
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	1c5a      	adds	r2, r3, #1
 8006e10:	613a      	str	r2, [r7, #16]
 8006e12:	683a      	ldr	r2, [r7, #0]
 8006e14:	4413      	add	r3, r2
 8006e16:	222e      	movs	r2, #46	@ 0x2e
 8006e18:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	1c5a      	adds	r2, r3, #1
 8006e1e:	613a      	str	r2, [r7, #16]
 8006e20:	683a      	ldr	r2, [r7, #0]
 8006e22:	4413      	add	r3, r2
 8006e24:	7bfa      	ldrb	r2, [r7, #15]
 8006e26:	725a      	strb	r2, [r3, #9]
 8006e28:	e000      	b.n	8006e2c <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 8006e2a:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	2b0a      	cmp	r3, #10
 8006e30:	d9d9      	bls.n	8006de6 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8006e32:	683a      	ldr	r2, [r7, #0]
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	4413      	add	r3, r2
 8006e38:	3309      	adds	r3, #9
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a1b      	ldr	r3, [r3, #32]
 8006e42:	7ada      	ldrb	r2, [r3, #11]
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6a1b      	ldr	r3, [r3, #32]
 8006e4c:	331c      	adds	r3, #28
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f7ff f938 	bl	80060c4 <ld_dword>
 8006e54:	4602      	mov	r2, r0
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a1b      	ldr	r3, [r3, #32]
 8006e5e:	3316      	adds	r3, #22
 8006e60:	4618      	mov	r0, r3
 8006e62:	f7ff f92f 	bl	80060c4 <ld_dword>
 8006e66:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	80da      	strh	r2, [r3, #6]
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	0c1b      	lsrs	r3, r3, #16
 8006e74:	b29a      	uxth	r2, r3
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	809a      	strh	r2, [r3, #4]
 8006e7a:	e000      	b.n	8006e7e <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006e7c:	bf00      	nop
}
 8006e7e:	3718      	adds	r7, #24
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b088      	sub	sp, #32
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	60fb      	str	r3, [r7, #12]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	3324      	adds	r3, #36	@ 0x24
 8006e98:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006e9a:	220b      	movs	r2, #11
 8006e9c:	2120      	movs	r1, #32
 8006e9e:	68b8      	ldr	r0, [r7, #8]
 8006ea0:	f7ff f97a 	bl	8006198 <mem_set>
	si = i = 0; ni = 8;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	613b      	str	r3, [r7, #16]
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	61fb      	str	r3, [r7, #28]
 8006eac:	2308      	movs	r3, #8
 8006eae:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	1c5a      	adds	r2, r3, #1
 8006eb4:	61fa      	str	r2, [r7, #28]
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	4413      	add	r3, r2
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006ebe:	7efb      	ldrb	r3, [r7, #27]
 8006ec0:	2b20      	cmp	r3, #32
 8006ec2:	d94e      	bls.n	8006f62 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006ec4:	7efb      	ldrb	r3, [r7, #27]
 8006ec6:	2b2f      	cmp	r3, #47	@ 0x2f
 8006ec8:	d006      	beq.n	8006ed8 <create_name+0x54>
 8006eca:	7efb      	ldrb	r3, [r7, #27]
 8006ecc:	2b5c      	cmp	r3, #92	@ 0x5c
 8006ece:	d110      	bne.n	8006ef2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006ed0:	e002      	b.n	8006ed8 <create_name+0x54>
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	61fb      	str	r3, [r7, #28]
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	4413      	add	r3, r2
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	2b2f      	cmp	r3, #47	@ 0x2f
 8006ee2:	d0f6      	beq.n	8006ed2 <create_name+0x4e>
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	4413      	add	r3, r2
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	2b5c      	cmp	r3, #92	@ 0x5c
 8006eee:	d0f0      	beq.n	8006ed2 <create_name+0x4e>
			break;
 8006ef0:	e038      	b.n	8006f64 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006ef2:	7efb      	ldrb	r3, [r7, #27]
 8006ef4:	2b2e      	cmp	r3, #46	@ 0x2e
 8006ef6:	d003      	beq.n	8006f00 <create_name+0x7c>
 8006ef8:	693a      	ldr	r2, [r7, #16]
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d30c      	bcc.n	8006f1a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	2b0b      	cmp	r3, #11
 8006f04:	d002      	beq.n	8006f0c <create_name+0x88>
 8006f06:	7efb      	ldrb	r3, [r7, #27]
 8006f08:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f0a:	d001      	beq.n	8006f10 <create_name+0x8c>
 8006f0c:	2306      	movs	r3, #6
 8006f0e:	e044      	b.n	8006f9a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006f10:	2308      	movs	r3, #8
 8006f12:	613b      	str	r3, [r7, #16]
 8006f14:	230b      	movs	r3, #11
 8006f16:	617b      	str	r3, [r7, #20]
			continue;
 8006f18:	e022      	b.n	8006f60 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006f1a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	da04      	bge.n	8006f2c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006f22:	7efb      	ldrb	r3, [r7, #27]
 8006f24:	3b80      	subs	r3, #128	@ 0x80
 8006f26:	4a1f      	ldr	r2, [pc, #124]	@ (8006fa4 <create_name+0x120>)
 8006f28:	5cd3      	ldrb	r3, [r2, r3]
 8006f2a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006f2c:	7efb      	ldrb	r3, [r7, #27]
 8006f2e:	4619      	mov	r1, r3
 8006f30:	481d      	ldr	r0, [pc, #116]	@ (8006fa8 <create_name+0x124>)
 8006f32:	f7ff f973 	bl	800621c <chk_chr>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d001      	beq.n	8006f40 <create_name+0xbc>
 8006f3c:	2306      	movs	r3, #6
 8006f3e:	e02c      	b.n	8006f9a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006f40:	7efb      	ldrb	r3, [r7, #27]
 8006f42:	2b60      	cmp	r3, #96	@ 0x60
 8006f44:	d905      	bls.n	8006f52 <create_name+0xce>
 8006f46:	7efb      	ldrb	r3, [r7, #27]
 8006f48:	2b7a      	cmp	r3, #122	@ 0x7a
 8006f4a:	d802      	bhi.n	8006f52 <create_name+0xce>
 8006f4c:	7efb      	ldrb	r3, [r7, #27]
 8006f4e:	3b20      	subs	r3, #32
 8006f50:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	1c5a      	adds	r2, r3, #1
 8006f56:	613a      	str	r2, [r7, #16]
 8006f58:	68ba      	ldr	r2, [r7, #8]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	7efa      	ldrb	r2, [r7, #27]
 8006f5e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006f60:	e7a6      	b.n	8006eb0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006f62:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006f64:	68fa      	ldr	r2, [r7, #12]
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	441a      	add	r2, r3
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d101      	bne.n	8006f78 <create_name+0xf4>
 8006f74:	2306      	movs	r3, #6
 8006f76:	e010      	b.n	8006f9a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	2be5      	cmp	r3, #229	@ 0xe5
 8006f7e:	d102      	bne.n	8006f86 <create_name+0x102>
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	2205      	movs	r2, #5
 8006f84:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006f86:	7efb      	ldrb	r3, [r7, #27]
 8006f88:	2b20      	cmp	r3, #32
 8006f8a:	d801      	bhi.n	8006f90 <create_name+0x10c>
 8006f8c:	2204      	movs	r2, #4
 8006f8e:	e000      	b.n	8006f92 <create_name+0x10e>
 8006f90:	2200      	movs	r2, #0
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	330b      	adds	r3, #11
 8006f96:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006f98:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3720      	adds	r7, #32
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	080083d0 	.word	0x080083d0
 8006fa8:	08008360 	.word	0x08008360

08006fac <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b086      	sub	sp, #24
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006fc0:	e002      	b.n	8006fc8 <follow_path+0x1c>
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	603b      	str	r3, [r7, #0]
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	2b2f      	cmp	r3, #47	@ 0x2f
 8006fce:	d0f8      	beq.n	8006fc2 <follow_path+0x16>
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	2b5c      	cmp	r3, #92	@ 0x5c
 8006fd6:	d0f4      	beq.n	8006fc2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	2b1f      	cmp	r3, #31
 8006fe4:	d80a      	bhi.n	8006ffc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2280      	movs	r2, #128	@ 0x80
 8006fea:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8006fee:	2100      	movs	r1, #0
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f7ff fcd6 	bl	80069a2 <dir_sdi>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	75fb      	strb	r3, [r7, #23]
 8006ffa:	e043      	b.n	8007084 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006ffc:	463b      	mov	r3, r7
 8006ffe:	4619      	mov	r1, r3
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f7ff ff3f 	bl	8006e84 <create_name>
 8007006:	4603      	mov	r3, r0
 8007008:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800700a:	7dfb      	ldrb	r3, [r7, #23]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d134      	bne.n	800707a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f7ff fe82 	bl	8006d1a <dir_find>
 8007016:	4603      	mov	r3, r0
 8007018:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007020:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007022:	7dfb      	ldrb	r3, [r7, #23]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00a      	beq.n	800703e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007028:	7dfb      	ldrb	r3, [r7, #23]
 800702a:	2b04      	cmp	r3, #4
 800702c:	d127      	bne.n	800707e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800702e:	7afb      	ldrb	r3, [r7, #11]
 8007030:	f003 0304 	and.w	r3, r3, #4
 8007034:	2b00      	cmp	r3, #0
 8007036:	d122      	bne.n	800707e <follow_path+0xd2>
 8007038:	2305      	movs	r3, #5
 800703a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800703c:	e01f      	b.n	800707e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800703e:	7afb      	ldrb	r3, [r7, #11]
 8007040:	f003 0304 	and.w	r3, r3, #4
 8007044:	2b00      	cmp	r3, #0
 8007046:	d11c      	bne.n	8007082 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	799b      	ldrb	r3, [r3, #6]
 800704c:	f003 0310 	and.w	r3, r3, #16
 8007050:	2b00      	cmp	r3, #0
 8007052:	d102      	bne.n	800705a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007054:	2305      	movs	r3, #5
 8007056:	75fb      	strb	r3, [r7, #23]
 8007058:	e014      	b.n	8007084 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	695b      	ldr	r3, [r3, #20]
 8007064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007068:	4413      	add	r3, r2
 800706a:	4619      	mov	r1, r3
 800706c:	68f8      	ldr	r0, [r7, #12]
 800706e:	f7ff fdd8 	bl	8006c22 <ld_clust>
 8007072:	4602      	mov	r2, r0
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007078:	e7c0      	b.n	8006ffc <follow_path+0x50>
			if (res != FR_OK) break;
 800707a:	bf00      	nop
 800707c:	e002      	b.n	8007084 <follow_path+0xd8>
				break;
 800707e:	bf00      	nop
 8007080:	e000      	b.n	8007084 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007082:	bf00      	nop
			}
		}
	}

	return res;
 8007084:	7dfb      	ldrb	r3, [r7, #23]
}
 8007086:	4618      	mov	r0, r3
 8007088:	3718      	adds	r7, #24
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800708e:	b480      	push	{r7}
 8007090:	b087      	sub	sp, #28
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007096:	f04f 33ff 	mov.w	r3, #4294967295
 800709a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d031      	beq.n	8007108 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	617b      	str	r3, [r7, #20]
 80070aa:	e002      	b.n	80070b2 <get_ldnumber+0x24>
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	3301      	adds	r3, #1
 80070b0:	617b      	str	r3, [r7, #20]
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	2b20      	cmp	r3, #32
 80070b8:	d903      	bls.n	80070c2 <get_ldnumber+0x34>
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	2b3a      	cmp	r3, #58	@ 0x3a
 80070c0:	d1f4      	bne.n	80070ac <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	2b3a      	cmp	r3, #58	@ 0x3a
 80070c8:	d11c      	bne.n	8007104 <get_ldnumber+0x76>
			tp = *path;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	1c5a      	adds	r2, r3, #1
 80070d4:	60fa      	str	r2, [r7, #12]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	3b30      	subs	r3, #48	@ 0x30
 80070da:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	2b09      	cmp	r3, #9
 80070e0:	d80e      	bhi.n	8007100 <get_ldnumber+0x72>
 80070e2:	68fa      	ldr	r2, [r7, #12]
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d10a      	bne.n	8007100 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d107      	bne.n	8007100 <get_ldnumber+0x72>
					vol = (int)i;
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	3301      	adds	r3, #1
 80070f8:	617b      	str	r3, [r7, #20]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	697a      	ldr	r2, [r7, #20]
 80070fe:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	e002      	b.n	800710a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007104:	2300      	movs	r3, #0
 8007106:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007108:	693b      	ldr	r3, [r7, #16]
}
 800710a:	4618      	mov	r0, r3
 800710c:	371c      	adds	r7, #28
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr
	...

08007118 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	70da      	strb	r2, [r3, #3]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f04f 32ff 	mov.w	r2, #4294967295
 800712e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007130:	6839      	ldr	r1, [r7, #0]
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f7ff f9c0 	bl	80064b8 <move_window>
 8007138:	4603      	mov	r3, r0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d001      	beq.n	8007142 <check_fs+0x2a>
 800713e:	2304      	movs	r3, #4
 8007140:	e038      	b.n	80071b4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	3330      	adds	r3, #48	@ 0x30
 8007146:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800714a:	4618      	mov	r0, r3
 800714c:	f7fe ffa2 	bl	8006094 <ld_word>
 8007150:	4603      	mov	r3, r0
 8007152:	461a      	mov	r2, r3
 8007154:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007158:	429a      	cmp	r2, r3
 800715a:	d001      	beq.n	8007160 <check_fs+0x48>
 800715c:	2303      	movs	r3, #3
 800715e:	e029      	b.n	80071b4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007166:	2be9      	cmp	r3, #233	@ 0xe9
 8007168:	d009      	beq.n	800717e <check_fs+0x66>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007170:	2beb      	cmp	r3, #235	@ 0xeb
 8007172:	d11e      	bne.n	80071b2 <check_fs+0x9a>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800717a:	2b90      	cmp	r3, #144	@ 0x90
 800717c:	d119      	bne.n	80071b2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	3330      	adds	r3, #48	@ 0x30
 8007182:	3336      	adds	r3, #54	@ 0x36
 8007184:	4618      	mov	r0, r3
 8007186:	f7fe ff9d 	bl	80060c4 <ld_dword>
 800718a:	4603      	mov	r3, r0
 800718c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007190:	4a0a      	ldr	r2, [pc, #40]	@ (80071bc <check_fs+0xa4>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d101      	bne.n	800719a <check_fs+0x82>
 8007196:	2300      	movs	r3, #0
 8007198:	e00c      	b.n	80071b4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	3330      	adds	r3, #48	@ 0x30
 800719e:	3352      	adds	r3, #82	@ 0x52
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7fe ff8f 	bl	80060c4 <ld_dword>
 80071a6:	4603      	mov	r3, r0
 80071a8:	4a05      	ldr	r2, [pc, #20]	@ (80071c0 <check_fs+0xa8>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d101      	bne.n	80071b2 <check_fs+0x9a>
 80071ae:	2300      	movs	r3, #0
 80071b0:	e000      	b.n	80071b4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80071b2:	2302      	movs	r3, #2
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3708      	adds	r7, #8
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	00544146 	.word	0x00544146
 80071c0:	33544146 	.word	0x33544146

080071c4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b096      	sub	sp, #88	@ 0x58
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	4613      	mov	r3, r2
 80071d0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	2200      	movs	r2, #0
 80071d6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	f7ff ff58 	bl	800708e <get_ldnumber>
 80071de:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80071e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	da01      	bge.n	80071ea <find_volume+0x26>
 80071e6:	230b      	movs	r3, #11
 80071e8:	e22d      	b.n	8007646 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80071ea:	4aa1      	ldr	r2, [pc, #644]	@ (8007470 <find_volume+0x2ac>)
 80071ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071f2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80071f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d101      	bne.n	80071fe <find_volume+0x3a>
 80071fa:	230c      	movs	r3, #12
 80071fc:	e223      	b.n	8007646 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007202:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007204:	79fb      	ldrb	r3, [r7, #7]
 8007206:	f023 0301 	bic.w	r3, r3, #1
 800720a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800720c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d01a      	beq.n	800724a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007216:	785b      	ldrb	r3, [r3, #1]
 8007218:	4618      	mov	r0, r3
 800721a:	f7fe febb 	bl	8005f94 <disk_status>
 800721e:	4603      	mov	r3, r0
 8007220:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007224:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007228:	f003 0301 	and.w	r3, r3, #1
 800722c:	2b00      	cmp	r3, #0
 800722e:	d10c      	bne.n	800724a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007230:	79fb      	ldrb	r3, [r7, #7]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d007      	beq.n	8007246 <find_volume+0x82>
 8007236:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800723a:	f003 0304 	and.w	r3, r3, #4
 800723e:	2b00      	cmp	r3, #0
 8007240:	d001      	beq.n	8007246 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007242:	230a      	movs	r3, #10
 8007244:	e1ff      	b.n	8007646 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8007246:	2300      	movs	r3, #0
 8007248:	e1fd      	b.n	8007646 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800724a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800724c:	2200      	movs	r2, #0
 800724e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007250:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007252:	b2da      	uxtb	r2, r3
 8007254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007256:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800725a:	785b      	ldrb	r3, [r3, #1]
 800725c:	4618      	mov	r0, r3
 800725e:	f7fe feb3 	bl	8005fc8 <disk_initialize>
 8007262:	4603      	mov	r3, r0
 8007264:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007268:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800726c:	f003 0301 	and.w	r3, r3, #1
 8007270:	2b00      	cmp	r3, #0
 8007272:	d001      	beq.n	8007278 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007274:	2303      	movs	r3, #3
 8007276:	e1e6      	b.n	8007646 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007278:	79fb      	ldrb	r3, [r7, #7]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d007      	beq.n	800728e <find_volume+0xca>
 800727e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007282:	f003 0304 	and.w	r3, r3, #4
 8007286:	2b00      	cmp	r3, #0
 8007288:	d001      	beq.n	800728e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800728a:	230a      	movs	r3, #10
 800728c:	e1db      	b.n	8007646 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800728e:	2300      	movs	r3, #0
 8007290:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007292:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007294:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007296:	f7ff ff3f 	bl	8007118 <check_fs>
 800729a:	4603      	mov	r3, r0
 800729c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80072a0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	d149      	bne.n	800733c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80072a8:	2300      	movs	r3, #0
 80072aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80072ac:	e01e      	b.n	80072ec <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80072ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072b0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80072b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072b6:	011b      	lsls	r3, r3, #4
 80072b8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80072bc:	4413      	add	r3, r2
 80072be:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80072c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c2:	3304      	adds	r3, #4
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d006      	beq.n	80072d8 <find_volume+0x114>
 80072ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072cc:	3308      	adds	r3, #8
 80072ce:	4618      	mov	r0, r3
 80072d0:	f7fe fef8 	bl	80060c4 <ld_dword>
 80072d4:	4602      	mov	r2, r0
 80072d6:	e000      	b.n	80072da <find_volume+0x116>
 80072d8:	2200      	movs	r2, #0
 80072da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	3358      	adds	r3, #88	@ 0x58
 80072e0:	443b      	add	r3, r7
 80072e2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80072e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072e8:	3301      	adds	r3, #1
 80072ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80072ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072ee:	2b03      	cmp	r3, #3
 80072f0:	d9dd      	bls.n	80072ae <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80072f2:	2300      	movs	r3, #0
 80072f4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80072f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d002      	beq.n	8007302 <find_volume+0x13e>
 80072fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072fe:	3b01      	subs	r3, #1
 8007300:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007302:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	3358      	adds	r3, #88	@ 0x58
 8007308:	443b      	add	r3, r7
 800730a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800730e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007310:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007312:	2b00      	cmp	r3, #0
 8007314:	d005      	beq.n	8007322 <find_volume+0x15e>
 8007316:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007318:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800731a:	f7ff fefd 	bl	8007118 <check_fs>
 800731e:	4603      	mov	r3, r0
 8007320:	e000      	b.n	8007324 <find_volume+0x160>
 8007322:	2303      	movs	r3, #3
 8007324:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007328:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800732c:	2b01      	cmp	r3, #1
 800732e:	d905      	bls.n	800733c <find_volume+0x178>
 8007330:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007332:	3301      	adds	r3, #1
 8007334:	643b      	str	r3, [r7, #64]	@ 0x40
 8007336:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007338:	2b03      	cmp	r3, #3
 800733a:	d9e2      	bls.n	8007302 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800733c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007340:	2b04      	cmp	r3, #4
 8007342:	d101      	bne.n	8007348 <find_volume+0x184>
 8007344:	2301      	movs	r3, #1
 8007346:	e17e      	b.n	8007646 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007348:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800734c:	2b01      	cmp	r3, #1
 800734e:	d901      	bls.n	8007354 <find_volume+0x190>
 8007350:	230d      	movs	r3, #13
 8007352:	e178      	b.n	8007646 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007356:	3330      	adds	r3, #48	@ 0x30
 8007358:	330b      	adds	r3, #11
 800735a:	4618      	mov	r0, r3
 800735c:	f7fe fe9a 	bl	8006094 <ld_word>
 8007360:	4603      	mov	r3, r0
 8007362:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007366:	d001      	beq.n	800736c <find_volume+0x1a8>
 8007368:	230d      	movs	r3, #13
 800736a:	e16c      	b.n	8007646 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800736c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800736e:	3330      	adds	r3, #48	@ 0x30
 8007370:	3316      	adds	r3, #22
 8007372:	4618      	mov	r0, r3
 8007374:	f7fe fe8e 	bl	8006094 <ld_word>
 8007378:	4603      	mov	r3, r0
 800737a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800737c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800737e:	2b00      	cmp	r3, #0
 8007380:	d106      	bne.n	8007390 <find_volume+0x1cc>
 8007382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007384:	3330      	adds	r3, #48	@ 0x30
 8007386:	3324      	adds	r3, #36	@ 0x24
 8007388:	4618      	mov	r0, r3
 800738a:	f7fe fe9b 	bl	80060c4 <ld_dword>
 800738e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8007390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007392:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007394:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007398:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800739c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800739e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80073a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073a2:	789b      	ldrb	r3, [r3, #2]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d005      	beq.n	80073b4 <find_volume+0x1f0>
 80073a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073aa:	789b      	ldrb	r3, [r3, #2]
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	d001      	beq.n	80073b4 <find_volume+0x1f0>
 80073b0:	230d      	movs	r3, #13
 80073b2:	e148      	b.n	8007646 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80073b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b6:	789b      	ldrb	r3, [r3, #2]
 80073b8:	461a      	mov	r2, r3
 80073ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073bc:	fb02 f303 	mul.w	r3, r2, r3
 80073c0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80073c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073c8:	461a      	mov	r2, r3
 80073ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073cc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80073ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073d0:	895b      	ldrh	r3, [r3, #10]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d008      	beq.n	80073e8 <find_volume+0x224>
 80073d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073d8:	895b      	ldrh	r3, [r3, #10]
 80073da:	461a      	mov	r2, r3
 80073dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073de:	895b      	ldrh	r3, [r3, #10]
 80073e0:	3b01      	subs	r3, #1
 80073e2:	4013      	ands	r3, r2
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d001      	beq.n	80073ec <find_volume+0x228>
 80073e8:	230d      	movs	r3, #13
 80073ea:	e12c      	b.n	8007646 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80073ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ee:	3330      	adds	r3, #48	@ 0x30
 80073f0:	3311      	adds	r3, #17
 80073f2:	4618      	mov	r0, r3
 80073f4:	f7fe fe4e 	bl	8006094 <ld_word>
 80073f8:	4603      	mov	r3, r0
 80073fa:	461a      	mov	r2, r3
 80073fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073fe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007402:	891b      	ldrh	r3, [r3, #8]
 8007404:	f003 030f 	and.w	r3, r3, #15
 8007408:	b29b      	uxth	r3, r3
 800740a:	2b00      	cmp	r3, #0
 800740c:	d001      	beq.n	8007412 <find_volume+0x24e>
 800740e:	230d      	movs	r3, #13
 8007410:	e119      	b.n	8007646 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007414:	3330      	adds	r3, #48	@ 0x30
 8007416:	3313      	adds	r3, #19
 8007418:	4618      	mov	r0, r3
 800741a:	f7fe fe3b 	bl	8006094 <ld_word>
 800741e:	4603      	mov	r3, r0
 8007420:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007422:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007424:	2b00      	cmp	r3, #0
 8007426:	d106      	bne.n	8007436 <find_volume+0x272>
 8007428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800742a:	3330      	adds	r3, #48	@ 0x30
 800742c:	3320      	adds	r3, #32
 800742e:	4618      	mov	r0, r3
 8007430:	f7fe fe48 	bl	80060c4 <ld_dword>
 8007434:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007438:	3330      	adds	r3, #48	@ 0x30
 800743a:	330e      	adds	r3, #14
 800743c:	4618      	mov	r0, r3
 800743e:	f7fe fe29 	bl	8006094 <ld_word>
 8007442:	4603      	mov	r3, r0
 8007444:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007446:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007448:	2b00      	cmp	r3, #0
 800744a:	d101      	bne.n	8007450 <find_volume+0x28c>
 800744c:	230d      	movs	r3, #13
 800744e:	e0fa      	b.n	8007646 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007450:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007452:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007454:	4413      	add	r3, r2
 8007456:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007458:	8912      	ldrh	r2, [r2, #8]
 800745a:	0912      	lsrs	r2, r2, #4
 800745c:	b292      	uxth	r2, r2
 800745e:	4413      	add	r3, r2
 8007460:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007462:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007466:	429a      	cmp	r2, r3
 8007468:	d204      	bcs.n	8007474 <find_volume+0x2b0>
 800746a:	230d      	movs	r3, #13
 800746c:	e0eb      	b.n	8007646 <find_volume+0x482>
 800746e:	bf00      	nop
 8007470:	200004ec 	.word	0x200004ec
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007474:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007478:	1ad3      	subs	r3, r2, r3
 800747a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800747c:	8952      	ldrh	r2, [r2, #10]
 800747e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007482:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007486:	2b00      	cmp	r3, #0
 8007488:	d101      	bne.n	800748e <find_volume+0x2ca>
 800748a:	230d      	movs	r3, #13
 800748c:	e0db      	b.n	8007646 <find_volume+0x482>
		fmt = FS_FAT32;
 800748e:	2303      	movs	r3, #3
 8007490:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007496:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800749a:	4293      	cmp	r3, r2
 800749c:	d802      	bhi.n	80074a4 <find_volume+0x2e0>
 800749e:	2302      	movs	r3, #2
 80074a0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80074a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d802      	bhi.n	80074b4 <find_volume+0x2f0>
 80074ae:	2301      	movs	r3, #1
 80074b0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80074b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074b6:	1c9a      	adds	r2, r3, #2
 80074b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ba:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80074bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074be:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80074c0:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80074c2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80074c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074c6:	441a      	add	r2, r3
 80074c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ca:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80074cc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80074ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074d0:	441a      	add	r2, r3
 80074d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074d4:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 80074d6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80074da:	2b03      	cmp	r3, #3
 80074dc:	d11e      	bne.n	800751c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80074de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074e0:	3330      	adds	r3, #48	@ 0x30
 80074e2:	332a      	adds	r3, #42	@ 0x2a
 80074e4:	4618      	mov	r0, r3
 80074e6:	f7fe fdd5 	bl	8006094 <ld_word>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d001      	beq.n	80074f4 <find_volume+0x330>
 80074f0:	230d      	movs	r3, #13
 80074f2:	e0a8      	b.n	8007646 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80074f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074f6:	891b      	ldrh	r3, [r3, #8]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d001      	beq.n	8007500 <find_volume+0x33c>
 80074fc:	230d      	movs	r3, #13
 80074fe:	e0a2      	b.n	8007646 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007502:	3330      	adds	r3, #48	@ 0x30
 8007504:	332c      	adds	r3, #44	@ 0x2c
 8007506:	4618      	mov	r0, r3
 8007508:	f7fe fddc 	bl	80060c4 <ld_dword>
 800750c:	4602      	mov	r2, r0
 800750e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007510:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007514:	695b      	ldr	r3, [r3, #20]
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	647b      	str	r3, [r7, #68]	@ 0x44
 800751a:	e01f      	b.n	800755c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800751c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800751e:	891b      	ldrh	r3, [r3, #8]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d101      	bne.n	8007528 <find_volume+0x364>
 8007524:	230d      	movs	r3, #13
 8007526:	e08e      	b.n	8007646 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800752a:	6a1a      	ldr	r2, [r3, #32]
 800752c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800752e:	441a      	add	r2, r3
 8007530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007532:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007534:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007538:	2b02      	cmp	r3, #2
 800753a:	d103      	bne.n	8007544 <find_volume+0x380>
 800753c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800753e:	695b      	ldr	r3, [r3, #20]
 8007540:	005b      	lsls	r3, r3, #1
 8007542:	e00a      	b.n	800755a <find_volume+0x396>
 8007544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007546:	695a      	ldr	r2, [r3, #20]
 8007548:	4613      	mov	r3, r2
 800754a:	005b      	lsls	r3, r3, #1
 800754c:	4413      	add	r3, r2
 800754e:	085a      	lsrs	r2, r3, #1
 8007550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007552:	695b      	ldr	r3, [r3, #20]
 8007554:	f003 0301 	and.w	r3, r3, #1
 8007558:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800755a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800755c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800755e:	699a      	ldr	r2, [r3, #24]
 8007560:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007562:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8007566:	0a5b      	lsrs	r3, r3, #9
 8007568:	429a      	cmp	r2, r3
 800756a:	d201      	bcs.n	8007570 <find_volume+0x3ac>
 800756c:	230d      	movs	r3, #13
 800756e:	e06a      	b.n	8007646 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007572:	f04f 32ff 	mov.w	r2, #4294967295
 8007576:	611a      	str	r2, [r3, #16]
 8007578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800757a:	691a      	ldr	r2, [r3, #16]
 800757c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800757e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007582:	2280      	movs	r2, #128	@ 0x80
 8007584:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007586:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800758a:	2b03      	cmp	r3, #3
 800758c:	d149      	bne.n	8007622 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800758e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007590:	3330      	adds	r3, #48	@ 0x30
 8007592:	3330      	adds	r3, #48	@ 0x30
 8007594:	4618      	mov	r0, r3
 8007596:	f7fe fd7d 	bl	8006094 <ld_word>
 800759a:	4603      	mov	r3, r0
 800759c:	2b01      	cmp	r3, #1
 800759e:	d140      	bne.n	8007622 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80075a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075a2:	3301      	adds	r3, #1
 80075a4:	4619      	mov	r1, r3
 80075a6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80075a8:	f7fe ff86 	bl	80064b8 <move_window>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d137      	bne.n	8007622 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80075b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075b4:	2200      	movs	r2, #0
 80075b6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80075b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ba:	3330      	adds	r3, #48	@ 0x30
 80075bc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80075c0:	4618      	mov	r0, r3
 80075c2:	f7fe fd67 	bl	8006094 <ld_word>
 80075c6:	4603      	mov	r3, r0
 80075c8:	461a      	mov	r2, r3
 80075ca:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d127      	bne.n	8007622 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80075d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075d4:	3330      	adds	r3, #48	@ 0x30
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7fe fd74 	bl	80060c4 <ld_dword>
 80075dc:	4603      	mov	r3, r0
 80075de:	4a1c      	ldr	r2, [pc, #112]	@ (8007650 <find_volume+0x48c>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d11e      	bne.n	8007622 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80075e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e6:	3330      	adds	r3, #48	@ 0x30
 80075e8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7fe fd69 	bl	80060c4 <ld_dword>
 80075f2:	4603      	mov	r3, r0
 80075f4:	4a17      	ldr	r2, [pc, #92]	@ (8007654 <find_volume+0x490>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d113      	bne.n	8007622 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80075fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075fc:	3330      	adds	r3, #48	@ 0x30
 80075fe:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8007602:	4618      	mov	r0, r3
 8007604:	f7fe fd5e 	bl	80060c4 <ld_dword>
 8007608:	4602      	mov	r2, r0
 800760a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800760c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800760e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007610:	3330      	adds	r3, #48	@ 0x30
 8007612:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8007616:	4618      	mov	r0, r3
 8007618:	f7fe fd54 	bl	80060c4 <ld_dword>
 800761c:	4602      	mov	r2, r0
 800761e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007620:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007624:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8007628:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800762a:	4b0b      	ldr	r3, [pc, #44]	@ (8007658 <find_volume+0x494>)
 800762c:	881b      	ldrh	r3, [r3, #0]
 800762e:	3301      	adds	r3, #1
 8007630:	b29a      	uxth	r2, r3
 8007632:	4b09      	ldr	r3, [pc, #36]	@ (8007658 <find_volume+0x494>)
 8007634:	801a      	strh	r2, [r3, #0]
 8007636:	4b08      	ldr	r3, [pc, #32]	@ (8007658 <find_volume+0x494>)
 8007638:	881a      	ldrh	r2, [r3, #0]
 800763a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800763c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800763e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007640:	f7fe fed2 	bl	80063e8 <clear_lock>
#endif
	return FR_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	3758      	adds	r7, #88	@ 0x58
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	41615252 	.word	0x41615252
 8007654:	61417272 	.word	0x61417272
 8007658:	200004f0 	.word	0x200004f0

0800765c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007666:	2309      	movs	r3, #9
 8007668:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d01c      	beq.n	80076aa <validate+0x4e>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d018      	beq.n	80076aa <validate+0x4e>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d013      	beq.n	80076aa <validate+0x4e>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	889a      	ldrh	r2, [r3, #4]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	88db      	ldrh	r3, [r3, #6]
 800768c:	429a      	cmp	r2, r3
 800768e:	d10c      	bne.n	80076aa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	785b      	ldrb	r3, [r3, #1]
 8007696:	4618      	mov	r0, r3
 8007698:	f7fe fc7c 	bl	8005f94 <disk_status>
 800769c:	4603      	mov	r3, r0
 800769e:	f003 0301 	and.w	r3, r3, #1
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d101      	bne.n	80076aa <validate+0x4e>
			res = FR_OK;
 80076a6:	2300      	movs	r3, #0
 80076a8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80076aa:	7bfb      	ldrb	r3, [r7, #15]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d102      	bne.n	80076b6 <validate+0x5a>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	e000      	b.n	80076b8 <validate+0x5c>
 80076b6:	2300      	movs	r3, #0
 80076b8:	683a      	ldr	r2, [r7, #0]
 80076ba:	6013      	str	r3, [r2, #0]
	return res;
 80076bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
	...

080076c8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b088      	sub	sp, #32
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	60b9      	str	r1, [r7, #8]
 80076d2:	4613      	mov	r3, r2
 80076d4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80076da:	f107 0310 	add.w	r3, r7, #16
 80076de:	4618      	mov	r0, r3
 80076e0:	f7ff fcd5 	bl	800708e <get_ldnumber>
 80076e4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	da01      	bge.n	80076f0 <f_mount+0x28>
 80076ec:	230b      	movs	r3, #11
 80076ee:	e02b      	b.n	8007748 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80076f0:	4a17      	ldr	r2, [pc, #92]	@ (8007750 <f_mount+0x88>)
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076f8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d005      	beq.n	800770c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007700:	69b8      	ldr	r0, [r7, #24]
 8007702:	f7fe fe71 	bl	80063e8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007706:	69bb      	ldr	r3, [r7, #24]
 8007708:	2200      	movs	r2, #0
 800770a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d002      	beq.n	8007718 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2200      	movs	r2, #0
 8007716:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	490d      	ldr	r1, [pc, #52]	@ (8007750 <f_mount+0x88>)
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d002      	beq.n	800772e <f_mount+0x66>
 8007728:	79fb      	ldrb	r3, [r7, #7]
 800772a:	2b01      	cmp	r3, #1
 800772c:	d001      	beq.n	8007732 <f_mount+0x6a>
 800772e:	2300      	movs	r3, #0
 8007730:	e00a      	b.n	8007748 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007732:	f107 010c 	add.w	r1, r7, #12
 8007736:	f107 0308 	add.w	r3, r7, #8
 800773a:	2200      	movs	r2, #0
 800773c:	4618      	mov	r0, r3
 800773e:	f7ff fd41 	bl	80071c4 <find_volume>
 8007742:	4603      	mov	r3, r0
 8007744:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007746:	7dfb      	ldrb	r3, [r7, #23]
}
 8007748:	4618      	mov	r0, r3
 800774a:	3720      	adds	r7, #32
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}
 8007750:	200004ec 	.word	0x200004ec

08007754 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b086      	sub	sp, #24
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d101      	bne.n	8007768 <f_opendir+0x14>
 8007764:	2309      	movs	r3, #9
 8007766:	e064      	b.n	8007832 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800776c:	f107 010c 	add.w	r1, r7, #12
 8007770:	463b      	mov	r3, r7
 8007772:	2200      	movs	r2, #0
 8007774:	4618      	mov	r0, r3
 8007776:	f7ff fd25 	bl	80071c4 <find_volume>
 800777a:	4603      	mov	r3, r0
 800777c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800777e:	7dfb      	ldrb	r3, [r7, #23]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d14f      	bne.n	8007824 <f_opendir+0xd0>
		obj->fs = fs;
 8007784:	68fa      	ldr	r2, [r7, #12]
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	4619      	mov	r1, r3
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f7ff fc0c 	bl	8006fac <follow_path>
 8007794:	4603      	mov	r3, r0
 8007796:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8007798:	7dfb      	ldrb	r3, [r7, #23]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d13d      	bne.n	800781a <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80077a4:	b25b      	sxtb	r3, r3
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	db12      	blt.n	80077d0 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	799b      	ldrb	r3, [r3, #6]
 80077ae:	f003 0310 	and.w	r3, r3, #16
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00a      	beq.n	80077cc <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80077b6:	68fa      	ldr	r2, [r7, #12]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6a1b      	ldr	r3, [r3, #32]
 80077bc:	4619      	mov	r1, r3
 80077be:	4610      	mov	r0, r2
 80077c0:	f7ff fa2f 	bl	8006c22 <ld_clust>
 80077c4:	4602      	mov	r2, r0
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	609a      	str	r2, [r3, #8]
 80077ca:	e001      	b.n	80077d0 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80077cc:	2305      	movs	r3, #5
 80077ce:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80077d0:	7dfb      	ldrb	r3, [r7, #23]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d121      	bne.n	800781a <f_opendir+0xc6>
				obj->id = fs->id;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	88da      	ldrh	r2, [r3, #6]
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80077de:	2100      	movs	r1, #0
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f7ff f8de 	bl	80069a2 <dir_sdi>
 80077e6:	4603      	mov	r3, r0
 80077e8:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80077ea:	7dfb      	ldrb	r3, [r7, #23]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d114      	bne.n	800781a <f_opendir+0xc6>
					if (obj->sclust) {
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d00d      	beq.n	8007814 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80077f8:	2100      	movs	r1, #0
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f7fe fd2a 	bl	8006254 <inc_lock>
 8007800:	4602      	mov	r2, r0
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d105      	bne.n	800781a <f_opendir+0xc6>
 800780e:	2312      	movs	r3, #18
 8007810:	75fb      	strb	r3, [r7, #23]
 8007812:	e002      	b.n	800781a <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	2200      	movs	r2, #0
 8007818:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800781a:	7dfb      	ldrb	r3, [r7, #23]
 800781c:	2b04      	cmp	r3, #4
 800781e:	d101      	bne.n	8007824 <f_opendir+0xd0>
 8007820:	2305      	movs	r3, #5
 8007822:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8007824:	7dfb      	ldrb	r3, [r7, #23]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d002      	beq.n	8007830 <f_opendir+0xdc>
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	2200      	movs	r2, #0
 800782e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007830:	7dfb      	ldrb	r3, [r7, #23]
}
 8007832:	4618      	mov	r0, r3
 8007834:	3718      	adds	r7, #24
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800783a:	b580      	push	{r7, lr}
 800783c:	b084      	sub	sp, #16
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f107 0208 	add.w	r2, r7, #8
 8007848:	4611      	mov	r1, r2
 800784a:	4618      	mov	r0, r3
 800784c:	f7ff ff06 	bl	800765c <validate>
 8007850:	4603      	mov	r3, r0
 8007852:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007854:	7bfb      	ldrb	r3, [r7, #15]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d110      	bne.n	800787c <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	691b      	ldr	r3, [r3, #16]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d006      	beq.n	8007870 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	4618      	mov	r0, r3
 8007868:	f7fe fd82 	bl	8006370 <dec_lock>
 800786c:	4603      	mov	r3, r0
 800786e:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8007870:	7bfb      	ldrb	r3, [r7, #15]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d102      	bne.n	800787c <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800787c:	7bfb      	ldrb	r3, [r7, #15]
}
 800787e:	4618      	mov	r0, r3
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8007886:	b580      	push	{r7, lr}
 8007888:	b084      	sub	sp, #16
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
 800788e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f107 0208 	add.w	r2, r7, #8
 8007896:	4611      	mov	r1, r2
 8007898:	4618      	mov	r0, r3
 800789a:	f7ff fedf 	bl	800765c <validate>
 800789e:	4603      	mov	r3, r0
 80078a0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80078a2:	7bfb      	ldrb	r3, [r7, #15]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d126      	bne.n	80078f6 <f_readdir+0x70>
		if (!fno) {
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d106      	bne.n	80078bc <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80078ae:	2100      	movs	r1, #0
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f7ff f876 	bl	80069a2 <dir_sdi>
 80078b6:	4603      	mov	r3, r0
 80078b8:	73fb      	strb	r3, [r7, #15]
 80078ba:	e01c      	b.n	80078f6 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 80078bc:	2100      	movs	r1, #0
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f7ff f9ce 	bl	8006c60 <dir_read>
 80078c4:	4603      	mov	r3, r0
 80078c6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80078c8:	7bfb      	ldrb	r3, [r7, #15]
 80078ca:	2b04      	cmp	r3, #4
 80078cc:	d101      	bne.n	80078d2 <f_readdir+0x4c>
 80078ce:	2300      	movs	r3, #0
 80078d0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 80078d2:	7bfb      	ldrb	r3, [r7, #15]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d10e      	bne.n	80078f6 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 80078d8:	6839      	ldr	r1, [r7, #0]
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f7ff fa72 	bl	8006dc4 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80078e0:	2100      	movs	r1, #0
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f7ff f8d8 	bl	8006a98 <dir_next>
 80078e8:	4603      	mov	r3, r0
 80078ea:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80078ec:	7bfb      	ldrb	r3, [r7, #15]
 80078ee:	2b04      	cmp	r3, #4
 80078f0:	d101      	bne.n	80078f6 <f_readdir+0x70>
 80078f2:	2300      	movs	r3, #0
 80078f4:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80078f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3710      	adds	r7, #16
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007900:	b480      	push	{r7}
 8007902:	b087      	sub	sp, #28
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	4613      	mov	r3, r2
 800790c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800790e:	2301      	movs	r3, #1
 8007910:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007912:	2300      	movs	r3, #0
 8007914:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007916:	4b1f      	ldr	r3, [pc, #124]	@ (8007994 <FATFS_LinkDriverEx+0x94>)
 8007918:	7a5b      	ldrb	r3, [r3, #9]
 800791a:	b2db      	uxtb	r3, r3
 800791c:	2b00      	cmp	r3, #0
 800791e:	d131      	bne.n	8007984 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007920:	4b1c      	ldr	r3, [pc, #112]	@ (8007994 <FATFS_LinkDriverEx+0x94>)
 8007922:	7a5b      	ldrb	r3, [r3, #9]
 8007924:	b2db      	uxtb	r3, r3
 8007926:	461a      	mov	r2, r3
 8007928:	4b1a      	ldr	r3, [pc, #104]	@ (8007994 <FATFS_LinkDriverEx+0x94>)
 800792a:	2100      	movs	r1, #0
 800792c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800792e:	4b19      	ldr	r3, [pc, #100]	@ (8007994 <FATFS_LinkDriverEx+0x94>)
 8007930:	7a5b      	ldrb	r3, [r3, #9]
 8007932:	b2db      	uxtb	r3, r3
 8007934:	4a17      	ldr	r2, [pc, #92]	@ (8007994 <FATFS_LinkDriverEx+0x94>)
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	4413      	add	r3, r2
 800793a:	68fa      	ldr	r2, [r7, #12]
 800793c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800793e:	4b15      	ldr	r3, [pc, #84]	@ (8007994 <FATFS_LinkDriverEx+0x94>)
 8007940:	7a5b      	ldrb	r3, [r3, #9]
 8007942:	b2db      	uxtb	r3, r3
 8007944:	461a      	mov	r2, r3
 8007946:	4b13      	ldr	r3, [pc, #76]	@ (8007994 <FATFS_LinkDriverEx+0x94>)
 8007948:	4413      	add	r3, r2
 800794a:	79fa      	ldrb	r2, [r7, #7]
 800794c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800794e:	4b11      	ldr	r3, [pc, #68]	@ (8007994 <FATFS_LinkDriverEx+0x94>)
 8007950:	7a5b      	ldrb	r3, [r3, #9]
 8007952:	b2db      	uxtb	r3, r3
 8007954:	1c5a      	adds	r2, r3, #1
 8007956:	b2d1      	uxtb	r1, r2
 8007958:	4a0e      	ldr	r2, [pc, #56]	@ (8007994 <FATFS_LinkDriverEx+0x94>)
 800795a:	7251      	strb	r1, [r2, #9]
 800795c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800795e:	7dbb      	ldrb	r3, [r7, #22]
 8007960:	3330      	adds	r3, #48	@ 0x30
 8007962:	b2da      	uxtb	r2, r3
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	3301      	adds	r3, #1
 800796c:	223a      	movs	r2, #58	@ 0x3a
 800796e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	3302      	adds	r3, #2
 8007974:	222f      	movs	r2, #47	@ 0x2f
 8007976:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	3303      	adds	r3, #3
 800797c:	2200      	movs	r2, #0
 800797e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007980:	2300      	movs	r3, #0
 8007982:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007984:	7dfb      	ldrb	r3, [r7, #23]
}
 8007986:	4618      	mov	r0, r3
 8007988:	371c      	adds	r7, #28
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	20000514 	.word	0x20000514

08007998 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80079a2:	2200      	movs	r2, #0
 80079a4:	6839      	ldr	r1, [r7, #0]
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f7ff ffaa 	bl	8007900 <FATFS_LinkDriverEx>
 80079ac:	4603      	mov	r3, r0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3708      	adds	r7, #8
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
	...

080079b8 <siprintf>:
 80079b8:	b40e      	push	{r1, r2, r3}
 80079ba:	b500      	push	{lr}
 80079bc:	b09c      	sub	sp, #112	@ 0x70
 80079be:	ab1d      	add	r3, sp, #116	@ 0x74
 80079c0:	9002      	str	r0, [sp, #8]
 80079c2:	9006      	str	r0, [sp, #24]
 80079c4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80079c8:	4809      	ldr	r0, [pc, #36]	@ (80079f0 <siprintf+0x38>)
 80079ca:	9107      	str	r1, [sp, #28]
 80079cc:	9104      	str	r1, [sp, #16]
 80079ce:	4909      	ldr	r1, [pc, #36]	@ (80079f4 <siprintf+0x3c>)
 80079d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80079d4:	9105      	str	r1, [sp, #20]
 80079d6:	6800      	ldr	r0, [r0, #0]
 80079d8:	9301      	str	r3, [sp, #4]
 80079da:	a902      	add	r1, sp, #8
 80079dc:	f000 f9aa 	bl	8007d34 <_svfiprintf_r>
 80079e0:	9b02      	ldr	r3, [sp, #8]
 80079e2:	2200      	movs	r2, #0
 80079e4:	701a      	strb	r2, [r3, #0]
 80079e6:	b01c      	add	sp, #112	@ 0x70
 80079e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80079ec:	b003      	add	sp, #12
 80079ee:	4770      	bx	lr
 80079f0:	2000000c 	.word	0x2000000c
 80079f4:	ffff0208 	.word	0xffff0208

080079f8 <memset>:
 80079f8:	4402      	add	r2, r0
 80079fa:	4603      	mov	r3, r0
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d100      	bne.n	8007a02 <memset+0xa>
 8007a00:	4770      	bx	lr
 8007a02:	f803 1b01 	strb.w	r1, [r3], #1
 8007a06:	e7f9      	b.n	80079fc <memset+0x4>

08007a08 <strstr>:
 8007a08:	780a      	ldrb	r2, [r1, #0]
 8007a0a:	b570      	push	{r4, r5, r6, lr}
 8007a0c:	b96a      	cbnz	r2, 8007a2a <strstr+0x22>
 8007a0e:	bd70      	pop	{r4, r5, r6, pc}
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d109      	bne.n	8007a28 <strstr+0x20>
 8007a14:	460c      	mov	r4, r1
 8007a16:	4605      	mov	r5, r0
 8007a18:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d0f6      	beq.n	8007a0e <strstr+0x6>
 8007a20:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007a24:	429e      	cmp	r6, r3
 8007a26:	d0f7      	beq.n	8007a18 <strstr+0x10>
 8007a28:	3001      	adds	r0, #1
 8007a2a:	7803      	ldrb	r3, [r0, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d1ef      	bne.n	8007a10 <strstr+0x8>
 8007a30:	4618      	mov	r0, r3
 8007a32:	e7ec      	b.n	8007a0e <strstr+0x6>

08007a34 <__errno>:
 8007a34:	4b01      	ldr	r3, [pc, #4]	@ (8007a3c <__errno+0x8>)
 8007a36:	6818      	ldr	r0, [r3, #0]
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	2000000c 	.word	0x2000000c

08007a40 <__libc_init_array>:
 8007a40:	b570      	push	{r4, r5, r6, lr}
 8007a42:	4d0d      	ldr	r5, [pc, #52]	@ (8007a78 <__libc_init_array+0x38>)
 8007a44:	4c0d      	ldr	r4, [pc, #52]	@ (8007a7c <__libc_init_array+0x3c>)
 8007a46:	1b64      	subs	r4, r4, r5
 8007a48:	10a4      	asrs	r4, r4, #2
 8007a4a:	2600      	movs	r6, #0
 8007a4c:	42a6      	cmp	r6, r4
 8007a4e:	d109      	bne.n	8007a64 <__libc_init_array+0x24>
 8007a50:	4d0b      	ldr	r5, [pc, #44]	@ (8007a80 <__libc_init_array+0x40>)
 8007a52:	4c0c      	ldr	r4, [pc, #48]	@ (8007a84 <__libc_init_array+0x44>)
 8007a54:	f000 fc66 	bl	8008324 <_init>
 8007a58:	1b64      	subs	r4, r4, r5
 8007a5a:	10a4      	asrs	r4, r4, #2
 8007a5c:	2600      	movs	r6, #0
 8007a5e:	42a6      	cmp	r6, r4
 8007a60:	d105      	bne.n	8007a6e <__libc_init_array+0x2e>
 8007a62:	bd70      	pop	{r4, r5, r6, pc}
 8007a64:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a68:	4798      	blx	r3
 8007a6a:	3601      	adds	r6, #1
 8007a6c:	e7ee      	b.n	8007a4c <__libc_init_array+0xc>
 8007a6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a72:	4798      	blx	r3
 8007a74:	3601      	adds	r6, #1
 8007a76:	e7f2      	b.n	8007a5e <__libc_init_array+0x1e>
 8007a78:	0800848c 	.word	0x0800848c
 8007a7c:	0800848c 	.word	0x0800848c
 8007a80:	0800848c 	.word	0x0800848c
 8007a84:	08008490 	.word	0x08008490

08007a88 <__retarget_lock_acquire_recursive>:
 8007a88:	4770      	bx	lr

08007a8a <__retarget_lock_release_recursive>:
 8007a8a:	4770      	bx	lr

08007a8c <_free_r>:
 8007a8c:	b538      	push	{r3, r4, r5, lr}
 8007a8e:	4605      	mov	r5, r0
 8007a90:	2900      	cmp	r1, #0
 8007a92:	d041      	beq.n	8007b18 <_free_r+0x8c>
 8007a94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a98:	1f0c      	subs	r4, r1, #4
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	bfb8      	it	lt
 8007a9e:	18e4      	addlt	r4, r4, r3
 8007aa0:	f000 f8e0 	bl	8007c64 <__malloc_lock>
 8007aa4:	4a1d      	ldr	r2, [pc, #116]	@ (8007b1c <_free_r+0x90>)
 8007aa6:	6813      	ldr	r3, [r2, #0]
 8007aa8:	b933      	cbnz	r3, 8007ab8 <_free_r+0x2c>
 8007aaa:	6063      	str	r3, [r4, #4]
 8007aac:	6014      	str	r4, [r2, #0]
 8007aae:	4628      	mov	r0, r5
 8007ab0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ab4:	f000 b8dc 	b.w	8007c70 <__malloc_unlock>
 8007ab8:	42a3      	cmp	r3, r4
 8007aba:	d908      	bls.n	8007ace <_free_r+0x42>
 8007abc:	6820      	ldr	r0, [r4, #0]
 8007abe:	1821      	adds	r1, r4, r0
 8007ac0:	428b      	cmp	r3, r1
 8007ac2:	bf01      	itttt	eq
 8007ac4:	6819      	ldreq	r1, [r3, #0]
 8007ac6:	685b      	ldreq	r3, [r3, #4]
 8007ac8:	1809      	addeq	r1, r1, r0
 8007aca:	6021      	streq	r1, [r4, #0]
 8007acc:	e7ed      	b.n	8007aaa <_free_r+0x1e>
 8007ace:	461a      	mov	r2, r3
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	b10b      	cbz	r3, 8007ad8 <_free_r+0x4c>
 8007ad4:	42a3      	cmp	r3, r4
 8007ad6:	d9fa      	bls.n	8007ace <_free_r+0x42>
 8007ad8:	6811      	ldr	r1, [r2, #0]
 8007ada:	1850      	adds	r0, r2, r1
 8007adc:	42a0      	cmp	r0, r4
 8007ade:	d10b      	bne.n	8007af8 <_free_r+0x6c>
 8007ae0:	6820      	ldr	r0, [r4, #0]
 8007ae2:	4401      	add	r1, r0
 8007ae4:	1850      	adds	r0, r2, r1
 8007ae6:	4283      	cmp	r3, r0
 8007ae8:	6011      	str	r1, [r2, #0]
 8007aea:	d1e0      	bne.n	8007aae <_free_r+0x22>
 8007aec:	6818      	ldr	r0, [r3, #0]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	6053      	str	r3, [r2, #4]
 8007af2:	4408      	add	r0, r1
 8007af4:	6010      	str	r0, [r2, #0]
 8007af6:	e7da      	b.n	8007aae <_free_r+0x22>
 8007af8:	d902      	bls.n	8007b00 <_free_r+0x74>
 8007afa:	230c      	movs	r3, #12
 8007afc:	602b      	str	r3, [r5, #0]
 8007afe:	e7d6      	b.n	8007aae <_free_r+0x22>
 8007b00:	6820      	ldr	r0, [r4, #0]
 8007b02:	1821      	adds	r1, r4, r0
 8007b04:	428b      	cmp	r3, r1
 8007b06:	bf04      	itt	eq
 8007b08:	6819      	ldreq	r1, [r3, #0]
 8007b0a:	685b      	ldreq	r3, [r3, #4]
 8007b0c:	6063      	str	r3, [r4, #4]
 8007b0e:	bf04      	itt	eq
 8007b10:	1809      	addeq	r1, r1, r0
 8007b12:	6021      	streq	r1, [r4, #0]
 8007b14:	6054      	str	r4, [r2, #4]
 8007b16:	e7ca      	b.n	8007aae <_free_r+0x22>
 8007b18:	bd38      	pop	{r3, r4, r5, pc}
 8007b1a:	bf00      	nop
 8007b1c:	20000664 	.word	0x20000664

08007b20 <sbrk_aligned>:
 8007b20:	b570      	push	{r4, r5, r6, lr}
 8007b22:	4e0f      	ldr	r6, [pc, #60]	@ (8007b60 <sbrk_aligned+0x40>)
 8007b24:	460c      	mov	r4, r1
 8007b26:	6831      	ldr	r1, [r6, #0]
 8007b28:	4605      	mov	r5, r0
 8007b2a:	b911      	cbnz	r1, 8007b32 <sbrk_aligned+0x12>
 8007b2c:	f000 fba6 	bl	800827c <_sbrk_r>
 8007b30:	6030      	str	r0, [r6, #0]
 8007b32:	4621      	mov	r1, r4
 8007b34:	4628      	mov	r0, r5
 8007b36:	f000 fba1 	bl	800827c <_sbrk_r>
 8007b3a:	1c43      	adds	r3, r0, #1
 8007b3c:	d103      	bne.n	8007b46 <sbrk_aligned+0x26>
 8007b3e:	f04f 34ff 	mov.w	r4, #4294967295
 8007b42:	4620      	mov	r0, r4
 8007b44:	bd70      	pop	{r4, r5, r6, pc}
 8007b46:	1cc4      	adds	r4, r0, #3
 8007b48:	f024 0403 	bic.w	r4, r4, #3
 8007b4c:	42a0      	cmp	r0, r4
 8007b4e:	d0f8      	beq.n	8007b42 <sbrk_aligned+0x22>
 8007b50:	1a21      	subs	r1, r4, r0
 8007b52:	4628      	mov	r0, r5
 8007b54:	f000 fb92 	bl	800827c <_sbrk_r>
 8007b58:	3001      	adds	r0, #1
 8007b5a:	d1f2      	bne.n	8007b42 <sbrk_aligned+0x22>
 8007b5c:	e7ef      	b.n	8007b3e <sbrk_aligned+0x1e>
 8007b5e:	bf00      	nop
 8007b60:	20000660 	.word	0x20000660

08007b64 <_malloc_r>:
 8007b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b68:	1ccd      	adds	r5, r1, #3
 8007b6a:	f025 0503 	bic.w	r5, r5, #3
 8007b6e:	3508      	adds	r5, #8
 8007b70:	2d0c      	cmp	r5, #12
 8007b72:	bf38      	it	cc
 8007b74:	250c      	movcc	r5, #12
 8007b76:	2d00      	cmp	r5, #0
 8007b78:	4606      	mov	r6, r0
 8007b7a:	db01      	blt.n	8007b80 <_malloc_r+0x1c>
 8007b7c:	42a9      	cmp	r1, r5
 8007b7e:	d904      	bls.n	8007b8a <_malloc_r+0x26>
 8007b80:	230c      	movs	r3, #12
 8007b82:	6033      	str	r3, [r6, #0]
 8007b84:	2000      	movs	r0, #0
 8007b86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007c60 <_malloc_r+0xfc>
 8007b8e:	f000 f869 	bl	8007c64 <__malloc_lock>
 8007b92:	f8d8 3000 	ldr.w	r3, [r8]
 8007b96:	461c      	mov	r4, r3
 8007b98:	bb44      	cbnz	r4, 8007bec <_malloc_r+0x88>
 8007b9a:	4629      	mov	r1, r5
 8007b9c:	4630      	mov	r0, r6
 8007b9e:	f7ff ffbf 	bl	8007b20 <sbrk_aligned>
 8007ba2:	1c43      	adds	r3, r0, #1
 8007ba4:	4604      	mov	r4, r0
 8007ba6:	d158      	bne.n	8007c5a <_malloc_r+0xf6>
 8007ba8:	f8d8 4000 	ldr.w	r4, [r8]
 8007bac:	4627      	mov	r7, r4
 8007bae:	2f00      	cmp	r7, #0
 8007bb0:	d143      	bne.n	8007c3a <_malloc_r+0xd6>
 8007bb2:	2c00      	cmp	r4, #0
 8007bb4:	d04b      	beq.n	8007c4e <_malloc_r+0xea>
 8007bb6:	6823      	ldr	r3, [r4, #0]
 8007bb8:	4639      	mov	r1, r7
 8007bba:	4630      	mov	r0, r6
 8007bbc:	eb04 0903 	add.w	r9, r4, r3
 8007bc0:	f000 fb5c 	bl	800827c <_sbrk_r>
 8007bc4:	4581      	cmp	r9, r0
 8007bc6:	d142      	bne.n	8007c4e <_malloc_r+0xea>
 8007bc8:	6821      	ldr	r1, [r4, #0]
 8007bca:	1a6d      	subs	r5, r5, r1
 8007bcc:	4629      	mov	r1, r5
 8007bce:	4630      	mov	r0, r6
 8007bd0:	f7ff ffa6 	bl	8007b20 <sbrk_aligned>
 8007bd4:	3001      	adds	r0, #1
 8007bd6:	d03a      	beq.n	8007c4e <_malloc_r+0xea>
 8007bd8:	6823      	ldr	r3, [r4, #0]
 8007bda:	442b      	add	r3, r5
 8007bdc:	6023      	str	r3, [r4, #0]
 8007bde:	f8d8 3000 	ldr.w	r3, [r8]
 8007be2:	685a      	ldr	r2, [r3, #4]
 8007be4:	bb62      	cbnz	r2, 8007c40 <_malloc_r+0xdc>
 8007be6:	f8c8 7000 	str.w	r7, [r8]
 8007bea:	e00f      	b.n	8007c0c <_malloc_r+0xa8>
 8007bec:	6822      	ldr	r2, [r4, #0]
 8007bee:	1b52      	subs	r2, r2, r5
 8007bf0:	d420      	bmi.n	8007c34 <_malloc_r+0xd0>
 8007bf2:	2a0b      	cmp	r2, #11
 8007bf4:	d917      	bls.n	8007c26 <_malloc_r+0xc2>
 8007bf6:	1961      	adds	r1, r4, r5
 8007bf8:	42a3      	cmp	r3, r4
 8007bfa:	6025      	str	r5, [r4, #0]
 8007bfc:	bf18      	it	ne
 8007bfe:	6059      	strne	r1, [r3, #4]
 8007c00:	6863      	ldr	r3, [r4, #4]
 8007c02:	bf08      	it	eq
 8007c04:	f8c8 1000 	streq.w	r1, [r8]
 8007c08:	5162      	str	r2, [r4, r5]
 8007c0a:	604b      	str	r3, [r1, #4]
 8007c0c:	4630      	mov	r0, r6
 8007c0e:	f000 f82f 	bl	8007c70 <__malloc_unlock>
 8007c12:	f104 000b 	add.w	r0, r4, #11
 8007c16:	1d23      	adds	r3, r4, #4
 8007c18:	f020 0007 	bic.w	r0, r0, #7
 8007c1c:	1ac2      	subs	r2, r0, r3
 8007c1e:	bf1c      	itt	ne
 8007c20:	1a1b      	subne	r3, r3, r0
 8007c22:	50a3      	strne	r3, [r4, r2]
 8007c24:	e7af      	b.n	8007b86 <_malloc_r+0x22>
 8007c26:	6862      	ldr	r2, [r4, #4]
 8007c28:	42a3      	cmp	r3, r4
 8007c2a:	bf0c      	ite	eq
 8007c2c:	f8c8 2000 	streq.w	r2, [r8]
 8007c30:	605a      	strne	r2, [r3, #4]
 8007c32:	e7eb      	b.n	8007c0c <_malloc_r+0xa8>
 8007c34:	4623      	mov	r3, r4
 8007c36:	6864      	ldr	r4, [r4, #4]
 8007c38:	e7ae      	b.n	8007b98 <_malloc_r+0x34>
 8007c3a:	463c      	mov	r4, r7
 8007c3c:	687f      	ldr	r7, [r7, #4]
 8007c3e:	e7b6      	b.n	8007bae <_malloc_r+0x4a>
 8007c40:	461a      	mov	r2, r3
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	42a3      	cmp	r3, r4
 8007c46:	d1fb      	bne.n	8007c40 <_malloc_r+0xdc>
 8007c48:	2300      	movs	r3, #0
 8007c4a:	6053      	str	r3, [r2, #4]
 8007c4c:	e7de      	b.n	8007c0c <_malloc_r+0xa8>
 8007c4e:	230c      	movs	r3, #12
 8007c50:	6033      	str	r3, [r6, #0]
 8007c52:	4630      	mov	r0, r6
 8007c54:	f000 f80c 	bl	8007c70 <__malloc_unlock>
 8007c58:	e794      	b.n	8007b84 <_malloc_r+0x20>
 8007c5a:	6005      	str	r5, [r0, #0]
 8007c5c:	e7d6      	b.n	8007c0c <_malloc_r+0xa8>
 8007c5e:	bf00      	nop
 8007c60:	20000664 	.word	0x20000664

08007c64 <__malloc_lock>:
 8007c64:	4801      	ldr	r0, [pc, #4]	@ (8007c6c <__malloc_lock+0x8>)
 8007c66:	f7ff bf0f 	b.w	8007a88 <__retarget_lock_acquire_recursive>
 8007c6a:	bf00      	nop
 8007c6c:	2000065c 	.word	0x2000065c

08007c70 <__malloc_unlock>:
 8007c70:	4801      	ldr	r0, [pc, #4]	@ (8007c78 <__malloc_unlock+0x8>)
 8007c72:	f7ff bf0a 	b.w	8007a8a <__retarget_lock_release_recursive>
 8007c76:	bf00      	nop
 8007c78:	2000065c 	.word	0x2000065c

08007c7c <__ssputs_r>:
 8007c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c80:	688e      	ldr	r6, [r1, #8]
 8007c82:	461f      	mov	r7, r3
 8007c84:	42be      	cmp	r6, r7
 8007c86:	680b      	ldr	r3, [r1, #0]
 8007c88:	4682      	mov	sl, r0
 8007c8a:	460c      	mov	r4, r1
 8007c8c:	4690      	mov	r8, r2
 8007c8e:	d82d      	bhi.n	8007cec <__ssputs_r+0x70>
 8007c90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007c98:	d026      	beq.n	8007ce8 <__ssputs_r+0x6c>
 8007c9a:	6965      	ldr	r5, [r4, #20]
 8007c9c:	6909      	ldr	r1, [r1, #16]
 8007c9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ca2:	eba3 0901 	sub.w	r9, r3, r1
 8007ca6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007caa:	1c7b      	adds	r3, r7, #1
 8007cac:	444b      	add	r3, r9
 8007cae:	106d      	asrs	r5, r5, #1
 8007cb0:	429d      	cmp	r5, r3
 8007cb2:	bf38      	it	cc
 8007cb4:	461d      	movcc	r5, r3
 8007cb6:	0553      	lsls	r3, r2, #21
 8007cb8:	d527      	bpl.n	8007d0a <__ssputs_r+0x8e>
 8007cba:	4629      	mov	r1, r5
 8007cbc:	f7ff ff52 	bl	8007b64 <_malloc_r>
 8007cc0:	4606      	mov	r6, r0
 8007cc2:	b360      	cbz	r0, 8007d1e <__ssputs_r+0xa2>
 8007cc4:	6921      	ldr	r1, [r4, #16]
 8007cc6:	464a      	mov	r2, r9
 8007cc8:	f000 fae8 	bl	800829c <memcpy>
 8007ccc:	89a3      	ldrh	r3, [r4, #12]
 8007cce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007cd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cd6:	81a3      	strh	r3, [r4, #12]
 8007cd8:	6126      	str	r6, [r4, #16]
 8007cda:	6165      	str	r5, [r4, #20]
 8007cdc:	444e      	add	r6, r9
 8007cde:	eba5 0509 	sub.w	r5, r5, r9
 8007ce2:	6026      	str	r6, [r4, #0]
 8007ce4:	60a5      	str	r5, [r4, #8]
 8007ce6:	463e      	mov	r6, r7
 8007ce8:	42be      	cmp	r6, r7
 8007cea:	d900      	bls.n	8007cee <__ssputs_r+0x72>
 8007cec:	463e      	mov	r6, r7
 8007cee:	6820      	ldr	r0, [r4, #0]
 8007cf0:	4632      	mov	r2, r6
 8007cf2:	4641      	mov	r1, r8
 8007cf4:	f000 faa8 	bl	8008248 <memmove>
 8007cf8:	68a3      	ldr	r3, [r4, #8]
 8007cfa:	1b9b      	subs	r3, r3, r6
 8007cfc:	60a3      	str	r3, [r4, #8]
 8007cfe:	6823      	ldr	r3, [r4, #0]
 8007d00:	4433      	add	r3, r6
 8007d02:	6023      	str	r3, [r4, #0]
 8007d04:	2000      	movs	r0, #0
 8007d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d0a:	462a      	mov	r2, r5
 8007d0c:	f000 fad4 	bl	80082b8 <_realloc_r>
 8007d10:	4606      	mov	r6, r0
 8007d12:	2800      	cmp	r0, #0
 8007d14:	d1e0      	bne.n	8007cd8 <__ssputs_r+0x5c>
 8007d16:	6921      	ldr	r1, [r4, #16]
 8007d18:	4650      	mov	r0, sl
 8007d1a:	f7ff feb7 	bl	8007a8c <_free_r>
 8007d1e:	230c      	movs	r3, #12
 8007d20:	f8ca 3000 	str.w	r3, [sl]
 8007d24:	89a3      	ldrh	r3, [r4, #12]
 8007d26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d2a:	81a3      	strh	r3, [r4, #12]
 8007d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d30:	e7e9      	b.n	8007d06 <__ssputs_r+0x8a>
	...

08007d34 <_svfiprintf_r>:
 8007d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d38:	4698      	mov	r8, r3
 8007d3a:	898b      	ldrh	r3, [r1, #12]
 8007d3c:	061b      	lsls	r3, r3, #24
 8007d3e:	b09d      	sub	sp, #116	@ 0x74
 8007d40:	4607      	mov	r7, r0
 8007d42:	460d      	mov	r5, r1
 8007d44:	4614      	mov	r4, r2
 8007d46:	d510      	bpl.n	8007d6a <_svfiprintf_r+0x36>
 8007d48:	690b      	ldr	r3, [r1, #16]
 8007d4a:	b973      	cbnz	r3, 8007d6a <_svfiprintf_r+0x36>
 8007d4c:	2140      	movs	r1, #64	@ 0x40
 8007d4e:	f7ff ff09 	bl	8007b64 <_malloc_r>
 8007d52:	6028      	str	r0, [r5, #0]
 8007d54:	6128      	str	r0, [r5, #16]
 8007d56:	b930      	cbnz	r0, 8007d66 <_svfiprintf_r+0x32>
 8007d58:	230c      	movs	r3, #12
 8007d5a:	603b      	str	r3, [r7, #0]
 8007d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d60:	b01d      	add	sp, #116	@ 0x74
 8007d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d66:	2340      	movs	r3, #64	@ 0x40
 8007d68:	616b      	str	r3, [r5, #20]
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d6e:	2320      	movs	r3, #32
 8007d70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007d74:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d78:	2330      	movs	r3, #48	@ 0x30
 8007d7a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007f18 <_svfiprintf_r+0x1e4>
 8007d7e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007d82:	f04f 0901 	mov.w	r9, #1
 8007d86:	4623      	mov	r3, r4
 8007d88:	469a      	mov	sl, r3
 8007d8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d8e:	b10a      	cbz	r2, 8007d94 <_svfiprintf_r+0x60>
 8007d90:	2a25      	cmp	r2, #37	@ 0x25
 8007d92:	d1f9      	bne.n	8007d88 <_svfiprintf_r+0x54>
 8007d94:	ebba 0b04 	subs.w	fp, sl, r4
 8007d98:	d00b      	beq.n	8007db2 <_svfiprintf_r+0x7e>
 8007d9a:	465b      	mov	r3, fp
 8007d9c:	4622      	mov	r2, r4
 8007d9e:	4629      	mov	r1, r5
 8007da0:	4638      	mov	r0, r7
 8007da2:	f7ff ff6b 	bl	8007c7c <__ssputs_r>
 8007da6:	3001      	adds	r0, #1
 8007da8:	f000 80a7 	beq.w	8007efa <_svfiprintf_r+0x1c6>
 8007dac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007dae:	445a      	add	r2, fp
 8007db0:	9209      	str	r2, [sp, #36]	@ 0x24
 8007db2:	f89a 3000 	ldrb.w	r3, [sl]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	f000 809f 	beq.w	8007efa <_svfiprintf_r+0x1c6>
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8007dc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007dc6:	f10a 0a01 	add.w	sl, sl, #1
 8007dca:	9304      	str	r3, [sp, #16]
 8007dcc:	9307      	str	r3, [sp, #28]
 8007dce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007dd2:	931a      	str	r3, [sp, #104]	@ 0x68
 8007dd4:	4654      	mov	r4, sl
 8007dd6:	2205      	movs	r2, #5
 8007dd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ddc:	484e      	ldr	r0, [pc, #312]	@ (8007f18 <_svfiprintf_r+0x1e4>)
 8007dde:	f7f8 fa17 	bl	8000210 <memchr>
 8007de2:	9a04      	ldr	r2, [sp, #16]
 8007de4:	b9d8      	cbnz	r0, 8007e1e <_svfiprintf_r+0xea>
 8007de6:	06d0      	lsls	r0, r2, #27
 8007de8:	bf44      	itt	mi
 8007dea:	2320      	movmi	r3, #32
 8007dec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007df0:	0711      	lsls	r1, r2, #28
 8007df2:	bf44      	itt	mi
 8007df4:	232b      	movmi	r3, #43	@ 0x2b
 8007df6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007dfa:	f89a 3000 	ldrb.w	r3, [sl]
 8007dfe:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e00:	d015      	beq.n	8007e2e <_svfiprintf_r+0xfa>
 8007e02:	9a07      	ldr	r2, [sp, #28]
 8007e04:	4654      	mov	r4, sl
 8007e06:	2000      	movs	r0, #0
 8007e08:	f04f 0c0a 	mov.w	ip, #10
 8007e0c:	4621      	mov	r1, r4
 8007e0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e12:	3b30      	subs	r3, #48	@ 0x30
 8007e14:	2b09      	cmp	r3, #9
 8007e16:	d94b      	bls.n	8007eb0 <_svfiprintf_r+0x17c>
 8007e18:	b1b0      	cbz	r0, 8007e48 <_svfiprintf_r+0x114>
 8007e1a:	9207      	str	r2, [sp, #28]
 8007e1c:	e014      	b.n	8007e48 <_svfiprintf_r+0x114>
 8007e1e:	eba0 0308 	sub.w	r3, r0, r8
 8007e22:	fa09 f303 	lsl.w	r3, r9, r3
 8007e26:	4313      	orrs	r3, r2
 8007e28:	9304      	str	r3, [sp, #16]
 8007e2a:	46a2      	mov	sl, r4
 8007e2c:	e7d2      	b.n	8007dd4 <_svfiprintf_r+0xa0>
 8007e2e:	9b03      	ldr	r3, [sp, #12]
 8007e30:	1d19      	adds	r1, r3, #4
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	9103      	str	r1, [sp, #12]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	bfbb      	ittet	lt
 8007e3a:	425b      	neglt	r3, r3
 8007e3c:	f042 0202 	orrlt.w	r2, r2, #2
 8007e40:	9307      	strge	r3, [sp, #28]
 8007e42:	9307      	strlt	r3, [sp, #28]
 8007e44:	bfb8      	it	lt
 8007e46:	9204      	strlt	r2, [sp, #16]
 8007e48:	7823      	ldrb	r3, [r4, #0]
 8007e4a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e4c:	d10a      	bne.n	8007e64 <_svfiprintf_r+0x130>
 8007e4e:	7863      	ldrb	r3, [r4, #1]
 8007e50:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e52:	d132      	bne.n	8007eba <_svfiprintf_r+0x186>
 8007e54:	9b03      	ldr	r3, [sp, #12]
 8007e56:	1d1a      	adds	r2, r3, #4
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	9203      	str	r2, [sp, #12]
 8007e5c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007e60:	3402      	adds	r4, #2
 8007e62:	9305      	str	r3, [sp, #20]
 8007e64:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007f28 <_svfiprintf_r+0x1f4>
 8007e68:	7821      	ldrb	r1, [r4, #0]
 8007e6a:	2203      	movs	r2, #3
 8007e6c:	4650      	mov	r0, sl
 8007e6e:	f7f8 f9cf 	bl	8000210 <memchr>
 8007e72:	b138      	cbz	r0, 8007e84 <_svfiprintf_r+0x150>
 8007e74:	9b04      	ldr	r3, [sp, #16]
 8007e76:	eba0 000a 	sub.w	r0, r0, sl
 8007e7a:	2240      	movs	r2, #64	@ 0x40
 8007e7c:	4082      	lsls	r2, r0
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	3401      	adds	r4, #1
 8007e82:	9304      	str	r3, [sp, #16]
 8007e84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e88:	4824      	ldr	r0, [pc, #144]	@ (8007f1c <_svfiprintf_r+0x1e8>)
 8007e8a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007e8e:	2206      	movs	r2, #6
 8007e90:	f7f8 f9be 	bl	8000210 <memchr>
 8007e94:	2800      	cmp	r0, #0
 8007e96:	d036      	beq.n	8007f06 <_svfiprintf_r+0x1d2>
 8007e98:	4b21      	ldr	r3, [pc, #132]	@ (8007f20 <_svfiprintf_r+0x1ec>)
 8007e9a:	bb1b      	cbnz	r3, 8007ee4 <_svfiprintf_r+0x1b0>
 8007e9c:	9b03      	ldr	r3, [sp, #12]
 8007e9e:	3307      	adds	r3, #7
 8007ea0:	f023 0307 	bic.w	r3, r3, #7
 8007ea4:	3308      	adds	r3, #8
 8007ea6:	9303      	str	r3, [sp, #12]
 8007ea8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007eaa:	4433      	add	r3, r6
 8007eac:	9309      	str	r3, [sp, #36]	@ 0x24
 8007eae:	e76a      	b.n	8007d86 <_svfiprintf_r+0x52>
 8007eb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007eb4:	460c      	mov	r4, r1
 8007eb6:	2001      	movs	r0, #1
 8007eb8:	e7a8      	b.n	8007e0c <_svfiprintf_r+0xd8>
 8007eba:	2300      	movs	r3, #0
 8007ebc:	3401      	adds	r4, #1
 8007ebe:	9305      	str	r3, [sp, #20]
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	f04f 0c0a 	mov.w	ip, #10
 8007ec6:	4620      	mov	r0, r4
 8007ec8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ecc:	3a30      	subs	r2, #48	@ 0x30
 8007ece:	2a09      	cmp	r2, #9
 8007ed0:	d903      	bls.n	8007eda <_svfiprintf_r+0x1a6>
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d0c6      	beq.n	8007e64 <_svfiprintf_r+0x130>
 8007ed6:	9105      	str	r1, [sp, #20]
 8007ed8:	e7c4      	b.n	8007e64 <_svfiprintf_r+0x130>
 8007eda:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ede:	4604      	mov	r4, r0
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e7f0      	b.n	8007ec6 <_svfiprintf_r+0x192>
 8007ee4:	ab03      	add	r3, sp, #12
 8007ee6:	9300      	str	r3, [sp, #0]
 8007ee8:	462a      	mov	r2, r5
 8007eea:	4b0e      	ldr	r3, [pc, #56]	@ (8007f24 <_svfiprintf_r+0x1f0>)
 8007eec:	a904      	add	r1, sp, #16
 8007eee:	4638      	mov	r0, r7
 8007ef0:	f3af 8000 	nop.w
 8007ef4:	1c42      	adds	r2, r0, #1
 8007ef6:	4606      	mov	r6, r0
 8007ef8:	d1d6      	bne.n	8007ea8 <_svfiprintf_r+0x174>
 8007efa:	89ab      	ldrh	r3, [r5, #12]
 8007efc:	065b      	lsls	r3, r3, #25
 8007efe:	f53f af2d 	bmi.w	8007d5c <_svfiprintf_r+0x28>
 8007f02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007f04:	e72c      	b.n	8007d60 <_svfiprintf_r+0x2c>
 8007f06:	ab03      	add	r3, sp, #12
 8007f08:	9300      	str	r3, [sp, #0]
 8007f0a:	462a      	mov	r2, r5
 8007f0c:	4b05      	ldr	r3, [pc, #20]	@ (8007f24 <_svfiprintf_r+0x1f0>)
 8007f0e:	a904      	add	r1, sp, #16
 8007f10:	4638      	mov	r0, r7
 8007f12:	f000 f879 	bl	8008008 <_printf_i>
 8007f16:	e7ed      	b.n	8007ef4 <_svfiprintf_r+0x1c0>
 8007f18:	08008450 	.word	0x08008450
 8007f1c:	0800845a 	.word	0x0800845a
 8007f20:	00000000 	.word	0x00000000
 8007f24:	08007c7d 	.word	0x08007c7d
 8007f28:	08008456 	.word	0x08008456

08007f2c <_printf_common>:
 8007f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f30:	4616      	mov	r6, r2
 8007f32:	4698      	mov	r8, r3
 8007f34:	688a      	ldr	r2, [r1, #8]
 8007f36:	690b      	ldr	r3, [r1, #16]
 8007f38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	bfb8      	it	lt
 8007f40:	4613      	movlt	r3, r2
 8007f42:	6033      	str	r3, [r6, #0]
 8007f44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007f48:	4607      	mov	r7, r0
 8007f4a:	460c      	mov	r4, r1
 8007f4c:	b10a      	cbz	r2, 8007f52 <_printf_common+0x26>
 8007f4e:	3301      	adds	r3, #1
 8007f50:	6033      	str	r3, [r6, #0]
 8007f52:	6823      	ldr	r3, [r4, #0]
 8007f54:	0699      	lsls	r1, r3, #26
 8007f56:	bf42      	ittt	mi
 8007f58:	6833      	ldrmi	r3, [r6, #0]
 8007f5a:	3302      	addmi	r3, #2
 8007f5c:	6033      	strmi	r3, [r6, #0]
 8007f5e:	6825      	ldr	r5, [r4, #0]
 8007f60:	f015 0506 	ands.w	r5, r5, #6
 8007f64:	d106      	bne.n	8007f74 <_printf_common+0x48>
 8007f66:	f104 0a19 	add.w	sl, r4, #25
 8007f6a:	68e3      	ldr	r3, [r4, #12]
 8007f6c:	6832      	ldr	r2, [r6, #0]
 8007f6e:	1a9b      	subs	r3, r3, r2
 8007f70:	42ab      	cmp	r3, r5
 8007f72:	dc26      	bgt.n	8007fc2 <_printf_common+0x96>
 8007f74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007f78:	6822      	ldr	r2, [r4, #0]
 8007f7a:	3b00      	subs	r3, #0
 8007f7c:	bf18      	it	ne
 8007f7e:	2301      	movne	r3, #1
 8007f80:	0692      	lsls	r2, r2, #26
 8007f82:	d42b      	bmi.n	8007fdc <_printf_common+0xb0>
 8007f84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007f88:	4641      	mov	r1, r8
 8007f8a:	4638      	mov	r0, r7
 8007f8c:	47c8      	blx	r9
 8007f8e:	3001      	adds	r0, #1
 8007f90:	d01e      	beq.n	8007fd0 <_printf_common+0xa4>
 8007f92:	6823      	ldr	r3, [r4, #0]
 8007f94:	6922      	ldr	r2, [r4, #16]
 8007f96:	f003 0306 	and.w	r3, r3, #6
 8007f9a:	2b04      	cmp	r3, #4
 8007f9c:	bf02      	ittt	eq
 8007f9e:	68e5      	ldreq	r5, [r4, #12]
 8007fa0:	6833      	ldreq	r3, [r6, #0]
 8007fa2:	1aed      	subeq	r5, r5, r3
 8007fa4:	68a3      	ldr	r3, [r4, #8]
 8007fa6:	bf0c      	ite	eq
 8007fa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fac:	2500      	movne	r5, #0
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	bfc4      	itt	gt
 8007fb2:	1a9b      	subgt	r3, r3, r2
 8007fb4:	18ed      	addgt	r5, r5, r3
 8007fb6:	2600      	movs	r6, #0
 8007fb8:	341a      	adds	r4, #26
 8007fba:	42b5      	cmp	r5, r6
 8007fbc:	d11a      	bne.n	8007ff4 <_printf_common+0xc8>
 8007fbe:	2000      	movs	r0, #0
 8007fc0:	e008      	b.n	8007fd4 <_printf_common+0xa8>
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	4652      	mov	r2, sl
 8007fc6:	4641      	mov	r1, r8
 8007fc8:	4638      	mov	r0, r7
 8007fca:	47c8      	blx	r9
 8007fcc:	3001      	adds	r0, #1
 8007fce:	d103      	bne.n	8007fd8 <_printf_common+0xac>
 8007fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fd8:	3501      	adds	r5, #1
 8007fda:	e7c6      	b.n	8007f6a <_printf_common+0x3e>
 8007fdc:	18e1      	adds	r1, r4, r3
 8007fde:	1c5a      	adds	r2, r3, #1
 8007fe0:	2030      	movs	r0, #48	@ 0x30
 8007fe2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007fe6:	4422      	add	r2, r4
 8007fe8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007fec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007ff0:	3302      	adds	r3, #2
 8007ff2:	e7c7      	b.n	8007f84 <_printf_common+0x58>
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	4622      	mov	r2, r4
 8007ff8:	4641      	mov	r1, r8
 8007ffa:	4638      	mov	r0, r7
 8007ffc:	47c8      	blx	r9
 8007ffe:	3001      	adds	r0, #1
 8008000:	d0e6      	beq.n	8007fd0 <_printf_common+0xa4>
 8008002:	3601      	adds	r6, #1
 8008004:	e7d9      	b.n	8007fba <_printf_common+0x8e>
	...

08008008 <_printf_i>:
 8008008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800800c:	7e0f      	ldrb	r7, [r1, #24]
 800800e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008010:	2f78      	cmp	r7, #120	@ 0x78
 8008012:	4691      	mov	r9, r2
 8008014:	4680      	mov	r8, r0
 8008016:	460c      	mov	r4, r1
 8008018:	469a      	mov	sl, r3
 800801a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800801e:	d807      	bhi.n	8008030 <_printf_i+0x28>
 8008020:	2f62      	cmp	r7, #98	@ 0x62
 8008022:	d80a      	bhi.n	800803a <_printf_i+0x32>
 8008024:	2f00      	cmp	r7, #0
 8008026:	f000 80d2 	beq.w	80081ce <_printf_i+0x1c6>
 800802a:	2f58      	cmp	r7, #88	@ 0x58
 800802c:	f000 80b9 	beq.w	80081a2 <_printf_i+0x19a>
 8008030:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008034:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008038:	e03a      	b.n	80080b0 <_printf_i+0xa8>
 800803a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800803e:	2b15      	cmp	r3, #21
 8008040:	d8f6      	bhi.n	8008030 <_printf_i+0x28>
 8008042:	a101      	add	r1, pc, #4	@ (adr r1, 8008048 <_printf_i+0x40>)
 8008044:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008048:	080080a1 	.word	0x080080a1
 800804c:	080080b5 	.word	0x080080b5
 8008050:	08008031 	.word	0x08008031
 8008054:	08008031 	.word	0x08008031
 8008058:	08008031 	.word	0x08008031
 800805c:	08008031 	.word	0x08008031
 8008060:	080080b5 	.word	0x080080b5
 8008064:	08008031 	.word	0x08008031
 8008068:	08008031 	.word	0x08008031
 800806c:	08008031 	.word	0x08008031
 8008070:	08008031 	.word	0x08008031
 8008074:	080081b5 	.word	0x080081b5
 8008078:	080080df 	.word	0x080080df
 800807c:	0800816f 	.word	0x0800816f
 8008080:	08008031 	.word	0x08008031
 8008084:	08008031 	.word	0x08008031
 8008088:	080081d7 	.word	0x080081d7
 800808c:	08008031 	.word	0x08008031
 8008090:	080080df 	.word	0x080080df
 8008094:	08008031 	.word	0x08008031
 8008098:	08008031 	.word	0x08008031
 800809c:	08008177 	.word	0x08008177
 80080a0:	6833      	ldr	r3, [r6, #0]
 80080a2:	1d1a      	adds	r2, r3, #4
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	6032      	str	r2, [r6, #0]
 80080a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80080ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80080b0:	2301      	movs	r3, #1
 80080b2:	e09d      	b.n	80081f0 <_printf_i+0x1e8>
 80080b4:	6833      	ldr	r3, [r6, #0]
 80080b6:	6820      	ldr	r0, [r4, #0]
 80080b8:	1d19      	adds	r1, r3, #4
 80080ba:	6031      	str	r1, [r6, #0]
 80080bc:	0606      	lsls	r6, r0, #24
 80080be:	d501      	bpl.n	80080c4 <_printf_i+0xbc>
 80080c0:	681d      	ldr	r5, [r3, #0]
 80080c2:	e003      	b.n	80080cc <_printf_i+0xc4>
 80080c4:	0645      	lsls	r5, r0, #25
 80080c6:	d5fb      	bpl.n	80080c0 <_printf_i+0xb8>
 80080c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80080cc:	2d00      	cmp	r5, #0
 80080ce:	da03      	bge.n	80080d8 <_printf_i+0xd0>
 80080d0:	232d      	movs	r3, #45	@ 0x2d
 80080d2:	426d      	negs	r5, r5
 80080d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080d8:	4859      	ldr	r0, [pc, #356]	@ (8008240 <_printf_i+0x238>)
 80080da:	230a      	movs	r3, #10
 80080dc:	e011      	b.n	8008102 <_printf_i+0xfa>
 80080de:	6821      	ldr	r1, [r4, #0]
 80080e0:	6833      	ldr	r3, [r6, #0]
 80080e2:	0608      	lsls	r0, r1, #24
 80080e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80080e8:	d402      	bmi.n	80080f0 <_printf_i+0xe8>
 80080ea:	0649      	lsls	r1, r1, #25
 80080ec:	bf48      	it	mi
 80080ee:	b2ad      	uxthmi	r5, r5
 80080f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80080f2:	4853      	ldr	r0, [pc, #332]	@ (8008240 <_printf_i+0x238>)
 80080f4:	6033      	str	r3, [r6, #0]
 80080f6:	bf14      	ite	ne
 80080f8:	230a      	movne	r3, #10
 80080fa:	2308      	moveq	r3, #8
 80080fc:	2100      	movs	r1, #0
 80080fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008102:	6866      	ldr	r6, [r4, #4]
 8008104:	60a6      	str	r6, [r4, #8]
 8008106:	2e00      	cmp	r6, #0
 8008108:	bfa2      	ittt	ge
 800810a:	6821      	ldrge	r1, [r4, #0]
 800810c:	f021 0104 	bicge.w	r1, r1, #4
 8008110:	6021      	strge	r1, [r4, #0]
 8008112:	b90d      	cbnz	r5, 8008118 <_printf_i+0x110>
 8008114:	2e00      	cmp	r6, #0
 8008116:	d04b      	beq.n	80081b0 <_printf_i+0x1a8>
 8008118:	4616      	mov	r6, r2
 800811a:	fbb5 f1f3 	udiv	r1, r5, r3
 800811e:	fb03 5711 	mls	r7, r3, r1, r5
 8008122:	5dc7      	ldrb	r7, [r0, r7]
 8008124:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008128:	462f      	mov	r7, r5
 800812a:	42bb      	cmp	r3, r7
 800812c:	460d      	mov	r5, r1
 800812e:	d9f4      	bls.n	800811a <_printf_i+0x112>
 8008130:	2b08      	cmp	r3, #8
 8008132:	d10b      	bne.n	800814c <_printf_i+0x144>
 8008134:	6823      	ldr	r3, [r4, #0]
 8008136:	07df      	lsls	r7, r3, #31
 8008138:	d508      	bpl.n	800814c <_printf_i+0x144>
 800813a:	6923      	ldr	r3, [r4, #16]
 800813c:	6861      	ldr	r1, [r4, #4]
 800813e:	4299      	cmp	r1, r3
 8008140:	bfde      	ittt	le
 8008142:	2330      	movle	r3, #48	@ 0x30
 8008144:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008148:	f106 36ff 	addle.w	r6, r6, #4294967295
 800814c:	1b92      	subs	r2, r2, r6
 800814e:	6122      	str	r2, [r4, #16]
 8008150:	f8cd a000 	str.w	sl, [sp]
 8008154:	464b      	mov	r3, r9
 8008156:	aa03      	add	r2, sp, #12
 8008158:	4621      	mov	r1, r4
 800815a:	4640      	mov	r0, r8
 800815c:	f7ff fee6 	bl	8007f2c <_printf_common>
 8008160:	3001      	adds	r0, #1
 8008162:	d14a      	bne.n	80081fa <_printf_i+0x1f2>
 8008164:	f04f 30ff 	mov.w	r0, #4294967295
 8008168:	b004      	add	sp, #16
 800816a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800816e:	6823      	ldr	r3, [r4, #0]
 8008170:	f043 0320 	orr.w	r3, r3, #32
 8008174:	6023      	str	r3, [r4, #0]
 8008176:	4833      	ldr	r0, [pc, #204]	@ (8008244 <_printf_i+0x23c>)
 8008178:	2778      	movs	r7, #120	@ 0x78
 800817a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800817e:	6823      	ldr	r3, [r4, #0]
 8008180:	6831      	ldr	r1, [r6, #0]
 8008182:	061f      	lsls	r7, r3, #24
 8008184:	f851 5b04 	ldr.w	r5, [r1], #4
 8008188:	d402      	bmi.n	8008190 <_printf_i+0x188>
 800818a:	065f      	lsls	r7, r3, #25
 800818c:	bf48      	it	mi
 800818e:	b2ad      	uxthmi	r5, r5
 8008190:	6031      	str	r1, [r6, #0]
 8008192:	07d9      	lsls	r1, r3, #31
 8008194:	bf44      	itt	mi
 8008196:	f043 0320 	orrmi.w	r3, r3, #32
 800819a:	6023      	strmi	r3, [r4, #0]
 800819c:	b11d      	cbz	r5, 80081a6 <_printf_i+0x19e>
 800819e:	2310      	movs	r3, #16
 80081a0:	e7ac      	b.n	80080fc <_printf_i+0xf4>
 80081a2:	4827      	ldr	r0, [pc, #156]	@ (8008240 <_printf_i+0x238>)
 80081a4:	e7e9      	b.n	800817a <_printf_i+0x172>
 80081a6:	6823      	ldr	r3, [r4, #0]
 80081a8:	f023 0320 	bic.w	r3, r3, #32
 80081ac:	6023      	str	r3, [r4, #0]
 80081ae:	e7f6      	b.n	800819e <_printf_i+0x196>
 80081b0:	4616      	mov	r6, r2
 80081b2:	e7bd      	b.n	8008130 <_printf_i+0x128>
 80081b4:	6833      	ldr	r3, [r6, #0]
 80081b6:	6825      	ldr	r5, [r4, #0]
 80081b8:	6961      	ldr	r1, [r4, #20]
 80081ba:	1d18      	adds	r0, r3, #4
 80081bc:	6030      	str	r0, [r6, #0]
 80081be:	062e      	lsls	r6, r5, #24
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	d501      	bpl.n	80081c8 <_printf_i+0x1c0>
 80081c4:	6019      	str	r1, [r3, #0]
 80081c6:	e002      	b.n	80081ce <_printf_i+0x1c6>
 80081c8:	0668      	lsls	r0, r5, #25
 80081ca:	d5fb      	bpl.n	80081c4 <_printf_i+0x1bc>
 80081cc:	8019      	strh	r1, [r3, #0]
 80081ce:	2300      	movs	r3, #0
 80081d0:	6123      	str	r3, [r4, #16]
 80081d2:	4616      	mov	r6, r2
 80081d4:	e7bc      	b.n	8008150 <_printf_i+0x148>
 80081d6:	6833      	ldr	r3, [r6, #0]
 80081d8:	1d1a      	adds	r2, r3, #4
 80081da:	6032      	str	r2, [r6, #0]
 80081dc:	681e      	ldr	r6, [r3, #0]
 80081de:	6862      	ldr	r2, [r4, #4]
 80081e0:	2100      	movs	r1, #0
 80081e2:	4630      	mov	r0, r6
 80081e4:	f7f8 f814 	bl	8000210 <memchr>
 80081e8:	b108      	cbz	r0, 80081ee <_printf_i+0x1e6>
 80081ea:	1b80      	subs	r0, r0, r6
 80081ec:	6060      	str	r0, [r4, #4]
 80081ee:	6863      	ldr	r3, [r4, #4]
 80081f0:	6123      	str	r3, [r4, #16]
 80081f2:	2300      	movs	r3, #0
 80081f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80081f8:	e7aa      	b.n	8008150 <_printf_i+0x148>
 80081fa:	6923      	ldr	r3, [r4, #16]
 80081fc:	4632      	mov	r2, r6
 80081fe:	4649      	mov	r1, r9
 8008200:	4640      	mov	r0, r8
 8008202:	47d0      	blx	sl
 8008204:	3001      	adds	r0, #1
 8008206:	d0ad      	beq.n	8008164 <_printf_i+0x15c>
 8008208:	6823      	ldr	r3, [r4, #0]
 800820a:	079b      	lsls	r3, r3, #30
 800820c:	d413      	bmi.n	8008236 <_printf_i+0x22e>
 800820e:	68e0      	ldr	r0, [r4, #12]
 8008210:	9b03      	ldr	r3, [sp, #12]
 8008212:	4298      	cmp	r0, r3
 8008214:	bfb8      	it	lt
 8008216:	4618      	movlt	r0, r3
 8008218:	e7a6      	b.n	8008168 <_printf_i+0x160>
 800821a:	2301      	movs	r3, #1
 800821c:	4632      	mov	r2, r6
 800821e:	4649      	mov	r1, r9
 8008220:	4640      	mov	r0, r8
 8008222:	47d0      	blx	sl
 8008224:	3001      	adds	r0, #1
 8008226:	d09d      	beq.n	8008164 <_printf_i+0x15c>
 8008228:	3501      	adds	r5, #1
 800822a:	68e3      	ldr	r3, [r4, #12]
 800822c:	9903      	ldr	r1, [sp, #12]
 800822e:	1a5b      	subs	r3, r3, r1
 8008230:	42ab      	cmp	r3, r5
 8008232:	dcf2      	bgt.n	800821a <_printf_i+0x212>
 8008234:	e7eb      	b.n	800820e <_printf_i+0x206>
 8008236:	2500      	movs	r5, #0
 8008238:	f104 0619 	add.w	r6, r4, #25
 800823c:	e7f5      	b.n	800822a <_printf_i+0x222>
 800823e:	bf00      	nop
 8008240:	08008461 	.word	0x08008461
 8008244:	08008472 	.word	0x08008472

08008248 <memmove>:
 8008248:	4288      	cmp	r0, r1
 800824a:	b510      	push	{r4, lr}
 800824c:	eb01 0402 	add.w	r4, r1, r2
 8008250:	d902      	bls.n	8008258 <memmove+0x10>
 8008252:	4284      	cmp	r4, r0
 8008254:	4623      	mov	r3, r4
 8008256:	d807      	bhi.n	8008268 <memmove+0x20>
 8008258:	1e43      	subs	r3, r0, #1
 800825a:	42a1      	cmp	r1, r4
 800825c:	d008      	beq.n	8008270 <memmove+0x28>
 800825e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008262:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008266:	e7f8      	b.n	800825a <memmove+0x12>
 8008268:	4402      	add	r2, r0
 800826a:	4601      	mov	r1, r0
 800826c:	428a      	cmp	r2, r1
 800826e:	d100      	bne.n	8008272 <memmove+0x2a>
 8008270:	bd10      	pop	{r4, pc}
 8008272:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008276:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800827a:	e7f7      	b.n	800826c <memmove+0x24>

0800827c <_sbrk_r>:
 800827c:	b538      	push	{r3, r4, r5, lr}
 800827e:	4d06      	ldr	r5, [pc, #24]	@ (8008298 <_sbrk_r+0x1c>)
 8008280:	2300      	movs	r3, #0
 8008282:	4604      	mov	r4, r0
 8008284:	4608      	mov	r0, r1
 8008286:	602b      	str	r3, [r5, #0]
 8008288:	f7f9 fa8c 	bl	80017a4 <_sbrk>
 800828c:	1c43      	adds	r3, r0, #1
 800828e:	d102      	bne.n	8008296 <_sbrk_r+0x1a>
 8008290:	682b      	ldr	r3, [r5, #0]
 8008292:	b103      	cbz	r3, 8008296 <_sbrk_r+0x1a>
 8008294:	6023      	str	r3, [r4, #0]
 8008296:	bd38      	pop	{r3, r4, r5, pc}
 8008298:	20000658 	.word	0x20000658

0800829c <memcpy>:
 800829c:	440a      	add	r2, r1
 800829e:	4291      	cmp	r1, r2
 80082a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80082a4:	d100      	bne.n	80082a8 <memcpy+0xc>
 80082a6:	4770      	bx	lr
 80082a8:	b510      	push	{r4, lr}
 80082aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082b2:	4291      	cmp	r1, r2
 80082b4:	d1f9      	bne.n	80082aa <memcpy+0xe>
 80082b6:	bd10      	pop	{r4, pc}

080082b8 <_realloc_r>:
 80082b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082bc:	4680      	mov	r8, r0
 80082be:	4615      	mov	r5, r2
 80082c0:	460c      	mov	r4, r1
 80082c2:	b921      	cbnz	r1, 80082ce <_realloc_r+0x16>
 80082c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082c8:	4611      	mov	r1, r2
 80082ca:	f7ff bc4b 	b.w	8007b64 <_malloc_r>
 80082ce:	b92a      	cbnz	r2, 80082dc <_realloc_r+0x24>
 80082d0:	f7ff fbdc 	bl	8007a8c <_free_r>
 80082d4:	2400      	movs	r4, #0
 80082d6:	4620      	mov	r0, r4
 80082d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082dc:	f000 f81a 	bl	8008314 <_malloc_usable_size_r>
 80082e0:	4285      	cmp	r5, r0
 80082e2:	4606      	mov	r6, r0
 80082e4:	d802      	bhi.n	80082ec <_realloc_r+0x34>
 80082e6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80082ea:	d8f4      	bhi.n	80082d6 <_realloc_r+0x1e>
 80082ec:	4629      	mov	r1, r5
 80082ee:	4640      	mov	r0, r8
 80082f0:	f7ff fc38 	bl	8007b64 <_malloc_r>
 80082f4:	4607      	mov	r7, r0
 80082f6:	2800      	cmp	r0, #0
 80082f8:	d0ec      	beq.n	80082d4 <_realloc_r+0x1c>
 80082fa:	42b5      	cmp	r5, r6
 80082fc:	462a      	mov	r2, r5
 80082fe:	4621      	mov	r1, r4
 8008300:	bf28      	it	cs
 8008302:	4632      	movcs	r2, r6
 8008304:	f7ff ffca 	bl	800829c <memcpy>
 8008308:	4621      	mov	r1, r4
 800830a:	4640      	mov	r0, r8
 800830c:	f7ff fbbe 	bl	8007a8c <_free_r>
 8008310:	463c      	mov	r4, r7
 8008312:	e7e0      	b.n	80082d6 <_realloc_r+0x1e>

08008314 <_malloc_usable_size_r>:
 8008314:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008318:	1f18      	subs	r0, r3, #4
 800831a:	2b00      	cmp	r3, #0
 800831c:	bfbc      	itt	lt
 800831e:	580b      	ldrlt	r3, [r1, r0]
 8008320:	18c0      	addlt	r0, r0, r3
 8008322:	4770      	bx	lr

08008324 <_init>:
 8008324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008326:	bf00      	nop
 8008328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800832a:	bc08      	pop	{r3}
 800832c:	469e      	mov	lr, r3
 800832e:	4770      	bx	lr

08008330 <_fini>:
 8008330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008332:	bf00      	nop
 8008334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008336:	bc08      	pop	{r3}
 8008338:	469e      	mov	lr, r3
 800833a:	4770      	bx	lr
