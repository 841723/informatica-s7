
SdImageDisplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000919c  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  08009364  08009364  0000a364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009834  08009834  0000b05c  2**0
                  CONTENTS
  4 .ARM          00000008  08009834  08009834  0000a834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800983c  0800983c  0000b05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800983c  0800983c  0000a83c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009840  08009840  0000a840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08009844  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000878  2000005c  080098a0  0000b05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  200008d4  080098a0  0000b8d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012efa  00000000  00000000  0000b08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032a9  00000000  00000000  0001df86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  00021230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cc5  00000000  00000000  00022328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000046df  00000000  00000000  00022fed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001857a  00000000  00000000  000276cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0918  00000000  00000000  0003fc46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013055e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004818  00000000  00000000  001305a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00134dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000005c 	.word	0x2000005c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800934c 	.word	0x0800934c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000060 	.word	0x20000060
 8000204:	0800934c 	.word	0x0800934c

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b09c      	sub	sp, #112	@ 0x70
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fe:	f001 f992 	bl	8001826 <HAL_Init>
  /* USER CODE BEGIN Init */
  uint8_t buff[100];
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000502:	f000 f853 	bl	80005ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000506:	f000 fa31 	bl	800096c <MX_GPIO_Init>
  MX_DMA_Init();
 800050a:	f000 f9bb 	bl	8000884 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 800050e:	f000 f999 	bl	8000844 <MX_SDMMC1_SD_Init>
  MX_DMA2D_Init();
 8000512:	f000 f8b3 	bl	800067c <MX_DMA2D_Init>
  MX_LTDC_Init();
 8000516:	f000 f8e3 	bl	80006e0 <MX_LTDC_Init>
  MX_FMC_Init();
 800051a:	f000 f9d9 	bl	80008d0 <MX_FMC_Init>
  MX_FATFS_Init();
 800051e:	f005 fbb7 	bl	8005c90 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  

  FRESULT res = f_mount(&SDFatFS, SDPath, 0);
 8000522:	2200      	movs	r2, #0
 8000524:	491c      	ldr	r1, [pc, #112]	@ (8000598 <main+0xa0>)
 8000526:	481d      	ldr	r0, [pc, #116]	@ (800059c <main+0xa4>)
 8000528:	f007 ff1e 	bl	8008368 <f_mount>
 800052c:	4603      	mov	r3, r0
 800052e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  if (res == FR_OK)
 8000532:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000536:	2b00      	cmp	r3, #0
 8000538:	d12b      	bne.n	8000592 <main+0x9a>
  {

    res = f_open(&SDFile, "test.txt", FA_WRITE | FA_CREATE_ALWAYS);
 800053a:	220a      	movs	r2, #10
 800053c:	4918      	ldr	r1, [pc, #96]	@ (80005a0 <main+0xa8>)
 800053e:	4819      	ldr	r0, [pc, #100]	@ (80005a4 <main+0xac>)
 8000540:	f007 ff58 	bl	80083f4 <f_open>
 8000544:	4603      	mov	r3, r0
 8000546:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    if (res == FR_OK)
 800054a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800054e:	2b00      	cmp	r3, #0
 8000550:	d108      	bne.n	8000564 <main+0x6c>
    {
      UINT byteswritten;
      f_write(&SDFile, "Hello World!\r\n", 14, (void *)&byteswritten);
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	220e      	movs	r2, #14
 8000556:	4914      	ldr	r1, [pc, #80]	@ (80005a8 <main+0xb0>)
 8000558:	4812      	ldr	r0, [pc, #72]	@ (80005a4 <main+0xac>)
 800055a:	f008 fa54 	bl	8008a06 <f_write>
      f_close(&SDFile);
 800055e:	4811      	ldr	r0, [pc, #68]	@ (80005a4 <main+0xac>)
 8000560:	f008 fc44 	bl	8008dec <f_close>
    }

    res = f_open(&SDFile, "test.txt", FA_READ);
 8000564:	2201      	movs	r2, #1
 8000566:	490e      	ldr	r1, [pc, #56]	@ (80005a0 <main+0xa8>)
 8000568:	480e      	ldr	r0, [pc, #56]	@ (80005a4 <main+0xac>)
 800056a:	f007 ff43 	bl	80083f4 <f_open>
 800056e:	4603      	mov	r3, r0
 8000570:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    if (res == FR_OK)
 8000574:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000578:	2b00      	cmp	r3, #0
 800057a:	d10a      	bne.n	8000592 <main+0x9a>
    {
      UINT bytesread;
      f_read(&SDFile, (void *)buff, sizeof(buff), (void *)&bytesread);
 800057c:	463b      	mov	r3, r7
 800057e:	f107 0108 	add.w	r1, r7, #8
 8000582:	2264      	movs	r2, #100	@ 0x64
 8000584:	4807      	ldr	r0, [pc, #28]	@ (80005a4 <main+0xac>)
 8000586:	f008 f8ff 	bl	8008788 <f_read>
      f_close(&SDFile);
 800058a:	4806      	ldr	r0, [pc, #24]	@ (80005a4 <main+0xac>)
 800058c:	f008 fc2e 	bl	8008dec <f_close>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000590:	bf00      	nop
 8000592:	bf00      	nop
 8000594:	e7fd      	b.n	8000592 <main+0x9a>
 8000596:	bf00      	nop
 8000598:	200002e8 	.word	0x200002e8
 800059c:	200002ec 	.word	0x200002ec
 80005a0:	08009364 	.word	0x08009364
 80005a4:	20000520 	.word	0x20000520
 80005a8:	08009370 	.word	0x08009370

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b094      	sub	sp, #80	@ 0x50
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	f107 0320 	add.w	r3, r7, #32
 80005b6:	2230      	movs	r2, #48	@ 0x30
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f008 fe38 	bl	8009230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d0:	4b28      	ldr	r3, [pc, #160]	@ (8000674 <SystemClock_Config+0xc8>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d4:	4a27      	ldr	r2, [pc, #156]	@ (8000674 <SystemClock_Config+0xc8>)
 80005d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005da:	6413      	str	r3, [r2, #64]	@ 0x40
 80005dc:	4b25      	ldr	r3, [pc, #148]	@ (8000674 <SystemClock_Config+0xc8>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005e4:	60bb      	str	r3, [r7, #8]
 80005e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005e8:	4b23      	ldr	r3, [pc, #140]	@ (8000678 <SystemClock_Config+0xcc>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005f0:	4a21      	ldr	r2, [pc, #132]	@ (8000678 <SystemClock_Config+0xcc>)
 80005f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005f6:	6013      	str	r3, [r2, #0]
 80005f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000678 <SystemClock_Config+0xcc>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000604:	2302      	movs	r3, #2
 8000606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000608:	2301      	movs	r3, #1
 800060a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800060c:	2310      	movs	r3, #16
 800060e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000610:	2302      	movs	r3, #2
 8000612:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000614:	2300      	movs	r3, #0
 8000616:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000618:	2308      	movs	r3, #8
 800061a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800061c:	2332      	movs	r3, #50	@ 0x32
 800061e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000620:	2302      	movs	r3, #2
 8000622:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000624:	2302      	movs	r3, #2
 8000626:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 0320 	add.w	r3, r7, #32
 800062c:	4618      	mov	r0, r3
 800062e:	f002 fb95 	bl	8002d5c <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000638:	f000 fd4e 	bl	80010d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000640:	2302      	movs	r3, #2
 8000642:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000648:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800064c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800064e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000652:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2101      	movs	r1, #1
 800065a:	4618      	mov	r0, r3
 800065c:	f002 fe22 	bl	80032a4 <HAL_RCC_ClockConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000666:	f000 fd37 	bl	80010d8 <Error_Handler>
  }
}
 800066a:	bf00      	nop
 800066c:	3750      	adds	r7, #80	@ 0x50
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40023800 	.word	0x40023800
 8000678:	40007000 	.word	0x40007000

0800067c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000680:	4b15      	ldr	r3, [pc, #84]	@ (80006d8 <MX_DMA2D_Init+0x5c>)
 8000682:	4a16      	ldr	r2, [pc, #88]	@ (80006dc <MX_DMA2D_Init+0x60>)
 8000684:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000686:	4b14      	ldr	r3, [pc, #80]	@ (80006d8 <MX_DMA2D_Init+0x5c>)
 8000688:	2200      	movs	r2, #0
 800068a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 800068c:	4b12      	ldr	r3, [pc, #72]	@ (80006d8 <MX_DMA2D_Init+0x5c>)
 800068e:	2202      	movs	r2, #2
 8000690:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000692:	4b11      	ldr	r3, [pc, #68]	@ (80006d8 <MX_DMA2D_Init+0x5c>)
 8000694:	2200      	movs	r2, #0
 8000696:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000698:	4b0f      	ldr	r3, [pc, #60]	@ (80006d8 <MX_DMA2D_Init+0x5c>)
 800069a:	2200      	movs	r2, #0
 800069c:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 800069e:	4b0e      	ldr	r3, [pc, #56]	@ (80006d8 <MX_DMA2D_Init+0x5c>)
 80006a0:	2202      	movs	r2, #2
 80006a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	@ (80006d8 <MX_DMA2D_Init+0x5c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	@ (80006d8 <MX_DMA2D_Init+0x5c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80006b0:	4809      	ldr	r0, [pc, #36]	@ (80006d8 <MX_DMA2D_Init+0x5c>)
 80006b2:	f001 fdf1 	bl	8002298 <HAL_DMA2D_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80006bc:	f000 fd0c 	bl	80010d8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80006c0:	2101      	movs	r1, #1
 80006c2:	4805      	ldr	r0, [pc, #20]	@ (80006d8 <MX_DMA2D_Init+0x5c>)
 80006c4:	f001 fe32 	bl	800232c <HAL_DMA2D_ConfigLayer>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80006ce:	f000 fd03 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000078 	.word	0x20000078
 80006dc:	4002b000 	.word	0x4002b000

080006e0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b09a      	sub	sp, #104	@ 0x68
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80006e6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80006ea:	2234      	movs	r2, #52	@ 0x34
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f008 fd9e 	bl	8009230 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80006f4:	463b      	mov	r3, r7
 80006f6:	2234      	movs	r2, #52	@ 0x34
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f008 fd98 	bl	8009230 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000700:	4b4e      	ldr	r3, [pc, #312]	@ (800083c <MX_LTDC_Init+0x15c>)
 8000702:	4a4f      	ldr	r2, [pc, #316]	@ (8000840 <MX_LTDC_Init+0x160>)
 8000704:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000706:	4b4d      	ldr	r3, [pc, #308]	@ (800083c <MX_LTDC_Init+0x15c>)
 8000708:	2200      	movs	r2, #0
 800070a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800070c:	4b4b      	ldr	r3, [pc, #300]	@ (800083c <MX_LTDC_Init+0x15c>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000712:	4b4a      	ldr	r3, [pc, #296]	@ (800083c <MX_LTDC_Init+0x15c>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000718:	4b48      	ldr	r3, [pc, #288]	@ (800083c <MX_LTDC_Init+0x15c>)
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800071e:	4b47      	ldr	r3, [pc, #284]	@ (800083c <MX_LTDC_Init+0x15c>)
 8000720:	2207      	movs	r2, #7
 8000722:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000724:	4b45      	ldr	r3, [pc, #276]	@ (800083c <MX_LTDC_Init+0x15c>)
 8000726:	2203      	movs	r2, #3
 8000728:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800072a:	4b44      	ldr	r3, [pc, #272]	@ (800083c <MX_LTDC_Init+0x15c>)
 800072c:	220e      	movs	r2, #14
 800072e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000730:	4b42      	ldr	r3, [pc, #264]	@ (800083c <MX_LTDC_Init+0x15c>)
 8000732:	2205      	movs	r2, #5
 8000734:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8000736:	4b41      	ldr	r3, [pc, #260]	@ (800083c <MX_LTDC_Init+0x15c>)
 8000738:	f240 228e 	movw	r2, #654	@ 0x28e
 800073c:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800073e:	4b3f      	ldr	r3, [pc, #252]	@ (800083c <MX_LTDC_Init+0x15c>)
 8000740:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8000744:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 8000746:	4b3d      	ldr	r3, [pc, #244]	@ (800083c <MX_LTDC_Init+0x15c>)
 8000748:	f44f 7225 	mov.w	r2, #660	@ 0x294
 800074c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 800074e:	4b3b      	ldr	r3, [pc, #236]	@ (800083c <MX_LTDC_Init+0x15c>)
 8000750:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8000754:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000756:	4b39      	ldr	r3, [pc, #228]	@ (800083c <MX_LTDC_Init+0x15c>)
 8000758:	2200      	movs	r2, #0
 800075a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 800075e:	4b37      	ldr	r3, [pc, #220]	@ (800083c <MX_LTDC_Init+0x15c>)
 8000760:	2200      	movs	r2, #0
 8000762:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000766:	4b35      	ldr	r3, [pc, #212]	@ (800083c <MX_LTDC_Init+0x15c>)
 8000768:	2200      	movs	r2, #0
 800076a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800076e:	4833      	ldr	r0, [pc, #204]	@ (800083c <MX_LTDC_Init+0x15c>)
 8000770:	f002 f84c 	bl	800280c <HAL_LTDC_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800077a:	f000 fcad 	bl	80010d8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800078e:	2300      	movs	r3, #0
 8000790:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800079a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800079e:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80007a0:	2305      	movs	r3, #5
 80007a2:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80007c2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80007c6:	2200      	movs	r2, #0
 80007c8:	4619      	mov	r1, r3
 80007ca:	481c      	ldr	r0, [pc, #112]	@ (800083c <MX_LTDC_Init+0x15c>)
 80007cc:	f002 f8ee 	bl	80029ac <HAL_LTDC_ConfigLayer>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80007d6:	f000 fc7f 	bl	80010d8 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80007f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007fa:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80007fc:	2305      	movs	r3, #5
 80007fe:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800081e:	463b      	mov	r3, r7
 8000820:	2201      	movs	r2, #1
 8000822:	4619      	mov	r1, r3
 8000824:	4805      	ldr	r0, [pc, #20]	@ (800083c <MX_LTDC_Init+0x15c>)
 8000826:	f002 f8c1 	bl	80029ac <HAL_LTDC_ConfigLayer>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8000830:	f000 fc52 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	3768      	adds	r7, #104	@ 0x68
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	200000b8 	.word	0x200000b8
 8000840:	40016800 	.word	0x40016800

08000844 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000848:	4b0c      	ldr	r3, [pc, #48]	@ (800087c <MX_SDMMC1_SD_Init+0x38>)
 800084a:	4a0d      	ldr	r2, [pc, #52]	@ (8000880 <MX_SDMMC1_SD_Init+0x3c>)
 800084c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800084e:	4b0b      	ldr	r3, [pc, #44]	@ (800087c <MX_SDMMC1_SD_Init+0x38>)
 8000850:	2200      	movs	r2, #0
 8000852:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000854:	4b09      	ldr	r3, [pc, #36]	@ (800087c <MX_SDMMC1_SD_Init+0x38>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800085a:	4b08      	ldr	r3, [pc, #32]	@ (800087c <MX_SDMMC1_SD_Init+0x38>)
 800085c:	2200      	movs	r2, #0
 800085e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000860:	4b06      	ldr	r3, [pc, #24]	@ (800087c <MX_SDMMC1_SD_Init+0x38>)
 8000862:	2200      	movs	r2, #0
 8000864:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000866:	4b05      	ldr	r3, [pc, #20]	@ (800087c <MX_SDMMC1_SD_Init+0x38>)
 8000868:	2200      	movs	r2, #0
 800086a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800086c:	4b03      	ldr	r3, [pc, #12]	@ (800087c <MX_SDMMC1_SD_Init+0x38>)
 800086e:	2200      	movs	r2, #0
 8000870:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  /* USER CODE END SDMMC1_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	20000160 	.word	0x20000160
 8000880:	40012c00 	.word	0x40012c00

08000884 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800088a:	4b10      	ldr	r3, [pc, #64]	@ (80008cc <MX_DMA_Init+0x48>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	4a0f      	ldr	r2, [pc, #60]	@ (80008cc <MX_DMA_Init+0x48>)
 8000890:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000894:	6313      	str	r3, [r2, #48]	@ 0x30
 8000896:	4b0d      	ldr	r3, [pc, #52]	@ (80008cc <MX_DMA_Init+0x48>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2100      	movs	r1, #0
 80008a6:	203b      	movs	r0, #59	@ 0x3b
 80008a8:	f001 f919 	bl	8001ade <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80008ac:	203b      	movs	r0, #59	@ 0x3b
 80008ae:	f001 f932 	bl	8001b16 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2100      	movs	r1, #0
 80008b6:	2045      	movs	r0, #69	@ 0x45
 80008b8:	f001 f911 	bl	8001ade <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80008bc:	2045      	movs	r0, #69	@ 0x45
 80008be:	f001 f92a 	bl	8001b16 <HAL_NVIC_EnableIRQ>

}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800

080008d0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b088      	sub	sp, #32
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
 80008e4:	615a      	str	r2, [r3, #20]
 80008e6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80008e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000964 <MX_FMC_Init+0x94>)
 80008ea:	4a1f      	ldr	r2, [pc, #124]	@ (8000968 <MX_FMC_Init+0x98>)
 80008ec:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80008ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000964 <MX_FMC_Init+0x94>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80008f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000964 <MX_FMC_Init+0x94>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80008fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000964 <MX_FMC_Init+0x94>)
 80008fc:	2204      	movs	r2, #4
 80008fe:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000900:	4b18      	ldr	r3, [pc, #96]	@ (8000964 <MX_FMC_Init+0x94>)
 8000902:	2210      	movs	r2, #16
 8000904:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000906:	4b17      	ldr	r3, [pc, #92]	@ (8000964 <MX_FMC_Init+0x94>)
 8000908:	2240      	movs	r2, #64	@ 0x40
 800090a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800090c:	4b15      	ldr	r3, [pc, #84]	@ (8000964 <MX_FMC_Init+0x94>)
 800090e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000912:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000914:	4b13      	ldr	r3, [pc, #76]	@ (8000964 <MX_FMC_Init+0x94>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 800091a:	4b12      	ldr	r3, [pc, #72]	@ (8000964 <MX_FMC_Init+0x94>)
 800091c:	2200      	movs	r2, #0
 800091e:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000920:	4b10      	ldr	r3, [pc, #64]	@ (8000964 <MX_FMC_Init+0x94>)
 8000922:	2200      	movs	r2, #0
 8000924:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000926:	4b0f      	ldr	r3, [pc, #60]	@ (8000964 <MX_FMC_Init+0x94>)
 8000928:	2200      	movs	r2, #0
 800092a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800092c:	2302      	movs	r3, #2
 800092e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000930:	2307      	movs	r3, #7
 8000932:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000934:	2304      	movs	r3, #4
 8000936:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000938:	2307      	movs	r3, #7
 800093a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800093c:	2303      	movs	r3, #3
 800093e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000940:	2302      	movs	r3, #2
 8000942:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000944:	2302      	movs	r3, #2
 8000946:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	4619      	mov	r1, r3
 800094c:	4805      	ldr	r0, [pc, #20]	@ (8000964 <MX_FMC_Init+0x94>)
 800094e:	f004 fb73 	bl	8005038 <HAL_SDRAM_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_FMC_Init+0x8c>
  {
    Error_Handler( );
 8000958:	f000 fbbe 	bl	80010d8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800095c:	bf00      	nop
 800095e:	3720      	adds	r7, #32
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	200002a4 	.word	0x200002a4
 8000968:	a0000140 	.word	0xa0000140

0800096c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b090      	sub	sp, #64	@ 0x40
 8000970:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000972:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
 800097e:	60da      	str	r2, [r3, #12]
 8000980:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000982:	4bad      	ldr	r3, [pc, #692]	@ (8000c38 <MX_GPIO_Init+0x2cc>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	4aac      	ldr	r2, [pc, #688]	@ (8000c38 <MX_GPIO_Init+0x2cc>)
 8000988:	f043 0310 	orr.w	r3, r3, #16
 800098c:	6313      	str	r3, [r2, #48]	@ 0x30
 800098e:	4baa      	ldr	r3, [pc, #680]	@ (8000c38 <MX_GPIO_Init+0x2cc>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	f003 0310 	and.w	r3, r3, #16
 8000996:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800099a:	4ba7      	ldr	r3, [pc, #668]	@ (8000c38 <MX_GPIO_Init+0x2cc>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	4aa6      	ldr	r2, [pc, #664]	@ (8000c38 <MX_GPIO_Init+0x2cc>)
 80009a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a6:	4ba4      	ldr	r3, [pc, #656]	@ (8000c38 <MX_GPIO_Init+0x2cc>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80009b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b2:	4ba1      	ldr	r3, [pc, #644]	@ (8000c38 <MX_GPIO_Init+0x2cc>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	4aa0      	ldr	r2, [pc, #640]	@ (8000c38 <MX_GPIO_Init+0x2cc>)
 80009b8:	f043 0302 	orr.w	r3, r3, #2
 80009bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009be:	4b9e      	ldr	r3, [pc, #632]	@ (8000c38 <MX_GPIO_Init+0x2cc>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	f003 0302 	and.w	r3, r3, #2
 80009c6:	623b      	str	r3, [r7, #32]
 80009c8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ca:	4b9b      	ldr	r3, [pc, #620]	@ (8000c38 <MX_GPIO_Init+0x2cc>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	4a9a      	ldr	r2, [pc, #616]	@ (8000c38 <MX_GPIO_Init+0x2cc>)
 80009d0:	f043 0308 	orr.w	r3, r3, #8
 80009d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d6:	4b98      	ldr	r3, [pc, #608]	@ (8000c38 <MX_GPIO_Init+0x2cc>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	f003 0308 	and.w	r3, r3, #8
 80009de:	61fb      	str	r3, [r7, #28]
 80009e0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e2:	4b95      	ldr	r3, [pc, #596]	@ (8000c38 <MX_GPIO_Init+0x2cc>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	4a94      	ldr	r2, [pc, #592]	@ (8000c38 <MX_GPIO_Init+0x2cc>)
 80009e8:	f043 0304 	orr.w	r3, r3, #4
 80009ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ee:	4b92      	ldr	r3, [pc, #584]	@ (8000c38 <MX_GPIO_Init+0x2cc>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	f003 0304 	and.w	r3, r3, #4
 80009f6:	61bb      	str	r3, [r7, #24]
 80009f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	4b8f      	ldr	r3, [pc, #572]	@ (8000c38 <MX_GPIO_Init+0x2cc>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	4a8e      	ldr	r2, [pc, #568]	@ (8000c38 <MX_GPIO_Init+0x2cc>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a06:	4b8c      	ldr	r3, [pc, #560]	@ (8000c38 <MX_GPIO_Init+0x2cc>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	617b      	str	r3, [r7, #20]
 8000a10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000a12:	4b89      	ldr	r3, [pc, #548]	@ (8000c38 <MX_GPIO_Init+0x2cc>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	4a88      	ldr	r2, [pc, #544]	@ (8000c38 <MX_GPIO_Init+0x2cc>)
 8000a18:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1e:	4b86      	ldr	r3, [pc, #536]	@ (8000c38 <MX_GPIO_Init+0x2cc>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a2a:	4b83      	ldr	r3, [pc, #524]	@ (8000c38 <MX_GPIO_Init+0x2cc>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a82      	ldr	r2, [pc, #520]	@ (8000c38 <MX_GPIO_Init+0x2cc>)
 8000a30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a36:	4b80      	ldr	r3, [pc, #512]	@ (8000c38 <MX_GPIO_Init+0x2cc>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000a42:	4b7d      	ldr	r3, [pc, #500]	@ (8000c38 <MX_GPIO_Init+0x2cc>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	4a7c      	ldr	r2, [pc, #496]	@ (8000c38 <MX_GPIO_Init+0x2cc>)
 8000a48:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4e:	4b7a      	ldr	r3, [pc, #488]	@ (8000c38 <MX_GPIO_Init+0x2cc>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a5a:	4b77      	ldr	r3, [pc, #476]	@ (8000c38 <MX_GPIO_Init+0x2cc>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	4a76      	ldr	r2, [pc, #472]	@ (8000c38 <MX_GPIO_Init+0x2cc>)
 8000a60:	f043 0320 	orr.w	r3, r3, #32
 8000a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a66:	4b74      	ldr	r3, [pc, #464]	@ (8000c38 <MX_GPIO_Init+0x2cc>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	f003 0320 	and.w	r3, r3, #32
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a72:	4b71      	ldr	r3, [pc, #452]	@ (8000c38 <MX_GPIO_Init+0x2cc>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	4a70      	ldr	r2, [pc, #448]	@ (8000c38 <MX_GPIO_Init+0x2cc>)
 8000a78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7e:	4b6e      	ldr	r3, [pc, #440]	@ (8000c38 <MX_GPIO_Init+0x2cc>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a86:	603b      	str	r3, [r7, #0]
 8000a88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	2120      	movs	r1, #32
 8000a8e:	486b      	ldr	r0, [pc, #428]	@ (8000c3c <MX_GPIO_Init+0x2d0>)
 8000a90:	f001 fea2 	bl	80027d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	f241 010c 	movw	r1, #4108	@ 0x100c
 8000a9a:	4869      	ldr	r0, [pc, #420]	@ (8000c40 <MX_GPIO_Init+0x2d4>)
 8000a9c:	f001 fe9c 	bl	80027d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2108      	movs	r1, #8
 8000aa4:	4867      	ldr	r0, [pc, #412]	@ (8000c44 <MX_GPIO_Init+0x2d8>)
 8000aa6:	f001 fe97 	bl	80027d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ab0:	4865      	ldr	r0, [pc, #404]	@ (8000c48 <MX_GPIO_Init+0x2dc>)
 8000ab2:	f001 fe91 	bl	80027d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	21c8      	movs	r1, #200	@ 0xc8
 8000aba:	4864      	ldr	r0, [pc, #400]	@ (8000c4c <MX_GPIO_Init+0x2e0>)
 8000abc:	f001 fe8c 	bl	80027d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000ac0:	2308      	movs	r3, #8
 8000ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000acc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	485f      	ldr	r0, [pc, #380]	@ (8000c50 <MX_GPIO_Init+0x2e4>)
 8000ad4:	f001 fcbc 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000ad8:	2304      	movs	r3, #4
 8000ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000adc:	2302      	movs	r3, #2
 8000ade:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000ae8:	2309      	movs	r3, #9
 8000aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000aec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000af0:	4619      	mov	r1, r3
 8000af2:	4857      	ldr	r0, [pc, #348]	@ (8000c50 <MX_GPIO_Init+0x2e4>)
 8000af4:	f001 fcac 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000af8:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8000afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b06:	2303      	movs	r3, #3
 8000b08:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b0a:	230b      	movs	r3, #11
 8000b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b12:	4619      	mov	r1, r3
 8000b14:	484d      	ldr	r0, [pc, #308]	@ (8000c4c <MX_GPIO_Init+0x2e0>)
 8000b16:	f001 fc9b 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000b1a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b20:	2312      	movs	r3, #18
 8000b22:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b30:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b34:	4619      	mov	r1, r3
 8000b36:	4847      	ldr	r0, [pc, #284]	@ (8000c54 <MX_GPIO_Init+0x2e8>)
 8000b38:	f001 fc8a 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000b3c:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8000b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b42:	2302      	movs	r3, #2
 8000b44:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000b4e:	230a      	movs	r3, #10
 8000b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b56:	4619      	mov	r1, r3
 8000b58:	483e      	ldr	r0, [pc, #248]	@ (8000c54 <MX_GPIO_Init+0x2e8>)
 8000b5a:	f001 fc79 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000b5e:	2310      	movs	r3, #16
 8000b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	2302      	movs	r3, #2
 8000b64:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000b72:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b76:	4619      	mov	r1, r3
 8000b78:	4836      	ldr	r0, [pc, #216]	@ (8000c54 <MX_GPIO_Init+0x2e8>)
 8000b7a:	f001 fc69 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000b7e:	2380      	movs	r3, #128	@ 0x80
 8000b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000b8e:	2308      	movs	r3, #8
 8000b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000b92:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b96:	4619      	mov	r1, r3
 8000b98:	4828      	ldr	r0, [pc, #160]	@ (8000c3c <MX_GPIO_Init+0x2d0>)
 8000b9a:	f001 fc59 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000b9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	2300      	movs	r3, #0
 8000bae:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4827      	ldr	r0, [pc, #156]	@ (8000c58 <MX_GPIO_Init+0x2ec>)
 8000bbc:	f001 fc48 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000bc0:	2360      	movs	r3, #96	@ 0x60
 8000bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000bd0:	230d      	movs	r3, #13
 8000bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bd8:	4619      	mov	r1, r3
 8000bda:	481d      	ldr	r0, [pc, #116]	@ (8000c50 <MX_GPIO_Init+0x2e4>)
 8000bdc:	f001 fc38 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000be0:	2380      	movs	r3, #128	@ 0x80
 8000be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bf0:	2307      	movs	r3, #7
 8000bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000bf4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4816      	ldr	r0, [pc, #88]	@ (8000c54 <MX_GPIO_Init+0x2e8>)
 8000bfc:	f001 fc28 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000c00:	2340      	movs	r3, #64	@ 0x40
 8000c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c04:	2302      	movs	r3, #2
 8000c06:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000c10:	230a      	movs	r3, #10
 8000c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000c14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c18:	4619      	mov	r1, r3
 8000c1a:	480e      	ldr	r0, [pc, #56]	@ (8000c54 <MX_GPIO_Init+0x2e8>)
 8000c1c:	f001 fc18 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000c20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c26:	2300      	movs	r3, #0
 8000c28:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c32:	4619      	mov	r1, r3
 8000c34:	e012      	b.n	8000c5c <MX_GPIO_Init+0x2f0>
 8000c36:	bf00      	nop
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020c00 	.word	0x40020c00
 8000c40:	40022000 	.word	0x40022000
 8000c44:	40022800 	.word	0x40022800
 8000c48:	40021c00 	.word	0x40021c00
 8000c4c:	40021800 	.word	0x40021800
 8000c50:	40021000 	.word	0x40021000
 8000c54:	40020400 	.word	0x40020400
 8000c58:	40020000 	.word	0x40020000
 8000c5c:	48bc      	ldr	r0, [pc, #752]	@ (8000f50 <MX_GPIO_Init+0x5e4>)
 8000c5e:	f001 fbf7 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000c62:	2340      	movs	r3, #64	@ 0x40
 8000c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c66:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000c6a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000c70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c74:	4619      	mov	r1, r3
 8000c76:	48b7      	ldr	r0, [pc, #732]	@ (8000f54 <MX_GPIO_Init+0x5e8>)
 8000c78:	f001 fbea 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000c7c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c8e:	230a      	movs	r3, #10
 8000c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c92:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c96:	4619      	mov	r1, r3
 8000c98:	48af      	ldr	r0, [pc, #700]	@ (8000f58 <MX_GPIO_Init+0x5ec>)
 8000c9a:	f001 fbd9 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000c9e:	23f0      	movs	r3, #240	@ 0xf0
 8000ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000cae:	230a      	movs	r3, #10
 8000cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000cb2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	48a8      	ldr	r0, [pc, #672]	@ (8000f5c <MX_GPIO_Init+0x5f0>)
 8000cba:	f001 fbc9 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000cbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000cd0:	230a      	movs	r3, #10
 8000cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000cd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cd8:	4619      	mov	r1, r3
 8000cda:	48a1      	ldr	r0, [pc, #644]	@ (8000f60 <MX_GPIO_Init+0x5f4>)
 8000cdc:	f001 fbb8 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000ce0:	2320      	movs	r3, #32
 8000ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cec:	2300      	movs	r3, #0
 8000cee:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cf0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4897      	ldr	r0, [pc, #604]	@ (8000f54 <MX_GPIO_Init+0x5e8>)
 8000cf8:	f001 fbaa 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000cfc:	2308      	movs	r3, #8
 8000cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d0c:	230d      	movs	r3, #13
 8000d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000d10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d14:	4619      	mov	r1, r3
 8000d16:	488f      	ldr	r0, [pc, #572]	@ (8000f54 <MX_GPIO_Init+0x5e8>)
 8000d18:	f001 fb9a 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000d1c:	f241 030c 	movw	r3, #4108	@ 0x100c
 8000d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d22:	2301      	movs	r3, #1
 8000d24:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d32:	4619      	mov	r1, r3
 8000d34:	4889      	ldr	r0, [pc, #548]	@ (8000f5c <MX_GPIO_Init+0x5f0>)
 8000d36:	f001 fb8b 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000d3a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d40:	2300      	movs	r3, #0
 8000d42:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d44:	2301      	movs	r3, #1
 8000d46:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000d48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4885      	ldr	r0, [pc, #532]	@ (8000f64 <MX_GPIO_Init+0x5f8>)
 8000d50:	f001 fb7e 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000d54:	2308      	movs	r3, #8
 8000d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2300      	movs	r3, #0
 8000d62:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000d64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d68:	4619      	mov	r1, r3
 8000d6a:	487f      	ldr	r0, [pc, #508]	@ (8000f68 <MX_GPIO_Init+0x5fc>)
 8000d6c:	f001 fb70 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000d70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	2302      	movs	r3, #2
 8000d78:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d82:	230d      	movs	r3, #13
 8000d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000d86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4874      	ldr	r0, [pc, #464]	@ (8000f60 <MX_GPIO_Init+0x5f4>)
 8000d8e:	f001 fb5f 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000d92:	2310      	movs	r3, #16
 8000d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d96:	2300      	movs	r3, #0
 8000d98:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d9e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000da2:	4619      	mov	r1, r3
 8000da4:	486b      	ldr	r0, [pc, #428]	@ (8000f54 <MX_GPIO_Init+0x5e8>)
 8000da6:	f001 fb53 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000daa:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db0:	2300      	movs	r3, #0
 8000db2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000db8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	486b      	ldr	r0, [pc, #428]	@ (8000f6c <MX_GPIO_Init+0x600>)
 8000dc0:	f001 fb46 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dd4:	2305      	movs	r3, #5
 8000dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8000dd8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ddc:	4619      	mov	r1, r3
 8000dde:	485f      	ldr	r0, [pc, #380]	@ (8000f5c <MX_GPIO_Init+0x5f0>)
 8000de0:	f001 fb36 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000de4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dea:	2301      	movs	r3, #1
 8000dec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	2300      	movs	r3, #0
 8000df4:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000df6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	485b      	ldr	r0, [pc, #364]	@ (8000f6c <MX_GPIO_Init+0x600>)
 8000dfe:	f001 fb27 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000e02:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8000e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e14:	230d      	movs	r3, #13
 8000e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4853      	ldr	r0, [pc, #332]	@ (8000f6c <MX_GPIO_Init+0x600>)
 8000e20:	f001 fb16 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000e24:	2301      	movs	r3, #1
 8000e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e30:	2300      	movs	r3, #0
 8000e32:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000e34:	2302      	movs	r3, #2
 8000e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000e38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4847      	ldr	r0, [pc, #284]	@ (8000f5c <MX_GPIO_Init+0x5f0>)
 8000e40:	f001 fb06 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000e44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e56:	2307      	movs	r3, #7
 8000e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000e5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e5e:	4619      	mov	r1, r3
 8000e60:	483d      	ldr	r0, [pc, #244]	@ (8000f58 <MX_GPIO_Init+0x5ec>)
 8000e62:	f001 faf5 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000e66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e74:	2300      	movs	r3, #0
 8000e76:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e80:	4619      	mov	r1, r3
 8000e82:	4835      	ldr	r0, [pc, #212]	@ (8000f58 <MX_GPIO_Init+0x5ec>)
 8000e84:	f001 fae4 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000e88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e8e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000e92:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000e98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	482f      	ldr	r0, [pc, #188]	@ (8000f5c <MX_GPIO_Init+0x5f0>)
 8000ea0:	f001 fad6 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000ea4:	23c0      	movs	r3, #192	@ 0xc0
 8000ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000eb4:	2308      	movs	r3, #8
 8000eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4829      	ldr	r0, [pc, #164]	@ (8000f64 <MX_GPIO_Init+0x5f8>)
 8000ec0:	f001 fac6 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000ec4:	2310      	movs	r3, #16
 8000ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000ed4:	230a      	movs	r3, #10
 8000ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000ed8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000edc:	4619      	mov	r1, r3
 8000ede:	4823      	ldr	r0, [pc, #140]	@ (8000f6c <MX_GPIO_Init+0x600>)
 8000ee0:	f001 fab6 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000ee4:	23c8      	movs	r3, #200	@ 0xc8
 8000ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ef4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4819      	ldr	r0, [pc, #100]	@ (8000f60 <MX_GPIO_Init+0x5f4>)
 8000efc:	f001 faa8 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000f00:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8000f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f06:	2303      	movs	r3, #3
 8000f08:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f12:	4619      	mov	r1, r3
 8000f14:	4816      	ldr	r0, [pc, #88]	@ (8000f70 <MX_GPIO_Init+0x604>)
 8000f16:	f001 fa9b 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000f1a:	2305      	movs	r3, #5
 8000f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f26:	2303      	movs	r3, #3
 8000f28:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000f2a:	230a      	movs	r3, #10
 8000f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f32:	4619      	mov	r1, r3
 8000f34:	480b      	ldr	r0, [pc, #44]	@ (8000f64 <MX_GPIO_Init+0x5f8>)
 8000f36:	f001 fa8b 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f3a:	2332      	movs	r3, #50	@ 0x32
 8000f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f46:	2303      	movs	r3, #3
 8000f48:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f4a:	230b      	movs	r3, #11
 8000f4c:	e012      	b.n	8000f74 <MX_GPIO_Init+0x608>
 8000f4e:	bf00      	nop
 8000f50:	40022400 	.word	0x40022400
 8000f54:	40020c00 	.word	0x40020c00
 8000f58:	40020000 	.word	0x40020000
 8000f5c:	40022000 	.word	0x40022000
 8000f60:	40021800 	.word	0x40021800
 8000f64:	40020800 	.word	0x40020800
 8000f68:	40022800 	.word	0x40022800
 8000f6c:	40021c00 	.word	0x40021c00
 8000f70:	40021400 	.word	0x40021400
 8000f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4850      	ldr	r0, [pc, #320]	@ (80010c0 <MX_GPIO_Init+0x754>)
 8000f7e:	f001 fa67 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f82:	2304      	movs	r3, #4
 8000f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000f92:	2309      	movs	r3, #9
 8000f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4849      	ldr	r0, [pc, #292]	@ (80010c4 <MX_GPIO_Init+0x758>)
 8000f9e:	f001 fa57 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000fa2:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000fb4:	2309      	movs	r3, #9
 8000fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fb8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4842      	ldr	r0, [pc, #264]	@ (80010c8 <MX_GPIO_Init+0x75c>)
 8000fc0:	f001 fa46 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000fc4:	2304      	movs	r3, #4
 8000fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000fd0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	483d      	ldr	r0, [pc, #244]	@ (80010cc <MX_GPIO_Init+0x760>)
 8000fd8:	f001 fa3a 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000fdc:	2386      	movs	r3, #134	@ 0x86
 8000fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fec:	230b      	movs	r3, #11
 8000fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4836      	ldr	r0, [pc, #216]	@ (80010d0 <MX_GPIO_Init+0x764>)
 8000ff8:	f001 fa2a 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001000:	2303      	movs	r3, #3
 8001002:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001008:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800100c:	4619      	mov	r1, r3
 800100e:	4830      	ldr	r0, [pc, #192]	@ (80010d0 <MX_GPIO_Init+0x764>)
 8001010:	f001 fa1e 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001014:	2350      	movs	r3, #80	@ 0x50
 8001016:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	2302      	movs	r3, #2
 800101a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	2300      	movs	r3, #0
 8001022:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001024:	230d      	movs	r3, #13
 8001026:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001028:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800102c:	4619      	mov	r1, r3
 800102e:	4828      	ldr	r0, [pc, #160]	@ (80010d0 <MX_GPIO_Init+0x764>)
 8001030:	f001 fa0e 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001034:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001038:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800103a:	2312      	movs	r3, #18
 800103c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001042:	2303      	movs	r3, #3
 8001044:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001046:	2304      	movs	r3, #4
 8001048:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800104a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800104e:	4619      	mov	r1, r3
 8001050:	4820      	ldr	r0, [pc, #128]	@ (80010d4 <MX_GPIO_Init+0x768>)
 8001052:	f001 f9fd 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001056:	2328      	movs	r3, #40	@ 0x28
 8001058:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001062:	2303      	movs	r3, #3
 8001064:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001066:	230a      	movs	r3, #10
 8001068:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800106e:	4619      	mov	r1, r3
 8001070:	4817      	ldr	r0, [pc, #92]	@ (80010d0 <MX_GPIO_Init+0x764>)
 8001072:	f001 f9ed 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001076:	2340      	movs	r3, #64	@ 0x40
 8001078:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107a:	2302      	movs	r3, #2
 800107c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	2300      	movs	r3, #0
 8001084:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001086:	2309      	movs	r3, #9
 8001088:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800108a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800108e:	4619      	mov	r1, r3
 8001090:	4810      	ldr	r0, [pc, #64]	@ (80010d4 <MX_GPIO_Init+0x768>)
 8001092:	f001 f9dd 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001096:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800109a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109c:	2302      	movs	r3, #2
 800109e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2300      	movs	r3, #0
 80010a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010a8:	2305      	movs	r3, #5
 80010aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010b0:	4619      	mov	r1, r3
 80010b2:	4804      	ldr	r0, [pc, #16]	@ (80010c4 <MX_GPIO_Init+0x758>)
 80010b4:	f001 f9cc 	bl	8002450 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010b8:	bf00      	nop
 80010ba:	3740      	adds	r7, #64	@ 0x40
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40020800 	.word	0x40020800
 80010c4:	40020400 	.word	0x40020400
 80010c8:	40020c00 	.word	0x40020c00
 80010cc:	40021800 	.word	0x40021800
 80010d0:	40020000 	.word	0x40020000
 80010d4:	40021c00 	.word	0x40021c00

080010d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010dc:	b672      	cpsid	i
}
 80010de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010e0:	bf00      	nop
 80010e2:	e7fd      	b.n	80010e0 <Error_Handler+0x8>

080010e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001128 <HAL_MspInit+0x44>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001128 <HAL_MspInit+0x44>)
 80010f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001128 <HAL_MspInit+0x44>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001102:	4b09      	ldr	r3, [pc, #36]	@ (8001128 <HAL_MspInit+0x44>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001106:	4a08      	ldr	r2, [pc, #32]	@ (8001128 <HAL_MspInit+0x44>)
 8001108:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800110c:	6453      	str	r3, [r2, #68]	@ 0x44
 800110e:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <HAL_MspInit+0x44>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001112:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001116:	603b      	str	r3, [r7, #0]
 8001118:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	40023800 	.word	0x40023800

0800112c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a0a      	ldr	r2, [pc, #40]	@ (8001164 <HAL_DMA2D_MspInit+0x38>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d10b      	bne.n	8001156 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800113e:	4b0a      	ldr	r3, [pc, #40]	@ (8001168 <HAL_DMA2D_MspInit+0x3c>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	4a09      	ldr	r2, [pc, #36]	@ (8001168 <HAL_DMA2D_MspInit+0x3c>)
 8001144:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001148:	6313      	str	r3, [r2, #48]	@ 0x30
 800114a:	4b07      	ldr	r3, [pc, #28]	@ (8001168 <HAL_DMA2D_MspInit+0x3c>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001156:	bf00      	nop
 8001158:	3714      	adds	r7, #20
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	4002b000 	.word	0x4002b000
 8001168:	40023800 	.word	0x40023800

0800116c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b0ae      	sub	sp, #184	@ 0xb8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001184:	f107 0320 	add.w	r3, r7, #32
 8001188:	2284      	movs	r2, #132	@ 0x84
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f008 f84f 	bl	8009230 <memset>
  if(hltdc->Instance==LTDC)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a6a      	ldr	r2, [pc, #424]	@ (8001340 <HAL_LTDC_MspInit+0x1d4>)
 8001198:	4293      	cmp	r3, r2
 800119a:	f040 80cc 	bne.w	8001336 <HAL_LTDC_MspInit+0x1ca>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800119e:	2308      	movs	r3, #8
 80011a0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80011a2:	2332      	movs	r3, #50	@ 0x32
 80011a4:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80011a6:	2302      	movs	r3, #2
 80011a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80011aa:	2302      	movs	r3, #2
 80011ac:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80011ae:	2300      	movs	r3, #0
 80011b0:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80011b2:	2301      	movs	r3, #1
 80011b4:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80011b6:	2300      	movs	r3, #0
 80011b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ba:	f107 0320 	add.w	r3, r7, #32
 80011be:	4618      	mov	r0, r3
 80011c0:	f002 fa22 	bl	8003608 <HAL_RCCEx_PeriphCLKConfig>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <HAL_LTDC_MspInit+0x62>
    {
      Error_Handler();
 80011ca:	f7ff ff85 	bl	80010d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80011ce:	4b5d      	ldr	r3, [pc, #372]	@ (8001344 <HAL_LTDC_MspInit+0x1d8>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d2:	4a5c      	ldr	r2, [pc, #368]	@ (8001344 <HAL_LTDC_MspInit+0x1d8>)
 80011d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80011d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011da:	4b5a      	ldr	r3, [pc, #360]	@ (8001344 <HAL_LTDC_MspInit+0x1d8>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011de:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80011e2:	61fb      	str	r3, [r7, #28]
 80011e4:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011e6:	4b57      	ldr	r3, [pc, #348]	@ (8001344 <HAL_LTDC_MspInit+0x1d8>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	4a56      	ldr	r2, [pc, #344]	@ (8001344 <HAL_LTDC_MspInit+0x1d8>)
 80011ec:	f043 0310 	orr.w	r3, r3, #16
 80011f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f2:	4b54      	ldr	r3, [pc, #336]	@ (8001344 <HAL_LTDC_MspInit+0x1d8>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	f003 0310 	and.w	r3, r3, #16
 80011fa:	61bb      	str	r3, [r7, #24]
 80011fc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80011fe:	4b51      	ldr	r3, [pc, #324]	@ (8001344 <HAL_LTDC_MspInit+0x1d8>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001202:	4a50      	ldr	r2, [pc, #320]	@ (8001344 <HAL_LTDC_MspInit+0x1d8>)
 8001204:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001208:	6313      	str	r3, [r2, #48]	@ 0x30
 800120a:	4b4e      	ldr	r3, [pc, #312]	@ (8001344 <HAL_LTDC_MspInit+0x1d8>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001212:	617b      	str	r3, [r7, #20]
 8001214:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001216:	4b4b      	ldr	r3, [pc, #300]	@ (8001344 <HAL_LTDC_MspInit+0x1d8>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	4a4a      	ldr	r2, [pc, #296]	@ (8001344 <HAL_LTDC_MspInit+0x1d8>)
 800121c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001220:	6313      	str	r3, [r2, #48]	@ 0x30
 8001222:	4b48      	ldr	r3, [pc, #288]	@ (8001344 <HAL_LTDC_MspInit+0x1d8>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800122e:	4b45      	ldr	r3, [pc, #276]	@ (8001344 <HAL_LTDC_MspInit+0x1d8>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	4a44      	ldr	r2, [pc, #272]	@ (8001344 <HAL_LTDC_MspInit+0x1d8>)
 8001234:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001238:	6313      	str	r3, [r2, #48]	@ 0x30
 800123a:	4b42      	ldr	r3, [pc, #264]	@ (8001344 <HAL_LTDC_MspInit+0x1d8>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001246:	4b3f      	ldr	r3, [pc, #252]	@ (8001344 <HAL_LTDC_MspInit+0x1d8>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	4a3e      	ldr	r2, [pc, #248]	@ (8001344 <HAL_LTDC_MspInit+0x1d8>)
 800124c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001250:	6313      	str	r3, [r2, #48]	@ 0x30
 8001252:	4b3c      	ldr	r3, [pc, #240]	@ (8001344 <HAL_LTDC_MspInit+0x1d8>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800125e:	2310      	movs	r3, #16
 8001260:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001270:	2300      	movs	r3, #0
 8001272:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001276:	230e      	movs	r3, #14
 8001278:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800127c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001280:	4619      	mov	r1, r3
 8001282:	4831      	ldr	r0, [pc, #196]	@ (8001348 <HAL_LTDC_MspInit+0x1dc>)
 8001284:	f001 f8e4 	bl	8002450 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001288:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 800128c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012a2:	230e      	movs	r3, #14
 80012a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80012a8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012ac:	4619      	mov	r1, r3
 80012ae:	4827      	ldr	r0, [pc, #156]	@ (800134c <HAL_LTDC_MspInit+0x1e0>)
 80012b0:	f001 f8ce 	bl	8002450 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80012b4:	23f7      	movs	r3, #247	@ 0xf7
 80012b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ba:	2302      	movs	r3, #2
 80012bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2300      	movs	r3, #0
 80012c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012cc:	230e      	movs	r3, #14
 80012ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80012d2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012d6:	4619      	mov	r1, r3
 80012d8:	481d      	ldr	r0, [pc, #116]	@ (8001350 <HAL_LTDC_MspInit+0x1e4>)
 80012da:	f001 f8b9 	bl	8002450 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80012de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e6:	2302      	movs	r3, #2
 80012e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f2:	2300      	movs	r3, #0
 80012f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80012f8:	2309      	movs	r3, #9
 80012fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80012fe:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001302:	4619      	mov	r1, r3
 8001304:	4813      	ldr	r0, [pc, #76]	@ (8001354 <HAL_LTDC_MspInit+0x1e8>)
 8001306:	f001 f8a3 	bl	8002450 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800130a:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 800130e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001312:	2302      	movs	r3, #2
 8001314:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001324:	230e      	movs	r3, #14
 8001326:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800132a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800132e:	4619      	mov	r1, r3
 8001330:	4809      	ldr	r0, [pc, #36]	@ (8001358 <HAL_LTDC_MspInit+0x1ec>)
 8001332:	f001 f88d 	bl	8002450 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001336:	bf00      	nop
 8001338:	37b8      	adds	r7, #184	@ 0xb8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40016800 	.word	0x40016800
 8001344:	40023800 	.word	0x40023800
 8001348:	40021000 	.word	0x40021000
 800134c:	40022400 	.word	0x40022400
 8001350:	40022800 	.word	0x40022800
 8001354:	40021800 	.word	0x40021800
 8001358:	40022000 	.word	0x40022000

0800135c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b0ac      	sub	sp, #176	@ 0xb0
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001374:	f107 0318 	add.w	r3, r7, #24
 8001378:	2284      	movs	r2, #132	@ 0x84
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f007 ff57 	bl	8009230 <memset>
  if(hsd->Instance==SDMMC1)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a73      	ldr	r2, [pc, #460]	@ (8001554 <HAL_SD_MspInit+0x1f8>)
 8001388:	4293      	cmp	r3, r2
 800138a:	f040 80de 	bne.w	800154a <HAL_SD_MspInit+0x1ee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 800138e:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8001392:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_SYSCLK;
 8001394:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001398:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800139c:	f107 0318 	add.w	r3, r7, #24
 80013a0:	4618      	mov	r0, r3
 80013a2:	f002 f931 	bl	8003608 <HAL_RCCEx_PeriphCLKConfig>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80013ac:	f7ff fe94 	bl	80010d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80013b0:	4b69      	ldr	r3, [pc, #420]	@ (8001558 <HAL_SD_MspInit+0x1fc>)
 80013b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b4:	4a68      	ldr	r2, [pc, #416]	@ (8001558 <HAL_SD_MspInit+0x1fc>)
 80013b6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80013ba:	6453      	str	r3, [r2, #68]	@ 0x44
 80013bc:	4b66      	ldr	r3, [pc, #408]	@ (8001558 <HAL_SD_MspInit+0x1fc>)
 80013be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013c4:	617b      	str	r3, [r7, #20]
 80013c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c8:	4b63      	ldr	r3, [pc, #396]	@ (8001558 <HAL_SD_MspInit+0x1fc>)
 80013ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013cc:	4a62      	ldr	r2, [pc, #392]	@ (8001558 <HAL_SD_MspInit+0x1fc>)
 80013ce:	f043 0304 	orr.w	r3, r3, #4
 80013d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d4:	4b60      	ldr	r3, [pc, #384]	@ (8001558 <HAL_SD_MspInit+0x1fc>)
 80013d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e0:	4b5d      	ldr	r3, [pc, #372]	@ (8001558 <HAL_SD_MspInit+0x1fc>)
 80013e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e4:	4a5c      	ldr	r2, [pc, #368]	@ (8001558 <HAL_SD_MspInit+0x1fc>)
 80013e6:	f043 0308 	orr.w	r3, r3, #8
 80013ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ec:	4b5a      	ldr	r3, [pc, #360]	@ (8001558 <HAL_SD_MspInit+0x1fc>)
 80013ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f0:	f003 0308 	and.w	r3, r3, #8
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80013f8:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80013fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	2302      	movs	r3, #2
 8001402:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140c:	2303      	movs	r3, #3
 800140e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001412:	230c      	movs	r3, #12
 8001414:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001418:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800141c:	4619      	mov	r1, r3
 800141e:	484f      	ldr	r0, [pc, #316]	@ (800155c <HAL_SD_MspInit+0x200>)
 8001420:	f001 f816 	bl	8002450 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8001424:	2304      	movs	r3, #4
 8001426:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001436:	2303      	movs	r3, #3
 8001438:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800143c:	230c      	movs	r3, #12
 800143e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8001442:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001446:	4619      	mov	r1, r3
 8001448:	4845      	ldr	r0, [pc, #276]	@ (8001560 <HAL_SD_MspInit+0x204>)
 800144a:	f001 f801 	bl	8002450 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 800144e:	4b45      	ldr	r3, [pc, #276]	@ (8001564 <HAL_SD_MspInit+0x208>)
 8001450:	4a45      	ldr	r2, [pc, #276]	@ (8001568 <HAL_SD_MspInit+0x20c>)
 8001452:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8001454:	4b43      	ldr	r3, [pc, #268]	@ (8001564 <HAL_SD_MspInit+0x208>)
 8001456:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800145a:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800145c:	4b41      	ldr	r3, [pc, #260]	@ (8001564 <HAL_SD_MspInit+0x208>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001462:	4b40      	ldr	r3, [pc, #256]	@ (8001564 <HAL_SD_MspInit+0x208>)
 8001464:	2200      	movs	r2, #0
 8001466:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001468:	4b3e      	ldr	r3, [pc, #248]	@ (8001564 <HAL_SD_MspInit+0x208>)
 800146a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800146e:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001470:	4b3c      	ldr	r3, [pc, #240]	@ (8001564 <HAL_SD_MspInit+0x208>)
 8001472:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001476:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001478:	4b3a      	ldr	r3, [pc, #232]	@ (8001564 <HAL_SD_MspInit+0x208>)
 800147a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800147e:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8001480:	4b38      	ldr	r3, [pc, #224]	@ (8001564 <HAL_SD_MspInit+0x208>)
 8001482:	2220      	movs	r2, #32
 8001484:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001486:	4b37      	ldr	r3, [pc, #220]	@ (8001564 <HAL_SD_MspInit+0x208>)
 8001488:	2200      	movs	r2, #0
 800148a:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800148c:	4b35      	ldr	r3, [pc, #212]	@ (8001564 <HAL_SD_MspInit+0x208>)
 800148e:	2204      	movs	r2, #4
 8001490:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001492:	4b34      	ldr	r3, [pc, #208]	@ (8001564 <HAL_SD_MspInit+0x208>)
 8001494:	2203      	movs	r2, #3
 8001496:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001498:	4b32      	ldr	r3, [pc, #200]	@ (8001564 <HAL_SD_MspInit+0x208>)
 800149a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800149e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80014a0:	4b30      	ldr	r3, [pc, #192]	@ (8001564 <HAL_SD_MspInit+0x208>)
 80014a2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80014a6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80014a8:	482e      	ldr	r0, [pc, #184]	@ (8001564 <HAL_SD_MspInit+0x208>)
 80014aa:	f000 fb4f 	bl	8001b4c <HAL_DMA_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <HAL_SD_MspInit+0x15c>
    {
      Error_Handler();
 80014b4:	f7ff fe10 	bl	80010d8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4a2a      	ldr	r2, [pc, #168]	@ (8001564 <HAL_SD_MspInit+0x208>)
 80014bc:	641a      	str	r2, [r3, #64]	@ 0x40
 80014be:	4a29      	ldr	r2, [pc, #164]	@ (8001564 <HAL_SD_MspInit+0x208>)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 80014c4:	4b29      	ldr	r3, [pc, #164]	@ (800156c <HAL_SD_MspInit+0x210>)
 80014c6:	4a2a      	ldr	r2, [pc, #168]	@ (8001570 <HAL_SD_MspInit+0x214>)
 80014c8:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80014ca:	4b28      	ldr	r3, [pc, #160]	@ (800156c <HAL_SD_MspInit+0x210>)
 80014cc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80014d0:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014d2:	4b26      	ldr	r3, [pc, #152]	@ (800156c <HAL_SD_MspInit+0x210>)
 80014d4:	2240      	movs	r2, #64	@ 0x40
 80014d6:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014d8:	4b24      	ldr	r3, [pc, #144]	@ (800156c <HAL_SD_MspInit+0x210>)
 80014da:	2200      	movs	r2, #0
 80014dc:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014de:	4b23      	ldr	r3, [pc, #140]	@ (800156c <HAL_SD_MspInit+0x210>)
 80014e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014e4:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014e6:	4b21      	ldr	r3, [pc, #132]	@ (800156c <HAL_SD_MspInit+0x210>)
 80014e8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014ec:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014ee:	4b1f      	ldr	r3, [pc, #124]	@ (800156c <HAL_SD_MspInit+0x210>)
 80014f0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014f4:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80014f6:	4b1d      	ldr	r3, [pc, #116]	@ (800156c <HAL_SD_MspInit+0x210>)
 80014f8:	2220      	movs	r2, #32
 80014fa:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014fc:	4b1b      	ldr	r3, [pc, #108]	@ (800156c <HAL_SD_MspInit+0x210>)
 80014fe:	2200      	movs	r2, #0
 8001500:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001502:	4b1a      	ldr	r3, [pc, #104]	@ (800156c <HAL_SD_MspInit+0x210>)
 8001504:	2204      	movs	r2, #4
 8001506:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001508:	4b18      	ldr	r3, [pc, #96]	@ (800156c <HAL_SD_MspInit+0x210>)
 800150a:	2203      	movs	r2, #3
 800150c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 800150e:	4b17      	ldr	r3, [pc, #92]	@ (800156c <HAL_SD_MspInit+0x210>)
 8001510:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001514:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001516:	4b15      	ldr	r3, [pc, #84]	@ (800156c <HAL_SD_MspInit+0x210>)
 8001518:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800151c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 800151e:	4813      	ldr	r0, [pc, #76]	@ (800156c <HAL_SD_MspInit+0x210>)
 8001520:	f000 fb14 	bl	8001b4c <HAL_DMA_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <HAL_SD_MspInit+0x1d2>
    {
      Error_Handler();
 800152a:	f7ff fdd5 	bl	80010d8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a0e      	ldr	r2, [pc, #56]	@ (800156c <HAL_SD_MspInit+0x210>)
 8001532:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001534:	4a0d      	ldr	r2, [pc, #52]	@ (800156c <HAL_SD_MspInit+0x210>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	2100      	movs	r1, #0
 800153e:	2031      	movs	r0, #49	@ 0x31
 8001540:	f000 facd 	bl	8001ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001544:	2031      	movs	r0, #49	@ 0x31
 8001546:	f000 fae6 	bl	8001b16 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 800154a:	bf00      	nop
 800154c:	37b0      	adds	r7, #176	@ 0xb0
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40012c00 	.word	0x40012c00
 8001558:	40023800 	.word	0x40023800
 800155c:	40020800 	.word	0x40020800
 8001560:	40020c00 	.word	0x40020c00
 8001564:	200001e4 	.word	0x200001e4
 8001568:	40026458 	.word	0x40026458
 800156c:	20000244 	.word	0x20000244
 8001570:	400264a0 	.word	0x400264a0

08001574 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001588:	4b3a      	ldr	r3, [pc, #232]	@ (8001674 <HAL_FMC_MspInit+0x100>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d16d      	bne.n	800166c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8001590:	4b38      	ldr	r3, [pc, #224]	@ (8001674 <HAL_FMC_MspInit+0x100>)
 8001592:	2201      	movs	r2, #1
 8001594:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001596:	4b38      	ldr	r3, [pc, #224]	@ (8001678 <HAL_FMC_MspInit+0x104>)
 8001598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800159a:	4a37      	ldr	r2, [pc, #220]	@ (8001678 <HAL_FMC_MspInit+0x104>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6393      	str	r3, [r2, #56]	@ 0x38
 80015a2:	4b35      	ldr	r3, [pc, #212]	@ (8001678 <HAL_FMC_MspInit+0x104>)
 80015a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	603b      	str	r3, [r7, #0]
 80015ac:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80015ae:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80015b2:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	2302      	movs	r3, #2
 80015b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015bc:	2303      	movs	r3, #3
 80015be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015c0:	230c      	movs	r3, #12
 80015c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015c4:	1d3b      	adds	r3, r7, #4
 80015c6:	4619      	mov	r1, r3
 80015c8:	482c      	ldr	r0, [pc, #176]	@ (800167c <HAL_FMC_MspInit+0x108>)
 80015ca:	f000 ff41 	bl	8002450 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80015ce:	f248 1333 	movw	r3, #33075	@ 0x8133
 80015d2:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d4:	2302      	movs	r3, #2
 80015d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015dc:	2303      	movs	r3, #3
 80015de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015e0:	230c      	movs	r3, #12
 80015e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	4619      	mov	r1, r3
 80015e8:	4825      	ldr	r0, [pc, #148]	@ (8001680 <HAL_FMC_MspInit+0x10c>)
 80015ea:	f000 ff31 	bl	8002450 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80015ee:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80015f2:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	2302      	movs	r3, #2
 80015f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fc:	2303      	movs	r3, #3
 80015fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001600:	230c      	movs	r3, #12
 8001602:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001604:	1d3b      	adds	r3, r7, #4
 8001606:	4619      	mov	r1, r3
 8001608:	481e      	ldr	r0, [pc, #120]	@ (8001684 <HAL_FMC_MspInit+0x110>)
 800160a:	f000 ff21 	bl	8002450 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800160e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001612:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001614:	2302      	movs	r3, #2
 8001616:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161c:	2303      	movs	r3, #3
 800161e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001620:	230c      	movs	r3, #12
 8001622:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001624:	1d3b      	adds	r3, r7, #4
 8001626:	4619      	mov	r1, r3
 8001628:	4817      	ldr	r0, [pc, #92]	@ (8001688 <HAL_FMC_MspInit+0x114>)
 800162a:	f000 ff11 	bl	8002450 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800162e:	2328      	movs	r3, #40	@ 0x28
 8001630:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	2302      	movs	r3, #2
 8001634:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163a:	2303      	movs	r3, #3
 800163c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800163e:	230c      	movs	r3, #12
 8001640:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	4619      	mov	r1, r3
 8001646:	4811      	ldr	r0, [pc, #68]	@ (800168c <HAL_FMC_MspInit+0x118>)
 8001648:	f000 ff02 	bl	8002450 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800164c:	2308      	movs	r3, #8
 800164e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001650:	2302      	movs	r3, #2
 8001652:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001658:	2303      	movs	r3, #3
 800165a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800165c:	230c      	movs	r3, #12
 800165e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001660:	1d3b      	adds	r3, r7, #4
 8001662:	4619      	mov	r1, r3
 8001664:	480a      	ldr	r0, [pc, #40]	@ (8001690 <HAL_FMC_MspInit+0x11c>)
 8001666:	f000 fef3 	bl	8002450 <HAL_GPIO_Init>
 800166a:	e000      	b.n	800166e <HAL_FMC_MspInit+0xfa>
    return;
 800166c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800166e:	3718      	adds	r7, #24
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	200002d8 	.word	0x200002d8
 8001678:	40023800 	.word	0x40023800
 800167c:	40021000 	.word	0x40021000
 8001680:	40021800 	.word	0x40021800
 8001684:	40020c00 	.word	0x40020c00
 8001688:	40021400 	.word	0x40021400
 800168c:	40021c00 	.word	0x40021c00
 8001690:	40020800 	.word	0x40020800

08001694 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800169c:	f7ff ff6a 	bl	8001574 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80016a0:	bf00      	nop
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016ac:	bf00      	nop
 80016ae:	e7fd      	b.n	80016ac <NMI_Handler+0x4>

080016b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b4:	bf00      	nop
 80016b6:	e7fd      	b.n	80016b4 <HardFault_Handler+0x4>

080016b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016bc:	bf00      	nop
 80016be:	e7fd      	b.n	80016bc <MemManage_Handler+0x4>

080016c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c4:	bf00      	nop
 80016c6:	e7fd      	b.n	80016c4 <BusFault_Handler+0x4>

080016c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016cc:	bf00      	nop
 80016ce:	e7fd      	b.n	80016cc <UsageFault_Handler+0x4>

080016d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016fe:	f000 f8cf 	bl	80018a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
	...

08001708 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800170c:	4802      	ldr	r0, [pc, #8]	@ (8001718 <SDMMC1_IRQHandler+0x10>)
 800170e:	f002 fdeb 	bl	80042e8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000160 	.word	0x20000160

0800171c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001720:	4802      	ldr	r0, [pc, #8]	@ (800172c <DMA2_Stream3_IRQHandler+0x10>)
 8001722:	f000 fb43 	bl	8001dac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	200001e4 	.word	0x200001e4

08001730 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001734:	4802      	ldr	r0, [pc, #8]	@ (8001740 <DMA2_Stream6_IRQHandler+0x10>)
 8001736:	f000 fb39 	bl	8001dac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000244 	.word	0x20000244

08001744 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800174c:	4a14      	ldr	r2, [pc, #80]	@ (80017a0 <_sbrk+0x5c>)
 800174e:	4b15      	ldr	r3, [pc, #84]	@ (80017a4 <_sbrk+0x60>)
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001758:	4b13      	ldr	r3, [pc, #76]	@ (80017a8 <_sbrk+0x64>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d102      	bne.n	8001766 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001760:	4b11      	ldr	r3, [pc, #68]	@ (80017a8 <_sbrk+0x64>)
 8001762:	4a12      	ldr	r2, [pc, #72]	@ (80017ac <_sbrk+0x68>)
 8001764:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001766:	4b10      	ldr	r3, [pc, #64]	@ (80017a8 <_sbrk+0x64>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4413      	add	r3, r2
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	429a      	cmp	r2, r3
 8001772:	d207      	bcs.n	8001784 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001774:	f007 fd74 	bl	8009260 <__errno>
 8001778:	4603      	mov	r3, r0
 800177a:	220c      	movs	r2, #12
 800177c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800177e:	f04f 33ff 	mov.w	r3, #4294967295
 8001782:	e009      	b.n	8001798 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001784:	4b08      	ldr	r3, [pc, #32]	@ (80017a8 <_sbrk+0x64>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800178a:	4b07      	ldr	r3, [pc, #28]	@ (80017a8 <_sbrk+0x64>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4413      	add	r3, r2
 8001792:	4a05      	ldr	r2, [pc, #20]	@ (80017a8 <_sbrk+0x64>)
 8001794:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001796:	68fb      	ldr	r3, [r7, #12]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3718      	adds	r7, #24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20050000 	.word	0x20050000
 80017a4:	00000800 	.word	0x00000800
 80017a8:	200002dc 	.word	0x200002dc
 80017ac:	200008d8 	.word	0x200008d8

080017b0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017b4:	4b06      	ldr	r3, [pc, #24]	@ (80017d0 <SystemInit+0x20>)
 80017b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017ba:	4a05      	ldr	r2, [pc, #20]	@ (80017d0 <SystemInit+0x20>)
 80017bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800180c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017d8:	f7ff ffea 	bl	80017b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017dc:	480c      	ldr	r0, [pc, #48]	@ (8001810 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017de:	490d      	ldr	r1, [pc, #52]	@ (8001814 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001818 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e4:	e002      	b.n	80017ec <LoopCopyDataInit>

080017e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ea:	3304      	adds	r3, #4

080017ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f0:	d3f9      	bcc.n	80017e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017f2:	4a0a      	ldr	r2, [pc, #40]	@ (800181c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001820 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017f8:	e001      	b.n	80017fe <LoopFillZerobss>

080017fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017fc:	3204      	adds	r2, #4

080017fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001800:	d3fb      	bcc.n	80017fa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001802:	f007 fd33 	bl	800926c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001806:	f7fe fe77 	bl	80004f8 <main>
  bx  lr    
 800180a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800180c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001810:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001814:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001818:	08009844 	.word	0x08009844
  ldr r2, =_sbss
 800181c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001820:	200008d4 	.word	0x200008d4

08001824 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001824:	e7fe      	b.n	8001824 <ADC_IRQHandler>

08001826 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800182a:	2003      	movs	r0, #3
 800182c:	f000 f94c 	bl	8001ac8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001830:	2000      	movs	r0, #0
 8001832:	f000 f805 	bl	8001840 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001836:	f7ff fc55 	bl	80010e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	bd80      	pop	{r7, pc}

08001840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001848:	4b12      	ldr	r3, [pc, #72]	@ (8001894 <HAL_InitTick+0x54>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	4b12      	ldr	r3, [pc, #72]	@ (8001898 <HAL_InitTick+0x58>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	4619      	mov	r1, r3
 8001852:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001856:	fbb3 f3f1 	udiv	r3, r3, r1
 800185a:	fbb2 f3f3 	udiv	r3, r2, r3
 800185e:	4618      	mov	r0, r3
 8001860:	f000 f967 	bl	8001b32 <HAL_SYSTICK_Config>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e00e      	b.n	800188c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b0f      	cmp	r3, #15
 8001872:	d80a      	bhi.n	800188a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001874:	2200      	movs	r2, #0
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	f04f 30ff 	mov.w	r0, #4294967295
 800187c:	f000 f92f 	bl	8001ade <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001880:	4a06      	ldr	r2, [pc, #24]	@ (800189c <HAL_InitTick+0x5c>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001886:	2300      	movs	r3, #0
 8001888:	e000      	b.n	800188c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
}
 800188c:	4618      	mov	r0, r3
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000000 	.word	0x20000000
 8001898:	20000008 	.word	0x20000008
 800189c:	20000004 	.word	0x20000004

080018a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018a4:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <HAL_IncTick+0x20>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	461a      	mov	r2, r3
 80018aa:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <HAL_IncTick+0x24>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4413      	add	r3, r2
 80018b0:	4a04      	ldr	r2, [pc, #16]	@ (80018c4 <HAL_IncTick+0x24>)
 80018b2:	6013      	str	r3, [r2, #0]
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20000008 	.word	0x20000008
 80018c4:	200002e0 	.word	0x200002e0

080018c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return uwTick;
 80018cc:	4b03      	ldr	r3, [pc, #12]	@ (80018dc <HAL_GetTick+0x14>)
 80018ce:	681b      	ldr	r3, [r3, #0]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	200002e0 	.word	0x200002e0

080018e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018e8:	f7ff ffee 	bl	80018c8 <HAL_GetTick>
 80018ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018f8:	d005      	beq.n	8001906 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001924 <HAL_Delay+0x44>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	461a      	mov	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4413      	add	r3, r2
 8001904:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001906:	bf00      	nop
 8001908:	f7ff ffde 	bl	80018c8 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	429a      	cmp	r2, r3
 8001916:	d8f7      	bhi.n	8001908 <HAL_Delay+0x28>
  {
  }
}
 8001918:	bf00      	nop
 800191a:	bf00      	nop
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000008 	.word	0x20000008

08001928 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001938:	4b0b      	ldr	r3, [pc, #44]	@ (8001968 <__NVIC_SetPriorityGrouping+0x40>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800193e:	68ba      	ldr	r2, [r7, #8]
 8001940:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001944:	4013      	ands	r3, r2
 8001946:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001950:	4b06      	ldr	r3, [pc, #24]	@ (800196c <__NVIC_SetPriorityGrouping+0x44>)
 8001952:	4313      	orrs	r3, r2
 8001954:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001956:	4a04      	ldr	r2, [pc, #16]	@ (8001968 <__NVIC_SetPriorityGrouping+0x40>)
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	60d3      	str	r3, [r2, #12]
}
 800195c:	bf00      	nop
 800195e:	3714      	adds	r7, #20
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	e000ed00 	.word	0xe000ed00
 800196c:	05fa0000 	.word	0x05fa0000

08001970 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001974:	4b04      	ldr	r3, [pc, #16]	@ (8001988 <__NVIC_GetPriorityGrouping+0x18>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	0a1b      	lsrs	r3, r3, #8
 800197a:	f003 0307 	and.w	r3, r3, #7
}
 800197e:	4618      	mov	r0, r3
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199a:	2b00      	cmp	r3, #0
 800199c:	db0b      	blt.n	80019b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	f003 021f 	and.w	r2, r3, #31
 80019a4:	4907      	ldr	r1, [pc, #28]	@ (80019c4 <__NVIC_EnableIRQ+0x38>)
 80019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019aa:	095b      	lsrs	r3, r3, #5
 80019ac:	2001      	movs	r0, #1
 80019ae:	fa00 f202 	lsl.w	r2, r0, r2
 80019b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	e000e100 	.word	0xe000e100

080019c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	6039      	str	r1, [r7, #0]
 80019d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	db0a      	blt.n	80019f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	490c      	ldr	r1, [pc, #48]	@ (8001a14 <__NVIC_SetPriority+0x4c>)
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	0112      	lsls	r2, r2, #4
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	440b      	add	r3, r1
 80019ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f0:	e00a      	b.n	8001a08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	4908      	ldr	r1, [pc, #32]	@ (8001a18 <__NVIC_SetPriority+0x50>)
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	3b04      	subs	r3, #4
 8001a00:	0112      	lsls	r2, r2, #4
 8001a02:	b2d2      	uxtb	r2, r2
 8001a04:	440b      	add	r3, r1
 8001a06:	761a      	strb	r2, [r3, #24]
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	e000e100 	.word	0xe000e100
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b089      	sub	sp, #36	@ 0x24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f1c3 0307 	rsb	r3, r3, #7
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	bf28      	it	cs
 8001a3a:	2304      	movcs	r3, #4
 8001a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3304      	adds	r3, #4
 8001a42:	2b06      	cmp	r3, #6
 8001a44:	d902      	bls.n	8001a4c <NVIC_EncodePriority+0x30>
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	3b03      	subs	r3, #3
 8001a4a:	e000      	b.n	8001a4e <NVIC_EncodePriority+0x32>
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a50:	f04f 32ff 	mov.w	r2, #4294967295
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43da      	mvns	r2, r3
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	401a      	ands	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a64:	f04f 31ff 	mov.w	r1, #4294967295
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6e:	43d9      	mvns	r1, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a74:	4313      	orrs	r3, r2
         );
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3724      	adds	r7, #36	@ 0x24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
	...

08001a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a94:	d301      	bcc.n	8001a9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a96:	2301      	movs	r3, #1
 8001a98:	e00f      	b.n	8001aba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac4 <SysTick_Config+0x40>)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aa2:	210f      	movs	r1, #15
 8001aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa8:	f7ff ff8e 	bl	80019c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aac:	4b05      	ldr	r3, [pc, #20]	@ (8001ac4 <SysTick_Config+0x40>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ab2:	4b04      	ldr	r3, [pc, #16]	@ (8001ac4 <SysTick_Config+0x40>)
 8001ab4:	2207      	movs	r2, #7
 8001ab6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	e000e010 	.word	0xe000e010

08001ac8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff ff29 	bl	8001928 <__NVIC_SetPriorityGrouping>
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b086      	sub	sp, #24
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	60b9      	str	r1, [r7, #8]
 8001ae8:	607a      	str	r2, [r7, #4]
 8001aea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001af0:	f7ff ff3e 	bl	8001970 <__NVIC_GetPriorityGrouping>
 8001af4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	68b9      	ldr	r1, [r7, #8]
 8001afa:	6978      	ldr	r0, [r7, #20]
 8001afc:	f7ff ff8e 	bl	8001a1c <NVIC_EncodePriority>
 8001b00:	4602      	mov	r2, r0
 8001b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b06:	4611      	mov	r1, r2
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff ff5d 	bl	80019c8 <__NVIC_SetPriority>
}
 8001b0e:	bf00      	nop
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff ff31 	bl	800198c <__NVIC_EnableIRQ>
}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff ffa2 	bl	8001a84 <SysTick_Config>
 8001b40:	4603      	mov	r3, r0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b58:	f7ff feb6 	bl	80018c8 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e099      	b.n	8001c9c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f022 0201 	bic.w	r2, r2, #1
 8001b86:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b88:	e00f      	b.n	8001baa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b8a:	f7ff fe9d 	bl	80018c8 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b05      	cmp	r3, #5
 8001b96:	d908      	bls.n	8001baa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2220      	movs	r2, #32
 8001b9c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2203      	movs	r2, #3
 8001ba2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e078      	b.n	8001c9c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1e8      	bne.n	8001b8a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	4b38      	ldr	r3, [pc, #224]	@ (8001ca4 <HAL_DMA_Init+0x158>)
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001be2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
 8001bf4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c00:	2b04      	cmp	r3, #4
 8001c02:	d107      	bne.n	8001c14 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	697a      	ldr	r2, [r7, #20]
 8001c1a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	f023 0307 	bic.w	r3, r3, #7
 8001c2a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	d117      	bne.n	8001c6e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d00e      	beq.n	8001c6e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 faa5 	bl	80021a0 <DMA_CheckFifoParam>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d008      	beq.n	8001c6e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2240      	movs	r2, #64	@ 0x40
 8001c60:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e016      	b.n	8001c9c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 fa5c 	bl	8002134 <DMA_CalcBaseAndBitshift>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c84:	223f      	movs	r2, #63	@ 0x3f
 8001c86:	409a      	lsls	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	f010803f 	.word	0xf010803f

08001ca8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
 8001cb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cbe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d101      	bne.n	8001cce <HAL_DMA_Start_IT+0x26>
 8001cca:	2302      	movs	r3, #2
 8001ccc:	e048      	b.n	8001d60 <HAL_DMA_Start_IT+0xb8>
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d137      	bne.n	8001d52 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2202      	movs	r2, #2
 8001ce6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2200      	movs	r2, #0
 8001cee:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	68b9      	ldr	r1, [r7, #8]
 8001cf6:	68f8      	ldr	r0, [r7, #12]
 8001cf8:	f000 f9ee 	bl	80020d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d00:	223f      	movs	r2, #63	@ 0x3f
 8001d02:	409a      	lsls	r2, r3
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f042 0216 	orr.w	r2, r2, #22
 8001d16:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	695a      	ldr	r2, [r3, #20]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001d26:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d007      	beq.n	8001d40 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f042 0208 	orr.w	r2, r2, #8
 8001d3e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f042 0201 	orr.w	r2, r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	e005      	b.n	8001d5e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d004      	beq.n	8001d86 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2280      	movs	r2, #128	@ 0x80
 8001d80:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e00c      	b.n	8001da0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2205      	movs	r2, #5
 8001d8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 0201 	bic.w	r2, r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001db8:	4b8e      	ldr	r3, [pc, #568]	@ (8001ff4 <HAL_DMA_IRQHandler+0x248>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a8e      	ldr	r2, [pc, #568]	@ (8001ff8 <HAL_DMA_IRQHandler+0x24c>)
 8001dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc2:	0a9b      	lsrs	r3, r3, #10
 8001dc4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dd6:	2208      	movs	r2, #8
 8001dd8:	409a      	lsls	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d01a      	beq.n	8001e18 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d013      	beq.n	8001e18 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 0204 	bic.w	r2, r2, #4
 8001dfe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e04:	2208      	movs	r2, #8
 8001e06:	409a      	lsls	r2, r3
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e10:	f043 0201 	orr.w	r2, r3, #1
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	409a      	lsls	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	4013      	ands	r3, r2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d012      	beq.n	8001e4e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00b      	beq.n	8001e4e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	409a      	lsls	r2, r3
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e46:	f043 0202 	orr.w	r2, r3, #2
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e52:	2204      	movs	r2, #4
 8001e54:	409a      	lsls	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d012      	beq.n	8001e84 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00b      	beq.n	8001e84 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e70:	2204      	movs	r2, #4
 8001e72:	409a      	lsls	r2, r3
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e7c:	f043 0204 	orr.w	r2, r3, #4
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e88:	2210      	movs	r2, #16
 8001e8a:	409a      	lsls	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d043      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0308 	and.w	r3, r3, #8
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d03c      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ea6:	2210      	movs	r2, #16
 8001ea8:	409a      	lsls	r2, r3
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d018      	beq.n	8001eee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d108      	bne.n	8001edc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d024      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	4798      	blx	r3
 8001eda:	e01f      	b.n	8001f1c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d01b      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	4798      	blx	r3
 8001eec:	e016      	b.n	8001f1c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d107      	bne.n	8001f0c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 0208 	bic.w	r2, r2, #8
 8001f0a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f20:	2220      	movs	r2, #32
 8001f22:	409a      	lsls	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	4013      	ands	r3, r2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f000 808f 	beq.w	800204c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0310 	and.w	r3, r3, #16
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 8087 	beq.w	800204c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f42:	2220      	movs	r2, #32
 8001f44:	409a      	lsls	r2, r3
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b05      	cmp	r3, #5
 8001f54:	d136      	bne.n	8001fc4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 0216 	bic.w	r2, r2, #22
 8001f64:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	695a      	ldr	r2, [r3, #20]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f74:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d103      	bne.n	8001f86 <HAL_DMA_IRQHandler+0x1da>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d007      	beq.n	8001f96 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0208 	bic.w	r2, r2, #8
 8001f94:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f9a:	223f      	movs	r2, #63	@ 0x3f
 8001f9c:	409a      	lsls	r2, r3
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d07e      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	4798      	blx	r3
        }
        return;
 8001fc2:	e079      	b.n	80020b8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d01d      	beq.n	800200e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d10d      	bne.n	8001ffc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d031      	beq.n	800204c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	4798      	blx	r3
 8001ff0:	e02c      	b.n	800204c <HAL_DMA_IRQHandler+0x2a0>
 8001ff2:	bf00      	nop
 8001ff4:	20000000 	.word	0x20000000
 8001ff8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002000:	2b00      	cmp	r3, #0
 8002002:	d023      	beq.n	800204c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	4798      	blx	r3
 800200c:	e01e      	b.n	800204c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002018:	2b00      	cmp	r3, #0
 800201a:	d10f      	bne.n	800203c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f022 0210 	bic.w	r2, r2, #16
 800202a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002040:	2b00      	cmp	r3, #0
 8002042:	d003      	beq.n	800204c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002050:	2b00      	cmp	r3, #0
 8002052:	d032      	beq.n	80020ba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b00      	cmp	r3, #0
 800205e:	d022      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2205      	movs	r2, #5
 8002064:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0201 	bic.w	r2, r2, #1
 8002076:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	3301      	adds	r3, #1
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	429a      	cmp	r2, r3
 8002082:	d307      	bcc.n	8002094 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f2      	bne.n	8002078 <HAL_DMA_IRQHandler+0x2cc>
 8002092:	e000      	b.n	8002096 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002094:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2201      	movs	r2, #1
 800209a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d005      	beq.n	80020ba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	4798      	blx	r3
 80020b6:	e000      	b.n	80020ba <HAL_DMA_IRQHandler+0x30e>
        return;
 80020b8:	bf00      	nop
    }
  }
}
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
 80020e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80020f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	2b40      	cmp	r3, #64	@ 0x40
 8002104:	d108      	bne.n	8002118 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68ba      	ldr	r2, [r7, #8]
 8002114:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002116:	e007      	b.n	8002128 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68ba      	ldr	r2, [r7, #8]
 800211e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	60da      	str	r2, [r3, #12]
}
 8002128:	bf00      	nop
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	b2db      	uxtb	r3, r3
 8002142:	3b10      	subs	r3, #16
 8002144:	4a13      	ldr	r2, [pc, #76]	@ (8002194 <DMA_CalcBaseAndBitshift+0x60>)
 8002146:	fba2 2303 	umull	r2, r3, r2, r3
 800214a:	091b      	lsrs	r3, r3, #4
 800214c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800214e:	4a12      	ldr	r2, [pc, #72]	@ (8002198 <DMA_CalcBaseAndBitshift+0x64>)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4413      	add	r3, r2
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	461a      	mov	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2b03      	cmp	r3, #3
 8002160:	d908      	bls.n	8002174 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	461a      	mov	r2, r3
 8002168:	4b0c      	ldr	r3, [pc, #48]	@ (800219c <DMA_CalcBaseAndBitshift+0x68>)
 800216a:	4013      	ands	r3, r2
 800216c:	1d1a      	adds	r2, r3, #4
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	659a      	str	r2, [r3, #88]	@ 0x58
 8002172:	e006      	b.n	8002182 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	461a      	mov	r2, r3
 800217a:	4b08      	ldr	r3, [pc, #32]	@ (800219c <DMA_CalcBaseAndBitshift+0x68>)
 800217c:	4013      	ands	r3, r2
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002186:	4618      	mov	r0, r3
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	aaaaaaab 	.word	0xaaaaaaab
 8002198:	080093d8 	.word	0x080093d8
 800219c:	fffffc00 	.word	0xfffffc00

080021a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021a8:	2300      	movs	r3, #0
 80021aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d11f      	bne.n	80021fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	2b03      	cmp	r3, #3
 80021be:	d856      	bhi.n	800226e <DMA_CheckFifoParam+0xce>
 80021c0:	a201      	add	r2, pc, #4	@ (adr r2, 80021c8 <DMA_CheckFifoParam+0x28>)
 80021c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c6:	bf00      	nop
 80021c8:	080021d9 	.word	0x080021d9
 80021cc:	080021eb 	.word	0x080021eb
 80021d0:	080021d9 	.word	0x080021d9
 80021d4:	0800226f 	.word	0x0800226f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d046      	beq.n	8002272 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021e8:	e043      	b.n	8002272 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ee:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80021f2:	d140      	bne.n	8002276 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021f8:	e03d      	b.n	8002276 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002202:	d121      	bne.n	8002248 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	2b03      	cmp	r3, #3
 8002208:	d837      	bhi.n	800227a <DMA_CheckFifoParam+0xda>
 800220a:	a201      	add	r2, pc, #4	@ (adr r2, 8002210 <DMA_CheckFifoParam+0x70>)
 800220c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002210:	08002221 	.word	0x08002221
 8002214:	08002227 	.word	0x08002227
 8002218:	08002221 	.word	0x08002221
 800221c:	08002239 	.word	0x08002239
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	73fb      	strb	r3, [r7, #15]
      break;
 8002224:	e030      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d025      	beq.n	800227e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002236:	e022      	b.n	800227e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800223c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002240:	d11f      	bne.n	8002282 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002246:	e01c      	b.n	8002282 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	2b02      	cmp	r3, #2
 800224c:	d903      	bls.n	8002256 <DMA_CheckFifoParam+0xb6>
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	2b03      	cmp	r3, #3
 8002252:	d003      	beq.n	800225c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002254:	e018      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	73fb      	strb	r3, [r7, #15]
      break;
 800225a:	e015      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002260:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00e      	beq.n	8002286 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	73fb      	strb	r3, [r7, #15]
      break;
 800226c:	e00b      	b.n	8002286 <DMA_CheckFifoParam+0xe6>
      break;
 800226e:	bf00      	nop
 8002270:	e00a      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      break;
 8002272:	bf00      	nop
 8002274:	e008      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      break;
 8002276:	bf00      	nop
 8002278:	e006      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      break;
 800227a:	bf00      	nop
 800227c:	e004      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      break;
 800227e:	bf00      	nop
 8002280:	e002      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      break;   
 8002282:	bf00      	nop
 8002284:	e000      	b.n	8002288 <DMA_CheckFifoParam+0xe8>
      break;
 8002286:	bf00      	nop
    }
  } 
  
  return status; 
 8002288:	7bfb      	ldrb	r3, [r7, #15]
}
 800228a:	4618      	mov	r0, r3
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop

08002298 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e039      	b.n	800231e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d106      	bne.n	80022c4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7fe ff34 	bl	800112c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2202      	movs	r2, #2
 80022c8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022e8:	f023 0107 	bic.w	r1, r3, #7
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	430a      	orrs	r2, r1
 80022f6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002328 <HAL_DMA2D_Init+0x90>)
 8002300:	4013      	ands	r3, r2
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	68d1      	ldr	r1, [r2, #12]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6812      	ldr	r2, [r2, #0]
 800230a:	430b      	orrs	r3, r1
 800230c:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	ffffc000 	.word	0xffffc000

0800232c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800232c:	b480      	push	{r7}
 800232e:	b087      	sub	sp, #28
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002344:	2b01      	cmp	r3, #1
 8002346:	d101      	bne.n	800234c <HAL_DMA2D_ConfigLayer+0x20>
 8002348:	2302      	movs	r3, #2
 800234a:	e079      	b.n	8002440 <HAL_DMA2D_ConfigLayer+0x114>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2202      	movs	r2, #2
 8002358:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	011b      	lsls	r3, r3, #4
 8002360:	3318      	adds	r3, #24
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	4413      	add	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	041b      	lsls	r3, r3, #16
 8002372:	4313      	orrs	r3, r2
 8002374:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002376:	4b35      	ldr	r3, [pc, #212]	@ (800244c <HAL_DMA2D_ConfigLayer+0x120>)
 8002378:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b0a      	cmp	r3, #10
 8002380:	d003      	beq.n	800238a <HAL_DMA2D_ConfigLayer+0x5e>
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b09      	cmp	r3, #9
 8002388:	d107      	bne.n	800239a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	4313      	orrs	r3, r2
 8002396:	617b      	str	r3, [r7, #20]
 8002398:	e005      	b.n	80023a6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	061b      	lsls	r3, r3, #24
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d120      	bne.n	80023ee <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	43db      	mvns	r3, r3
 80023b6:	ea02 0103 	and.w	r1, r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	6812      	ldr	r2, [r2, #0]
 80023cc:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b0a      	cmp	r3, #10
 80023d4:	d003      	beq.n	80023de <HAL_DMA2D_ConfigLayer+0xb2>
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b09      	cmp	r3, #9
 80023dc:	d127      	bne.n	800242e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	68da      	ldr	r2, [r3, #12]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80023ea:	629a      	str	r2, [r3, #40]	@ 0x28
 80023ec:	e01f      	b.n	800242e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	69da      	ldr	r2, [r3, #28]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	43db      	mvns	r3, r3
 80023f8:	ea02 0103 	and.w	r1, r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	430a      	orrs	r2, r1
 8002404:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	6812      	ldr	r2, [r2, #0]
 800240e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2b0a      	cmp	r3, #10
 8002416:	d003      	beq.n	8002420 <HAL_DMA2D_ConfigLayer+0xf4>
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b09      	cmp	r3, #9
 800241e:	d106      	bne.n	800242e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	68da      	ldr	r2, [r3, #12]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800242c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	371c      	adds	r7, #28
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	ff03000f 	.word	0xff03000f

08002450 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002450:	b480      	push	{r7}
 8002452:	b089      	sub	sp, #36	@ 0x24
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800245a:	2300      	movs	r3, #0
 800245c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002462:	2300      	movs	r3, #0
 8002464:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002466:	2300      	movs	r3, #0
 8002468:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800246a:	2300      	movs	r3, #0
 800246c:	61fb      	str	r3, [r7, #28]
 800246e:	e175      	b.n	800275c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002470:	2201      	movs	r2, #1
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	4013      	ands	r3, r2
 8002482:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	429a      	cmp	r2, r3
 800248a:	f040 8164 	bne.w	8002756 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	2b01      	cmp	r3, #1
 8002498:	d005      	beq.n	80024a6 <HAL_GPIO_Init+0x56>
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f003 0303 	and.w	r3, r3, #3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d130      	bne.n	8002508 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	2203      	movs	r2, #3
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4013      	ands	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024dc:	2201      	movs	r2, #1
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4013      	ands	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	091b      	lsrs	r3, r3, #4
 80024f2:	f003 0201 	and.w	r2, r3, #1
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4313      	orrs	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 0303 	and.w	r3, r3, #3
 8002510:	2b03      	cmp	r3, #3
 8002512:	d017      	beq.n	8002544 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	2203      	movs	r2, #3
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	43db      	mvns	r3, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4013      	ands	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 0303 	and.w	r3, r3, #3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d123      	bne.n	8002598 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	08da      	lsrs	r2, r3, #3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3208      	adds	r2, #8
 8002558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800255c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	220f      	movs	r2, #15
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4013      	ands	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	691a      	ldr	r2, [r3, #16]
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4313      	orrs	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	08da      	lsrs	r2, r3, #3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3208      	adds	r2, #8
 8002592:	69b9      	ldr	r1, [r7, #24]
 8002594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	2203      	movs	r2, #3
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4013      	ands	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 0203 	and.w	r2, r3, #3
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 80be 	beq.w	8002756 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025da:	4b66      	ldr	r3, [pc, #408]	@ (8002774 <HAL_GPIO_Init+0x324>)
 80025dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025de:	4a65      	ldr	r2, [pc, #404]	@ (8002774 <HAL_GPIO_Init+0x324>)
 80025e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80025e6:	4b63      	ldr	r3, [pc, #396]	@ (8002774 <HAL_GPIO_Init+0x324>)
 80025e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80025f2:	4a61      	ldr	r2, [pc, #388]	@ (8002778 <HAL_GPIO_Init+0x328>)
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	089b      	lsrs	r3, r3, #2
 80025f8:	3302      	adds	r3, #2
 80025fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f003 0303 	and.w	r3, r3, #3
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	220f      	movs	r2, #15
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	43db      	mvns	r3, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4013      	ands	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a58      	ldr	r2, [pc, #352]	@ (800277c <HAL_GPIO_Init+0x32c>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d037      	beq.n	800268e <HAL_GPIO_Init+0x23e>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a57      	ldr	r2, [pc, #348]	@ (8002780 <HAL_GPIO_Init+0x330>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d031      	beq.n	800268a <HAL_GPIO_Init+0x23a>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a56      	ldr	r2, [pc, #344]	@ (8002784 <HAL_GPIO_Init+0x334>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d02b      	beq.n	8002686 <HAL_GPIO_Init+0x236>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a55      	ldr	r2, [pc, #340]	@ (8002788 <HAL_GPIO_Init+0x338>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d025      	beq.n	8002682 <HAL_GPIO_Init+0x232>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a54      	ldr	r2, [pc, #336]	@ (800278c <HAL_GPIO_Init+0x33c>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d01f      	beq.n	800267e <HAL_GPIO_Init+0x22e>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a53      	ldr	r2, [pc, #332]	@ (8002790 <HAL_GPIO_Init+0x340>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d019      	beq.n	800267a <HAL_GPIO_Init+0x22a>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a52      	ldr	r2, [pc, #328]	@ (8002794 <HAL_GPIO_Init+0x344>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d013      	beq.n	8002676 <HAL_GPIO_Init+0x226>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a51      	ldr	r2, [pc, #324]	@ (8002798 <HAL_GPIO_Init+0x348>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d00d      	beq.n	8002672 <HAL_GPIO_Init+0x222>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a50      	ldr	r2, [pc, #320]	@ (800279c <HAL_GPIO_Init+0x34c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d007      	beq.n	800266e <HAL_GPIO_Init+0x21e>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a4f      	ldr	r2, [pc, #316]	@ (80027a0 <HAL_GPIO_Init+0x350>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d101      	bne.n	800266a <HAL_GPIO_Init+0x21a>
 8002666:	2309      	movs	r3, #9
 8002668:	e012      	b.n	8002690 <HAL_GPIO_Init+0x240>
 800266a:	230a      	movs	r3, #10
 800266c:	e010      	b.n	8002690 <HAL_GPIO_Init+0x240>
 800266e:	2308      	movs	r3, #8
 8002670:	e00e      	b.n	8002690 <HAL_GPIO_Init+0x240>
 8002672:	2307      	movs	r3, #7
 8002674:	e00c      	b.n	8002690 <HAL_GPIO_Init+0x240>
 8002676:	2306      	movs	r3, #6
 8002678:	e00a      	b.n	8002690 <HAL_GPIO_Init+0x240>
 800267a:	2305      	movs	r3, #5
 800267c:	e008      	b.n	8002690 <HAL_GPIO_Init+0x240>
 800267e:	2304      	movs	r3, #4
 8002680:	e006      	b.n	8002690 <HAL_GPIO_Init+0x240>
 8002682:	2303      	movs	r3, #3
 8002684:	e004      	b.n	8002690 <HAL_GPIO_Init+0x240>
 8002686:	2302      	movs	r3, #2
 8002688:	e002      	b.n	8002690 <HAL_GPIO_Init+0x240>
 800268a:	2301      	movs	r3, #1
 800268c:	e000      	b.n	8002690 <HAL_GPIO_Init+0x240>
 800268e:	2300      	movs	r3, #0
 8002690:	69fa      	ldr	r2, [r7, #28]
 8002692:	f002 0203 	and.w	r2, r2, #3
 8002696:	0092      	lsls	r2, r2, #2
 8002698:	4093      	lsls	r3, r2
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4313      	orrs	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80026a0:	4935      	ldr	r1, [pc, #212]	@ (8002778 <HAL_GPIO_Init+0x328>)
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	089b      	lsrs	r3, r3, #2
 80026a6:	3302      	adds	r3, #2
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026ae:	4b3d      	ldr	r3, [pc, #244]	@ (80027a4 <HAL_GPIO_Init+0x354>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	43db      	mvns	r3, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4013      	ands	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026d2:	4a34      	ldr	r2, [pc, #208]	@ (80027a4 <HAL_GPIO_Init+0x354>)
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026d8:	4b32      	ldr	r3, [pc, #200]	@ (80027a4 <HAL_GPIO_Init+0x354>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	43db      	mvns	r3, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4013      	ands	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d003      	beq.n	80026fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026fc:	4a29      	ldr	r2, [pc, #164]	@ (80027a4 <HAL_GPIO_Init+0x354>)
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002702:	4b28      	ldr	r3, [pc, #160]	@ (80027a4 <HAL_GPIO_Init+0x354>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	43db      	mvns	r3, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4013      	ands	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	4313      	orrs	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002726:	4a1f      	ldr	r2, [pc, #124]	@ (80027a4 <HAL_GPIO_Init+0x354>)
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800272c:	4b1d      	ldr	r3, [pc, #116]	@ (80027a4 <HAL_GPIO_Init+0x354>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	43db      	mvns	r3, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4013      	ands	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d003      	beq.n	8002750 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	4313      	orrs	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002750:	4a14      	ldr	r2, [pc, #80]	@ (80027a4 <HAL_GPIO_Init+0x354>)
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	3301      	adds	r3, #1
 800275a:	61fb      	str	r3, [r7, #28]
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	2b0f      	cmp	r3, #15
 8002760:	f67f ae86 	bls.w	8002470 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002764:	bf00      	nop
 8002766:	bf00      	nop
 8002768:	3724      	adds	r7, #36	@ 0x24
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	40023800 	.word	0x40023800
 8002778:	40013800 	.word	0x40013800
 800277c:	40020000 	.word	0x40020000
 8002780:	40020400 	.word	0x40020400
 8002784:	40020800 	.word	0x40020800
 8002788:	40020c00 	.word	0x40020c00
 800278c:	40021000 	.word	0x40021000
 8002790:	40021400 	.word	0x40021400
 8002794:	40021800 	.word	0x40021800
 8002798:	40021c00 	.word	0x40021c00
 800279c:	40022000 	.word	0x40022000
 80027a0:	40022400 	.word	0x40022400
 80027a4:	40013c00 	.word	0x40013c00

080027a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	460b      	mov	r3, r1
 80027b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691a      	ldr	r2, [r3, #16]
 80027b8:	887b      	ldrh	r3, [r7, #2]
 80027ba:	4013      	ands	r3, r2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027c0:	2301      	movs	r3, #1
 80027c2:	73fb      	strb	r3, [r7, #15]
 80027c4:	e001      	b.n	80027ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027c6:	2300      	movs	r3, #0
 80027c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3714      	adds	r7, #20
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	460b      	mov	r3, r1
 80027e2:	807b      	strh	r3, [r7, #2]
 80027e4:	4613      	mov	r3, r2
 80027e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027e8:	787b      	ldrb	r3, [r7, #1]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027ee:	887a      	ldrh	r2, [r7, #2]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80027f4:	e003      	b.n	80027fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80027f6:	887b      	ldrh	r3, [r7, #2]
 80027f8:	041a      	lsls	r2, r3, #16
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	619a      	str	r2, [r3, #24]
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
	...

0800280c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e0bf      	b.n	800299e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d106      	bne.n	8002838 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7fe fc9a 	bl	800116c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2202      	movs	r2, #2
 800283c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	699a      	ldr	r2, [r3, #24]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800284e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6999      	ldr	r1, [r3, #24]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002864:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	430a      	orrs	r2, r1
 8002872:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6899      	ldr	r1, [r3, #8]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	4b4a      	ldr	r3, [pc, #296]	@ (80029a8 <HAL_LTDC_Init+0x19c>)
 8002880:	400b      	ands	r3, r1
 8002882:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	041b      	lsls	r3, r3, #16
 800288a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6899      	ldr	r1, [r3, #8]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	699a      	ldr	r2, [r3, #24]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	431a      	orrs	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	430a      	orrs	r2, r1
 80028a0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68d9      	ldr	r1, [r3, #12]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	4b3e      	ldr	r3, [pc, #248]	@ (80029a8 <HAL_LTDC_Init+0x19c>)
 80028ae:	400b      	ands	r3, r1
 80028b0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	041b      	lsls	r3, r3, #16
 80028b8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68d9      	ldr	r1, [r3, #12]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a1a      	ldr	r2, [r3, #32]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	430a      	orrs	r2, r1
 80028ce:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6919      	ldr	r1, [r3, #16]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	4b33      	ldr	r3, [pc, #204]	@ (80029a8 <HAL_LTDC_Init+0x19c>)
 80028dc:	400b      	ands	r3, r1
 80028de:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e4:	041b      	lsls	r3, r3, #16
 80028e6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6919      	ldr	r1, [r3, #16]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	431a      	orrs	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6959      	ldr	r1, [r3, #20]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	4b27      	ldr	r3, [pc, #156]	@ (80029a8 <HAL_LTDC_Init+0x19c>)
 800290a:	400b      	ands	r3, r1
 800290c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002912:	041b      	lsls	r3, r3, #16
 8002914:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6959      	ldr	r1, [r3, #20]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	431a      	orrs	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002932:	021b      	lsls	r3, r3, #8
 8002934:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800293c:	041b      	lsls	r3, r3, #16
 800293e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800294e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4313      	orrs	r3, r2
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8002962:	431a      	orrs	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	430a      	orrs	r2, r1
 800296a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f042 0206 	orr.w	r2, r2, #6
 800297a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699a      	ldr	r2, [r3, #24]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0201 	orr.w	r2, r2, #1
 800298a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	f000f800 	.word	0xf000f800

080029ac <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80029ac:	b5b0      	push	{r4, r5, r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d101      	bne.n	80029c6 <HAL_LTDC_ConfigLayer+0x1a>
 80029c2:	2302      	movs	r3, #2
 80029c4:	e02c      	b.n	8002a20 <HAL_LTDC_ConfigLayer+0x74>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2202      	movs	r2, #2
 80029d2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2134      	movs	r1, #52	@ 0x34
 80029dc:	fb01 f303 	mul.w	r3, r1, r3
 80029e0:	4413      	add	r3, r2
 80029e2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	4614      	mov	r4, r2
 80029ea:	461d      	mov	r5, r3
 80029ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029f8:	682b      	ldr	r3, [r5, #0]
 80029fa:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	68b9      	ldr	r1, [r7, #8]
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f000 f811 	bl	8002a28 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bdb0      	pop	{r4, r5, r7, pc}

08002a28 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b089      	sub	sp, #36	@ 0x24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	0c1b      	lsrs	r3, r3, #16
 8002a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a44:	4413      	add	r3, r2
 8002a46:	041b      	lsls	r3, r3, #16
 8002a48:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	01db      	lsls	r3, r3, #7
 8002a54:	4413      	add	r3, r2
 8002a56:	3384      	adds	r3, #132	@ 0x84
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	6812      	ldr	r2, [r2, #0]
 8002a5e:	4611      	mov	r1, r2
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	01d2      	lsls	r2, r2, #7
 8002a64:	440a      	add	r2, r1
 8002a66:	3284      	adds	r2, #132	@ 0x84
 8002a68:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002a6c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	0c1b      	lsrs	r3, r3, #16
 8002a7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002a7e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002a80:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4619      	mov	r1, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	01db      	lsls	r3, r3, #7
 8002a8c:	440b      	add	r3, r1
 8002a8e:	3384      	adds	r3, #132	@ 0x84
 8002a90:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002a96:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	68da      	ldr	r2, [r3, #12]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002aa6:	4413      	add	r3, r2
 8002aa8:	041b      	lsls	r3, r3, #16
 8002aaa:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	01db      	lsls	r3, r3, #7
 8002ab6:	4413      	add	r3, r2
 8002ab8:	3384      	adds	r3, #132	@ 0x84
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	6812      	ldr	r2, [r2, #0]
 8002ac0:	4611      	mov	r1, r2
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	01d2      	lsls	r2, r2, #7
 8002ac6:	440a      	add	r2, r1
 8002ac8:	3284      	adds	r2, #132	@ 0x84
 8002aca:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002ace:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ade:	4413      	add	r3, r2
 8002ae0:	1c5a      	adds	r2, r3, #1
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	01db      	lsls	r3, r3, #7
 8002aec:	440b      	add	r3, r1
 8002aee:	3384      	adds	r3, #132	@ 0x84
 8002af0:	4619      	mov	r1, r3
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	461a      	mov	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	01db      	lsls	r3, r3, #7
 8002b02:	4413      	add	r3, r2
 8002b04:	3384      	adds	r3, #132	@ 0x84
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	6812      	ldr	r2, [r2, #0]
 8002b0c:	4611      	mov	r1, r2
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	01d2      	lsls	r2, r2, #7
 8002b12:	440a      	add	r2, r1
 8002b14:	3284      	adds	r2, #132	@ 0x84
 8002b16:	f023 0307 	bic.w	r3, r3, #7
 8002b1a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	461a      	mov	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	01db      	lsls	r3, r3, #7
 8002b26:	4413      	add	r3, r2
 8002b28:	3384      	adds	r3, #132	@ 0x84
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002b38:	021b      	lsls	r3, r3, #8
 8002b3a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002b42:	041b      	lsls	r3, r3, #16
 8002b44:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	061b      	lsls	r3, r3, #24
 8002b4c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	461a      	mov	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	01db      	lsls	r3, r3, #7
 8002b58:	4413      	add	r3, r2
 8002b5a:	3384      	adds	r3, #132	@ 0x84
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	461a      	mov	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	01db      	lsls	r3, r3, #7
 8002b68:	4413      	add	r3, r2
 8002b6a:	3384      	adds	r3, #132	@ 0x84
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	2300      	movs	r3, #0
 8002b70:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b78:	461a      	mov	r2, r3
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	431a      	orrs	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4619      	mov	r1, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	01db      	lsls	r3, r3, #7
 8002b8c:	440b      	add	r3, r1
 8002b8e:	3384      	adds	r3, #132	@ 0x84
 8002b90:	4619      	mov	r1, r3
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	01db      	lsls	r3, r3, #7
 8002ba2:	4413      	add	r3, r2
 8002ba4:	3384      	adds	r3, #132	@ 0x84
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	6812      	ldr	r2, [r2, #0]
 8002bac:	4611      	mov	r1, r2
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	01d2      	lsls	r2, r2, #7
 8002bb2:	440a      	add	r2, r1
 8002bb4:	3284      	adds	r2, #132	@ 0x84
 8002bb6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002bba:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	01db      	lsls	r3, r3, #7
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3384      	adds	r3, #132	@ 0x84
 8002bca:	461a      	mov	r2, r3
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	695b      	ldr	r3, [r3, #20]
 8002bd0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	01db      	lsls	r3, r3, #7
 8002bdc:	4413      	add	r3, r2
 8002bde:	3384      	adds	r3, #132	@ 0x84
 8002be0:	69da      	ldr	r2, [r3, #28]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4619      	mov	r1, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	01db      	lsls	r3, r3, #7
 8002bec:	440b      	add	r3, r1
 8002bee:	3384      	adds	r3, #132	@ 0x84
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4b58      	ldr	r3, [pc, #352]	@ (8002d54 <LTDC_SetConfig+0x32c>)
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	69da      	ldr	r2, [r3, #28]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	68f9      	ldr	r1, [r7, #12]
 8002c02:	6809      	ldr	r1, [r1, #0]
 8002c04:	4608      	mov	r0, r1
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	01c9      	lsls	r1, r1, #7
 8002c0a:	4401      	add	r1, r0
 8002c0c:	3184      	adds	r1, #132	@ 0x84
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	461a      	mov	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	01db      	lsls	r3, r3, #7
 8002c1c:	4413      	add	r3, r2
 8002c1e:	3384      	adds	r3, #132	@ 0x84
 8002c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	01db      	lsls	r3, r3, #7
 8002c2c:	4413      	add	r3, r2
 8002c2e:	3384      	adds	r3, #132	@ 0x84
 8002c30:	461a      	mov	r2, r3
 8002c32:	2300      	movs	r3, #0
 8002c34:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	01db      	lsls	r3, r3, #7
 8002c40:	4413      	add	r3, r2
 8002c42:	3384      	adds	r3, #132	@ 0x84
 8002c44:	461a      	mov	r2, r3
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4a:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d102      	bne.n	8002c5a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8002c54:	2304      	movs	r3, #4
 8002c56:	61fb      	str	r3, [r7, #28]
 8002c58:	e01b      	b.n	8002c92 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d102      	bne.n	8002c68 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8002c62:	2303      	movs	r3, #3
 8002c64:	61fb      	str	r3, [r7, #28]
 8002c66:	e014      	b.n	8002c92 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	2b04      	cmp	r3, #4
 8002c6e:	d00b      	beq.n	8002c88 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d007      	beq.n	8002c88 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002c7c:	2b03      	cmp	r3, #3
 8002c7e:	d003      	beq.n	8002c88 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002c84:	2b07      	cmp	r3, #7
 8002c86:	d102      	bne.n	8002c8e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8002c88:	2302      	movs	r3, #2
 8002c8a:	61fb      	str	r3, [r7, #28]
 8002c8c:	e001      	b.n	8002c92 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	461a      	mov	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	01db      	lsls	r3, r3, #7
 8002c9c:	4413      	add	r3, r2
 8002c9e:	3384      	adds	r3, #132	@ 0x84
 8002ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	6812      	ldr	r2, [r2, #0]
 8002ca6:	4611      	mov	r1, r2
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	01d2      	lsls	r2, r2, #7
 8002cac:	440a      	add	r2, r1
 8002cae:	3284      	adds	r2, #132	@ 0x84
 8002cb0:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8002cb4:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cba:	69fa      	ldr	r2, [r7, #28]
 8002cbc:	fb02 f303 	mul.w	r3, r2, r3
 8002cc0:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	6859      	ldr	r1, [r3, #4]
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	1acb      	subs	r3, r1, r3
 8002ccc:	69f9      	ldr	r1, [r7, #28]
 8002cce:	fb01 f303 	mul.w	r3, r1, r3
 8002cd2:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002cd4:	68f9      	ldr	r1, [r7, #12]
 8002cd6:	6809      	ldr	r1, [r1, #0]
 8002cd8:	4608      	mov	r0, r1
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	01c9      	lsls	r1, r1, #7
 8002cde:	4401      	add	r1, r0
 8002ce0:	3184      	adds	r1, #132	@ 0x84
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	461a      	mov	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	01db      	lsls	r3, r3, #7
 8002cf0:	4413      	add	r3, r2
 8002cf2:	3384      	adds	r3, #132	@ 0x84
 8002cf4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	01db      	lsls	r3, r3, #7
 8002d00:	440b      	add	r3, r1
 8002d02:	3384      	adds	r3, #132	@ 0x84
 8002d04:	4619      	mov	r1, r3
 8002d06:	4b14      	ldr	r3, [pc, #80]	@ (8002d58 <LTDC_SetConfig+0x330>)
 8002d08:	4013      	ands	r3, r2
 8002d0a:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	461a      	mov	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	01db      	lsls	r3, r3, #7
 8002d16:	4413      	add	r3, r2
 8002d18:	3384      	adds	r3, #132	@ 0x84
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d20:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	01db      	lsls	r3, r3, #7
 8002d2c:	4413      	add	r3, r2
 8002d2e:	3384      	adds	r3, #132	@ 0x84
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	6812      	ldr	r2, [r2, #0]
 8002d36:	4611      	mov	r1, r2
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	01d2      	lsls	r2, r2, #7
 8002d3c:	440a      	add	r2, r1
 8002d3e:	3284      	adds	r2, #132	@ 0x84
 8002d40:	f043 0301 	orr.w	r3, r3, #1
 8002d44:	6013      	str	r3, [r2, #0]
}
 8002d46:	bf00      	nop
 8002d48:	3724      	adds	r7, #36	@ 0x24
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	fffff8f8 	.word	0xfffff8f8
 8002d58:	fffff800 	.word	0xfffff800

08002d5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002d64:	2300      	movs	r3, #0
 8002d66:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e291      	b.n	8003296 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f000 8087 	beq.w	8002e8e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d80:	4b96      	ldr	r3, [pc, #600]	@ (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 030c 	and.w	r3, r3, #12
 8002d88:	2b04      	cmp	r3, #4
 8002d8a:	d00c      	beq.n	8002da6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d8c:	4b93      	ldr	r3, [pc, #588]	@ (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 030c 	and.w	r3, r3, #12
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	d112      	bne.n	8002dbe <HAL_RCC_OscConfig+0x62>
 8002d98:	4b90      	ldr	r3, [pc, #576]	@ (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002da0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002da4:	d10b      	bne.n	8002dbe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da6:	4b8d      	ldr	r3, [pc, #564]	@ (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d06c      	beq.n	8002e8c <HAL_RCC_OscConfig+0x130>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d168      	bne.n	8002e8c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e26b      	b.n	8003296 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dc6:	d106      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x7a>
 8002dc8:	4b84      	ldr	r3, [pc, #528]	@ (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a83      	ldr	r2, [pc, #524]	@ (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002dce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dd2:	6013      	str	r3, [r2, #0]
 8002dd4:	e02e      	b.n	8002e34 <HAL_RCC_OscConfig+0xd8>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10c      	bne.n	8002df8 <HAL_RCC_OscConfig+0x9c>
 8002dde:	4b7f      	ldr	r3, [pc, #508]	@ (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a7e      	ldr	r2, [pc, #504]	@ (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002de4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002de8:	6013      	str	r3, [r2, #0]
 8002dea:	4b7c      	ldr	r3, [pc, #496]	@ (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a7b      	ldr	r2, [pc, #492]	@ (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002df0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002df4:	6013      	str	r3, [r2, #0]
 8002df6:	e01d      	b.n	8002e34 <HAL_RCC_OscConfig+0xd8>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e00:	d10c      	bne.n	8002e1c <HAL_RCC_OscConfig+0xc0>
 8002e02:	4b76      	ldr	r3, [pc, #472]	@ (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a75      	ldr	r2, [pc, #468]	@ (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002e08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e0c:	6013      	str	r3, [r2, #0]
 8002e0e:	4b73      	ldr	r3, [pc, #460]	@ (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a72      	ldr	r2, [pc, #456]	@ (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002e14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e18:	6013      	str	r3, [r2, #0]
 8002e1a:	e00b      	b.n	8002e34 <HAL_RCC_OscConfig+0xd8>
 8002e1c:	4b6f      	ldr	r3, [pc, #444]	@ (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a6e      	ldr	r2, [pc, #440]	@ (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002e22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e26:	6013      	str	r3, [r2, #0]
 8002e28:	4b6c      	ldr	r3, [pc, #432]	@ (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a6b      	ldr	r2, [pc, #428]	@ (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002e2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d013      	beq.n	8002e64 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3c:	f7fe fd44 	bl	80018c8 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e44:	f7fe fd40 	bl	80018c8 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b64      	cmp	r3, #100	@ 0x64
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e21f      	b.n	8003296 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e56:	4b61      	ldr	r3, [pc, #388]	@ (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0f0      	beq.n	8002e44 <HAL_RCC_OscConfig+0xe8>
 8002e62:	e014      	b.n	8002e8e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e64:	f7fe fd30 	bl	80018c8 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e6c:	f7fe fd2c 	bl	80018c8 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b64      	cmp	r3, #100	@ 0x64
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e20b      	b.n	8003296 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e7e:	4b57      	ldr	r3, [pc, #348]	@ (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0x110>
 8002e8a:	e000      	b.n	8002e8e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d069      	beq.n	8002f6e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e9a:	4b50      	ldr	r3, [pc, #320]	@ (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 030c 	and.w	r3, r3, #12
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00b      	beq.n	8002ebe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ea6:	4b4d      	ldr	r3, [pc, #308]	@ (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 030c 	and.w	r3, r3, #12
 8002eae:	2b08      	cmp	r3, #8
 8002eb0:	d11c      	bne.n	8002eec <HAL_RCC_OscConfig+0x190>
 8002eb2:	4b4a      	ldr	r3, [pc, #296]	@ (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d116      	bne.n	8002eec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ebe:	4b47      	ldr	r3, [pc, #284]	@ (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d005      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x17a>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d001      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e1df      	b.n	8003296 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed6:	4b41      	ldr	r3, [pc, #260]	@ (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	493d      	ldr	r1, [pc, #244]	@ (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eea:	e040      	b.n	8002f6e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d023      	beq.n	8002f3c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ef4:	4b39      	ldr	r3, [pc, #228]	@ (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a38      	ldr	r2, [pc, #224]	@ (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002efa:	f043 0301 	orr.w	r3, r3, #1
 8002efe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f00:	f7fe fce2 	bl	80018c8 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f08:	f7fe fcde 	bl	80018c8 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e1bd      	b.n	8003296 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f1a:	4b30      	ldr	r3, [pc, #192]	@ (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0f0      	beq.n	8002f08 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f26:	4b2d      	ldr	r3, [pc, #180]	@ (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	4929      	ldr	r1, [pc, #164]	@ (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	600b      	str	r3, [r1, #0]
 8002f3a:	e018      	b.n	8002f6e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f3c:	4b27      	ldr	r3, [pc, #156]	@ (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a26      	ldr	r2, [pc, #152]	@ (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002f42:	f023 0301 	bic.w	r3, r3, #1
 8002f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f48:	f7fe fcbe 	bl	80018c8 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f50:	f7fe fcba 	bl	80018c8 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e199      	b.n	8003296 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f62:	4b1e      	ldr	r3, [pc, #120]	@ (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1f0      	bne.n	8002f50 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0308 	and.w	r3, r3, #8
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d038      	beq.n	8002fec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d019      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f82:	4b16      	ldr	r3, [pc, #88]	@ (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002f84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f86:	4a15      	ldr	r2, [pc, #84]	@ (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002f88:	f043 0301 	orr.w	r3, r3, #1
 8002f8c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8e:	f7fe fc9b 	bl	80018c8 <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f94:	e008      	b.n	8002fa8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f96:	f7fe fc97 	bl	80018c8 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e176      	b.n	8003296 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002faa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0f0      	beq.n	8002f96 <HAL_RCC_OscConfig+0x23a>
 8002fb4:	e01a      	b.n	8002fec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fb6:	4b09      	ldr	r3, [pc, #36]	@ (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002fb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fba:	4a08      	ldr	r2, [pc, #32]	@ (8002fdc <HAL_RCC_OscConfig+0x280>)
 8002fbc:	f023 0301 	bic.w	r3, r3, #1
 8002fc0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc2:	f7fe fc81 	bl	80018c8 <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fc8:	e00a      	b.n	8002fe0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fca:	f7fe fc7d 	bl	80018c8 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d903      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e15c      	b.n	8003296 <HAL_RCC_OscConfig+0x53a>
 8002fdc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fe0:	4b91      	ldr	r3, [pc, #580]	@ (8003228 <HAL_RCC_OscConfig+0x4cc>)
 8002fe2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1ee      	bne.n	8002fca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 80a4 	beq.w	8003142 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ffa:	4b8b      	ldr	r3, [pc, #556]	@ (8003228 <HAL_RCC_OscConfig+0x4cc>)
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10d      	bne.n	8003022 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003006:	4b88      	ldr	r3, [pc, #544]	@ (8003228 <HAL_RCC_OscConfig+0x4cc>)
 8003008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300a:	4a87      	ldr	r2, [pc, #540]	@ (8003228 <HAL_RCC_OscConfig+0x4cc>)
 800300c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003010:	6413      	str	r3, [r2, #64]	@ 0x40
 8003012:	4b85      	ldr	r3, [pc, #532]	@ (8003228 <HAL_RCC_OscConfig+0x4cc>)
 8003014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003016:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800301a:	60bb      	str	r3, [r7, #8]
 800301c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800301e:	2301      	movs	r3, #1
 8003020:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003022:	4b82      	ldr	r3, [pc, #520]	@ (800322c <HAL_RCC_OscConfig+0x4d0>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800302a:	2b00      	cmp	r3, #0
 800302c:	d118      	bne.n	8003060 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800302e:	4b7f      	ldr	r3, [pc, #508]	@ (800322c <HAL_RCC_OscConfig+0x4d0>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a7e      	ldr	r2, [pc, #504]	@ (800322c <HAL_RCC_OscConfig+0x4d0>)
 8003034:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003038:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800303a:	f7fe fc45 	bl	80018c8 <HAL_GetTick>
 800303e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003040:	e008      	b.n	8003054 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003042:	f7fe fc41 	bl	80018c8 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b64      	cmp	r3, #100	@ 0x64
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e120      	b.n	8003296 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003054:	4b75      	ldr	r3, [pc, #468]	@ (800322c <HAL_RCC_OscConfig+0x4d0>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800305c:	2b00      	cmp	r3, #0
 800305e:	d0f0      	beq.n	8003042 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d106      	bne.n	8003076 <HAL_RCC_OscConfig+0x31a>
 8003068:	4b6f      	ldr	r3, [pc, #444]	@ (8003228 <HAL_RCC_OscConfig+0x4cc>)
 800306a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800306c:	4a6e      	ldr	r2, [pc, #440]	@ (8003228 <HAL_RCC_OscConfig+0x4cc>)
 800306e:	f043 0301 	orr.w	r3, r3, #1
 8003072:	6713      	str	r3, [r2, #112]	@ 0x70
 8003074:	e02d      	b.n	80030d2 <HAL_RCC_OscConfig+0x376>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10c      	bne.n	8003098 <HAL_RCC_OscConfig+0x33c>
 800307e:	4b6a      	ldr	r3, [pc, #424]	@ (8003228 <HAL_RCC_OscConfig+0x4cc>)
 8003080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003082:	4a69      	ldr	r2, [pc, #420]	@ (8003228 <HAL_RCC_OscConfig+0x4cc>)
 8003084:	f023 0301 	bic.w	r3, r3, #1
 8003088:	6713      	str	r3, [r2, #112]	@ 0x70
 800308a:	4b67      	ldr	r3, [pc, #412]	@ (8003228 <HAL_RCC_OscConfig+0x4cc>)
 800308c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800308e:	4a66      	ldr	r2, [pc, #408]	@ (8003228 <HAL_RCC_OscConfig+0x4cc>)
 8003090:	f023 0304 	bic.w	r3, r3, #4
 8003094:	6713      	str	r3, [r2, #112]	@ 0x70
 8003096:	e01c      	b.n	80030d2 <HAL_RCC_OscConfig+0x376>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	2b05      	cmp	r3, #5
 800309e:	d10c      	bne.n	80030ba <HAL_RCC_OscConfig+0x35e>
 80030a0:	4b61      	ldr	r3, [pc, #388]	@ (8003228 <HAL_RCC_OscConfig+0x4cc>)
 80030a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030a4:	4a60      	ldr	r2, [pc, #384]	@ (8003228 <HAL_RCC_OscConfig+0x4cc>)
 80030a6:	f043 0304 	orr.w	r3, r3, #4
 80030aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80030ac:	4b5e      	ldr	r3, [pc, #376]	@ (8003228 <HAL_RCC_OscConfig+0x4cc>)
 80030ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b0:	4a5d      	ldr	r2, [pc, #372]	@ (8003228 <HAL_RCC_OscConfig+0x4cc>)
 80030b2:	f043 0301 	orr.w	r3, r3, #1
 80030b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80030b8:	e00b      	b.n	80030d2 <HAL_RCC_OscConfig+0x376>
 80030ba:	4b5b      	ldr	r3, [pc, #364]	@ (8003228 <HAL_RCC_OscConfig+0x4cc>)
 80030bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030be:	4a5a      	ldr	r2, [pc, #360]	@ (8003228 <HAL_RCC_OscConfig+0x4cc>)
 80030c0:	f023 0301 	bic.w	r3, r3, #1
 80030c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80030c6:	4b58      	ldr	r3, [pc, #352]	@ (8003228 <HAL_RCC_OscConfig+0x4cc>)
 80030c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ca:	4a57      	ldr	r2, [pc, #348]	@ (8003228 <HAL_RCC_OscConfig+0x4cc>)
 80030cc:	f023 0304 	bic.w	r3, r3, #4
 80030d0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d015      	beq.n	8003106 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030da:	f7fe fbf5 	bl	80018c8 <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e0:	e00a      	b.n	80030f8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030e2:	f7fe fbf1 	bl	80018c8 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e0ce      	b.n	8003296 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030f8:	4b4b      	ldr	r3, [pc, #300]	@ (8003228 <HAL_RCC_OscConfig+0x4cc>)
 80030fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d0ee      	beq.n	80030e2 <HAL_RCC_OscConfig+0x386>
 8003104:	e014      	b.n	8003130 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003106:	f7fe fbdf 	bl	80018c8 <HAL_GetTick>
 800310a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800310c:	e00a      	b.n	8003124 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800310e:	f7fe fbdb 	bl	80018c8 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	f241 3288 	movw	r2, #5000	@ 0x1388
 800311c:	4293      	cmp	r3, r2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e0b8      	b.n	8003296 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003124:	4b40      	ldr	r3, [pc, #256]	@ (8003228 <HAL_RCC_OscConfig+0x4cc>)
 8003126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d1ee      	bne.n	800310e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003130:	7dfb      	ldrb	r3, [r7, #23]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d105      	bne.n	8003142 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003136:	4b3c      	ldr	r3, [pc, #240]	@ (8003228 <HAL_RCC_OscConfig+0x4cc>)
 8003138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313a:	4a3b      	ldr	r2, [pc, #236]	@ (8003228 <HAL_RCC_OscConfig+0x4cc>)
 800313c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003140:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 80a4 	beq.w	8003294 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800314c:	4b36      	ldr	r3, [pc, #216]	@ (8003228 <HAL_RCC_OscConfig+0x4cc>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 030c 	and.w	r3, r3, #12
 8003154:	2b08      	cmp	r3, #8
 8003156:	d06b      	beq.n	8003230 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	2b02      	cmp	r3, #2
 800315e:	d149      	bne.n	80031f4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003160:	4b31      	ldr	r3, [pc, #196]	@ (8003228 <HAL_RCC_OscConfig+0x4cc>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a30      	ldr	r2, [pc, #192]	@ (8003228 <HAL_RCC_OscConfig+0x4cc>)
 8003166:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800316a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316c:	f7fe fbac 	bl	80018c8 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003174:	f7fe fba8 	bl	80018c8 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e087      	b.n	8003296 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003186:	4b28      	ldr	r3, [pc, #160]	@ (8003228 <HAL_RCC_OscConfig+0x4cc>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1f0      	bne.n	8003174 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	69da      	ldr	r2, [r3, #28]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	431a      	orrs	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a0:	019b      	lsls	r3, r3, #6
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a8:	085b      	lsrs	r3, r3, #1
 80031aa:	3b01      	subs	r3, #1
 80031ac:	041b      	lsls	r3, r3, #16
 80031ae:	431a      	orrs	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b4:	061b      	lsls	r3, r3, #24
 80031b6:	4313      	orrs	r3, r2
 80031b8:	4a1b      	ldr	r2, [pc, #108]	@ (8003228 <HAL_RCC_OscConfig+0x4cc>)
 80031ba:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80031be:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031c0:	4b19      	ldr	r3, [pc, #100]	@ (8003228 <HAL_RCC_OscConfig+0x4cc>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a18      	ldr	r2, [pc, #96]	@ (8003228 <HAL_RCC_OscConfig+0x4cc>)
 80031c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031cc:	f7fe fb7c 	bl	80018c8 <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d4:	f7fe fb78 	bl	80018c8 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e057      	b.n	8003296 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031e6:	4b10      	ldr	r3, [pc, #64]	@ (8003228 <HAL_RCC_OscConfig+0x4cc>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d0f0      	beq.n	80031d4 <HAL_RCC_OscConfig+0x478>
 80031f2:	e04f      	b.n	8003294 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003228 <HAL_RCC_OscConfig+0x4cc>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a0b      	ldr	r2, [pc, #44]	@ (8003228 <HAL_RCC_OscConfig+0x4cc>)
 80031fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003200:	f7fe fb62 	bl	80018c8 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003208:	f7fe fb5e 	bl	80018c8 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e03d      	b.n	8003296 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800321a:	4b03      	ldr	r3, [pc, #12]	@ (8003228 <HAL_RCC_OscConfig+0x4cc>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1f0      	bne.n	8003208 <HAL_RCC_OscConfig+0x4ac>
 8003226:	e035      	b.n	8003294 <HAL_RCC_OscConfig+0x538>
 8003228:	40023800 	.word	0x40023800
 800322c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003230:	4b1b      	ldr	r3, [pc, #108]	@ (80032a0 <HAL_RCC_OscConfig+0x544>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d028      	beq.n	8003290 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003248:	429a      	cmp	r2, r3
 800324a:	d121      	bne.n	8003290 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003256:	429a      	cmp	r2, r3
 8003258:	d11a      	bne.n	8003290 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003260:	4013      	ands	r3, r2
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003266:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003268:	4293      	cmp	r3, r2
 800326a:	d111      	bne.n	8003290 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003276:	085b      	lsrs	r3, r3, #1
 8003278:	3b01      	subs	r3, #1
 800327a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800327c:	429a      	cmp	r2, r3
 800327e:	d107      	bne.n	8003290 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800328a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800328c:	429a      	cmp	r2, r3
 800328e:	d001      	beq.n	8003294 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e000      	b.n	8003296 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3718      	adds	r7, #24
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	40023800 	.word	0x40023800

080032a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80032ae:	2300      	movs	r3, #0
 80032b0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e0d0      	b.n	800345e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032bc:	4b6a      	ldr	r3, [pc, #424]	@ (8003468 <HAL_RCC_ClockConfig+0x1c4>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 030f 	and.w	r3, r3, #15
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d910      	bls.n	80032ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ca:	4b67      	ldr	r3, [pc, #412]	@ (8003468 <HAL_RCC_ClockConfig+0x1c4>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f023 020f 	bic.w	r2, r3, #15
 80032d2:	4965      	ldr	r1, [pc, #404]	@ (8003468 <HAL_RCC_ClockConfig+0x1c4>)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032da:	4b63      	ldr	r3, [pc, #396]	@ (8003468 <HAL_RCC_ClockConfig+0x1c4>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d001      	beq.n	80032ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e0b8      	b.n	800345e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d020      	beq.n	800333a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b00      	cmp	r3, #0
 8003302:	d005      	beq.n	8003310 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003304:	4b59      	ldr	r3, [pc, #356]	@ (800346c <HAL_RCC_ClockConfig+0x1c8>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	4a58      	ldr	r2, [pc, #352]	@ (800346c <HAL_RCC_ClockConfig+0x1c8>)
 800330a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800330e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0308 	and.w	r3, r3, #8
 8003318:	2b00      	cmp	r3, #0
 800331a:	d005      	beq.n	8003328 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800331c:	4b53      	ldr	r3, [pc, #332]	@ (800346c <HAL_RCC_ClockConfig+0x1c8>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	4a52      	ldr	r2, [pc, #328]	@ (800346c <HAL_RCC_ClockConfig+0x1c8>)
 8003322:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003326:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003328:	4b50      	ldr	r3, [pc, #320]	@ (800346c <HAL_RCC_ClockConfig+0x1c8>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	494d      	ldr	r1, [pc, #308]	@ (800346c <HAL_RCC_ClockConfig+0x1c8>)
 8003336:	4313      	orrs	r3, r2
 8003338:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d040      	beq.n	80033c8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d107      	bne.n	800335e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800334e:	4b47      	ldr	r3, [pc, #284]	@ (800346c <HAL_RCC_ClockConfig+0x1c8>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d115      	bne.n	8003386 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e07f      	b.n	800345e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	2b02      	cmp	r3, #2
 8003364:	d107      	bne.n	8003376 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003366:	4b41      	ldr	r3, [pc, #260]	@ (800346c <HAL_RCC_ClockConfig+0x1c8>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d109      	bne.n	8003386 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e073      	b.n	800345e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003376:	4b3d      	ldr	r3, [pc, #244]	@ (800346c <HAL_RCC_ClockConfig+0x1c8>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e06b      	b.n	800345e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003386:	4b39      	ldr	r3, [pc, #228]	@ (800346c <HAL_RCC_ClockConfig+0x1c8>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f023 0203 	bic.w	r2, r3, #3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	4936      	ldr	r1, [pc, #216]	@ (800346c <HAL_RCC_ClockConfig+0x1c8>)
 8003394:	4313      	orrs	r3, r2
 8003396:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003398:	f7fe fa96 	bl	80018c8 <HAL_GetTick>
 800339c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800339e:	e00a      	b.n	80033b6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033a0:	f7fe fa92 	bl	80018c8 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e053      	b.n	800345e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033b6:	4b2d      	ldr	r3, [pc, #180]	@ (800346c <HAL_RCC_ClockConfig+0x1c8>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 020c 	and.w	r2, r3, #12
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d1eb      	bne.n	80033a0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033c8:	4b27      	ldr	r3, [pc, #156]	@ (8003468 <HAL_RCC_ClockConfig+0x1c4>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 030f 	and.w	r3, r3, #15
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d210      	bcs.n	80033f8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033d6:	4b24      	ldr	r3, [pc, #144]	@ (8003468 <HAL_RCC_ClockConfig+0x1c4>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f023 020f 	bic.w	r2, r3, #15
 80033de:	4922      	ldr	r1, [pc, #136]	@ (8003468 <HAL_RCC_ClockConfig+0x1c4>)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e6:	4b20      	ldr	r3, [pc, #128]	@ (8003468 <HAL_RCC_ClockConfig+0x1c4>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 030f 	and.w	r3, r3, #15
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d001      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e032      	b.n	800345e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b00      	cmp	r3, #0
 8003402:	d008      	beq.n	8003416 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003404:	4b19      	ldr	r3, [pc, #100]	@ (800346c <HAL_RCC_ClockConfig+0x1c8>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	4916      	ldr	r1, [pc, #88]	@ (800346c <HAL_RCC_ClockConfig+0x1c8>)
 8003412:	4313      	orrs	r3, r2
 8003414:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0308 	and.w	r3, r3, #8
 800341e:	2b00      	cmp	r3, #0
 8003420:	d009      	beq.n	8003436 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003422:	4b12      	ldr	r3, [pc, #72]	@ (800346c <HAL_RCC_ClockConfig+0x1c8>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	490e      	ldr	r1, [pc, #56]	@ (800346c <HAL_RCC_ClockConfig+0x1c8>)
 8003432:	4313      	orrs	r3, r2
 8003434:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003436:	f000 f821 	bl	800347c <HAL_RCC_GetSysClockFreq>
 800343a:	4602      	mov	r2, r0
 800343c:	4b0b      	ldr	r3, [pc, #44]	@ (800346c <HAL_RCC_ClockConfig+0x1c8>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	091b      	lsrs	r3, r3, #4
 8003442:	f003 030f 	and.w	r3, r3, #15
 8003446:	490a      	ldr	r1, [pc, #40]	@ (8003470 <HAL_RCC_ClockConfig+0x1cc>)
 8003448:	5ccb      	ldrb	r3, [r1, r3]
 800344a:	fa22 f303 	lsr.w	r3, r2, r3
 800344e:	4a09      	ldr	r2, [pc, #36]	@ (8003474 <HAL_RCC_ClockConfig+0x1d0>)
 8003450:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003452:	4b09      	ldr	r3, [pc, #36]	@ (8003478 <HAL_RCC_ClockConfig+0x1d4>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4618      	mov	r0, r3
 8003458:	f7fe f9f2 	bl	8001840 <HAL_InitTick>

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	40023c00 	.word	0x40023c00
 800346c:	40023800 	.word	0x40023800
 8003470:	080093c8 	.word	0x080093c8
 8003474:	20000000 	.word	0x20000000
 8003478:	20000004 	.word	0x20000004

0800347c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800347c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003480:	b090      	sub	sp, #64	@ 0x40
 8003482:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003484:	2300      	movs	r3, #0
 8003486:	637b      	str	r3, [r7, #52]	@ 0x34
 8003488:	2300      	movs	r3, #0
 800348a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800348c:	2300      	movs	r3, #0
 800348e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003490:	2300      	movs	r3, #0
 8003492:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003494:	4b59      	ldr	r3, [pc, #356]	@ (80035fc <HAL_RCC_GetSysClockFreq+0x180>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f003 030c 	and.w	r3, r3, #12
 800349c:	2b08      	cmp	r3, #8
 800349e:	d00d      	beq.n	80034bc <HAL_RCC_GetSysClockFreq+0x40>
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	f200 80a1 	bhi.w	80035e8 <HAL_RCC_GetSysClockFreq+0x16c>
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d002      	beq.n	80034b0 <HAL_RCC_GetSysClockFreq+0x34>
 80034aa:	2b04      	cmp	r3, #4
 80034ac:	d003      	beq.n	80034b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80034ae:	e09b      	b.n	80035e8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034b0:	4b53      	ldr	r3, [pc, #332]	@ (8003600 <HAL_RCC_GetSysClockFreq+0x184>)
 80034b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034b4:	e09b      	b.n	80035ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034b6:	4b53      	ldr	r3, [pc, #332]	@ (8003604 <HAL_RCC_GetSysClockFreq+0x188>)
 80034b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034ba:	e098      	b.n	80035ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034bc:	4b4f      	ldr	r3, [pc, #316]	@ (80035fc <HAL_RCC_GetSysClockFreq+0x180>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034c4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80034c6:	4b4d      	ldr	r3, [pc, #308]	@ (80035fc <HAL_RCC_GetSysClockFreq+0x180>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d028      	beq.n	8003524 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034d2:	4b4a      	ldr	r3, [pc, #296]	@ (80035fc <HAL_RCC_GetSysClockFreq+0x180>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	099b      	lsrs	r3, r3, #6
 80034d8:	2200      	movs	r2, #0
 80034da:	623b      	str	r3, [r7, #32]
 80034dc:	627a      	str	r2, [r7, #36]	@ 0x24
 80034de:	6a3b      	ldr	r3, [r7, #32]
 80034e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80034e4:	2100      	movs	r1, #0
 80034e6:	4b47      	ldr	r3, [pc, #284]	@ (8003604 <HAL_RCC_GetSysClockFreq+0x188>)
 80034e8:	fb03 f201 	mul.w	r2, r3, r1
 80034ec:	2300      	movs	r3, #0
 80034ee:	fb00 f303 	mul.w	r3, r0, r3
 80034f2:	4413      	add	r3, r2
 80034f4:	4a43      	ldr	r2, [pc, #268]	@ (8003604 <HAL_RCC_GetSysClockFreq+0x188>)
 80034f6:	fba0 1202 	umull	r1, r2, r0, r2
 80034fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034fc:	460a      	mov	r2, r1
 80034fe:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003500:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003502:	4413      	add	r3, r2
 8003504:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003508:	2200      	movs	r2, #0
 800350a:	61bb      	str	r3, [r7, #24]
 800350c:	61fa      	str	r2, [r7, #28]
 800350e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003512:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003516:	f7fc fe77 	bl	8000208 <__aeabi_uldivmod>
 800351a:	4602      	mov	r2, r0
 800351c:	460b      	mov	r3, r1
 800351e:	4613      	mov	r3, r2
 8003520:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003522:	e053      	b.n	80035cc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003524:	4b35      	ldr	r3, [pc, #212]	@ (80035fc <HAL_RCC_GetSysClockFreq+0x180>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	099b      	lsrs	r3, r3, #6
 800352a:	2200      	movs	r2, #0
 800352c:	613b      	str	r3, [r7, #16]
 800352e:	617a      	str	r2, [r7, #20]
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003536:	f04f 0b00 	mov.w	fp, #0
 800353a:	4652      	mov	r2, sl
 800353c:	465b      	mov	r3, fp
 800353e:	f04f 0000 	mov.w	r0, #0
 8003542:	f04f 0100 	mov.w	r1, #0
 8003546:	0159      	lsls	r1, r3, #5
 8003548:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800354c:	0150      	lsls	r0, r2, #5
 800354e:	4602      	mov	r2, r0
 8003550:	460b      	mov	r3, r1
 8003552:	ebb2 080a 	subs.w	r8, r2, sl
 8003556:	eb63 090b 	sbc.w	r9, r3, fp
 800355a:	f04f 0200 	mov.w	r2, #0
 800355e:	f04f 0300 	mov.w	r3, #0
 8003562:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003566:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800356a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800356e:	ebb2 0408 	subs.w	r4, r2, r8
 8003572:	eb63 0509 	sbc.w	r5, r3, r9
 8003576:	f04f 0200 	mov.w	r2, #0
 800357a:	f04f 0300 	mov.w	r3, #0
 800357e:	00eb      	lsls	r3, r5, #3
 8003580:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003584:	00e2      	lsls	r2, r4, #3
 8003586:	4614      	mov	r4, r2
 8003588:	461d      	mov	r5, r3
 800358a:	eb14 030a 	adds.w	r3, r4, sl
 800358e:	603b      	str	r3, [r7, #0]
 8003590:	eb45 030b 	adc.w	r3, r5, fp
 8003594:	607b      	str	r3, [r7, #4]
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	f04f 0300 	mov.w	r3, #0
 800359e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035a2:	4629      	mov	r1, r5
 80035a4:	028b      	lsls	r3, r1, #10
 80035a6:	4621      	mov	r1, r4
 80035a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035ac:	4621      	mov	r1, r4
 80035ae:	028a      	lsls	r2, r1, #10
 80035b0:	4610      	mov	r0, r2
 80035b2:	4619      	mov	r1, r3
 80035b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035b6:	2200      	movs	r2, #0
 80035b8:	60bb      	str	r3, [r7, #8]
 80035ba:	60fa      	str	r2, [r7, #12]
 80035bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035c0:	f7fc fe22 	bl	8000208 <__aeabi_uldivmod>
 80035c4:	4602      	mov	r2, r0
 80035c6:	460b      	mov	r3, r1
 80035c8:	4613      	mov	r3, r2
 80035ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80035cc:	4b0b      	ldr	r3, [pc, #44]	@ (80035fc <HAL_RCC_GetSysClockFreq+0x180>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	0c1b      	lsrs	r3, r3, #16
 80035d2:	f003 0303 	and.w	r3, r3, #3
 80035d6:	3301      	adds	r3, #1
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80035dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80035de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035e6:	e002      	b.n	80035ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035e8:	4b05      	ldr	r3, [pc, #20]	@ (8003600 <HAL_RCC_GetSysClockFreq+0x184>)
 80035ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3740      	adds	r7, #64	@ 0x40
 80035f4:	46bd      	mov	sp, r7
 80035f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035fa:	bf00      	nop
 80035fc:	40023800 	.word	0x40023800
 8003600:	00f42400 	.word	0x00f42400
 8003604:	017d7840 	.word	0x017d7840

08003608 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b088      	sub	sp, #32
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003610:	2300      	movs	r3, #0
 8003612:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003614:	2300      	movs	r3, #0
 8003616:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003618:	2300      	movs	r3, #0
 800361a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800361c:	2300      	movs	r3, #0
 800361e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003620:	2300      	movs	r3, #0
 8003622:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b00      	cmp	r3, #0
 800362e:	d012      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003630:	4b69      	ldr	r3, [pc, #420]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	4a68      	ldr	r2, [pc, #416]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003636:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800363a:	6093      	str	r3, [r2, #8]
 800363c:	4b66      	ldr	r3, [pc, #408]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003644:	4964      	ldr	r1, [pc, #400]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003646:	4313      	orrs	r3, r2
 8003648:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003652:	2301      	movs	r3, #1
 8003654:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d017      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003662:	4b5d      	ldr	r3, [pc, #372]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003664:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003668:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003670:	4959      	ldr	r1, [pc, #356]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003672:	4313      	orrs	r3, r2
 8003674:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800367c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003680:	d101      	bne.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003682:	2301      	movs	r3, #1
 8003684:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800368e:	2301      	movs	r3, #1
 8003690:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d017      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800369e:	4b4e      	ldr	r3, [pc, #312]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036a4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ac:	494a      	ldr	r1, [pc, #296]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036bc:	d101      	bne.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80036be:	2301      	movs	r3, #1
 80036c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80036ca:	2301      	movs	r3, #1
 80036cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80036da:	2301      	movs	r3, #1
 80036dc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0320 	and.w	r3, r3, #32
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f000 808b 	beq.w	8003802 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80036ec:	4b3a      	ldr	r3, [pc, #232]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f0:	4a39      	ldr	r2, [pc, #228]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80036f8:	4b37      	ldr	r3, [pc, #220]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003700:	60bb      	str	r3, [r7, #8]
 8003702:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003704:	4b35      	ldr	r3, [pc, #212]	@ (80037dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a34      	ldr	r2, [pc, #208]	@ (80037dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800370a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800370e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003710:	f7fe f8da 	bl	80018c8 <HAL_GetTick>
 8003714:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003716:	e008      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003718:	f7fe f8d6 	bl	80018c8 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b64      	cmp	r3, #100	@ 0x64
 8003724:	d901      	bls.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e357      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800372a:	4b2c      	ldr	r3, [pc, #176]	@ (80037dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0f0      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003736:	4b28      	ldr	r3, [pc, #160]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800373a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800373e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d035      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	429a      	cmp	r2, r3
 8003752:	d02e      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003754:	4b20      	ldr	r3, [pc, #128]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003756:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003758:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800375c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800375e:	4b1e      	ldr	r3, [pc, #120]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003762:	4a1d      	ldr	r2, [pc, #116]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003764:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003768:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800376a:	4b1b      	ldr	r3, [pc, #108]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800376c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800376e:	4a1a      	ldr	r2, [pc, #104]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003770:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003774:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003776:	4a18      	ldr	r2, [pc, #96]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800377c:	4b16      	ldr	r3, [pc, #88]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800377e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	2b01      	cmp	r3, #1
 8003786:	d114      	bne.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003788:	f7fe f89e 	bl	80018c8 <HAL_GetTick>
 800378c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800378e:	e00a      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003790:	f7fe f89a 	bl	80018c8 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800379e:	4293      	cmp	r3, r2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e319      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a6:	4b0c      	ldr	r3, [pc, #48]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0ee      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037be:	d111      	bne.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80037c0:	4b05      	ldr	r3, [pc, #20]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80037cc:	4b04      	ldr	r3, [pc, #16]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80037ce:	400b      	ands	r3, r1
 80037d0:	4901      	ldr	r1, [pc, #4]	@ (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	608b      	str	r3, [r1, #8]
 80037d6:	e00b      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80037d8:	40023800 	.word	0x40023800
 80037dc:	40007000 	.word	0x40007000
 80037e0:	0ffffcff 	.word	0x0ffffcff
 80037e4:	4baa      	ldr	r3, [pc, #680]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	4aa9      	ldr	r2, [pc, #676]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ea:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80037ee:	6093      	str	r3, [r2, #8]
 80037f0:	4ba7      	ldr	r3, [pc, #668]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037fc:	49a4      	ldr	r1, [pc, #656]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0310 	and.w	r3, r3, #16
 800380a:	2b00      	cmp	r3, #0
 800380c:	d010      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800380e:	4ba0      	ldr	r3, [pc, #640]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003810:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003814:	4a9e      	ldr	r2, [pc, #632]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003816:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800381a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800381e:	4b9c      	ldr	r3, [pc, #624]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003820:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003828:	4999      	ldr	r1, [pc, #612]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800382a:	4313      	orrs	r3, r2
 800382c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00a      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800383c:	4b94      	ldr	r3, [pc, #592]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800383e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003842:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800384a:	4991      	ldr	r1, [pc, #580]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800384c:	4313      	orrs	r3, r2
 800384e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00a      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800385e:	4b8c      	ldr	r3, [pc, #560]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003860:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003864:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800386c:	4988      	ldr	r1, [pc, #544]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800386e:	4313      	orrs	r3, r2
 8003870:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00a      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003880:	4b83      	ldr	r3, [pc, #524]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003886:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800388e:	4980      	ldr	r1, [pc, #512]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003890:	4313      	orrs	r3, r2
 8003892:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00a      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80038a2:	4b7b      	ldr	r3, [pc, #492]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038a8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038b0:	4977      	ldr	r1, [pc, #476]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00a      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038c4:	4b72      	ldr	r3, [pc, #456]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ca:	f023 0203 	bic.w	r2, r3, #3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d2:	496f      	ldr	r1, [pc, #444]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00a      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038e6:	4b6a      	ldr	r3, [pc, #424]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ec:	f023 020c 	bic.w	r2, r3, #12
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038f4:	4966      	ldr	r1, [pc, #408]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00a      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003908:	4b61      	ldr	r3, [pc, #388]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800390a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800390e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003916:	495e      	ldr	r1, [pc, #376]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003918:	4313      	orrs	r3, r2
 800391a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00a      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800392a:	4b59      	ldr	r3, [pc, #356]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800392c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003930:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003938:	4955      	ldr	r1, [pc, #340]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800393a:	4313      	orrs	r3, r2
 800393c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00a      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800394c:	4b50      	ldr	r3, [pc, #320]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800394e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003952:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800395a:	494d      	ldr	r1, [pc, #308]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800395c:	4313      	orrs	r3, r2
 800395e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00a      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800396e:	4b48      	ldr	r3, [pc, #288]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003970:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003974:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800397c:	4944      	ldr	r1, [pc, #272]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800397e:	4313      	orrs	r3, r2
 8003980:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00a      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003990:	4b3f      	ldr	r3, [pc, #252]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003996:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800399e:	493c      	ldr	r1, [pc, #240]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00a      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80039b2:	4b37      	ldr	r3, [pc, #220]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039b8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039c0:	4933      	ldr	r1, [pc, #204]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00a      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80039d4:	4b2e      	ldr	r3, [pc, #184]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039da:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039e2:	492b      	ldr	r1, [pc, #172]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d011      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80039f6:	4b26      	ldr	r3, [pc, #152]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039fc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a04:	4922      	ldr	r1, [pc, #136]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a14:	d101      	bne.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003a16:	2301      	movs	r3, #1
 8003a18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0308 	and.w	r3, r3, #8
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003a26:	2301      	movs	r3, #1
 8003a28:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00a      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a36:	4b16      	ldr	r3, [pc, #88]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a3c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a44:	4912      	ldr	r1, [pc, #72]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00b      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a58:	4b0d      	ldr	r3, [pc, #52]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a5e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a68:	4909      	ldr	r1, [pc, #36]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d006      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 80d9 	beq.w	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a84:	4b02      	ldr	r3, [pc, #8]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a01      	ldr	r2, [pc, #4]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a8a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003a8e:	e001      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003a90:	40023800 	.word	0x40023800
 8003a94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a96:	f7fd ff17 	bl	80018c8 <HAL_GetTick>
 8003a9a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a9c:	e008      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a9e:	f7fd ff13 	bl	80018c8 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b64      	cmp	r3, #100	@ 0x64
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e194      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ab0:	4b6c      	ldr	r3, [pc, #432]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1f0      	bne.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d021      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d11d      	bne.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ad0:	4b64      	ldr	r3, [pc, #400]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ad2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ad6:	0c1b      	lsrs	r3, r3, #16
 8003ad8:	f003 0303 	and.w	r3, r3, #3
 8003adc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ade:	4b61      	ldr	r3, [pc, #388]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ae0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ae4:	0e1b      	lsrs	r3, r3, #24
 8003ae6:	f003 030f 	and.w	r3, r3, #15
 8003aea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	019a      	lsls	r2, r3, #6
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	041b      	lsls	r3, r3, #16
 8003af6:	431a      	orrs	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	061b      	lsls	r3, r3, #24
 8003afc:	431a      	orrs	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	071b      	lsls	r3, r3, #28
 8003b04:	4957      	ldr	r1, [pc, #348]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d004      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b1c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b20:	d00a      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d02e      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b36:	d129      	bne.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003b38:	4b4a      	ldr	r3, [pc, #296]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b3e:	0c1b      	lsrs	r3, r3, #16
 8003b40:	f003 0303 	and.w	r3, r3, #3
 8003b44:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b46:	4b47      	ldr	r3, [pc, #284]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b4c:	0f1b      	lsrs	r3, r3, #28
 8003b4e:	f003 0307 	and.w	r3, r3, #7
 8003b52:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	019a      	lsls	r2, r3, #6
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	041b      	lsls	r3, r3, #16
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	061b      	lsls	r3, r3, #24
 8003b66:	431a      	orrs	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	071b      	lsls	r3, r3, #28
 8003b6c:	493d      	ldr	r1, [pc, #244]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003b74:	4b3b      	ldr	r3, [pc, #236]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b7a:	f023 021f 	bic.w	r2, r3, #31
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b82:	3b01      	subs	r3, #1
 8003b84:	4937      	ldr	r1, [pc, #220]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d01d      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b98:	4b32      	ldr	r3, [pc, #200]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b9e:	0e1b      	lsrs	r3, r3, #24
 8003ba0:	f003 030f 	and.w	r3, r3, #15
 8003ba4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ba6:	4b2f      	ldr	r3, [pc, #188]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bac:	0f1b      	lsrs	r3, r3, #28
 8003bae:	f003 0307 	and.w	r3, r3, #7
 8003bb2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	019a      	lsls	r2, r3, #6
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	041b      	lsls	r3, r3, #16
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	061b      	lsls	r3, r3, #24
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	071b      	lsls	r3, r3, #28
 8003bcc:	4925      	ldr	r1, [pc, #148]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d011      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	019a      	lsls	r2, r3, #6
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	041b      	lsls	r3, r3, #16
 8003bec:	431a      	orrs	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	061b      	lsls	r3, r3, #24
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	071b      	lsls	r3, r3, #28
 8003bfc:	4919      	ldr	r1, [pc, #100]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c04:	4b17      	ldr	r3, [pc, #92]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a16      	ldr	r2, [pc, #88]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c0a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003c0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c10:	f7fd fe5a 	bl	80018c8 <HAL_GetTick>
 8003c14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c16:	e008      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c18:	f7fd fe56 	bl	80018c8 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b64      	cmp	r3, #100	@ 0x64
 8003c24:	d901      	bls.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e0d7      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0f0      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	f040 80cd 	bne.w	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003c3e:	4b09      	ldr	r3, [pc, #36]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a08      	ldr	r2, [pc, #32]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c4a:	f7fd fe3d 	bl	80018c8 <HAL_GetTick>
 8003c4e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c50:	e00a      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c52:	f7fd fe39 	bl	80018c8 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b64      	cmp	r3, #100	@ 0x64
 8003c5e:	d903      	bls.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e0ba      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003c64:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c68:	4b5e      	ldr	r3, [pc, #376]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c74:	d0ed      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d009      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d02e      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d12a      	bne.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c9e:	4b51      	ldr	r3, [pc, #324]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ca4:	0c1b      	lsrs	r3, r3, #16
 8003ca6:	f003 0303 	and.w	r3, r3, #3
 8003caa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003cac:	4b4d      	ldr	r3, [pc, #308]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cb2:	0f1b      	lsrs	r3, r3, #28
 8003cb4:	f003 0307 	and.w	r3, r3, #7
 8003cb8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	019a      	lsls	r2, r3, #6
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	041b      	lsls	r3, r3, #16
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	061b      	lsls	r3, r3, #24
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	071b      	lsls	r3, r3, #28
 8003cd2:	4944      	ldr	r1, [pc, #272]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003cda:	4b42      	ldr	r3, [pc, #264]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ce0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	021b      	lsls	r3, r3, #8
 8003cec:	493d      	ldr	r1, [pc, #244]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d022      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d08:	d11d      	bne.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d0a:	4b36      	ldr	r3, [pc, #216]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d10:	0e1b      	lsrs	r3, r3, #24
 8003d12:	f003 030f 	and.w	r3, r3, #15
 8003d16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d18:	4b32      	ldr	r3, [pc, #200]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d1e:	0f1b      	lsrs	r3, r3, #28
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	019a      	lsls	r2, r3, #6
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	041b      	lsls	r3, r3, #16
 8003d32:	431a      	orrs	r2, r3
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	061b      	lsls	r3, r3, #24
 8003d38:	431a      	orrs	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	071b      	lsls	r3, r3, #28
 8003d3e:	4929      	ldr	r1, [pc, #164]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0308 	and.w	r3, r3, #8
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d028      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d52:	4b24      	ldr	r3, [pc, #144]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d58:	0e1b      	lsrs	r3, r3, #24
 8003d5a:	f003 030f 	and.w	r3, r3, #15
 8003d5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d60:	4b20      	ldr	r3, [pc, #128]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d66:	0c1b      	lsrs	r3, r3, #16
 8003d68:	f003 0303 	and.w	r3, r3, #3
 8003d6c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	019a      	lsls	r2, r3, #6
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	041b      	lsls	r3, r3, #16
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	061b      	lsls	r3, r3, #24
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	69db      	ldr	r3, [r3, #28]
 8003d84:	071b      	lsls	r3, r3, #28
 8003d86:	4917      	ldr	r1, [pc, #92]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003d8e:	4b15      	ldr	r3, [pc, #84]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d94:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9c:	4911      	ldr	r1, [pc, #68]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003da4:	4b0f      	ldr	r3, [pc, #60]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a0e      	ldr	r2, [pc, #56]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003daa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003db0:	f7fd fd8a 	bl	80018c8 <HAL_GetTick>
 8003db4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003db6:	e008      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003db8:	f7fd fd86 	bl	80018c8 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b64      	cmp	r3, #100	@ 0x64
 8003dc4:	d901      	bls.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e007      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003dca:	4b06      	ldr	r3, [pc, #24]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003dd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003dd6:	d1ef      	bne.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3720      	adds	r7, #32
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	40023800 	.word	0x40023800

08003de8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e022      	b.n	8003e40 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d105      	bne.n	8003e12 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f7fd faa5 	bl	800135c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2203      	movs	r2, #3
 8003e16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f814 	bl	8003e48 <HAL_SD_InitCard>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e00a      	b.n	8003e40 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3708      	adds	r7, #8
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003e48:	b5b0      	push	{r4, r5, r7, lr}
 8003e4a:	b08e      	sub	sp, #56	@ 0x38
 8003e4c:	af04      	add	r7, sp, #16
 8003e4e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003e50:	2300      	movs	r3, #0
 8003e52:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8003e54:	2300      	movs	r3, #0
 8003e56:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003e60:	2300      	movs	r3, #0
 8003e62:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8003e64:	2376      	movs	r3, #118	@ 0x76
 8003e66:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681d      	ldr	r5, [r3, #0]
 8003e6c:	466c      	mov	r4, sp
 8003e6e:	f107 0314 	add.w	r3, r7, #20
 8003e72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003e76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003e7a:	f107 0308 	add.w	r3, r7, #8
 8003e7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e80:	4628      	mov	r0, r5
 8003e82:	f001 f9d3 	bl	800522c <SDMMC_Init>
 8003e86:	4603      	mov	r3, r0
 8003e88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8003e8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d001      	beq.n	8003e98 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e059      	b.n	8003f4c <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ea6:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f001 fa07 	bl	80052c0 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ec0:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8003ec2:	2002      	movs	r0, #2
 8003ec4:	f7fd fd0c 	bl	80018e0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 ff59 	bl	8004d80 <SD_PowerON>
 8003ece:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ed0:	6a3b      	ldr	r3, [r7, #32]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00b      	beq.n	8003eee <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ee2:	6a3b      	ldr	r3, [r7, #32]
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e02e      	b.n	8003f4c <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 fe78 	bl	8004be4 <SD_InitCard>
 8003ef4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ef6:	6a3b      	ldr	r3, [r7, #32]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00b      	beq.n	8003f14 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f08:	6a3b      	ldr	r3, [r7, #32]
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e01b      	b.n	8003f4c <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f001 fa61 	bl	80053e4 <SDMMC_CmdBlockLength>
 8003f22:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f24:	6a3b      	ldr	r3, [r7, #32]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00f      	beq.n	8003f4a <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a09      	ldr	r2, [pc, #36]	@ (8003f54 <HAL_SD_InitCard+0x10c>)
 8003f30:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e000      	b.n	8003f4c <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3728      	adds	r7, #40	@ 0x28
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bdb0      	pop	{r4, r5, r7, pc}
 8003f54:	004005ff 	.word	0x004005ff

08003f58 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b08c      	sub	sp, #48	@ 0x30
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
 8003f64:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d107      	bne.n	8003f80 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f74:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e0c3      	b.n	8004108 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	f040 80bc 	bne.w	8004106 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003f94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	441a      	add	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d907      	bls.n	8003fb2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fa6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e0aa      	b.n	8004108 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2203      	movs	r2, #3
 8003fb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8003fd0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd6:	4a4e      	ldr	r2, [pc, #312]	@ (8004110 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8003fd8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fde:	4a4d      	ldr	r2, [pc, #308]	@ (8004114 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003fe0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fee:	2200      	movs	r2, #0
 8003ff0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004002:	689a      	ldr	r2, [r3, #8]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	3380      	adds	r3, #128	@ 0x80
 8004018:	4619      	mov	r1, r3
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	025b      	lsls	r3, r3, #9
 8004020:	089b      	lsrs	r3, r3, #2
 8004022:	f7fd fe41 	bl	8001ca8 <HAL_DMA_Start_IT>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d017      	beq.n	800405c <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800403a:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a35      	ldr	r2, [pc, #212]	@ (8004118 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8004042:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004048:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e055      	b.n	8004108 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f042 0208 	orr.w	r2, r2, #8
 800406a:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004070:	2b01      	cmp	r3, #1
 8004072:	d002      	beq.n	800407a <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8004074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004076:	025b      	lsls	r3, r3, #9
 8004078:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800407a:	f04f 33ff 	mov.w	r3, #4294967295
 800407e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	025b      	lsls	r3, r3, #9
 8004084:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004086:	2390      	movs	r3, #144	@ 0x90
 8004088:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800408a:	2302      	movs	r3, #2
 800408c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800408e:	2300      	movs	r3, #0
 8004090:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8004092:	2301      	movs	r3, #1
 8004094:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f107 0210 	add.w	r2, r7, #16
 800409e:	4611      	mov	r1, r2
 80040a0:	4618      	mov	r0, r3
 80040a2:	f001 f973 	bl	800538c <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d90a      	bls.n	80040c2 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2282      	movs	r2, #130	@ 0x82
 80040b0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040b8:	4618      	mov	r0, r3
 80040ba:	f001 f9d7 	bl	800546c <SDMMC_CmdReadMultiBlock>
 80040be:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80040c0:	e009      	b.n	80040d6 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2281      	movs	r2, #129	@ 0x81
 80040c6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040ce:	4618      	mov	r0, r3
 80040d0:	f001 f9aa 	bl	8005428 <SDMMC_CmdReadSingleBlock>
 80040d4:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80040d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d012      	beq.n	8004102 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a0d      	ldr	r2, [pc, #52]	@ (8004118 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80040e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040ea:	431a      	orrs	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e002      	b.n	8004108 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8004102:	2300      	movs	r3, #0
 8004104:	e000      	b.n	8004108 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8004106:	2302      	movs	r3, #2
  }
}
 8004108:	4618      	mov	r0, r3
 800410a:	3730      	adds	r7, #48	@ 0x30
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	080049f3 	.word	0x080049f3
 8004114:	08004a65 	.word	0x08004a65
 8004118:	004005ff 	.word	0x004005ff

0800411c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b08c      	sub	sp, #48	@ 0x30
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
 8004128:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d107      	bne.n	8004144 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004138:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e0c6      	b.n	80042d2 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b01      	cmp	r3, #1
 800414e:	f040 80bf 	bne.w	80042d0 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004158:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	441a      	add	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004162:	429a      	cmp	r2, r3
 8004164:	d907      	bls.n	8004176 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800416a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e0ad      	b.n	80042d2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2203      	movs	r2, #3
 800417a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2200      	movs	r2, #0
 8004184:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f042 021a 	orr.w	r2, r2, #26
 8004194:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800419a:	4a50      	ldr	r2, [pc, #320]	@ (80042dc <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800419c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041a2:	4a4f      	ldr	r2, [pc, #316]	@ (80042e0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80041a4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041aa:	2200      	movs	r2, #0
 80041ac:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d002      	beq.n	80041bc <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80041b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041b8:	025b      	lsls	r3, r3, #9
 80041ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d90a      	bls.n	80041d8 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	22a0      	movs	r2, #160	@ 0xa0
 80041c6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041ce:	4618      	mov	r0, r3
 80041d0:	f001 f990 	bl	80054f4 <SDMMC_CmdWriteMultiBlock>
 80041d4:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80041d6:	e009      	b.n	80041ec <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2290      	movs	r2, #144	@ 0x90
 80041dc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041e4:	4618      	mov	r0, r3
 80041e6:	f001 f963 	bl	80054b0 <SDMMC_CmdWriteSingleBlock>
 80041ea:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80041ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d012      	beq.n	8004218 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a3b      	ldr	r2, [pc, #236]	@ (80042e4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80041f8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004200:	431a      	orrs	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e05c      	b.n	80042d2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0208 	orr.w	r2, r2, #8
 8004226:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800422c:	2240      	movs	r2, #64	@ 0x40
 800422e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004240:	689a      	ldr	r2, [r3, #8]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	430a      	orrs	r2, r1
 800424a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004250:	68b9      	ldr	r1, [r7, #8]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	3380      	adds	r3, #128	@ 0x80
 8004258:	461a      	mov	r2, r3
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	025b      	lsls	r3, r3, #9
 800425e:	089b      	lsrs	r3, r3, #2
 8004260:	f7fd fd22 	bl	8001ca8 <HAL_DMA_Start_IT>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d01a      	beq.n	80042a0 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f022 021a 	bic.w	r2, r2, #26
 8004278:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a19      	ldr	r2, [pc, #100]	@ (80042e4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8004280:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004286:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e018      	b.n	80042d2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80042a0:	f04f 33ff 	mov.w	r3, #4294967295
 80042a4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	025b      	lsls	r3, r3, #9
 80042aa:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80042ac:	2390      	movs	r3, #144	@ 0x90
 80042ae:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80042b0:	2300      	movs	r3, #0
 80042b2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80042b4:	2300      	movs	r3, #0
 80042b6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80042b8:	2301      	movs	r3, #1
 80042ba:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f107 0210 	add.w	r2, r7, #16
 80042c4:	4611      	mov	r1, r2
 80042c6:	4618      	mov	r0, r3
 80042c8:	f001 f860 	bl	800538c <SDMMC_ConfigData>

      return HAL_OK;
 80042cc:	2300      	movs	r3, #0
 80042ce:	e000      	b.n	80042d2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 80042d0:	2302      	movs	r3, #2
  }
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3730      	adds	r7, #48	@ 0x30
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	080049c9 	.word	0x080049c9
 80042e0:	08004a65 	.word	0x08004a65
 80042e4:	004005ff 	.word	0x004005ff

080042e8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d008      	beq.n	8004316 <HAL_SD_IRQHandler+0x2e>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f003 0308 	and.w	r3, r3, #8
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 fdec 	bl	8004eec <SD_Read_IT>
 8004314:	e15a      	b.n	80045cc <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800431c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 808d 	beq.w	8004440 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800432e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	4b9a      	ldr	r3, [pc, #616]	@ (80045a4 <HAL_SD_IRQHandler+0x2bc>)
 800433c:	400b      	ands	r3, r1
 800433e:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 0201 	bic.w	r2, r2, #1
 800434e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f003 0308 	and.w	r3, r3, #8
 8004356:	2b00      	cmp	r3, #0
 8004358:	d039      	beq.n	80043ce <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	2b00      	cmp	r3, #0
 8004362:	d104      	bne.n	800436e <HAL_SD_IRQHandler+0x86>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f003 0320 	and.w	r3, r3, #32
 800436a:	2b00      	cmp	r3, #0
 800436c:	d011      	beq.n	8004392 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4618      	mov	r0, r3
 8004374:	f001 f8e0 	bl	8005538 <SDMMC_CmdStopTransfer>
 8004378:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d008      	beq.n	8004392 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	431a      	orrs	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 f921 	bl	80045d4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f240 523a 	movw	r2, #1338	@ 0x53a
 800439a:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d104      	bne.n	80043be <HAL_SD_IRQHandler+0xd6>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f001 fcfe 	bl	8005dc0 <HAL_SD_RxCpltCallback>
 80043c4:	e102      	b.n	80045cc <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f001 fcf0 	bl	8005dac <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80043cc:	e0fe      	b.n	80045cc <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f000 80f9 	beq.w	80045cc <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f003 0320 	and.w	r3, r3, #32
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d011      	beq.n	8004408 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f001 f8a5 	bl	8005538 <SDMMC_CmdStopTransfer>
 80043ee:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d008      	beq.n	8004408 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	431a      	orrs	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 f8e6 	bl	80045d4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b00      	cmp	r3, #0
 8004410:	f040 80dc 	bne.w	80045cc <HAL_SD_IRQHandler+0x2e4>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	f040 80d6 	bne.w	80045cc <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 0208 	bic.w	r2, r2, #8
 800442e:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f001 fcb7 	bl	8005dac <HAL_SD_TxCpltCallback>
}
 800443e:	e0c5      	b.n	80045cc <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004446:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d008      	beq.n	8004460 <HAL_SD_IRQHandler+0x178>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f003 0308 	and.w	r3, r3, #8
 8004454:	2b00      	cmp	r3, #0
 8004456:	d003      	beq.n	8004460 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 fd98 	bl	8004f8e <SD_Write_IT>
 800445e:	e0b5      	b.n	80045cc <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004466:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800446a:	2b00      	cmp	r3, #0
 800446c:	f000 80ae 	beq.w	80045cc <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d005      	beq.n	800448a <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004482:	f043 0202 	orr.w	r2, r3, #2
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004490:	f003 0308 	and.w	r3, r3, #8
 8004494:	2b00      	cmp	r3, #0
 8004496:	d005      	beq.n	80044a4 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800449c:	f043 0208 	orr.w	r2, r3, #8
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044aa:	f003 0320 	and.w	r3, r3, #32
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d005      	beq.n	80044be <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b6:	f043 0220 	orr.w	r2, r3, #32
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044c4:	f003 0310 	and.w	r3, r3, #16
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d005      	beq.n	80044d8 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044d0:	f043 0210 	orr.w	r2, r3, #16
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f240 523a 	movw	r2, #1338	@ 0x53a
 80044e0:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 80044f0:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f001 f81e 	bl	8005538 <SDMMC_CmdStopTransfer>
 80044fc:	4602      	mov	r2, r0
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004502:	431a      	orrs	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00a      	beq.n	8004528 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 f857 	bl	80045d4 <HAL_SD_ErrorCallback>
}
 8004526:	e051      	b.n	80045cc <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800452e:	2b00      	cmp	r3, #0
 8004530:	d04c      	beq.n	80045cc <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f003 0310 	and.w	r3, r3, #16
 8004538:	2b00      	cmp	r3, #0
 800453a:	d104      	bne.n	8004546 <HAL_SD_IRQHandler+0x25e>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f003 0320 	and.w	r3, r3, #32
 8004542:	2b00      	cmp	r3, #0
 8004544:	d011      	beq.n	800456a <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800454a:	4a17      	ldr	r2, [pc, #92]	@ (80045a8 <HAL_SD_IRQHandler+0x2c0>)
 800454c:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004552:	4618      	mov	r0, r3
 8004554:	f7fd fc08 	bl	8001d68 <HAL_DMA_Abort_IT>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d036      	beq.n	80045cc <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004562:	4618      	mov	r0, r3
 8004564:	f000 fad0 	bl	8004b08 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004568:	e030      	b.n	80045cc <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b00      	cmp	r3, #0
 8004572:	d104      	bne.n	800457e <HAL_SD_IRQHandler+0x296>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d018      	beq.n	80045b0 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004582:	4a0a      	ldr	r2, [pc, #40]	@ (80045ac <HAL_SD_IRQHandler+0x2c4>)
 8004584:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800458a:	4618      	mov	r0, r3
 800458c:	f7fd fbec 	bl	8001d68 <HAL_DMA_Abort_IT>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d01a      	beq.n	80045cc <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459a:	4618      	mov	r0, r3
 800459c:	f000 faeb 	bl	8004b76 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80045a0:	e014      	b.n	80045cc <HAL_SD_IRQHandler+0x2e4>
 80045a2:	bf00      	nop
 80045a4:	ffff3ec5 	.word	0xffff3ec5
 80045a8:	08004b09 	.word	0x08004b09
 80045ac:	08004b77 	.word	0x08004b77
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f001 fbe7 	bl	8005d98 <HAL_SD_AbortCallback>
}
 80045ca:	e7ff      	b.n	80045cc <HAL_SD_IRQHandler+0x2e4>
 80045cc:	bf00      	nop
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045f6:	0f9b      	lsrs	r3, r3, #30
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004602:	0e9b      	lsrs	r3, r3, #26
 8004604:	b2db      	uxtb	r3, r3
 8004606:	f003 030f 	and.w	r3, r3, #15
 800460a:	b2da      	uxtb	r2, r3
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004614:	0e1b      	lsrs	r3, r3, #24
 8004616:	b2db      	uxtb	r3, r3
 8004618:	f003 0303 	and.w	r3, r3, #3
 800461c:	b2da      	uxtb	r2, r3
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004626:	0c1b      	lsrs	r3, r3, #16
 8004628:	b2da      	uxtb	r2, r3
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004632:	0a1b      	lsrs	r3, r3, #8
 8004634:	b2da      	uxtb	r2, r3
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800463e:	b2da      	uxtb	r2, r3
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004648:	0d1b      	lsrs	r3, r3, #20
 800464a:	b29a      	uxth	r2, r3
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004654:	0c1b      	lsrs	r3, r3, #16
 8004656:	b2db      	uxtb	r3, r3
 8004658:	f003 030f 	and.w	r3, r3, #15
 800465c:	b2da      	uxtb	r2, r3
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004666:	0bdb      	lsrs	r3, r3, #15
 8004668:	b2db      	uxtb	r3, r3
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	b2da      	uxtb	r2, r3
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004678:	0b9b      	lsrs	r3, r3, #14
 800467a:	b2db      	uxtb	r3, r3
 800467c:	f003 0301 	and.w	r3, r3, #1
 8004680:	b2da      	uxtb	r2, r3
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800468a:	0b5b      	lsrs	r3, r3, #13
 800468c:	b2db      	uxtb	r3, r3
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	b2da      	uxtb	r2, r3
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800469c:	0b1b      	lsrs	r3, r3, #12
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	b2da      	uxtb	r2, r3
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	2200      	movs	r2, #0
 80046ae:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d163      	bne.n	8004780 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046bc:	009a      	lsls	r2, r3, #2
 80046be:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80046c2:	4013      	ands	r3, r2
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80046c8:	0f92      	lsrs	r2, r2, #30
 80046ca:	431a      	orrs	r2, r3
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046d4:	0edb      	lsrs	r3, r3, #27
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	f003 0307 	and.w	r3, r3, #7
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046e6:	0e1b      	lsrs	r3, r3, #24
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	f003 0307 	and.w	r3, r3, #7
 80046ee:	b2da      	uxtb	r2, r3
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046f8:	0d5b      	lsrs	r3, r3, #21
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	f003 0307 	and.w	r3, r3, #7
 8004700:	b2da      	uxtb	r2, r3
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800470a:	0c9b      	lsrs	r3, r3, #18
 800470c:	b2db      	uxtb	r3, r3
 800470e:	f003 0307 	and.w	r3, r3, #7
 8004712:	b2da      	uxtb	r2, r3
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800471c:	0bdb      	lsrs	r3, r3, #15
 800471e:	b2db      	uxtb	r3, r3
 8004720:	f003 0307 	and.w	r3, r3, #7
 8004724:	b2da      	uxtb	r2, r3
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	1c5a      	adds	r2, r3, #1
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	7e1b      	ldrb	r3, [r3, #24]
 8004738:	b2db      	uxtb	r3, r3
 800473a:	f003 0307 	and.w	r3, r3, #7
 800473e:	3302      	adds	r3, #2
 8004740:	2201      	movs	r2, #1
 8004742:	fa02 f303 	lsl.w	r3, r2, r3
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800474a:	fb03 f202 	mul.w	r2, r3, r2
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	7a1b      	ldrb	r3, [r3, #8]
 8004756:	b2db      	uxtb	r3, r3
 8004758:	f003 030f 	and.w	r3, r3, #15
 800475c:	2201      	movs	r2, #1
 800475e:	409a      	lsls	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800476c:	0a52      	lsrs	r2, r2, #9
 800476e:	fb03 f202 	mul.w	r2, r3, r2
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800477c:	661a      	str	r2, [r3, #96]	@ 0x60
 800477e:	e031      	b.n	80047e4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004784:	2b01      	cmp	r3, #1
 8004786:	d11d      	bne.n	80047c4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800478c:	041b      	lsls	r3, r3, #16
 800478e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004796:	0c1b      	lsrs	r3, r3, #16
 8004798:	431a      	orrs	r2, r3
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	3301      	adds	r3, #1
 80047a4:	029a      	lsls	r2, r3, #10
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047b8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	661a      	str	r2, [r3, #96]	@ 0x60
 80047c2:	e00f      	b.n	80047e4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a58      	ldr	r2, [pc, #352]	@ (800492c <HAL_SD_GetCardCSD+0x344>)
 80047ca:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047d0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e09d      	b.n	8004920 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047e8:	0b9b      	lsrs	r3, r3, #14
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047fa:	09db      	lsrs	r3, r3, #7
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004802:	b2da      	uxtb	r2, r3
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800480c:	b2db      	uxtb	r3, r3
 800480e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004812:	b2da      	uxtb	r2, r3
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800481c:	0fdb      	lsrs	r3, r3, #31
 800481e:	b2da      	uxtb	r2, r3
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004828:	0f5b      	lsrs	r3, r3, #29
 800482a:	b2db      	uxtb	r3, r3
 800482c:	f003 0303 	and.w	r3, r3, #3
 8004830:	b2da      	uxtb	r2, r3
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800483a:	0e9b      	lsrs	r3, r3, #26
 800483c:	b2db      	uxtb	r3, r3
 800483e:	f003 0307 	and.w	r3, r3, #7
 8004842:	b2da      	uxtb	r2, r3
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800484c:	0d9b      	lsrs	r3, r3, #22
 800484e:	b2db      	uxtb	r3, r3
 8004850:	f003 030f 	and.w	r3, r3, #15
 8004854:	b2da      	uxtb	r2, r3
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800485e:	0d5b      	lsrs	r3, r3, #21
 8004860:	b2db      	uxtb	r3, r3
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	b2da      	uxtb	r2, r3
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800487a:	0c1b      	lsrs	r3, r3, #16
 800487c:	b2db      	uxtb	r3, r3
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	b2da      	uxtb	r2, r3
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800488e:	0bdb      	lsrs	r3, r3, #15
 8004890:	b2db      	uxtb	r3, r3
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	b2da      	uxtb	r2, r3
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048a2:	0b9b      	lsrs	r3, r3, #14
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	b2da      	uxtb	r2, r3
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048b6:	0b5b      	lsrs	r3, r3, #13
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	b2da      	uxtb	r2, r3
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ca:	0b1b      	lsrs	r3, r3, #12
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	b2da      	uxtb	r2, r3
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048de:	0a9b      	lsrs	r3, r3, #10
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	f003 0303 	and.w	r3, r3, #3
 80048e6:	b2da      	uxtb	r2, r3
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048f2:	0a1b      	lsrs	r3, r3, #8
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	f003 0303 	and.w	r3, r3, #3
 80048fa:	b2da      	uxtb	r2, r3
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004906:	085b      	lsrs	r3, r3, #1
 8004908:	b2db      	uxtb	r3, r3
 800490a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800490e:	b2da      	uxtb	r2, r3
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr
 800492c:	004005ff 	.word	0x004005ff

08004930 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004990:	2300      	movs	r3, #0
 8004992:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004994:	f107 030c 	add.w	r3, r7, #12
 8004998:	4619      	mov	r1, r3
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 fa7e 	bl	8004e9c <SD_SendStatus>
 80049a0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d005      	beq.n	80049b4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	431a      	orrs	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	0a5b      	lsrs	r3, r3, #9
 80049b8:	f003 030f 	and.w	r3, r3, #15
 80049bc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80049be:	693b      	ldr	r3, [r7, #16]
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3718      	adds	r7, #24
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049e4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80049e6:	bf00      	nop
 80049e8:	3714      	adds	r7, #20
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr

080049f2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b084      	sub	sp, #16
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049fe:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a04:	2b82      	cmp	r3, #130	@ 0x82
 8004a06:	d111      	bne.n	8004a2c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 fd93 	bl	8005538 <SDMMC_CmdStopTransfer>
 8004a12:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d008      	beq.n	8004a2c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	431a      	orrs	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f7ff fdd4 	bl	80045d4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f022 0208 	bic.w	r2, r2, #8
 8004a3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004a44:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f001 f9b3 	bl	8005dc0 <HAL_SD_RxCpltCallback>
#endif
}
 8004a5a:	bf00      	nop
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
	...

08004a64 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a70:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f7fd fb24 	bl	80020c0 <HAL_DMA_GetError>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d03e      	beq.n	8004afc <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a84:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a8c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d002      	beq.n	8004a9a <SD_DMAError+0x36>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d12d      	bne.n	8004af6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a19      	ldr	r2, [pc, #100]	@ (8004b04 <SD_DMAError+0xa0>)
 8004aa0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8004ab0:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ab6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8004abe:	6978      	ldr	r0, [r7, #20]
 8004ac0:	f7ff ff62 	bl	8004988 <HAL_SD_GetCardState>
 8004ac4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	2b06      	cmp	r3, #6
 8004aca:	d002      	beq.n	8004ad2 <SD_DMAError+0x6e>
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	2b05      	cmp	r3, #5
 8004ad0:	d10a      	bne.n	8004ae8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f000 fd2e 	bl	8005538 <SDMMC_CmdStopTransfer>
 8004adc:	4602      	mov	r2, r0
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	2200      	movs	r2, #0
 8004af4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8004af6:	6978      	ldr	r0, [r7, #20]
 8004af8:	f7ff fd6c 	bl	80045d4 <HAL_SD_ErrorCallback>
#endif
  }
}
 8004afc:	bf00      	nop
 8004afe:	3718      	adds	r7, #24
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	004005ff 	.word	0x004005ff

08004b08 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b14:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004b1e:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f7ff ff31 	bl	8004988 <HAL_SD_GetCardState>
 8004b26:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	2b06      	cmp	r3, #6
 8004b3a:	d002      	beq.n	8004b42 <SD_DMATxAbort+0x3a>
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	2b05      	cmp	r3, #5
 8004b40:	d10a      	bne.n	8004b58 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f000 fcf6 	bl	8005538 <SDMMC_CmdStopTransfer>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b52:	431a      	orrs	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d103      	bne.n	8004b68 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f001 f919 	bl	8005d98 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004b66:	e002      	b.n	8004b6e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f7ff fd33 	bl	80045d4 <HAL_SD_ErrorCallback>
}
 8004b6e:	bf00      	nop
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b084      	sub	sp, #16
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b82:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004b8c:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f7ff fefa 	bl	8004988 <HAL_SD_GetCardState>
 8004b94:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	2b06      	cmp	r3, #6
 8004ba8:	d002      	beq.n	8004bb0 <SD_DMARxAbort+0x3a>
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	2b05      	cmp	r3, #5
 8004bae:	d10a      	bne.n	8004bc6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f000 fcbf 	bl	8005538 <SDMMC_CmdStopTransfer>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d103      	bne.n	8004bd6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	f001 f8e2 	bl	8005d98 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004bd4:	e002      	b.n	8004bdc <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f7ff fcfc 	bl	80045d4 <HAL_SD_ErrorCallback>
}
 8004bdc:	bf00      	nop
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004be4:	b5b0      	push	{r4, r5, r7, lr}
 8004be6:	b094      	sub	sp, #80	@ 0x50
 8004be8:	af04      	add	r7, sp, #16
 8004bea:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004bec:	2301      	movs	r3, #1
 8004bee:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f000 fb71 	bl	80052dc <SDMMC_GetPowerState>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d102      	bne.n	8004c06 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004c00:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004c04:	e0b8      	b.n	8004d78 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c0a:	2b03      	cmp	r3, #3
 8004c0c:	d02f      	beq.n	8004c6e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f000 fd58 	bl	80056c8 <SDMMC_CmdSendCID>
 8004c18:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d001      	beq.n	8004c24 <SD_InitCard+0x40>
    {
      return errorstate;
 8004c20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c22:	e0a9      	b.n	8004d78 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2100      	movs	r1, #0
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f000 fb9b 	bl	8005366 <SDMMC_GetResponse>
 8004c30:	4602      	mov	r2, r0
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2104      	movs	r1, #4
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f000 fb92 	bl	8005366 <SDMMC_GetResponse>
 8004c42:	4602      	mov	r2, r0
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2108      	movs	r1, #8
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f000 fb89 	bl	8005366 <SDMMC_GetResponse>
 8004c54:	4602      	mov	r2, r0
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	210c      	movs	r1, #12
 8004c60:	4618      	mov	r0, r3
 8004c62:	f000 fb80 	bl	8005366 <SDMMC_GetResponse>
 8004c66:	4602      	mov	r2, r0
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c72:	2b03      	cmp	r3, #3
 8004c74:	d00d      	beq.n	8004c92 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f107 020e 	add.w	r2, r7, #14
 8004c7e:	4611      	mov	r1, r2
 8004c80:	4618      	mov	r0, r3
 8004c82:	f000 fd5e 	bl	8005742 <SDMMC_CmdSetRelAdd>
 8004c86:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d001      	beq.n	8004c92 <SD_InitCard+0xae>
    {
      return errorstate;
 8004c8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c90:	e072      	b.n	8004d78 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c96:	2b03      	cmp	r3, #3
 8004c98:	d036      	beq.n	8004d08 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004c9a:	89fb      	ldrh	r3, [r7, #14]
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004caa:	041b      	lsls	r3, r3, #16
 8004cac:	4619      	mov	r1, r3
 8004cae:	4610      	mov	r0, r2
 8004cb0:	f000 fd28 	bl	8005704 <SDMMC_CmdSendCSD>
 8004cb4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004cb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d001      	beq.n	8004cc0 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004cbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cbe:	e05b      	b.n	8004d78 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 fb4d 	bl	8005366 <SDMMC_GetResponse>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2104      	movs	r1, #4
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 fb44 	bl	8005366 <SDMMC_GetResponse>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2108      	movs	r1, #8
 8004cea:	4618      	mov	r0, r3
 8004cec:	f000 fb3b 	bl	8005366 <SDMMC_GetResponse>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	210c      	movs	r1, #12
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f000 fb32 	bl	8005366 <SDMMC_GetResponse>
 8004d02:	4602      	mov	r2, r0
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2104      	movs	r1, #4
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 fb29 	bl	8005366 <SDMMC_GetResponse>
 8004d14:	4603      	mov	r3, r0
 8004d16:	0d1a      	lsrs	r2, r3, #20
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004d1c:	f107 0310 	add.w	r3, r7, #16
 8004d20:	4619      	mov	r1, r3
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f7ff fc60 	bl	80045e8 <HAL_SD_GetCardCSD>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d002      	beq.n	8004d34 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004d2e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004d32:	e021      	b.n	8004d78 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6819      	ldr	r1, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d3c:	041b      	lsls	r3, r3, #16
 8004d3e:	2200      	movs	r2, #0
 8004d40:	461c      	mov	r4, r3
 8004d42:	4615      	mov	r5, r2
 8004d44:	4622      	mov	r2, r4
 8004d46:	462b      	mov	r3, r5
 8004d48:	4608      	mov	r0, r1
 8004d4a:	f000 fc17 	bl	800557c <SDMMC_CmdSelDesel>
 8004d4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d001      	beq.n	8004d5a <SD_InitCard+0x176>
  {
    return errorstate;
 8004d56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d58:	e00e      	b.n	8004d78 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681d      	ldr	r5, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	466c      	mov	r4, sp
 8004d62:	f103 0210 	add.w	r2, r3, #16
 8004d66:	ca07      	ldmia	r2, {r0, r1, r2}
 8004d68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004d6c:	3304      	adds	r3, #4
 8004d6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d70:	4628      	mov	r0, r5
 8004d72:	f000 fa5b 	bl	800522c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3740      	adds	r7, #64	@ 0x40
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bdb0      	pop	{r4, r5, r7, pc}

08004d80 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	617b      	str	r3, [r7, #20]
 8004d90:	2300      	movs	r3, #0
 8004d92:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f000 fc12 	bl	80055c2 <SDMMC_CmdGoIdleState>
 8004d9e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d001      	beq.n	8004daa <SD_PowerON+0x2a>
  {
    return errorstate;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	e072      	b.n	8004e90 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f000 fc25 	bl	80055fe <SDMMC_CmdOperCond>
 8004db4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00d      	beq.n	8004dd8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 fbfb 	bl	80055c2 <SDMMC_CmdGoIdleState>
 8004dcc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d004      	beq.n	8004dde <SD_PowerON+0x5e>
    {
      return errorstate;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	e05b      	b.n	8004e90 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d137      	bne.n	8004e56 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2100      	movs	r1, #0
 8004dec:	4618      	mov	r0, r3
 8004dee:	f000 fc25 	bl	800563c <SDMMC_CmdAppCommand>
 8004df2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d02d      	beq.n	8004e56 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004dfa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004dfe:	e047      	b.n	8004e90 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2100      	movs	r1, #0
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 fc18 	bl	800563c <SDMMC_CmdAppCommand>
 8004e0c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d001      	beq.n	8004e18 <SD_PowerON+0x98>
    {
      return errorstate;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	e03b      	b.n	8004e90 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	491e      	ldr	r1, [pc, #120]	@ (8004e98 <SD_PowerON+0x118>)
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 fc2e 	bl	8005680 <SDMMC_CmdAppOperCommand>
 8004e24:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d002      	beq.n	8004e32 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004e2c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004e30:	e02e      	b.n	8004e90 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2100      	movs	r1, #0
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f000 fa94 	bl	8005366 <SDMMC_GetResponse>
 8004e3e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	0fdb      	lsrs	r3, r3, #31
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d101      	bne.n	8004e4c <SD_PowerON+0xcc>
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e000      	b.n	8004e4e <SD_PowerON+0xce>
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	613b      	str	r3, [r7, #16]

    count++;
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	3301      	adds	r3, #1
 8004e54:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d802      	bhi.n	8004e66 <SD_PowerON+0xe6>
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d0cc      	beq.n	8004e00 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d902      	bls.n	8004e76 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004e70:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004e74:	e00c      	b.n	8004e90 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d003      	beq.n	8004e88 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	645a      	str	r2, [r3, #68]	@ 0x44
 8004e86:	e002      	b.n	8004e8e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3718      	adds	r7, #24
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	c1100000 	.word	0xc1100000

08004e9c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d102      	bne.n	8004eb2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004eac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004eb0:	e018      	b.n	8004ee4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eba:	041b      	lsls	r3, r3, #16
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	4610      	mov	r0, r2
 8004ec0:	f000 fc60 	bl	8005784 <SDMMC_CmdSendStatus>
 8004ec4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d001      	beq.n	8004ed0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	e009      	b.n	8004ee4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 fa45 	bl	8005366 <SDMMC_GetResponse>
 8004edc:	4602      	mov	r2, r0
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b086      	sub	sp, #24
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efe:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d03f      	beq.n	8004f86 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004f06:	2300      	movs	r3, #0
 8004f08:	617b      	str	r3, [r7, #20]
 8004f0a:	e033      	b.n	8004f74 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 f9b7 	bl	8005284 <SDMMC_ReadFIFO>
 8004f16:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	b2da      	uxtb	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	3301      	adds	r3, #1
 8004f24:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	0a1b      	lsrs	r3, r3, #8
 8004f30:	b2da      	uxtb	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	3301      	adds	r3, #1
 8004f3a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	0c1b      	lsrs	r3, r3, #16
 8004f46:	b2da      	uxtb	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	3301      	adds	r3, #1
 8004f50:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	3b01      	subs	r3, #1
 8004f56:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	0e1b      	lsrs	r3, r3, #24
 8004f5c:	b2da      	uxtb	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	3301      	adds	r3, #1
 8004f66:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	3301      	adds	r3, #1
 8004f72:	617b      	str	r3, [r7, #20]
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	2b07      	cmp	r3, #7
 8004f78:	d9c8      	bls.n	8004f0c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8004f86:	bf00      	nop
 8004f88:	3718      	adds	r7, #24
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b086      	sub	sp, #24
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d043      	beq.n	8005030 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004fa8:	2300      	movs	r3, #0
 8004faa:	617b      	str	r3, [r7, #20]
 8004fac:	e037      	b.n	800501e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	021a      	lsls	r2, r3, #8
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	041a      	lsls	r2, r3, #16
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	3b01      	subs	r3, #1
 8004fee:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	061a      	lsls	r2, r3, #24
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	3301      	adds	r3, #1
 8005000:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	3b01      	subs	r3, #1
 8005006:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f107 0208 	add.w	r2, r7, #8
 8005010:	4611      	mov	r1, r2
 8005012:	4618      	mov	r0, r3
 8005014:	f000 f943 	bl	800529e <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	3301      	adds	r3, #1
 800501c:	617b      	str	r3, [r7, #20]
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	2b07      	cmp	r3, #7
 8005022:	d9c4      	bls.n	8004fae <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8005030:	bf00      	nop
 8005032:	3718      	adds	r7, #24
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d101      	bne.n	800504c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e025      	b.n	8005098 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005052:	b2db      	uxtb	r3, r3
 8005054:	2b00      	cmp	r3, #0
 8005056:	d106      	bne.n	8005066 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f7fc fb17 	bl	8001694 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2202      	movs	r2, #2
 800506a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	3304      	adds	r3, #4
 8005076:	4619      	mov	r1, r3
 8005078:	4610      	mov	r0, r2
 800507a:	f000 f811 	bl	80050a0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6818      	ldr	r0, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	461a      	mov	r2, r3
 8005088:	6839      	ldr	r1, [r7, #0]
 800508a:	f000 f865 	bl	8005158 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3708      	adds	r7, #8
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d121      	bne.n	80050f6 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	4b27      	ldr	r3, [pc, #156]	@ (8005154 <FMC_SDRAM_Init+0xb4>)
 80050b8:	4013      	ands	r3, r2
 80050ba:	683a      	ldr	r2, [r7, #0]
 80050bc:	6851      	ldr	r1, [r2, #4]
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	6892      	ldr	r2, [r2, #8]
 80050c2:	4311      	orrs	r1, r2
 80050c4:	683a      	ldr	r2, [r7, #0]
 80050c6:	68d2      	ldr	r2, [r2, #12]
 80050c8:	4311      	orrs	r1, r2
 80050ca:	683a      	ldr	r2, [r7, #0]
 80050cc:	6912      	ldr	r2, [r2, #16]
 80050ce:	4311      	orrs	r1, r2
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	6952      	ldr	r2, [r2, #20]
 80050d4:	4311      	orrs	r1, r2
 80050d6:	683a      	ldr	r2, [r7, #0]
 80050d8:	6992      	ldr	r2, [r2, #24]
 80050da:	4311      	orrs	r1, r2
 80050dc:	683a      	ldr	r2, [r7, #0]
 80050de:	69d2      	ldr	r2, [r2, #28]
 80050e0:	4311      	orrs	r1, r2
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	6a12      	ldr	r2, [r2, #32]
 80050e6:	4311      	orrs	r1, r2
 80050e8:	683a      	ldr	r2, [r7, #0]
 80050ea:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80050ec:	430a      	orrs	r2, r1
 80050ee:	431a      	orrs	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	e026      	b.n	8005144 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	69d9      	ldr	r1, [r3, #28]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	4319      	orrs	r1, r3
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800510c:	430b      	orrs	r3, r1
 800510e:	431a      	orrs	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	4b0e      	ldr	r3, [pc, #56]	@ (8005154 <FMC_SDRAM_Init+0xb4>)
 800511a:	4013      	ands	r3, r2
 800511c:	683a      	ldr	r2, [r7, #0]
 800511e:	6851      	ldr	r1, [r2, #4]
 8005120:	683a      	ldr	r2, [r7, #0]
 8005122:	6892      	ldr	r2, [r2, #8]
 8005124:	4311      	orrs	r1, r2
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	68d2      	ldr	r2, [r2, #12]
 800512a:	4311      	orrs	r1, r2
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	6912      	ldr	r2, [r2, #16]
 8005130:	4311      	orrs	r1, r2
 8005132:	683a      	ldr	r2, [r7, #0]
 8005134:	6952      	ldr	r2, [r2, #20]
 8005136:	4311      	orrs	r1, r2
 8005138:	683a      	ldr	r2, [r7, #0]
 800513a:	6992      	ldr	r2, [r2, #24]
 800513c:	430a      	orrs	r2, r1
 800513e:	431a      	orrs	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	ffff8000 	.word	0xffff8000

08005158 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d128      	bne.n	80051bc <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	1e59      	subs	r1, r3, #1
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	3b01      	subs	r3, #1
 800517e:	011b      	lsls	r3, r3, #4
 8005180:	4319      	orrs	r1, r3
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	3b01      	subs	r3, #1
 8005188:	021b      	lsls	r3, r3, #8
 800518a:	4319      	orrs	r1, r3
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	3b01      	subs	r3, #1
 8005192:	031b      	lsls	r3, r3, #12
 8005194:	4319      	orrs	r1, r3
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	3b01      	subs	r3, #1
 800519c:	041b      	lsls	r3, r3, #16
 800519e:	4319      	orrs	r1, r3
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	3b01      	subs	r3, #1
 80051a6:	051b      	lsls	r3, r3, #20
 80051a8:	4319      	orrs	r1, r3
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	3b01      	subs	r3, #1
 80051b0:	061b      	lsls	r3, r3, #24
 80051b2:	430b      	orrs	r3, r1
 80051b4:	431a      	orrs	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	609a      	str	r2, [r3, #8]
 80051ba:	e02d      	b.n	8005218 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	689a      	ldr	r2, [r3, #8]
 80051c0:	4b19      	ldr	r3, [pc, #100]	@ (8005228 <FMC_SDRAM_Timing_Init+0xd0>)
 80051c2:	4013      	ands	r3, r2
 80051c4:	68ba      	ldr	r2, [r7, #8]
 80051c6:	68d2      	ldr	r2, [r2, #12]
 80051c8:	3a01      	subs	r2, #1
 80051ca:	0311      	lsls	r1, r2, #12
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	6952      	ldr	r2, [r2, #20]
 80051d0:	3a01      	subs	r2, #1
 80051d2:	0512      	lsls	r2, r2, #20
 80051d4:	430a      	orrs	r2, r1
 80051d6:	431a      	orrs	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	1e59      	subs	r1, r3, #1
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	3b01      	subs	r3, #1
 80051f0:	011b      	lsls	r3, r3, #4
 80051f2:	4319      	orrs	r1, r3
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	3b01      	subs	r3, #1
 80051fa:	021b      	lsls	r3, r3, #8
 80051fc:	4319      	orrs	r1, r3
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	3b01      	subs	r3, #1
 8005204:	041b      	lsls	r3, r3, #16
 8005206:	4319      	orrs	r1, r3
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	3b01      	subs	r3, #1
 800520e:	061b      	lsls	r3, r3, #24
 8005210:	430b      	orrs	r3, r1
 8005212:	431a      	orrs	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	ff0f0fff 	.word	0xff0f0fff

0800522c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800522c:	b084      	sub	sp, #16
 800522e:	b480      	push	{r7}
 8005230:	b085      	sub	sp, #20
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
 8005236:	f107 001c 	add.w	r0, r7, #28
 800523a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800523e:	2300      	movs	r3, #0
 8005240:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005242:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005244:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005246:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800524a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800524c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800524e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8005252:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8005256:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	4313      	orrs	r3, r2
 800525c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685a      	ldr	r2, [r3, #4]
 8005262:	4b07      	ldr	r3, [pc, #28]	@ (8005280 <SDMMC_Init+0x54>)
 8005264:	4013      	ands	r3, r2
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	431a      	orrs	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3714      	adds	r7, #20
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	b004      	add	sp, #16
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	ffff8100 	.word	0xffff8100

08005284 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8005292:	4618      	mov	r0, r3
 8005294:	370c      	adds	r7, #12
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800529e:	b480      	push	{r7}
 80052a0:	b083      	sub	sp, #12
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
 80052a6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2203      	movs	r2, #3
 80052cc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0303 	and.w	r3, r3, #3
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005302:	2300      	movs	r3, #0
 8005304:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005316:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800531c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005322:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	4313      	orrs	r3, r2
 8005328:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	68da      	ldr	r2, [r3, #12]
 800532e:	4b06      	ldr	r3, [pc, #24]	@ (8005348 <SDMMC_SendCommand+0x50>)
 8005330:	4013      	ands	r3, r2
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	431a      	orrs	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3714      	adds	r7, #20
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr
 8005348:	fffff000 	.word	0xfffff000

0800534c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	b2db      	uxtb	r3, r3
}
 800535a:	4618      	mov	r0, r3
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8005366:	b480      	push	{r7}
 8005368:	b085      	sub	sp, #20
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
 800536e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	3314      	adds	r3, #20
 8005374:	461a      	mov	r2, r3
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	4413      	add	r3, r2
 800537a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
}  
 8005380:	4618      	mov	r0, r3
 8005382:	3714      	adds	r7, #20
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005396:	2300      	movs	r3, #0
 8005398:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	685a      	ldr	r2, [r3, #4]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80053b2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80053b8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80053be:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ca:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	431a      	orrs	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80053d6:	2300      	movs	r3, #0

}
 80053d8:	4618      	mov	r0, r3
 80053da:	3714      	adds	r7, #20
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b088      	sub	sp, #32
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80053f2:	2310      	movs	r3, #16
 80053f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80053f6:	2340      	movs	r3, #64	@ 0x40
 80053f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80053fa:	2300      	movs	r3, #0
 80053fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80053fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005402:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005404:	f107 0308 	add.w	r3, r7, #8
 8005408:	4619      	mov	r1, r3
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f7ff ff74 	bl	80052f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8005410:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005414:	2110      	movs	r1, #16
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f9d6 	bl	80057c8 <SDMMC_GetCmdResp1>
 800541c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800541e:	69fb      	ldr	r3, [r7, #28]
}
 8005420:	4618      	mov	r0, r3
 8005422:	3720      	adds	r7, #32
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b088      	sub	sp, #32
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005436:	2311      	movs	r3, #17
 8005438:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800543a:	2340      	movs	r3, #64	@ 0x40
 800543c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800543e:	2300      	movs	r3, #0
 8005440:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005442:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005446:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005448:	f107 0308 	add.w	r3, r7, #8
 800544c:	4619      	mov	r1, r3
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7ff ff52 	bl	80052f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005454:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005458:	2111      	movs	r1, #17
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 f9b4 	bl	80057c8 <SDMMC_GetCmdResp1>
 8005460:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005462:	69fb      	ldr	r3, [r7, #28]
}
 8005464:	4618      	mov	r0, r3
 8005466:	3720      	adds	r7, #32
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b088      	sub	sp, #32
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800547a:	2312      	movs	r3, #18
 800547c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800547e:	2340      	movs	r3, #64	@ 0x40
 8005480:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005482:	2300      	movs	r3, #0
 8005484:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005486:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800548a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800548c:	f107 0308 	add.w	r3, r7, #8
 8005490:	4619      	mov	r1, r3
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f7ff ff30 	bl	80052f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005498:	f241 3288 	movw	r2, #5000	@ 0x1388
 800549c:	2112      	movs	r1, #18
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 f992 	bl	80057c8 <SDMMC_GetCmdResp1>
 80054a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054a6:	69fb      	ldr	r3, [r7, #28]
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3720      	adds	r7, #32
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b088      	sub	sp, #32
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80054be:	2318      	movs	r3, #24
 80054c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80054c2:	2340      	movs	r3, #64	@ 0x40
 80054c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80054c6:	2300      	movs	r3, #0
 80054c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80054ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80054ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80054d0:	f107 0308 	add.w	r3, r7, #8
 80054d4:	4619      	mov	r1, r3
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f7ff ff0e 	bl	80052f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80054dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054e0:	2118      	movs	r1, #24
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f970 	bl	80057c8 <SDMMC_GetCmdResp1>
 80054e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054ea:	69fb      	ldr	r3, [r7, #28]
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3720      	adds	r7, #32
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b088      	sub	sp, #32
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005502:	2319      	movs	r3, #25
 8005504:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005506:	2340      	movs	r3, #64	@ 0x40
 8005508:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800550a:	2300      	movs	r3, #0
 800550c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800550e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005512:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005514:	f107 0308 	add.w	r3, r7, #8
 8005518:	4619      	mov	r1, r3
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f7ff feec 	bl	80052f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005520:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005524:	2119      	movs	r1, #25
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f94e 	bl	80057c8 <SDMMC_GetCmdResp1>
 800552c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800552e:	69fb      	ldr	r3, [r7, #28]
}
 8005530:	4618      	mov	r0, r3
 8005532:	3720      	adds	r7, #32
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b088      	sub	sp, #32
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005540:	2300      	movs	r3, #0
 8005542:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005544:	230c      	movs	r3, #12
 8005546:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005548:	2340      	movs	r3, #64	@ 0x40
 800554a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800554c:	2300      	movs	r3, #0
 800554e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005550:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005554:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005556:	f107 0308 	add.w	r3, r7, #8
 800555a:	4619      	mov	r1, r3
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f7ff fecb 	bl	80052f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8005562:	4a05      	ldr	r2, [pc, #20]	@ (8005578 <SDMMC_CmdStopTransfer+0x40>)
 8005564:	210c      	movs	r1, #12
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f92e 	bl	80057c8 <SDMMC_GetCmdResp1>
 800556c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800556e:	69fb      	ldr	r3, [r7, #28]
}
 8005570:	4618      	mov	r0, r3
 8005572:	3720      	adds	r7, #32
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	05f5e100 	.word	0x05f5e100

0800557c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b08a      	sub	sp, #40	@ 0x28
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800558c:	2307      	movs	r3, #7
 800558e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005590:	2340      	movs	r3, #64	@ 0x40
 8005592:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005594:	2300      	movs	r3, #0
 8005596:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005598:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800559c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800559e:	f107 0310 	add.w	r3, r7, #16
 80055a2:	4619      	mov	r1, r3
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	f7ff fea7 	bl	80052f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80055aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055ae:	2107      	movs	r1, #7
 80055b0:	68f8      	ldr	r0, [r7, #12]
 80055b2:	f000 f909 	bl	80057c8 <SDMMC_GetCmdResp1>
 80055b6:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 80055b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3728      	adds	r7, #40	@ 0x28
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b088      	sub	sp, #32
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80055ca:	2300      	movs	r3, #0
 80055cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80055ce:	2300      	movs	r3, #0
 80055d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80055d2:	2300      	movs	r3, #0
 80055d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80055d6:	2300      	movs	r3, #0
 80055d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80055da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80055de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80055e0:	f107 0308 	add.w	r3, r7, #8
 80055e4:	4619      	mov	r1, r3
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f7ff fe86 	bl	80052f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 fb23 	bl	8005c38 <SDMMC_GetCmdError>
 80055f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055f4:	69fb      	ldr	r3, [r7, #28]
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3720      	adds	r7, #32
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b088      	sub	sp, #32
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005606:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800560a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800560c:	2308      	movs	r3, #8
 800560e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005610:	2340      	movs	r3, #64	@ 0x40
 8005612:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005614:	2300      	movs	r3, #0
 8005616:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005618:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800561c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800561e:	f107 0308 	add.w	r3, r7, #8
 8005622:	4619      	mov	r1, r3
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f7ff fe67 	bl	80052f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 fab6 	bl	8005b9c <SDMMC_GetCmdResp7>
 8005630:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005632:	69fb      	ldr	r3, [r7, #28]
}
 8005634:	4618      	mov	r0, r3
 8005636:	3720      	adds	r7, #32
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b088      	sub	sp, #32
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800564a:	2337      	movs	r3, #55	@ 0x37
 800564c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800564e:	2340      	movs	r3, #64	@ 0x40
 8005650:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005652:	2300      	movs	r3, #0
 8005654:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005656:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800565a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800565c:	f107 0308 	add.w	r3, r7, #8
 8005660:	4619      	mov	r1, r3
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f7ff fe48 	bl	80052f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8005668:	f241 3288 	movw	r2, #5000	@ 0x1388
 800566c:	2137      	movs	r1, #55	@ 0x37
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f8aa 	bl	80057c8 <SDMMC_GetCmdResp1>
 8005674:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005676:	69fb      	ldr	r3, [r7, #28]
}
 8005678:	4618      	mov	r0, r3
 800567a:	3720      	adds	r7, #32
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b088      	sub	sp, #32
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	4b0d      	ldr	r3, [pc, #52]	@ (80056c4 <SDMMC_CmdAppOperCommand+0x44>)
 800568e:	4313      	orrs	r3, r2
 8005690:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005692:	2329      	movs	r3, #41	@ 0x29
 8005694:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005696:	2340      	movs	r3, #64	@ 0x40
 8005698:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800569a:	2300      	movs	r3, #0
 800569c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800569e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80056a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80056a4:	f107 0308 	add.w	r3, r7, #8
 80056a8:	4619      	mov	r1, r3
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f7ff fe24 	bl	80052f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 f9bf 	bl	8005a34 <SDMMC_GetCmdResp3>
 80056b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056b8:	69fb      	ldr	r3, [r7, #28]
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3720      	adds	r7, #32
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	80100000 	.word	0x80100000

080056c8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b088      	sub	sp, #32
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80056d0:	2300      	movs	r3, #0
 80056d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80056d4:	2302      	movs	r3, #2
 80056d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80056d8:	23c0      	movs	r3, #192	@ 0xc0
 80056da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80056dc:	2300      	movs	r3, #0
 80056de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80056e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80056e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80056e6:	f107 0308 	add.w	r3, r7, #8
 80056ea:	4619      	mov	r1, r3
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f7ff fe03 	bl	80052f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f956 	bl	80059a4 <SDMMC_GetCmdResp2>
 80056f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056fa:	69fb      	ldr	r3, [r7, #28]
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3720      	adds	r7, #32
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b088      	sub	sp, #32
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005712:	2309      	movs	r3, #9
 8005714:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005716:	23c0      	movs	r3, #192	@ 0xc0
 8005718:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800571a:	2300      	movs	r3, #0
 800571c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800571e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005722:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005724:	f107 0308 	add.w	r3, r7, #8
 8005728:	4619      	mov	r1, r3
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f7ff fde4 	bl	80052f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 f937 	bl	80059a4 <SDMMC_GetCmdResp2>
 8005736:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005738:	69fb      	ldr	r3, [r7, #28]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3720      	adds	r7, #32
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b088      	sub	sp, #32
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
 800574a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800574c:	2300      	movs	r3, #0
 800574e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005750:	2303      	movs	r3, #3
 8005752:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005754:	2340      	movs	r3, #64	@ 0x40
 8005756:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005758:	2300      	movs	r3, #0
 800575a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800575c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005760:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005762:	f107 0308 	add.w	r3, r7, #8
 8005766:	4619      	mov	r1, r3
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f7ff fdc5 	bl	80052f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800576e:	683a      	ldr	r2, [r7, #0]
 8005770:	2103      	movs	r1, #3
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f99c 	bl	8005ab0 <SDMMC_GetCmdResp6>
 8005778:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800577a:	69fb      	ldr	r3, [r7, #28]
}
 800577c:	4618      	mov	r0, r3
 800577e:	3720      	adds	r7, #32
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b088      	sub	sp, #32
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005792:	230d      	movs	r3, #13
 8005794:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005796:	2340      	movs	r3, #64	@ 0x40
 8005798:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800579a:	2300      	movs	r3, #0
 800579c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800579e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80057a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80057a4:	f107 0308 	add.w	r3, r7, #8
 80057a8:	4619      	mov	r1, r3
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f7ff fda4 	bl	80052f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80057b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057b4:	210d      	movs	r1, #13
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f806 	bl	80057c8 <SDMMC_GetCmdResp1>
 80057bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057be:	69fb      	ldr	r3, [r7, #28]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3720      	adds	r7, #32
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b088      	sub	sp, #32
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	460b      	mov	r3, r1
 80057d2:	607a      	str	r2, [r7, #4]
 80057d4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80057d6:	4b70      	ldr	r3, [pc, #448]	@ (8005998 <SDMMC_GetCmdResp1+0x1d0>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a70      	ldr	r2, [pc, #448]	@ (800599c <SDMMC_GetCmdResp1+0x1d4>)
 80057dc:	fba2 2303 	umull	r2, r3, r2, r3
 80057e0:	0a5a      	lsrs	r2, r3, #9
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	fb02 f303 	mul.w	r3, r2, r3
 80057e8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	1e5a      	subs	r2, r3, #1
 80057ee:	61fa      	str	r2, [r7, #28]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d102      	bne.n	80057fa <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80057f4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80057f8:	e0c9      	b.n	800598e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057fe:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005806:	2b00      	cmp	r3, #0
 8005808:	d0ef      	beq.n	80057ea <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1ea      	bne.n	80057ea <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005818:	f003 0304 	and.w	r3, r3, #4
 800581c:	2b00      	cmp	r3, #0
 800581e:	d004      	beq.n	800582a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2204      	movs	r2, #4
 8005824:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005826:	2304      	movs	r3, #4
 8005828:	e0b1      	b.n	800598e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b00      	cmp	r3, #0
 8005834:	d004      	beq.n	8005840 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2201      	movs	r2, #1
 800583a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800583c:	2301      	movs	r3, #1
 800583e:	e0a6      	b.n	800598e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	22c5      	movs	r2, #197	@ 0xc5
 8005844:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f7ff fd80 	bl	800534c <SDMMC_GetCommandResponse>
 800584c:	4603      	mov	r3, r0
 800584e:	461a      	mov	r2, r3
 8005850:	7afb      	ldrb	r3, [r7, #11]
 8005852:	4293      	cmp	r3, r2
 8005854:	d001      	beq.n	800585a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005856:	2301      	movs	r3, #1
 8005858:	e099      	b.n	800598e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800585a:	2100      	movs	r1, #0
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f7ff fd82 	bl	8005366 <SDMMC_GetResponse>
 8005862:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	4b4e      	ldr	r3, [pc, #312]	@ (80059a0 <SDMMC_GetCmdResp1+0x1d8>)
 8005868:	4013      	ands	r3, r2
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800586e:	2300      	movs	r3, #0
 8005870:	e08d      	b.n	800598e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	2b00      	cmp	r3, #0
 8005876:	da02      	bge.n	800587e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005878:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800587c:	e087      	b.n	800598e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d001      	beq.n	800588c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005888:	2340      	movs	r3, #64	@ 0x40
 800588a:	e080      	b.n	800598e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d001      	beq.n	800589a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005896:	2380      	movs	r3, #128	@ 0x80
 8005898:	e079      	b.n	800598e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d002      	beq.n	80058aa <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80058a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80058a8:	e071      	b.n	800598e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d002      	beq.n	80058ba <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80058b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80058b8:	e069      	b.n	800598e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d002      	beq.n	80058ca <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80058c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80058c8:	e061      	b.n	800598e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d002      	beq.n	80058da <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80058d4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80058d8:	e059      	b.n	800598e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d002      	beq.n	80058ea <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80058e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80058e8:	e051      	b.n	800598e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d002      	beq.n	80058fa <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80058f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80058f8:	e049      	b.n	800598e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d002      	beq.n	800590a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005904:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005908:	e041      	b.n	800598e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d002      	beq.n	800591a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005914:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005918:	e039      	b.n	800598e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d002      	beq.n	800592a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005924:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005928:	e031      	b.n	800598e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d002      	beq.n	800593a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005934:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005938:	e029      	b.n	800598e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d002      	beq.n	800594a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005944:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005948:	e021      	b.n	800598e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d002      	beq.n	800595a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005954:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005958:	e019      	b.n	800598e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d002      	beq.n	800596a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005964:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005968:	e011      	b.n	800598e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d002      	beq.n	800597a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005974:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005978:	e009      	b.n	800598e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f003 0308 	and.w	r3, r3, #8
 8005980:	2b00      	cmp	r3, #0
 8005982:	d002      	beq.n	800598a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005984:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8005988:	e001      	b.n	800598e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800598a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800598e:	4618      	mov	r0, r3
 8005990:	3720      	adds	r7, #32
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	20000000 	.word	0x20000000
 800599c:	10624dd3 	.word	0x10624dd3
 80059a0:	fdffe008 	.word	0xfdffe008

080059a4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80059ac:	4b1f      	ldr	r3, [pc, #124]	@ (8005a2c <SDMMC_GetCmdResp2+0x88>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a1f      	ldr	r2, [pc, #124]	@ (8005a30 <SDMMC_GetCmdResp2+0x8c>)
 80059b2:	fba2 2303 	umull	r2, r3, r2, r3
 80059b6:	0a5b      	lsrs	r3, r3, #9
 80059b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059bc:	fb02 f303 	mul.w	r3, r2, r3
 80059c0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	1e5a      	subs	r2, r3, #1
 80059c6:	60fa      	str	r2, [r7, #12]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d102      	bne.n	80059d2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80059cc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80059d0:	e026      	b.n	8005a20 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059d6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d0ef      	beq.n	80059c2 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d1ea      	bne.n	80059c2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059f0:	f003 0304 	and.w	r3, r3, #4
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d004      	beq.n	8005a02 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2204      	movs	r2, #4
 80059fc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80059fe:	2304      	movs	r3, #4
 8005a00:	e00e      	b.n	8005a20 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a06:	f003 0301 	and.w	r3, r3, #1
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d004      	beq.n	8005a18 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e003      	b.n	8005a20 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	22c5      	movs	r2, #197	@ 0xc5
 8005a1c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3714      	adds	r7, #20
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr
 8005a2c:	20000000 	.word	0x20000000
 8005a30:	10624dd3 	.word	0x10624dd3

08005a34 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005a3c:	4b1a      	ldr	r3, [pc, #104]	@ (8005aa8 <SDMMC_GetCmdResp3+0x74>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a1a      	ldr	r2, [pc, #104]	@ (8005aac <SDMMC_GetCmdResp3+0x78>)
 8005a42:	fba2 2303 	umull	r2, r3, r2, r3
 8005a46:	0a5b      	lsrs	r3, r3, #9
 8005a48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a4c:	fb02 f303 	mul.w	r3, r2, r3
 8005a50:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	1e5a      	subs	r2, r3, #1
 8005a56:	60fa      	str	r2, [r7, #12]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d102      	bne.n	8005a62 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005a5c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005a60:	e01b      	b.n	8005a9a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a66:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d0ef      	beq.n	8005a52 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1ea      	bne.n	8005a52 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a80:	f003 0304 	and.w	r3, r3, #4
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d004      	beq.n	8005a92 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2204      	movs	r2, #4
 8005a8c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005a8e:	2304      	movs	r3, #4
 8005a90:	e003      	b.n	8005a9a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	22c5      	movs	r2, #197	@ 0xc5
 8005a96:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3714      	adds	r7, #20
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	20000000 	.word	0x20000000
 8005aac:	10624dd3 	.word	0x10624dd3

08005ab0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b088      	sub	sp, #32
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	460b      	mov	r3, r1
 8005aba:	607a      	str	r2, [r7, #4]
 8005abc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005abe:	4b35      	ldr	r3, [pc, #212]	@ (8005b94 <SDMMC_GetCmdResp6+0xe4>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a35      	ldr	r2, [pc, #212]	@ (8005b98 <SDMMC_GetCmdResp6+0xe8>)
 8005ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac8:	0a5b      	lsrs	r3, r3, #9
 8005aca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ace:	fb02 f303 	mul.w	r3, r2, r3
 8005ad2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	1e5a      	subs	r2, r3, #1
 8005ad8:	61fa      	str	r2, [r7, #28]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d102      	bne.n	8005ae4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005ade:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005ae2:	e052      	b.n	8005b8a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ae8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d0ef      	beq.n	8005ad4 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1ea      	bne.n	8005ad4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b02:	f003 0304 	and.w	r3, r3, #4
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d004      	beq.n	8005b14 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2204      	movs	r2, #4
 8005b0e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005b10:	2304      	movs	r3, #4
 8005b12:	e03a      	b.n	8005b8a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b18:	f003 0301 	and.w	r3, r3, #1
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d004      	beq.n	8005b2a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2201      	movs	r2, #1
 8005b24:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e02f      	b.n	8005b8a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f7ff fc0e 	bl	800534c <SDMMC_GetCommandResponse>
 8005b30:	4603      	mov	r3, r0
 8005b32:	461a      	mov	r2, r3
 8005b34:	7afb      	ldrb	r3, [r7, #11]
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d001      	beq.n	8005b3e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e025      	b.n	8005b8a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	22c5      	movs	r2, #197	@ 0xc5
 8005b42:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005b44:	2100      	movs	r1, #0
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f7ff fc0d 	bl	8005366 <SDMMC_GetResponse>
 8005b4c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d106      	bne.n	8005b66 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	0c1b      	lsrs	r3, r3, #16
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005b62:	2300      	movs	r3, #0
 8005b64:	e011      	b.n	8005b8a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d002      	beq.n	8005b76 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005b70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005b74:	e009      	b.n	8005b8a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d002      	beq.n	8005b86 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005b80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005b84:	e001      	b.n	8005b8a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005b86:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3720      	adds	r7, #32
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	20000000 	.word	0x20000000
 8005b98:	10624dd3 	.word	0x10624dd3

08005b9c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005ba4:	4b22      	ldr	r3, [pc, #136]	@ (8005c30 <SDMMC_GetCmdResp7+0x94>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a22      	ldr	r2, [pc, #136]	@ (8005c34 <SDMMC_GetCmdResp7+0x98>)
 8005baa:	fba2 2303 	umull	r2, r3, r2, r3
 8005bae:	0a5b      	lsrs	r3, r3, #9
 8005bb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bb4:	fb02 f303 	mul.w	r3, r2, r3
 8005bb8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	1e5a      	subs	r2, r3, #1
 8005bbe:	60fa      	str	r2, [r7, #12]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d102      	bne.n	8005bca <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005bc4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005bc8:	e02c      	b.n	8005c24 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bce:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d0ef      	beq.n	8005bba <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1ea      	bne.n	8005bba <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005be8:	f003 0304 	and.w	r3, r3, #4
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d004      	beq.n	8005bfa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2204      	movs	r2, #4
 8005bf4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005bf6:	2304      	movs	r3, #4
 8005bf8:	e014      	b.n	8005c24 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bfe:	f003 0301 	and.w	r3, r3, #1
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d004      	beq.n	8005c10 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e009      	b.n	8005c24 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d002      	beq.n	8005c22 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2240      	movs	r2, #64	@ 0x40
 8005c20:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005c22:	2300      	movs	r3, #0
  
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3714      	adds	r7, #20
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr
 8005c30:	20000000 	.word	0x20000000
 8005c34:	10624dd3 	.word	0x10624dd3

08005c38 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005c40:	4b11      	ldr	r3, [pc, #68]	@ (8005c88 <SDMMC_GetCmdError+0x50>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a11      	ldr	r2, [pc, #68]	@ (8005c8c <SDMMC_GetCmdError+0x54>)
 8005c46:	fba2 2303 	umull	r2, r3, r2, r3
 8005c4a:	0a5b      	lsrs	r3, r3, #9
 8005c4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c50:	fb02 f303 	mul.w	r3, r2, r3
 8005c54:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	1e5a      	subs	r2, r3, #1
 8005c5a:	60fa      	str	r2, [r7, #12]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d102      	bne.n	8005c66 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005c60:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005c64:	e009      	b.n	8005c7a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d0f1      	beq.n	8005c56 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	22c5      	movs	r2, #197	@ 0xc5
 8005c76:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3714      	adds	r7, #20
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	20000000 	.word	0x20000000
 8005c8c:	10624dd3 	.word	0x10624dd3

08005c90 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005c94:	4904      	ldr	r1, [pc, #16]	@ (8005ca8 <MX_FATFS_Init+0x18>)
 8005c96:	4805      	ldr	r0, [pc, #20]	@ (8005cac <MX_FATFS_Init+0x1c>)
 8005c98:	f003 f91e 	bl	8008ed8 <FATFS_LinkDriver>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	4b03      	ldr	r3, [pc, #12]	@ (8005cb0 <MX_FATFS_Init+0x20>)
 8005ca2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005ca4:	bf00      	nop
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	200002e8 	.word	0x200002e8
 8005cac:	080093e0 	.word	0x080093e0
 8005cb0:	200002e4 	.word	0x200002e4

08005cb4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005cb8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005cce:	f000 f888 	bl	8005de2 <BSP_SD_IsDetected>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d001      	beq.n	8005cdc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8005cd8:	2302      	movs	r3, #2
 8005cda:	e005      	b.n	8005ce8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8005cdc:	4804      	ldr	r0, [pc, #16]	@ (8005cf0 <BSP_SD_Init+0x2c>)
 8005cde:	f7fe f883 	bl	8003de8 <HAL_SD_Init>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8005ce6:	79fb      	ldrb	r3, [r7, #7]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3708      	adds	r7, #8
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	20000160 	.word	0x20000160

08005cf4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b086      	sub	sp, #24
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005d00:	2300      	movs	r3, #0
 8005d02:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	68ba      	ldr	r2, [r7, #8]
 8005d08:	68f9      	ldr	r1, [r7, #12]
 8005d0a:	4806      	ldr	r0, [pc, #24]	@ (8005d24 <BSP_SD_ReadBlocks_DMA+0x30>)
 8005d0c:	f7fe f924 	bl	8003f58 <HAL_SD_ReadBlocks_DMA>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d001      	beq.n	8005d1a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3718      	adds	r7, #24
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	20000160 	.word	0x20000160

08005d28 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b086      	sub	sp, #24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005d34:	2300      	movs	r3, #0
 8005d36:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	68f9      	ldr	r1, [r7, #12]
 8005d3e:	4806      	ldr	r0, [pc, #24]	@ (8005d58 <BSP_SD_WriteBlocks_DMA+0x30>)
 8005d40:	f7fe f9ec 	bl	800411c <HAL_SD_WriteBlocks_DMA>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d001      	beq.n	8005d4e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005d4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3718      	adds	r7, #24
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	20000160 	.word	0x20000160

08005d5c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005d60:	4805      	ldr	r0, [pc, #20]	@ (8005d78 <BSP_SD_GetCardState+0x1c>)
 8005d62:	f7fe fe11 	bl	8004988 <HAL_SD_GetCardState>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b04      	cmp	r3, #4
 8005d6a:	bf14      	ite	ne
 8005d6c:	2301      	movne	r3, #1
 8005d6e:	2300      	moveq	r3, #0
 8005d70:	b2db      	uxtb	r3, r3
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	20000160 	.word	0x20000160

08005d7c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8005d84:	6879      	ldr	r1, [r7, #4]
 8005d86:	4803      	ldr	r0, [pc, #12]	@ (8005d94 <BSP_SD_GetCardInfo+0x18>)
 8005d88:	f7fe fdd2 	bl	8004930 <HAL_SD_GetCardInfo>
}
 8005d8c:	bf00      	nop
 8005d8e:	3708      	adds	r7, #8
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	20000160 	.word	0x20000160

08005d98 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8005da0:	f000 f818 	bl	8005dd4 <BSP_SD_AbortCallback>
}
 8005da4:	bf00      	nop
 8005da6:	3708      	adds	r7, #8
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8005db4:	f000 f9a8 	bl	8006108 <BSP_SD_WriteCpltCallback>
}
 8005db8:	bf00      	nop
 8005dba:	3708      	adds	r7, #8
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005dc8:	f000 f9aa 	bl	8006120 <BSP_SD_ReadCpltCallback>
}
 8005dcc:	bf00      	nop
 8005dce:	3708      	adds	r7, #8
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	af00      	add	r7, sp, #0

}
 8005dd8:	bf00      	nop
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr

08005de2 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b082      	sub	sp, #8
 8005de6:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005de8:	2301      	movs	r3, #1
 8005dea:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8005dec:	f000 f80c 	bl	8005e08 <BSP_PlatformIsDetected>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d101      	bne.n	8005dfa <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8005df6:	2300      	movs	r3, #0
 8005df8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005dfa:	79fb      	ldrb	r3, [r7, #7]
 8005dfc:	b2db      	uxtb	r3, r3
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3708      	adds	r7, #8
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
	...

08005e08 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8005e12:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005e16:	4806      	ldr	r0, [pc, #24]	@ (8005e30 <BSP_PlatformIsDetected+0x28>)
 8005e18:	f7fc fcc6 	bl	80027a8 <HAL_GPIO_ReadPin>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d001      	beq.n	8005e26 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8005e22:	2300      	movs	r3, #0
 8005e24:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8005e26:	79fb      	ldrb	r3, [r7, #7]
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3708      	adds	r7, #8
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	40020800 	.word	0x40020800

08005e34 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8005e3c:	f7fb fd44 	bl	80018c8 <HAL_GetTick>
 8005e40:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8005e42:	e006      	b.n	8005e52 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005e44:	f7ff ff8a 	bl	8005d5c <BSP_SD_GetCardState>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d101      	bne.n	8005e52 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	e009      	b.n	8005e66 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8005e52:	f7fb fd39 	bl	80018c8 <HAL_GetTick>
 8005e56:	4602      	mov	r2, r0
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d8f0      	bhi.n	8005e44 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8005e62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
	...

08005e70 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	4603      	mov	r3, r0
 8005e78:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8005ea8 <SD_CheckStatus+0x38>)
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005e80:	f7ff ff6c 	bl	8005d5c <BSP_SD_GetCardState>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d107      	bne.n	8005e9a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005e8a:	4b07      	ldr	r3, [pc, #28]	@ (8005ea8 <SD_CheckStatus+0x38>)
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	f023 0301 	bic.w	r3, r3, #1
 8005e94:	b2da      	uxtb	r2, r3
 8005e96:	4b04      	ldr	r3, [pc, #16]	@ (8005ea8 <SD_CheckStatus+0x38>)
 8005e98:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005e9a:	4b03      	ldr	r3, [pc, #12]	@ (8005ea8 <SD_CheckStatus+0x38>)
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	b2db      	uxtb	r3, r3
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3708      	adds	r7, #8
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	20000009 	.word	0x20000009

08005eac <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005eb6:	f7ff ff05 	bl	8005cc4 <BSP_SD_Init>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d107      	bne.n	8005ed0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8005ec0:	79fb      	ldrb	r3, [r7, #7]
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7ff ffd4 	bl	8005e70 <SD_CheckStatus>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	461a      	mov	r2, r3
 8005ecc:	4b04      	ldr	r3, [pc, #16]	@ (8005ee0 <SD_initialize+0x34>)
 8005ece:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005ed0:	4b03      	ldr	r3, [pc, #12]	@ (8005ee0 <SD_initialize+0x34>)
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	b2db      	uxtb	r3, r3
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3708      	adds	r7, #8
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	20000009 	.word	0x20000009

08005ee4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	4603      	mov	r3, r0
 8005eec:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005eee:	79fb      	ldrb	r3, [r7, #7]
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7ff ffbd 	bl	8005e70 <SD_CheckStatus>
 8005ef6:	4603      	mov	r3, r0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3708      	adds	r7, #8
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b086      	sub	sp, #24
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60b9      	str	r1, [r7, #8]
 8005f08:	607a      	str	r2, [r7, #4]
 8005f0a:	603b      	str	r3, [r7, #0]
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005f14:	f247 5030 	movw	r0, #30000	@ 0x7530
 8005f18:	f7ff ff8c 	bl	8005e34 <SD_CheckStatusWithTimeout>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	da01      	bge.n	8005f26 <SD_read+0x26>
  {
    return res;
 8005f22:	7dfb      	ldrb	r3, [r7, #23]
 8005f24:	e03b      	b.n	8005f9e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8005f26:	683a      	ldr	r2, [r7, #0]
 8005f28:	6879      	ldr	r1, [r7, #4]
 8005f2a:	68b8      	ldr	r0, [r7, #8]
 8005f2c:	f7ff fee2 	bl	8005cf4 <BSP_SD_ReadBlocks_DMA>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d132      	bne.n	8005f9c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8005f36:	4b1c      	ldr	r3, [pc, #112]	@ (8005fa8 <SD_read+0xa8>)
 8005f38:	2200      	movs	r2, #0
 8005f3a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8005f3c:	f7fb fcc4 	bl	80018c8 <HAL_GetTick>
 8005f40:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8005f42:	bf00      	nop
 8005f44:	4b18      	ldr	r3, [pc, #96]	@ (8005fa8 <SD_read+0xa8>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d108      	bne.n	8005f5e <SD_read+0x5e>
 8005f4c:	f7fb fcbc 	bl	80018c8 <HAL_GetTick>
 8005f50:	4602      	mov	r2, r0
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	f247 522f 	movw	r2, #29999	@ 0x752f
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d9f2      	bls.n	8005f44 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8005f5e:	4b12      	ldr	r3, [pc, #72]	@ (8005fa8 <SD_read+0xa8>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d102      	bne.n	8005f6c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	75fb      	strb	r3, [r7, #23]
 8005f6a:	e017      	b.n	8005f9c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8005f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8005fa8 <SD_read+0xa8>)
 8005f6e:	2200      	movs	r2, #0
 8005f70:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8005f72:	f7fb fca9 	bl	80018c8 <HAL_GetTick>
 8005f76:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005f78:	e007      	b.n	8005f8a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005f7a:	f7ff feef 	bl	8005d5c <BSP_SD_GetCardState>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d102      	bne.n	8005f8a <SD_read+0x8a>
          {
            res = RES_OK;
 8005f84:	2300      	movs	r3, #0
 8005f86:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8005f88:	e008      	b.n	8005f9c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005f8a:	f7fb fc9d 	bl	80018c8 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	f247 522f 	movw	r2, #29999	@ 0x752f
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d9ee      	bls.n	8005f7a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8005f9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3718      	adds	r7, #24
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	20000754 	.word	0x20000754

08005fac <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b086      	sub	sp, #24
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60b9      	str	r1, [r7, #8]
 8005fb4:	607a      	str	r2, [r7, #4]
 8005fb6:	603b      	str	r3, [r7, #0]
 8005fb8:	4603      	mov	r3, r0
 8005fba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8005fc0:	4b24      	ldr	r3, [pc, #144]	@ (8006054 <SD_write+0xa8>)
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005fc6:	f247 5030 	movw	r0, #30000	@ 0x7530
 8005fca:	f7ff ff33 	bl	8005e34 <SD_CheckStatusWithTimeout>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	da01      	bge.n	8005fd8 <SD_write+0x2c>
  {
    return res;
 8005fd4:	7dfb      	ldrb	r3, [r7, #23]
 8005fd6:	e038      	b.n	800604a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8005fd8:	683a      	ldr	r2, [r7, #0]
 8005fda:	6879      	ldr	r1, [r7, #4]
 8005fdc:	68b8      	ldr	r0, [r7, #8]
 8005fde:	f7ff fea3 	bl	8005d28 <BSP_SD_WriteBlocks_DMA>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d12f      	bne.n	8006048 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8005fe8:	f7fb fc6e 	bl	80018c8 <HAL_GetTick>
 8005fec:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8005fee:	bf00      	nop
 8005ff0:	4b18      	ldr	r3, [pc, #96]	@ (8006054 <SD_write+0xa8>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d108      	bne.n	800600a <SD_write+0x5e>
 8005ff8:	f7fb fc66 	bl	80018c8 <HAL_GetTick>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	f247 522f 	movw	r2, #29999	@ 0x752f
 8006006:	4293      	cmp	r3, r2
 8006008:	d9f2      	bls.n	8005ff0 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800600a:	4b12      	ldr	r3, [pc, #72]	@ (8006054 <SD_write+0xa8>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d102      	bne.n	8006018 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	75fb      	strb	r3, [r7, #23]
 8006016:	e017      	b.n	8006048 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8006018:	4b0e      	ldr	r3, [pc, #56]	@ (8006054 <SD_write+0xa8>)
 800601a:	2200      	movs	r2, #0
 800601c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800601e:	f7fb fc53 	bl	80018c8 <HAL_GetTick>
 8006022:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006024:	e007      	b.n	8006036 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006026:	f7ff fe99 	bl	8005d5c <BSP_SD_GetCardState>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d102      	bne.n	8006036 <SD_write+0x8a>
          {
            res = RES_OK;
 8006030:	2300      	movs	r3, #0
 8006032:	75fb      	strb	r3, [r7, #23]
            break;
 8006034:	e008      	b.n	8006048 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006036:	f7fb fc47 	bl	80018c8 <HAL_GetTick>
 800603a:	4602      	mov	r2, r0
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	f247 522f 	movw	r2, #29999	@ 0x752f
 8006044:	4293      	cmp	r3, r2
 8006046:	d9ee      	bls.n	8006026 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8006048:	7dfb      	ldrb	r3, [r7, #23]
}
 800604a:	4618      	mov	r0, r3
 800604c:	3718      	adds	r7, #24
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	20000750 	.word	0x20000750

08006058 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b08c      	sub	sp, #48	@ 0x30
 800605c:	af00      	add	r7, sp, #0
 800605e:	4603      	mov	r3, r0
 8006060:	603a      	str	r2, [r7, #0]
 8006062:	71fb      	strb	r3, [r7, #7]
 8006064:	460b      	mov	r3, r1
 8006066:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800606e:	4b25      	ldr	r3, [pc, #148]	@ (8006104 <SD_ioctl+0xac>)
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	b2db      	uxtb	r3, r3
 8006074:	f003 0301 	and.w	r3, r3, #1
 8006078:	2b00      	cmp	r3, #0
 800607a:	d001      	beq.n	8006080 <SD_ioctl+0x28>
 800607c:	2303      	movs	r3, #3
 800607e:	e03c      	b.n	80060fa <SD_ioctl+0xa2>

  switch (cmd)
 8006080:	79bb      	ldrb	r3, [r7, #6]
 8006082:	2b03      	cmp	r3, #3
 8006084:	d834      	bhi.n	80060f0 <SD_ioctl+0x98>
 8006086:	a201      	add	r2, pc, #4	@ (adr r2, 800608c <SD_ioctl+0x34>)
 8006088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800608c:	0800609d 	.word	0x0800609d
 8006090:	080060a5 	.word	0x080060a5
 8006094:	080060bd 	.word	0x080060bd
 8006098:	080060d7 	.word	0x080060d7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800609c:	2300      	movs	r3, #0
 800609e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80060a2:	e028      	b.n	80060f6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80060a4:	f107 030c 	add.w	r3, r7, #12
 80060a8:	4618      	mov	r0, r3
 80060aa:	f7ff fe67 	bl	8005d7c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80060ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80060b4:	2300      	movs	r3, #0
 80060b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80060ba:	e01c      	b.n	80060f6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80060bc:	f107 030c 	add.w	r3, r7, #12
 80060c0:	4618      	mov	r0, r3
 80060c2:	f7ff fe5b 	bl	8005d7c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80060c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80060ce:	2300      	movs	r3, #0
 80060d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80060d4:	e00f      	b.n	80060f6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80060d6:	f107 030c 	add.w	r3, r7, #12
 80060da:	4618      	mov	r0, r3
 80060dc:	f7ff fe4e 	bl	8005d7c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80060e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060e2:	0a5a      	lsrs	r2, r3, #9
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80060e8:	2300      	movs	r3, #0
 80060ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80060ee:	e002      	b.n	80060f6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80060f0:	2304      	movs	r3, #4
 80060f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80060f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3730      	adds	r7, #48	@ 0x30
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	20000009 	.word	0x20000009

08006108 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8006108:	b480      	push	{r7}
 800610a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800610c:	4b03      	ldr	r3, [pc, #12]	@ (800611c <BSP_SD_WriteCpltCallback+0x14>)
 800610e:	2201      	movs	r2, #1
 8006110:	601a      	str	r2, [r3, #0]
}
 8006112:	bf00      	nop
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr
 800611c:	20000750 	.word	0x20000750

08006120 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8006120:	b480      	push	{r7}
 8006122:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8006124:	4b03      	ldr	r3, [pc, #12]	@ (8006134 <BSP_SD_ReadCpltCallback+0x14>)
 8006126:	2201      	movs	r2, #1
 8006128:	601a      	str	r2, [r3, #0]
}
 800612a:	bf00      	nop
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr
 8006134:	20000754 	.word	0x20000754

08006138 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	4603      	mov	r3, r0
 8006140:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006142:	79fb      	ldrb	r3, [r7, #7]
 8006144:	4a08      	ldr	r2, [pc, #32]	@ (8006168 <disk_status+0x30>)
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	79fa      	ldrb	r2, [r7, #7]
 8006150:	4905      	ldr	r1, [pc, #20]	@ (8006168 <disk_status+0x30>)
 8006152:	440a      	add	r2, r1
 8006154:	7a12      	ldrb	r2, [r2, #8]
 8006156:	4610      	mov	r0, r2
 8006158:	4798      	blx	r3
 800615a:	4603      	mov	r3, r0
 800615c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800615e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006160:	4618      	mov	r0, r3
 8006162:	3710      	adds	r7, #16
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	20000780 	.word	0x20000780

0800616c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	4603      	mov	r3, r0
 8006174:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006176:	2300      	movs	r3, #0
 8006178:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800617a:	79fb      	ldrb	r3, [r7, #7]
 800617c:	4a0d      	ldr	r2, [pc, #52]	@ (80061b4 <disk_initialize+0x48>)
 800617e:	5cd3      	ldrb	r3, [r2, r3]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d111      	bne.n	80061a8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006184:	79fb      	ldrb	r3, [r7, #7]
 8006186:	4a0b      	ldr	r2, [pc, #44]	@ (80061b4 <disk_initialize+0x48>)
 8006188:	2101      	movs	r1, #1
 800618a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800618c:	79fb      	ldrb	r3, [r7, #7]
 800618e:	4a09      	ldr	r2, [pc, #36]	@ (80061b4 <disk_initialize+0x48>)
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4413      	add	r3, r2
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	79fa      	ldrb	r2, [r7, #7]
 800619a:	4906      	ldr	r1, [pc, #24]	@ (80061b4 <disk_initialize+0x48>)
 800619c:	440a      	add	r2, r1
 800619e:	7a12      	ldrb	r2, [r2, #8]
 80061a0:	4610      	mov	r0, r2
 80061a2:	4798      	blx	r3
 80061a4:	4603      	mov	r3, r0
 80061a6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80061a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	20000780 	.word	0x20000780

080061b8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80061b8:	b590      	push	{r4, r7, lr}
 80061ba:	b087      	sub	sp, #28
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60b9      	str	r1, [r7, #8]
 80061c0:	607a      	str	r2, [r7, #4]
 80061c2:	603b      	str	r3, [r7, #0]
 80061c4:	4603      	mov	r3, r0
 80061c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80061c8:	7bfb      	ldrb	r3, [r7, #15]
 80061ca:	4a0a      	ldr	r2, [pc, #40]	@ (80061f4 <disk_read+0x3c>)
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	4413      	add	r3, r2
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	689c      	ldr	r4, [r3, #8]
 80061d4:	7bfb      	ldrb	r3, [r7, #15]
 80061d6:	4a07      	ldr	r2, [pc, #28]	@ (80061f4 <disk_read+0x3c>)
 80061d8:	4413      	add	r3, r2
 80061da:	7a18      	ldrb	r0, [r3, #8]
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	68b9      	ldr	r1, [r7, #8]
 80061e2:	47a0      	blx	r4
 80061e4:	4603      	mov	r3, r0
 80061e6:	75fb      	strb	r3, [r7, #23]
  return res;
 80061e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	371c      	adds	r7, #28
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd90      	pop	{r4, r7, pc}
 80061f2:	bf00      	nop
 80061f4:	20000780 	.word	0x20000780

080061f8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80061f8:	b590      	push	{r4, r7, lr}
 80061fa:	b087      	sub	sp, #28
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60b9      	str	r1, [r7, #8]
 8006200:	607a      	str	r2, [r7, #4]
 8006202:	603b      	str	r3, [r7, #0]
 8006204:	4603      	mov	r3, r0
 8006206:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006208:	7bfb      	ldrb	r3, [r7, #15]
 800620a:	4a0a      	ldr	r2, [pc, #40]	@ (8006234 <disk_write+0x3c>)
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	4413      	add	r3, r2
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	68dc      	ldr	r4, [r3, #12]
 8006214:	7bfb      	ldrb	r3, [r7, #15]
 8006216:	4a07      	ldr	r2, [pc, #28]	@ (8006234 <disk_write+0x3c>)
 8006218:	4413      	add	r3, r2
 800621a:	7a18      	ldrb	r0, [r3, #8]
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	68b9      	ldr	r1, [r7, #8]
 8006222:	47a0      	blx	r4
 8006224:	4603      	mov	r3, r0
 8006226:	75fb      	strb	r3, [r7, #23]
  return res;
 8006228:	7dfb      	ldrb	r3, [r7, #23]
}
 800622a:	4618      	mov	r0, r3
 800622c:	371c      	adds	r7, #28
 800622e:	46bd      	mov	sp, r7
 8006230:	bd90      	pop	{r4, r7, pc}
 8006232:	bf00      	nop
 8006234:	20000780 	.word	0x20000780

08006238 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	4603      	mov	r3, r0
 8006240:	603a      	str	r2, [r7, #0]
 8006242:	71fb      	strb	r3, [r7, #7]
 8006244:	460b      	mov	r3, r1
 8006246:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006248:	79fb      	ldrb	r3, [r7, #7]
 800624a:	4a09      	ldr	r2, [pc, #36]	@ (8006270 <disk_ioctl+0x38>)
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	4413      	add	r3, r2
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	79fa      	ldrb	r2, [r7, #7]
 8006256:	4906      	ldr	r1, [pc, #24]	@ (8006270 <disk_ioctl+0x38>)
 8006258:	440a      	add	r2, r1
 800625a:	7a10      	ldrb	r0, [r2, #8]
 800625c:	79b9      	ldrb	r1, [r7, #6]
 800625e:	683a      	ldr	r2, [r7, #0]
 8006260:	4798      	blx	r3
 8006262:	4603      	mov	r3, r0
 8006264:	73fb      	strb	r3, [r7, #15]
  return res;
 8006266:	7bfb      	ldrb	r3, [r7, #15]
}
 8006268:	4618      	mov	r0, r3
 800626a:	3710      	adds	r7, #16
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	20000780 	.word	0x20000780

08006274 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	3301      	adds	r3, #1
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006284:	89fb      	ldrh	r3, [r7, #14]
 8006286:	021b      	lsls	r3, r3, #8
 8006288:	b21a      	sxth	r2, r3
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	b21b      	sxth	r3, r3
 8006290:	4313      	orrs	r3, r2
 8006292:	b21b      	sxth	r3, r3
 8006294:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006296:	89fb      	ldrh	r3, [r7, #14]
}
 8006298:	4618      	mov	r0, r3
 800629a:	3714      	adds	r7, #20
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	3303      	adds	r3, #3
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	021b      	lsls	r3, r3, #8
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	3202      	adds	r2, #2
 80062bc:	7812      	ldrb	r2, [r2, #0]
 80062be:	4313      	orrs	r3, r2
 80062c0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	021b      	lsls	r3, r3, #8
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	3201      	adds	r2, #1
 80062ca:	7812      	ldrb	r2, [r2, #0]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	021b      	lsls	r3, r3, #8
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	7812      	ldrb	r2, [r2, #0]
 80062d8:	4313      	orrs	r3, r2
 80062da:	60fb      	str	r3, [r7, #12]
	return rv;
 80062dc:	68fb      	ldr	r3, [r7, #12]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3714      	adds	r7, #20
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80062ea:	b480      	push	{r7}
 80062ec:	b083      	sub	sp, #12
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
 80062f2:	460b      	mov	r3, r1
 80062f4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	1c5a      	adds	r2, r3, #1
 80062fa:	607a      	str	r2, [r7, #4]
 80062fc:	887a      	ldrh	r2, [r7, #2]
 80062fe:	b2d2      	uxtb	r2, r2
 8006300:	701a      	strb	r2, [r3, #0]
 8006302:	887b      	ldrh	r3, [r7, #2]
 8006304:	0a1b      	lsrs	r3, r3, #8
 8006306:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	1c5a      	adds	r2, r3, #1
 800630c:	607a      	str	r2, [r7, #4]
 800630e:	887a      	ldrh	r2, [r7, #2]
 8006310:	b2d2      	uxtb	r2, r2
 8006312:	701a      	strb	r2, [r3, #0]
}
 8006314:	bf00      	nop
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	1c5a      	adds	r2, r3, #1
 800632e:	607a      	str	r2, [r7, #4]
 8006330:	683a      	ldr	r2, [r7, #0]
 8006332:	b2d2      	uxtb	r2, r2
 8006334:	701a      	strb	r2, [r3, #0]
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	0a1b      	lsrs	r3, r3, #8
 800633a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	1c5a      	adds	r2, r3, #1
 8006340:	607a      	str	r2, [r7, #4]
 8006342:	683a      	ldr	r2, [r7, #0]
 8006344:	b2d2      	uxtb	r2, r2
 8006346:	701a      	strb	r2, [r3, #0]
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	0a1b      	lsrs	r3, r3, #8
 800634c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	1c5a      	adds	r2, r3, #1
 8006352:	607a      	str	r2, [r7, #4]
 8006354:	683a      	ldr	r2, [r7, #0]
 8006356:	b2d2      	uxtb	r2, r2
 8006358:	701a      	strb	r2, [r3, #0]
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	0a1b      	lsrs	r3, r3, #8
 800635e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	1c5a      	adds	r2, r3, #1
 8006364:	607a      	str	r2, [r7, #4]
 8006366:	683a      	ldr	r2, [r7, #0]
 8006368:	b2d2      	uxtb	r2, r2
 800636a:	701a      	strb	r2, [r3, #0]
}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006378:	b480      	push	{r7}
 800637a:	b087      	sub	sp, #28
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00d      	beq.n	80063ae <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	1c53      	adds	r3, r2, #1
 8006396:	613b      	str	r3, [r7, #16]
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	1c59      	adds	r1, r3, #1
 800639c:	6179      	str	r1, [r7, #20]
 800639e:	7812      	ldrb	r2, [r2, #0]
 80063a0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	3b01      	subs	r3, #1
 80063a6:	607b      	str	r3, [r7, #4]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1f1      	bne.n	8006392 <mem_cpy+0x1a>
	}
}
 80063ae:	bf00      	nop
 80063b0:	371c      	adds	r7, #28
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr

080063ba <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80063ba:	b480      	push	{r7}
 80063bc:	b087      	sub	sp, #28
 80063be:	af00      	add	r7, sp, #0
 80063c0:	60f8      	str	r0, [r7, #12]
 80063c2:	60b9      	str	r1, [r7, #8]
 80063c4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	1c5a      	adds	r2, r3, #1
 80063ce:	617a      	str	r2, [r7, #20]
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	b2d2      	uxtb	r2, r2
 80063d4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	3b01      	subs	r3, #1
 80063da:	607b      	str	r3, [r7, #4]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1f3      	bne.n	80063ca <mem_set+0x10>
}
 80063e2:	bf00      	nop
 80063e4:	bf00      	nop
 80063e6:	371c      	adds	r7, #28
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80063f0:	b480      	push	{r7}
 80063f2:	b089      	sub	sp, #36	@ 0x24
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	61fb      	str	r3, [r7, #28]
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006404:	2300      	movs	r3, #0
 8006406:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	1c5a      	adds	r2, r3, #1
 800640c:	61fa      	str	r2, [r7, #28]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	4619      	mov	r1, r3
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	1c5a      	adds	r2, r3, #1
 8006416:	61ba      	str	r2, [r7, #24]
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	1acb      	subs	r3, r1, r3
 800641c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	3b01      	subs	r3, #1
 8006422:	607b      	str	r3, [r7, #4]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d002      	beq.n	8006430 <mem_cmp+0x40>
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d0eb      	beq.n	8006408 <mem_cmp+0x18>

	return r;
 8006430:	697b      	ldr	r3, [r7, #20]
}
 8006432:	4618      	mov	r0, r3
 8006434:	3724      	adds	r7, #36	@ 0x24
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr

0800643e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800643e:	b480      	push	{r7}
 8006440:	b083      	sub	sp, #12
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
 8006446:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006448:	e002      	b.n	8006450 <chk_chr+0x12>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	3301      	adds	r3, #1
 800644e:	607b      	str	r3, [r7, #4]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d005      	beq.n	8006464 <chk_chr+0x26>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	461a      	mov	r2, r3
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	4293      	cmp	r3, r2
 8006462:	d1f2      	bne.n	800644a <chk_chr+0xc>
	return *str;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	781b      	ldrb	r3, [r3, #0]
}
 8006468:	4618      	mov	r0, r3
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800647e:	2300      	movs	r3, #0
 8006480:	60bb      	str	r3, [r7, #8]
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	60fb      	str	r3, [r7, #12]
 8006486:	e029      	b.n	80064dc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006488:	4a27      	ldr	r2, [pc, #156]	@ (8006528 <chk_lock+0xb4>)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	011b      	lsls	r3, r3, #4
 800648e:	4413      	add	r3, r2
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d01d      	beq.n	80064d2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006496:	4a24      	ldr	r2, [pc, #144]	@ (8006528 <chk_lock+0xb4>)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	011b      	lsls	r3, r3, #4
 800649c:	4413      	add	r3, r2
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d116      	bne.n	80064d6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80064a8:	4a1f      	ldr	r2, [pc, #124]	@ (8006528 <chk_lock+0xb4>)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	011b      	lsls	r3, r3, #4
 80064ae:	4413      	add	r3, r2
 80064b0:	3304      	adds	r3, #4
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d10c      	bne.n	80064d6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80064bc:	4a1a      	ldr	r2, [pc, #104]	@ (8006528 <chk_lock+0xb4>)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	011b      	lsls	r3, r3, #4
 80064c2:	4413      	add	r3, r2
 80064c4:	3308      	adds	r3, #8
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d102      	bne.n	80064d6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80064d0:	e007      	b.n	80064e2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80064d2:	2301      	movs	r3, #1
 80064d4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	3301      	adds	r3, #1
 80064da:	60fb      	str	r3, [r7, #12]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d9d2      	bls.n	8006488 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d109      	bne.n	80064fc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d102      	bne.n	80064f4 <chk_lock+0x80>
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d101      	bne.n	80064f8 <chk_lock+0x84>
 80064f4:	2300      	movs	r3, #0
 80064f6:	e010      	b.n	800651a <chk_lock+0xa6>
 80064f8:	2312      	movs	r3, #18
 80064fa:	e00e      	b.n	800651a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d108      	bne.n	8006514 <chk_lock+0xa0>
 8006502:	4a09      	ldr	r2, [pc, #36]	@ (8006528 <chk_lock+0xb4>)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	011b      	lsls	r3, r3, #4
 8006508:	4413      	add	r3, r2
 800650a:	330c      	adds	r3, #12
 800650c:	881b      	ldrh	r3, [r3, #0]
 800650e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006512:	d101      	bne.n	8006518 <chk_lock+0xa4>
 8006514:	2310      	movs	r3, #16
 8006516:	e000      	b.n	800651a <chk_lock+0xa6>
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3714      	adds	r7, #20
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	20000760 	.word	0x20000760

0800652c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006532:	2300      	movs	r3, #0
 8006534:	607b      	str	r3, [r7, #4]
 8006536:	e002      	b.n	800653e <enq_lock+0x12>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	3301      	adds	r3, #1
 800653c:	607b      	str	r3, [r7, #4]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d806      	bhi.n	8006552 <enq_lock+0x26>
 8006544:	4a09      	ldr	r2, [pc, #36]	@ (800656c <enq_lock+0x40>)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	011b      	lsls	r3, r3, #4
 800654a:	4413      	add	r3, r2
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1f2      	bne.n	8006538 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2b02      	cmp	r3, #2
 8006556:	bf14      	ite	ne
 8006558:	2301      	movne	r3, #1
 800655a:	2300      	moveq	r3, #0
 800655c:	b2db      	uxtb	r3, r3
}
 800655e:	4618      	mov	r0, r3
 8006560:	370c      	adds	r7, #12
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	20000760 	.word	0x20000760

08006570 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006570:	b480      	push	{r7}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800657a:	2300      	movs	r3, #0
 800657c:	60fb      	str	r3, [r7, #12]
 800657e:	e01f      	b.n	80065c0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006580:	4a41      	ldr	r2, [pc, #260]	@ (8006688 <inc_lock+0x118>)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	011b      	lsls	r3, r3, #4
 8006586:	4413      	add	r3, r2
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	429a      	cmp	r2, r3
 8006590:	d113      	bne.n	80065ba <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006592:	4a3d      	ldr	r2, [pc, #244]	@ (8006688 <inc_lock+0x118>)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	011b      	lsls	r3, r3, #4
 8006598:	4413      	add	r3, r2
 800659a:	3304      	adds	r3, #4
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d109      	bne.n	80065ba <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80065a6:	4a38      	ldr	r2, [pc, #224]	@ (8006688 <inc_lock+0x118>)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	011b      	lsls	r3, r3, #4
 80065ac:	4413      	add	r3, r2
 80065ae:	3308      	adds	r3, #8
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d006      	beq.n	80065c8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	3301      	adds	r3, #1
 80065be:	60fb      	str	r3, [r7, #12]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d9dc      	bls.n	8006580 <inc_lock+0x10>
 80065c6:	e000      	b.n	80065ca <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80065c8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d132      	bne.n	8006636 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80065d0:	2300      	movs	r3, #0
 80065d2:	60fb      	str	r3, [r7, #12]
 80065d4:	e002      	b.n	80065dc <inc_lock+0x6c>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	3301      	adds	r3, #1
 80065da:	60fb      	str	r3, [r7, #12]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d806      	bhi.n	80065f0 <inc_lock+0x80>
 80065e2:	4a29      	ldr	r2, [pc, #164]	@ (8006688 <inc_lock+0x118>)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	011b      	lsls	r3, r3, #4
 80065e8:	4413      	add	r3, r2
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1f2      	bne.n	80065d6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d101      	bne.n	80065fa <inc_lock+0x8a>
 80065f6:	2300      	movs	r3, #0
 80065f8:	e040      	b.n	800667c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	4922      	ldr	r1, [pc, #136]	@ (8006688 <inc_lock+0x118>)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	011b      	lsls	r3, r3, #4
 8006604:	440b      	add	r3, r1
 8006606:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	689a      	ldr	r2, [r3, #8]
 800660c:	491e      	ldr	r1, [pc, #120]	@ (8006688 <inc_lock+0x118>)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	011b      	lsls	r3, r3, #4
 8006612:	440b      	add	r3, r1
 8006614:	3304      	adds	r3, #4
 8006616:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	695a      	ldr	r2, [r3, #20]
 800661c:	491a      	ldr	r1, [pc, #104]	@ (8006688 <inc_lock+0x118>)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	011b      	lsls	r3, r3, #4
 8006622:	440b      	add	r3, r1
 8006624:	3308      	adds	r3, #8
 8006626:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006628:	4a17      	ldr	r2, [pc, #92]	@ (8006688 <inc_lock+0x118>)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	011b      	lsls	r3, r3, #4
 800662e:	4413      	add	r3, r2
 8006630:	330c      	adds	r3, #12
 8006632:	2200      	movs	r2, #0
 8006634:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d009      	beq.n	8006650 <inc_lock+0xe0>
 800663c:	4a12      	ldr	r2, [pc, #72]	@ (8006688 <inc_lock+0x118>)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	011b      	lsls	r3, r3, #4
 8006642:	4413      	add	r3, r2
 8006644:	330c      	adds	r3, #12
 8006646:	881b      	ldrh	r3, [r3, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d001      	beq.n	8006650 <inc_lock+0xe0>
 800664c:	2300      	movs	r3, #0
 800664e:	e015      	b.n	800667c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d108      	bne.n	8006668 <inc_lock+0xf8>
 8006656:	4a0c      	ldr	r2, [pc, #48]	@ (8006688 <inc_lock+0x118>)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	011b      	lsls	r3, r3, #4
 800665c:	4413      	add	r3, r2
 800665e:	330c      	adds	r3, #12
 8006660:	881b      	ldrh	r3, [r3, #0]
 8006662:	3301      	adds	r3, #1
 8006664:	b29a      	uxth	r2, r3
 8006666:	e001      	b.n	800666c <inc_lock+0xfc>
 8006668:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800666c:	4906      	ldr	r1, [pc, #24]	@ (8006688 <inc_lock+0x118>)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	011b      	lsls	r3, r3, #4
 8006672:	440b      	add	r3, r1
 8006674:	330c      	adds	r3, #12
 8006676:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	3301      	adds	r3, #1
}
 800667c:	4618      	mov	r0, r3
 800667e:	3714      	adds	r7, #20
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr
 8006688:	20000760 	.word	0x20000760

0800668c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	3b01      	subs	r3, #1
 8006698:	607b      	str	r3, [r7, #4]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d825      	bhi.n	80066ec <dec_lock+0x60>
		n = Files[i].ctr;
 80066a0:	4a17      	ldr	r2, [pc, #92]	@ (8006700 <dec_lock+0x74>)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	011b      	lsls	r3, r3, #4
 80066a6:	4413      	add	r3, r2
 80066a8:	330c      	adds	r3, #12
 80066aa:	881b      	ldrh	r3, [r3, #0]
 80066ac:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80066ae:	89fb      	ldrh	r3, [r7, #14]
 80066b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066b4:	d101      	bne.n	80066ba <dec_lock+0x2e>
 80066b6:	2300      	movs	r3, #0
 80066b8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80066ba:	89fb      	ldrh	r3, [r7, #14]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d002      	beq.n	80066c6 <dec_lock+0x3a>
 80066c0:	89fb      	ldrh	r3, [r7, #14]
 80066c2:	3b01      	subs	r3, #1
 80066c4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80066c6:	4a0e      	ldr	r2, [pc, #56]	@ (8006700 <dec_lock+0x74>)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	011b      	lsls	r3, r3, #4
 80066cc:	4413      	add	r3, r2
 80066ce:	330c      	adds	r3, #12
 80066d0:	89fa      	ldrh	r2, [r7, #14]
 80066d2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80066d4:	89fb      	ldrh	r3, [r7, #14]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d105      	bne.n	80066e6 <dec_lock+0x5a>
 80066da:	4a09      	ldr	r2, [pc, #36]	@ (8006700 <dec_lock+0x74>)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	011b      	lsls	r3, r3, #4
 80066e0:	4413      	add	r3, r2
 80066e2:	2200      	movs	r2, #0
 80066e4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80066e6:	2300      	movs	r3, #0
 80066e8:	737b      	strb	r3, [r7, #13]
 80066ea:	e001      	b.n	80066f0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80066ec:	2302      	movs	r3, #2
 80066ee:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80066f0:	7b7b      	ldrb	r3, [r7, #13]
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3714      	adds	r7, #20
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	20000760 	.word	0x20000760

08006704 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006704:	b480      	push	{r7}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800670c:	2300      	movs	r3, #0
 800670e:	60fb      	str	r3, [r7, #12]
 8006710:	e010      	b.n	8006734 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006712:	4a0d      	ldr	r2, [pc, #52]	@ (8006748 <clear_lock+0x44>)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	011b      	lsls	r3, r3, #4
 8006718:	4413      	add	r3, r2
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	429a      	cmp	r2, r3
 8006720:	d105      	bne.n	800672e <clear_lock+0x2a>
 8006722:	4a09      	ldr	r2, [pc, #36]	@ (8006748 <clear_lock+0x44>)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	011b      	lsls	r3, r3, #4
 8006728:	4413      	add	r3, r2
 800672a:	2200      	movs	r2, #0
 800672c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	3301      	adds	r3, #1
 8006732:	60fb      	str	r3, [r7, #12]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d9eb      	bls.n	8006712 <clear_lock+0xe>
	}
}
 800673a:	bf00      	nop
 800673c:	bf00      	nop
 800673e:	3714      	adds	r7, #20
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr
 8006748:	20000760 	.word	0x20000760

0800674c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b086      	sub	sp, #24
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006754:	2300      	movs	r3, #0
 8006756:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	78db      	ldrb	r3, [r3, #3]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d034      	beq.n	80067ca <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006764:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	7858      	ldrb	r0, [r3, #1]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006770:	2301      	movs	r3, #1
 8006772:	697a      	ldr	r2, [r7, #20]
 8006774:	f7ff fd40 	bl	80061f8 <disk_write>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d002      	beq.n	8006784 <sync_window+0x38>
			res = FR_DISK_ERR;
 800677e:	2301      	movs	r3, #1
 8006780:	73fb      	strb	r3, [r7, #15]
 8006782:	e022      	b.n	80067ca <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	1ad2      	subs	r2, r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	69db      	ldr	r3, [r3, #28]
 8006796:	429a      	cmp	r2, r3
 8006798:	d217      	bcs.n	80067ca <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	789b      	ldrb	r3, [r3, #2]
 800679e:	613b      	str	r3, [r7, #16]
 80067a0:	e010      	b.n	80067c4 <sync_window+0x78>
					wsect += fs->fsize;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	69db      	ldr	r3, [r3, #28]
 80067a6:	697a      	ldr	r2, [r7, #20]
 80067a8:	4413      	add	r3, r2
 80067aa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	7858      	ldrb	r0, [r3, #1]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80067b6:	2301      	movs	r3, #1
 80067b8:	697a      	ldr	r2, [r7, #20]
 80067ba:	f7ff fd1d 	bl	80061f8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	3b01      	subs	r3, #1
 80067c2:	613b      	str	r3, [r7, #16]
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d8eb      	bhi.n	80067a2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80067ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3718      	adds	r7, #24
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80067de:	2300      	movs	r3, #0
 80067e0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067e6:	683a      	ldr	r2, [r7, #0]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d01b      	beq.n	8006824 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f7ff ffad 	bl	800674c <sync_window>
 80067f2:	4603      	mov	r3, r0
 80067f4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80067f6:	7bfb      	ldrb	r3, [r7, #15]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d113      	bne.n	8006824 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	7858      	ldrb	r0, [r3, #1]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006806:	2301      	movs	r3, #1
 8006808:	683a      	ldr	r2, [r7, #0]
 800680a:	f7ff fcd5 	bl	80061b8 <disk_read>
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	d004      	beq.n	800681e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006814:	f04f 33ff 	mov.w	r3, #4294967295
 8006818:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800681a:	2301      	movs	r3, #1
 800681c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	683a      	ldr	r2, [r7, #0]
 8006822:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8006824:	7bfb      	ldrb	r3, [r7, #15]
}
 8006826:	4618      	mov	r0, r3
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
	...

08006830 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f7ff ff87 	bl	800674c <sync_window>
 800683e:	4603      	mov	r3, r0
 8006840:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006842:	7bfb      	ldrb	r3, [r7, #15]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d158      	bne.n	80068fa <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	2b03      	cmp	r3, #3
 800684e:	d148      	bne.n	80068e2 <sync_fs+0xb2>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	791b      	ldrb	r3, [r3, #4]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d144      	bne.n	80068e2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	3334      	adds	r3, #52	@ 0x34
 800685c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006860:	2100      	movs	r1, #0
 8006862:	4618      	mov	r0, r3
 8006864:	f7ff fda9 	bl	80063ba <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	3334      	adds	r3, #52	@ 0x34
 800686c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006870:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8006874:	4618      	mov	r0, r3
 8006876:	f7ff fd38 	bl	80062ea <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	3334      	adds	r3, #52	@ 0x34
 800687e:	4921      	ldr	r1, [pc, #132]	@ (8006904 <sync_fs+0xd4>)
 8006880:	4618      	mov	r0, r3
 8006882:	f7ff fd4d 	bl	8006320 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	3334      	adds	r3, #52	@ 0x34
 800688a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800688e:	491e      	ldr	r1, [pc, #120]	@ (8006908 <sync_fs+0xd8>)
 8006890:	4618      	mov	r0, r3
 8006892:	f7ff fd45 	bl	8006320 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	3334      	adds	r3, #52	@ 0x34
 800689a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	695b      	ldr	r3, [r3, #20]
 80068a2:	4619      	mov	r1, r3
 80068a4:	4610      	mov	r0, r2
 80068a6:	f7ff fd3b 	bl	8006320 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	3334      	adds	r3, #52	@ 0x34
 80068ae:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	4619      	mov	r1, r3
 80068b8:	4610      	mov	r0, r2
 80068ba:	f7ff fd31 	bl	8006320 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a1b      	ldr	r3, [r3, #32]
 80068c2:	1c5a      	adds	r2, r3, #1
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	7858      	ldrb	r0, [r3, #1]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80068d6:	2301      	movs	r3, #1
 80068d8:	f7ff fc8e 	bl	80061f8 <disk_write>
			fs->fsi_flag = 0;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	785b      	ldrb	r3, [r3, #1]
 80068e6:	2200      	movs	r2, #0
 80068e8:	2100      	movs	r1, #0
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7ff fca4 	bl	8006238 <disk_ioctl>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d001      	beq.n	80068fa <sync_fs+0xca>
 80068f6:	2301      	movs	r3, #1
 80068f8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80068fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3710      	adds	r7, #16
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}
 8006904:	41615252 	.word	0x41615252
 8006908:	61417272 	.word	0x61417272

0800690c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	3b02      	subs	r3, #2
 800691a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	699b      	ldr	r3, [r3, #24]
 8006920:	3b02      	subs	r3, #2
 8006922:	683a      	ldr	r2, [r7, #0]
 8006924:	429a      	cmp	r2, r3
 8006926:	d301      	bcc.n	800692c <clust2sect+0x20>
 8006928:	2300      	movs	r3, #0
 800692a:	e008      	b.n	800693e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	895b      	ldrh	r3, [r3, #10]
 8006930:	461a      	mov	r2, r3
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	fb03 f202 	mul.w	r2, r3, r2
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800693c:	4413      	add	r3, r2
}
 800693e:	4618      	mov	r0, r3
 8006940:	370c      	adds	r7, #12
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr

0800694a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800694a:	b580      	push	{r7, lr}
 800694c:	b086      	sub	sp, #24
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
 8006952:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d904      	bls.n	800696a <get_fat+0x20>
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	699b      	ldr	r3, [r3, #24]
 8006964:	683a      	ldr	r2, [r7, #0]
 8006966:	429a      	cmp	r2, r3
 8006968:	d302      	bcc.n	8006970 <get_fat+0x26>
		val = 1;	/* Internal error */
 800696a:	2301      	movs	r3, #1
 800696c:	617b      	str	r3, [r7, #20]
 800696e:	e08e      	b.n	8006a8e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006970:	f04f 33ff 	mov.w	r3, #4294967295
 8006974:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	2b03      	cmp	r3, #3
 800697c:	d061      	beq.n	8006a42 <get_fat+0xf8>
 800697e:	2b03      	cmp	r3, #3
 8006980:	dc7b      	bgt.n	8006a7a <get_fat+0x130>
 8006982:	2b01      	cmp	r3, #1
 8006984:	d002      	beq.n	800698c <get_fat+0x42>
 8006986:	2b02      	cmp	r3, #2
 8006988:	d041      	beq.n	8006a0e <get_fat+0xc4>
 800698a:	e076      	b.n	8006a7a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	60fb      	str	r3, [r7, #12]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	085b      	lsrs	r3, r3, #1
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	4413      	add	r3, r2
 8006998:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	0a5b      	lsrs	r3, r3, #9
 80069a2:	4413      	add	r3, r2
 80069a4:	4619      	mov	r1, r3
 80069a6:	6938      	ldr	r0, [r7, #16]
 80069a8:	f7ff ff14 	bl	80067d4 <move_window>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d166      	bne.n	8006a80 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	1c5a      	adds	r2, r3, #1
 80069b6:	60fa      	str	r2, [r7, #12]
 80069b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069bc:	693a      	ldr	r2, [r7, #16]
 80069be:	4413      	add	r3, r2
 80069c0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80069c4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	0a5b      	lsrs	r3, r3, #9
 80069ce:	4413      	add	r3, r2
 80069d0:	4619      	mov	r1, r3
 80069d2:	6938      	ldr	r0, [r7, #16]
 80069d4:	f7ff fefe 	bl	80067d4 <move_window>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d152      	bne.n	8006a84 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069e4:	693a      	ldr	r2, [r7, #16]
 80069e6:	4413      	add	r3, r2
 80069e8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80069ec:	021b      	lsls	r3, r3, #8
 80069ee:	68ba      	ldr	r2, [r7, #8]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	f003 0301 	and.w	r3, r3, #1
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d002      	beq.n	8006a04 <get_fat+0xba>
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	091b      	lsrs	r3, r3, #4
 8006a02:	e002      	b.n	8006a0a <get_fat+0xc0>
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a0a:	617b      	str	r3, [r7, #20]
			break;
 8006a0c:	e03f      	b.n	8006a8e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	0a1b      	lsrs	r3, r3, #8
 8006a16:	4413      	add	r3, r2
 8006a18:	4619      	mov	r1, r3
 8006a1a:	6938      	ldr	r0, [r7, #16]
 8006a1c:	f7ff feda 	bl	80067d4 <move_window>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d130      	bne.n	8006a88 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	005b      	lsls	r3, r3, #1
 8006a30:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006a34:	4413      	add	r3, r2
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7ff fc1c 	bl	8006274 <ld_word>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	617b      	str	r3, [r7, #20]
			break;
 8006a40:	e025      	b.n	8006a8e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	09db      	lsrs	r3, r3, #7
 8006a4a:	4413      	add	r3, r2
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	6938      	ldr	r0, [r7, #16]
 8006a50:	f7ff fec0 	bl	80067d4 <move_window>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d118      	bne.n	8006a8c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006a68:	4413      	add	r3, r2
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7ff fc1a 	bl	80062a4 <ld_dword>
 8006a70:	4603      	mov	r3, r0
 8006a72:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006a76:	617b      	str	r3, [r7, #20]
			break;
 8006a78:	e009      	b.n	8006a8e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	617b      	str	r3, [r7, #20]
 8006a7e:	e006      	b.n	8006a8e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006a80:	bf00      	nop
 8006a82:	e004      	b.n	8006a8e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006a84:	bf00      	nop
 8006a86:	e002      	b.n	8006a8e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006a88:	bf00      	nop
 8006a8a:	e000      	b.n	8006a8e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006a8c:	bf00      	nop
		}
	}

	return val;
 8006a8e:	697b      	ldr	r3, [r7, #20]
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3718      	adds	r7, #24
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006a98:	b590      	push	{r4, r7, lr}
 8006a9a:	b089      	sub	sp, #36	@ 0x24
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006aa4:	2302      	movs	r3, #2
 8006aa6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	f240 80d9 	bls.w	8006c62 <put_fat+0x1ca>
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	699b      	ldr	r3, [r3, #24]
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	f080 80d3 	bcs.w	8006c62 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	2b03      	cmp	r3, #3
 8006ac2:	f000 8096 	beq.w	8006bf2 <put_fat+0x15a>
 8006ac6:	2b03      	cmp	r3, #3
 8006ac8:	f300 80cb 	bgt.w	8006c62 <put_fat+0x1ca>
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d002      	beq.n	8006ad6 <put_fat+0x3e>
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	d06e      	beq.n	8006bb2 <put_fat+0x11a>
 8006ad4:	e0c5      	b.n	8006c62 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	61bb      	str	r3, [r7, #24]
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	085b      	lsrs	r3, r3, #1
 8006ade:	69ba      	ldr	r2, [r7, #24]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	0a5b      	lsrs	r3, r3, #9
 8006aec:	4413      	add	r3, r2
 8006aee:	4619      	mov	r1, r3
 8006af0:	68f8      	ldr	r0, [r7, #12]
 8006af2:	f7ff fe6f 	bl	80067d4 <move_window>
 8006af6:	4603      	mov	r3, r0
 8006af8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006afa:	7ffb      	ldrb	r3, [r7, #31]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f040 80a9 	bne.w	8006c54 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	1c59      	adds	r1, r3, #1
 8006b0c:	61b9      	str	r1, [r7, #24]
 8006b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b12:	4413      	add	r3, r2
 8006b14:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	f003 0301 	and.w	r3, r3, #1
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d00d      	beq.n	8006b3c <put_fat+0xa4>
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	b25b      	sxtb	r3, r3
 8006b26:	f003 030f 	and.w	r3, r3, #15
 8006b2a:	b25a      	sxtb	r2, r3
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	011b      	lsls	r3, r3, #4
 8006b32:	b25b      	sxtb	r3, r3
 8006b34:	4313      	orrs	r3, r2
 8006b36:	b25b      	sxtb	r3, r3
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	e001      	b.n	8006b40 <put_fat+0xa8>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	697a      	ldr	r2, [r7, #20]
 8006b42:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2201      	movs	r2, #1
 8006b48:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	0a5b      	lsrs	r3, r3, #9
 8006b52:	4413      	add	r3, r2
 8006b54:	4619      	mov	r1, r3
 8006b56:	68f8      	ldr	r0, [r7, #12]
 8006b58:	f7ff fe3c 	bl	80067d4 <move_window>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006b60:	7ffb      	ldrb	r3, [r7, #31]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d178      	bne.n	8006c58 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b72:	4413      	add	r3, r2
 8006b74:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	f003 0301 	and.w	r3, r3, #1
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d003      	beq.n	8006b88 <put_fat+0xf0>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	091b      	lsrs	r3, r3, #4
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	e00e      	b.n	8006ba6 <put_fat+0x10e>
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	b25b      	sxtb	r3, r3
 8006b8e:	f023 030f 	bic.w	r3, r3, #15
 8006b92:	b25a      	sxtb	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	0a1b      	lsrs	r3, r3, #8
 8006b98:	b25b      	sxtb	r3, r3
 8006b9a:	f003 030f 	and.w	r3, r3, #15
 8006b9e:	b25b      	sxtb	r3, r3
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	b25b      	sxtb	r3, r3
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	697a      	ldr	r2, [r7, #20]
 8006ba8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2201      	movs	r2, #1
 8006bae:	70da      	strb	r2, [r3, #3]
			break;
 8006bb0:	e057      	b.n	8006c62 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	0a1b      	lsrs	r3, r3, #8
 8006bba:	4413      	add	r3, r2
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f7ff fe08 	bl	80067d4 <move_window>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006bc8:	7ffb      	ldrb	r3, [r7, #31]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d146      	bne.n	8006c5c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	005b      	lsls	r3, r3, #1
 8006bd8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006bdc:	4413      	add	r3, r2
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	b292      	uxth	r2, r2
 8006be2:	4611      	mov	r1, r2
 8006be4:	4618      	mov	r0, r3
 8006be6:	f7ff fb80 	bl	80062ea <st_word>
			fs->wflag = 1;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2201      	movs	r2, #1
 8006bee:	70da      	strb	r2, [r3, #3]
			break;
 8006bf0:	e037      	b.n	8006c62 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	09db      	lsrs	r3, r3, #7
 8006bfa:	4413      	add	r3, r2
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f7ff fde8 	bl	80067d4 <move_window>
 8006c04:	4603      	mov	r3, r0
 8006c06:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006c08:	7ffb      	ldrb	r3, [r7, #31]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d128      	bne.n	8006c60 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006c22:	4413      	add	r3, r2
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7ff fb3d 	bl	80062a4 <ld_dword>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006c30:	4323      	orrs	r3, r4
 8006c32:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006c42:	4413      	add	r3, r2
 8006c44:	6879      	ldr	r1, [r7, #4]
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7ff fb6a 	bl	8006320 <st_dword>
			fs->wflag = 1;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	70da      	strb	r2, [r3, #3]
			break;
 8006c52:	e006      	b.n	8006c62 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006c54:	bf00      	nop
 8006c56:	e004      	b.n	8006c62 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006c58:	bf00      	nop
 8006c5a:	e002      	b.n	8006c62 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006c5c:	bf00      	nop
 8006c5e:	e000      	b.n	8006c62 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006c60:	bf00      	nop
		}
	}
	return res;
 8006c62:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3724      	adds	r7, #36	@ 0x24
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd90      	pop	{r4, r7, pc}

08006c6c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b088      	sub	sp, #32
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d904      	bls.n	8006c92 <remove_chain+0x26>
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	699b      	ldr	r3, [r3, #24]
 8006c8c:	68ba      	ldr	r2, [r7, #8]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d301      	bcc.n	8006c96 <remove_chain+0x2a>
 8006c92:	2302      	movs	r3, #2
 8006c94:	e04b      	b.n	8006d2e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00c      	beq.n	8006cb6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8006ca0:	6879      	ldr	r1, [r7, #4]
 8006ca2:	69b8      	ldr	r0, [r7, #24]
 8006ca4:	f7ff fef8 	bl	8006a98 <put_fat>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006cac:	7ffb      	ldrb	r3, [r7, #31]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d001      	beq.n	8006cb6 <remove_chain+0x4a>
 8006cb2:	7ffb      	ldrb	r3, [r7, #31]
 8006cb4:	e03b      	b.n	8006d2e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006cb6:	68b9      	ldr	r1, [r7, #8]
 8006cb8:	68f8      	ldr	r0, [r7, #12]
 8006cba:	f7ff fe46 	bl	800694a <get_fat>
 8006cbe:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d031      	beq.n	8006d2a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d101      	bne.n	8006cd0 <remove_chain+0x64>
 8006ccc:	2302      	movs	r3, #2
 8006cce:	e02e      	b.n	8006d2e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd6:	d101      	bne.n	8006cdc <remove_chain+0x70>
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e028      	b.n	8006d2e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006cdc:	2200      	movs	r2, #0
 8006cde:	68b9      	ldr	r1, [r7, #8]
 8006ce0:	69b8      	ldr	r0, [r7, #24]
 8006ce2:	f7ff fed9 	bl	8006a98 <put_fat>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006cea:	7ffb      	ldrb	r3, [r7, #31]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d001      	beq.n	8006cf4 <remove_chain+0x88>
 8006cf0:	7ffb      	ldrb	r3, [r7, #31]
 8006cf2:	e01c      	b.n	8006d2e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	695a      	ldr	r2, [r3, #20]
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	699b      	ldr	r3, [r3, #24]
 8006cfc:	3b02      	subs	r3, #2
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d20b      	bcs.n	8006d1a <remove_chain+0xae>
			fs->free_clst++;
 8006d02:	69bb      	ldr	r3, [r7, #24]
 8006d04:	695b      	ldr	r3, [r3, #20]
 8006d06:	1c5a      	adds	r2, r3, #1
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	791b      	ldrb	r3, [r3, #4]
 8006d10:	f043 0301 	orr.w	r3, r3, #1
 8006d14:	b2da      	uxtb	r2, r3
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	68ba      	ldr	r2, [r7, #8]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d3c6      	bcc.n	8006cb6 <remove_chain+0x4a>
 8006d28:	e000      	b.n	8006d2c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006d2a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3720      	adds	r7, #32
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}

08006d36 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006d36:	b580      	push	{r7, lr}
 8006d38:	b088      	sub	sp, #32
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
 8006d3e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d10d      	bne.n	8006d68 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d004      	beq.n	8006d62 <create_chain+0x2c>
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	699b      	ldr	r3, [r3, #24]
 8006d5c:	69ba      	ldr	r2, [r7, #24]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d31b      	bcc.n	8006d9a <create_chain+0x64>
 8006d62:	2301      	movs	r3, #1
 8006d64:	61bb      	str	r3, [r7, #24]
 8006d66:	e018      	b.n	8006d9a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006d68:	6839      	ldr	r1, [r7, #0]
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7ff fded 	bl	800694a <get_fat>
 8006d70:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d801      	bhi.n	8006d7c <create_chain+0x46>
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e070      	b.n	8006e5e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d82:	d101      	bne.n	8006d88 <create_chain+0x52>
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	e06a      	b.n	8006e5e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	699b      	ldr	r3, [r3, #24]
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d201      	bcs.n	8006d96 <create_chain+0x60>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	e063      	b.n	8006e5e <create_chain+0x128>
		scl = clst;
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	3301      	adds	r3, #1
 8006da2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	699b      	ldr	r3, [r3, #24]
 8006da8:	69fa      	ldr	r2, [r7, #28]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d307      	bcc.n	8006dbe <create_chain+0x88>
				ncl = 2;
 8006dae:	2302      	movs	r3, #2
 8006db0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006db2:	69fa      	ldr	r2, [r7, #28]
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d901      	bls.n	8006dbe <create_chain+0x88>
 8006dba:	2300      	movs	r3, #0
 8006dbc:	e04f      	b.n	8006e5e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006dbe:	69f9      	ldr	r1, [r7, #28]
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f7ff fdc2 	bl	800694a <get_fat>
 8006dc6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00e      	beq.n	8006dec <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d003      	beq.n	8006ddc <create_chain+0xa6>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dda:	d101      	bne.n	8006de0 <create_chain+0xaa>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	e03e      	b.n	8006e5e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006de0:	69fa      	ldr	r2, [r7, #28]
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d1da      	bne.n	8006d9e <create_chain+0x68>
 8006de8:	2300      	movs	r3, #0
 8006dea:	e038      	b.n	8006e5e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006dec:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006dee:	f04f 32ff 	mov.w	r2, #4294967295
 8006df2:	69f9      	ldr	r1, [r7, #28]
 8006df4:	6938      	ldr	r0, [r7, #16]
 8006df6:	f7ff fe4f 	bl	8006a98 <put_fat>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006dfe:	7dfb      	ldrb	r3, [r7, #23]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d109      	bne.n	8006e18 <create_chain+0xe2>
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d006      	beq.n	8006e18 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006e0a:	69fa      	ldr	r2, [r7, #28]
 8006e0c:	6839      	ldr	r1, [r7, #0]
 8006e0e:	6938      	ldr	r0, [r7, #16]
 8006e10:	f7ff fe42 	bl	8006a98 <put_fat>
 8006e14:	4603      	mov	r3, r0
 8006e16:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006e18:	7dfb      	ldrb	r3, [r7, #23]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d116      	bne.n	8006e4c <create_chain+0x116>
		fs->last_clst = ncl;
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	69fa      	ldr	r2, [r7, #28]
 8006e22:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	695a      	ldr	r2, [r3, #20]
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	699b      	ldr	r3, [r3, #24]
 8006e2c:	3b02      	subs	r3, #2
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d804      	bhi.n	8006e3c <create_chain+0x106>
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	695b      	ldr	r3, [r3, #20]
 8006e36:	1e5a      	subs	r2, r3, #1
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	791b      	ldrb	r3, [r3, #4]
 8006e40:	f043 0301 	orr.w	r3, r3, #1
 8006e44:	b2da      	uxtb	r2, r3
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	711a      	strb	r2, [r3, #4]
 8006e4a:	e007      	b.n	8006e5c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006e4c:	7dfb      	ldrb	r3, [r7, #23]
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d102      	bne.n	8006e58 <create_chain+0x122>
 8006e52:	f04f 33ff 	mov.w	r3, #4294967295
 8006e56:	e000      	b.n	8006e5a <create_chain+0x124>
 8006e58:	2301      	movs	r3, #1
 8006e5a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006e5c:	69fb      	ldr	r3, [r7, #28]
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3720      	adds	r7, #32
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006e66:	b480      	push	{r7}
 8006e68:	b087      	sub	sp, #28
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
 8006e6e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e7a:	3304      	adds	r3, #4
 8006e7c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	0a5b      	lsrs	r3, r3, #9
 8006e82:	68fa      	ldr	r2, [r7, #12]
 8006e84:	8952      	ldrh	r2, [r2, #10]
 8006e86:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e8a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	1d1a      	adds	r2, r3, #4
 8006e90:	613a      	str	r2, [r7, #16]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d101      	bne.n	8006ea0 <clmt_clust+0x3a>
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	e010      	b.n	8006ec2 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006ea0:	697a      	ldr	r2, [r7, #20]
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d307      	bcc.n	8006eb8 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006ea8:	697a      	ldr	r2, [r7, #20]
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	617b      	str	r3, [r7, #20]
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	3304      	adds	r3, #4
 8006eb4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006eb6:	e7e9      	b.n	8006e8c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006eb8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	4413      	add	r3, r2
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	371c      	adds	r7, #28
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr

08006ece <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b086      	sub	sp, #24
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
 8006ed6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ee4:	d204      	bcs.n	8006ef0 <dir_sdi+0x22>
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	f003 031f 	and.w	r3, r3, #31
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d001      	beq.n	8006ef4 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006ef0:	2302      	movs	r3, #2
 8006ef2:	e063      	b.n	8006fbc <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	683a      	ldr	r2, [r7, #0]
 8006ef8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d106      	bne.n	8006f14 <dir_sdi+0x46>
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d902      	bls.n	8006f14 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f12:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d10c      	bne.n	8006f34 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	095b      	lsrs	r3, r3, #5
 8006f1e:	693a      	ldr	r2, [r7, #16]
 8006f20:	8912      	ldrh	r2, [r2, #8]
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d301      	bcc.n	8006f2a <dir_sdi+0x5c>
 8006f26:	2302      	movs	r3, #2
 8006f28:	e048      	b.n	8006fbc <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	61da      	str	r2, [r3, #28]
 8006f32:	e029      	b.n	8006f88 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	895b      	ldrh	r3, [r3, #10]
 8006f38:	025b      	lsls	r3, r3, #9
 8006f3a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006f3c:	e019      	b.n	8006f72 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6979      	ldr	r1, [r7, #20]
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7ff fd01 	bl	800694a <get_fat>
 8006f48:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f50:	d101      	bne.n	8006f56 <dir_sdi+0x88>
 8006f52:	2301      	movs	r3, #1
 8006f54:	e032      	b.n	8006fbc <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d904      	bls.n	8006f66 <dir_sdi+0x98>
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	699b      	ldr	r3, [r3, #24]
 8006f60:	697a      	ldr	r2, [r7, #20]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d301      	bcc.n	8006f6a <dir_sdi+0x9c>
 8006f66:	2302      	movs	r3, #2
 8006f68:	e028      	b.n	8006fbc <dir_sdi+0xee>
			ofs -= csz;
 8006f6a:	683a      	ldr	r2, [r7, #0]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	1ad3      	subs	r3, r2, r3
 8006f70:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006f72:	683a      	ldr	r2, [r7, #0]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d2e1      	bcs.n	8006f3e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006f7a:	6979      	ldr	r1, [r7, #20]
 8006f7c:	6938      	ldr	r0, [r7, #16]
 8006f7e:	f7ff fcc5 	bl	800690c <clust2sect>
 8006f82:	4602      	mov	r2, r0
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	697a      	ldr	r2, [r7, #20]
 8006f8c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	69db      	ldr	r3, [r3, #28]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d101      	bne.n	8006f9a <dir_sdi+0xcc>
 8006f96:	2302      	movs	r3, #2
 8006f98:	e010      	b.n	8006fbc <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	69da      	ldr	r2, [r3, #28]
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	0a5b      	lsrs	r3, r3, #9
 8006fa2:	441a      	add	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fb4:	441a      	add	r2, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3718      	adds	r7, #24
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b086      	sub	sp, #24
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	695b      	ldr	r3, [r3, #20]
 8006fd8:	3320      	adds	r3, #32
 8006fda:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	69db      	ldr	r3, [r3, #28]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d003      	beq.n	8006fec <dir_next+0x28>
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006fea:	d301      	bcc.n	8006ff0 <dir_next+0x2c>
 8006fec:	2304      	movs	r3, #4
 8006fee:	e0aa      	b.n	8007146 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	f040 8098 	bne.w	800712c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	69db      	ldr	r3, [r3, #28]
 8007000:	1c5a      	adds	r2, r3, #1
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	699b      	ldr	r3, [r3, #24]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d10b      	bne.n	8007026 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	095b      	lsrs	r3, r3, #5
 8007012:	68fa      	ldr	r2, [r7, #12]
 8007014:	8912      	ldrh	r2, [r2, #8]
 8007016:	4293      	cmp	r3, r2
 8007018:	f0c0 8088 	bcc.w	800712c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	61da      	str	r2, [r3, #28]
 8007022:	2304      	movs	r3, #4
 8007024:	e08f      	b.n	8007146 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	0a5b      	lsrs	r3, r3, #9
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	8952      	ldrh	r2, [r2, #10]
 800702e:	3a01      	subs	r2, #1
 8007030:	4013      	ands	r3, r2
 8007032:	2b00      	cmp	r3, #0
 8007034:	d17a      	bne.n	800712c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	699b      	ldr	r3, [r3, #24]
 800703c:	4619      	mov	r1, r3
 800703e:	4610      	mov	r0, r2
 8007040:	f7ff fc83 	bl	800694a <get_fat>
 8007044:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	2b01      	cmp	r3, #1
 800704a:	d801      	bhi.n	8007050 <dir_next+0x8c>
 800704c:	2302      	movs	r3, #2
 800704e:	e07a      	b.n	8007146 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007056:	d101      	bne.n	800705c <dir_next+0x98>
 8007058:	2301      	movs	r3, #1
 800705a:	e074      	b.n	8007146 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	699b      	ldr	r3, [r3, #24]
 8007060:	697a      	ldr	r2, [r7, #20]
 8007062:	429a      	cmp	r2, r3
 8007064:	d358      	bcc.n	8007118 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d104      	bne.n	8007076 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	61da      	str	r2, [r3, #28]
 8007072:	2304      	movs	r3, #4
 8007074:	e067      	b.n	8007146 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	4619      	mov	r1, r3
 800707e:	4610      	mov	r0, r2
 8007080:	f7ff fe59 	bl	8006d36 <create_chain>
 8007084:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d101      	bne.n	8007090 <dir_next+0xcc>
 800708c:	2307      	movs	r3, #7
 800708e:	e05a      	b.n	8007146 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	2b01      	cmp	r3, #1
 8007094:	d101      	bne.n	800709a <dir_next+0xd6>
 8007096:	2302      	movs	r3, #2
 8007098:	e055      	b.n	8007146 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a0:	d101      	bne.n	80070a6 <dir_next+0xe2>
 80070a2:	2301      	movs	r3, #1
 80070a4:	e04f      	b.n	8007146 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80070a6:	68f8      	ldr	r0, [r7, #12]
 80070a8:	f7ff fb50 	bl	800674c <sync_window>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d001      	beq.n	80070b6 <dir_next+0xf2>
 80070b2:	2301      	movs	r3, #1
 80070b4:	e047      	b.n	8007146 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	3334      	adds	r3, #52	@ 0x34
 80070ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070be:	2100      	movs	r1, #0
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7ff f97a 	bl	80063ba <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80070c6:	2300      	movs	r3, #0
 80070c8:	613b      	str	r3, [r7, #16]
 80070ca:	6979      	ldr	r1, [r7, #20]
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f7ff fc1d 	bl	800690c <clust2sect>
 80070d2:	4602      	mov	r2, r0
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80070d8:	e012      	b.n	8007100 <dir_next+0x13c>
						fs->wflag = 1;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2201      	movs	r2, #1
 80070de:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80070e0:	68f8      	ldr	r0, [r7, #12]
 80070e2:	f7ff fb33 	bl	800674c <sync_window>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d001      	beq.n	80070f0 <dir_next+0x12c>
 80070ec:	2301      	movs	r3, #1
 80070ee:	e02a      	b.n	8007146 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	3301      	adds	r3, #1
 80070f4:	613b      	str	r3, [r7, #16]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070fa:	1c5a      	adds	r2, r3, #1
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	895b      	ldrh	r3, [r3, #10]
 8007104:	461a      	mov	r2, r3
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	4293      	cmp	r3, r2
 800710a:	d3e6      	bcc.n	80070da <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	1ad2      	subs	r2, r2, r3
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	697a      	ldr	r2, [r7, #20]
 800711c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800711e:	6979      	ldr	r1, [r7, #20]
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f7ff fbf3 	bl	800690c <clust2sect>
 8007126:	4602      	mov	r2, r0
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	68ba      	ldr	r2, [r7, #8]
 8007130:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800713e:	441a      	add	r2, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	3718      	adds	r7, #24
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}

0800714e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b086      	sub	sp, #24
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
 8007156:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800715e:	2100      	movs	r1, #0
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f7ff feb4 	bl	8006ece <dir_sdi>
 8007166:	4603      	mov	r3, r0
 8007168:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800716a:	7dfb      	ldrb	r3, [r7, #23]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d12b      	bne.n	80071c8 <dir_alloc+0x7a>
		n = 0;
 8007170:	2300      	movs	r3, #0
 8007172:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	69db      	ldr	r3, [r3, #28]
 8007178:	4619      	mov	r1, r3
 800717a:	68f8      	ldr	r0, [r7, #12]
 800717c:	f7ff fb2a 	bl	80067d4 <move_window>
 8007180:	4603      	mov	r3, r0
 8007182:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007184:	7dfb      	ldrb	r3, [r7, #23]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d11d      	bne.n	80071c6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a1b      	ldr	r3, [r3, #32]
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	2be5      	cmp	r3, #229	@ 0xe5
 8007192:	d004      	beq.n	800719e <dir_alloc+0x50>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6a1b      	ldr	r3, [r3, #32]
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d107      	bne.n	80071ae <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	3301      	adds	r3, #1
 80071a2:	613b      	str	r3, [r7, #16]
 80071a4:	693a      	ldr	r2, [r7, #16]
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d102      	bne.n	80071b2 <dir_alloc+0x64>
 80071ac:	e00c      	b.n	80071c8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80071ae:	2300      	movs	r3, #0
 80071b0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80071b2:	2101      	movs	r1, #1
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f7ff ff05 	bl	8006fc4 <dir_next>
 80071ba:	4603      	mov	r3, r0
 80071bc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80071be:	7dfb      	ldrb	r3, [r7, #23]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d0d7      	beq.n	8007174 <dir_alloc+0x26>
 80071c4:	e000      	b.n	80071c8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80071c6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80071c8:	7dfb      	ldrb	r3, [r7, #23]
 80071ca:	2b04      	cmp	r3, #4
 80071cc:	d101      	bne.n	80071d2 <dir_alloc+0x84>
 80071ce:	2307      	movs	r3, #7
 80071d0:	75fb      	strb	r3, [r7, #23]
	return res;
 80071d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3718      	adds	r7, #24
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	331a      	adds	r3, #26
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7ff f842 	bl	8006274 <ld_word>
 80071f0:	4603      	mov	r3, r0
 80071f2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	2b03      	cmp	r3, #3
 80071fa:	d109      	bne.n	8007210 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	3314      	adds	r3, #20
 8007200:	4618      	mov	r0, r3
 8007202:	f7ff f837 	bl	8006274 <ld_word>
 8007206:	4603      	mov	r3, r0
 8007208:	041b      	lsls	r3, r3, #16
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	4313      	orrs	r3, r2
 800720e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007210:	68fb      	ldr	r3, [r7, #12]
}
 8007212:	4618      	mov	r0, r3
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b084      	sub	sp, #16
 800721e:	af00      	add	r7, sp, #0
 8007220:	60f8      	str	r0, [r7, #12]
 8007222:	60b9      	str	r1, [r7, #8]
 8007224:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	331a      	adds	r3, #26
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	b292      	uxth	r2, r2
 800722e:	4611      	mov	r1, r2
 8007230:	4618      	mov	r0, r3
 8007232:	f7ff f85a 	bl	80062ea <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	2b03      	cmp	r3, #3
 800723c:	d109      	bne.n	8007252 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	f103 0214 	add.w	r2, r3, #20
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	0c1b      	lsrs	r3, r3, #16
 8007248:	b29b      	uxth	r3, r3
 800724a:	4619      	mov	r1, r3
 800724c:	4610      	mov	r0, r2
 800724e:	f7ff f84c 	bl	80062ea <st_word>
	}
}
 8007252:	bf00      	nop
 8007254:	3710      	adds	r7, #16
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
	...

0800725c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800725c:	b590      	push	{r4, r7, lr}
 800725e:	b087      	sub	sp, #28
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	331a      	adds	r3, #26
 800726a:	4618      	mov	r0, r3
 800726c:	f7ff f802 	bl	8006274 <ld_word>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d001      	beq.n	800727a <cmp_lfn+0x1e>
 8007276:	2300      	movs	r3, #0
 8007278:	e059      	b.n	800732e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007282:	1e5a      	subs	r2, r3, #1
 8007284:	4613      	mov	r3, r2
 8007286:	005b      	lsls	r3, r3, #1
 8007288:	4413      	add	r3, r2
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	4413      	add	r3, r2
 800728e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007290:	2301      	movs	r3, #1
 8007292:	81fb      	strh	r3, [r7, #14]
 8007294:	2300      	movs	r3, #0
 8007296:	613b      	str	r3, [r7, #16]
 8007298:	e033      	b.n	8007302 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800729a:	4a27      	ldr	r2, [pc, #156]	@ (8007338 <cmp_lfn+0xdc>)
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	4413      	add	r3, r2
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	461a      	mov	r2, r3
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	4413      	add	r3, r2
 80072a8:	4618      	mov	r0, r3
 80072aa:	f7fe ffe3 	bl	8006274 <ld_word>
 80072ae:	4603      	mov	r3, r0
 80072b0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80072b2:	89fb      	ldrh	r3, [r7, #14]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d01a      	beq.n	80072ee <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	2bfe      	cmp	r3, #254	@ 0xfe
 80072bc:	d812      	bhi.n	80072e4 <cmp_lfn+0x88>
 80072be:	89bb      	ldrh	r3, [r7, #12]
 80072c0:	4618      	mov	r0, r3
 80072c2:	f001 fe55 	bl	8008f70 <ff_wtoupper>
 80072c6:	4603      	mov	r3, r0
 80072c8:	461c      	mov	r4, r3
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	1c5a      	adds	r2, r3, #1
 80072ce:	617a      	str	r2, [r7, #20]
 80072d0:	005b      	lsls	r3, r3, #1
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	4413      	add	r3, r2
 80072d6:	881b      	ldrh	r3, [r3, #0]
 80072d8:	4618      	mov	r0, r3
 80072da:	f001 fe49 	bl	8008f70 <ff_wtoupper>
 80072de:	4603      	mov	r3, r0
 80072e0:	429c      	cmp	r4, r3
 80072e2:	d001      	beq.n	80072e8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80072e4:	2300      	movs	r3, #0
 80072e6:	e022      	b.n	800732e <cmp_lfn+0xd2>
			}
			wc = uc;
 80072e8:	89bb      	ldrh	r3, [r7, #12]
 80072ea:	81fb      	strh	r3, [r7, #14]
 80072ec:	e006      	b.n	80072fc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80072ee:	89bb      	ldrh	r3, [r7, #12]
 80072f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d001      	beq.n	80072fc <cmp_lfn+0xa0>
 80072f8:	2300      	movs	r3, #0
 80072fa:	e018      	b.n	800732e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	3301      	adds	r3, #1
 8007300:	613b      	str	r3, [r7, #16]
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	2b0c      	cmp	r3, #12
 8007306:	d9c8      	bls.n	800729a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007310:	2b00      	cmp	r3, #0
 8007312:	d00b      	beq.n	800732c <cmp_lfn+0xd0>
 8007314:	89fb      	ldrh	r3, [r7, #14]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d008      	beq.n	800732c <cmp_lfn+0xd0>
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	005b      	lsls	r3, r3, #1
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	4413      	add	r3, r2
 8007322:	881b      	ldrh	r3, [r3, #0]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d001      	beq.n	800732c <cmp_lfn+0xd0>
 8007328:	2300      	movs	r3, #0
 800732a:	e000      	b.n	800732e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800732c:	2301      	movs	r3, #1
}
 800732e:	4618      	mov	r0, r3
 8007330:	371c      	adds	r7, #28
 8007332:	46bd      	mov	sp, r7
 8007334:	bd90      	pop	{r4, r7, pc}
 8007336:	bf00      	nop
 8007338:	08009474 	.word	0x08009474

0800733c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b088      	sub	sp, #32
 8007340:	af00      	add	r7, sp, #0
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	4611      	mov	r1, r2
 8007348:	461a      	mov	r2, r3
 800734a:	460b      	mov	r3, r1
 800734c:	71fb      	strb	r3, [r7, #7]
 800734e:	4613      	mov	r3, r2
 8007350:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	330d      	adds	r3, #13
 8007356:	79ba      	ldrb	r2, [r7, #6]
 8007358:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	330b      	adds	r3, #11
 800735e:	220f      	movs	r2, #15
 8007360:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	330c      	adds	r3, #12
 8007366:	2200      	movs	r2, #0
 8007368:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	331a      	adds	r3, #26
 800736e:	2100      	movs	r1, #0
 8007370:	4618      	mov	r0, r3
 8007372:	f7fe ffba 	bl	80062ea <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8007376:	79fb      	ldrb	r3, [r7, #7]
 8007378:	1e5a      	subs	r2, r3, #1
 800737a:	4613      	mov	r3, r2
 800737c:	005b      	lsls	r3, r3, #1
 800737e:	4413      	add	r3, r2
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	4413      	add	r3, r2
 8007384:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8007386:	2300      	movs	r3, #0
 8007388:	82fb      	strh	r3, [r7, #22]
 800738a:	2300      	movs	r3, #0
 800738c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800738e:	8afb      	ldrh	r3, [r7, #22]
 8007390:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007394:	4293      	cmp	r3, r2
 8007396:	d007      	beq.n	80073a8 <put_lfn+0x6c>
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	1c5a      	adds	r2, r3, #1
 800739c:	61fa      	str	r2, [r7, #28]
 800739e:	005b      	lsls	r3, r3, #1
 80073a0:	68fa      	ldr	r2, [r7, #12]
 80073a2:	4413      	add	r3, r2
 80073a4:	881b      	ldrh	r3, [r3, #0]
 80073a6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80073a8:	4a17      	ldr	r2, [pc, #92]	@ (8007408 <put_lfn+0xcc>)
 80073aa:	69bb      	ldr	r3, [r7, #24]
 80073ac:	4413      	add	r3, r2
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	461a      	mov	r2, r3
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	4413      	add	r3, r2
 80073b6:	8afa      	ldrh	r2, [r7, #22]
 80073b8:	4611      	mov	r1, r2
 80073ba:	4618      	mov	r0, r3
 80073bc:	f7fe ff95 	bl	80062ea <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80073c0:	8afb      	ldrh	r3, [r7, #22]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d102      	bne.n	80073cc <put_lfn+0x90>
 80073c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80073ca:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	3301      	adds	r3, #1
 80073d0:	61bb      	str	r3, [r7, #24]
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	2b0c      	cmp	r3, #12
 80073d6:	d9da      	bls.n	800738e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80073d8:	8afb      	ldrh	r3, [r7, #22]
 80073da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80073de:	4293      	cmp	r3, r2
 80073e0:	d006      	beq.n	80073f0 <put_lfn+0xb4>
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	005b      	lsls	r3, r3, #1
 80073e6:	68fa      	ldr	r2, [r7, #12]
 80073e8:	4413      	add	r3, r2
 80073ea:	881b      	ldrh	r3, [r3, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d103      	bne.n	80073f8 <put_lfn+0xbc>
 80073f0:	79fb      	ldrb	r3, [r7, #7]
 80073f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073f6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	79fa      	ldrb	r2, [r7, #7]
 80073fc:	701a      	strb	r2, [r3, #0]
}
 80073fe:	bf00      	nop
 8007400:	3720      	adds	r7, #32
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	08009474 	.word	0x08009474

0800740c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b08c      	sub	sp, #48	@ 0x30
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	607a      	str	r2, [r7, #4]
 8007418:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800741a:	220b      	movs	r2, #11
 800741c:	68b9      	ldr	r1, [r7, #8]
 800741e:	68f8      	ldr	r0, [r7, #12]
 8007420:	f7fe ffaa 	bl	8006378 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	2b05      	cmp	r3, #5
 8007428:	d929      	bls.n	800747e <gen_numname+0x72>
		sr = seq;
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800742e:	e020      	b.n	8007472 <gen_numname+0x66>
			wc = *lfn++;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	1c9a      	adds	r2, r3, #2
 8007434:	607a      	str	r2, [r7, #4]
 8007436:	881b      	ldrh	r3, [r3, #0]
 8007438:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800743a:	2300      	movs	r3, #0
 800743c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800743e:	e015      	b.n	800746c <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	005a      	lsls	r2, r3, #1
 8007444:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007446:	f003 0301 	and.w	r3, r3, #1
 800744a:	4413      	add	r3, r2
 800744c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800744e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007450:	085b      	lsrs	r3, r3, #1
 8007452:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800745a:	2b00      	cmp	r3, #0
 800745c:	d003      	beq.n	8007466 <gen_numname+0x5a>
 800745e:	69fa      	ldr	r2, [r7, #28]
 8007460:	4b30      	ldr	r3, [pc, #192]	@ (8007524 <gen_numname+0x118>)
 8007462:	4053      	eors	r3, r2
 8007464:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8007466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007468:	3301      	adds	r3, #1
 800746a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800746c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800746e:	2b0f      	cmp	r3, #15
 8007470:	d9e6      	bls.n	8007440 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	881b      	ldrh	r3, [r3, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d1da      	bne.n	8007430 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800747e:	2307      	movs	r3, #7
 8007480:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	b2db      	uxtb	r3, r3
 8007486:	f003 030f 	and.w	r3, r3, #15
 800748a:	b2db      	uxtb	r3, r3
 800748c:	3330      	adds	r3, #48	@ 0x30
 800748e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8007492:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007496:	2b39      	cmp	r3, #57	@ 0x39
 8007498:	d904      	bls.n	80074a4 <gen_numname+0x98>
 800749a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800749e:	3307      	adds	r3, #7
 80074a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80074a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a6:	1e5a      	subs	r2, r3, #1
 80074a8:	62ba      	str	r2, [r7, #40]	@ 0x28
 80074aa:	3330      	adds	r3, #48	@ 0x30
 80074ac:	443b      	add	r3, r7
 80074ae:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80074b2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	091b      	lsrs	r3, r3, #4
 80074ba:	603b      	str	r3, [r7, #0]
	} while (seq);
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1df      	bne.n	8007482 <gen_numname+0x76>
	ns[i] = '~';
 80074c2:	f107 0214 	add.w	r2, r7, #20
 80074c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074c8:	4413      	add	r3, r2
 80074ca:	227e      	movs	r2, #126	@ 0x7e
 80074cc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80074ce:	2300      	movs	r3, #0
 80074d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80074d2:	e002      	b.n	80074da <gen_numname+0xce>
 80074d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d6:	3301      	adds	r3, #1
 80074d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80074da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074de:	429a      	cmp	r2, r3
 80074e0:	d205      	bcs.n	80074ee <gen_numname+0xe2>
 80074e2:	68fa      	ldr	r2, [r7, #12]
 80074e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e6:	4413      	add	r3, r2
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	2b20      	cmp	r3, #32
 80074ec:	d1f2      	bne.n	80074d4 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80074ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074f0:	2b07      	cmp	r3, #7
 80074f2:	d807      	bhi.n	8007504 <gen_numname+0xf8>
 80074f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074f6:	1c5a      	adds	r2, r3, #1
 80074f8:	62ba      	str	r2, [r7, #40]	@ 0x28
 80074fa:	3330      	adds	r3, #48	@ 0x30
 80074fc:	443b      	add	r3, r7
 80074fe:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8007502:	e000      	b.n	8007506 <gen_numname+0xfa>
 8007504:	2120      	movs	r1, #32
 8007506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007508:	1c5a      	adds	r2, r3, #1
 800750a:	627a      	str	r2, [r7, #36]	@ 0x24
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	4413      	add	r3, r2
 8007510:	460a      	mov	r2, r1
 8007512:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007516:	2b07      	cmp	r3, #7
 8007518:	d9e9      	bls.n	80074ee <gen_numname+0xe2>
}
 800751a:	bf00      	nop
 800751c:	bf00      	nop
 800751e:	3730      	adds	r7, #48	@ 0x30
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}
 8007524:	00011021 	.word	0x00011021

08007528 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007530:	2300      	movs	r3, #0
 8007532:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8007534:	230b      	movs	r3, #11
 8007536:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007538:	7bfb      	ldrb	r3, [r7, #15]
 800753a:	b2da      	uxtb	r2, r3
 800753c:	0852      	lsrs	r2, r2, #1
 800753e:	01db      	lsls	r3, r3, #7
 8007540:	4313      	orrs	r3, r2
 8007542:	b2da      	uxtb	r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	1c59      	adds	r1, r3, #1
 8007548:	6079      	str	r1, [r7, #4]
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	4413      	add	r3, r2
 800754e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	3b01      	subs	r3, #1
 8007554:	60bb      	str	r3, [r7, #8]
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d1ed      	bne.n	8007538 <sum_sfn+0x10>
	return sum;
 800755c:	7bfb      	ldrb	r3, [r7, #15]
}
 800755e:	4618      	mov	r0, r3
 8007560:	3714      	adds	r7, #20
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr

0800756a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800756a:	b580      	push	{r7, lr}
 800756c:	b086      	sub	sp, #24
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007578:	2100      	movs	r1, #0
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f7ff fca7 	bl	8006ece <dir_sdi>
 8007580:	4603      	mov	r3, r0
 8007582:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007584:	7dfb      	ldrb	r3, [r7, #23]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d001      	beq.n	800758e <dir_find+0x24>
 800758a:	7dfb      	ldrb	r3, [r7, #23]
 800758c:	e0a9      	b.n	80076e2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800758e:	23ff      	movs	r3, #255	@ 0xff
 8007590:	753b      	strb	r3, [r7, #20]
 8007592:	7d3b      	ldrb	r3, [r7, #20]
 8007594:	757b      	strb	r3, [r7, #21]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f04f 32ff 	mov.w	r2, #4294967295
 800759c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	69db      	ldr	r3, [r3, #28]
 80075a2:	4619      	mov	r1, r3
 80075a4:	6938      	ldr	r0, [r7, #16]
 80075a6:	f7ff f915 	bl	80067d4 <move_window>
 80075aa:	4603      	mov	r3, r0
 80075ac:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80075ae:	7dfb      	ldrb	r3, [r7, #23]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	f040 8090 	bne.w	80076d6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a1b      	ldr	r3, [r3, #32]
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80075be:	7dbb      	ldrb	r3, [r7, #22]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d102      	bne.n	80075ca <dir_find+0x60>
 80075c4:	2304      	movs	r3, #4
 80075c6:	75fb      	strb	r3, [r7, #23]
 80075c8:	e08a      	b.n	80076e0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a1b      	ldr	r3, [r3, #32]
 80075ce:	330b      	adds	r3, #11
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80075d6:	73fb      	strb	r3, [r7, #15]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	7bfa      	ldrb	r2, [r7, #15]
 80075dc:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80075de:	7dbb      	ldrb	r3, [r7, #22]
 80075e0:	2be5      	cmp	r3, #229	@ 0xe5
 80075e2:	d007      	beq.n	80075f4 <dir_find+0x8a>
 80075e4:	7bfb      	ldrb	r3, [r7, #15]
 80075e6:	f003 0308 	and.w	r3, r3, #8
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d009      	beq.n	8007602 <dir_find+0x98>
 80075ee:	7bfb      	ldrb	r3, [r7, #15]
 80075f0:	2b0f      	cmp	r3, #15
 80075f2:	d006      	beq.n	8007602 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80075f4:	23ff      	movs	r3, #255	@ 0xff
 80075f6:	757b      	strb	r3, [r7, #21]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f04f 32ff 	mov.w	r2, #4294967295
 80075fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8007600:	e05e      	b.n	80076c0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8007602:	7bfb      	ldrb	r3, [r7, #15]
 8007604:	2b0f      	cmp	r3, #15
 8007606:	d136      	bne.n	8007676 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800760e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007612:	2b00      	cmp	r3, #0
 8007614:	d154      	bne.n	80076c0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8007616:	7dbb      	ldrb	r3, [r7, #22]
 8007618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00d      	beq.n	800763c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6a1b      	ldr	r3, [r3, #32]
 8007624:	7b5b      	ldrb	r3, [r3, #13]
 8007626:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8007628:	7dbb      	ldrb	r3, [r7, #22]
 800762a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800762e:	75bb      	strb	r3, [r7, #22]
 8007630:	7dbb      	ldrb	r3, [r7, #22]
 8007632:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	695a      	ldr	r2, [r3, #20]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800763c:	7dba      	ldrb	r2, [r7, #22]
 800763e:	7d7b      	ldrb	r3, [r7, #21]
 8007640:	429a      	cmp	r2, r3
 8007642:	d115      	bne.n	8007670 <dir_find+0x106>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6a1b      	ldr	r3, [r3, #32]
 8007648:	330d      	adds	r3, #13
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	7d3a      	ldrb	r2, [r7, #20]
 800764e:	429a      	cmp	r2, r3
 8007650:	d10e      	bne.n	8007670 <dir_find+0x106>
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	68da      	ldr	r2, [r3, #12]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a1b      	ldr	r3, [r3, #32]
 800765a:	4619      	mov	r1, r3
 800765c:	4610      	mov	r0, r2
 800765e:	f7ff fdfd 	bl	800725c <cmp_lfn>
 8007662:	4603      	mov	r3, r0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d003      	beq.n	8007670 <dir_find+0x106>
 8007668:	7d7b      	ldrb	r3, [r7, #21]
 800766a:	3b01      	subs	r3, #1
 800766c:	b2db      	uxtb	r3, r3
 800766e:	e000      	b.n	8007672 <dir_find+0x108>
 8007670:	23ff      	movs	r3, #255	@ 0xff
 8007672:	757b      	strb	r3, [r7, #21]
 8007674:	e024      	b.n	80076c0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007676:	7d7b      	ldrb	r3, [r7, #21]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d109      	bne.n	8007690 <dir_find+0x126>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6a1b      	ldr	r3, [r3, #32]
 8007680:	4618      	mov	r0, r3
 8007682:	f7ff ff51 	bl	8007528 <sum_sfn>
 8007686:	4603      	mov	r3, r0
 8007688:	461a      	mov	r2, r3
 800768a:	7d3b      	ldrb	r3, [r7, #20]
 800768c:	4293      	cmp	r3, r2
 800768e:	d024      	beq.n	80076da <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007696:	f003 0301 	and.w	r3, r3, #1
 800769a:	2b00      	cmp	r3, #0
 800769c:	d10a      	bne.n	80076b4 <dir_find+0x14a>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a18      	ldr	r0, [r3, #32]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	3324      	adds	r3, #36	@ 0x24
 80076a6:	220b      	movs	r2, #11
 80076a8:	4619      	mov	r1, r3
 80076aa:	f7fe fea1 	bl	80063f0 <mem_cmp>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d014      	beq.n	80076de <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80076b4:	23ff      	movs	r3, #255	@ 0xff
 80076b6:	757b      	strb	r3, [r7, #21]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f04f 32ff 	mov.w	r2, #4294967295
 80076be:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80076c0:	2100      	movs	r1, #0
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f7ff fc7e 	bl	8006fc4 <dir_next>
 80076c8:	4603      	mov	r3, r0
 80076ca:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80076cc:	7dfb      	ldrb	r3, [r7, #23]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f43f af65 	beq.w	800759e <dir_find+0x34>
 80076d4:	e004      	b.n	80076e0 <dir_find+0x176>
		if (res != FR_OK) break;
 80076d6:	bf00      	nop
 80076d8:	e002      	b.n	80076e0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80076da:	bf00      	nop
 80076dc:	e000      	b.n	80076e0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80076de:	bf00      	nop

	return res;
 80076e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3718      	adds	r7, #24
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
	...

080076ec <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b08c      	sub	sp, #48	@ 0x30
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007700:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d001      	beq.n	800770c <dir_register+0x20>
 8007708:	2306      	movs	r3, #6
 800770a:	e0e0      	b.n	80078ce <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800770c:	2300      	movs	r3, #0
 800770e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007710:	e002      	b.n	8007718 <dir_register+0x2c>
 8007712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007714:	3301      	adds	r3, #1
 8007716:	627b      	str	r3, [r7, #36]	@ 0x24
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	68da      	ldr	r2, [r3, #12]
 800771c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800771e:	005b      	lsls	r3, r3, #1
 8007720:	4413      	add	r3, r2
 8007722:	881b      	ldrh	r3, [r3, #0]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d1f4      	bne.n	8007712 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800772e:	f107 030c 	add.w	r3, r7, #12
 8007732:	220c      	movs	r2, #12
 8007734:	4618      	mov	r0, r3
 8007736:	f7fe fe1f 	bl	8006378 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800773a:	7dfb      	ldrb	r3, [r7, #23]
 800773c:	f003 0301 	and.w	r3, r3, #1
 8007740:	2b00      	cmp	r3, #0
 8007742:	d032      	beq.n	80077aa <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2240      	movs	r2, #64	@ 0x40
 8007748:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800774c:	2301      	movs	r3, #1
 800774e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007750:	e016      	b.n	8007780 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	68da      	ldr	r2, [r3, #12]
 800775c:	f107 010c 	add.w	r1, r7, #12
 8007760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007762:	f7ff fe53 	bl	800740c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f7ff feff 	bl	800756a <dir_find>
 800776c:	4603      	mov	r3, r0
 800776e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8007772:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007776:	2b00      	cmp	r3, #0
 8007778:	d106      	bne.n	8007788 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800777a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800777c:	3301      	adds	r3, #1
 800777e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007782:	2b63      	cmp	r3, #99	@ 0x63
 8007784:	d9e5      	bls.n	8007752 <dir_register+0x66>
 8007786:	e000      	b.n	800778a <dir_register+0x9e>
			if (res != FR_OK) break;
 8007788:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800778a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800778c:	2b64      	cmp	r3, #100	@ 0x64
 800778e:	d101      	bne.n	8007794 <dir_register+0xa8>
 8007790:	2307      	movs	r3, #7
 8007792:	e09c      	b.n	80078ce <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007794:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007798:	2b04      	cmp	r3, #4
 800779a:	d002      	beq.n	80077a2 <dir_register+0xb6>
 800779c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80077a0:	e095      	b.n	80078ce <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80077a2:	7dfa      	ldrb	r2, [r7, #23]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80077aa:	7dfb      	ldrb	r3, [r7, #23]
 80077ac:	f003 0302 	and.w	r3, r3, #2
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d007      	beq.n	80077c4 <dir_register+0xd8>
 80077b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b6:	330c      	adds	r3, #12
 80077b8:	4a47      	ldr	r2, [pc, #284]	@ (80078d8 <dir_register+0x1ec>)
 80077ba:	fba2 2303 	umull	r2, r3, r2, r3
 80077be:	089b      	lsrs	r3, r3, #2
 80077c0:	3301      	adds	r3, #1
 80077c2:	e000      	b.n	80077c6 <dir_register+0xda>
 80077c4:	2301      	movs	r3, #1
 80077c6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80077c8:	6a39      	ldr	r1, [r7, #32]
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f7ff fcbf 	bl	800714e <dir_alloc>
 80077d0:	4603      	mov	r3, r0
 80077d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80077d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d148      	bne.n	8007870 <dir_register+0x184>
 80077de:	6a3b      	ldr	r3, [r7, #32]
 80077e0:	3b01      	subs	r3, #1
 80077e2:	623b      	str	r3, [r7, #32]
 80077e4:	6a3b      	ldr	r3, [r7, #32]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d042      	beq.n	8007870 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	695a      	ldr	r2, [r3, #20]
 80077ee:	6a3b      	ldr	r3, [r7, #32]
 80077f0:	015b      	lsls	r3, r3, #5
 80077f2:	1ad3      	subs	r3, r2, r3
 80077f4:	4619      	mov	r1, r3
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f7ff fb69 	bl	8006ece <dir_sdi>
 80077fc:	4603      	mov	r3, r0
 80077fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8007802:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007806:	2b00      	cmp	r3, #0
 8007808:	d132      	bne.n	8007870 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	3324      	adds	r3, #36	@ 0x24
 800780e:	4618      	mov	r0, r3
 8007810:	f7ff fe8a 	bl	8007528 <sum_sfn>
 8007814:	4603      	mov	r3, r0
 8007816:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	69db      	ldr	r3, [r3, #28]
 800781c:	4619      	mov	r1, r3
 800781e:	69f8      	ldr	r0, [r7, #28]
 8007820:	f7fe ffd8 	bl	80067d4 <move_window>
 8007824:	4603      	mov	r3, r0
 8007826:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800782a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800782e:	2b00      	cmp	r3, #0
 8007830:	d11d      	bne.n	800786e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	68d8      	ldr	r0, [r3, #12]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a19      	ldr	r1, [r3, #32]
 800783a:	6a3b      	ldr	r3, [r7, #32]
 800783c:	b2da      	uxtb	r2, r3
 800783e:	7efb      	ldrb	r3, [r7, #27]
 8007840:	f7ff fd7c 	bl	800733c <put_lfn>
				fs->wflag = 1;
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	2201      	movs	r2, #1
 8007848:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800784a:	2100      	movs	r1, #0
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f7ff fbb9 	bl	8006fc4 <dir_next>
 8007852:	4603      	mov	r3, r0
 8007854:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8007858:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800785c:	2b00      	cmp	r3, #0
 800785e:	d107      	bne.n	8007870 <dir_register+0x184>
 8007860:	6a3b      	ldr	r3, [r7, #32]
 8007862:	3b01      	subs	r3, #1
 8007864:	623b      	str	r3, [r7, #32]
 8007866:	6a3b      	ldr	r3, [r7, #32]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1d5      	bne.n	8007818 <dir_register+0x12c>
 800786c:	e000      	b.n	8007870 <dir_register+0x184>
				if (res != FR_OK) break;
 800786e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007870:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007874:	2b00      	cmp	r3, #0
 8007876:	d128      	bne.n	80078ca <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	69db      	ldr	r3, [r3, #28]
 800787c:	4619      	mov	r1, r3
 800787e:	69f8      	ldr	r0, [r7, #28]
 8007880:	f7fe ffa8 	bl	80067d4 <move_window>
 8007884:	4603      	mov	r3, r0
 8007886:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800788a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800788e:	2b00      	cmp	r3, #0
 8007890:	d11b      	bne.n	80078ca <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a1b      	ldr	r3, [r3, #32]
 8007896:	2220      	movs	r2, #32
 8007898:	2100      	movs	r1, #0
 800789a:	4618      	mov	r0, r3
 800789c:	f7fe fd8d 	bl	80063ba <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6a18      	ldr	r0, [r3, #32]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	3324      	adds	r3, #36	@ 0x24
 80078a8:	220b      	movs	r2, #11
 80078aa:	4619      	mov	r1, r3
 80078ac:	f7fe fd64 	bl	8006378 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6a1b      	ldr	r3, [r3, #32]
 80078ba:	330c      	adds	r3, #12
 80078bc:	f002 0218 	and.w	r2, r2, #24
 80078c0:	b2d2      	uxtb	r2, r2
 80078c2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	2201      	movs	r2, #1
 80078c8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80078ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3730      	adds	r7, #48	@ 0x30
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	4ec4ec4f 	.word	0x4ec4ec4f

080078dc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b08a      	sub	sp, #40	@ 0x28
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	613b      	str	r3, [r7, #16]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	60fb      	str	r3, [r7, #12]
 80078f4:	2300      	movs	r3, #0
 80078f6:	617b      	str	r3, [r7, #20]
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	1c5a      	adds	r2, r3, #1
 8007900:	61ba      	str	r2, [r7, #24]
 8007902:	693a      	ldr	r2, [r7, #16]
 8007904:	4413      	add	r3, r2
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800790a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800790c:	2b1f      	cmp	r3, #31
 800790e:	d940      	bls.n	8007992 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007910:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007912:	2b2f      	cmp	r3, #47	@ 0x2f
 8007914:	d006      	beq.n	8007924 <create_name+0x48>
 8007916:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007918:	2b5c      	cmp	r3, #92	@ 0x5c
 800791a:	d110      	bne.n	800793e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800791c:	e002      	b.n	8007924 <create_name+0x48>
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	3301      	adds	r3, #1
 8007922:	61bb      	str	r3, [r7, #24]
 8007924:	693a      	ldr	r2, [r7, #16]
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	4413      	add	r3, r2
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	2b2f      	cmp	r3, #47	@ 0x2f
 800792e:	d0f6      	beq.n	800791e <create_name+0x42>
 8007930:	693a      	ldr	r2, [r7, #16]
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	4413      	add	r3, r2
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	2b5c      	cmp	r3, #92	@ 0x5c
 800793a:	d0f0      	beq.n	800791e <create_name+0x42>
			break;
 800793c:	e02a      	b.n	8007994 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	2bfe      	cmp	r3, #254	@ 0xfe
 8007942:	d901      	bls.n	8007948 <create_name+0x6c>
 8007944:	2306      	movs	r3, #6
 8007946:	e17d      	b.n	8007c44 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007948:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800794a:	b2db      	uxtb	r3, r3
 800794c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800794e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007950:	2101      	movs	r1, #1
 8007952:	4618      	mov	r0, r3
 8007954:	f001 fad0 	bl	8008ef8 <ff_convert>
 8007958:	4603      	mov	r3, r0
 800795a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800795c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800795e:	2b00      	cmp	r3, #0
 8007960:	d101      	bne.n	8007966 <create_name+0x8a>
 8007962:	2306      	movs	r3, #6
 8007964:	e16e      	b.n	8007c44 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007966:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007968:	2b7f      	cmp	r3, #127	@ 0x7f
 800796a:	d809      	bhi.n	8007980 <create_name+0xa4>
 800796c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800796e:	4619      	mov	r1, r3
 8007970:	488d      	ldr	r0, [pc, #564]	@ (8007ba8 <create_name+0x2cc>)
 8007972:	f7fe fd64 	bl	800643e <chk_chr>
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d001      	beq.n	8007980 <create_name+0xa4>
 800797c:	2306      	movs	r3, #6
 800797e:	e161      	b.n	8007c44 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	1c5a      	adds	r2, r3, #1
 8007984:	617a      	str	r2, [r7, #20]
 8007986:	005b      	lsls	r3, r3, #1
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	4413      	add	r3, r2
 800798c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800798e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007990:	e7b4      	b.n	80078fc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8007992:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007994:	693a      	ldr	r2, [r7, #16]
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	441a      	add	r2, r3
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800799e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80079a0:	2b1f      	cmp	r3, #31
 80079a2:	d801      	bhi.n	80079a8 <create_name+0xcc>
 80079a4:	2304      	movs	r3, #4
 80079a6:	e000      	b.n	80079aa <create_name+0xce>
 80079a8:	2300      	movs	r3, #0
 80079aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80079ae:	e011      	b.n	80079d4 <create_name+0xf8>
		w = lfn[di - 1];
 80079b0:	697a      	ldr	r2, [r7, #20]
 80079b2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80079b6:	4413      	add	r3, r2
 80079b8:	005b      	lsls	r3, r3, #1
 80079ba:	68fa      	ldr	r2, [r7, #12]
 80079bc:	4413      	add	r3, r2
 80079be:	881b      	ldrh	r3, [r3, #0]
 80079c0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80079c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80079c4:	2b20      	cmp	r3, #32
 80079c6:	d002      	beq.n	80079ce <create_name+0xf2>
 80079c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80079ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80079cc:	d106      	bne.n	80079dc <create_name+0x100>
		di--;
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	3b01      	subs	r3, #1
 80079d2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d1ea      	bne.n	80079b0 <create_name+0xd4>
 80079da:	e000      	b.n	80079de <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80079dc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	005b      	lsls	r3, r3, #1
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	4413      	add	r3, r2
 80079e6:	2200      	movs	r2, #0
 80079e8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d101      	bne.n	80079f4 <create_name+0x118>
 80079f0:	2306      	movs	r3, #6
 80079f2:	e127      	b.n	8007c44 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	3324      	adds	r3, #36	@ 0x24
 80079f8:	220b      	movs	r2, #11
 80079fa:	2120      	movs	r1, #32
 80079fc:	4618      	mov	r0, r3
 80079fe:	f7fe fcdc 	bl	80063ba <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007a02:	2300      	movs	r3, #0
 8007a04:	61bb      	str	r3, [r7, #24]
 8007a06:	e002      	b.n	8007a0e <create_name+0x132>
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	61bb      	str	r3, [r7, #24]
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	005b      	lsls	r3, r3, #1
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	4413      	add	r3, r2
 8007a16:	881b      	ldrh	r3, [r3, #0]
 8007a18:	2b20      	cmp	r3, #32
 8007a1a:	d0f5      	beq.n	8007a08 <create_name+0x12c>
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	005b      	lsls	r3, r3, #1
 8007a20:	68fa      	ldr	r2, [r7, #12]
 8007a22:	4413      	add	r3, r2
 8007a24:	881b      	ldrh	r3, [r3, #0]
 8007a26:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a28:	d0ee      	beq.n	8007a08 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d009      	beq.n	8007a44 <create_name+0x168>
 8007a30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a34:	f043 0303 	orr.w	r3, r3, #3
 8007a38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007a3c:	e002      	b.n	8007a44 <create_name+0x168>
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	3b01      	subs	r3, #1
 8007a42:	617b      	str	r3, [r7, #20]
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d009      	beq.n	8007a5e <create_name+0x182>
 8007a4a:	697a      	ldr	r2, [r7, #20]
 8007a4c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8007a50:	4413      	add	r3, r2
 8007a52:	005b      	lsls	r3, r3, #1
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	4413      	add	r3, r2
 8007a58:	881b      	ldrh	r3, [r3, #0]
 8007a5a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a5c:	d1ef      	bne.n	8007a3e <create_name+0x162>

	i = b = 0; ni = 8;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007a64:	2300      	movs	r3, #0
 8007a66:	623b      	str	r3, [r7, #32]
 8007a68:	2308      	movs	r3, #8
 8007a6a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	1c5a      	adds	r2, r3, #1
 8007a70:	61ba      	str	r2, [r7, #24]
 8007a72:	005b      	lsls	r3, r3, #1
 8007a74:	68fa      	ldr	r2, [r7, #12]
 8007a76:	4413      	add	r3, r2
 8007a78:	881b      	ldrh	r3, [r3, #0]
 8007a7a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007a7c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	f000 8090 	beq.w	8007ba4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007a84:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007a86:	2b20      	cmp	r3, #32
 8007a88:	d006      	beq.n	8007a98 <create_name+0x1bc>
 8007a8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007a8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a8e:	d10a      	bne.n	8007aa6 <create_name+0x1ca>
 8007a90:	69ba      	ldr	r2, [r7, #24]
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d006      	beq.n	8007aa6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007a98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a9c:	f043 0303 	orr.w	r3, r3, #3
 8007aa0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007aa4:	e07d      	b.n	8007ba2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007aa6:	6a3a      	ldr	r2, [r7, #32]
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d203      	bcs.n	8007ab6 <create_name+0x1da>
 8007aae:	69ba      	ldr	r2, [r7, #24]
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d123      	bne.n	8007afe <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	2b0b      	cmp	r3, #11
 8007aba:	d106      	bne.n	8007aca <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007abc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ac0:	f043 0303 	orr.w	r3, r3, #3
 8007ac4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007ac8:	e075      	b.n	8007bb6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007aca:	69ba      	ldr	r2, [r7, #24]
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d005      	beq.n	8007ade <create_name+0x202>
 8007ad2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ad6:	f043 0303 	orr.w	r3, r3, #3
 8007ada:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8007ade:	69ba      	ldr	r2, [r7, #24]
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d866      	bhi.n	8007bb4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	61bb      	str	r3, [r7, #24]
 8007aea:	2308      	movs	r3, #8
 8007aec:	623b      	str	r3, [r7, #32]
 8007aee:	230b      	movs	r3, #11
 8007af0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007af2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007afc:	e051      	b.n	8007ba2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007afe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b00:	2b7f      	cmp	r3, #127	@ 0x7f
 8007b02:	d914      	bls.n	8007b2e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007b04:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b06:	2100      	movs	r1, #0
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f001 f9f5 	bl	8008ef8 <ff_convert>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007b12:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d004      	beq.n	8007b22 <create_name+0x246>
 8007b18:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b1a:	3b80      	subs	r3, #128	@ 0x80
 8007b1c:	4a23      	ldr	r2, [pc, #140]	@ (8007bac <create_name+0x2d0>)
 8007b1e:	5cd3      	ldrb	r3, [r2, r3]
 8007b20:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007b22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b26:	f043 0302 	orr.w	r3, r3, #2
 8007b2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007b2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d007      	beq.n	8007b44 <create_name+0x268>
 8007b34:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b36:	4619      	mov	r1, r3
 8007b38:	481d      	ldr	r0, [pc, #116]	@ (8007bb0 <create_name+0x2d4>)
 8007b3a:	f7fe fc80 	bl	800643e <chk_chr>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d008      	beq.n	8007b56 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007b44:	235f      	movs	r3, #95	@ 0x5f
 8007b46:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007b48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b4c:	f043 0303 	orr.w	r3, r3, #3
 8007b50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007b54:	e01b      	b.n	8007b8e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007b56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b58:	2b40      	cmp	r3, #64	@ 0x40
 8007b5a:	d909      	bls.n	8007b70 <create_name+0x294>
 8007b5c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b5e:	2b5a      	cmp	r3, #90	@ 0x5a
 8007b60:	d806      	bhi.n	8007b70 <create_name+0x294>
					b |= 2;
 8007b62:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007b66:	f043 0302 	orr.w	r3, r3, #2
 8007b6a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007b6e:	e00e      	b.n	8007b8e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007b70:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b72:	2b60      	cmp	r3, #96	@ 0x60
 8007b74:	d90b      	bls.n	8007b8e <create_name+0x2b2>
 8007b76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b78:	2b7a      	cmp	r3, #122	@ 0x7a
 8007b7a:	d808      	bhi.n	8007b8e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007b7c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007b80:	f043 0301 	orr.w	r3, r3, #1
 8007b84:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007b88:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b8a:	3b20      	subs	r3, #32
 8007b8c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007b8e:	6a3b      	ldr	r3, [r7, #32]
 8007b90:	1c5a      	adds	r2, r3, #1
 8007b92:	623a      	str	r2, [r7, #32]
 8007b94:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007b96:	b2d1      	uxtb	r1, r2
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	460a      	mov	r2, r1
 8007b9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007ba2:	e763      	b.n	8007a6c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007ba4:	bf00      	nop
 8007ba6:	e006      	b.n	8007bb6 <create_name+0x2da>
 8007ba8:	08009380 	.word	0x08009380
 8007bac:	080093f4 	.word	0x080093f4
 8007bb0:	0800938c 	.word	0x0800938c
			if (si > di) break;			/* No extension */
 8007bb4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007bbc:	2be5      	cmp	r3, #229	@ 0xe5
 8007bbe:	d103      	bne.n	8007bc8 <create_name+0x2ec>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2205      	movs	r2, #5
 8007bc4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	2b08      	cmp	r3, #8
 8007bcc:	d104      	bne.n	8007bd8 <create_name+0x2fc>
 8007bce:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007bd8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007bdc:	f003 030c 	and.w	r3, r3, #12
 8007be0:	2b0c      	cmp	r3, #12
 8007be2:	d005      	beq.n	8007bf0 <create_name+0x314>
 8007be4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007be8:	f003 0303 	and.w	r3, r3, #3
 8007bec:	2b03      	cmp	r3, #3
 8007bee:	d105      	bne.n	8007bfc <create_name+0x320>
 8007bf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007bf4:	f043 0302 	orr.w	r3, r3, #2
 8007bf8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007bfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c00:	f003 0302 	and.w	r3, r3, #2
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d117      	bne.n	8007c38 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007c08:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007c0c:	f003 0303 	and.w	r3, r3, #3
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d105      	bne.n	8007c20 <create_name+0x344>
 8007c14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c18:	f043 0310 	orr.w	r3, r3, #16
 8007c1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007c20:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007c24:	f003 030c 	and.w	r3, r3, #12
 8007c28:	2b04      	cmp	r3, #4
 8007c2a:	d105      	bne.n	8007c38 <create_name+0x35c>
 8007c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c30:	f043 0308 	orr.w	r3, r3, #8
 8007c34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007c3e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8007c42:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3728      	adds	r7, #40	@ 0x28
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b086      	sub	sp, #24
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007c60:	e002      	b.n	8007c68 <follow_path+0x1c>
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	3301      	adds	r3, #1
 8007c66:	603b      	str	r3, [r7, #0]
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	2b2f      	cmp	r3, #47	@ 0x2f
 8007c6e:	d0f8      	beq.n	8007c62 <follow_path+0x16>
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	2b5c      	cmp	r3, #92	@ 0x5c
 8007c76:	d0f4      	beq.n	8007c62 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	2b1f      	cmp	r3, #31
 8007c84:	d80a      	bhi.n	8007c9c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2280      	movs	r2, #128	@ 0x80
 8007c8a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8007c8e:	2100      	movs	r1, #0
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f7ff f91c 	bl	8006ece <dir_sdi>
 8007c96:	4603      	mov	r3, r0
 8007c98:	75fb      	strb	r3, [r7, #23]
 8007c9a:	e043      	b.n	8007d24 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007c9c:	463b      	mov	r3, r7
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f7ff fe1b 	bl	80078dc <create_name>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007caa:	7dfb      	ldrb	r3, [r7, #23]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d134      	bne.n	8007d1a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f7ff fc5a 	bl	800756a <dir_find>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007cc0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007cc2:	7dfb      	ldrb	r3, [r7, #23]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d00a      	beq.n	8007cde <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007cc8:	7dfb      	ldrb	r3, [r7, #23]
 8007cca:	2b04      	cmp	r3, #4
 8007ccc:	d127      	bne.n	8007d1e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007cce:	7afb      	ldrb	r3, [r7, #11]
 8007cd0:	f003 0304 	and.w	r3, r3, #4
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d122      	bne.n	8007d1e <follow_path+0xd2>
 8007cd8:	2305      	movs	r3, #5
 8007cda:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007cdc:	e01f      	b.n	8007d1e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007cde:	7afb      	ldrb	r3, [r7, #11]
 8007ce0:	f003 0304 	and.w	r3, r3, #4
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d11c      	bne.n	8007d22 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	799b      	ldrb	r3, [r3, #6]
 8007cec:	f003 0310 	and.w	r3, r3, #16
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d102      	bne.n	8007cfa <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007cf4:	2305      	movs	r3, #5
 8007cf6:	75fb      	strb	r3, [r7, #23]
 8007cf8:	e014      	b.n	8007d24 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	695b      	ldr	r3, [r3, #20]
 8007d04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d08:	4413      	add	r3, r2
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	68f8      	ldr	r0, [r7, #12]
 8007d0e:	f7ff fa65 	bl	80071dc <ld_clust>
 8007d12:	4602      	mov	r2, r0
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007d18:	e7c0      	b.n	8007c9c <follow_path+0x50>
			if (res != FR_OK) break;
 8007d1a:	bf00      	nop
 8007d1c:	e002      	b.n	8007d24 <follow_path+0xd8>
				break;
 8007d1e:	bf00      	nop
 8007d20:	e000      	b.n	8007d24 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007d22:	bf00      	nop
			}
		}
	}

	return res;
 8007d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3718      	adds	r7, #24
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}

08007d2e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007d2e:	b480      	push	{r7}
 8007d30:	b087      	sub	sp, #28
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007d36:	f04f 33ff 	mov.w	r3, #4294967295
 8007d3a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d031      	beq.n	8007da8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	617b      	str	r3, [r7, #20]
 8007d4a:	e002      	b.n	8007d52 <get_ldnumber+0x24>
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	617b      	str	r3, [r7, #20]
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	2b1f      	cmp	r3, #31
 8007d58:	d903      	bls.n	8007d62 <get_ldnumber+0x34>
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	2b3a      	cmp	r3, #58	@ 0x3a
 8007d60:	d1f4      	bne.n	8007d4c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	2b3a      	cmp	r3, #58	@ 0x3a
 8007d68:	d11c      	bne.n	8007da4 <get_ldnumber+0x76>
			tp = *path;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	1c5a      	adds	r2, r3, #1
 8007d74:	60fa      	str	r2, [r7, #12]
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	3b30      	subs	r3, #48	@ 0x30
 8007d7a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	2b09      	cmp	r3, #9
 8007d80:	d80e      	bhi.n	8007da0 <get_ldnumber+0x72>
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d10a      	bne.n	8007da0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d107      	bne.n	8007da0 <get_ldnumber+0x72>
					vol = (int)i;
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	3301      	adds	r3, #1
 8007d98:	617b      	str	r3, [r7, #20]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	697a      	ldr	r2, [r7, #20]
 8007d9e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	e002      	b.n	8007daa <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007da4:	2300      	movs	r3, #0
 8007da6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007da8:	693b      	ldr	r3, [r7, #16]
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	371c      	adds	r7, #28
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr
	...

08007db8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	70da      	strb	r2, [r3, #3]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f04f 32ff 	mov.w	r2, #4294967295
 8007dce:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007dd0:	6839      	ldr	r1, [r7, #0]
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f7fe fcfe 	bl	80067d4 <move_window>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d001      	beq.n	8007de2 <check_fs+0x2a>
 8007dde:	2304      	movs	r3, #4
 8007de0:	e038      	b.n	8007e54 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	3334      	adds	r3, #52	@ 0x34
 8007de6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007dea:	4618      	mov	r0, r3
 8007dec:	f7fe fa42 	bl	8006274 <ld_word>
 8007df0:	4603      	mov	r3, r0
 8007df2:	461a      	mov	r2, r3
 8007df4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d001      	beq.n	8007e00 <check_fs+0x48>
 8007dfc:	2303      	movs	r3, #3
 8007dfe:	e029      	b.n	8007e54 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007e06:	2be9      	cmp	r3, #233	@ 0xe9
 8007e08:	d009      	beq.n	8007e1e <check_fs+0x66>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007e10:	2beb      	cmp	r3, #235	@ 0xeb
 8007e12:	d11e      	bne.n	8007e52 <check_fs+0x9a>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8007e1a:	2b90      	cmp	r3, #144	@ 0x90
 8007e1c:	d119      	bne.n	8007e52 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	3334      	adds	r3, #52	@ 0x34
 8007e22:	3336      	adds	r3, #54	@ 0x36
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7fe fa3d 	bl	80062a4 <ld_dword>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007e30:	4a0a      	ldr	r2, [pc, #40]	@ (8007e5c <check_fs+0xa4>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d101      	bne.n	8007e3a <check_fs+0x82>
 8007e36:	2300      	movs	r3, #0
 8007e38:	e00c      	b.n	8007e54 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	3334      	adds	r3, #52	@ 0x34
 8007e3e:	3352      	adds	r3, #82	@ 0x52
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7fe fa2f 	bl	80062a4 <ld_dword>
 8007e46:	4603      	mov	r3, r0
 8007e48:	4a05      	ldr	r2, [pc, #20]	@ (8007e60 <check_fs+0xa8>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d101      	bne.n	8007e52 <check_fs+0x9a>
 8007e4e:	2300      	movs	r3, #0
 8007e50:	e000      	b.n	8007e54 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007e52:	2302      	movs	r3, #2
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3708      	adds	r7, #8
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	00544146 	.word	0x00544146
 8007e60:	33544146 	.word	0x33544146

08007e64 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b096      	sub	sp, #88	@ 0x58
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	4613      	mov	r3, r2
 8007e70:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	2200      	movs	r2, #0
 8007e76:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007e78:	68f8      	ldr	r0, [r7, #12]
 8007e7a:	f7ff ff58 	bl	8007d2e <get_ldnumber>
 8007e7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007e80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	da01      	bge.n	8007e8a <find_volume+0x26>
 8007e86:	230b      	movs	r3, #11
 8007e88:	e22d      	b.n	80082e6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007e8a:	4aa1      	ldr	r2, [pc, #644]	@ (8008110 <find_volume+0x2ac>)
 8007e8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e92:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d101      	bne.n	8007e9e <find_volume+0x3a>
 8007e9a:	230c      	movs	r3, #12
 8007e9c:	e223      	b.n	80082e6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007ea2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007ea4:	79fb      	ldrb	r3, [r7, #7]
 8007ea6:	f023 0301 	bic.w	r3, r3, #1
 8007eaa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d01a      	beq.n	8007eea <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eb6:	785b      	ldrb	r3, [r3, #1]
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f7fe f93d 	bl	8006138 <disk_status>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007ec4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007ec8:	f003 0301 	and.w	r3, r3, #1
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d10c      	bne.n	8007eea <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007ed0:	79fb      	ldrb	r3, [r7, #7]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d007      	beq.n	8007ee6 <find_volume+0x82>
 8007ed6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007eda:	f003 0304 	and.w	r3, r3, #4
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d001      	beq.n	8007ee6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007ee2:	230a      	movs	r3, #10
 8007ee4:	e1ff      	b.n	80082e6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	e1fd      	b.n	80082e6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eec:	2200      	movs	r2, #0
 8007eee:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007ef0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ef2:	b2da      	uxtb	r2, r3
 8007ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ef6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007efa:	785b      	ldrb	r3, [r3, #1]
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7fe f935 	bl	800616c <disk_initialize>
 8007f02:	4603      	mov	r3, r0
 8007f04:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007f08:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007f0c:	f003 0301 	and.w	r3, r3, #1
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d001      	beq.n	8007f18 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007f14:	2303      	movs	r3, #3
 8007f16:	e1e6      	b.n	80082e6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007f18:	79fb      	ldrb	r3, [r7, #7]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d007      	beq.n	8007f2e <find_volume+0xca>
 8007f1e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007f22:	f003 0304 	and.w	r3, r3, #4
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d001      	beq.n	8007f2e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007f2a:	230a      	movs	r3, #10
 8007f2c:	e1db      	b.n	80082e6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007f32:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007f34:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007f36:	f7ff ff3f 	bl	8007db8 <check_fs>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007f40:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	d149      	bne.n	8007fdc <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007f48:	2300      	movs	r3, #0
 8007f4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f4c:	e01e      	b.n	8007f8c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f50:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007f54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f56:	011b      	lsls	r3, r3, #4
 8007f58:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8007f5c:	4413      	add	r3, r2
 8007f5e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f62:	3304      	adds	r3, #4
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d006      	beq.n	8007f78 <find_volume+0x114>
 8007f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f6c:	3308      	adds	r3, #8
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7fe f998 	bl	80062a4 <ld_dword>
 8007f74:	4602      	mov	r2, r0
 8007f76:	e000      	b.n	8007f7a <find_volume+0x116>
 8007f78:	2200      	movs	r2, #0
 8007f7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	3358      	adds	r3, #88	@ 0x58
 8007f80:	443b      	add	r3, r7
 8007f82:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007f86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f88:	3301      	adds	r3, #1
 8007f8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f8e:	2b03      	cmp	r3, #3
 8007f90:	d9dd      	bls.n	8007f4e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007f92:	2300      	movs	r3, #0
 8007f94:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8007f96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d002      	beq.n	8007fa2 <find_volume+0x13e>
 8007f9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f9e:	3b01      	subs	r3, #1
 8007fa0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007fa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	3358      	adds	r3, #88	@ 0x58
 8007fa8:	443b      	add	r3, r7
 8007faa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007fae:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007fb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d005      	beq.n	8007fc2 <find_volume+0x15e>
 8007fb6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007fb8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007fba:	f7ff fefd 	bl	8007db8 <check_fs>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	e000      	b.n	8007fc4 <find_volume+0x160>
 8007fc2:	2303      	movs	r3, #3
 8007fc4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007fc8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d905      	bls.n	8007fdc <find_volume+0x178>
 8007fd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	643b      	str	r3, [r7, #64]	@ 0x40
 8007fd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007fd8:	2b03      	cmp	r3, #3
 8007fda:	d9e2      	bls.n	8007fa2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007fdc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007fe0:	2b04      	cmp	r3, #4
 8007fe2:	d101      	bne.n	8007fe8 <find_volume+0x184>
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	e17e      	b.n	80082e6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007fe8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d901      	bls.n	8007ff4 <find_volume+0x190>
 8007ff0:	230d      	movs	r3, #13
 8007ff2:	e178      	b.n	80082e6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ff6:	3334      	adds	r3, #52	@ 0x34
 8007ff8:	330b      	adds	r3, #11
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7fe f93a 	bl	8006274 <ld_word>
 8008000:	4603      	mov	r3, r0
 8008002:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008006:	d001      	beq.n	800800c <find_volume+0x1a8>
 8008008:	230d      	movs	r3, #13
 800800a:	e16c      	b.n	80082e6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800800c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800800e:	3334      	adds	r3, #52	@ 0x34
 8008010:	3316      	adds	r3, #22
 8008012:	4618      	mov	r0, r3
 8008014:	f7fe f92e 	bl	8006274 <ld_word>
 8008018:	4603      	mov	r3, r0
 800801a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800801c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800801e:	2b00      	cmp	r3, #0
 8008020:	d106      	bne.n	8008030 <find_volume+0x1cc>
 8008022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008024:	3334      	adds	r3, #52	@ 0x34
 8008026:	3324      	adds	r3, #36	@ 0x24
 8008028:	4618      	mov	r0, r3
 800802a:	f7fe f93b 	bl	80062a4 <ld_dword>
 800802e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8008030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008032:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008034:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008038:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800803c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800803e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008042:	789b      	ldrb	r3, [r3, #2]
 8008044:	2b01      	cmp	r3, #1
 8008046:	d005      	beq.n	8008054 <find_volume+0x1f0>
 8008048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800804a:	789b      	ldrb	r3, [r3, #2]
 800804c:	2b02      	cmp	r3, #2
 800804e:	d001      	beq.n	8008054 <find_volume+0x1f0>
 8008050:	230d      	movs	r3, #13
 8008052:	e148      	b.n	80082e6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008056:	789b      	ldrb	r3, [r3, #2]
 8008058:	461a      	mov	r2, r3
 800805a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800805c:	fb02 f303 	mul.w	r3, r2, r3
 8008060:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008064:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008068:	461a      	mov	r2, r3
 800806a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800806c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800806e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008070:	895b      	ldrh	r3, [r3, #10]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d008      	beq.n	8008088 <find_volume+0x224>
 8008076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008078:	895b      	ldrh	r3, [r3, #10]
 800807a:	461a      	mov	r2, r3
 800807c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800807e:	895b      	ldrh	r3, [r3, #10]
 8008080:	3b01      	subs	r3, #1
 8008082:	4013      	ands	r3, r2
 8008084:	2b00      	cmp	r3, #0
 8008086:	d001      	beq.n	800808c <find_volume+0x228>
 8008088:	230d      	movs	r3, #13
 800808a:	e12c      	b.n	80082e6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800808c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800808e:	3334      	adds	r3, #52	@ 0x34
 8008090:	3311      	adds	r3, #17
 8008092:	4618      	mov	r0, r3
 8008094:	f7fe f8ee 	bl	8006274 <ld_word>
 8008098:	4603      	mov	r3, r0
 800809a:	461a      	mov	r2, r3
 800809c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800809e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80080a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080a2:	891b      	ldrh	r3, [r3, #8]
 80080a4:	f003 030f 	and.w	r3, r3, #15
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d001      	beq.n	80080b2 <find_volume+0x24e>
 80080ae:	230d      	movs	r3, #13
 80080b0:	e119      	b.n	80082e6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80080b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080b4:	3334      	adds	r3, #52	@ 0x34
 80080b6:	3313      	adds	r3, #19
 80080b8:	4618      	mov	r0, r3
 80080ba:	f7fe f8db 	bl	8006274 <ld_word>
 80080be:	4603      	mov	r3, r0
 80080c0:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80080c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d106      	bne.n	80080d6 <find_volume+0x272>
 80080c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ca:	3334      	adds	r3, #52	@ 0x34
 80080cc:	3320      	adds	r3, #32
 80080ce:	4618      	mov	r0, r3
 80080d0:	f7fe f8e8 	bl	80062a4 <ld_dword>
 80080d4:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80080d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080d8:	3334      	adds	r3, #52	@ 0x34
 80080da:	330e      	adds	r3, #14
 80080dc:	4618      	mov	r0, r3
 80080de:	f7fe f8c9 	bl	8006274 <ld_word>
 80080e2:	4603      	mov	r3, r0
 80080e4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80080e6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d101      	bne.n	80080f0 <find_volume+0x28c>
 80080ec:	230d      	movs	r3, #13
 80080ee:	e0fa      	b.n	80082e6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80080f0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80080f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080f4:	4413      	add	r3, r2
 80080f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80080f8:	8912      	ldrh	r2, [r2, #8]
 80080fa:	0912      	lsrs	r2, r2, #4
 80080fc:	b292      	uxth	r2, r2
 80080fe:	4413      	add	r3, r2
 8008100:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008102:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008106:	429a      	cmp	r2, r3
 8008108:	d204      	bcs.n	8008114 <find_volume+0x2b0>
 800810a:	230d      	movs	r3, #13
 800810c:	e0eb      	b.n	80082e6 <find_volume+0x482>
 800810e:	bf00      	nop
 8008110:	20000758 	.word	0x20000758
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008114:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008118:	1ad3      	subs	r3, r2, r3
 800811a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800811c:	8952      	ldrh	r2, [r2, #10]
 800811e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008122:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008126:	2b00      	cmp	r3, #0
 8008128:	d101      	bne.n	800812e <find_volume+0x2ca>
 800812a:	230d      	movs	r3, #13
 800812c:	e0db      	b.n	80082e6 <find_volume+0x482>
		fmt = FS_FAT32;
 800812e:	2303      	movs	r3, #3
 8008130:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008136:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800813a:	4293      	cmp	r3, r2
 800813c:	d802      	bhi.n	8008144 <find_volume+0x2e0>
 800813e:	2302      	movs	r3, #2
 8008140:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008146:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800814a:	4293      	cmp	r3, r2
 800814c:	d802      	bhi.n	8008154 <find_volume+0x2f0>
 800814e:	2301      	movs	r3, #1
 8008150:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008156:	1c9a      	adds	r2, r3, #2
 8008158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800815a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800815c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800815e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008160:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008162:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008164:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008166:	441a      	add	r2, r3
 8008168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800816a:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800816c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800816e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008170:	441a      	add	r2, r3
 8008172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008174:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8008176:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800817a:	2b03      	cmp	r3, #3
 800817c:	d11e      	bne.n	80081bc <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800817e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008180:	3334      	adds	r3, #52	@ 0x34
 8008182:	332a      	adds	r3, #42	@ 0x2a
 8008184:	4618      	mov	r0, r3
 8008186:	f7fe f875 	bl	8006274 <ld_word>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d001      	beq.n	8008194 <find_volume+0x330>
 8008190:	230d      	movs	r3, #13
 8008192:	e0a8      	b.n	80082e6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008196:	891b      	ldrh	r3, [r3, #8]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d001      	beq.n	80081a0 <find_volume+0x33c>
 800819c:	230d      	movs	r3, #13
 800819e:	e0a2      	b.n	80082e6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80081a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081a2:	3334      	adds	r3, #52	@ 0x34
 80081a4:	332c      	adds	r3, #44	@ 0x2c
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7fe f87c 	bl	80062a4 <ld_dword>
 80081ac:	4602      	mov	r2, r0
 80081ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081b0:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80081b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081b4:	699b      	ldr	r3, [r3, #24]
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80081ba:	e01f      	b.n	80081fc <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80081bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081be:	891b      	ldrh	r3, [r3, #8]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d101      	bne.n	80081c8 <find_volume+0x364>
 80081c4:	230d      	movs	r3, #13
 80081c6:	e08e      	b.n	80082e6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80081c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80081cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081ce:	441a      	add	r2, r3
 80081d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081d2:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80081d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80081d8:	2b02      	cmp	r3, #2
 80081da:	d103      	bne.n	80081e4 <find_volume+0x380>
 80081dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081de:	699b      	ldr	r3, [r3, #24]
 80081e0:	005b      	lsls	r3, r3, #1
 80081e2:	e00a      	b.n	80081fa <find_volume+0x396>
 80081e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081e6:	699a      	ldr	r2, [r3, #24]
 80081e8:	4613      	mov	r3, r2
 80081ea:	005b      	lsls	r3, r3, #1
 80081ec:	4413      	add	r3, r2
 80081ee:	085a      	lsrs	r2, r3, #1
 80081f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081f2:	699b      	ldr	r3, [r3, #24]
 80081f4:	f003 0301 	and.w	r3, r3, #1
 80081f8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80081fa:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80081fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081fe:	69da      	ldr	r2, [r3, #28]
 8008200:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008202:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8008206:	0a5b      	lsrs	r3, r3, #9
 8008208:	429a      	cmp	r2, r3
 800820a:	d201      	bcs.n	8008210 <find_volume+0x3ac>
 800820c:	230d      	movs	r3, #13
 800820e:	e06a      	b.n	80082e6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008212:	f04f 32ff 	mov.w	r2, #4294967295
 8008216:	615a      	str	r2, [r3, #20]
 8008218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800821a:	695a      	ldr	r2, [r3, #20]
 800821c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800821e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8008220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008222:	2280      	movs	r2, #128	@ 0x80
 8008224:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008226:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800822a:	2b03      	cmp	r3, #3
 800822c:	d149      	bne.n	80082c2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800822e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008230:	3334      	adds	r3, #52	@ 0x34
 8008232:	3330      	adds	r3, #48	@ 0x30
 8008234:	4618      	mov	r0, r3
 8008236:	f7fe f81d 	bl	8006274 <ld_word>
 800823a:	4603      	mov	r3, r0
 800823c:	2b01      	cmp	r3, #1
 800823e:	d140      	bne.n	80082c2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008240:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008242:	3301      	adds	r3, #1
 8008244:	4619      	mov	r1, r3
 8008246:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008248:	f7fe fac4 	bl	80067d4 <move_window>
 800824c:	4603      	mov	r3, r0
 800824e:	2b00      	cmp	r3, #0
 8008250:	d137      	bne.n	80082c2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8008252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008254:	2200      	movs	r2, #0
 8008256:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800825a:	3334      	adds	r3, #52	@ 0x34
 800825c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008260:	4618      	mov	r0, r3
 8008262:	f7fe f807 	bl	8006274 <ld_word>
 8008266:	4603      	mov	r3, r0
 8008268:	461a      	mov	r2, r3
 800826a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800826e:	429a      	cmp	r2, r3
 8008270:	d127      	bne.n	80082c2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008274:	3334      	adds	r3, #52	@ 0x34
 8008276:	4618      	mov	r0, r3
 8008278:	f7fe f814 	bl	80062a4 <ld_dword>
 800827c:	4603      	mov	r3, r0
 800827e:	4a1c      	ldr	r2, [pc, #112]	@ (80082f0 <find_volume+0x48c>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d11e      	bne.n	80082c2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008286:	3334      	adds	r3, #52	@ 0x34
 8008288:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800828c:	4618      	mov	r0, r3
 800828e:	f7fe f809 	bl	80062a4 <ld_dword>
 8008292:	4603      	mov	r3, r0
 8008294:	4a17      	ldr	r2, [pc, #92]	@ (80082f4 <find_volume+0x490>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d113      	bne.n	80082c2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800829a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800829c:	3334      	adds	r3, #52	@ 0x34
 800829e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80082a2:	4618      	mov	r0, r3
 80082a4:	f7fd fffe 	bl	80062a4 <ld_dword>
 80082a8:	4602      	mov	r2, r0
 80082aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ac:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80082ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082b0:	3334      	adds	r3, #52	@ 0x34
 80082b2:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7fd fff4 	bl	80062a4 <ld_dword>
 80082bc:	4602      	mov	r2, r0
 80082be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082c0:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80082c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082c4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80082c8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80082ca:	4b0b      	ldr	r3, [pc, #44]	@ (80082f8 <find_volume+0x494>)
 80082cc:	881b      	ldrh	r3, [r3, #0]
 80082ce:	3301      	adds	r3, #1
 80082d0:	b29a      	uxth	r2, r3
 80082d2:	4b09      	ldr	r3, [pc, #36]	@ (80082f8 <find_volume+0x494>)
 80082d4:	801a      	strh	r2, [r3, #0]
 80082d6:	4b08      	ldr	r3, [pc, #32]	@ (80082f8 <find_volume+0x494>)
 80082d8:	881a      	ldrh	r2, [r3, #0]
 80082da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082dc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80082de:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80082e0:	f7fe fa10 	bl	8006704 <clear_lock>
#endif
	return FR_OK;
 80082e4:	2300      	movs	r3, #0
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3758      	adds	r7, #88	@ 0x58
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	41615252 	.word	0x41615252
 80082f4:	61417272 	.word	0x61417272
 80082f8:	2000075c 	.word	0x2000075c

080082fc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b084      	sub	sp, #16
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008306:	2309      	movs	r3, #9
 8008308:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d01c      	beq.n	800834a <validate+0x4e>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d018      	beq.n	800834a <validate+0x4e>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d013      	beq.n	800834a <validate+0x4e>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	889a      	ldrh	r2, [r3, #4]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	88db      	ldrh	r3, [r3, #6]
 800832c:	429a      	cmp	r2, r3
 800832e:	d10c      	bne.n	800834a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	785b      	ldrb	r3, [r3, #1]
 8008336:	4618      	mov	r0, r3
 8008338:	f7fd fefe 	bl	8006138 <disk_status>
 800833c:	4603      	mov	r3, r0
 800833e:	f003 0301 	and.w	r3, r3, #1
 8008342:	2b00      	cmp	r3, #0
 8008344:	d101      	bne.n	800834a <validate+0x4e>
			res = FR_OK;
 8008346:	2300      	movs	r3, #0
 8008348:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800834a:	7bfb      	ldrb	r3, [r7, #15]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d102      	bne.n	8008356 <validate+0x5a>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	e000      	b.n	8008358 <validate+0x5c>
 8008356:	2300      	movs	r3, #0
 8008358:	683a      	ldr	r2, [r7, #0]
 800835a:	6013      	str	r3, [r2, #0]
	return res;
 800835c:	7bfb      	ldrb	r3, [r7, #15]
}
 800835e:	4618      	mov	r0, r3
 8008360:	3710      	adds	r7, #16
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
	...

08008368 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b088      	sub	sp, #32
 800836c:	af00      	add	r7, sp, #0
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	4613      	mov	r3, r2
 8008374:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800837a:	f107 0310 	add.w	r3, r7, #16
 800837e:	4618      	mov	r0, r3
 8008380:	f7ff fcd5 	bl	8007d2e <get_ldnumber>
 8008384:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	2b00      	cmp	r3, #0
 800838a:	da01      	bge.n	8008390 <f_mount+0x28>
 800838c:	230b      	movs	r3, #11
 800838e:	e02b      	b.n	80083e8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008390:	4a17      	ldr	r2, [pc, #92]	@ (80083f0 <f_mount+0x88>)
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008398:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800839a:	69bb      	ldr	r3, [r7, #24]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d005      	beq.n	80083ac <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80083a0:	69b8      	ldr	r0, [r7, #24]
 80083a2:	f7fe f9af 	bl	8006704 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80083a6:	69bb      	ldr	r3, [r7, #24]
 80083a8:	2200      	movs	r2, #0
 80083aa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d002      	beq.n	80083b8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2200      	movs	r2, #0
 80083b6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80083b8:	68fa      	ldr	r2, [r7, #12]
 80083ba:	490d      	ldr	r1, [pc, #52]	@ (80083f0 <f_mount+0x88>)
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d002      	beq.n	80083ce <f_mount+0x66>
 80083c8:	79fb      	ldrb	r3, [r7, #7]
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d001      	beq.n	80083d2 <f_mount+0x6a>
 80083ce:	2300      	movs	r3, #0
 80083d0:	e00a      	b.n	80083e8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80083d2:	f107 010c 	add.w	r1, r7, #12
 80083d6:	f107 0308 	add.w	r3, r7, #8
 80083da:	2200      	movs	r2, #0
 80083dc:	4618      	mov	r0, r3
 80083de:	f7ff fd41 	bl	8007e64 <find_volume>
 80083e2:	4603      	mov	r3, r0
 80083e4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80083e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3720      	adds	r7, #32
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	20000758 	.word	0x20000758

080083f4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b09a      	sub	sp, #104	@ 0x68
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	60b9      	str	r1, [r7, #8]
 80083fe:	4613      	mov	r3, r2
 8008400:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d101      	bne.n	800840c <f_open+0x18>
 8008408:	2309      	movs	r3, #9
 800840a:	e1b9      	b.n	8008780 <f_open+0x38c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800840c:	79fb      	ldrb	r3, [r7, #7]
 800840e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008412:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008414:	79fa      	ldrb	r2, [r7, #7]
 8008416:	f107 0110 	add.w	r1, r7, #16
 800841a:	f107 0308 	add.w	r3, r7, #8
 800841e:	4618      	mov	r0, r3
 8008420:	f7ff fd20 	bl	8007e64 <find_volume>
 8008424:	4603      	mov	r3, r0
 8008426:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800842a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800842e:	2b00      	cmp	r3, #0
 8008430:	f040 819d 	bne.w	800876e <f_open+0x37a>
		dj.obj.fs = fs;
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 8008438:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800843c:	f000 fe22 	bl	8009084 <ff_memalloc>
 8008440:	65b8      	str	r0, [r7, #88]	@ 0x58
 8008442:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008444:	2b00      	cmp	r3, #0
 8008446:	d101      	bne.n	800844c <f_open+0x58>
 8008448:	2311      	movs	r3, #17
 800844a:	e199      	b.n	8008780 <f_open+0x38c>
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008450:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8008452:	68ba      	ldr	r2, [r7, #8]
 8008454:	f107 0314 	add.w	r3, r7, #20
 8008458:	4611      	mov	r1, r2
 800845a:	4618      	mov	r0, r3
 800845c:	f7ff fbf6 	bl	8007c4c <follow_path>
 8008460:	4603      	mov	r3, r0
 8008462:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008466:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800846a:	2b00      	cmp	r3, #0
 800846c:	d118      	bne.n	80084a0 <f_open+0xac>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800846e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008472:	b25b      	sxtb	r3, r3
 8008474:	2b00      	cmp	r3, #0
 8008476:	da03      	bge.n	8008480 <f_open+0x8c>
				res = FR_INVALID_NAME;
 8008478:	2306      	movs	r3, #6
 800847a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800847e:	e00f      	b.n	80084a0 <f_open+0xac>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008480:	79fb      	ldrb	r3, [r7, #7]
 8008482:	2b01      	cmp	r3, #1
 8008484:	bf8c      	ite	hi
 8008486:	2301      	movhi	r3, #1
 8008488:	2300      	movls	r3, #0
 800848a:	b2db      	uxtb	r3, r3
 800848c:	461a      	mov	r2, r3
 800848e:	f107 0314 	add.w	r3, r7, #20
 8008492:	4611      	mov	r1, r2
 8008494:	4618      	mov	r0, r3
 8008496:	f7fd ffed 	bl	8006474 <chk_lock>
 800849a:	4603      	mov	r3, r0
 800849c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80084a0:	79fb      	ldrb	r3, [r7, #7]
 80084a2:	f003 031c 	and.w	r3, r3, #28
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d07f      	beq.n	80085aa <f_open+0x1b6>
			if (res != FR_OK) {					/* No file, create new */
 80084aa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d017      	beq.n	80084e2 <f_open+0xee>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80084b2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80084b6:	2b04      	cmp	r3, #4
 80084b8:	d10e      	bne.n	80084d8 <f_open+0xe4>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80084ba:	f7fe f837 	bl	800652c <enq_lock>
 80084be:	4603      	mov	r3, r0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d006      	beq.n	80084d2 <f_open+0xde>
 80084c4:	f107 0314 	add.w	r3, r7, #20
 80084c8:	4618      	mov	r0, r3
 80084ca:	f7ff f90f 	bl	80076ec <dir_register>
 80084ce:	4603      	mov	r3, r0
 80084d0:	e000      	b.n	80084d4 <f_open+0xe0>
 80084d2:	2312      	movs	r3, #18
 80084d4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80084d8:	79fb      	ldrb	r3, [r7, #7]
 80084da:	f043 0308 	orr.w	r3, r3, #8
 80084de:	71fb      	strb	r3, [r7, #7]
 80084e0:	e010      	b.n	8008504 <f_open+0x110>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80084e2:	7ebb      	ldrb	r3, [r7, #26]
 80084e4:	f003 0311 	and.w	r3, r3, #17
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d003      	beq.n	80084f4 <f_open+0x100>
					res = FR_DENIED;
 80084ec:	2307      	movs	r3, #7
 80084ee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80084f2:	e007      	b.n	8008504 <f_open+0x110>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80084f4:	79fb      	ldrb	r3, [r7, #7]
 80084f6:	f003 0304 	and.w	r3, r3, #4
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d002      	beq.n	8008504 <f_open+0x110>
 80084fe:	2308      	movs	r3, #8
 8008500:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008504:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008508:	2b00      	cmp	r3, #0
 800850a:	d168      	bne.n	80085de <f_open+0x1ea>
 800850c:	79fb      	ldrb	r3, [r7, #7]
 800850e:	f003 0308 	and.w	r3, r3, #8
 8008512:	2b00      	cmp	r3, #0
 8008514:	d063      	beq.n	80085de <f_open+0x1ea>
				dw = GET_FATTIME();
 8008516:	f7fd fbcd 	bl	8005cb4 <get_fattime>
 800851a:	6578      	str	r0, [r7, #84]	@ 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800851c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800851e:	330e      	adds	r3, #14
 8008520:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008522:	4618      	mov	r0, r3
 8008524:	f7fd fefc 	bl	8006320 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800852a:	3316      	adds	r3, #22
 800852c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800852e:	4618      	mov	r0, r3
 8008530:	f7fd fef6 	bl	8006320 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008536:	330b      	adds	r3, #11
 8008538:	2220      	movs	r2, #32
 800853a:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008540:	4611      	mov	r1, r2
 8008542:	4618      	mov	r0, r3
 8008544:	f7fe fe4a 	bl	80071dc <ld_clust>
 8008548:	6538      	str	r0, [r7, #80]	@ 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800854e:	2200      	movs	r2, #0
 8008550:	4618      	mov	r0, r3
 8008552:	f7fe fe62 	bl	800721a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008558:	331c      	adds	r3, #28
 800855a:	2100      	movs	r1, #0
 800855c:	4618      	mov	r0, r3
 800855e:	f7fd fedf 	bl	8006320 <st_dword>
					fs->wflag = 1;
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	2201      	movs	r2, #1
 8008566:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008568:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800856a:	2b00      	cmp	r3, #0
 800856c:	d037      	beq.n	80085de <f_open+0x1ea>
						dw = fs->winsect;
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008572:	657b      	str	r3, [r7, #84]	@ 0x54
						res = remove_chain(&dj.obj, cl, 0);
 8008574:	f107 0314 	add.w	r3, r7, #20
 8008578:	2200      	movs	r2, #0
 800857a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800857c:	4618      	mov	r0, r3
 800857e:	f7fe fb75 	bl	8006c6c <remove_chain>
 8008582:	4603      	mov	r3, r0
 8008584:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8008588:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800858c:	2b00      	cmp	r3, #0
 800858e:	d126      	bne.n	80085de <f_open+0x1ea>
							res = move_window(fs, dw);
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008594:	4618      	mov	r0, r3
 8008596:	f7fe f91d 	bl	80067d4 <move_window>
 800859a:	4603      	mov	r3, r0
 800859c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80085a4:	3a01      	subs	r2, #1
 80085a6:	611a      	str	r2, [r3, #16]
 80085a8:	e019      	b.n	80085de <f_open+0x1ea>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80085aa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d115      	bne.n	80085de <f_open+0x1ea>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80085b2:	7ebb      	ldrb	r3, [r7, #26]
 80085b4:	f003 0310 	and.w	r3, r3, #16
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d003      	beq.n	80085c4 <f_open+0x1d0>
					res = FR_NO_FILE;
 80085bc:	2304      	movs	r3, #4
 80085be:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80085c2:	e00c      	b.n	80085de <f_open+0x1ea>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80085c4:	79fb      	ldrb	r3, [r7, #7]
 80085c6:	f003 0302 	and.w	r3, r3, #2
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d007      	beq.n	80085de <f_open+0x1ea>
 80085ce:	7ebb      	ldrb	r3, [r7, #26]
 80085d0:	f003 0301 	and.w	r3, r3, #1
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d002      	beq.n	80085de <f_open+0x1ea>
						res = FR_DENIED;
 80085d8:	2307      	movs	r3, #7
 80085da:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80085de:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d126      	bne.n	8008634 <f_open+0x240>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80085e6:	79fb      	ldrb	r3, [r7, #7]
 80085e8:	f003 0308 	and.w	r3, r3, #8
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d003      	beq.n	80085f8 <f_open+0x204>
				mode |= FA_MODIFIED;
 80085f0:	79fb      	ldrb	r3, [r7, #7]
 80085f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085f6:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8008600:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008606:	79fb      	ldrb	r3, [r7, #7]
 8008608:	2b01      	cmp	r3, #1
 800860a:	bf8c      	ite	hi
 800860c:	2301      	movhi	r3, #1
 800860e:	2300      	movls	r3, #0
 8008610:	b2db      	uxtb	r3, r3
 8008612:	461a      	mov	r2, r3
 8008614:	f107 0314 	add.w	r3, r7, #20
 8008618:	4611      	mov	r1, r2
 800861a:	4618      	mov	r0, r3
 800861c:	f7fd ffa8 	bl	8006570 <inc_lock>
 8008620:	4602      	mov	r2, r0
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	691b      	ldr	r3, [r3, #16]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d102      	bne.n	8008634 <f_open+0x240>
 800862e:	2302      	movs	r3, #2
 8008630:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008634:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008638:	2b00      	cmp	r3, #0
 800863a:	f040 8095 	bne.w	8008768 <f_open+0x374>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008642:	4611      	mov	r1, r2
 8008644:	4618      	mov	r0, r3
 8008646:	f7fe fdc9 	bl	80071dc <ld_clust>
 800864a:	4602      	mov	r2, r0
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008652:	331c      	adds	r3, #28
 8008654:	4618      	mov	r0, r3
 8008656:	f7fd fe25 	bl	80062a4 <ld_dword>
 800865a:	4602      	mov	r2, r0
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2200      	movs	r2, #0
 8008664:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008666:	693a      	ldr	r2, [r7, #16]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	88da      	ldrh	r2, [r3, #6]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	79fa      	ldrb	r2, [r7, #7]
 8008678:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2200      	movs	r2, #0
 800867e:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2200      	movs	r2, #0
 8008684:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2200      	movs	r2, #0
 800868a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	3330      	adds	r3, #48	@ 0x30
 8008690:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008694:	2100      	movs	r1, #0
 8008696:	4618      	mov	r0, r3
 8008698:	f7fd fe8f 	bl	80063ba <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800869c:	79fb      	ldrb	r3, [r7, #7]
 800869e:	f003 0320 	and.w	r3, r3, #32
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d060      	beq.n	8008768 <f_open+0x374>
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	68db      	ldr	r3, [r3, #12]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d05c      	beq.n	8008768 <f_open+0x374>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	68da      	ldr	r2, [r3, #12]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	895b      	ldrh	r3, [r3, #10]
 80086ba:	025b      	lsls	r3, r3, #9
 80086bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	68db      	ldr	r3, [r3, #12]
 80086c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80086ca:	e016      	b.n	80086fa <f_open+0x306>
					clst = get_fat(&fp->obj, clst);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80086d0:	4618      	mov	r0, r3
 80086d2:	f7fe f93a 	bl	800694a <get_fat>
 80086d6:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80086d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d802      	bhi.n	80086e4 <f_open+0x2f0>
 80086de:	2302      	movs	r3, #2
 80086e0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80086e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80086e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ea:	d102      	bne.n	80086f2 <f_open+0x2fe>
 80086ec:	2301      	movs	r3, #1
 80086ee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80086f2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80086f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086f6:	1ad3      	subs	r3, r2, r3
 80086f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80086fa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d103      	bne.n	800870a <f_open+0x316>
 8008702:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008704:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008706:	429a      	cmp	r2, r3
 8008708:	d8e0      	bhi.n	80086cc <f_open+0x2d8>
				}
				fp->clust = clst;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800870e:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008710:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008714:	2b00      	cmp	r3, #0
 8008716:	d127      	bne.n	8008768 <f_open+0x374>
 8008718:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800871a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800871e:	2b00      	cmp	r3, #0
 8008720:	d022      	beq.n	8008768 <f_open+0x374>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008726:	4618      	mov	r0, r3
 8008728:	f7fe f8f0 	bl	800690c <clust2sect>
 800872c:	64b8      	str	r0, [r7, #72]	@ 0x48
 800872e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008730:	2b00      	cmp	r3, #0
 8008732:	d103      	bne.n	800873c <f_open+0x348>
						res = FR_INT_ERR;
 8008734:	2302      	movs	r3, #2
 8008736:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800873a:	e015      	b.n	8008768 <f_open+0x374>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800873c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800873e:	0a5a      	lsrs	r2, r3, #9
 8008740:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008742:	441a      	add	r2, r3
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	7858      	ldrb	r0, [r3, #1]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	6a1a      	ldr	r2, [r3, #32]
 8008756:	2301      	movs	r3, #1
 8008758:	f7fd fd2e 	bl	80061b8 <disk_read>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d002      	beq.n	8008768 <f_open+0x374>
 8008762:	2301      	movs	r3, #1
 8008764:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 8008768:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800876a:	f000 fc97 	bl	800909c <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800876e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008772:	2b00      	cmp	r3, #0
 8008774:	d002      	beq.n	800877c <f_open+0x388>
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2200      	movs	r2, #0
 800877a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800877c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8008780:	4618      	mov	r0, r3
 8008782:	3768      	adds	r7, #104	@ 0x68
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b08e      	sub	sp, #56	@ 0x38
 800878c:	af00      	add	r7, sp, #0
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	60b9      	str	r1, [r7, #8]
 8008792:	607a      	str	r2, [r7, #4]
 8008794:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	2200      	movs	r2, #0
 800879e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f107 0214 	add.w	r2, r7, #20
 80087a6:	4611      	mov	r1, r2
 80087a8:	4618      	mov	r0, r3
 80087aa:	f7ff fda7 	bl	80082fc <validate>
 80087ae:	4603      	mov	r3, r0
 80087b0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80087b4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d107      	bne.n	80087cc <f_read+0x44>
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	7d5b      	ldrb	r3, [r3, #21]
 80087c0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80087c4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d002      	beq.n	80087d2 <f_read+0x4a>
 80087cc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80087d0:	e115      	b.n	80089fe <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	7d1b      	ldrb	r3, [r3, #20]
 80087d6:	f003 0301 	and.w	r3, r3, #1
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d101      	bne.n	80087e2 <f_read+0x5a>
 80087de:	2307      	movs	r3, #7
 80087e0:	e10d      	b.n	80089fe <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	68da      	ldr	r2, [r3, #12]
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	699b      	ldr	r3, [r3, #24]
 80087ea:	1ad3      	subs	r3, r2, r3
 80087ec:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	6a3b      	ldr	r3, [r7, #32]
 80087f2:	429a      	cmp	r2, r3
 80087f4:	f240 80fe 	bls.w	80089f4 <f_read+0x26c>
 80087f8:	6a3b      	ldr	r3, [r7, #32]
 80087fa:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80087fc:	e0fa      	b.n	80089f4 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	699b      	ldr	r3, [r3, #24]
 8008802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008806:	2b00      	cmp	r3, #0
 8008808:	f040 80c6 	bne.w	8008998 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	699b      	ldr	r3, [r3, #24]
 8008810:	0a5b      	lsrs	r3, r3, #9
 8008812:	697a      	ldr	r2, [r7, #20]
 8008814:	8952      	ldrh	r2, [r2, #10]
 8008816:	3a01      	subs	r2, #1
 8008818:	4013      	ands	r3, r2
 800881a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d12f      	bne.n	8008882 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	699b      	ldr	r3, [r3, #24]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d103      	bne.n	8008832 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008830:	e013      	b.n	800885a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008836:	2b00      	cmp	r3, #0
 8008838:	d007      	beq.n	800884a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	699b      	ldr	r3, [r3, #24]
 800883e:	4619      	mov	r1, r3
 8008840:	68f8      	ldr	r0, [r7, #12]
 8008842:	f7fe fb10 	bl	8006e66 <clmt_clust>
 8008846:	6338      	str	r0, [r7, #48]	@ 0x30
 8008848:	e007      	b.n	800885a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800884a:	68fa      	ldr	r2, [r7, #12]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	69db      	ldr	r3, [r3, #28]
 8008850:	4619      	mov	r1, r3
 8008852:	4610      	mov	r0, r2
 8008854:	f7fe f879 	bl	800694a <get_fat>
 8008858:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800885a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800885c:	2b01      	cmp	r3, #1
 800885e:	d804      	bhi.n	800886a <f_read+0xe2>
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2202      	movs	r2, #2
 8008864:	755a      	strb	r2, [r3, #21]
 8008866:	2302      	movs	r3, #2
 8008868:	e0c9      	b.n	80089fe <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800886a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800886c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008870:	d104      	bne.n	800887c <f_read+0xf4>
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2201      	movs	r2, #1
 8008876:	755a      	strb	r2, [r3, #21]
 8008878:	2301      	movs	r3, #1
 800887a:	e0c0      	b.n	80089fe <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008880:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008882:	697a      	ldr	r2, [r7, #20]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	69db      	ldr	r3, [r3, #28]
 8008888:	4619      	mov	r1, r3
 800888a:	4610      	mov	r0, r2
 800888c:	f7fe f83e 	bl	800690c <clust2sect>
 8008890:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d104      	bne.n	80088a2 <f_read+0x11a>
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2202      	movs	r2, #2
 800889c:	755a      	strb	r2, [r3, #21]
 800889e:	2302      	movs	r3, #2
 80088a0:	e0ad      	b.n	80089fe <f_read+0x276>
			sect += csect;
 80088a2:	69ba      	ldr	r2, [r7, #24]
 80088a4:	69fb      	ldr	r3, [r7, #28]
 80088a6:	4413      	add	r3, r2
 80088a8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	0a5b      	lsrs	r3, r3, #9
 80088ae:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80088b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d039      	beq.n	800892a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80088b6:	69fa      	ldr	r2, [r7, #28]
 80088b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ba:	4413      	add	r3, r2
 80088bc:	697a      	ldr	r2, [r7, #20]
 80088be:	8952      	ldrh	r2, [r2, #10]
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d905      	bls.n	80088d0 <f_read+0x148>
					cc = fs->csize - csect;
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	895b      	ldrh	r3, [r3, #10]
 80088c8:	461a      	mov	r2, r3
 80088ca:	69fb      	ldr	r3, [r7, #28]
 80088cc:	1ad3      	subs	r3, r2, r3
 80088ce:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	7858      	ldrb	r0, [r3, #1]
 80088d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088d6:	69ba      	ldr	r2, [r7, #24]
 80088d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80088da:	f7fd fc6d 	bl	80061b8 <disk_read>
 80088de:	4603      	mov	r3, r0
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d004      	beq.n	80088ee <f_read+0x166>
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2201      	movs	r2, #1
 80088e8:	755a      	strb	r2, [r3, #21]
 80088ea:	2301      	movs	r3, #1
 80088ec:	e087      	b.n	80089fe <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	7d1b      	ldrb	r3, [r3, #20]
 80088f2:	b25b      	sxtb	r3, r3
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	da14      	bge.n	8008922 <f_read+0x19a>
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	6a1a      	ldr	r2, [r3, #32]
 80088fc:	69bb      	ldr	r3, [r7, #24]
 80088fe:	1ad3      	subs	r3, r2, r3
 8008900:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008902:	429a      	cmp	r2, r3
 8008904:	d90d      	bls.n	8008922 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	6a1a      	ldr	r2, [r3, #32]
 800890a:	69bb      	ldr	r3, [r7, #24]
 800890c:	1ad3      	subs	r3, r2, r3
 800890e:	025b      	lsls	r3, r3, #9
 8008910:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008912:	18d0      	adds	r0, r2, r3
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	3330      	adds	r3, #48	@ 0x30
 8008918:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800891c:	4619      	mov	r1, r3
 800891e:	f7fd fd2b 	bl	8006378 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008924:	025b      	lsls	r3, r3, #9
 8008926:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8008928:	e050      	b.n	80089cc <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	6a1b      	ldr	r3, [r3, #32]
 800892e:	69ba      	ldr	r2, [r7, #24]
 8008930:	429a      	cmp	r2, r3
 8008932:	d02e      	beq.n	8008992 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	7d1b      	ldrb	r3, [r3, #20]
 8008938:	b25b      	sxtb	r3, r3
 800893a:	2b00      	cmp	r3, #0
 800893c:	da18      	bge.n	8008970 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	7858      	ldrb	r0, [r3, #1]
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	6a1a      	ldr	r2, [r3, #32]
 800894c:	2301      	movs	r3, #1
 800894e:	f7fd fc53 	bl	80061f8 <disk_write>
 8008952:	4603      	mov	r3, r0
 8008954:	2b00      	cmp	r3, #0
 8008956:	d004      	beq.n	8008962 <f_read+0x1da>
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2201      	movs	r2, #1
 800895c:	755a      	strb	r2, [r3, #21]
 800895e:	2301      	movs	r3, #1
 8008960:	e04d      	b.n	80089fe <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	7d1b      	ldrb	r3, [r3, #20]
 8008966:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800896a:	b2da      	uxtb	r2, r3
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	7858      	ldrb	r0, [r3, #1]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800897a:	2301      	movs	r3, #1
 800897c:	69ba      	ldr	r2, [r7, #24]
 800897e:	f7fd fc1b 	bl	80061b8 <disk_read>
 8008982:	4603      	mov	r3, r0
 8008984:	2b00      	cmp	r3, #0
 8008986:	d004      	beq.n	8008992 <f_read+0x20a>
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2201      	movs	r2, #1
 800898c:	755a      	strb	r2, [r3, #21]
 800898e:	2301      	movs	r3, #1
 8008990:	e035      	b.n	80089fe <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	69ba      	ldr	r2, [r7, #24]
 8008996:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	699b      	ldr	r3, [r3, #24]
 800899c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089a0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80089a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80089a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d901      	bls.n	80089b2 <f_read+0x22a>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	699b      	ldr	r3, [r3, #24]
 80089bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089c0:	4413      	add	r3, r2
 80089c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089c4:	4619      	mov	r1, r3
 80089c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80089c8:	f7fd fcd6 	bl	8006378 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80089cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089d0:	4413      	add	r3, r2
 80089d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	699a      	ldr	r2, [r3, #24]
 80089d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089da:	441a      	add	r2, r3
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	619a      	str	r2, [r3, #24]
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	681a      	ldr	r2, [r3, #0]
 80089e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089e6:	441a      	add	r2, r3
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	601a      	str	r2, [r3, #0]
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089f0:	1ad3      	subs	r3, r2, r3
 80089f2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	f47f af01 	bne.w	80087fe <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3738      	adds	r7, #56	@ 0x38
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}

08008a06 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008a06:	b580      	push	{r7, lr}
 8008a08:	b08c      	sub	sp, #48	@ 0x30
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	60f8      	str	r0, [r7, #12]
 8008a0e:	60b9      	str	r1, [r7, #8]
 8008a10:	607a      	str	r2, [r7, #4]
 8008a12:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f107 0210 	add.w	r2, r7, #16
 8008a24:	4611      	mov	r1, r2
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7ff fc68 	bl	80082fc <validate>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008a32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d107      	bne.n	8008a4a <f_write+0x44>
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	7d5b      	ldrb	r3, [r3, #21]
 8008a3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008a42:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d002      	beq.n	8008a50 <f_write+0x4a>
 8008a4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008a4e:	e14b      	b.n	8008ce8 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	7d1b      	ldrb	r3, [r3, #20]
 8008a54:	f003 0302 	and.w	r3, r3, #2
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d101      	bne.n	8008a60 <f_write+0x5a>
 8008a5c:	2307      	movs	r3, #7
 8008a5e:	e143      	b.n	8008ce8 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	699a      	ldr	r2, [r3, #24]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	441a      	add	r2, r3
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	699b      	ldr	r3, [r3, #24]
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	f080 812d 	bcs.w	8008ccc <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	699b      	ldr	r3, [r3, #24]
 8008a76:	43db      	mvns	r3, r3
 8008a78:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008a7a:	e127      	b.n	8008ccc <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	699b      	ldr	r3, [r3, #24]
 8008a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	f040 80e3 	bne.w	8008c50 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	699b      	ldr	r3, [r3, #24]
 8008a8e:	0a5b      	lsrs	r3, r3, #9
 8008a90:	693a      	ldr	r2, [r7, #16]
 8008a92:	8952      	ldrh	r2, [r2, #10]
 8008a94:	3a01      	subs	r2, #1
 8008a96:	4013      	ands	r3, r2
 8008a98:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d143      	bne.n	8008b28 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	699b      	ldr	r3, [r3, #24]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d10c      	bne.n	8008ac2 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d11a      	bne.n	8008aea <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2100      	movs	r1, #0
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f7fe f93c 	bl	8006d36 <create_chain>
 8008abe:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008ac0:	e013      	b.n	8008aea <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d007      	beq.n	8008ada <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	699b      	ldr	r3, [r3, #24]
 8008ace:	4619      	mov	r1, r3
 8008ad0:	68f8      	ldr	r0, [r7, #12]
 8008ad2:	f7fe f9c8 	bl	8006e66 <clmt_clust>
 8008ad6:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008ad8:	e007      	b.n	8008aea <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008ada:	68fa      	ldr	r2, [r7, #12]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	69db      	ldr	r3, [r3, #28]
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	4610      	mov	r0, r2
 8008ae4:	f7fe f927 	bl	8006d36 <create_chain>
 8008ae8:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	f000 80f2 	beq.w	8008cd6 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d104      	bne.n	8008b02 <f_write+0xfc>
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2202      	movs	r2, #2
 8008afc:	755a      	strb	r2, [r3, #21]
 8008afe:	2302      	movs	r3, #2
 8008b00:	e0f2      	b.n	8008ce8 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b08:	d104      	bne.n	8008b14 <f_write+0x10e>
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	755a      	strb	r2, [r3, #21]
 8008b10:	2301      	movs	r3, #1
 8008b12:	e0e9      	b.n	8008ce8 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b18:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d102      	bne.n	8008b28 <f_write+0x122>
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b26:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	7d1b      	ldrb	r3, [r3, #20]
 8008b2c:	b25b      	sxtb	r3, r3
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	da18      	bge.n	8008b64 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	7858      	ldrb	r0, [r3, #1]
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	6a1a      	ldr	r2, [r3, #32]
 8008b40:	2301      	movs	r3, #1
 8008b42:	f7fd fb59 	bl	80061f8 <disk_write>
 8008b46:	4603      	mov	r3, r0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d004      	beq.n	8008b56 <f_write+0x150>
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	755a      	strb	r2, [r3, #21]
 8008b52:	2301      	movs	r3, #1
 8008b54:	e0c8      	b.n	8008ce8 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	7d1b      	ldrb	r3, [r3, #20]
 8008b5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b5e:	b2da      	uxtb	r2, r3
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008b64:	693a      	ldr	r2, [r7, #16]
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	69db      	ldr	r3, [r3, #28]
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	4610      	mov	r0, r2
 8008b6e:	f7fd fecd 	bl	800690c <clust2sect>
 8008b72:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d104      	bne.n	8008b84 <f_write+0x17e>
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2202      	movs	r2, #2
 8008b7e:	755a      	strb	r2, [r3, #21]
 8008b80:	2302      	movs	r3, #2
 8008b82:	e0b1      	b.n	8008ce8 <f_write+0x2e2>
			sect += csect;
 8008b84:	697a      	ldr	r2, [r7, #20]
 8008b86:	69bb      	ldr	r3, [r7, #24]
 8008b88:	4413      	add	r3, r2
 8008b8a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	0a5b      	lsrs	r3, r3, #9
 8008b90:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008b92:	6a3b      	ldr	r3, [r7, #32]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d03c      	beq.n	8008c12 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008b98:	69ba      	ldr	r2, [r7, #24]
 8008b9a:	6a3b      	ldr	r3, [r7, #32]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	693a      	ldr	r2, [r7, #16]
 8008ba0:	8952      	ldrh	r2, [r2, #10]
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d905      	bls.n	8008bb2 <f_write+0x1ac>
					cc = fs->csize - csect;
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	895b      	ldrh	r3, [r3, #10]
 8008baa:	461a      	mov	r2, r3
 8008bac:	69bb      	ldr	r3, [r7, #24]
 8008bae:	1ad3      	subs	r3, r2, r3
 8008bb0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	7858      	ldrb	r0, [r3, #1]
 8008bb6:	6a3b      	ldr	r3, [r7, #32]
 8008bb8:	697a      	ldr	r2, [r7, #20]
 8008bba:	69f9      	ldr	r1, [r7, #28]
 8008bbc:	f7fd fb1c 	bl	80061f8 <disk_write>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d004      	beq.n	8008bd0 <f_write+0x1ca>
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	755a      	strb	r2, [r3, #21]
 8008bcc:	2301      	movs	r3, #1
 8008bce:	e08b      	b.n	8008ce8 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	6a1a      	ldr	r2, [r3, #32]
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	1ad3      	subs	r3, r2, r3
 8008bd8:	6a3a      	ldr	r2, [r7, #32]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d915      	bls.n	8008c0a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	6a1a      	ldr	r2, [r3, #32]
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	1ad3      	subs	r3, r2, r3
 8008bec:	025b      	lsls	r3, r3, #9
 8008bee:	69fa      	ldr	r2, [r7, #28]
 8008bf0:	4413      	add	r3, r2
 8008bf2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	f7fd fbbe 	bl	8006378 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	7d1b      	ldrb	r3, [r3, #20]
 8008c00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c04:	b2da      	uxtb	r2, r3
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008c0a:	6a3b      	ldr	r3, [r7, #32]
 8008c0c:	025b      	lsls	r3, r3, #9
 8008c0e:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8008c10:	e03f      	b.n	8008c92 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	6a1b      	ldr	r3, [r3, #32]
 8008c16:	697a      	ldr	r2, [r7, #20]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d016      	beq.n	8008c4a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	699a      	ldr	r2, [r3, #24]
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d210      	bcs.n	8008c4a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	7858      	ldrb	r0, [r3, #1]
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008c32:	2301      	movs	r3, #1
 8008c34:	697a      	ldr	r2, [r7, #20]
 8008c36:	f7fd fabf 	bl	80061b8 <disk_read>
 8008c3a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d004      	beq.n	8008c4a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2201      	movs	r2, #1
 8008c44:	755a      	strb	r2, [r3, #21]
 8008c46:	2301      	movs	r3, #1
 8008c48:	e04e      	b.n	8008ce8 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	697a      	ldr	r2, [r7, #20]
 8008c4e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	699b      	ldr	r3, [r3, #24]
 8008c54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c58:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8008c5c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008c5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d901      	bls.n	8008c6a <f_write+0x264>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	699b      	ldr	r3, [r3, #24]
 8008c74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c78:	4413      	add	r3, r2
 8008c7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c7c:	69f9      	ldr	r1, [r7, #28]
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7fd fb7a 	bl	8006378 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	7d1b      	ldrb	r3, [r3, #20]
 8008c88:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008c8c:	b2da      	uxtb	r2, r3
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008c92:	69fa      	ldr	r2, [r7, #28]
 8008c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c96:	4413      	add	r3, r2
 8008c98:	61fb      	str	r3, [r7, #28]
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	699a      	ldr	r2, [r3, #24]
 8008c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ca0:	441a      	add	r2, r3
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	619a      	str	r2, [r3, #24]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	68da      	ldr	r2, [r3, #12]
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	699b      	ldr	r3, [r3, #24]
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	bf38      	it	cc
 8008cb2:	461a      	movcc	r2, r3
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	60da      	str	r2, [r3, #12]
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cbe:	441a      	add	r2, r3
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	601a      	str	r2, [r3, #0]
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc8:	1ad3      	subs	r3, r2, r3
 8008cca:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	f47f aed4 	bne.w	8008a7c <f_write+0x76>
 8008cd4:	e000      	b.n	8008cd8 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008cd6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	7d1b      	ldrb	r3, [r3, #20]
 8008cdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ce0:	b2da      	uxtb	r2, r3
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008ce6:	2300      	movs	r3, #0
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3730      	adds	r7, #48	@ 0x30
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b086      	sub	sp, #24
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f107 0208 	add.w	r2, r7, #8
 8008cfe:	4611      	mov	r1, r2
 8008d00:	4618      	mov	r0, r3
 8008d02:	f7ff fafb 	bl	80082fc <validate>
 8008d06:	4603      	mov	r3, r0
 8008d08:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008d0a:	7dfb      	ldrb	r3, [r7, #23]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d168      	bne.n	8008de2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	7d1b      	ldrb	r3, [r3, #20]
 8008d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d062      	beq.n	8008de2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	7d1b      	ldrb	r3, [r3, #20]
 8008d20:	b25b      	sxtb	r3, r3
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	da15      	bge.n	8008d52 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	7858      	ldrb	r0, [r3, #1]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6a1a      	ldr	r2, [r3, #32]
 8008d34:	2301      	movs	r3, #1
 8008d36:	f7fd fa5f 	bl	80061f8 <disk_write>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d001      	beq.n	8008d44 <f_sync+0x54>
 8008d40:	2301      	movs	r3, #1
 8008d42:	e04f      	b.n	8008de4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	7d1b      	ldrb	r3, [r3, #20]
 8008d48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d4c:	b2da      	uxtb	r2, r3
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008d52:	f7fc ffaf 	bl	8005cb4 <get_fattime>
 8008d56:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008d58:	68ba      	ldr	r2, [r7, #8]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d5e:	4619      	mov	r1, r3
 8008d60:	4610      	mov	r0, r2
 8008d62:	f7fd fd37 	bl	80067d4 <move_window>
 8008d66:	4603      	mov	r3, r0
 8008d68:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008d6a:	7dfb      	ldrb	r3, [r7, #23]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d138      	bne.n	8008de2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d74:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	330b      	adds	r3, #11
 8008d7a:	781a      	ldrb	r2, [r3, #0]
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	330b      	adds	r3, #11
 8008d80:	f042 0220 	orr.w	r2, r2, #32
 8008d84:	b2d2      	uxtb	r2, r2
 8008d86:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6818      	ldr	r0, [r3, #0]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	461a      	mov	r2, r3
 8008d92:	68f9      	ldr	r1, [r7, #12]
 8008d94:	f7fe fa41 	bl	800721a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f103 021c 	add.w	r2, r3, #28
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	68db      	ldr	r3, [r3, #12]
 8008da2:	4619      	mov	r1, r3
 8008da4:	4610      	mov	r0, r2
 8008da6:	f7fd fabb 	bl	8006320 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	3316      	adds	r3, #22
 8008dae:	6939      	ldr	r1, [r7, #16]
 8008db0:	4618      	mov	r0, r3
 8008db2:	f7fd fab5 	bl	8006320 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	3312      	adds	r3, #18
 8008dba:	2100      	movs	r1, #0
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f7fd fa94 	bl	80062ea <st_word>
					fs->wflag = 1;
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f7fd fd30 	bl	8006830 <sync_fs>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	7d1b      	ldrb	r3, [r3, #20]
 8008dd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ddc:	b2da      	uxtb	r2, r3
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008de2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3718      	adds	r7, #24
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f7ff ff7b 	bl	8008cf0 <f_sync>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008dfe:	7bfb      	ldrb	r3, [r7, #15]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d118      	bne.n	8008e36 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f107 0208 	add.w	r2, r7, #8
 8008e0a:	4611      	mov	r1, r2
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f7ff fa75 	bl	80082fc <validate>
 8008e12:	4603      	mov	r3, r0
 8008e14:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008e16:	7bfb      	ldrb	r3, [r7, #15]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d10c      	bne.n	8008e36 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	691b      	ldr	r3, [r3, #16]
 8008e20:	4618      	mov	r0, r3
 8008e22:	f7fd fc33 	bl	800668c <dec_lock>
 8008e26:	4603      	mov	r3, r0
 8008e28:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008e2a:	7bfb      	ldrb	r3, [r7, #15]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d102      	bne.n	8008e36 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3710      	adds	r7, #16
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b087      	sub	sp, #28
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	4613      	mov	r3, r2
 8008e4c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008e52:	2300      	movs	r3, #0
 8008e54:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008e56:	4b1f      	ldr	r3, [pc, #124]	@ (8008ed4 <FATFS_LinkDriverEx+0x94>)
 8008e58:	7a5b      	ldrb	r3, [r3, #9]
 8008e5a:	b2db      	uxtb	r3, r3
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d131      	bne.n	8008ec4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008e60:	4b1c      	ldr	r3, [pc, #112]	@ (8008ed4 <FATFS_LinkDriverEx+0x94>)
 8008e62:	7a5b      	ldrb	r3, [r3, #9]
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	461a      	mov	r2, r3
 8008e68:	4b1a      	ldr	r3, [pc, #104]	@ (8008ed4 <FATFS_LinkDriverEx+0x94>)
 8008e6a:	2100      	movs	r1, #0
 8008e6c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008e6e:	4b19      	ldr	r3, [pc, #100]	@ (8008ed4 <FATFS_LinkDriverEx+0x94>)
 8008e70:	7a5b      	ldrb	r3, [r3, #9]
 8008e72:	b2db      	uxtb	r3, r3
 8008e74:	4a17      	ldr	r2, [pc, #92]	@ (8008ed4 <FATFS_LinkDriverEx+0x94>)
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	4413      	add	r3, r2
 8008e7a:	68fa      	ldr	r2, [r7, #12]
 8008e7c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008e7e:	4b15      	ldr	r3, [pc, #84]	@ (8008ed4 <FATFS_LinkDriverEx+0x94>)
 8008e80:	7a5b      	ldrb	r3, [r3, #9]
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	461a      	mov	r2, r3
 8008e86:	4b13      	ldr	r3, [pc, #76]	@ (8008ed4 <FATFS_LinkDriverEx+0x94>)
 8008e88:	4413      	add	r3, r2
 8008e8a:	79fa      	ldrb	r2, [r7, #7]
 8008e8c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008e8e:	4b11      	ldr	r3, [pc, #68]	@ (8008ed4 <FATFS_LinkDriverEx+0x94>)
 8008e90:	7a5b      	ldrb	r3, [r3, #9]
 8008e92:	b2db      	uxtb	r3, r3
 8008e94:	1c5a      	adds	r2, r3, #1
 8008e96:	b2d1      	uxtb	r1, r2
 8008e98:	4a0e      	ldr	r2, [pc, #56]	@ (8008ed4 <FATFS_LinkDriverEx+0x94>)
 8008e9a:	7251      	strb	r1, [r2, #9]
 8008e9c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008e9e:	7dbb      	ldrb	r3, [r7, #22]
 8008ea0:	3330      	adds	r3, #48	@ 0x30
 8008ea2:	b2da      	uxtb	r2, r3
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	3301      	adds	r3, #1
 8008eac:	223a      	movs	r2, #58	@ 0x3a
 8008eae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	3302      	adds	r3, #2
 8008eb4:	222f      	movs	r2, #47	@ 0x2f
 8008eb6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	3303      	adds	r3, #3
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	371c      	adds	r7, #28
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr
 8008ed2:	bf00      	nop
 8008ed4:	20000780 	.word	0x20000780

08008ed8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	6839      	ldr	r1, [r7, #0]
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f7ff ffaa 	bl	8008e40 <FATFS_LinkDriverEx>
 8008eec:	4603      	mov	r3, r0
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3708      	adds	r7, #8
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
	...

08008ef8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b085      	sub	sp, #20
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	4603      	mov	r3, r0
 8008f00:	6039      	str	r1, [r7, #0]
 8008f02:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008f04:	88fb      	ldrh	r3, [r7, #6]
 8008f06:	2b7f      	cmp	r3, #127	@ 0x7f
 8008f08:	d802      	bhi.n	8008f10 <ff_convert+0x18>
		c = chr;
 8008f0a:	88fb      	ldrh	r3, [r7, #6]
 8008f0c:	81fb      	strh	r3, [r7, #14]
 8008f0e:	e025      	b.n	8008f5c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d00b      	beq.n	8008f2e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008f16:	88fb      	ldrh	r3, [r7, #6]
 8008f18:	2bff      	cmp	r3, #255	@ 0xff
 8008f1a:	d805      	bhi.n	8008f28 <ff_convert+0x30>
 8008f1c:	88fb      	ldrh	r3, [r7, #6]
 8008f1e:	3b80      	subs	r3, #128	@ 0x80
 8008f20:	4a12      	ldr	r2, [pc, #72]	@ (8008f6c <ff_convert+0x74>)
 8008f22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f26:	e000      	b.n	8008f2a <ff_convert+0x32>
 8008f28:	2300      	movs	r3, #0
 8008f2a:	81fb      	strh	r3, [r7, #14]
 8008f2c:	e016      	b.n	8008f5c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8008f2e:	2300      	movs	r3, #0
 8008f30:	81fb      	strh	r3, [r7, #14]
 8008f32:	e009      	b.n	8008f48 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008f34:	89fb      	ldrh	r3, [r7, #14]
 8008f36:	4a0d      	ldr	r2, [pc, #52]	@ (8008f6c <ff_convert+0x74>)
 8008f38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f3c:	88fa      	ldrh	r2, [r7, #6]
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d006      	beq.n	8008f50 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8008f42:	89fb      	ldrh	r3, [r7, #14]
 8008f44:	3301      	adds	r3, #1
 8008f46:	81fb      	strh	r3, [r7, #14]
 8008f48:	89fb      	ldrh	r3, [r7, #14]
 8008f4a:	2b7f      	cmp	r3, #127	@ 0x7f
 8008f4c:	d9f2      	bls.n	8008f34 <ff_convert+0x3c>
 8008f4e:	e000      	b.n	8008f52 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008f50:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8008f52:	89fb      	ldrh	r3, [r7, #14]
 8008f54:	3380      	adds	r3, #128	@ 0x80
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008f5c:	89fb      	ldrh	r3, [r7, #14]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3714      	adds	r7, #20
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr
 8008f6a:	bf00      	nop
 8008f6c:	08009484 	.word	0x08009484

08008f70 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b087      	sub	sp, #28
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	4603      	mov	r3, r0
 8008f78:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8008f7a:	88fb      	ldrh	r3, [r7, #6]
 8008f7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f80:	d201      	bcs.n	8008f86 <ff_wtoupper+0x16>
 8008f82:	4b3e      	ldr	r3, [pc, #248]	@ (800907c <ff_wtoupper+0x10c>)
 8008f84:	e000      	b.n	8008f88 <ff_wtoupper+0x18>
 8008f86:	4b3e      	ldr	r3, [pc, #248]	@ (8009080 <ff_wtoupper+0x110>)
 8008f88:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	1c9a      	adds	r2, r3, #2
 8008f8e:	617a      	str	r2, [r7, #20]
 8008f90:	881b      	ldrh	r3, [r3, #0]
 8008f92:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8008f94:	8a7b      	ldrh	r3, [r7, #18]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d068      	beq.n	800906c <ff_wtoupper+0xfc>
 8008f9a:	88fa      	ldrh	r2, [r7, #6]
 8008f9c:	8a7b      	ldrh	r3, [r7, #18]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d364      	bcc.n	800906c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	1c9a      	adds	r2, r3, #2
 8008fa6:	617a      	str	r2, [r7, #20]
 8008fa8:	881b      	ldrh	r3, [r3, #0]
 8008faa:	823b      	strh	r3, [r7, #16]
 8008fac:	8a3b      	ldrh	r3, [r7, #16]
 8008fae:	0a1b      	lsrs	r3, r3, #8
 8008fb0:	81fb      	strh	r3, [r7, #14]
 8008fb2:	8a3b      	ldrh	r3, [r7, #16]
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8008fb8:	88fa      	ldrh	r2, [r7, #6]
 8008fba:	8a79      	ldrh	r1, [r7, #18]
 8008fbc:	8a3b      	ldrh	r3, [r7, #16]
 8008fbe:	440b      	add	r3, r1
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	da49      	bge.n	8009058 <ff_wtoupper+0xe8>
			switch (cmd) {
 8008fc4:	89fb      	ldrh	r3, [r7, #14]
 8008fc6:	2b08      	cmp	r3, #8
 8008fc8:	d84f      	bhi.n	800906a <ff_wtoupper+0xfa>
 8008fca:	a201      	add	r2, pc, #4	@ (adr r2, 8008fd0 <ff_wtoupper+0x60>)
 8008fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd0:	08008ff5 	.word	0x08008ff5
 8008fd4:	08009007 	.word	0x08009007
 8008fd8:	0800901d 	.word	0x0800901d
 8008fdc:	08009025 	.word	0x08009025
 8008fe0:	0800902d 	.word	0x0800902d
 8008fe4:	08009035 	.word	0x08009035
 8008fe8:	0800903d 	.word	0x0800903d
 8008fec:	08009045 	.word	0x08009045
 8008ff0:	0800904d 	.word	0x0800904d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008ff4:	88fa      	ldrh	r2, [r7, #6]
 8008ff6:	8a7b      	ldrh	r3, [r7, #18]
 8008ff8:	1ad3      	subs	r3, r2, r3
 8008ffa:	005b      	lsls	r3, r3, #1
 8008ffc:	697a      	ldr	r2, [r7, #20]
 8008ffe:	4413      	add	r3, r2
 8009000:	881b      	ldrh	r3, [r3, #0]
 8009002:	80fb      	strh	r3, [r7, #6]
 8009004:	e027      	b.n	8009056 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8009006:	88fa      	ldrh	r2, [r7, #6]
 8009008:	8a7b      	ldrh	r3, [r7, #18]
 800900a:	1ad3      	subs	r3, r2, r3
 800900c:	b29b      	uxth	r3, r3
 800900e:	f003 0301 	and.w	r3, r3, #1
 8009012:	b29b      	uxth	r3, r3
 8009014:	88fa      	ldrh	r2, [r7, #6]
 8009016:	1ad3      	subs	r3, r2, r3
 8009018:	80fb      	strh	r3, [r7, #6]
 800901a:	e01c      	b.n	8009056 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800901c:	88fb      	ldrh	r3, [r7, #6]
 800901e:	3b10      	subs	r3, #16
 8009020:	80fb      	strh	r3, [r7, #6]
 8009022:	e018      	b.n	8009056 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8009024:	88fb      	ldrh	r3, [r7, #6]
 8009026:	3b20      	subs	r3, #32
 8009028:	80fb      	strh	r3, [r7, #6]
 800902a:	e014      	b.n	8009056 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800902c:	88fb      	ldrh	r3, [r7, #6]
 800902e:	3b30      	subs	r3, #48	@ 0x30
 8009030:	80fb      	strh	r3, [r7, #6]
 8009032:	e010      	b.n	8009056 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8009034:	88fb      	ldrh	r3, [r7, #6]
 8009036:	3b1a      	subs	r3, #26
 8009038:	80fb      	strh	r3, [r7, #6]
 800903a:	e00c      	b.n	8009056 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800903c:	88fb      	ldrh	r3, [r7, #6]
 800903e:	3308      	adds	r3, #8
 8009040:	80fb      	strh	r3, [r7, #6]
 8009042:	e008      	b.n	8009056 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8009044:	88fb      	ldrh	r3, [r7, #6]
 8009046:	3b50      	subs	r3, #80	@ 0x50
 8009048:	80fb      	strh	r3, [r7, #6]
 800904a:	e004      	b.n	8009056 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800904c:	88fb      	ldrh	r3, [r7, #6]
 800904e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8009052:	80fb      	strh	r3, [r7, #6]
 8009054:	bf00      	nop
			}
			break;
 8009056:	e008      	b.n	800906a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8009058:	89fb      	ldrh	r3, [r7, #14]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d195      	bne.n	8008f8a <ff_wtoupper+0x1a>
 800905e:	8a3b      	ldrh	r3, [r7, #16]
 8009060:	005b      	lsls	r3, r3, #1
 8009062:	697a      	ldr	r2, [r7, #20]
 8009064:	4413      	add	r3, r2
 8009066:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8009068:	e78f      	b.n	8008f8a <ff_wtoupper+0x1a>
			break;
 800906a:	bf00      	nop
	}

	return chr;
 800906c:	88fb      	ldrh	r3, [r7, #6]
}
 800906e:	4618      	mov	r0, r3
 8009070:	371c      	adds	r7, #28
 8009072:	46bd      	mov	sp, r7
 8009074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009078:	4770      	bx	lr
 800907a:	bf00      	nop
 800907c:	08009584 	.word	0x08009584
 8009080:	08009778 	.word	0x08009778

08009084 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 f811 	bl	80090b4 <malloc>
 8009092:	4603      	mov	r3, r0
}
 8009094:	4618      	mov	r0, r3
 8009096:	3708      	adds	r7, #8
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f000 f80d 	bl	80090c4 <free>
}
 80090aa:	bf00      	nop
 80090ac:	3708      	adds	r7, #8
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
	...

080090b4 <malloc>:
 80090b4:	4b02      	ldr	r3, [pc, #8]	@ (80090c0 <malloc+0xc>)
 80090b6:	4601      	mov	r1, r0
 80090b8:	6818      	ldr	r0, [r3, #0]
 80090ba:	f000 b82d 	b.w	8009118 <_malloc_r>
 80090be:	bf00      	nop
 80090c0:	2000000c 	.word	0x2000000c

080090c4 <free>:
 80090c4:	4b02      	ldr	r3, [pc, #8]	@ (80090d0 <free+0xc>)
 80090c6:	4601      	mov	r1, r0
 80090c8:	6818      	ldr	r0, [r3, #0]
 80090ca:	f000 b8f5 	b.w	80092b8 <_free_r>
 80090ce:	bf00      	nop
 80090d0:	2000000c 	.word	0x2000000c

080090d4 <sbrk_aligned>:
 80090d4:	b570      	push	{r4, r5, r6, lr}
 80090d6:	4e0f      	ldr	r6, [pc, #60]	@ (8009114 <sbrk_aligned+0x40>)
 80090d8:	460c      	mov	r4, r1
 80090da:	6831      	ldr	r1, [r6, #0]
 80090dc:	4605      	mov	r5, r0
 80090de:	b911      	cbnz	r1, 80090e6 <sbrk_aligned+0x12>
 80090e0:	f000 f8ae 	bl	8009240 <_sbrk_r>
 80090e4:	6030      	str	r0, [r6, #0]
 80090e6:	4621      	mov	r1, r4
 80090e8:	4628      	mov	r0, r5
 80090ea:	f000 f8a9 	bl	8009240 <_sbrk_r>
 80090ee:	1c43      	adds	r3, r0, #1
 80090f0:	d103      	bne.n	80090fa <sbrk_aligned+0x26>
 80090f2:	f04f 34ff 	mov.w	r4, #4294967295
 80090f6:	4620      	mov	r0, r4
 80090f8:	bd70      	pop	{r4, r5, r6, pc}
 80090fa:	1cc4      	adds	r4, r0, #3
 80090fc:	f024 0403 	bic.w	r4, r4, #3
 8009100:	42a0      	cmp	r0, r4
 8009102:	d0f8      	beq.n	80090f6 <sbrk_aligned+0x22>
 8009104:	1a21      	subs	r1, r4, r0
 8009106:	4628      	mov	r0, r5
 8009108:	f000 f89a 	bl	8009240 <_sbrk_r>
 800910c:	3001      	adds	r0, #1
 800910e:	d1f2      	bne.n	80090f6 <sbrk_aligned+0x22>
 8009110:	e7ef      	b.n	80090f2 <sbrk_aligned+0x1e>
 8009112:	bf00      	nop
 8009114:	2000078c 	.word	0x2000078c

08009118 <_malloc_r>:
 8009118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800911c:	1ccd      	adds	r5, r1, #3
 800911e:	f025 0503 	bic.w	r5, r5, #3
 8009122:	3508      	adds	r5, #8
 8009124:	2d0c      	cmp	r5, #12
 8009126:	bf38      	it	cc
 8009128:	250c      	movcc	r5, #12
 800912a:	2d00      	cmp	r5, #0
 800912c:	4606      	mov	r6, r0
 800912e:	db01      	blt.n	8009134 <_malloc_r+0x1c>
 8009130:	42a9      	cmp	r1, r5
 8009132:	d904      	bls.n	800913e <_malloc_r+0x26>
 8009134:	230c      	movs	r3, #12
 8009136:	6033      	str	r3, [r6, #0]
 8009138:	2000      	movs	r0, #0
 800913a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800913e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009214 <_malloc_r+0xfc>
 8009142:	f000 f869 	bl	8009218 <__malloc_lock>
 8009146:	f8d8 3000 	ldr.w	r3, [r8]
 800914a:	461c      	mov	r4, r3
 800914c:	bb44      	cbnz	r4, 80091a0 <_malloc_r+0x88>
 800914e:	4629      	mov	r1, r5
 8009150:	4630      	mov	r0, r6
 8009152:	f7ff ffbf 	bl	80090d4 <sbrk_aligned>
 8009156:	1c43      	adds	r3, r0, #1
 8009158:	4604      	mov	r4, r0
 800915a:	d158      	bne.n	800920e <_malloc_r+0xf6>
 800915c:	f8d8 4000 	ldr.w	r4, [r8]
 8009160:	4627      	mov	r7, r4
 8009162:	2f00      	cmp	r7, #0
 8009164:	d143      	bne.n	80091ee <_malloc_r+0xd6>
 8009166:	2c00      	cmp	r4, #0
 8009168:	d04b      	beq.n	8009202 <_malloc_r+0xea>
 800916a:	6823      	ldr	r3, [r4, #0]
 800916c:	4639      	mov	r1, r7
 800916e:	4630      	mov	r0, r6
 8009170:	eb04 0903 	add.w	r9, r4, r3
 8009174:	f000 f864 	bl	8009240 <_sbrk_r>
 8009178:	4581      	cmp	r9, r0
 800917a:	d142      	bne.n	8009202 <_malloc_r+0xea>
 800917c:	6821      	ldr	r1, [r4, #0]
 800917e:	1a6d      	subs	r5, r5, r1
 8009180:	4629      	mov	r1, r5
 8009182:	4630      	mov	r0, r6
 8009184:	f7ff ffa6 	bl	80090d4 <sbrk_aligned>
 8009188:	3001      	adds	r0, #1
 800918a:	d03a      	beq.n	8009202 <_malloc_r+0xea>
 800918c:	6823      	ldr	r3, [r4, #0]
 800918e:	442b      	add	r3, r5
 8009190:	6023      	str	r3, [r4, #0]
 8009192:	f8d8 3000 	ldr.w	r3, [r8]
 8009196:	685a      	ldr	r2, [r3, #4]
 8009198:	bb62      	cbnz	r2, 80091f4 <_malloc_r+0xdc>
 800919a:	f8c8 7000 	str.w	r7, [r8]
 800919e:	e00f      	b.n	80091c0 <_malloc_r+0xa8>
 80091a0:	6822      	ldr	r2, [r4, #0]
 80091a2:	1b52      	subs	r2, r2, r5
 80091a4:	d420      	bmi.n	80091e8 <_malloc_r+0xd0>
 80091a6:	2a0b      	cmp	r2, #11
 80091a8:	d917      	bls.n	80091da <_malloc_r+0xc2>
 80091aa:	1961      	adds	r1, r4, r5
 80091ac:	42a3      	cmp	r3, r4
 80091ae:	6025      	str	r5, [r4, #0]
 80091b0:	bf18      	it	ne
 80091b2:	6059      	strne	r1, [r3, #4]
 80091b4:	6863      	ldr	r3, [r4, #4]
 80091b6:	bf08      	it	eq
 80091b8:	f8c8 1000 	streq.w	r1, [r8]
 80091bc:	5162      	str	r2, [r4, r5]
 80091be:	604b      	str	r3, [r1, #4]
 80091c0:	4630      	mov	r0, r6
 80091c2:	f000 f82f 	bl	8009224 <__malloc_unlock>
 80091c6:	f104 000b 	add.w	r0, r4, #11
 80091ca:	1d23      	adds	r3, r4, #4
 80091cc:	f020 0007 	bic.w	r0, r0, #7
 80091d0:	1ac2      	subs	r2, r0, r3
 80091d2:	bf1c      	itt	ne
 80091d4:	1a1b      	subne	r3, r3, r0
 80091d6:	50a3      	strne	r3, [r4, r2]
 80091d8:	e7af      	b.n	800913a <_malloc_r+0x22>
 80091da:	6862      	ldr	r2, [r4, #4]
 80091dc:	42a3      	cmp	r3, r4
 80091de:	bf0c      	ite	eq
 80091e0:	f8c8 2000 	streq.w	r2, [r8]
 80091e4:	605a      	strne	r2, [r3, #4]
 80091e6:	e7eb      	b.n	80091c0 <_malloc_r+0xa8>
 80091e8:	4623      	mov	r3, r4
 80091ea:	6864      	ldr	r4, [r4, #4]
 80091ec:	e7ae      	b.n	800914c <_malloc_r+0x34>
 80091ee:	463c      	mov	r4, r7
 80091f0:	687f      	ldr	r7, [r7, #4]
 80091f2:	e7b6      	b.n	8009162 <_malloc_r+0x4a>
 80091f4:	461a      	mov	r2, r3
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	42a3      	cmp	r3, r4
 80091fa:	d1fb      	bne.n	80091f4 <_malloc_r+0xdc>
 80091fc:	2300      	movs	r3, #0
 80091fe:	6053      	str	r3, [r2, #4]
 8009200:	e7de      	b.n	80091c0 <_malloc_r+0xa8>
 8009202:	230c      	movs	r3, #12
 8009204:	6033      	str	r3, [r6, #0]
 8009206:	4630      	mov	r0, r6
 8009208:	f000 f80c 	bl	8009224 <__malloc_unlock>
 800920c:	e794      	b.n	8009138 <_malloc_r+0x20>
 800920e:	6005      	str	r5, [r0, #0]
 8009210:	e7d6      	b.n	80091c0 <_malloc_r+0xa8>
 8009212:	bf00      	nop
 8009214:	20000790 	.word	0x20000790

08009218 <__malloc_lock>:
 8009218:	4801      	ldr	r0, [pc, #4]	@ (8009220 <__malloc_lock+0x8>)
 800921a:	f000 b84b 	b.w	80092b4 <__retarget_lock_acquire_recursive>
 800921e:	bf00      	nop
 8009220:	200008d0 	.word	0x200008d0

08009224 <__malloc_unlock>:
 8009224:	4801      	ldr	r0, [pc, #4]	@ (800922c <__malloc_unlock+0x8>)
 8009226:	f000 b846 	b.w	80092b6 <__retarget_lock_release_recursive>
 800922a:	bf00      	nop
 800922c:	200008d0 	.word	0x200008d0

08009230 <memset>:
 8009230:	4402      	add	r2, r0
 8009232:	4603      	mov	r3, r0
 8009234:	4293      	cmp	r3, r2
 8009236:	d100      	bne.n	800923a <memset+0xa>
 8009238:	4770      	bx	lr
 800923a:	f803 1b01 	strb.w	r1, [r3], #1
 800923e:	e7f9      	b.n	8009234 <memset+0x4>

08009240 <_sbrk_r>:
 8009240:	b538      	push	{r3, r4, r5, lr}
 8009242:	4d06      	ldr	r5, [pc, #24]	@ (800925c <_sbrk_r+0x1c>)
 8009244:	2300      	movs	r3, #0
 8009246:	4604      	mov	r4, r0
 8009248:	4608      	mov	r0, r1
 800924a:	602b      	str	r3, [r5, #0]
 800924c:	f7f8 fa7a 	bl	8001744 <_sbrk>
 8009250:	1c43      	adds	r3, r0, #1
 8009252:	d102      	bne.n	800925a <_sbrk_r+0x1a>
 8009254:	682b      	ldr	r3, [r5, #0]
 8009256:	b103      	cbz	r3, 800925a <_sbrk_r+0x1a>
 8009258:	6023      	str	r3, [r4, #0]
 800925a:	bd38      	pop	{r3, r4, r5, pc}
 800925c:	200008cc 	.word	0x200008cc

08009260 <__errno>:
 8009260:	4b01      	ldr	r3, [pc, #4]	@ (8009268 <__errno+0x8>)
 8009262:	6818      	ldr	r0, [r3, #0]
 8009264:	4770      	bx	lr
 8009266:	bf00      	nop
 8009268:	2000000c 	.word	0x2000000c

0800926c <__libc_init_array>:
 800926c:	b570      	push	{r4, r5, r6, lr}
 800926e:	4d0d      	ldr	r5, [pc, #52]	@ (80092a4 <__libc_init_array+0x38>)
 8009270:	4c0d      	ldr	r4, [pc, #52]	@ (80092a8 <__libc_init_array+0x3c>)
 8009272:	1b64      	subs	r4, r4, r5
 8009274:	10a4      	asrs	r4, r4, #2
 8009276:	2600      	movs	r6, #0
 8009278:	42a6      	cmp	r6, r4
 800927a:	d109      	bne.n	8009290 <__libc_init_array+0x24>
 800927c:	4d0b      	ldr	r5, [pc, #44]	@ (80092ac <__libc_init_array+0x40>)
 800927e:	4c0c      	ldr	r4, [pc, #48]	@ (80092b0 <__libc_init_array+0x44>)
 8009280:	f000 f864 	bl	800934c <_init>
 8009284:	1b64      	subs	r4, r4, r5
 8009286:	10a4      	asrs	r4, r4, #2
 8009288:	2600      	movs	r6, #0
 800928a:	42a6      	cmp	r6, r4
 800928c:	d105      	bne.n	800929a <__libc_init_array+0x2e>
 800928e:	bd70      	pop	{r4, r5, r6, pc}
 8009290:	f855 3b04 	ldr.w	r3, [r5], #4
 8009294:	4798      	blx	r3
 8009296:	3601      	adds	r6, #1
 8009298:	e7ee      	b.n	8009278 <__libc_init_array+0xc>
 800929a:	f855 3b04 	ldr.w	r3, [r5], #4
 800929e:	4798      	blx	r3
 80092a0:	3601      	adds	r6, #1
 80092a2:	e7f2      	b.n	800928a <__libc_init_array+0x1e>
 80092a4:	0800983c 	.word	0x0800983c
 80092a8:	0800983c 	.word	0x0800983c
 80092ac:	0800983c 	.word	0x0800983c
 80092b0:	08009840 	.word	0x08009840

080092b4 <__retarget_lock_acquire_recursive>:
 80092b4:	4770      	bx	lr

080092b6 <__retarget_lock_release_recursive>:
 80092b6:	4770      	bx	lr

080092b8 <_free_r>:
 80092b8:	b538      	push	{r3, r4, r5, lr}
 80092ba:	4605      	mov	r5, r0
 80092bc:	2900      	cmp	r1, #0
 80092be:	d041      	beq.n	8009344 <_free_r+0x8c>
 80092c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092c4:	1f0c      	subs	r4, r1, #4
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	bfb8      	it	lt
 80092ca:	18e4      	addlt	r4, r4, r3
 80092cc:	f7ff ffa4 	bl	8009218 <__malloc_lock>
 80092d0:	4a1d      	ldr	r2, [pc, #116]	@ (8009348 <_free_r+0x90>)
 80092d2:	6813      	ldr	r3, [r2, #0]
 80092d4:	b933      	cbnz	r3, 80092e4 <_free_r+0x2c>
 80092d6:	6063      	str	r3, [r4, #4]
 80092d8:	6014      	str	r4, [r2, #0]
 80092da:	4628      	mov	r0, r5
 80092dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092e0:	f7ff bfa0 	b.w	8009224 <__malloc_unlock>
 80092e4:	42a3      	cmp	r3, r4
 80092e6:	d908      	bls.n	80092fa <_free_r+0x42>
 80092e8:	6820      	ldr	r0, [r4, #0]
 80092ea:	1821      	adds	r1, r4, r0
 80092ec:	428b      	cmp	r3, r1
 80092ee:	bf01      	itttt	eq
 80092f0:	6819      	ldreq	r1, [r3, #0]
 80092f2:	685b      	ldreq	r3, [r3, #4]
 80092f4:	1809      	addeq	r1, r1, r0
 80092f6:	6021      	streq	r1, [r4, #0]
 80092f8:	e7ed      	b.n	80092d6 <_free_r+0x1e>
 80092fa:	461a      	mov	r2, r3
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	b10b      	cbz	r3, 8009304 <_free_r+0x4c>
 8009300:	42a3      	cmp	r3, r4
 8009302:	d9fa      	bls.n	80092fa <_free_r+0x42>
 8009304:	6811      	ldr	r1, [r2, #0]
 8009306:	1850      	adds	r0, r2, r1
 8009308:	42a0      	cmp	r0, r4
 800930a:	d10b      	bne.n	8009324 <_free_r+0x6c>
 800930c:	6820      	ldr	r0, [r4, #0]
 800930e:	4401      	add	r1, r0
 8009310:	1850      	adds	r0, r2, r1
 8009312:	4283      	cmp	r3, r0
 8009314:	6011      	str	r1, [r2, #0]
 8009316:	d1e0      	bne.n	80092da <_free_r+0x22>
 8009318:	6818      	ldr	r0, [r3, #0]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	6053      	str	r3, [r2, #4]
 800931e:	4408      	add	r0, r1
 8009320:	6010      	str	r0, [r2, #0]
 8009322:	e7da      	b.n	80092da <_free_r+0x22>
 8009324:	d902      	bls.n	800932c <_free_r+0x74>
 8009326:	230c      	movs	r3, #12
 8009328:	602b      	str	r3, [r5, #0]
 800932a:	e7d6      	b.n	80092da <_free_r+0x22>
 800932c:	6820      	ldr	r0, [r4, #0]
 800932e:	1821      	adds	r1, r4, r0
 8009330:	428b      	cmp	r3, r1
 8009332:	bf04      	itt	eq
 8009334:	6819      	ldreq	r1, [r3, #0]
 8009336:	685b      	ldreq	r3, [r3, #4]
 8009338:	6063      	str	r3, [r4, #4]
 800933a:	bf04      	itt	eq
 800933c:	1809      	addeq	r1, r1, r0
 800933e:	6021      	streq	r1, [r4, #0]
 8009340:	6054      	str	r4, [r2, #4]
 8009342:	e7ca      	b.n	80092da <_free_r+0x22>
 8009344:	bd38      	pop	{r3, r4, r5, pc}
 8009346:	bf00      	nop
 8009348:	20000790 	.word	0x20000790

0800934c <_init>:
 800934c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800934e:	bf00      	nop
 8009350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009352:	bc08      	pop	{r3}
 8009354:	469e      	mov	lr, r3
 8009356:	4770      	bx	lr

08009358 <_fini>:
 8009358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800935a:	bf00      	nop
 800935c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800935e:	bc08      	pop	{r3}
 8009360:	469e      	mov	lr, r3
 8009362:	4770      	bx	lr
