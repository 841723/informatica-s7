
SdImageDisplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069b0  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08006b78  08006b78  00007b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ba4  08006ba4  00008010  2**0
                  CONTENTS
  4 .ARM          00000008  08006ba4  08006ba4  00007ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006bac  08006bac  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bac  08006bac  00007bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006bb0  08006bb0  00007bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08006bb4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  20000010  08006bc4  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00005000  20000370  08006bc4  00008370  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000113f1  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e9e  00000000  00000000  00019431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  0001c2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ae5  00000000  00000000  0001d160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003545  00000000  00000000  0001dc45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013087  00000000  00000000  0002118a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef6e3  00000000  00000000  00034211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001238f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a90  00000000  00000000  00123938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  001273c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000010 	.word	0x20000010
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006b60 	.word	0x08006b60

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000014 	.word	0x20000014
 8000204:	08006b60 	.word	0x08006b60

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <MPU_Config>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//
void MPU_Config(void) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
    MPU_Region_InitTypeDef MPU_InitStruct;

    HAL_MPU_Disable();
 80004fe:	f001 fce5 	bl	8001ecc <HAL_MPU_Disable>

    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000502:	2301      	movs	r3, #1
 8000504:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0xC0000000;  // Dirección base SDRAM
 8000506:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800050a:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_8MB; // Tamaño de la SDRAM
 800050c:	2316      	movs	r3, #22
 800050e:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000510:	2303      	movs	r3, #3
 8000512:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000514:	2300      	movs	r3, #0
 8000516:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000518:	2301      	movs	r3, #1
 800051a:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800051c:	2300      	movs	r3, #0
 800051e:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000520:	2300      	movs	r3, #0
 8000522:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000524:	2300      	movs	r3, #0
 8000526:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8000528:	2300      	movs	r3, #0
 800052a:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800052c:	2301      	movs	r3, #1
 800052e:	733b      	strb	r3, [r7, #12]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000530:	463b      	mov	r3, r7
 8000532:	4618      	mov	r0, r3
 8000534:	f001 fd02 	bl	8001f3c <HAL_MPU_ConfigRegion>

    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000538:	2004      	movs	r0, #4
 800053a:	f001 fcdf 	bl	8001efc <HAL_MPU_Enable>
}
 800053e:	bf00      	nop
 8000540:	3710      	adds	r7, #16
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
	...

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b086      	sub	sp, #24
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054e:	f001 fb29 	bl	8001ba4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000552:	f000 f873 	bl	800063c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MPU_Config();
 8000556:	f7ff ffcf 	bl	80004f8 <MPU_Config>
  BSP_SDRAM_Init();
 800055a:	f001 f96d 	bl	8001838 <BSP_SDRAM_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055e:	f000 fa1f 	bl	80009a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000562:	f000 f9a7 	bl	80008b4 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8000566:	f000 f985 	bl	8000874 <MX_SDMMC1_SD_Init>
  MX_FMC_Init();
 800056a:	f000 f9c9 	bl	8000900 <MX_FMC_Init>
  MX_FATFS_Init();
 800056e:	f006 f823 	bl	80065b8 <MX_FATFS_Init>
  MX_DMA2D_Init();
 8000572:	f000 f8cb 	bl	800070c <MX_DMA2D_Init>
  MX_LTDC_Init();
 8000576:	f000 f8fb 	bl	8000770 <MX_LTDC_Init>

//  LTDC_LayerCfgTypeDef LayerConfig;
//  HAL_LTDC_ConfigLayer(&hltdc, &LayerConfig, 0); // Configura la capa


  *((volatile uint32_t*)0xC0000000) = 0x12345678;
 800057a:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800057e:	4a2d      	ldr	r2, [pc, #180]	@ (8000634 <main+0xec>)
 8000580:	601a      	str	r2, [r3, #0]
  uint32_t value = *((volatile uint32_t*)FRAMEBUFFER_ADDR);
 8000582:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	60fb      	str	r3, [r7, #12]
  value += 1;
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	3301      	adds	r3, #1
 800058e:	60fb      	str	r3, [r7, #12]

#define SCREEN_HEIGHT 272
#define SCREEN_WIDTH 480
  __HAL_LTDC_LAYER_ENABLE(&hltdc, 0);
 8000590:	4b29      	ldr	r3, [pc, #164]	@ (8000638 <main+0xf0>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	3384      	adds	r3, #132	@ 0x84
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a27      	ldr	r2, [pc, #156]	@ (8000638 <main+0xf0>)
 800059a:	6812      	ldr	r2, [r2, #0]
 800059c:	3284      	adds	r2, #132	@ 0x84
 800059e:	f043 0301 	orr.w	r3, r3, #1
 80005a2:	6013      	str	r3, [r2, #0]
  HAL_LTDC_Reload(&hltdc, LTDC_RELOAD_IMMEDIATE);
 80005a4:	2101      	movs	r1, #1
 80005a6:	4824      	ldr	r0, [pc, #144]	@ (8000638 <main+0xf0>)
 80005a8:	f002 fde4 	bl	8003174 <HAL_LTDC_Reload>

  uint8_t *framebuffer = (uint8_t *)FRAMEBUFFER_ADDR;
 80005ac:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 80005b0:	60bb      	str	r3, [r7, #8]

      for (uint32_t y = 0; y < SCREEN_HEIGHT; y++) {
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]
 80005b6:	e029      	b.n	800060c <main+0xc4>
          for (uint32_t x = 0; x < SCREEN_WIDTH; x++) {
 80005b8:	2300      	movs	r3, #0
 80005ba:	613b      	str	r3, [r7, #16]
 80005bc:	e01f      	b.n	80005fe <main+0xb6>
              uint32_t pixel_index = (y * SCREEN_WIDTH + x) * 3; // Cada píxel ocupa 3 bytes (RGB888)
 80005be:	697a      	ldr	r2, [r7, #20]
 80005c0:	4613      	mov	r3, r2
 80005c2:	011b      	lsls	r3, r3, #4
 80005c4:	1a9b      	subs	r3, r3, r2
 80005c6:	015b      	lsls	r3, r3, #5
 80005c8:	461a      	mov	r2, r3
 80005ca:	693b      	ldr	r3, [r7, #16]
 80005cc:	441a      	add	r2, r3
 80005ce:	4613      	mov	r3, r2
 80005d0:	005b      	lsls	r3, r3, #1
 80005d2:	4413      	add	r3, r2
 80005d4:	607b      	str	r3, [r7, #4]

              framebuffer[pixel_index + 0] = 0x00; // Componente azul (Blue)
 80005d6:	68ba      	ldr	r2, [r7, #8]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	4413      	add	r3, r2
 80005dc:	2200      	movs	r2, #0
 80005de:	701a      	strb	r2, [r3, #0]
              framebuffer[pixel_index + 1] = 0xFF; // Componente verde (Green)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	3301      	adds	r3, #1
 80005e4:	68ba      	ldr	r2, [r7, #8]
 80005e6:	4413      	add	r3, r2
 80005e8:	22ff      	movs	r2, #255	@ 0xff
 80005ea:	701a      	strb	r2, [r3, #0]
              framebuffer[pixel_index + 2] = 0x00; // Componente rojo (Red)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	3302      	adds	r3, #2
 80005f0:	68ba      	ldr	r2, [r7, #8]
 80005f2:	4413      	add	r3, r2
 80005f4:	2200      	movs	r2, #0
 80005f6:	701a      	strb	r2, [r3, #0]
          for (uint32_t x = 0; x < SCREEN_WIDTH; x++) {
 80005f8:	693b      	ldr	r3, [r7, #16]
 80005fa:	3301      	adds	r3, #1
 80005fc:	613b      	str	r3, [r7, #16]
 80005fe:	693b      	ldr	r3, [r7, #16]
 8000600:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000604:	d3db      	bcc.n	80005be <main+0x76>
      for (uint32_t y = 0; y < SCREEN_HEIGHT; y++) {
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	3301      	adds	r3, #1
 800060a:	617b      	str	r3, [r7, #20]
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 8000612:	d3d1      	bcc.n	80005b8 <main+0x70>
          }
      }

      __HAL_LTDC_LAYER_ENABLE(&hltdc, 0);
 8000614:	4b08      	ldr	r3, [pc, #32]	@ (8000638 <main+0xf0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	3384      	adds	r3, #132	@ 0x84
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a06      	ldr	r2, [pc, #24]	@ (8000638 <main+0xf0>)
 800061e:	6812      	ldr	r2, [r2, #0]
 8000620:	3284      	adds	r2, #132	@ 0x84
 8000622:	f043 0301 	orr.w	r3, r3, #1
 8000626:	6013      	str	r3, [r2, #0]
      HAL_LTDC_Reload(&hltdc, LTDC_RELOAD_IMMEDIATE);
 8000628:	2101      	movs	r1, #1
 800062a:	4803      	ldr	r0, [pc, #12]	@ (8000638 <main+0xf0>)
 800062c:	f002 fda2 	bl	8003174 <HAL_LTDC_Reload>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000630:	bf00      	nop
 8000632:	e7fd      	b.n	8000630 <main+0xe8>
 8000634:	12345678 	.word	0x12345678
 8000638:	2000006c 	.word	0x2000006c

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	@ 0x50
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	2230      	movs	r2, #48	@ 0x30
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f006 fa5b 	bl	8006b06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000660:	4b28      	ldr	r3, [pc, #160]	@ (8000704 <SystemClock_Config+0xc8>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000664:	4a27      	ldr	r2, [pc, #156]	@ (8000704 <SystemClock_Config+0xc8>)
 8000666:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800066a:	6413      	str	r3, [r2, #64]	@ 0x40
 800066c:	4b25      	ldr	r3, [pc, #148]	@ (8000704 <SystemClock_Config+0xc8>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000670:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000678:	4b23      	ldr	r3, [pc, #140]	@ (8000708 <SystemClock_Config+0xcc>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000680:	4a21      	ldr	r2, [pc, #132]	@ (8000708 <SystemClock_Config+0xcc>)
 8000682:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	4b1f      	ldr	r3, [pc, #124]	@ (8000708 <SystemClock_Config+0xcc>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000694:	2302      	movs	r3, #2
 8000696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000698:	2301      	movs	r3, #1
 800069a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069c:	2310      	movs	r3, #16
 800069e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a0:	2302      	movs	r3, #2
 80006a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a4:	2300      	movs	r3, #0
 80006a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006a8:	2308      	movs	r3, #8
 80006aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80006ac:	2364      	movs	r3, #100	@ 0x64
 80006ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006b4:	2304      	movs	r3, #4
 80006b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 0320 	add.w	r3, r7, #32
 80006bc:	4618      	mov	r0, r3
 80006be:	f002 ff23 	bl	8003508 <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80006c8:	f000 fd20 	bl	800110c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2302      	movs	r3, #2
 80006d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80006d8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80006dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 80006de:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80006e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	2103      	movs	r1, #3
 80006ea:	4618      	mov	r0, r3
 80006ec:	f003 f9b0 	bl	8003a50 <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80006f6:	f000 fd09 	bl	800110c <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3750      	adds	r7, #80	@ 0x50
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000

0800070c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000710:	4b15      	ldr	r3, [pc, #84]	@ (8000768 <MX_DMA2D_Init+0x5c>)
 8000712:	4a16      	ldr	r2, [pc, #88]	@ (800076c <MX_DMA2D_Init+0x60>)
 8000714:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000716:	4b14      	ldr	r3, [pc, #80]	@ (8000768 <MX_DMA2D_Init+0x5c>)
 8000718:	2200      	movs	r2, #0
 800071a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 800071c:	4b12      	ldr	r3, [pc, #72]	@ (8000768 <MX_DMA2D_Init+0x5c>)
 800071e:	2201      	movs	r2, #1
 8000720:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000722:	4b11      	ldr	r3, [pc, #68]	@ (8000768 <MX_DMA2D_Init+0x5c>)
 8000724:	2200      	movs	r2, #0
 8000726:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000728:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <MX_DMA2D_Init+0x5c>)
 800072a:	2200      	movs	r2, #0
 800072c:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_OUTPUT_RGB888;
 800072e:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <MX_DMA2D_Init+0x5c>)
 8000730:	2201      	movs	r2, #1
 8000732:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000734:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <MX_DMA2D_Init+0x5c>)
 8000736:	2200      	movs	r2, #0
 8000738:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800073a:	4b0b      	ldr	r3, [pc, #44]	@ (8000768 <MX_DMA2D_Init+0x5c>)
 800073c:	2200      	movs	r2, #0
 800073e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000740:	4809      	ldr	r0, [pc, #36]	@ (8000768 <MX_DMA2D_Init+0x5c>)
 8000742:	f002 f83f 	bl	80027c4 <HAL_DMA2D_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800074c:	f000 fcde 	bl	800110c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000750:	2101      	movs	r1, #1
 8000752:	4805      	ldr	r0, [pc, #20]	@ (8000768 <MX_DMA2D_Init+0x5c>)
 8000754:	f002 f990 	bl	8002a78 <HAL_DMA2D_ConfigLayer>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800075e:	f000 fcd5 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	2000002c 	.word	0x2000002c
 800076c:	4002b000 	.word	0x4002b000

08000770 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08e      	sub	sp, #56	@ 0x38
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	2234      	movs	r2, #52	@ 0x34
 800077a:	2100      	movs	r1, #0
 800077c:	4618      	mov	r0, r3
 800077e:	f006 f9c2 	bl	8006b06 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000782:	4b3a      	ldr	r3, [pc, #232]	@ (800086c <MX_LTDC_Init+0xfc>)
 8000784:	4a3a      	ldr	r2, [pc, #232]	@ (8000870 <MX_LTDC_Init+0x100>)
 8000786:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000788:	4b38      	ldr	r3, [pc, #224]	@ (800086c <MX_LTDC_Init+0xfc>)
 800078a:	2200      	movs	r2, #0
 800078c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800078e:	4b37      	ldr	r3, [pc, #220]	@ (800086c <MX_LTDC_Init+0xfc>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000794:	4b35      	ldr	r3, [pc, #212]	@ (800086c <MX_LTDC_Init+0xfc>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800079a:	4b34      	ldr	r3, [pc, #208]	@ (800086c <MX_LTDC_Init+0xfc>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80007a0:	4b32      	ldr	r3, [pc, #200]	@ (800086c <MX_LTDC_Init+0xfc>)
 80007a2:	2207      	movs	r2, #7
 80007a4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80007a6:	4b31      	ldr	r3, [pc, #196]	@ (800086c <MX_LTDC_Init+0xfc>)
 80007a8:	2203      	movs	r2, #3
 80007aa:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80007ac:	4b2f      	ldr	r3, [pc, #188]	@ (800086c <MX_LTDC_Init+0xfc>)
 80007ae:	220e      	movs	r2, #14
 80007b0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80007b2:	4b2e      	ldr	r3, [pc, #184]	@ (800086c <MX_LTDC_Init+0xfc>)
 80007b4:	2205      	movs	r2, #5
 80007b6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80007b8:	4b2c      	ldr	r3, [pc, #176]	@ (800086c <MX_LTDC_Init+0xfc>)
 80007ba:	f240 228e 	movw	r2, #654	@ 0x28e
 80007be:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80007c0:	4b2a      	ldr	r3, [pc, #168]	@ (800086c <MX_LTDC_Init+0xfc>)
 80007c2:	f240 12e5 	movw	r2, #485	@ 0x1e5
 80007c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 80007c8:	4b28      	ldr	r3, [pc, #160]	@ (800086c <MX_LTDC_Init+0xfc>)
 80007ca:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80007ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 80007d0:	4b26      	ldr	r3, [pc, #152]	@ (800086c <MX_LTDC_Init+0xfc>)
 80007d2:	f240 12e7 	movw	r2, #487	@ 0x1e7
 80007d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80007d8:	4b24      	ldr	r3, [pc, #144]	@ (800086c <MX_LTDC_Init+0xfc>)
 80007da:	2200      	movs	r2, #0
 80007dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80007e0:	4b22      	ldr	r3, [pc, #136]	@ (800086c <MX_LTDC_Init+0xfc>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80007e8:	4b20      	ldr	r3, [pc, #128]	@ (800086c <MX_LTDC_Init+0xfc>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80007f0:	481e      	ldr	r0, [pc, #120]	@ (800086c <MX_LTDC_Init+0xfc>)
 80007f2:	f002 fbb1 	bl	8002f58 <HAL_LTDC_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80007fc:	f000 fc86 	bl	800110c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000804:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000808:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800080e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8000812:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000814:	2301      	movs	r3, #1
 8000816:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000820:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000824:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000826:	2305      	movs	r3, #5
 8000828:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = FRAMEBUFFER_ADDR;
 800082a:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800082e:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = SCREEN_WIDTH;
 8000830:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000834:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = SCREEN_HEIGHT;
 8000836:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800083a:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2200      	movs	r2, #0
 8000852:	4619      	mov	r1, r3
 8000854:	4805      	ldr	r0, [pc, #20]	@ (800086c <MX_LTDC_Init+0xfc>)
 8000856:	f002 fc4f 	bl	80030f8 <HAL_LTDC_ConfigLayer>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000860:	f000 fc54 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	3738      	adds	r7, #56	@ 0x38
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	2000006c 	.word	0x2000006c
 8000870:	40016800 	.word	0x40016800

08000874 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000878:	4b0c      	ldr	r3, [pc, #48]	@ (80008ac <MX_SDMMC1_SD_Init+0x38>)
 800087a:	4a0d      	ldr	r2, [pc, #52]	@ (80008b0 <MX_SDMMC1_SD_Init+0x3c>)
 800087c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800087e:	4b0b      	ldr	r3, [pc, #44]	@ (80008ac <MX_SDMMC1_SD_Init+0x38>)
 8000880:	2200      	movs	r2, #0
 8000882:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000884:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <MX_SDMMC1_SD_Init+0x38>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800088a:	4b08      	ldr	r3, [pc, #32]	@ (80008ac <MX_SDMMC1_SD_Init+0x38>)
 800088c:	2200      	movs	r2, #0
 800088e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000890:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <MX_SDMMC1_SD_Init+0x38>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000896:	4b05      	ldr	r3, [pc, #20]	@ (80008ac <MX_SDMMC1_SD_Init+0x38>)
 8000898:	2200      	movs	r2, #0
 800089a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800089c:	4b03      	ldr	r3, [pc, #12]	@ (80008ac <MX_SDMMC1_SD_Init+0x38>)
 800089e:	2200      	movs	r2, #0
 80008a0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  /* USER CODE END SDMMC1_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	20000114 	.word	0x20000114
 80008b0:	40012c00 	.word	0x40012c00

080008b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008ba:	4b10      	ldr	r3, [pc, #64]	@ (80008fc <MX_DMA_Init+0x48>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	4a0f      	ldr	r2, [pc, #60]	@ (80008fc <MX_DMA_Init+0x48>)
 80008c0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80008c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c6:	4b0d      	ldr	r3, [pc, #52]	@ (80008fc <MX_DMA_Init+0x48>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2100      	movs	r1, #0
 80008d6:	203b      	movs	r0, #59	@ 0x3b
 80008d8:	f001 fac1 	bl	8001e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80008dc:	203b      	movs	r0, #59	@ 0x3b
 80008de:	f001 fada 	bl	8001e96 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2100      	movs	r1, #0
 80008e6:	2045      	movs	r0, #69	@ 0x45
 80008e8:	f001 fab9 	bl	8001e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80008ec:	2045      	movs	r0, #69	@ 0x45
 80008ee:	f001 fad2 	bl	8001e96 <HAL_NVIC_EnableIRQ>

}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800

08000900 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b088      	sub	sp, #32
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
 8000914:	615a      	str	r2, [r3, #20]
 8000916:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000918:	4b1f      	ldr	r3, [pc, #124]	@ (8000998 <MX_FMC_Init+0x98>)
 800091a:	4a20      	ldr	r2, [pc, #128]	@ (800099c <MX_FMC_Init+0x9c>)
 800091c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800091e:	4b1e      	ldr	r3, [pc, #120]	@ (8000998 <MX_FMC_Init+0x98>)
 8000920:	2200      	movs	r2, #0
 8000922:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000924:	4b1c      	ldr	r3, [pc, #112]	@ (8000998 <MX_FMC_Init+0x98>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800092a:	4b1b      	ldr	r3, [pc, #108]	@ (8000998 <MX_FMC_Init+0x98>)
 800092c:	2204      	movs	r2, #4
 800092e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000930:	4b19      	ldr	r3, [pc, #100]	@ (8000998 <MX_FMC_Init+0x98>)
 8000932:	2210      	movs	r2, #16
 8000934:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000936:	4b18      	ldr	r3, [pc, #96]	@ (8000998 <MX_FMC_Init+0x98>)
 8000938:	2240      	movs	r2, #64	@ 0x40
 800093a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800093c:	4b16      	ldr	r3, [pc, #88]	@ (8000998 <MX_FMC_Init+0x98>)
 800093e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000942:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000944:	4b14      	ldr	r3, [pc, #80]	@ (8000998 <MX_FMC_Init+0x98>)
 8000946:	2200      	movs	r2, #0
 8000948:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800094a:	4b13      	ldr	r3, [pc, #76]	@ (8000998 <MX_FMC_Init+0x98>)
 800094c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000950:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000952:	4b11      	ldr	r3, [pc, #68]	@ (8000998 <MX_FMC_Init+0x98>)
 8000954:	2200      	movs	r2, #0
 8000956:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 8000958:	4b0f      	ldr	r3, [pc, #60]	@ (8000998 <MX_FMC_Init+0x98>)
 800095a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800095e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000960:	2302      	movs	r3, #2
 8000962:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000964:	2307      	movs	r3, #7
 8000966:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000968:	2304      	movs	r3, #4
 800096a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800096c:	2307      	movs	r3, #7
 800096e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000970:	2303      	movs	r3, #3
 8000972:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000974:	2302      	movs	r3, #2
 8000976:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000978:	2302      	movs	r3, #2
 800097a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	4619      	mov	r1, r3
 8000980:	4805      	ldr	r0, [pc, #20]	@ (8000998 <MX_FMC_Init+0x98>)
 8000982:	f004 ff2f 	bl	80057e4 <HAL_SDRAM_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800098c:	f000 fbbe 	bl	800110c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000990:	bf00      	nop
 8000992:	3720      	adds	r7, #32
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000258 	.word	0x20000258
 800099c:	a0000140 	.word	0xa0000140

080009a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b090      	sub	sp, #64	@ 0x40
 80009a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009b6:	4bad      	ldr	r3, [pc, #692]	@ (8000c6c <MX_GPIO_Init+0x2cc>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	4aac      	ldr	r2, [pc, #688]	@ (8000c6c <MX_GPIO_Init+0x2cc>)
 80009bc:	f043 0310 	orr.w	r3, r3, #16
 80009c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c2:	4baa      	ldr	r3, [pc, #680]	@ (8000c6c <MX_GPIO_Init+0x2cc>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	f003 0310 	and.w	r3, r3, #16
 80009ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80009cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009ce:	4ba7      	ldr	r3, [pc, #668]	@ (8000c6c <MX_GPIO_Init+0x2cc>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	4aa6      	ldr	r2, [pc, #664]	@ (8000c6c <MX_GPIO_Init+0x2cc>)
 80009d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009da:	4ba4      	ldr	r3, [pc, #656]	@ (8000c6c <MX_GPIO_Init+0x2cc>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80009e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e6:	4ba1      	ldr	r3, [pc, #644]	@ (8000c6c <MX_GPIO_Init+0x2cc>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	4aa0      	ldr	r2, [pc, #640]	@ (8000c6c <MX_GPIO_Init+0x2cc>)
 80009ec:	f043 0302 	orr.w	r3, r3, #2
 80009f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f2:	4b9e      	ldr	r3, [pc, #632]	@ (8000c6c <MX_GPIO_Init+0x2cc>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	f003 0302 	and.w	r3, r3, #2
 80009fa:	623b      	str	r3, [r7, #32]
 80009fc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009fe:	4b9b      	ldr	r3, [pc, #620]	@ (8000c6c <MX_GPIO_Init+0x2cc>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	4a9a      	ldr	r2, [pc, #616]	@ (8000c6c <MX_GPIO_Init+0x2cc>)
 8000a04:	f043 0308 	orr.w	r3, r3, #8
 8000a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0a:	4b98      	ldr	r3, [pc, #608]	@ (8000c6c <MX_GPIO_Init+0x2cc>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	f003 0308 	and.w	r3, r3, #8
 8000a12:	61fb      	str	r3, [r7, #28]
 8000a14:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a16:	4b95      	ldr	r3, [pc, #596]	@ (8000c6c <MX_GPIO_Init+0x2cc>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	4a94      	ldr	r2, [pc, #592]	@ (8000c6c <MX_GPIO_Init+0x2cc>)
 8000a1c:	f043 0304 	orr.w	r3, r3, #4
 8000a20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a22:	4b92      	ldr	r3, [pc, #584]	@ (8000c6c <MX_GPIO_Init+0x2cc>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	f003 0304 	and.w	r3, r3, #4
 8000a2a:	61bb      	str	r3, [r7, #24]
 8000a2c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	4b8f      	ldr	r3, [pc, #572]	@ (8000c6c <MX_GPIO_Init+0x2cc>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	4a8e      	ldr	r2, [pc, #568]	@ (8000c6c <MX_GPIO_Init+0x2cc>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3a:	4b8c      	ldr	r3, [pc, #560]	@ (8000c6c <MX_GPIO_Init+0x2cc>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	617b      	str	r3, [r7, #20]
 8000a44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000a46:	4b89      	ldr	r3, [pc, #548]	@ (8000c6c <MX_GPIO_Init+0x2cc>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	4a88      	ldr	r2, [pc, #544]	@ (8000c6c <MX_GPIO_Init+0x2cc>)
 8000a4c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a52:	4b86      	ldr	r3, [pc, #536]	@ (8000c6c <MX_GPIO_Init+0x2cc>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a5e:	4b83      	ldr	r3, [pc, #524]	@ (8000c6c <MX_GPIO_Init+0x2cc>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	4a82      	ldr	r2, [pc, #520]	@ (8000c6c <MX_GPIO_Init+0x2cc>)
 8000a64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6a:	4b80      	ldr	r3, [pc, #512]	@ (8000c6c <MX_GPIO_Init+0x2cc>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000a76:	4b7d      	ldr	r3, [pc, #500]	@ (8000c6c <MX_GPIO_Init+0x2cc>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	4a7c      	ldr	r2, [pc, #496]	@ (8000c6c <MX_GPIO_Init+0x2cc>)
 8000a7c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a82:	4b7a      	ldr	r3, [pc, #488]	@ (8000c6c <MX_GPIO_Init+0x2cc>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a8e:	4b77      	ldr	r3, [pc, #476]	@ (8000c6c <MX_GPIO_Init+0x2cc>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	4a76      	ldr	r2, [pc, #472]	@ (8000c6c <MX_GPIO_Init+0x2cc>)
 8000a94:	f043 0320 	orr.w	r3, r3, #32
 8000a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9a:	4b74      	ldr	r3, [pc, #464]	@ (8000c6c <MX_GPIO_Init+0x2cc>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	f003 0320 	and.w	r3, r3, #32
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa6:	4b71      	ldr	r3, [pc, #452]	@ (8000c6c <MX_GPIO_Init+0x2cc>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	4a70      	ldr	r2, [pc, #448]	@ (8000c6c <MX_GPIO_Init+0x2cc>)
 8000aac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab2:	4b6e      	ldr	r3, [pc, #440]	@ (8000c6c <MX_GPIO_Init+0x2cc>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000abe:	2201      	movs	r2, #1
 8000ac0:	2120      	movs	r1, #32
 8000ac2:	486b      	ldr	r0, [pc, #428]	@ (8000c70 <MX_GPIO_Init+0x2d0>)
 8000ac4:	f002 fa2e 	bl	8002f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f241 010c 	movw	r1, #4108	@ 0x100c
 8000ace:	4869      	ldr	r0, [pc, #420]	@ (8000c74 <MX_GPIO_Init+0x2d4>)
 8000ad0:	f002 fa28 	bl	8002f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2108      	movs	r1, #8
 8000ad8:	4867      	ldr	r0, [pc, #412]	@ (8000c78 <MX_GPIO_Init+0x2d8>)
 8000ada:	f002 fa23 	bl	8002f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ae4:	4865      	ldr	r0, [pc, #404]	@ (8000c7c <MX_GPIO_Init+0x2dc>)
 8000ae6:	f002 fa1d 	bl	8002f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	21c8      	movs	r1, #200	@ 0xc8
 8000aee:	4864      	ldr	r0, [pc, #400]	@ (8000c80 <MX_GPIO_Init+0x2e0>)
 8000af0:	f002 fa18 	bl	8002f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000af4:	2308      	movs	r3, #8
 8000af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af8:	2300      	movs	r3, #0
 8000afa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b04:	4619      	mov	r1, r3
 8000b06:	485f      	ldr	r0, [pc, #380]	@ (8000c84 <MX_GPIO_Init+0x2e4>)
 8000b08:	f002 f848 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b10:	2302      	movs	r3, #2
 8000b12:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000b1c:	2309      	movs	r3, #9
 8000b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000b20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b24:	4619      	mov	r1, r3
 8000b26:	4857      	ldr	r0, [pc, #348]	@ (8000c84 <MX_GPIO_Init+0x2e4>)
 8000b28:	f002 f838 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000b2c:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8000b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b32:	2302      	movs	r3, #2
 8000b34:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b3e:	230b      	movs	r3, #11
 8000b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b42:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b46:	4619      	mov	r1, r3
 8000b48:	484d      	ldr	r0, [pc, #308]	@ (8000c80 <MX_GPIO_Init+0x2e0>)
 8000b4a:	f002 f827 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000b4e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b54:	2312      	movs	r3, #18
 8000b56:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b60:	2304      	movs	r3, #4
 8000b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4847      	ldr	r0, [pc, #284]	@ (8000c88 <MX_GPIO_Init+0x2e8>)
 8000b6c:	f002 f816 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000b70:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8000b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000b82:	230a      	movs	r3, #10
 8000b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	483e      	ldr	r0, [pc, #248]	@ (8000c88 <MX_GPIO_Init+0x2e8>)
 8000b8e:	f002 f805 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000b92:	2310      	movs	r3, #16
 8000b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000ba6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000baa:	4619      	mov	r1, r3
 8000bac:	4836      	ldr	r0, [pc, #216]	@ (8000c88 <MX_GPIO_Init+0x2e8>)
 8000bae:	f001 fff5 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000bb2:	2380      	movs	r3, #128	@ 0x80
 8000bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000bc2:	2308      	movs	r3, #8
 8000bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000bc6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4828      	ldr	r0, [pc, #160]	@ (8000c70 <MX_GPIO_Init+0x2d0>)
 8000bce:	f001 ffe5 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000bd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000be4:	2301      	movs	r3, #1
 8000be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bec:	4619      	mov	r1, r3
 8000bee:	4827      	ldr	r0, [pc, #156]	@ (8000c8c <MX_GPIO_Init+0x2ec>)
 8000bf0:	f001 ffd4 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000bf4:	2360      	movs	r3, #96	@ 0x60
 8000bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c04:	230d      	movs	r3, #13
 8000c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	481d      	ldr	r0, [pc, #116]	@ (8000c84 <MX_GPIO_Init+0x2e4>)
 8000c10:	f001 ffc4 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000c14:	2380      	movs	r3, #128	@ 0x80
 8000c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c24:	2307      	movs	r3, #7
 8000c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000c28:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4816      	ldr	r0, [pc, #88]	@ (8000c88 <MX_GPIO_Init+0x2e8>)
 8000c30:	f001 ffb4 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000c34:	2340      	movs	r3, #64	@ 0x40
 8000c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c40:	2303      	movs	r3, #3
 8000c42:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000c44:	230a      	movs	r3, #10
 8000c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000c48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	480e      	ldr	r0, [pc, #56]	@ (8000c88 <MX_GPIO_Init+0x2e8>)
 8000c50:	f001 ffa4 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000c54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c66:	4619      	mov	r1, r3
 8000c68:	e012      	b.n	8000c90 <MX_GPIO_Init+0x2f0>
 8000c6a:	bf00      	nop
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40020c00 	.word	0x40020c00
 8000c74:	40022000 	.word	0x40022000
 8000c78:	40022800 	.word	0x40022800
 8000c7c:	40021c00 	.word	0x40021c00
 8000c80:	40021800 	.word	0x40021800
 8000c84:	40021000 	.word	0x40021000
 8000c88:	40020400 	.word	0x40020400
 8000c8c:	40020000 	.word	0x40020000
 8000c90:	48bc      	ldr	r0, [pc, #752]	@ (8000f84 <MX_GPIO_Init+0x5e4>)
 8000c92:	f001 ff83 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000c96:	2340      	movs	r3, #64	@ 0x40
 8000c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c9a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000c9e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000ca4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ca8:	4619      	mov	r1, r3
 8000caa:	48b7      	ldr	r0, [pc, #732]	@ (8000f88 <MX_GPIO_Init+0x5e8>)
 8000cac:	f001 ff76 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000cb0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000cc2:	230a      	movs	r3, #10
 8000cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cca:	4619      	mov	r1, r3
 8000ccc:	48af      	ldr	r0, [pc, #700]	@ (8000f8c <MX_GPIO_Init+0x5ec>)
 8000cce:	f001 ff65 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000cd2:	23f0      	movs	r3, #240	@ 0xf0
 8000cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000ce2:	230a      	movs	r3, #10
 8000ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ce6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cea:	4619      	mov	r1, r3
 8000cec:	48a8      	ldr	r0, [pc, #672]	@ (8000f90 <MX_GPIO_Init+0x5f0>)
 8000cee:	f001 ff55 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000cf2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000d04:	230a      	movs	r3, #10
 8000d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000d08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	48a1      	ldr	r0, [pc, #644]	@ (8000f94 <MX_GPIO_Init+0x5f4>)
 8000d10:	f001 ff44 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000d14:	2320      	movs	r3, #32
 8000d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4897      	ldr	r0, [pc, #604]	@ (8000f88 <MX_GPIO_Init+0x5e8>)
 8000d2c:	f001 ff36 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000d30:	2308      	movs	r3, #8
 8000d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	2302      	movs	r3, #2
 8000d36:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d40:	230d      	movs	r3, #13
 8000d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000d44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d48:	4619      	mov	r1, r3
 8000d4a:	488f      	ldr	r0, [pc, #572]	@ (8000f88 <MX_GPIO_Init+0x5e8>)
 8000d4c:	f001 ff26 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000d50:	f241 030c 	movw	r3, #4108	@ 0x100c
 8000d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d56:	2301      	movs	r3, #1
 8000d58:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d66:	4619      	mov	r1, r3
 8000d68:	4889      	ldr	r0, [pc, #548]	@ (8000f90 <MX_GPIO_Init+0x5f0>)
 8000d6a:	f001 ff17 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000d6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d74:	2300      	movs	r3, #0
 8000d76:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000d7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d80:	4619      	mov	r1, r3
 8000d82:	4885      	ldr	r0, [pc, #532]	@ (8000f98 <MX_GPIO_Init+0x5f8>)
 8000d84:	f001 ff0a 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000d88:	2308      	movs	r3, #8
 8000d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d94:	2300      	movs	r3, #0
 8000d96:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000d98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	487f      	ldr	r0, [pc, #508]	@ (8000f9c <MX_GPIO_Init+0x5fc>)
 8000da0:	f001 fefc 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000da4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	2302      	movs	r3, #2
 8000dac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db2:	2300      	movs	r3, #0
 8000db4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000db6:	230d      	movs	r3, #13
 8000db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000dba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4874      	ldr	r0, [pc, #464]	@ (8000f94 <MX_GPIO_Init+0x5f4>)
 8000dc2:	f001 feeb 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000dc6:	2310      	movs	r3, #16
 8000dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000dd2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	486b      	ldr	r0, [pc, #428]	@ (8000f88 <MX_GPIO_Init+0x5e8>)
 8000dda:	f001 fedf 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000dde:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de4:	2300      	movs	r3, #0
 8000de6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000dec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000df0:	4619      	mov	r1, r3
 8000df2:	486b      	ldr	r0, [pc, #428]	@ (8000fa0 <MX_GPIO_Init+0x600>)
 8000df4:	f001 fed2 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e04:	2300      	movs	r3, #0
 8000e06:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e08:	2305      	movs	r3, #5
 8000e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8000e0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e10:	4619      	mov	r1, r3
 8000e12:	485f      	ldr	r0, [pc, #380]	@ (8000f90 <MX_GPIO_Init+0x5f0>)
 8000e14:	f001 fec2 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000e18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	2300      	movs	r3, #0
 8000e28:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000e2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e2e:	4619      	mov	r1, r3
 8000e30:	485b      	ldr	r0, [pc, #364]	@ (8000fa0 <MX_GPIO_Init+0x600>)
 8000e32:	f001 feb3 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000e36:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8000e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e48:	230d      	movs	r3, #13
 8000e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e4c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e50:	4619      	mov	r1, r3
 8000e52:	4853      	ldr	r0, [pc, #332]	@ (8000fa0 <MX_GPIO_Init+0x600>)
 8000e54:	f001 fea2 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e64:	2300      	movs	r3, #0
 8000e66:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000e6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e70:	4619      	mov	r1, r3
 8000e72:	4847      	ldr	r0, [pc, #284]	@ (8000f90 <MX_GPIO_Init+0x5f0>)
 8000e74:	f001 fe92 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000e78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	2300      	movs	r3, #0
 8000e88:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e8a:	2307      	movs	r3, #7
 8000e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000e8e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e92:	4619      	mov	r1, r3
 8000e94:	483d      	ldr	r0, [pc, #244]	@ (8000f8c <MX_GPIO_Init+0x5ec>)
 8000e96:	f001 fe81 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000e9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000eac:	2301      	movs	r3, #1
 8000eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000eb0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4835      	ldr	r0, [pc, #212]	@ (8000f8c <MX_GPIO_Init+0x5ec>)
 8000eb8:	f001 fe70 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000ebc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ec2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000ec6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000ecc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	482f      	ldr	r0, [pc, #188]	@ (8000f90 <MX_GPIO_Init+0x5f0>)
 8000ed4:	f001 fe62 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000ed8:	23c0      	movs	r3, #192	@ 0xc0
 8000eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000edc:	2302      	movs	r3, #2
 8000ede:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000ee8:	2308      	movs	r3, #8
 8000eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4829      	ldr	r0, [pc, #164]	@ (8000f98 <MX_GPIO_Init+0x5f8>)
 8000ef4:	f001 fe52 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000ef8:	2310      	movs	r3, #16
 8000efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efc:	2302      	movs	r3, #2
 8000efe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f04:	2303      	movs	r3, #3
 8000f06:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000f08:	230a      	movs	r3, #10
 8000f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000f0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f10:	4619      	mov	r1, r3
 8000f12:	4823      	ldr	r0, [pc, #140]	@ (8000fa0 <MX_GPIO_Init+0x600>)
 8000f14:	f001 fe42 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000f18:	23c8      	movs	r3, #200	@ 0xc8
 8000f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	2300      	movs	r3, #0
 8000f26:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f28:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4819      	ldr	r0, [pc, #100]	@ (8000f94 <MX_GPIO_Init+0x5f4>)
 8000f30:	f001 fe34 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000f34:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8000f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f42:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f46:	4619      	mov	r1, r3
 8000f48:	4816      	ldr	r0, [pc, #88]	@ (8000fa4 <MX_GPIO_Init+0x604>)
 8000f4a:	f001 fe27 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000f4e:	2305      	movs	r3, #5
 8000f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
 8000f54:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000f5e:	230a      	movs	r3, #10
 8000f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f66:	4619      	mov	r1, r3
 8000f68:	480b      	ldr	r0, [pc, #44]	@ (8000f98 <MX_GPIO_Init+0x5f8>)
 8000f6a:	f001 fe17 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f6e:	2332      	movs	r3, #50	@ 0x32
 8000f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f72:	2302      	movs	r3, #2
 8000f74:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f7e:	230b      	movs	r3, #11
 8000f80:	e012      	b.n	8000fa8 <MX_GPIO_Init+0x608>
 8000f82:	bf00      	nop
 8000f84:	40022400 	.word	0x40022400
 8000f88:	40020c00 	.word	0x40020c00
 8000f8c:	40020000 	.word	0x40020000
 8000f90:	40022000 	.word	0x40022000
 8000f94:	40021800 	.word	0x40021800
 8000f98:	40020800 	.word	0x40020800
 8000f9c:	40022800 	.word	0x40022800
 8000fa0:	40021c00 	.word	0x40021c00
 8000fa4:	40021400 	.word	0x40021400
 8000fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000faa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4850      	ldr	r0, [pc, #320]	@ (80010f4 <MX_GPIO_Init+0x754>)
 8000fb2:	f001 fdf3 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000fc6:	2309      	movs	r3, #9
 8000fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4849      	ldr	r0, [pc, #292]	@ (80010f8 <MX_GPIO_Init+0x758>)
 8000fd2:	f001 fde3 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000fd6:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000fe8:	2309      	movs	r3, #9
 8000fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4842      	ldr	r0, [pc, #264]	@ (80010fc <MX_GPIO_Init+0x75c>)
 8000ff4:	f001 fdd2 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000ff8:	2304      	movs	r3, #4
 8000ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001004:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001008:	4619      	mov	r1, r3
 800100a:	483d      	ldr	r0, [pc, #244]	@ (8001100 <MX_GPIO_Init+0x760>)
 800100c:	f001 fdc6 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001010:	2386      	movs	r3, #134	@ 0x86
 8001012:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101c:	2303      	movs	r3, #3
 800101e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001020:	230b      	movs	r3, #11
 8001022:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001024:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001028:	4619      	mov	r1, r3
 800102a:	4836      	ldr	r0, [pc, #216]	@ (8001104 <MX_GPIO_Init+0x764>)
 800102c:	f001 fdb6 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001030:	2301      	movs	r3, #1
 8001032:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001034:	2303      	movs	r3, #3
 8001036:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800103c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001040:	4619      	mov	r1, r3
 8001042:	4830      	ldr	r0, [pc, #192]	@ (8001104 <MX_GPIO_Init+0x764>)
 8001044:	f001 fdaa 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001048:	2350      	movs	r3, #80	@ 0x50
 800104a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104c:	2302      	movs	r3, #2
 800104e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001058:	230d      	movs	r3, #13
 800105a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001060:	4619      	mov	r1, r3
 8001062:	4828      	ldr	r0, [pc, #160]	@ (8001104 <MX_GPIO_Init+0x764>)
 8001064:	f001 fd9a 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001068:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800106c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800106e:	2312      	movs	r3, #18
 8001070:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001076:	2303      	movs	r3, #3
 8001078:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800107a:	2304      	movs	r3, #4
 800107c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800107e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001082:	4619      	mov	r1, r3
 8001084:	4820      	ldr	r0, [pc, #128]	@ (8001108 <MX_GPIO_Init+0x768>)
 8001086:	f001 fd89 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800108a:	2328      	movs	r3, #40	@ 0x28
 800108c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108e:	2302      	movs	r3, #2
 8001090:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001096:	2303      	movs	r3, #3
 8001098:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800109a:	230a      	movs	r3, #10
 800109c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010a2:	4619      	mov	r1, r3
 80010a4:	4817      	ldr	r0, [pc, #92]	@ (8001104 <MX_GPIO_Init+0x764>)
 80010a6:	f001 fd79 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80010aa:	2340      	movs	r3, #64	@ 0x40
 80010ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ae:	2302      	movs	r3, #2
 80010b0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80010ba:	2309      	movs	r3, #9
 80010bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80010be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010c2:	4619      	mov	r1, r3
 80010c4:	4810      	ldr	r0, [pc, #64]	@ (8001108 <MX_GPIO_Init+0x768>)
 80010c6:	f001 fd69 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80010ca:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80010ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d0:	2302      	movs	r3, #2
 80010d2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	2300      	movs	r3, #0
 80010da:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010dc:	2305      	movs	r3, #5
 80010de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010e4:	4619      	mov	r1, r3
 80010e6:	4804      	ldr	r0, [pc, #16]	@ (80010f8 <MX_GPIO_Init+0x758>)
 80010e8:	f001 fd58 	bl	8002b9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010ec:	bf00      	nop
 80010ee:	3740      	adds	r7, #64	@ 0x40
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40020800 	.word	0x40020800
 80010f8:	40020400 	.word	0x40020400
 80010fc:	40020c00 	.word	0x40020c00
 8001100:	40021800 	.word	0x40021800
 8001104:	40020000 	.word	0x40020000
 8001108:	40021c00 	.word	0x40021c00

0800110c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001110:	b672      	cpsid	i
}
 8001112:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <Error_Handler+0x8>

08001118 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800111e:	4b0f      	ldr	r3, [pc, #60]	@ (800115c <HAL_MspInit+0x44>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001122:	4a0e      	ldr	r2, [pc, #56]	@ (800115c <HAL_MspInit+0x44>)
 8001124:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001128:	6413      	str	r3, [r2, #64]	@ 0x40
 800112a:	4b0c      	ldr	r3, [pc, #48]	@ (800115c <HAL_MspInit+0x44>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001136:	4b09      	ldr	r3, [pc, #36]	@ (800115c <HAL_MspInit+0x44>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113a:	4a08      	ldr	r2, [pc, #32]	@ (800115c <HAL_MspInit+0x44>)
 800113c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001140:	6453      	str	r3, [r2, #68]	@ 0x44
 8001142:	4b06      	ldr	r3, [pc, #24]	@ (800115c <HAL_MspInit+0x44>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001146:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800114a:	603b      	str	r3, [r7, #0]
 800114c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	40023800 	.word	0x40023800

08001160 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a0d      	ldr	r2, [pc, #52]	@ (80011a4 <HAL_DMA2D_MspInit+0x44>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d113      	bne.n	800119a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001172:	4b0d      	ldr	r3, [pc, #52]	@ (80011a8 <HAL_DMA2D_MspInit+0x48>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	4a0c      	ldr	r2, [pc, #48]	@ (80011a8 <HAL_DMA2D_MspInit+0x48>)
 8001178:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800117c:	6313      	str	r3, [r2, #48]	@ 0x30
 800117e:	4b0a      	ldr	r3, [pc, #40]	@ (80011a8 <HAL_DMA2D_MspInit+0x48>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	2100      	movs	r1, #0
 800118e:	205a      	movs	r0, #90	@ 0x5a
 8001190:	f000 fe65 	bl	8001e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001194:	205a      	movs	r0, #90	@ 0x5a
 8001196:	f000 fe7e 	bl	8001e96 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	4002b000 	.word	0x4002b000
 80011a8:	40023800 	.word	0x40023800

080011ac <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b0ae      	sub	sp, #184	@ 0xb8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011c4:	f107 0320 	add.w	r3, r7, #32
 80011c8:	2284      	movs	r2, #132	@ 0x84
 80011ca:	2100      	movs	r1, #0
 80011cc:	4618      	mov	r0, r3
 80011ce:	f005 fc9a 	bl	8006b06 <memset>
  if(hltdc->Instance==LTDC)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a6a      	ldr	r2, [pc, #424]	@ (8001380 <HAL_LTDC_MspInit+0x1d4>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	f040 80cc 	bne.w	8001376 <HAL_LTDC_MspInit+0x1ca>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80011de:	2308      	movs	r3, #8
 80011e0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80011e2:	2332      	movs	r3, #50	@ 0x32
 80011e4:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80011e6:	2302      	movs	r3, #2
 80011e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80011ea:	2302      	movs	r3, #2
 80011ec:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80011ee:	2300      	movs	r3, #0
 80011f0:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80011f2:	2301      	movs	r3, #1
 80011f4:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80011f6:	2300      	movs	r3, #0
 80011f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011fa:	f107 0320 	add.w	r3, r7, #32
 80011fe:	4618      	mov	r0, r3
 8001200:	f002 fdd8 	bl	8003db4 <HAL_RCCEx_PeriphCLKConfig>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <HAL_LTDC_MspInit+0x62>
    {
      Error_Handler();
 800120a:	f7ff ff7f 	bl	800110c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800120e:	4b5d      	ldr	r3, [pc, #372]	@ (8001384 <HAL_LTDC_MspInit+0x1d8>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001212:	4a5c      	ldr	r2, [pc, #368]	@ (8001384 <HAL_LTDC_MspInit+0x1d8>)
 8001214:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001218:	6453      	str	r3, [r2, #68]	@ 0x44
 800121a:	4b5a      	ldr	r3, [pc, #360]	@ (8001384 <HAL_LTDC_MspInit+0x1d8>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800121e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001222:	61fb      	str	r3, [r7, #28]
 8001224:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001226:	4b57      	ldr	r3, [pc, #348]	@ (8001384 <HAL_LTDC_MspInit+0x1d8>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	4a56      	ldr	r2, [pc, #344]	@ (8001384 <HAL_LTDC_MspInit+0x1d8>)
 800122c:	f043 0310 	orr.w	r3, r3, #16
 8001230:	6313      	str	r3, [r2, #48]	@ 0x30
 8001232:	4b54      	ldr	r3, [pc, #336]	@ (8001384 <HAL_LTDC_MspInit+0x1d8>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	f003 0310 	and.w	r3, r3, #16
 800123a:	61bb      	str	r3, [r7, #24]
 800123c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800123e:	4b51      	ldr	r3, [pc, #324]	@ (8001384 <HAL_LTDC_MspInit+0x1d8>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	4a50      	ldr	r2, [pc, #320]	@ (8001384 <HAL_LTDC_MspInit+0x1d8>)
 8001244:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001248:	6313      	str	r3, [r2, #48]	@ 0x30
 800124a:	4b4e      	ldr	r3, [pc, #312]	@ (8001384 <HAL_LTDC_MspInit+0x1d8>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001252:	617b      	str	r3, [r7, #20]
 8001254:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001256:	4b4b      	ldr	r3, [pc, #300]	@ (8001384 <HAL_LTDC_MspInit+0x1d8>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	4a4a      	ldr	r2, [pc, #296]	@ (8001384 <HAL_LTDC_MspInit+0x1d8>)
 800125c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001260:	6313      	str	r3, [r2, #48]	@ 0x30
 8001262:	4b48      	ldr	r3, [pc, #288]	@ (8001384 <HAL_LTDC_MspInit+0x1d8>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800126a:	613b      	str	r3, [r7, #16]
 800126c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800126e:	4b45      	ldr	r3, [pc, #276]	@ (8001384 <HAL_LTDC_MspInit+0x1d8>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	4a44      	ldr	r2, [pc, #272]	@ (8001384 <HAL_LTDC_MspInit+0x1d8>)
 8001274:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001278:	6313      	str	r3, [r2, #48]	@ 0x30
 800127a:	4b42      	ldr	r3, [pc, #264]	@ (8001384 <HAL_LTDC_MspInit+0x1d8>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001286:	4b3f      	ldr	r3, [pc, #252]	@ (8001384 <HAL_LTDC_MspInit+0x1d8>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	4a3e      	ldr	r2, [pc, #248]	@ (8001384 <HAL_LTDC_MspInit+0x1d8>)
 800128c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001290:	6313      	str	r3, [r2, #48]	@ 0x30
 8001292:	4b3c      	ldr	r3, [pc, #240]	@ (8001384 <HAL_LTDC_MspInit+0x1d8>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800129e:	2310      	movs	r3, #16
 80012a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a4:	2302      	movs	r3, #2
 80012a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	2300      	movs	r3, #0
 80012b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012b6:	230e      	movs	r3, #14
 80012b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80012bc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012c0:	4619      	mov	r1, r3
 80012c2:	4831      	ldr	r0, [pc, #196]	@ (8001388 <HAL_LTDC_MspInit+0x1dc>)
 80012c4:	f001 fc6a 	bl	8002b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80012c8:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80012cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	2302      	movs	r3, #2
 80012d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012dc:	2300      	movs	r3, #0
 80012de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012e2:	230e      	movs	r3, #14
 80012e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80012e8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012ec:	4619      	mov	r1, r3
 80012ee:	4827      	ldr	r0, [pc, #156]	@ (800138c <HAL_LTDC_MspInit+0x1e0>)
 80012f0:	f001 fc54 	bl	8002b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80012f4:	23f7      	movs	r3, #247	@ 0xf7
 80012f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fa:	2302      	movs	r3, #2
 80012fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2300      	movs	r3, #0
 8001308:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800130c:	230e      	movs	r3, #14
 800130e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001312:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001316:	4619      	mov	r1, r3
 8001318:	481d      	ldr	r0, [pc, #116]	@ (8001390 <HAL_LTDC_MspInit+0x1e4>)
 800131a:	f001 fc3f 	bl	8002b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800131e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001322:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001326:	2302      	movs	r3, #2
 8001328:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001332:	2300      	movs	r3, #0
 8001334:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001338:	2309      	movs	r3, #9
 800133a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800133e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001342:	4619      	mov	r1, r3
 8001344:	4813      	ldr	r0, [pc, #76]	@ (8001394 <HAL_LTDC_MspInit+0x1e8>)
 8001346:	f001 fc29 	bl	8002b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800134a:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 800134e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	2300      	movs	r3, #0
 8001360:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001364:	230e      	movs	r3, #14
 8001366:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800136a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800136e:	4619      	mov	r1, r3
 8001370:	4809      	ldr	r0, [pc, #36]	@ (8001398 <HAL_LTDC_MspInit+0x1ec>)
 8001372:	f001 fc13 	bl	8002b9c <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001376:	bf00      	nop
 8001378:	37b8      	adds	r7, #184	@ 0xb8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40016800 	.word	0x40016800
 8001384:	40023800 	.word	0x40023800
 8001388:	40021000 	.word	0x40021000
 800138c:	40022400 	.word	0x40022400
 8001390:	40022800 	.word	0x40022800
 8001394:	40021800 	.word	0x40021800
 8001398:	40022000 	.word	0x40022000

0800139c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b0ac      	sub	sp, #176	@ 0xb0
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b4:	f107 0318 	add.w	r3, r7, #24
 80013b8:	2284      	movs	r2, #132	@ 0x84
 80013ba:	2100      	movs	r1, #0
 80013bc:	4618      	mov	r0, r3
 80013be:	f005 fba2 	bl	8006b06 <memset>
  if(hsd->Instance==SDMMC1)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a74      	ldr	r2, [pc, #464]	@ (8001598 <HAL_SD_MspInit+0x1fc>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	f040 80e0 	bne.w	800158e <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 80013ce:	f44f 0320 	mov.w	r3, #10485760	@ 0xa00000
 80013d2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80013da:	2300      	movs	r3, #0
 80013dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013e0:	f107 0318 	add.w	r3, r7, #24
 80013e4:	4618      	mov	r0, r3
 80013e6:	f002 fce5 	bl	8003db4 <HAL_RCCEx_PeriphCLKConfig>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 80013f0:	f7ff fe8c 	bl	800110c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80013f4:	4b69      	ldr	r3, [pc, #420]	@ (800159c <HAL_SD_MspInit+0x200>)
 80013f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f8:	4a68      	ldr	r2, [pc, #416]	@ (800159c <HAL_SD_MspInit+0x200>)
 80013fa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80013fe:	6453      	str	r3, [r2, #68]	@ 0x44
 8001400:	4b66      	ldr	r3, [pc, #408]	@ (800159c <HAL_SD_MspInit+0x200>)
 8001402:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001404:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800140c:	4b63      	ldr	r3, [pc, #396]	@ (800159c <HAL_SD_MspInit+0x200>)
 800140e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001410:	4a62      	ldr	r2, [pc, #392]	@ (800159c <HAL_SD_MspInit+0x200>)
 8001412:	f043 0304 	orr.w	r3, r3, #4
 8001416:	6313      	str	r3, [r2, #48]	@ 0x30
 8001418:	4b60      	ldr	r3, [pc, #384]	@ (800159c <HAL_SD_MspInit+0x200>)
 800141a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	613b      	str	r3, [r7, #16]
 8001422:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001424:	4b5d      	ldr	r3, [pc, #372]	@ (800159c <HAL_SD_MspInit+0x200>)
 8001426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001428:	4a5c      	ldr	r2, [pc, #368]	@ (800159c <HAL_SD_MspInit+0x200>)
 800142a:	f043 0308 	orr.w	r3, r3, #8
 800142e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001430:	4b5a      	ldr	r3, [pc, #360]	@ (800159c <HAL_SD_MspInit+0x200>)
 8001432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001434:	f003 0308 	and.w	r3, r3, #8
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800143c:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001440:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	2302      	movs	r3, #2
 8001446:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001450:	2303      	movs	r3, #3
 8001452:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001456:	230c      	movs	r3, #12
 8001458:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800145c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001460:	4619      	mov	r1, r3
 8001462:	484f      	ldr	r0, [pc, #316]	@ (80015a0 <HAL_SD_MspInit+0x204>)
 8001464:	f001 fb9a 	bl	8002b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8001468:	2304      	movs	r3, #4
 800146a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147a:	2303      	movs	r3, #3
 800147c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001480:	230c      	movs	r3, #12
 8001482:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8001486:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800148a:	4619      	mov	r1, r3
 800148c:	4845      	ldr	r0, [pc, #276]	@ (80015a4 <HAL_SD_MspInit+0x208>)
 800148e:	f001 fb85 	bl	8002b9c <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8001492:	4b45      	ldr	r3, [pc, #276]	@ (80015a8 <HAL_SD_MspInit+0x20c>)
 8001494:	4a45      	ldr	r2, [pc, #276]	@ (80015ac <HAL_SD_MspInit+0x210>)
 8001496:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8001498:	4b43      	ldr	r3, [pc, #268]	@ (80015a8 <HAL_SD_MspInit+0x20c>)
 800149a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800149e:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014a0:	4b41      	ldr	r3, [pc, #260]	@ (80015a8 <HAL_SD_MspInit+0x20c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014a6:	4b40      	ldr	r3, [pc, #256]	@ (80015a8 <HAL_SD_MspInit+0x20c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014ac:	4b3e      	ldr	r3, [pc, #248]	@ (80015a8 <HAL_SD_MspInit+0x20c>)
 80014ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014b2:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014b4:	4b3c      	ldr	r3, [pc, #240]	@ (80015a8 <HAL_SD_MspInit+0x20c>)
 80014b6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014ba:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014bc:	4b3a      	ldr	r3, [pc, #232]	@ (80015a8 <HAL_SD_MspInit+0x20c>)
 80014be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014c2:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 80014c4:	4b38      	ldr	r3, [pc, #224]	@ (80015a8 <HAL_SD_MspInit+0x20c>)
 80014c6:	2220      	movs	r2, #32
 80014c8:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014ca:	4b37      	ldr	r3, [pc, #220]	@ (80015a8 <HAL_SD_MspInit+0x20c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80014d0:	4b35      	ldr	r3, [pc, #212]	@ (80015a8 <HAL_SD_MspInit+0x20c>)
 80014d2:	2204      	movs	r2, #4
 80014d4:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80014d6:	4b34      	ldr	r3, [pc, #208]	@ (80015a8 <HAL_SD_MspInit+0x20c>)
 80014d8:	2203      	movs	r2, #3
 80014da:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 80014dc:	4b32      	ldr	r3, [pc, #200]	@ (80015a8 <HAL_SD_MspInit+0x20c>)
 80014de:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80014e2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80014e4:	4b30      	ldr	r3, [pc, #192]	@ (80015a8 <HAL_SD_MspInit+0x20c>)
 80014e6:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80014ea:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80014ec:	482e      	ldr	r0, [pc, #184]	@ (80015a8 <HAL_SD_MspInit+0x20c>)
 80014ee:	f000 fd65 	bl	8001fbc <HAL_DMA_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 80014f8:	f7ff fe08 	bl	800110c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a2a      	ldr	r2, [pc, #168]	@ (80015a8 <HAL_SD_MspInit+0x20c>)
 8001500:	641a      	str	r2, [r3, #64]	@ 0x40
 8001502:	4a29      	ldr	r2, [pc, #164]	@ (80015a8 <HAL_SD_MspInit+0x20c>)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8001508:	4b29      	ldr	r3, [pc, #164]	@ (80015b0 <HAL_SD_MspInit+0x214>)
 800150a:	4a2a      	ldr	r2, [pc, #168]	@ (80015b4 <HAL_SD_MspInit+0x218>)
 800150c:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 800150e:	4b28      	ldr	r3, [pc, #160]	@ (80015b0 <HAL_SD_MspInit+0x214>)
 8001510:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001514:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001516:	4b26      	ldr	r3, [pc, #152]	@ (80015b0 <HAL_SD_MspInit+0x214>)
 8001518:	2240      	movs	r2, #64	@ 0x40
 800151a:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800151c:	4b24      	ldr	r3, [pc, #144]	@ (80015b0 <HAL_SD_MspInit+0x214>)
 800151e:	2200      	movs	r2, #0
 8001520:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001522:	4b23      	ldr	r3, [pc, #140]	@ (80015b0 <HAL_SD_MspInit+0x214>)
 8001524:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001528:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800152a:	4b21      	ldr	r3, [pc, #132]	@ (80015b0 <HAL_SD_MspInit+0x214>)
 800152c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001530:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001532:	4b1f      	ldr	r3, [pc, #124]	@ (80015b0 <HAL_SD_MspInit+0x214>)
 8001534:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001538:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 800153a:	4b1d      	ldr	r3, [pc, #116]	@ (80015b0 <HAL_SD_MspInit+0x214>)
 800153c:	2220      	movs	r2, #32
 800153e:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001540:	4b1b      	ldr	r3, [pc, #108]	@ (80015b0 <HAL_SD_MspInit+0x214>)
 8001542:	2200      	movs	r2, #0
 8001544:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001546:	4b1a      	ldr	r3, [pc, #104]	@ (80015b0 <HAL_SD_MspInit+0x214>)
 8001548:	2204      	movs	r2, #4
 800154a:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800154c:	4b18      	ldr	r3, [pc, #96]	@ (80015b0 <HAL_SD_MspInit+0x214>)
 800154e:	2203      	movs	r2, #3
 8001550:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001552:	4b17      	ldr	r3, [pc, #92]	@ (80015b0 <HAL_SD_MspInit+0x214>)
 8001554:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001558:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800155a:	4b15      	ldr	r3, [pc, #84]	@ (80015b0 <HAL_SD_MspInit+0x214>)
 800155c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001560:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8001562:	4813      	ldr	r0, [pc, #76]	@ (80015b0 <HAL_SD_MspInit+0x214>)
 8001564:	f000 fd2a 	bl	8001fbc <HAL_DMA_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 800156e:	f7ff fdcd 	bl	800110c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a0e      	ldr	r2, [pc, #56]	@ (80015b0 <HAL_SD_MspInit+0x214>)
 8001576:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001578:	4a0d      	ldr	r2, [pc, #52]	@ (80015b0 <HAL_SD_MspInit+0x214>)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800157e:	2200      	movs	r2, #0
 8001580:	2100      	movs	r1, #0
 8001582:	2031      	movs	r0, #49	@ 0x31
 8001584:	f000 fc6b 	bl	8001e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001588:	2031      	movs	r0, #49	@ 0x31
 800158a:	f000 fc84 	bl	8001e96 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 800158e:	bf00      	nop
 8001590:	37b0      	adds	r7, #176	@ 0xb0
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40012c00 	.word	0x40012c00
 800159c:	40023800 	.word	0x40023800
 80015a0:	40020800 	.word	0x40020800
 80015a4:	40020c00 	.word	0x40020c00
 80015a8:	20000198 	.word	0x20000198
 80015ac:	40026458 	.word	0x40026458
 80015b0:	200001f8 	.word	0x200001f8
 80015b4:	400264a0 	.word	0x400264a0

080015b8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80015cc:	4b3e      	ldr	r3, [pc, #248]	@ (80016c8 <HAL_FMC_MspInit+0x110>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d175      	bne.n	80016c0 <HAL_FMC_MspInit+0x108>
    return;
  }
  FMC_Initialized = 1;
 80015d4:	4b3c      	ldr	r3, [pc, #240]	@ (80016c8 <HAL_FMC_MspInit+0x110>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80015da:	4b3c      	ldr	r3, [pc, #240]	@ (80016cc <HAL_FMC_MspInit+0x114>)
 80015dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015de:	4a3b      	ldr	r2, [pc, #236]	@ (80016cc <HAL_FMC_MspInit+0x114>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	6393      	str	r3, [r2, #56]	@ 0x38
 80015e6:	4b39      	ldr	r3, [pc, #228]	@ (80016cc <HAL_FMC_MspInit+0x114>)
 80015e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	603b      	str	r3, [r7, #0]
 80015f0:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80015f2:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80015f6:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f8:	2302      	movs	r3, #2
 80015fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001600:	2303      	movs	r3, #3
 8001602:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001604:	230c      	movs	r3, #12
 8001606:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001608:	1d3b      	adds	r3, r7, #4
 800160a:	4619      	mov	r1, r3
 800160c:	4830      	ldr	r0, [pc, #192]	@ (80016d0 <HAL_FMC_MspInit+0x118>)
 800160e:	f001 fac5 	bl	8002b9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8001612:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001616:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001618:	2302      	movs	r3, #2
 800161a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001620:	2303      	movs	r3, #3
 8001622:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001624:	230c      	movs	r3, #12
 8001626:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	4619      	mov	r1, r3
 800162c:	4829      	ldr	r0, [pc, #164]	@ (80016d4 <HAL_FMC_MspInit+0x11c>)
 800162e:	f001 fab5 	bl	8002b9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8001632:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001636:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001638:	2302      	movs	r3, #2
 800163a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001640:	2303      	movs	r3, #3
 8001642:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001644:	230c      	movs	r3, #12
 8001646:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	4619      	mov	r1, r3
 800164c:	4822      	ldr	r0, [pc, #136]	@ (80016d8 <HAL_FMC_MspInit+0x120>)
 800164e:	f001 faa5 	bl	8002b9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8001652:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001656:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001658:	2302      	movs	r3, #2
 800165a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001660:	2303      	movs	r3, #3
 8001662:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001664:	230c      	movs	r3, #12
 8001666:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001668:	1d3b      	adds	r3, r7, #4
 800166a:	4619      	mov	r1, r3
 800166c:	481b      	ldr	r0, [pc, #108]	@ (80016dc <HAL_FMC_MspInit+0x124>)
 800166e:	f001 fa95 	bl	8002b9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8001672:	2328      	movs	r3, #40	@ 0x28
 8001674:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	2302      	movs	r3, #2
 8001678:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167e:	2303      	movs	r3, #3
 8001680:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001682:	230c      	movs	r3, #12
 8001684:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001686:	1d3b      	adds	r3, r7, #4
 8001688:	4619      	mov	r1, r3
 800168a:	4815      	ldr	r0, [pc, #84]	@ (80016e0 <HAL_FMC_MspInit+0x128>)
 800168c:	f001 fa86 	bl	8002b9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001690:	2308      	movs	r3, #8
 8001692:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	2302      	movs	r3, #2
 8001696:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169c:	2303      	movs	r3, #3
 800169e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016a0:	230c      	movs	r3, #12
 80016a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80016a4:	1d3b      	adds	r3, r7, #4
 80016a6:	4619      	mov	r1, r3
 80016a8:	480e      	ldr	r0, [pc, #56]	@ (80016e4 <HAL_FMC_MspInit+0x12c>)
 80016aa:	f001 fa77 	bl	8002b9c <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FMC_IRQn, 0, 0);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2100      	movs	r1, #0
 80016b2:	2030      	movs	r0, #48	@ 0x30
 80016b4:	f000 fbd3 	bl	8001e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FMC_IRQn);
 80016b8:	2030      	movs	r0, #48	@ 0x30
 80016ba:	f000 fbec 	bl	8001e96 <HAL_NVIC_EnableIRQ>
 80016be:	e000      	b.n	80016c2 <HAL_FMC_MspInit+0x10a>
    return;
 80016c0:	bf00      	nop
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	2000028c 	.word	0x2000028c
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40021000 	.word	0x40021000
 80016d4:	40021800 	.word	0x40021800
 80016d8:	40020c00 	.word	0x40020c00
 80016dc:	40021400 	.word	0x40021400
 80016e0:	40021c00 	.word	0x40021c00
 80016e4:	40020800 	.word	0x40020800

080016e8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80016f0:	f7ff ff62 	bl	80015b8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80016f4:	bf00      	nop
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001700:	bf00      	nop
 8001702:	e7fd      	b.n	8001700 <NMI_Handler+0x4>

08001704 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001708:	bf00      	nop
 800170a:	e7fd      	b.n	8001708 <HardFault_Handler+0x4>

0800170c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001710:	bf00      	nop
 8001712:	e7fd      	b.n	8001710 <MemManage_Handler+0x4>

08001714 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <BusFault_Handler+0x4>

0800171c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <UsageFault_Handler+0x4>

08001724 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001752:	f000 fa65 	bl	8001c20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <FMC_IRQHandler>:

/**
  * @brief This function handles FMC global interrupt.
  */
void FMC_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_IRQn 0 */

  /* USER CODE END FMC_IRQn 0 */
  HAL_SDRAM_IRQHandler(&hsdram1);
 8001760:	4802      	ldr	r0, [pc, #8]	@ (800176c <FMC_IRQHandler+0x10>)
 8001762:	f004 f873 	bl	800584c <HAL_SDRAM_IRQHandler>
  /* USER CODE BEGIN FMC_IRQn 1 */

  /* USER CODE END FMC_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000258 	.word	0x20000258

08001770 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001774:	4802      	ldr	r0, [pc, #8]	@ (8001780 <SDMMC1_IRQHandler+0x10>)
 8001776:	f003 f98d 	bl	8004a94 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000114 	.word	0x20000114

08001784 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001788:	4802      	ldr	r0, [pc, #8]	@ (8001794 <DMA2_Stream3_IRQHandler+0x10>)
 800178a:	f000 fda5 	bl	80022d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000198 	.word	0x20000198

08001798 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 800179c:	4802      	ldr	r0, [pc, #8]	@ (80017a8 <DMA2_Stream6_IRQHandler+0x10>)
 800179e:	f000 fd9b 	bl	80022d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	200001f8 	.word	0x200001f8

080017ac <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80017b0:	4802      	ldr	r0, [pc, #8]	@ (80017bc <DMA2D_IRQHandler+0x10>)
 80017b2:	f001 f851 	bl	8002858 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	2000002c 	.word	0x2000002c

080017c0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017c4:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <SystemInit+0x20>)
 80017c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017ca:	4a05      	ldr	r2, [pc, #20]	@ (80017e0 <SystemInit+0x20>)
 80017cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800181c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017e8:	f7ff ffea 	bl	80017c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017ec:	480c      	ldr	r0, [pc, #48]	@ (8001820 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017ee:	490d      	ldr	r1, [pc, #52]	@ (8001824 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001828 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f4:	e002      	b.n	80017fc <LoopCopyDataInit>

080017f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fa:	3304      	adds	r3, #4

080017fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001800:	d3f9      	bcc.n	80017f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001802:	4a0a      	ldr	r2, [pc, #40]	@ (800182c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001804:	4c0a      	ldr	r4, [pc, #40]	@ (8001830 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001808:	e001      	b.n	800180e <LoopFillZerobss>

0800180a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800180c:	3204      	adds	r2, #4

0800180e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001810:	d3fb      	bcc.n	800180a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001812:	f005 f981 	bl	8006b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001816:	f7fe fe97 	bl	8000548 <main>
  bx  lr    
 800181a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800181c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001820:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001824:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001828:	08006bb4 	.word	0x08006bb4
  ldr r2, =_sbss
 800182c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001830:	20000370 	.word	0x20000370

08001834 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001834:	e7fe      	b.n	8001834 <ADC_IRQHandler>
	...

08001838 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800183c:	4b29      	ldr	r3, [pc, #164]	@ (80018e4 <BSP_SDRAM_Init+0xac>)
 800183e:	4a2a      	ldr	r2, [pc, #168]	@ (80018e8 <BSP_SDRAM_Init+0xb0>)
 8001840:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8001842:	4b2a      	ldr	r3, [pc, #168]	@ (80018ec <BSP_SDRAM_Init+0xb4>)
 8001844:	2202      	movs	r2, #2
 8001846:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8001848:	4b28      	ldr	r3, [pc, #160]	@ (80018ec <BSP_SDRAM_Init+0xb4>)
 800184a:	2207      	movs	r2, #7
 800184c:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 800184e:	4b27      	ldr	r3, [pc, #156]	@ (80018ec <BSP_SDRAM_Init+0xb4>)
 8001850:	2204      	movs	r2, #4
 8001852:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8001854:	4b25      	ldr	r3, [pc, #148]	@ (80018ec <BSP_SDRAM_Init+0xb4>)
 8001856:	2207      	movs	r2, #7
 8001858:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800185a:	4b24      	ldr	r3, [pc, #144]	@ (80018ec <BSP_SDRAM_Init+0xb4>)
 800185c:	2202      	movs	r2, #2
 800185e:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8001860:	4b22      	ldr	r3, [pc, #136]	@ (80018ec <BSP_SDRAM_Init+0xb4>)
 8001862:	2202      	movs	r2, #2
 8001864:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8001866:	4b21      	ldr	r3, [pc, #132]	@ (80018ec <BSP_SDRAM_Init+0xb4>)
 8001868:	2202      	movs	r2, #2
 800186a:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 800186c:	4b1d      	ldr	r3, [pc, #116]	@ (80018e4 <BSP_SDRAM_Init+0xac>)
 800186e:	2200      	movs	r2, #0
 8001870:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001872:	4b1c      	ldr	r3, [pc, #112]	@ (80018e4 <BSP_SDRAM_Init+0xac>)
 8001874:	2200      	movs	r2, #0
 8001876:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001878:	4b1a      	ldr	r3, [pc, #104]	@ (80018e4 <BSP_SDRAM_Init+0xac>)
 800187a:	2204      	movs	r2, #4
 800187c:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800187e:	4b19      	ldr	r3, [pc, #100]	@ (80018e4 <BSP_SDRAM_Init+0xac>)
 8001880:	2210      	movs	r2, #16
 8001882:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001884:	4b17      	ldr	r3, [pc, #92]	@ (80018e4 <BSP_SDRAM_Init+0xac>)
 8001886:	2240      	movs	r2, #64	@ 0x40
 8001888:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800188a:	4b16      	ldr	r3, [pc, #88]	@ (80018e4 <BSP_SDRAM_Init+0xac>)
 800188c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001890:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001892:	4b14      	ldr	r3, [pc, #80]	@ (80018e4 <BSP_SDRAM_Init+0xac>)
 8001894:	2200      	movs	r2, #0
 8001896:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8001898:	4b12      	ldr	r3, [pc, #72]	@ (80018e4 <BSP_SDRAM_Init+0xac>)
 800189a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800189e:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80018a0:	4b10      	ldr	r3, [pc, #64]	@ (80018e4 <BSP_SDRAM_Init+0xac>)
 80018a2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80018a6:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80018a8:	4b0e      	ldr	r3, [pc, #56]	@ (80018e4 <BSP_SDRAM_Init+0xac>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80018ae:	2100      	movs	r1, #0
 80018b0:	480c      	ldr	r0, [pc, #48]	@ (80018e4 <BSP_SDRAM_Init+0xac>)
 80018b2:	f000 f87f 	bl	80019b4 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80018b6:	490d      	ldr	r1, [pc, #52]	@ (80018ec <BSP_SDRAM_Init+0xb4>)
 80018b8:	480a      	ldr	r0, [pc, #40]	@ (80018e4 <BSP_SDRAM_Init+0xac>)
 80018ba:	f003 ff93 	bl	80057e4 <HAL_SDRAM_Init>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d003      	beq.n	80018cc <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80018c4:	4b0a      	ldr	r3, [pc, #40]	@ (80018f0 <BSP_SDRAM_Init+0xb8>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	701a      	strb	r2, [r3, #0]
 80018ca:	e002      	b.n	80018d2 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80018cc:	4b08      	ldr	r3, [pc, #32]	@ (80018f0 <BSP_SDRAM_Init+0xb8>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80018d2:	f240 6003 	movw	r0, #1539	@ 0x603
 80018d6:	f000 f80d 	bl	80018f4 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80018da:	4b05      	ldr	r3, [pc, #20]	@ (80018f0 <BSP_SDRAM_Init+0xb8>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000290 	.word	0x20000290
 80018e8:	a0000140 	.word	0xa0000140
 80018ec:	200002c4 	.word	0x200002c4
 80018f0:	20000004 	.word	0x20000004

080018f4 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80018fc:	2300      	movs	r3, #0
 80018fe:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001900:	4b2a      	ldr	r3, [pc, #168]	@ (80019ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001902:	2201      	movs	r2, #1
 8001904:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001906:	4b29      	ldr	r3, [pc, #164]	@ (80019ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001908:	2210      	movs	r2, #16
 800190a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800190c:	4b27      	ldr	r3, [pc, #156]	@ (80019ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800190e:	2201      	movs	r2, #1
 8001910:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001912:	4b26      	ldr	r3, [pc, #152]	@ (80019ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001914:	2200      	movs	r2, #0
 8001916:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001918:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800191c:	4923      	ldr	r1, [pc, #140]	@ (80019ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800191e:	4824      	ldr	r0, [pc, #144]	@ (80019b0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001920:	f003 ffb8 	bl	8005894 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001924:	2001      	movs	r0, #1
 8001926:	f000 f99b 	bl	8001c60 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800192a:	4b20      	ldr	r3, [pc, #128]	@ (80019ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800192c:	2202      	movs	r2, #2
 800192e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001930:	4b1e      	ldr	r3, [pc, #120]	@ (80019ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001932:	2210      	movs	r2, #16
 8001934:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001936:	4b1d      	ldr	r3, [pc, #116]	@ (80019ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001938:	2201      	movs	r2, #1
 800193a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800193c:	4b1b      	ldr	r3, [pc, #108]	@ (80019ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800193e:	2200      	movs	r2, #0
 8001940:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8001942:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001946:	4919      	ldr	r1, [pc, #100]	@ (80019ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001948:	4819      	ldr	r0, [pc, #100]	@ (80019b0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800194a:	f003 ffa3 	bl	8005894 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800194e:	4b17      	ldr	r3, [pc, #92]	@ (80019ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001950:	2203      	movs	r2, #3
 8001952:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001954:	4b15      	ldr	r3, [pc, #84]	@ (80019ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001956:	2210      	movs	r2, #16
 8001958:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800195a:	4b14      	ldr	r3, [pc, #80]	@ (80019ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800195c:	2208      	movs	r2, #8
 800195e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001960:	4b12      	ldr	r3, [pc, #72]	@ (80019ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001962:	2200      	movs	r2, #0
 8001964:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001966:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800196a:	4910      	ldr	r1, [pc, #64]	@ (80019ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800196c:	4810      	ldr	r0, [pc, #64]	@ (80019b0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800196e:	f003 ff91 	bl	8005894 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8001972:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8001976:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001978:	4b0c      	ldr	r3, [pc, #48]	@ (80019ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800197a:	2204      	movs	r2, #4
 800197c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800197e:	4b0b      	ldr	r3, [pc, #44]	@ (80019ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001980:	2210      	movs	r2, #16
 8001982:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001984:	4b09      	ldr	r3, [pc, #36]	@ (80019ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001986:	2201      	movs	r2, #1
 8001988:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	4a07      	ldr	r2, [pc, #28]	@ (80019ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800198e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001990:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001994:	4905      	ldr	r1, [pc, #20]	@ (80019ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001996:	4806      	ldr	r0, [pc, #24]	@ (80019b0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001998:	f003 ff7c 	bl	8005894 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 800199c:	6879      	ldr	r1, [r7, #4]
 800199e:	4804      	ldr	r0, [pc, #16]	@ (80019b0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80019a0:	f003 ffad 	bl	80058fe <HAL_SDRAM_ProgramRefreshRate>
}
 80019a4:	bf00      	nop
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	200002e0 	.word	0x200002e0
 80019b0:	20000290 	.word	0x20000290

080019b4 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b090      	sub	sp, #64	@ 0x40
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80019be:	4b70      	ldr	r3, [pc, #448]	@ (8001b80 <BSP_SDRAM_MspInit+0x1cc>)
 80019c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019c2:	4a6f      	ldr	r2, [pc, #444]	@ (8001b80 <BSP_SDRAM_MspInit+0x1cc>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	6393      	str	r3, [r2, #56]	@ 0x38
 80019ca:	4b6d      	ldr	r3, [pc, #436]	@ (8001b80 <BSP_SDRAM_MspInit+0x1cc>)
 80019cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80019d6:	4b6a      	ldr	r3, [pc, #424]	@ (8001b80 <BSP_SDRAM_MspInit+0x1cc>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019da:	4a69      	ldr	r2, [pc, #420]	@ (8001b80 <BSP_SDRAM_MspInit+0x1cc>)
 80019dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80019e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019e2:	4b67      	ldr	r3, [pc, #412]	@ (8001b80 <BSP_SDRAM_MspInit+0x1cc>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80019ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ee:	4b64      	ldr	r3, [pc, #400]	@ (8001b80 <BSP_SDRAM_MspInit+0x1cc>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	4a63      	ldr	r2, [pc, #396]	@ (8001b80 <BSP_SDRAM_MspInit+0x1cc>)
 80019f4:	f043 0304 	orr.w	r3, r3, #4
 80019f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fa:	4b61      	ldr	r3, [pc, #388]	@ (8001b80 <BSP_SDRAM_MspInit+0x1cc>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fe:	f003 0304 	and.w	r3, r3, #4
 8001a02:	623b      	str	r3, [r7, #32]
 8001a04:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a06:	4b5e      	ldr	r3, [pc, #376]	@ (8001b80 <BSP_SDRAM_MspInit+0x1cc>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0a:	4a5d      	ldr	r2, [pc, #372]	@ (8001b80 <BSP_SDRAM_MspInit+0x1cc>)
 8001a0c:	f043 0308 	orr.w	r3, r3, #8
 8001a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a12:	4b5b      	ldr	r3, [pc, #364]	@ (8001b80 <BSP_SDRAM_MspInit+0x1cc>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	61fb      	str	r3, [r7, #28]
 8001a1c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a1e:	4b58      	ldr	r3, [pc, #352]	@ (8001b80 <BSP_SDRAM_MspInit+0x1cc>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a22:	4a57      	ldr	r2, [pc, #348]	@ (8001b80 <BSP_SDRAM_MspInit+0x1cc>)
 8001a24:	f043 0310 	orr.w	r3, r3, #16
 8001a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a2a:	4b55      	ldr	r3, [pc, #340]	@ (8001b80 <BSP_SDRAM_MspInit+0x1cc>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2e:	f003 0310 	and.w	r3, r3, #16
 8001a32:	61bb      	str	r3, [r7, #24]
 8001a34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a36:	4b52      	ldr	r3, [pc, #328]	@ (8001b80 <BSP_SDRAM_MspInit+0x1cc>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	4a51      	ldr	r2, [pc, #324]	@ (8001b80 <BSP_SDRAM_MspInit+0x1cc>)
 8001a3c:	f043 0320 	orr.w	r3, r3, #32
 8001a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a42:	4b4f      	ldr	r3, [pc, #316]	@ (8001b80 <BSP_SDRAM_MspInit+0x1cc>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a46:	f003 0320 	and.w	r3, r3, #32
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a4e:	4b4c      	ldr	r3, [pc, #304]	@ (8001b80 <BSP_SDRAM_MspInit+0x1cc>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a52:	4a4b      	ldr	r2, [pc, #300]	@ (8001b80 <BSP_SDRAM_MspInit+0x1cc>)
 8001a54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a5a:	4b49      	ldr	r3, [pc, #292]	@ (8001b80 <BSP_SDRAM_MspInit+0x1cc>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a66:	4b46      	ldr	r3, [pc, #280]	@ (8001b80 <BSP_SDRAM_MspInit+0x1cc>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	4a45      	ldr	r2, [pc, #276]	@ (8001b80 <BSP_SDRAM_MspInit+0x1cc>)
 8001a6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a72:	4b43      	ldr	r3, [pc, #268]	@ (8001b80 <BSP_SDRAM_MspInit+0x1cc>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001a82:	2301      	movs	r3, #1
 8001a84:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8001a86:	2302      	movs	r3, #2
 8001a88:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8001a8a:	230c      	movs	r3, #12
 8001a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8001a8e:	2308      	movs	r3, #8
 8001a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8001a92:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a96:	4619      	mov	r1, r3
 8001a98:	483a      	ldr	r0, [pc, #232]	@ (8001b84 <BSP_SDRAM_MspInit+0x1d0>)
 8001a9a:	f001 f87f 	bl	8002b9c <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8001a9e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001aa4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4837      	ldr	r0, [pc, #220]	@ (8001b88 <BSP_SDRAM_MspInit+0x1d4>)
 8001aac:	f001 f876 	bl	8002b9c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8001ab0:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001ab6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001aba:	4619      	mov	r1, r3
 8001abc:	4833      	ldr	r0, [pc, #204]	@ (8001b8c <BSP_SDRAM_MspInit+0x1d8>)
 8001abe:	f001 f86d 	bl	8002b9c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8001ac2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001ac8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001acc:	4619      	mov	r1, r3
 8001ace:	4830      	ldr	r0, [pc, #192]	@ (8001b90 <BSP_SDRAM_MspInit+0x1dc>)
 8001ad0:	f001 f864 	bl	8002b9c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8001ad4:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001ada:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ade:	4619      	mov	r1, r3
 8001ae0:	482c      	ldr	r0, [pc, #176]	@ (8001b94 <BSP_SDRAM_MspInit+0x1e0>)
 8001ae2:	f001 f85b 	bl	8002b9c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8001ae6:	2328      	movs	r3, #40	@ 0x28
 8001ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8001aea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001aee:	4619      	mov	r1, r3
 8001af0:	4829      	ldr	r0, [pc, #164]	@ (8001b98 <BSP_SDRAM_MspInit+0x1e4>)
 8001af2:	f001 f853 	bl	8002b9c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001af6:	4b29      	ldr	r3, [pc, #164]	@ (8001b9c <BSP_SDRAM_MspInit+0x1e8>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001afc:	4b27      	ldr	r3, [pc, #156]	@ (8001b9c <BSP_SDRAM_MspInit+0x1e8>)
 8001afe:	2280      	movs	r2, #128	@ 0x80
 8001b00:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8001b02:	4b26      	ldr	r3, [pc, #152]	@ (8001b9c <BSP_SDRAM_MspInit+0x1e8>)
 8001b04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b08:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8001b0a:	4b24      	ldr	r3, [pc, #144]	@ (8001b9c <BSP_SDRAM_MspInit+0x1e8>)
 8001b0c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b10:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b12:	4b22      	ldr	r3, [pc, #136]	@ (8001b9c <BSP_SDRAM_MspInit+0x1e8>)
 8001b14:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b18:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001b1a:	4b20      	ldr	r3, [pc, #128]	@ (8001b9c <BSP_SDRAM_MspInit+0x1e8>)
 8001b1c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b20:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8001b22:	4b1e      	ldr	r3, [pc, #120]	@ (8001b9c <BSP_SDRAM_MspInit+0x1e8>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8001b28:	4b1c      	ldr	r3, [pc, #112]	@ (8001b9c <BSP_SDRAM_MspInit+0x1e8>)
 8001b2a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b2e:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8001b30:	4b1a      	ldr	r3, [pc, #104]	@ (8001b9c <BSP_SDRAM_MspInit+0x1e8>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001b36:	4b19      	ldr	r3, [pc, #100]	@ (8001b9c <BSP_SDRAM_MspInit+0x1e8>)
 8001b38:	2203      	movs	r2, #3
 8001b3a:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001b3c:	4b17      	ldr	r3, [pc, #92]	@ (8001b9c <BSP_SDRAM_MspInit+0x1e8>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001b42:	4b16      	ldr	r3, [pc, #88]	@ (8001b9c <BSP_SDRAM_MspInit+0x1e8>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8001b48:	4b14      	ldr	r3, [pc, #80]	@ (8001b9c <BSP_SDRAM_MspInit+0x1e8>)
 8001b4a:	4a15      	ldr	r2, [pc, #84]	@ (8001ba0 <BSP_SDRAM_MspInit+0x1ec>)
 8001b4c:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a12      	ldr	r2, [pc, #72]	@ (8001b9c <BSP_SDRAM_MspInit+0x1e8>)
 8001b52:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b54:	4a11      	ldr	r2, [pc, #68]	@ (8001b9c <BSP_SDRAM_MspInit+0x1e8>)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8001b5a:	4810      	ldr	r0, [pc, #64]	@ (8001b9c <BSP_SDRAM_MspInit+0x1e8>)
 8001b5c:	f000 fadc 	bl	8002118 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8001b60:	480e      	ldr	r0, [pc, #56]	@ (8001b9c <BSP_SDRAM_MspInit+0x1e8>)
 8001b62:	f000 fa2b 	bl	8001fbc <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8001b66:	2200      	movs	r2, #0
 8001b68:	210f      	movs	r1, #15
 8001b6a:	2038      	movs	r0, #56	@ 0x38
 8001b6c:	f000 f977 	bl	8001e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001b70:	2038      	movs	r0, #56	@ 0x38
 8001b72:	f000 f990 	bl	8001e96 <HAL_NVIC_EnableIRQ>
}
 8001b76:	bf00      	nop
 8001b78:	3740      	adds	r7, #64	@ 0x40
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40020800 	.word	0x40020800
 8001b88:	40020c00 	.word	0x40020c00
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	40021400 	.word	0x40021400
 8001b94:	40021800 	.word	0x40021800
 8001b98:	40021c00 	.word	0x40021c00
 8001b9c:	200002f0 	.word	0x200002f0
 8001ba0:	40026410 	.word	0x40026410

08001ba4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba8:	2003      	movs	r0, #3
 8001baa:	f000 f94d 	bl	8001e48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bae:	2000      	movs	r0, #0
 8001bb0:	f000 f806 	bl	8001bc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bb4:	f7ff fab0 	bl	8001118 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bc8:	4b12      	ldr	r3, [pc, #72]	@ (8001c14 <HAL_InitTick+0x54>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4b12      	ldr	r3, [pc, #72]	@ (8001c18 <HAL_InitTick+0x58>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 f967 	bl	8001eb2 <HAL_SYSTICK_Config>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e00e      	b.n	8001c0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b0f      	cmp	r3, #15
 8001bf2:	d80a      	bhi.n	8001c0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bfc:	f000 f92f 	bl	8001e5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c00:	4a06      	ldr	r2, [pc, #24]	@ (8001c1c <HAL_InitTick+0x5c>)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
 8001c08:	e000      	b.n	8001c0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000000 	.word	0x20000000
 8001c18:	2000000c 	.word	0x2000000c
 8001c1c:	20000008 	.word	0x20000008

08001c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c24:	4b06      	ldr	r3, [pc, #24]	@ (8001c40 <HAL_IncTick+0x20>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	4b06      	ldr	r3, [pc, #24]	@ (8001c44 <HAL_IncTick+0x24>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4413      	add	r3, r2
 8001c30:	4a04      	ldr	r2, [pc, #16]	@ (8001c44 <HAL_IncTick+0x24>)
 8001c32:	6013      	str	r3, [r2, #0]
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	2000000c 	.word	0x2000000c
 8001c44:	20000350 	.word	0x20000350

08001c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c4c:	4b03      	ldr	r3, [pc, #12]	@ (8001c5c <HAL_GetTick+0x14>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	20000350 	.word	0x20000350

08001c60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c68:	f7ff ffee 	bl	8001c48 <HAL_GetTick>
 8001c6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c78:	d005      	beq.n	8001c86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca4 <HAL_Delay+0x44>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	4413      	add	r3, r2
 8001c84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c86:	bf00      	nop
 8001c88:	f7ff ffde 	bl	8001c48 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d8f7      	bhi.n	8001c88 <HAL_Delay+0x28>
  {
  }
}
 8001c98:	bf00      	nop
 8001c9a:	bf00      	nop
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	2000000c 	.word	0x2000000c

08001ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce8 <__NVIC_SetPriorityGrouping+0x40>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cd0:	4b06      	ldr	r3, [pc, #24]	@ (8001cec <__NVIC_SetPriorityGrouping+0x44>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cd6:	4a04      	ldr	r2, [pc, #16]	@ (8001ce8 <__NVIC_SetPriorityGrouping+0x40>)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	60d3      	str	r3, [r2, #12]
}
 8001cdc:	bf00      	nop
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	e000ed00 	.word	0xe000ed00
 8001cec:	05fa0000 	.word	0x05fa0000

08001cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf4:	4b04      	ldr	r3, [pc, #16]	@ (8001d08 <__NVIC_GetPriorityGrouping+0x18>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	0a1b      	lsrs	r3, r3, #8
 8001cfa:	f003 0307 	and.w	r3, r3, #7
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	db0b      	blt.n	8001d36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	f003 021f 	and.w	r2, r3, #31
 8001d24:	4907      	ldr	r1, [pc, #28]	@ (8001d44 <__NVIC_EnableIRQ+0x38>)
 8001d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2a:	095b      	lsrs	r3, r3, #5
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	e000e100 	.word	0xe000e100

08001d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	6039      	str	r1, [r7, #0]
 8001d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	db0a      	blt.n	8001d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	490c      	ldr	r1, [pc, #48]	@ (8001d94 <__NVIC_SetPriority+0x4c>)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	0112      	lsls	r2, r2, #4
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d70:	e00a      	b.n	8001d88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	4908      	ldr	r1, [pc, #32]	@ (8001d98 <__NVIC_SetPriority+0x50>)
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	3b04      	subs	r3, #4
 8001d80:	0112      	lsls	r2, r2, #4
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	440b      	add	r3, r1
 8001d86:	761a      	strb	r2, [r3, #24]
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	e000e100 	.word	0xe000e100
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b089      	sub	sp, #36	@ 0x24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f1c3 0307 	rsb	r3, r3, #7
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	bf28      	it	cs
 8001dba:	2304      	movcs	r3, #4
 8001dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	2b06      	cmp	r3, #6
 8001dc4:	d902      	bls.n	8001dcc <NVIC_EncodePriority+0x30>
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3b03      	subs	r3, #3
 8001dca:	e000      	b.n	8001dce <NVIC_EncodePriority+0x32>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43da      	mvns	r2, r3
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	401a      	ands	r2, r3
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de4:	f04f 31ff 	mov.w	r1, #4294967295
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	fa01 f303 	lsl.w	r3, r1, r3
 8001dee:	43d9      	mvns	r1, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df4:	4313      	orrs	r3, r2
         );
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3724      	adds	r7, #36	@ 0x24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
	...

08001e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e14:	d301      	bcc.n	8001e1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e16:	2301      	movs	r3, #1
 8001e18:	e00f      	b.n	8001e3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e44 <SysTick_Config+0x40>)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e22:	210f      	movs	r1, #15
 8001e24:	f04f 30ff 	mov.w	r0, #4294967295
 8001e28:	f7ff ff8e 	bl	8001d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e2c:	4b05      	ldr	r3, [pc, #20]	@ (8001e44 <SysTick_Config+0x40>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e32:	4b04      	ldr	r3, [pc, #16]	@ (8001e44 <SysTick_Config+0x40>)
 8001e34:	2207      	movs	r2, #7
 8001e36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	e000e010 	.word	0xe000e010

08001e48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff ff29 	bl	8001ca8 <__NVIC_SetPriorityGrouping>
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b086      	sub	sp, #24
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	4603      	mov	r3, r0
 8001e66:	60b9      	str	r1, [r7, #8]
 8001e68:	607a      	str	r2, [r7, #4]
 8001e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e70:	f7ff ff3e 	bl	8001cf0 <__NVIC_GetPriorityGrouping>
 8001e74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	68b9      	ldr	r1, [r7, #8]
 8001e7a:	6978      	ldr	r0, [r7, #20]
 8001e7c:	f7ff ff8e 	bl	8001d9c <NVIC_EncodePriority>
 8001e80:	4602      	mov	r2, r0
 8001e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e86:	4611      	mov	r1, r2
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff ff5d 	bl	8001d48 <__NVIC_SetPriority>
}
 8001e8e:	bf00      	nop
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff ff31 	bl	8001d0c <__NVIC_EnableIRQ>
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff ffa2 	bl	8001e04 <SysTick_Config>
 8001ec0:	4603      	mov	r3, r0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001ed0:	f3bf 8f5f 	dmb	sy
}
 8001ed4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001ed6:	4b07      	ldr	r3, [pc, #28]	@ (8001ef4 <HAL_MPU_Disable+0x28>)
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eda:	4a06      	ldr	r2, [pc, #24]	@ (8001ef4 <HAL_MPU_Disable+0x28>)
 8001edc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ee0:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001ee2:	4b05      	ldr	r3, [pc, #20]	@ (8001ef8 <HAL_MPU_Disable+0x2c>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	605a      	str	r2, [r3, #4]
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	e000ed00 	.word	0xe000ed00
 8001ef8:	e000ed90 	.word	0xe000ed90

08001efc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001f04:	4a0b      	ldr	r2, [pc, #44]	@ (8001f34 <HAL_MPU_Enable+0x38>)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f38 <HAL_MPU_Enable+0x3c>)
 8001f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f12:	4a09      	ldr	r2, [pc, #36]	@ (8001f38 <HAL_MPU_Enable+0x3c>)
 8001f14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f18:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001f1a:	f3bf 8f4f 	dsb	sy
}
 8001f1e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f20:	f3bf 8f6f 	isb	sy
}
 8001f24:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	e000ed90 	.word	0xe000ed90
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	785a      	ldrb	r2, [r3, #1]
 8001f48:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb8 <HAL_MPU_ConfigRegion+0x7c>)
 8001f4a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001f4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001fb8 <HAL_MPU_ConfigRegion+0x7c>)
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	4a19      	ldr	r2, [pc, #100]	@ (8001fb8 <HAL_MPU_ConfigRegion+0x7c>)
 8001f52:	f023 0301 	bic.w	r3, r3, #1
 8001f56:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001f58:	4a17      	ldr	r2, [pc, #92]	@ (8001fb8 <HAL_MPU_ConfigRegion+0x7c>)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	7b1b      	ldrb	r3, [r3, #12]
 8001f64:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	7adb      	ldrb	r3, [r3, #11]
 8001f6a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f6c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	7a9b      	ldrb	r3, [r3, #10]
 8001f72:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001f74:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	7b5b      	ldrb	r3, [r3, #13]
 8001f7a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001f7c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	7b9b      	ldrb	r3, [r3, #14]
 8001f82:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001f84:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	7bdb      	ldrb	r3, [r3, #15]
 8001f8a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001f8c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	7a5b      	ldrb	r3, [r3, #9]
 8001f92:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001f94:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	7a1b      	ldrb	r3, [r3, #8]
 8001f9a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001f9c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	7812      	ldrb	r2, [r2, #0]
 8001fa2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fa4:	4a04      	ldr	r2, [pc, #16]	@ (8001fb8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001fa6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fa8:	6113      	str	r3, [r2, #16]
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	e000ed90 	.word	0xe000ed90

08001fbc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001fc8:	f7ff fe3e 	bl	8001c48 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e099      	b.n	800210c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2202      	movs	r2, #2
 8001fdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 0201 	bic.w	r2, r2, #1
 8001ff6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ff8:	e00f      	b.n	800201a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ffa:	f7ff fe25 	bl	8001c48 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b05      	cmp	r3, #5
 8002006:	d908      	bls.n	800201a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2220      	movs	r2, #32
 800200c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2203      	movs	r2, #3
 8002012:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e078      	b.n	800210c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1e8      	bne.n	8001ffa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	4b38      	ldr	r3, [pc, #224]	@ (8002114 <HAL_DMA_Init+0x158>)
 8002034:	4013      	ands	r3, r2
 8002036:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002046:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002052:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800205e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	4313      	orrs	r3, r2
 800206a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002070:	2b04      	cmp	r3, #4
 8002072:	d107      	bne.n	8002084 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207c:	4313      	orrs	r3, r2
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	4313      	orrs	r3, r2
 8002082:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	f023 0307 	bic.w	r3, r3, #7
 800209a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	d117      	bne.n	80020de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00e      	beq.n	80020de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f000 fb03 	bl	80026cc <DMA_CheckFifoParam>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d008      	beq.n	80020de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2240      	movs	r2, #64	@ 0x40
 80020d0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80020da:	2301      	movs	r3, #1
 80020dc:	e016      	b.n	800210c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 faba 	bl	8002660 <DMA_CalcBaseAndBitshift>
 80020ec:	4603      	mov	r3, r0
 80020ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020f4:	223f      	movs	r2, #63	@ 0x3f
 80020f6:	409a      	lsls	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	f010803f 	.word	0xf010803f

08002118 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e050      	b.n	80021cc <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d101      	bne.n	800213a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002136:	2302      	movs	r3, #2
 8002138:	e048      	b.n	80021cc <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0201 	bic.w	r2, r2, #1
 8002148:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2200      	movs	r2, #0
 8002158:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2200      	movs	r2, #0
 8002160:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2200      	movs	r2, #0
 8002168:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2200      	movs	r2, #0
 8002170:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2221      	movs	r2, #33	@ 0x21
 8002178:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 fa70 	bl	8002660 <DMA_CalcBaseAndBitshift>
 8002180:	4603      	mov	r3, r0
 8002182:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002188:	223f      	movs	r2, #63	@ 0x3f
 800218a:	409a      	lsls	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
 80021e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021e2:	2300      	movs	r3, #0
 80021e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d101      	bne.n	80021fa <HAL_DMA_Start_IT+0x26>
 80021f6:	2302      	movs	r3, #2
 80021f8:	e048      	b.n	800228c <HAL_DMA_Start_IT+0xb8>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b01      	cmp	r3, #1
 800220c:	d137      	bne.n	800227e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2202      	movs	r2, #2
 8002212:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	68b9      	ldr	r1, [r7, #8]
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f000 f9ee 	bl	8002604 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800222c:	223f      	movs	r2, #63	@ 0x3f
 800222e:	409a      	lsls	r2, r3
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0216 	orr.w	r2, r2, #22
 8002242:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	695a      	ldr	r2, [r3, #20]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002252:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002258:	2b00      	cmp	r3, #0
 800225a:	d007      	beq.n	800226c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f042 0208 	orr.w	r2, r2, #8
 800226a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 0201 	orr.w	r2, r2, #1
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	e005      	b.n	800228a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002286:	2302      	movs	r3, #2
 8002288:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800228a:	7dfb      	ldrb	r3, [r7, #23]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d004      	beq.n	80022b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2280      	movs	r2, #128	@ 0x80
 80022ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e00c      	b.n	80022cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2205      	movs	r2, #5
 80022b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0201 	bic.w	r2, r2, #1
 80022c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80022e4:	4b8e      	ldr	r3, [pc, #568]	@ (8002520 <HAL_DMA_IRQHandler+0x248>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a8e      	ldr	r2, [pc, #568]	@ (8002524 <HAL_DMA_IRQHandler+0x24c>)
 80022ea:	fba2 2303 	umull	r2, r3, r2, r3
 80022ee:	0a9b      	lsrs	r3, r3, #10
 80022f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002302:	2208      	movs	r2, #8
 8002304:	409a      	lsls	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	4013      	ands	r3, r2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d01a      	beq.n	8002344 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	d013      	beq.n	8002344 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0204 	bic.w	r2, r2, #4
 800232a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002330:	2208      	movs	r2, #8
 8002332:	409a      	lsls	r2, r3
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800233c:	f043 0201 	orr.w	r2, r3, #1
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002348:	2201      	movs	r2, #1
 800234a:	409a      	lsls	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4013      	ands	r3, r2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d012      	beq.n	800237a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00b      	beq.n	800237a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002366:	2201      	movs	r2, #1
 8002368:	409a      	lsls	r2, r3
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002372:	f043 0202 	orr.w	r2, r3, #2
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800237e:	2204      	movs	r2, #4
 8002380:	409a      	lsls	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	4013      	ands	r3, r2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d012      	beq.n	80023b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00b      	beq.n	80023b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800239c:	2204      	movs	r2, #4
 800239e:	409a      	lsls	r2, r3
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023a8:	f043 0204 	orr.w	r2, r3, #4
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023b4:	2210      	movs	r2, #16
 80023b6:	409a      	lsls	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	4013      	ands	r3, r2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d043      	beq.n	8002448 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d03c      	beq.n	8002448 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023d2:	2210      	movs	r2, #16
 80023d4:	409a      	lsls	r2, r3
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d018      	beq.n	800241a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d108      	bne.n	8002408 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d024      	beq.n	8002448 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	4798      	blx	r3
 8002406:	e01f      	b.n	8002448 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800240c:	2b00      	cmp	r3, #0
 800240e:	d01b      	beq.n	8002448 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	4798      	blx	r3
 8002418:	e016      	b.n	8002448 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002424:	2b00      	cmp	r3, #0
 8002426:	d107      	bne.n	8002438 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0208 	bic.w	r2, r2, #8
 8002436:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243c:	2b00      	cmp	r3, #0
 800243e:	d003      	beq.n	8002448 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800244c:	2220      	movs	r2, #32
 800244e:	409a      	lsls	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4013      	ands	r3, r2
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 808f 	beq.w	8002578 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0310 	and.w	r3, r3, #16
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 8087 	beq.w	8002578 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800246e:	2220      	movs	r2, #32
 8002470:	409a      	lsls	r2, r3
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b05      	cmp	r3, #5
 8002480:	d136      	bne.n	80024f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0216 	bic.w	r2, r2, #22
 8002490:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	695a      	ldr	r2, [r3, #20]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d103      	bne.n	80024b2 <HAL_DMA_IRQHandler+0x1da>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d007      	beq.n	80024c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 0208 	bic.w	r2, r2, #8
 80024c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024c6:	223f      	movs	r2, #63	@ 0x3f
 80024c8:	409a      	lsls	r2, r3
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d07e      	beq.n	80025e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	4798      	blx	r3
        }
        return;
 80024ee:	e079      	b.n	80025e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d01d      	beq.n	800253a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10d      	bne.n	8002528 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002510:	2b00      	cmp	r3, #0
 8002512:	d031      	beq.n	8002578 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	4798      	blx	r3
 800251c:	e02c      	b.n	8002578 <HAL_DMA_IRQHandler+0x2a0>
 800251e:	bf00      	nop
 8002520:	20000000 	.word	0x20000000
 8002524:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800252c:	2b00      	cmp	r3, #0
 800252e:	d023      	beq.n	8002578 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	4798      	blx	r3
 8002538:	e01e      	b.n	8002578 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10f      	bne.n	8002568 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 0210 	bic.w	r2, r2, #16
 8002556:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800257c:	2b00      	cmp	r3, #0
 800257e:	d032      	beq.n	80025e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	2b00      	cmp	r3, #0
 800258a:	d022      	beq.n	80025d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2205      	movs	r2, #5
 8002590:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 0201 	bic.w	r2, r2, #1
 80025a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	3301      	adds	r3, #1
 80025a8:	60bb      	str	r3, [r7, #8]
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d307      	bcc.n	80025c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1f2      	bne.n	80025a4 <HAL_DMA_IRQHandler+0x2cc>
 80025be:	e000      	b.n	80025c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80025c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d005      	beq.n	80025e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	4798      	blx	r3
 80025e2:	e000      	b.n	80025e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80025e4:	bf00      	nop
    }
  }
}
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
 8002610:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002620:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	2b40      	cmp	r3, #64	@ 0x40
 8002630:	d108      	bne.n	8002644 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002642:	e007      	b.n	8002654 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68ba      	ldr	r2, [r7, #8]
 800264a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	60da      	str	r2, [r3, #12]
}
 8002654:	bf00      	nop
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	b2db      	uxtb	r3, r3
 800266e:	3b10      	subs	r3, #16
 8002670:	4a13      	ldr	r2, [pc, #76]	@ (80026c0 <DMA_CalcBaseAndBitshift+0x60>)
 8002672:	fba2 2303 	umull	r2, r3, r2, r3
 8002676:	091b      	lsrs	r3, r3, #4
 8002678:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800267a:	4a12      	ldr	r2, [pc, #72]	@ (80026c4 <DMA_CalcBaseAndBitshift+0x64>)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4413      	add	r3, r2
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	461a      	mov	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2b03      	cmp	r3, #3
 800268c:	d908      	bls.n	80026a0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	461a      	mov	r2, r3
 8002694:	4b0c      	ldr	r3, [pc, #48]	@ (80026c8 <DMA_CalcBaseAndBitshift+0x68>)
 8002696:	4013      	ands	r3, r2
 8002698:	1d1a      	adds	r2, r3, #4
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	659a      	str	r2, [r3, #88]	@ 0x58
 800269e:	e006      	b.n	80026ae <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	461a      	mov	r2, r3
 80026a6:	4b08      	ldr	r3, [pc, #32]	@ (80026c8 <DMA_CalcBaseAndBitshift+0x68>)
 80026a8:	4013      	ands	r3, r2
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3714      	adds	r7, #20
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	aaaaaaab 	.word	0xaaaaaaab
 80026c4:	08006b88 	.word	0x08006b88
 80026c8:	fffffc00 	.word	0xfffffc00

080026cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026d4:	2300      	movs	r3, #0
 80026d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d11f      	bne.n	8002726 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	2b03      	cmp	r3, #3
 80026ea:	d856      	bhi.n	800279a <DMA_CheckFifoParam+0xce>
 80026ec:	a201      	add	r2, pc, #4	@ (adr r2, 80026f4 <DMA_CheckFifoParam+0x28>)
 80026ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f2:	bf00      	nop
 80026f4:	08002705 	.word	0x08002705
 80026f8:	08002717 	.word	0x08002717
 80026fc:	08002705 	.word	0x08002705
 8002700:	0800279b 	.word	0x0800279b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002708:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d046      	beq.n	800279e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002714:	e043      	b.n	800279e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800271a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800271e:	d140      	bne.n	80027a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002724:	e03d      	b.n	80027a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800272e:	d121      	bne.n	8002774 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	2b03      	cmp	r3, #3
 8002734:	d837      	bhi.n	80027a6 <DMA_CheckFifoParam+0xda>
 8002736:	a201      	add	r2, pc, #4	@ (adr r2, 800273c <DMA_CheckFifoParam+0x70>)
 8002738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800273c:	0800274d 	.word	0x0800274d
 8002740:	08002753 	.word	0x08002753
 8002744:	0800274d 	.word	0x0800274d
 8002748:	08002765 	.word	0x08002765
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	73fb      	strb	r3, [r7, #15]
      break;
 8002750:	e030      	b.n	80027b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002756:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d025      	beq.n	80027aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002762:	e022      	b.n	80027aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002768:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800276c:	d11f      	bne.n	80027ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002772:	e01c      	b.n	80027ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	2b02      	cmp	r3, #2
 8002778:	d903      	bls.n	8002782 <DMA_CheckFifoParam+0xb6>
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	2b03      	cmp	r3, #3
 800277e:	d003      	beq.n	8002788 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002780:	e018      	b.n	80027b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	73fb      	strb	r3, [r7, #15]
      break;
 8002786:	e015      	b.n	80027b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800278c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00e      	beq.n	80027b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	73fb      	strb	r3, [r7, #15]
      break;
 8002798:	e00b      	b.n	80027b2 <DMA_CheckFifoParam+0xe6>
      break;
 800279a:	bf00      	nop
 800279c:	e00a      	b.n	80027b4 <DMA_CheckFifoParam+0xe8>
      break;
 800279e:	bf00      	nop
 80027a0:	e008      	b.n	80027b4 <DMA_CheckFifoParam+0xe8>
      break;
 80027a2:	bf00      	nop
 80027a4:	e006      	b.n	80027b4 <DMA_CheckFifoParam+0xe8>
      break;
 80027a6:	bf00      	nop
 80027a8:	e004      	b.n	80027b4 <DMA_CheckFifoParam+0xe8>
      break;
 80027aa:	bf00      	nop
 80027ac:	e002      	b.n	80027b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80027ae:	bf00      	nop
 80027b0:	e000      	b.n	80027b4 <DMA_CheckFifoParam+0xe8>
      break;
 80027b2:	bf00      	nop
    }
  } 
  
  return status; 
 80027b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop

080027c4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e039      	b.n	800284a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d106      	bne.n	80027f0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7fe fcb8 	bl	8001160 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2202      	movs	r2, #2
 80027f4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	430a      	orrs	r2, r1
 800280c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002814:	f023 0107 	bic.w	r1, r3, #7
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800282a:	4b0a      	ldr	r3, [pc, #40]	@ (8002854 <HAL_DMA2D_Init+0x90>)
 800282c:	4013      	ands	r3, r2
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	68d1      	ldr	r1, [r2, #12]
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6812      	ldr	r2, [r2, #0]
 8002836:	430b      	orrs	r3, r1
 8002838:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	ffffc000 	.word	0xffffc000

08002858 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d026      	beq.n	80028c8 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002880:	2b00      	cmp	r3, #0
 8002882:	d021      	beq.n	80028c8 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002892:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002898:	f043 0201 	orr.w	r2, r3, #1
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2201      	movs	r2, #1
 80028a6:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2204      	movs	r2, #4
 80028ac:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d003      	beq.n	80028c8 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f003 0320 	and.w	r3, r3, #32
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d026      	beq.n	8002920 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d021      	beq.n	8002920 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80028ea:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2220      	movs	r2, #32
 80028f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028f8:	f043 0202 	orr.w	r2, r3, #2
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2204      	movs	r2, #4
 8002904:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	695b      	ldr	r3, [r3, #20]
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	2b00      	cmp	r3, #0
 8002928:	d026      	beq.n	8002978 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002930:	2b00      	cmp	r3, #0
 8002932:	d021      	beq.n	8002978 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002942:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2208      	movs	r2, #8
 800294a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002950:	f043 0204 	orr.w	r2, r3, #4
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2204      	movs	r2, #4
 800295c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	695b      	ldr	r3, [r3, #20]
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f003 0304 	and.w	r3, r3, #4
 800297e:	2b00      	cmp	r3, #0
 8002980:	d013      	beq.n	80029aa <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00e      	beq.n	80029aa <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800299a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2204      	movs	r2, #4
 80029a2:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 f853 	bl	8002a50 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d024      	beq.n	80029fe <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d01f      	beq.n	80029fe <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80029cc:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2202      	movs	r2, #2
 80029d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f003 0310 	and.w	r3, r3, #16
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d01f      	beq.n	8002a48 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d01a      	beq.n	8002a48 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002a20:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2210      	movs	r2, #16
 8002a28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f80e 	bl	8002a64 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002a48:	bf00      	nop
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b087      	sub	sp, #28
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d101      	bne.n	8002a98 <HAL_DMA2D_ConfigLayer+0x20>
 8002a94:	2302      	movs	r3, #2
 8002a96:	e079      	b.n	8002b8c <HAL_DMA2D_ConfigLayer+0x114>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	011b      	lsls	r3, r3, #4
 8002aac:	3318      	adds	r3, #24
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	685a      	ldr	r2, [r3, #4]
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	041b      	lsls	r3, r3, #16
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002ac2:	4b35      	ldr	r3, [pc, #212]	@ (8002b98 <HAL_DMA2D_ConfigLayer+0x120>)
 8002ac4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b0a      	cmp	r3, #10
 8002acc:	d003      	beq.n	8002ad6 <HAL_DMA2D_ConfigLayer+0x5e>
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b09      	cmp	r3, #9
 8002ad4:	d107      	bne.n	8002ae6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	617b      	str	r3, [r7, #20]
 8002ae4:	e005      	b.n	8002af2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	061b      	lsls	r3, r3, #24
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d120      	bne.n	8002b3a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	43db      	mvns	r3, r3
 8002b02:	ea02 0103 	and.w	r1, r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	6812      	ldr	r2, [r2, #0]
 8002b18:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2b0a      	cmp	r3, #10
 8002b20:	d003      	beq.n	8002b2a <HAL_DMA2D_ConfigLayer+0xb2>
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b09      	cmp	r3, #9
 8002b28:	d127      	bne.n	8002b7a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002b36:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b38:	e01f      	b.n	8002b7a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	69da      	ldr	r2, [r3, #28]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	43db      	mvns	r3, r3
 8002b44:	ea02 0103 	and.w	r1, r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	6812      	ldr	r2, [r2, #0]
 8002b5a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	2b0a      	cmp	r3, #10
 8002b62:	d003      	beq.n	8002b6c <HAL_DMA2D_ConfigLayer+0xf4>
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	2b09      	cmp	r3, #9
 8002b6a:	d106      	bne.n	8002b7a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	68da      	ldr	r2, [r3, #12]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002b78:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	371c      	adds	r7, #28
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	ff03000f 	.word	0xff03000f

08002b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b089      	sub	sp, #36	@ 0x24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002baa:	2300      	movs	r3, #0
 8002bac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61fb      	str	r3, [r7, #28]
 8002bba:	e175      	b.n	8002ea8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	f040 8164 	bne.w	8002ea2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f003 0303 	and.w	r3, r3, #3
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d005      	beq.n	8002bf2 <HAL_GPIO_Init+0x56>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d130      	bne.n	8002c54 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	2203      	movs	r2, #3
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	43db      	mvns	r3, r3
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	4013      	ands	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c28:	2201      	movs	r2, #1
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4013      	ands	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	091b      	lsrs	r3, r3, #4
 8002c3e:	f003 0201 	and.w	r2, r3, #1
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f003 0303 	and.w	r3, r3, #3
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d017      	beq.n	8002c90 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	2203      	movs	r2, #3
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	43db      	mvns	r3, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4013      	ands	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f003 0303 	and.w	r3, r3, #3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d123      	bne.n	8002ce4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	08da      	lsrs	r2, r3, #3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3208      	adds	r2, #8
 8002ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	220f      	movs	r2, #15
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	691a      	ldr	r2, [r3, #16]
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	08da      	lsrs	r2, r3, #3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	3208      	adds	r2, #8
 8002cde:	69b9      	ldr	r1, [r7, #24]
 8002ce0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	2203      	movs	r2, #3
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f003 0203 	and.w	r2, r3, #3
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 80be 	beq.w	8002ea2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d26:	4b66      	ldr	r3, [pc, #408]	@ (8002ec0 <HAL_GPIO_Init+0x324>)
 8002d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d2a:	4a65      	ldr	r2, [pc, #404]	@ (8002ec0 <HAL_GPIO_Init+0x324>)
 8002d2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d30:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d32:	4b63      	ldr	r3, [pc, #396]	@ (8002ec0 <HAL_GPIO_Init+0x324>)
 8002d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002d3e:	4a61      	ldr	r2, [pc, #388]	@ (8002ec4 <HAL_GPIO_Init+0x328>)
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	089b      	lsrs	r3, r3, #2
 8002d44:	3302      	adds	r3, #2
 8002d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	220f      	movs	r2, #15
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a58      	ldr	r2, [pc, #352]	@ (8002ec8 <HAL_GPIO_Init+0x32c>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d037      	beq.n	8002dda <HAL_GPIO_Init+0x23e>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a57      	ldr	r2, [pc, #348]	@ (8002ecc <HAL_GPIO_Init+0x330>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d031      	beq.n	8002dd6 <HAL_GPIO_Init+0x23a>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a56      	ldr	r2, [pc, #344]	@ (8002ed0 <HAL_GPIO_Init+0x334>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d02b      	beq.n	8002dd2 <HAL_GPIO_Init+0x236>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a55      	ldr	r2, [pc, #340]	@ (8002ed4 <HAL_GPIO_Init+0x338>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d025      	beq.n	8002dce <HAL_GPIO_Init+0x232>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a54      	ldr	r2, [pc, #336]	@ (8002ed8 <HAL_GPIO_Init+0x33c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d01f      	beq.n	8002dca <HAL_GPIO_Init+0x22e>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a53      	ldr	r2, [pc, #332]	@ (8002edc <HAL_GPIO_Init+0x340>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d019      	beq.n	8002dc6 <HAL_GPIO_Init+0x22a>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a52      	ldr	r2, [pc, #328]	@ (8002ee0 <HAL_GPIO_Init+0x344>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d013      	beq.n	8002dc2 <HAL_GPIO_Init+0x226>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a51      	ldr	r2, [pc, #324]	@ (8002ee4 <HAL_GPIO_Init+0x348>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d00d      	beq.n	8002dbe <HAL_GPIO_Init+0x222>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a50      	ldr	r2, [pc, #320]	@ (8002ee8 <HAL_GPIO_Init+0x34c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d007      	beq.n	8002dba <HAL_GPIO_Init+0x21e>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a4f      	ldr	r2, [pc, #316]	@ (8002eec <HAL_GPIO_Init+0x350>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d101      	bne.n	8002db6 <HAL_GPIO_Init+0x21a>
 8002db2:	2309      	movs	r3, #9
 8002db4:	e012      	b.n	8002ddc <HAL_GPIO_Init+0x240>
 8002db6:	230a      	movs	r3, #10
 8002db8:	e010      	b.n	8002ddc <HAL_GPIO_Init+0x240>
 8002dba:	2308      	movs	r3, #8
 8002dbc:	e00e      	b.n	8002ddc <HAL_GPIO_Init+0x240>
 8002dbe:	2307      	movs	r3, #7
 8002dc0:	e00c      	b.n	8002ddc <HAL_GPIO_Init+0x240>
 8002dc2:	2306      	movs	r3, #6
 8002dc4:	e00a      	b.n	8002ddc <HAL_GPIO_Init+0x240>
 8002dc6:	2305      	movs	r3, #5
 8002dc8:	e008      	b.n	8002ddc <HAL_GPIO_Init+0x240>
 8002dca:	2304      	movs	r3, #4
 8002dcc:	e006      	b.n	8002ddc <HAL_GPIO_Init+0x240>
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e004      	b.n	8002ddc <HAL_GPIO_Init+0x240>
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	e002      	b.n	8002ddc <HAL_GPIO_Init+0x240>
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e000      	b.n	8002ddc <HAL_GPIO_Init+0x240>
 8002dda:	2300      	movs	r3, #0
 8002ddc:	69fa      	ldr	r2, [r7, #28]
 8002dde:	f002 0203 	and.w	r2, r2, #3
 8002de2:	0092      	lsls	r2, r2, #2
 8002de4:	4093      	lsls	r3, r2
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002dec:	4935      	ldr	r1, [pc, #212]	@ (8002ec4 <HAL_GPIO_Init+0x328>)
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	089b      	lsrs	r3, r3, #2
 8002df2:	3302      	adds	r3, #2
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dfa:	4b3d      	ldr	r3, [pc, #244]	@ (8002ef0 <HAL_GPIO_Init+0x354>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	43db      	mvns	r3, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4013      	ands	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e1e:	4a34      	ldr	r2, [pc, #208]	@ (8002ef0 <HAL_GPIO_Init+0x354>)
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e24:	4b32      	ldr	r3, [pc, #200]	@ (8002ef0 <HAL_GPIO_Init+0x354>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	4013      	ands	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d003      	beq.n	8002e48 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e48:	4a29      	ldr	r2, [pc, #164]	@ (8002ef0 <HAL_GPIO_Init+0x354>)
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e4e:	4b28      	ldr	r3, [pc, #160]	@ (8002ef0 <HAL_GPIO_Init+0x354>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	43db      	mvns	r3, r3
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e72:	4a1f      	ldr	r2, [pc, #124]	@ (8002ef0 <HAL_GPIO_Init+0x354>)
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e78:	4b1d      	ldr	r3, [pc, #116]	@ (8002ef0 <HAL_GPIO_Init+0x354>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	43db      	mvns	r3, r3
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4013      	ands	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e9c:	4a14      	ldr	r2, [pc, #80]	@ (8002ef0 <HAL_GPIO_Init+0x354>)
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	61fb      	str	r3, [r7, #28]
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	2b0f      	cmp	r3, #15
 8002eac:	f67f ae86 	bls.w	8002bbc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002eb0:	bf00      	nop
 8002eb2:	bf00      	nop
 8002eb4:	3724      	adds	r7, #36	@ 0x24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	40013800 	.word	0x40013800
 8002ec8:	40020000 	.word	0x40020000
 8002ecc:	40020400 	.word	0x40020400
 8002ed0:	40020800 	.word	0x40020800
 8002ed4:	40020c00 	.word	0x40020c00
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	40021400 	.word	0x40021400
 8002ee0:	40021800 	.word	0x40021800
 8002ee4:	40021c00 	.word	0x40021c00
 8002ee8:	40022000 	.word	0x40022000
 8002eec:	40022400 	.word	0x40022400
 8002ef0:	40013c00 	.word	0x40013c00

08002ef4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	460b      	mov	r3, r1
 8002efe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	691a      	ldr	r2, [r3, #16]
 8002f04:	887b      	ldrh	r3, [r7, #2]
 8002f06:	4013      	ands	r3, r2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d002      	beq.n	8002f12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	73fb      	strb	r3, [r7, #15]
 8002f10:	e001      	b.n	8002f16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f12:	2300      	movs	r3, #0
 8002f14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	807b      	strh	r3, [r7, #2]
 8002f30:	4613      	mov	r3, r2
 8002f32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f34:	787b      	ldrb	r3, [r7, #1]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f3a:	887a      	ldrh	r2, [r7, #2]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002f40:	e003      	b.n	8002f4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002f42:	887b      	ldrh	r3, [r7, #2]
 8002f44:	041a      	lsls	r2, r3, #16
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	619a      	str	r2, [r3, #24]
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
	...

08002f58 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e0bf      	b.n	80030ea <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d106      	bne.n	8002f84 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7fe f914 	bl	80011ac <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2202      	movs	r2, #2
 8002f88:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	699a      	ldr	r2, [r3, #24]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8002f9a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6999      	ldr	r1, [r3, #24]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685a      	ldr	r2, [r3, #4]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002fb0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6899      	ldr	r1, [r3, #8]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	4b4a      	ldr	r3, [pc, #296]	@ (80030f4 <HAL_LTDC_Init+0x19c>)
 8002fcc:	400b      	ands	r3, r1
 8002fce:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	041b      	lsls	r3, r3, #16
 8002fd6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6899      	ldr	r1, [r3, #8]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	699a      	ldr	r2, [r3, #24]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68d9      	ldr	r1, [r3, #12]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	4b3e      	ldr	r3, [pc, #248]	@ (80030f4 <HAL_LTDC_Init+0x19c>)
 8002ffa:	400b      	ands	r3, r1
 8002ffc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	041b      	lsls	r3, r3, #16
 8003004:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68d9      	ldr	r1, [r3, #12]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a1a      	ldr	r2, [r3, #32]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	430a      	orrs	r2, r1
 800301a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6919      	ldr	r1, [r3, #16]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	4b33      	ldr	r3, [pc, #204]	@ (80030f4 <HAL_LTDC_Init+0x19c>)
 8003028:	400b      	ands	r3, r1
 800302a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003030:	041b      	lsls	r3, r3, #16
 8003032:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6919      	ldr	r1, [r3, #16]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	431a      	orrs	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	430a      	orrs	r2, r1
 8003048:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6959      	ldr	r1, [r3, #20]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	4b27      	ldr	r3, [pc, #156]	@ (80030f4 <HAL_LTDC_Init+0x19c>)
 8003056:	400b      	ands	r3, r1
 8003058:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800305e:	041b      	lsls	r3, r3, #16
 8003060:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6959      	ldr	r1, [r3, #20]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	431a      	orrs	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	430a      	orrs	r2, r1
 8003076:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800307e:	021b      	lsls	r3, r3, #8
 8003080:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8003088:	041b      	lsls	r3, r3, #16
 800308a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800309a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80030ae:	431a      	orrs	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f042 0206 	orr.w	r2, r2, #6
 80030c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	699a      	ldr	r2, [r3, #24]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f042 0201 	orr.w	r2, r2, #1
 80030d6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	f000f800 	.word	0xf000f800

080030f8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80030f8:	b5b0      	push	{r4, r5, r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800310a:	2b01      	cmp	r3, #1
 800310c:	d101      	bne.n	8003112 <HAL_LTDC_ConfigLayer+0x1a>
 800310e:	2302      	movs	r3, #2
 8003110:	e02c      	b.n	800316c <HAL_LTDC_ConfigLayer+0x74>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2202      	movs	r2, #2
 800311e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2134      	movs	r1, #52	@ 0x34
 8003128:	fb01 f303 	mul.w	r3, r1, r3
 800312c:	4413      	add	r3, r2
 800312e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	4614      	mov	r4, r2
 8003136:	461d      	mov	r5, r3
 8003138:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800313a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800313c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800313e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003140:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003142:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003144:	682b      	ldr	r3, [r5, #0]
 8003146:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	68b9      	ldr	r1, [r7, #8]
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f000 f841 	bl	80031d4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2201      	movs	r2, #1
 8003158:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bdb0      	pop	{r4, r5, r7, pc}

08003174 <HAL_LTDC_Reload>:
  *                      LTDC_RELOAD_VERTICAL_BLANKING  : Reload in the next Vertical Blanking
  * @note   User application may resort to HAL_LTDC_ReloadEventCallback() at reload interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef  HAL_LTDC_Reload(LTDC_HandleTypeDef *hltdc, uint32_t ReloadType)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(ReloadType));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8003184:	2b01      	cmp	r3, #1
 8003186:	d101      	bne.n	800318c <HAL_LTDC_Reload+0x18>
 8003188:	2302      	movs	r3, #2
 800318a:	e01c      	b.n	80031c6 <HAL_LTDC_Reload+0x52>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2202      	movs	r2, #2
 8003198:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable the Reload interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0208 	orr.w	r2, r2, #8
 80031aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Apply Reload type */
  hltdc->Instance->SRCR = ReloadType;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
	...

080031d4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b089      	sub	sp, #36	@ 0x24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	0c1b      	lsrs	r3, r3, #16
 80031ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f0:	4413      	add	r3, r2
 80031f2:	041b      	lsls	r3, r3, #16
 80031f4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	461a      	mov	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	01db      	lsls	r3, r3, #7
 8003200:	4413      	add	r3, r2
 8003202:	3384      	adds	r3, #132	@ 0x84
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	6812      	ldr	r2, [r2, #0]
 800320a:	4611      	mov	r1, r2
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	01d2      	lsls	r2, r2, #7
 8003210:	440a      	add	r2, r1
 8003212:	3284      	adds	r2, #132	@ 0x84
 8003214:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003218:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	0c1b      	lsrs	r3, r3, #16
 8003226:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800322a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800322c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4619      	mov	r1, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	01db      	lsls	r3, r3, #7
 8003238:	440b      	add	r3, r1
 800323a:	3384      	adds	r3, #132	@ 0x84
 800323c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003242:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	68da      	ldr	r2, [r3, #12]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003252:	4413      	add	r3, r2
 8003254:	041b      	lsls	r3, r3, #16
 8003256:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	461a      	mov	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	01db      	lsls	r3, r3, #7
 8003262:	4413      	add	r3, r2
 8003264:	3384      	adds	r3, #132	@ 0x84
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	6812      	ldr	r2, [r2, #0]
 800326c:	4611      	mov	r1, r2
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	01d2      	lsls	r2, r2, #7
 8003272:	440a      	add	r2, r1
 8003274:	3284      	adds	r2, #132	@ 0x84
 8003276:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800327a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800328a:	4413      	add	r3, r2
 800328c:	1c5a      	adds	r2, r3, #1
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4619      	mov	r1, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	01db      	lsls	r3, r3, #7
 8003298:	440b      	add	r3, r1
 800329a:	3384      	adds	r3, #132	@ 0x84
 800329c:	4619      	mov	r1, r3
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	461a      	mov	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	01db      	lsls	r3, r3, #7
 80032ae:	4413      	add	r3, r2
 80032b0:	3384      	adds	r3, #132	@ 0x84
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	6812      	ldr	r2, [r2, #0]
 80032b8:	4611      	mov	r1, r2
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	01d2      	lsls	r2, r2, #7
 80032be:	440a      	add	r2, r1
 80032c0:	3284      	adds	r2, #132	@ 0x84
 80032c2:	f023 0307 	bic.w	r3, r3, #7
 80032c6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	461a      	mov	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	01db      	lsls	r3, r3, #7
 80032d2:	4413      	add	r3, r2
 80032d4:	3384      	adds	r3, #132	@ 0x84
 80032d6:	461a      	mov	r2, r3
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80032e4:	021b      	lsls	r3, r3, #8
 80032e6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80032ee:	041b      	lsls	r3, r3, #16
 80032f0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	061b      	lsls	r3, r3, #24
 80032f8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	461a      	mov	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	01db      	lsls	r3, r3, #7
 8003304:	4413      	add	r3, r2
 8003306:	3384      	adds	r3, #132	@ 0x84
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	461a      	mov	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	01db      	lsls	r3, r3, #7
 8003314:	4413      	add	r3, r2
 8003316:	3384      	adds	r3, #132	@ 0x84
 8003318:	461a      	mov	r2, r3
 800331a:	2300      	movs	r3, #0
 800331c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003324:	461a      	mov	r2, r3
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	431a      	orrs	r2, r3
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	431a      	orrs	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4619      	mov	r1, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	01db      	lsls	r3, r3, #7
 8003338:	440b      	add	r3, r1
 800333a:	3384      	adds	r3, #132	@ 0x84
 800333c:	4619      	mov	r1, r3
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	4313      	orrs	r3, r2
 8003342:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	461a      	mov	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	01db      	lsls	r3, r3, #7
 800334e:	4413      	add	r3, r2
 8003350:	3384      	adds	r3, #132	@ 0x84
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	6812      	ldr	r2, [r2, #0]
 8003358:	4611      	mov	r1, r2
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	01d2      	lsls	r2, r2, #7
 800335e:	440a      	add	r2, r1
 8003360:	3284      	adds	r2, #132	@ 0x84
 8003362:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003366:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	461a      	mov	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	01db      	lsls	r3, r3, #7
 8003372:	4413      	add	r3, r2
 8003374:	3384      	adds	r3, #132	@ 0x84
 8003376:	461a      	mov	r2, r3
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	461a      	mov	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	01db      	lsls	r3, r3, #7
 8003388:	4413      	add	r3, r2
 800338a:	3384      	adds	r3, #132	@ 0x84
 800338c:	69da      	ldr	r2, [r3, #28]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4619      	mov	r1, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	01db      	lsls	r3, r3, #7
 8003398:	440b      	add	r3, r1
 800339a:	3384      	adds	r3, #132	@ 0x84
 800339c:	4619      	mov	r1, r3
 800339e:	4b58      	ldr	r3, [pc, #352]	@ (8003500 <LTDC_SetConfig+0x32c>)
 80033a0:	4013      	ands	r3, r2
 80033a2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	69da      	ldr	r2, [r3, #28]
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	68f9      	ldr	r1, [r7, #12]
 80033ae:	6809      	ldr	r1, [r1, #0]
 80033b0:	4608      	mov	r0, r1
 80033b2:	6879      	ldr	r1, [r7, #4]
 80033b4:	01c9      	lsls	r1, r1, #7
 80033b6:	4401      	add	r1, r0
 80033b8:	3184      	adds	r1, #132	@ 0x84
 80033ba:	4313      	orrs	r3, r2
 80033bc:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	461a      	mov	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	01db      	lsls	r3, r3, #7
 80033c8:	4413      	add	r3, r2
 80033ca:	3384      	adds	r3, #132	@ 0x84
 80033cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	461a      	mov	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	01db      	lsls	r3, r3, #7
 80033d8:	4413      	add	r3, r2
 80033da:	3384      	adds	r3, #132	@ 0x84
 80033dc:	461a      	mov	r2, r3
 80033de:	2300      	movs	r3, #0
 80033e0:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	461a      	mov	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	01db      	lsls	r3, r3, #7
 80033ec:	4413      	add	r3, r2
 80033ee:	3384      	adds	r3, #132	@ 0x84
 80033f0:	461a      	mov	r2, r3
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f6:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d102      	bne.n	8003406 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8003400:	2304      	movs	r3, #4
 8003402:	61fb      	str	r3, [r7, #28]
 8003404:	e01b      	b.n	800343e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d102      	bne.n	8003414 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800340e:	2303      	movs	r3, #3
 8003410:	61fb      	str	r3, [r7, #28]
 8003412:	e014      	b.n	800343e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	2b04      	cmp	r3, #4
 800341a:	d00b      	beq.n	8003434 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003420:	2b02      	cmp	r3, #2
 8003422:	d007      	beq.n	8003434 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003428:	2b03      	cmp	r3, #3
 800342a:	d003      	beq.n	8003434 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003430:	2b07      	cmp	r3, #7
 8003432:	d102      	bne.n	800343a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8003434:	2302      	movs	r3, #2
 8003436:	61fb      	str	r3, [r7, #28]
 8003438:	e001      	b.n	800343e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800343a:	2301      	movs	r3, #1
 800343c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	461a      	mov	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	01db      	lsls	r3, r3, #7
 8003448:	4413      	add	r3, r2
 800344a:	3384      	adds	r3, #132	@ 0x84
 800344c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	6812      	ldr	r2, [r2, #0]
 8003452:	4611      	mov	r1, r2
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	01d2      	lsls	r2, r2, #7
 8003458:	440a      	add	r2, r1
 800345a:	3284      	adds	r2, #132	@ 0x84
 800345c:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8003460:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003466:	69fa      	ldr	r2, [r7, #28]
 8003468:	fb02 f303 	mul.w	r3, r2, r3
 800346c:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	6859      	ldr	r1, [r3, #4]
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	1acb      	subs	r3, r1, r3
 8003478:	69f9      	ldr	r1, [r7, #28]
 800347a:	fb01 f303 	mul.w	r3, r1, r3
 800347e:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003480:	68f9      	ldr	r1, [r7, #12]
 8003482:	6809      	ldr	r1, [r1, #0]
 8003484:	4608      	mov	r0, r1
 8003486:	6879      	ldr	r1, [r7, #4]
 8003488:	01c9      	lsls	r1, r1, #7
 800348a:	4401      	add	r1, r0
 800348c:	3184      	adds	r1, #132	@ 0x84
 800348e:	4313      	orrs	r3, r2
 8003490:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	461a      	mov	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	01db      	lsls	r3, r3, #7
 800349c:	4413      	add	r3, r2
 800349e:	3384      	adds	r3, #132	@ 0x84
 80034a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4619      	mov	r1, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	01db      	lsls	r3, r3, #7
 80034ac:	440b      	add	r3, r1
 80034ae:	3384      	adds	r3, #132	@ 0x84
 80034b0:	4619      	mov	r1, r3
 80034b2:	4b14      	ldr	r3, [pc, #80]	@ (8003504 <LTDC_SetConfig+0x330>)
 80034b4:	4013      	ands	r3, r2
 80034b6:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	461a      	mov	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	01db      	lsls	r3, r3, #7
 80034c2:	4413      	add	r3, r2
 80034c4:	3384      	adds	r3, #132	@ 0x84
 80034c6:	461a      	mov	r2, r3
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034cc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	461a      	mov	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	01db      	lsls	r3, r3, #7
 80034d8:	4413      	add	r3, r2
 80034da:	3384      	adds	r3, #132	@ 0x84
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	6812      	ldr	r2, [r2, #0]
 80034e2:	4611      	mov	r1, r2
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	01d2      	lsls	r2, r2, #7
 80034e8:	440a      	add	r2, r1
 80034ea:	3284      	adds	r2, #132	@ 0x84
 80034ec:	f043 0301 	orr.w	r3, r3, #1
 80034f0:	6013      	str	r3, [r2, #0]
}
 80034f2:	bf00      	nop
 80034f4:	3724      	adds	r7, #36	@ 0x24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	fffff8f8 	.word	0xfffff8f8
 8003504:	fffff800 	.word	0xfffff800

08003508 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003510:	2300      	movs	r3, #0
 8003512:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e291      	b.n	8003a42 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	f000 8087 	beq.w	800363a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800352c:	4b96      	ldr	r3, [pc, #600]	@ (8003788 <HAL_RCC_OscConfig+0x280>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f003 030c 	and.w	r3, r3, #12
 8003534:	2b04      	cmp	r3, #4
 8003536:	d00c      	beq.n	8003552 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003538:	4b93      	ldr	r3, [pc, #588]	@ (8003788 <HAL_RCC_OscConfig+0x280>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f003 030c 	and.w	r3, r3, #12
 8003540:	2b08      	cmp	r3, #8
 8003542:	d112      	bne.n	800356a <HAL_RCC_OscConfig+0x62>
 8003544:	4b90      	ldr	r3, [pc, #576]	@ (8003788 <HAL_RCC_OscConfig+0x280>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800354c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003550:	d10b      	bne.n	800356a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003552:	4b8d      	ldr	r3, [pc, #564]	@ (8003788 <HAL_RCC_OscConfig+0x280>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d06c      	beq.n	8003638 <HAL_RCC_OscConfig+0x130>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d168      	bne.n	8003638 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e26b      	b.n	8003a42 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003572:	d106      	bne.n	8003582 <HAL_RCC_OscConfig+0x7a>
 8003574:	4b84      	ldr	r3, [pc, #528]	@ (8003788 <HAL_RCC_OscConfig+0x280>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a83      	ldr	r2, [pc, #524]	@ (8003788 <HAL_RCC_OscConfig+0x280>)
 800357a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800357e:	6013      	str	r3, [r2, #0]
 8003580:	e02e      	b.n	80035e0 <HAL_RCC_OscConfig+0xd8>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10c      	bne.n	80035a4 <HAL_RCC_OscConfig+0x9c>
 800358a:	4b7f      	ldr	r3, [pc, #508]	@ (8003788 <HAL_RCC_OscConfig+0x280>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a7e      	ldr	r2, [pc, #504]	@ (8003788 <HAL_RCC_OscConfig+0x280>)
 8003590:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003594:	6013      	str	r3, [r2, #0]
 8003596:	4b7c      	ldr	r3, [pc, #496]	@ (8003788 <HAL_RCC_OscConfig+0x280>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a7b      	ldr	r2, [pc, #492]	@ (8003788 <HAL_RCC_OscConfig+0x280>)
 800359c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	e01d      	b.n	80035e0 <HAL_RCC_OscConfig+0xd8>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035ac:	d10c      	bne.n	80035c8 <HAL_RCC_OscConfig+0xc0>
 80035ae:	4b76      	ldr	r3, [pc, #472]	@ (8003788 <HAL_RCC_OscConfig+0x280>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a75      	ldr	r2, [pc, #468]	@ (8003788 <HAL_RCC_OscConfig+0x280>)
 80035b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035b8:	6013      	str	r3, [r2, #0]
 80035ba:	4b73      	ldr	r3, [pc, #460]	@ (8003788 <HAL_RCC_OscConfig+0x280>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a72      	ldr	r2, [pc, #456]	@ (8003788 <HAL_RCC_OscConfig+0x280>)
 80035c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	e00b      	b.n	80035e0 <HAL_RCC_OscConfig+0xd8>
 80035c8:	4b6f      	ldr	r3, [pc, #444]	@ (8003788 <HAL_RCC_OscConfig+0x280>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a6e      	ldr	r2, [pc, #440]	@ (8003788 <HAL_RCC_OscConfig+0x280>)
 80035ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035d2:	6013      	str	r3, [r2, #0]
 80035d4:	4b6c      	ldr	r3, [pc, #432]	@ (8003788 <HAL_RCC_OscConfig+0x280>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a6b      	ldr	r2, [pc, #428]	@ (8003788 <HAL_RCC_OscConfig+0x280>)
 80035da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d013      	beq.n	8003610 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e8:	f7fe fb2e 	bl	8001c48 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035f0:	f7fe fb2a 	bl	8001c48 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b64      	cmp	r3, #100	@ 0x64
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e21f      	b.n	8003a42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003602:	4b61      	ldr	r3, [pc, #388]	@ (8003788 <HAL_RCC_OscConfig+0x280>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0f0      	beq.n	80035f0 <HAL_RCC_OscConfig+0xe8>
 800360e:	e014      	b.n	800363a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003610:	f7fe fb1a 	bl	8001c48 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003618:	f7fe fb16 	bl	8001c48 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b64      	cmp	r3, #100	@ 0x64
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e20b      	b.n	8003a42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800362a:	4b57      	ldr	r3, [pc, #348]	@ (8003788 <HAL_RCC_OscConfig+0x280>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1f0      	bne.n	8003618 <HAL_RCC_OscConfig+0x110>
 8003636:	e000      	b.n	800363a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d069      	beq.n	800371a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003646:	4b50      	ldr	r3, [pc, #320]	@ (8003788 <HAL_RCC_OscConfig+0x280>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 030c 	and.w	r3, r3, #12
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00b      	beq.n	800366a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003652:	4b4d      	ldr	r3, [pc, #308]	@ (8003788 <HAL_RCC_OscConfig+0x280>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 030c 	and.w	r3, r3, #12
 800365a:	2b08      	cmp	r3, #8
 800365c:	d11c      	bne.n	8003698 <HAL_RCC_OscConfig+0x190>
 800365e:	4b4a      	ldr	r3, [pc, #296]	@ (8003788 <HAL_RCC_OscConfig+0x280>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d116      	bne.n	8003698 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800366a:	4b47      	ldr	r3, [pc, #284]	@ (8003788 <HAL_RCC_OscConfig+0x280>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d005      	beq.n	8003682 <HAL_RCC_OscConfig+0x17a>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d001      	beq.n	8003682 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e1df      	b.n	8003a42 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003682:	4b41      	ldr	r3, [pc, #260]	@ (8003788 <HAL_RCC_OscConfig+0x280>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	493d      	ldr	r1, [pc, #244]	@ (8003788 <HAL_RCC_OscConfig+0x280>)
 8003692:	4313      	orrs	r3, r2
 8003694:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003696:	e040      	b.n	800371a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d023      	beq.n	80036e8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036a0:	4b39      	ldr	r3, [pc, #228]	@ (8003788 <HAL_RCC_OscConfig+0x280>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a38      	ldr	r2, [pc, #224]	@ (8003788 <HAL_RCC_OscConfig+0x280>)
 80036a6:	f043 0301 	orr.w	r3, r3, #1
 80036aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ac:	f7fe facc 	bl	8001c48 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036b4:	f7fe fac8 	bl	8001c48 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e1bd      	b.n	8003a42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c6:	4b30      	ldr	r3, [pc, #192]	@ (8003788 <HAL_RCC_OscConfig+0x280>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d0f0      	beq.n	80036b4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d2:	4b2d      	ldr	r3, [pc, #180]	@ (8003788 <HAL_RCC_OscConfig+0x280>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	4929      	ldr	r1, [pc, #164]	@ (8003788 <HAL_RCC_OscConfig+0x280>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	600b      	str	r3, [r1, #0]
 80036e6:	e018      	b.n	800371a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036e8:	4b27      	ldr	r3, [pc, #156]	@ (8003788 <HAL_RCC_OscConfig+0x280>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a26      	ldr	r2, [pc, #152]	@ (8003788 <HAL_RCC_OscConfig+0x280>)
 80036ee:	f023 0301 	bic.w	r3, r3, #1
 80036f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f4:	f7fe faa8 	bl	8001c48 <HAL_GetTick>
 80036f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036fa:	e008      	b.n	800370e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036fc:	f7fe faa4 	bl	8001c48 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e199      	b.n	8003a42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800370e:	4b1e      	ldr	r3, [pc, #120]	@ (8003788 <HAL_RCC_OscConfig+0x280>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1f0      	bne.n	80036fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0308 	and.w	r3, r3, #8
 8003722:	2b00      	cmp	r3, #0
 8003724:	d038      	beq.n	8003798 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d019      	beq.n	8003762 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800372e:	4b16      	ldr	r3, [pc, #88]	@ (8003788 <HAL_RCC_OscConfig+0x280>)
 8003730:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003732:	4a15      	ldr	r2, [pc, #84]	@ (8003788 <HAL_RCC_OscConfig+0x280>)
 8003734:	f043 0301 	orr.w	r3, r3, #1
 8003738:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800373a:	f7fe fa85 	bl	8001c48 <HAL_GetTick>
 800373e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003740:	e008      	b.n	8003754 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003742:	f7fe fa81 	bl	8001c48 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d901      	bls.n	8003754 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e176      	b.n	8003a42 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003754:	4b0c      	ldr	r3, [pc, #48]	@ (8003788 <HAL_RCC_OscConfig+0x280>)
 8003756:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0f0      	beq.n	8003742 <HAL_RCC_OscConfig+0x23a>
 8003760:	e01a      	b.n	8003798 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003762:	4b09      	ldr	r3, [pc, #36]	@ (8003788 <HAL_RCC_OscConfig+0x280>)
 8003764:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003766:	4a08      	ldr	r2, [pc, #32]	@ (8003788 <HAL_RCC_OscConfig+0x280>)
 8003768:	f023 0301 	bic.w	r3, r3, #1
 800376c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800376e:	f7fe fa6b 	bl	8001c48 <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003774:	e00a      	b.n	800378c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003776:	f7fe fa67 	bl	8001c48 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d903      	bls.n	800378c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e15c      	b.n	8003a42 <HAL_RCC_OscConfig+0x53a>
 8003788:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800378c:	4b91      	ldr	r3, [pc, #580]	@ (80039d4 <HAL_RCC_OscConfig+0x4cc>)
 800378e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1ee      	bne.n	8003776 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0304 	and.w	r3, r3, #4
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 80a4 	beq.w	80038ee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037a6:	4b8b      	ldr	r3, [pc, #556]	@ (80039d4 <HAL_RCC_OscConfig+0x4cc>)
 80037a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10d      	bne.n	80037ce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80037b2:	4b88      	ldr	r3, [pc, #544]	@ (80039d4 <HAL_RCC_OscConfig+0x4cc>)
 80037b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b6:	4a87      	ldr	r2, [pc, #540]	@ (80039d4 <HAL_RCC_OscConfig+0x4cc>)
 80037b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80037be:	4b85      	ldr	r3, [pc, #532]	@ (80039d4 <HAL_RCC_OscConfig+0x4cc>)
 80037c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037c6:	60bb      	str	r3, [r7, #8]
 80037c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ca:	2301      	movs	r3, #1
 80037cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037ce:	4b82      	ldr	r3, [pc, #520]	@ (80039d8 <HAL_RCC_OscConfig+0x4d0>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d118      	bne.n	800380c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80037da:	4b7f      	ldr	r3, [pc, #508]	@ (80039d8 <HAL_RCC_OscConfig+0x4d0>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a7e      	ldr	r2, [pc, #504]	@ (80039d8 <HAL_RCC_OscConfig+0x4d0>)
 80037e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037e6:	f7fe fa2f 	bl	8001c48 <HAL_GetTick>
 80037ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037ec:	e008      	b.n	8003800 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ee:	f7fe fa2b 	bl	8001c48 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b64      	cmp	r3, #100	@ 0x64
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e120      	b.n	8003a42 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003800:	4b75      	ldr	r3, [pc, #468]	@ (80039d8 <HAL_RCC_OscConfig+0x4d0>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0f0      	beq.n	80037ee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d106      	bne.n	8003822 <HAL_RCC_OscConfig+0x31a>
 8003814:	4b6f      	ldr	r3, [pc, #444]	@ (80039d4 <HAL_RCC_OscConfig+0x4cc>)
 8003816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003818:	4a6e      	ldr	r2, [pc, #440]	@ (80039d4 <HAL_RCC_OscConfig+0x4cc>)
 800381a:	f043 0301 	orr.w	r3, r3, #1
 800381e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003820:	e02d      	b.n	800387e <HAL_RCC_OscConfig+0x376>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10c      	bne.n	8003844 <HAL_RCC_OscConfig+0x33c>
 800382a:	4b6a      	ldr	r3, [pc, #424]	@ (80039d4 <HAL_RCC_OscConfig+0x4cc>)
 800382c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800382e:	4a69      	ldr	r2, [pc, #420]	@ (80039d4 <HAL_RCC_OscConfig+0x4cc>)
 8003830:	f023 0301 	bic.w	r3, r3, #1
 8003834:	6713      	str	r3, [r2, #112]	@ 0x70
 8003836:	4b67      	ldr	r3, [pc, #412]	@ (80039d4 <HAL_RCC_OscConfig+0x4cc>)
 8003838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800383a:	4a66      	ldr	r2, [pc, #408]	@ (80039d4 <HAL_RCC_OscConfig+0x4cc>)
 800383c:	f023 0304 	bic.w	r3, r3, #4
 8003840:	6713      	str	r3, [r2, #112]	@ 0x70
 8003842:	e01c      	b.n	800387e <HAL_RCC_OscConfig+0x376>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	2b05      	cmp	r3, #5
 800384a:	d10c      	bne.n	8003866 <HAL_RCC_OscConfig+0x35e>
 800384c:	4b61      	ldr	r3, [pc, #388]	@ (80039d4 <HAL_RCC_OscConfig+0x4cc>)
 800384e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003850:	4a60      	ldr	r2, [pc, #384]	@ (80039d4 <HAL_RCC_OscConfig+0x4cc>)
 8003852:	f043 0304 	orr.w	r3, r3, #4
 8003856:	6713      	str	r3, [r2, #112]	@ 0x70
 8003858:	4b5e      	ldr	r3, [pc, #376]	@ (80039d4 <HAL_RCC_OscConfig+0x4cc>)
 800385a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800385c:	4a5d      	ldr	r2, [pc, #372]	@ (80039d4 <HAL_RCC_OscConfig+0x4cc>)
 800385e:	f043 0301 	orr.w	r3, r3, #1
 8003862:	6713      	str	r3, [r2, #112]	@ 0x70
 8003864:	e00b      	b.n	800387e <HAL_RCC_OscConfig+0x376>
 8003866:	4b5b      	ldr	r3, [pc, #364]	@ (80039d4 <HAL_RCC_OscConfig+0x4cc>)
 8003868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800386a:	4a5a      	ldr	r2, [pc, #360]	@ (80039d4 <HAL_RCC_OscConfig+0x4cc>)
 800386c:	f023 0301 	bic.w	r3, r3, #1
 8003870:	6713      	str	r3, [r2, #112]	@ 0x70
 8003872:	4b58      	ldr	r3, [pc, #352]	@ (80039d4 <HAL_RCC_OscConfig+0x4cc>)
 8003874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003876:	4a57      	ldr	r2, [pc, #348]	@ (80039d4 <HAL_RCC_OscConfig+0x4cc>)
 8003878:	f023 0304 	bic.w	r3, r3, #4
 800387c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d015      	beq.n	80038b2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003886:	f7fe f9df 	bl	8001c48 <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800388c:	e00a      	b.n	80038a4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800388e:	f7fe f9db 	bl	8001c48 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	f241 3288 	movw	r2, #5000	@ 0x1388
 800389c:	4293      	cmp	r3, r2
 800389e:	d901      	bls.n	80038a4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e0ce      	b.n	8003a42 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a4:	4b4b      	ldr	r3, [pc, #300]	@ (80039d4 <HAL_RCC_OscConfig+0x4cc>)
 80038a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0ee      	beq.n	800388e <HAL_RCC_OscConfig+0x386>
 80038b0:	e014      	b.n	80038dc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b2:	f7fe f9c9 	bl	8001c48 <HAL_GetTick>
 80038b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038b8:	e00a      	b.n	80038d0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ba:	f7fe f9c5 	bl	8001c48 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d901      	bls.n	80038d0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e0b8      	b.n	8003a42 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038d0:	4b40      	ldr	r3, [pc, #256]	@ (80039d4 <HAL_RCC_OscConfig+0x4cc>)
 80038d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1ee      	bne.n	80038ba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038dc:	7dfb      	ldrb	r3, [r7, #23]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d105      	bne.n	80038ee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038e2:	4b3c      	ldr	r3, [pc, #240]	@ (80039d4 <HAL_RCC_OscConfig+0x4cc>)
 80038e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e6:	4a3b      	ldr	r2, [pc, #236]	@ (80039d4 <HAL_RCC_OscConfig+0x4cc>)
 80038e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038ec:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	f000 80a4 	beq.w	8003a40 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038f8:	4b36      	ldr	r3, [pc, #216]	@ (80039d4 <HAL_RCC_OscConfig+0x4cc>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f003 030c 	and.w	r3, r3, #12
 8003900:	2b08      	cmp	r3, #8
 8003902:	d06b      	beq.n	80039dc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	2b02      	cmp	r3, #2
 800390a:	d149      	bne.n	80039a0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800390c:	4b31      	ldr	r3, [pc, #196]	@ (80039d4 <HAL_RCC_OscConfig+0x4cc>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a30      	ldr	r2, [pc, #192]	@ (80039d4 <HAL_RCC_OscConfig+0x4cc>)
 8003912:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003916:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003918:	f7fe f996 	bl	8001c48 <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003920:	f7fe f992 	bl	8001c48 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e087      	b.n	8003a42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003932:	4b28      	ldr	r3, [pc, #160]	@ (80039d4 <HAL_RCC_OscConfig+0x4cc>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1f0      	bne.n	8003920 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	69da      	ldr	r2, [r3, #28]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	431a      	orrs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800394c:	019b      	lsls	r3, r3, #6
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003954:	085b      	lsrs	r3, r3, #1
 8003956:	3b01      	subs	r3, #1
 8003958:	041b      	lsls	r3, r3, #16
 800395a:	431a      	orrs	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003960:	061b      	lsls	r3, r3, #24
 8003962:	4313      	orrs	r3, r2
 8003964:	4a1b      	ldr	r2, [pc, #108]	@ (80039d4 <HAL_RCC_OscConfig+0x4cc>)
 8003966:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800396a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800396c:	4b19      	ldr	r3, [pc, #100]	@ (80039d4 <HAL_RCC_OscConfig+0x4cc>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a18      	ldr	r2, [pc, #96]	@ (80039d4 <HAL_RCC_OscConfig+0x4cc>)
 8003972:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003976:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003978:	f7fe f966 	bl	8001c48 <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003980:	f7fe f962 	bl	8001c48 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e057      	b.n	8003a42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003992:	4b10      	ldr	r3, [pc, #64]	@ (80039d4 <HAL_RCC_OscConfig+0x4cc>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0f0      	beq.n	8003980 <HAL_RCC_OscConfig+0x478>
 800399e:	e04f      	b.n	8003a40 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a0:	4b0c      	ldr	r3, [pc, #48]	@ (80039d4 <HAL_RCC_OscConfig+0x4cc>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a0b      	ldr	r2, [pc, #44]	@ (80039d4 <HAL_RCC_OscConfig+0x4cc>)
 80039a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ac:	f7fe f94c 	bl	8001c48 <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b4:	f7fe f948 	bl	8001c48 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e03d      	b.n	8003a42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039c6:	4b03      	ldr	r3, [pc, #12]	@ (80039d4 <HAL_RCC_OscConfig+0x4cc>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1f0      	bne.n	80039b4 <HAL_RCC_OscConfig+0x4ac>
 80039d2:	e035      	b.n	8003a40 <HAL_RCC_OscConfig+0x538>
 80039d4:	40023800 	.word	0x40023800
 80039d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80039dc:	4b1b      	ldr	r3, [pc, #108]	@ (8003a4c <HAL_RCC_OscConfig+0x544>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d028      	beq.n	8003a3c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d121      	bne.n	8003a3c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d11a      	bne.n	8003a3c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a12:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d111      	bne.n	8003a3c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a22:	085b      	lsrs	r3, r3, #1
 8003a24:	3b01      	subs	r3, #1
 8003a26:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d107      	bne.n	8003a3c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a36:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d001      	beq.n	8003a40 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e000      	b.n	8003a42 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3718      	adds	r7, #24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	40023800 	.word	0x40023800

08003a50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e0d0      	b.n	8003c0a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a68:	4b6a      	ldr	r3, [pc, #424]	@ (8003c14 <HAL_RCC_ClockConfig+0x1c4>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 030f 	and.w	r3, r3, #15
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d910      	bls.n	8003a98 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a76:	4b67      	ldr	r3, [pc, #412]	@ (8003c14 <HAL_RCC_ClockConfig+0x1c4>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f023 020f 	bic.w	r2, r3, #15
 8003a7e:	4965      	ldr	r1, [pc, #404]	@ (8003c14 <HAL_RCC_ClockConfig+0x1c4>)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a86:	4b63      	ldr	r3, [pc, #396]	@ (8003c14 <HAL_RCC_ClockConfig+0x1c4>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 030f 	and.w	r3, r3, #15
 8003a8e:	683a      	ldr	r2, [r7, #0]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d001      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e0b8      	b.n	8003c0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d020      	beq.n	8003ae6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0304 	and.w	r3, r3, #4
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d005      	beq.n	8003abc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ab0:	4b59      	ldr	r3, [pc, #356]	@ (8003c18 <HAL_RCC_ClockConfig+0x1c8>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	4a58      	ldr	r2, [pc, #352]	@ (8003c18 <HAL_RCC_ClockConfig+0x1c8>)
 8003ab6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003aba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0308 	and.w	r3, r3, #8
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d005      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ac8:	4b53      	ldr	r3, [pc, #332]	@ (8003c18 <HAL_RCC_ClockConfig+0x1c8>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	4a52      	ldr	r2, [pc, #328]	@ (8003c18 <HAL_RCC_ClockConfig+0x1c8>)
 8003ace:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003ad2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ad4:	4b50      	ldr	r3, [pc, #320]	@ (8003c18 <HAL_RCC_ClockConfig+0x1c8>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	494d      	ldr	r1, [pc, #308]	@ (8003c18 <HAL_RCC_ClockConfig+0x1c8>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d040      	beq.n	8003b74 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d107      	bne.n	8003b0a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003afa:	4b47      	ldr	r3, [pc, #284]	@ (8003c18 <HAL_RCC_ClockConfig+0x1c8>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d115      	bne.n	8003b32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e07f      	b.n	8003c0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d107      	bne.n	8003b22 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b12:	4b41      	ldr	r3, [pc, #260]	@ (8003c18 <HAL_RCC_ClockConfig+0x1c8>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d109      	bne.n	8003b32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e073      	b.n	8003c0a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b22:	4b3d      	ldr	r3, [pc, #244]	@ (8003c18 <HAL_RCC_ClockConfig+0x1c8>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e06b      	b.n	8003c0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b32:	4b39      	ldr	r3, [pc, #228]	@ (8003c18 <HAL_RCC_ClockConfig+0x1c8>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f023 0203 	bic.w	r2, r3, #3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	4936      	ldr	r1, [pc, #216]	@ (8003c18 <HAL_RCC_ClockConfig+0x1c8>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b44:	f7fe f880 	bl	8001c48 <HAL_GetTick>
 8003b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b4a:	e00a      	b.n	8003b62 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b4c:	f7fe f87c 	bl	8001c48 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e053      	b.n	8003c0a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b62:	4b2d      	ldr	r3, [pc, #180]	@ (8003c18 <HAL_RCC_ClockConfig+0x1c8>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 020c 	and.w	r2, r3, #12
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d1eb      	bne.n	8003b4c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b74:	4b27      	ldr	r3, [pc, #156]	@ (8003c14 <HAL_RCC_ClockConfig+0x1c4>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 030f 	and.w	r3, r3, #15
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d210      	bcs.n	8003ba4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b82:	4b24      	ldr	r3, [pc, #144]	@ (8003c14 <HAL_RCC_ClockConfig+0x1c4>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f023 020f 	bic.w	r2, r3, #15
 8003b8a:	4922      	ldr	r1, [pc, #136]	@ (8003c14 <HAL_RCC_ClockConfig+0x1c4>)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b92:	4b20      	ldr	r3, [pc, #128]	@ (8003c14 <HAL_RCC_ClockConfig+0x1c4>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 030f 	and.w	r3, r3, #15
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d001      	beq.n	8003ba4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e032      	b.n	8003c0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d008      	beq.n	8003bc2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bb0:	4b19      	ldr	r3, [pc, #100]	@ (8003c18 <HAL_RCC_ClockConfig+0x1c8>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	4916      	ldr	r1, [pc, #88]	@ (8003c18 <HAL_RCC_ClockConfig+0x1c8>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d009      	beq.n	8003be2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bce:	4b12      	ldr	r3, [pc, #72]	@ (8003c18 <HAL_RCC_ClockConfig+0x1c8>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	490e      	ldr	r1, [pc, #56]	@ (8003c18 <HAL_RCC_ClockConfig+0x1c8>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003be2:	f000 f821 	bl	8003c28 <HAL_RCC_GetSysClockFreq>
 8003be6:	4602      	mov	r2, r0
 8003be8:	4b0b      	ldr	r3, [pc, #44]	@ (8003c18 <HAL_RCC_ClockConfig+0x1c8>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	091b      	lsrs	r3, r3, #4
 8003bee:	f003 030f 	and.w	r3, r3, #15
 8003bf2:	490a      	ldr	r1, [pc, #40]	@ (8003c1c <HAL_RCC_ClockConfig+0x1cc>)
 8003bf4:	5ccb      	ldrb	r3, [r1, r3]
 8003bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bfa:	4a09      	ldr	r2, [pc, #36]	@ (8003c20 <HAL_RCC_ClockConfig+0x1d0>)
 8003bfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003bfe:	4b09      	ldr	r3, [pc, #36]	@ (8003c24 <HAL_RCC_ClockConfig+0x1d4>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fd ffdc 	bl	8001bc0 <HAL_InitTick>

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	40023c00 	.word	0x40023c00
 8003c18:	40023800 	.word	0x40023800
 8003c1c:	08006b78 	.word	0x08006b78
 8003c20:	20000000 	.word	0x20000000
 8003c24:	20000008 	.word	0x20000008

08003c28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c2c:	b090      	sub	sp, #64	@ 0x40
 8003c2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003c30:	2300      	movs	r3, #0
 8003c32:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c34:	2300      	movs	r3, #0
 8003c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c38:	2300      	movs	r3, #0
 8003c3a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c40:	4b59      	ldr	r3, [pc, #356]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f003 030c 	and.w	r3, r3, #12
 8003c48:	2b08      	cmp	r3, #8
 8003c4a:	d00d      	beq.n	8003c68 <HAL_RCC_GetSysClockFreq+0x40>
 8003c4c:	2b08      	cmp	r3, #8
 8003c4e:	f200 80a1 	bhi.w	8003d94 <HAL_RCC_GetSysClockFreq+0x16c>
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d002      	beq.n	8003c5c <HAL_RCC_GetSysClockFreq+0x34>
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	d003      	beq.n	8003c62 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c5a:	e09b      	b.n	8003d94 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c5c:	4b53      	ldr	r3, [pc, #332]	@ (8003dac <HAL_RCC_GetSysClockFreq+0x184>)
 8003c5e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c60:	e09b      	b.n	8003d9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c62:	4b53      	ldr	r3, [pc, #332]	@ (8003db0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c64:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c66:	e098      	b.n	8003d9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c68:	4b4f      	ldr	r3, [pc, #316]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c70:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003c72:	4b4d      	ldr	r3, [pc, #308]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d028      	beq.n	8003cd0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c7e:	4b4a      	ldr	r3, [pc, #296]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	099b      	lsrs	r3, r3, #6
 8003c84:	2200      	movs	r2, #0
 8003c86:	623b      	str	r3, [r7, #32]
 8003c88:	627a      	str	r2, [r7, #36]	@ 0x24
 8003c8a:	6a3b      	ldr	r3, [r7, #32]
 8003c8c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c90:	2100      	movs	r1, #0
 8003c92:	4b47      	ldr	r3, [pc, #284]	@ (8003db0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c94:	fb03 f201 	mul.w	r2, r3, r1
 8003c98:	2300      	movs	r3, #0
 8003c9a:	fb00 f303 	mul.w	r3, r0, r3
 8003c9e:	4413      	add	r3, r2
 8003ca0:	4a43      	ldr	r2, [pc, #268]	@ (8003db0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ca2:	fba0 1202 	umull	r1, r2, r0, r2
 8003ca6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ca8:	460a      	mov	r2, r1
 8003caa:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003cac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cae:	4413      	add	r3, r2
 8003cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	61bb      	str	r3, [r7, #24]
 8003cb8:	61fa      	str	r2, [r7, #28]
 8003cba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cbe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003cc2:	f7fc faa1 	bl	8000208 <__aeabi_uldivmod>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	460b      	mov	r3, r1
 8003cca:	4613      	mov	r3, r2
 8003ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cce:	e053      	b.n	8003d78 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cd0:	4b35      	ldr	r3, [pc, #212]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	099b      	lsrs	r3, r3, #6
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	613b      	str	r3, [r7, #16]
 8003cda:	617a      	str	r2, [r7, #20]
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003ce2:	f04f 0b00 	mov.w	fp, #0
 8003ce6:	4652      	mov	r2, sl
 8003ce8:	465b      	mov	r3, fp
 8003cea:	f04f 0000 	mov.w	r0, #0
 8003cee:	f04f 0100 	mov.w	r1, #0
 8003cf2:	0159      	lsls	r1, r3, #5
 8003cf4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cf8:	0150      	lsls	r0, r2, #5
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	ebb2 080a 	subs.w	r8, r2, sl
 8003d02:	eb63 090b 	sbc.w	r9, r3, fp
 8003d06:	f04f 0200 	mov.w	r2, #0
 8003d0a:	f04f 0300 	mov.w	r3, #0
 8003d0e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003d12:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003d16:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003d1a:	ebb2 0408 	subs.w	r4, r2, r8
 8003d1e:	eb63 0509 	sbc.w	r5, r3, r9
 8003d22:	f04f 0200 	mov.w	r2, #0
 8003d26:	f04f 0300 	mov.w	r3, #0
 8003d2a:	00eb      	lsls	r3, r5, #3
 8003d2c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d30:	00e2      	lsls	r2, r4, #3
 8003d32:	4614      	mov	r4, r2
 8003d34:	461d      	mov	r5, r3
 8003d36:	eb14 030a 	adds.w	r3, r4, sl
 8003d3a:	603b      	str	r3, [r7, #0]
 8003d3c:	eb45 030b 	adc.w	r3, r5, fp
 8003d40:	607b      	str	r3, [r7, #4]
 8003d42:	f04f 0200 	mov.w	r2, #0
 8003d46:	f04f 0300 	mov.w	r3, #0
 8003d4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d4e:	4629      	mov	r1, r5
 8003d50:	028b      	lsls	r3, r1, #10
 8003d52:	4621      	mov	r1, r4
 8003d54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d58:	4621      	mov	r1, r4
 8003d5a:	028a      	lsls	r2, r1, #10
 8003d5c:	4610      	mov	r0, r2
 8003d5e:	4619      	mov	r1, r3
 8003d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d62:	2200      	movs	r2, #0
 8003d64:	60bb      	str	r3, [r7, #8]
 8003d66:	60fa      	str	r2, [r7, #12]
 8003d68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d6c:	f7fc fa4c 	bl	8000208 <__aeabi_uldivmod>
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	4613      	mov	r3, r2
 8003d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003d78:	4b0b      	ldr	r3, [pc, #44]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	0c1b      	lsrs	r3, r3, #16
 8003d7e:	f003 0303 	and.w	r3, r3, #3
 8003d82:	3301      	adds	r3, #1
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003d88:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d90:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d92:	e002      	b.n	8003d9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d94:	4b05      	ldr	r3, [pc, #20]	@ (8003dac <HAL_RCC_GetSysClockFreq+0x184>)
 8003d96:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3740      	adds	r7, #64	@ 0x40
 8003da0:	46bd      	mov	sp, r7
 8003da2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003da6:	bf00      	nop
 8003da8:	40023800 	.word	0x40023800
 8003dac:	00f42400 	.word	0x00f42400
 8003db0:	017d7840 	.word	0x017d7840

08003db4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b088      	sub	sp, #32
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d012      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ddc:	4b69      	ldr	r3, [pc, #420]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	4a68      	ldr	r2, [pc, #416]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003de2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003de6:	6093      	str	r3, [r2, #8]
 8003de8:	4b66      	ldr	r3, [pc, #408]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dea:	689a      	ldr	r2, [r3, #8]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003df0:	4964      	ldr	r1, [pc, #400]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d017      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e0e:	4b5d      	ldr	r3, [pc, #372]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e14:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e1c:	4959      	ldr	r1, [pc, #356]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e28:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e2c:	d101      	bne.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d017      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e4a:	4b4e      	ldr	r3, [pc, #312]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e50:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e58:	494a      	ldr	r1, [pc, #296]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e68:	d101      	bne.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003e76:	2301      	movs	r3, #1
 8003e78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003e86:	2301      	movs	r3, #1
 8003e88:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0320 	and.w	r3, r3, #32
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 808b 	beq.w	8003fae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e98:	4b3a      	ldr	r3, [pc, #232]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9c:	4a39      	ldr	r2, [pc, #228]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ea2:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ea4:	4b37      	ldr	r3, [pc, #220]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eac:	60bb      	str	r3, [r7, #8]
 8003eae:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003eb0:	4b35      	ldr	r3, [pc, #212]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a34      	ldr	r2, [pc, #208]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003eb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003eba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ebc:	f7fd fec4 	bl	8001c48 <HAL_GetTick>
 8003ec0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ec4:	f7fd fec0 	bl	8001c48 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b64      	cmp	r3, #100	@ 0x64
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e357      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003ed6:	4b2c      	ldr	r3, [pc, #176]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d0f0      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ee2:	4b28      	ldr	r3, [pc, #160]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ee6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003eea:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d035      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d02e      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f00:	4b20      	ldr	r3, [pc, #128]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f08:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f0a:	4b1e      	ldr	r3, [pc, #120]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f0e:	4a1d      	ldr	r2, [pc, #116]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f14:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f16:	4b1b      	ldr	r3, [pc, #108]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f1a:	4a1a      	ldr	r2, [pc, #104]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f20:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003f22:	4a18      	ldr	r2, [pc, #96]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f28:	4b16      	ldr	r3, [pc, #88]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d114      	bne.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f34:	f7fd fe88 	bl	8001c48 <HAL_GetTick>
 8003f38:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f3a:	e00a      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f3c:	f7fd fe84 	bl	8001c48 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e319      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f52:	4b0c      	ldr	r3, [pc, #48]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d0ee      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f6a:	d111      	bne.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003f6c:	4b05      	ldr	r3, [pc, #20]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003f78:	4b04      	ldr	r3, [pc, #16]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003f7a:	400b      	ands	r3, r1
 8003f7c:	4901      	ldr	r1, [pc, #4]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	608b      	str	r3, [r1, #8]
 8003f82:	e00b      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003f84:	40023800 	.word	0x40023800
 8003f88:	40007000 	.word	0x40007000
 8003f8c:	0ffffcff 	.word	0x0ffffcff
 8003f90:	4baa      	ldr	r3, [pc, #680]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	4aa9      	ldr	r2, [pc, #676]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f96:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003f9a:	6093      	str	r3, [r2, #8]
 8003f9c:	4ba7      	ldr	r3, [pc, #668]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f9e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fa8:	49a4      	ldr	r1, [pc, #656]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0310 	and.w	r3, r3, #16
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d010      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003fba:	4ba0      	ldr	r3, [pc, #640]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fc0:	4a9e      	ldr	r2, [pc, #632]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fc2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fc6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003fca:	4b9c      	ldr	r3, [pc, #624]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fcc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fd4:	4999      	ldr	r1, [pc, #612]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00a      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fe8:	4b94      	ldr	r3, [pc, #592]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fee:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ff6:	4991      	ldr	r1, [pc, #580]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00a      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800400a:	4b8c      	ldr	r3, [pc, #560]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800400c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004010:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004018:	4988      	ldr	r1, [pc, #544]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800401a:	4313      	orrs	r3, r2
 800401c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00a      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800402c:	4b83      	ldr	r3, [pc, #524]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800402e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004032:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800403a:	4980      	ldr	r1, [pc, #512]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800403c:	4313      	orrs	r3, r2
 800403e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00a      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800404e:	4b7b      	ldr	r3, [pc, #492]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004050:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004054:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800405c:	4977      	ldr	r1, [pc, #476]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800405e:	4313      	orrs	r3, r2
 8004060:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00a      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004070:	4b72      	ldr	r3, [pc, #456]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004076:	f023 0203 	bic.w	r2, r3, #3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800407e:	496f      	ldr	r1, [pc, #444]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004080:	4313      	orrs	r3, r2
 8004082:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00a      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004092:	4b6a      	ldr	r3, [pc, #424]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004098:	f023 020c 	bic.w	r2, r3, #12
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040a0:	4966      	ldr	r1, [pc, #408]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00a      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040b4:	4b61      	ldr	r3, [pc, #388]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ba:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040c2:	495e      	ldr	r1, [pc, #376]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00a      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040d6:	4b59      	ldr	r3, [pc, #356]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040dc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040e4:	4955      	ldr	r1, [pc, #340]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00a      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040f8:	4b50      	ldr	r3, [pc, #320]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040fe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004106:	494d      	ldr	r1, [pc, #308]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004108:	4313      	orrs	r3, r2
 800410a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00a      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800411a:	4b48      	ldr	r3, [pc, #288]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800411c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004120:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004128:	4944      	ldr	r1, [pc, #272]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800412a:	4313      	orrs	r3, r2
 800412c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00a      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800413c:	4b3f      	ldr	r3, [pc, #252]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800413e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004142:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800414a:	493c      	ldr	r1, [pc, #240]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800414c:	4313      	orrs	r3, r2
 800414e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00a      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800415e:	4b37      	ldr	r3, [pc, #220]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004160:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004164:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800416c:	4933      	ldr	r1, [pc, #204]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800416e:	4313      	orrs	r3, r2
 8004170:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00a      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004180:	4b2e      	ldr	r3, [pc, #184]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004186:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800418e:	492b      	ldr	r1, [pc, #172]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004190:	4313      	orrs	r3, r2
 8004192:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d011      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80041a2:	4b26      	ldr	r3, [pc, #152]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041a8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041b0:	4922      	ldr	r1, [pc, #136]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041c0:	d101      	bne.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80041c2:	2301      	movs	r3, #1
 80041c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0308 	and.w	r3, r3, #8
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80041d2:	2301      	movs	r3, #1
 80041d4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00a      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041e2:	4b16      	ldr	r3, [pc, #88]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041e8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041f0:	4912      	ldr	r1, [pc, #72]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00b      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004204:	4b0d      	ldr	r3, [pc, #52]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800420a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004214:	4909      	ldr	r1, [pc, #36]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004216:	4313      	orrs	r3, r2
 8004218:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d006      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	f000 80d9 	beq.w	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004230:	4b02      	ldr	r3, [pc, #8]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a01      	ldr	r2, [pc, #4]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004236:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800423a:	e001      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800423c:	40023800 	.word	0x40023800
 8004240:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004242:	f7fd fd01 	bl	8001c48 <HAL_GetTick>
 8004246:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004248:	e008      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800424a:	f7fd fcfd 	bl	8001c48 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b64      	cmp	r3, #100	@ 0x64
 8004256:	d901      	bls.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e194      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800425c:	4b6c      	ldr	r3, [pc, #432]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1f0      	bne.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	2b00      	cmp	r3, #0
 8004272:	d021      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004278:	2b00      	cmp	r3, #0
 800427a:	d11d      	bne.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800427c:	4b64      	ldr	r3, [pc, #400]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800427e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004282:	0c1b      	lsrs	r3, r3, #16
 8004284:	f003 0303 	and.w	r3, r3, #3
 8004288:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800428a:	4b61      	ldr	r3, [pc, #388]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800428c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004290:	0e1b      	lsrs	r3, r3, #24
 8004292:	f003 030f 	and.w	r3, r3, #15
 8004296:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	019a      	lsls	r2, r3, #6
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	041b      	lsls	r3, r3, #16
 80042a2:	431a      	orrs	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	061b      	lsls	r3, r3, #24
 80042a8:	431a      	orrs	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	071b      	lsls	r3, r3, #28
 80042b0:	4957      	ldr	r1, [pc, #348]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d004      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042cc:	d00a      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d02e      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042e2:	d129      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80042e4:	4b4a      	ldr	r3, [pc, #296]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042ea:	0c1b      	lsrs	r3, r3, #16
 80042ec:	f003 0303 	and.w	r3, r3, #3
 80042f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042f2:	4b47      	ldr	r3, [pc, #284]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042f8:	0f1b      	lsrs	r3, r3, #28
 80042fa:	f003 0307 	and.w	r3, r3, #7
 80042fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	019a      	lsls	r2, r3, #6
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	041b      	lsls	r3, r3, #16
 800430a:	431a      	orrs	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	061b      	lsls	r3, r3, #24
 8004312:	431a      	orrs	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	071b      	lsls	r3, r3, #28
 8004318:	493d      	ldr	r1, [pc, #244]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800431a:	4313      	orrs	r3, r2
 800431c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004320:	4b3b      	ldr	r3, [pc, #236]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004322:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004326:	f023 021f 	bic.w	r2, r3, #31
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432e:	3b01      	subs	r3, #1
 8004330:	4937      	ldr	r1, [pc, #220]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004332:	4313      	orrs	r3, r2
 8004334:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d01d      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004344:	4b32      	ldr	r3, [pc, #200]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004346:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800434a:	0e1b      	lsrs	r3, r3, #24
 800434c:	f003 030f 	and.w	r3, r3, #15
 8004350:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004352:	4b2f      	ldr	r3, [pc, #188]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004354:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004358:	0f1b      	lsrs	r3, r3, #28
 800435a:	f003 0307 	and.w	r3, r3, #7
 800435e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	019a      	lsls	r2, r3, #6
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	041b      	lsls	r3, r3, #16
 800436c:	431a      	orrs	r2, r3
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	061b      	lsls	r3, r3, #24
 8004372:	431a      	orrs	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	071b      	lsls	r3, r3, #28
 8004378:	4925      	ldr	r1, [pc, #148]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800437a:	4313      	orrs	r3, r2
 800437c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d011      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	019a      	lsls	r2, r3, #6
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	041b      	lsls	r3, r3, #16
 8004398:	431a      	orrs	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	061b      	lsls	r3, r3, #24
 80043a0:	431a      	orrs	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	071b      	lsls	r3, r3, #28
 80043a8:	4919      	ldr	r1, [pc, #100]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80043b0:	4b17      	ldr	r3, [pc, #92]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a16      	ldr	r2, [pc, #88]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043b6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80043ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043bc:	f7fd fc44 	bl	8001c48 <HAL_GetTick>
 80043c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043c2:	e008      	b.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80043c4:	f7fd fc40 	bl	8001c48 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b64      	cmp	r3, #100	@ 0x64
 80043d0:	d901      	bls.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e0d7      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043d6:	4b0e      	ldr	r3, [pc, #56]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d0f0      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	f040 80cd 	bne.w	8004584 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80043ea:	4b09      	ldr	r3, [pc, #36]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a08      	ldr	r2, [pc, #32]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043f6:	f7fd fc27 	bl	8001c48 <HAL_GetTick>
 80043fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043fc:	e00a      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80043fe:	f7fd fc23 	bl	8001c48 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	2b64      	cmp	r3, #100	@ 0x64
 800440a:	d903      	bls.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e0ba      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004410:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004414:	4b5e      	ldr	r3, [pc, #376]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800441c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004420:	d0ed      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004432:	2b00      	cmp	r3, #0
 8004434:	d009      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800443e:	2b00      	cmp	r3, #0
 8004440:	d02e      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004446:	2b00      	cmp	r3, #0
 8004448:	d12a      	bne.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800444a:	4b51      	ldr	r3, [pc, #324]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800444c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004450:	0c1b      	lsrs	r3, r3, #16
 8004452:	f003 0303 	and.w	r3, r3, #3
 8004456:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004458:	4b4d      	ldr	r3, [pc, #308]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800445a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800445e:	0f1b      	lsrs	r3, r3, #28
 8004460:	f003 0307 	and.w	r3, r3, #7
 8004464:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	019a      	lsls	r2, r3, #6
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	041b      	lsls	r3, r3, #16
 8004470:	431a      	orrs	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	061b      	lsls	r3, r3, #24
 8004478:	431a      	orrs	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	071b      	lsls	r3, r3, #28
 800447e:	4944      	ldr	r1, [pc, #272]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004480:	4313      	orrs	r3, r2
 8004482:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004486:	4b42      	ldr	r3, [pc, #264]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004488:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800448c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004494:	3b01      	subs	r3, #1
 8004496:	021b      	lsls	r3, r3, #8
 8004498:	493d      	ldr	r1, [pc, #244]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800449a:	4313      	orrs	r3, r2
 800449c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d022      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044b4:	d11d      	bne.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80044b6:	4b36      	ldr	r3, [pc, #216]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044bc:	0e1b      	lsrs	r3, r3, #24
 80044be:	f003 030f 	and.w	r3, r3, #15
 80044c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80044c4:	4b32      	ldr	r3, [pc, #200]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ca:	0f1b      	lsrs	r3, r3, #28
 80044cc:	f003 0307 	and.w	r3, r3, #7
 80044d0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	019a      	lsls	r2, r3, #6
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a1b      	ldr	r3, [r3, #32]
 80044dc:	041b      	lsls	r3, r3, #16
 80044de:	431a      	orrs	r2, r3
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	061b      	lsls	r3, r3, #24
 80044e4:	431a      	orrs	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	071b      	lsls	r3, r3, #28
 80044ea:	4929      	ldr	r1, [pc, #164]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0308 	and.w	r3, r3, #8
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d028      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80044fe:	4b24      	ldr	r3, [pc, #144]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004500:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004504:	0e1b      	lsrs	r3, r3, #24
 8004506:	f003 030f 	and.w	r3, r3, #15
 800450a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800450c:	4b20      	ldr	r3, [pc, #128]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800450e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004512:	0c1b      	lsrs	r3, r3, #16
 8004514:	f003 0303 	and.w	r3, r3, #3
 8004518:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	019a      	lsls	r2, r3, #6
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	041b      	lsls	r3, r3, #16
 8004524:	431a      	orrs	r2, r3
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	061b      	lsls	r3, r3, #24
 800452a:	431a      	orrs	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	69db      	ldr	r3, [r3, #28]
 8004530:	071b      	lsls	r3, r3, #28
 8004532:	4917      	ldr	r1, [pc, #92]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004534:	4313      	orrs	r3, r2
 8004536:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800453a:	4b15      	ldr	r3, [pc, #84]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800453c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004540:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004548:	4911      	ldr	r1, [pc, #68]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800454a:	4313      	orrs	r3, r2
 800454c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004550:	4b0f      	ldr	r3, [pc, #60]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a0e      	ldr	r2, [pc, #56]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004556:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800455a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800455c:	f7fd fb74 	bl	8001c48 <HAL_GetTick>
 8004560:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004562:	e008      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004564:	f7fd fb70 	bl	8001c48 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b64      	cmp	r3, #100	@ 0x64
 8004570:	d901      	bls.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e007      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004576:	4b06      	ldr	r3, [pc, #24]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800457e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004582:	d1ef      	bne.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3720      	adds	r7, #32
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	40023800 	.word	0x40023800

08004594 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e022      	b.n	80045ec <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d105      	bne.n	80045be <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f7fc feef 	bl	800139c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2203      	movs	r2, #3
 80045c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 f814 	bl	80045f4 <HAL_SD_InitCard>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e00a      	b.n	80045ec <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80045f4:	b5b0      	push	{r4, r5, r7, lr}
 80045f6:	b08e      	sub	sp, #56	@ 0x38
 80045f8:	af04      	add	r7, sp, #16
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80045fc:	2300      	movs	r3, #0
 80045fe:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8004600:	2300      	movs	r3, #0
 8004602:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004604:	2300      	movs	r3, #0
 8004606:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8004608:	2300      	movs	r3, #0
 800460a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800460c:	2300      	movs	r3, #0
 800460e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8004610:	2376      	movs	r3, #118	@ 0x76
 8004612:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681d      	ldr	r5, [r3, #0]
 8004618:	466c      	mov	r4, sp
 800461a:	f107 0314 	add.w	r3, r7, #20
 800461e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004622:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004626:	f107 0308 	add.w	r3, r7, #8
 800462a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800462c:	4628      	mov	r0, r5
 800462e:	f001 fa91 	bl	8005b54 <SDMMC_Init>
 8004632:	4603      	mov	r3, r0
 8004634:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8004638:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e059      	b.n	80046f8 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	685a      	ldr	r2, [r3, #4]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004652:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4618      	mov	r0, r3
 800465a:	f001 fac5 	bl	8005be8 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800466c:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800466e:	2002      	movs	r0, #2
 8004670:	f7fd faf6 	bl	8001c60 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 ff59 	bl	800552c <SD_PowerON>
 800467a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00b      	beq.n	800469a <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800468e:	6a3b      	ldr	r3, [r7, #32]
 8004690:	431a      	orrs	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e02e      	b.n	80046f8 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 fe78 	bl	8005390 <SD_InitCard>
 80046a0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00b      	beq.n	80046c0 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046b4:	6a3b      	ldr	r3, [r7, #32]
 80046b6:	431a      	orrs	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e01b      	b.n	80046f8 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80046c8:	4618      	mov	r0, r3
 80046ca:	f001 fb1f 	bl	8005d0c <SDMMC_CmdBlockLength>
 80046ce:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80046d0:	6a3b      	ldr	r3, [r7, #32]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00f      	beq.n	80046f6 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a09      	ldr	r2, [pc, #36]	@ (8004700 <HAL_SD_InitCard+0x10c>)
 80046dc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046e2:	6a3b      	ldr	r3, [r7, #32]
 80046e4:	431a      	orrs	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e000      	b.n	80046f8 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3728      	adds	r7, #40	@ 0x28
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bdb0      	pop	{r4, r5, r7, pc}
 8004700:	004005ff 	.word	0x004005ff

08004704 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b08c      	sub	sp, #48	@ 0x30
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
 8004710:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d107      	bne.n	800472c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004720:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e0c3      	b.n	80048b4 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b01      	cmp	r3, #1
 8004736:	f040 80bc 	bne.w	80048b2 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004740:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	441a      	add	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800474a:	429a      	cmp	r2, r3
 800474c:	d907      	bls.n	800475e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004752:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e0aa      	b.n	80048b4 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2203      	movs	r2, #3
 8004762:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2200      	movs	r2, #0
 800476c:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800477c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004782:	4a4e      	ldr	r2, [pc, #312]	@ (80048bc <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8004784:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800478a:	4a4d      	ldr	r2, [pc, #308]	@ (80048c0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800478c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004792:	2200      	movs	r2, #0
 8004794:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800479a:	2200      	movs	r2, #0
 800479c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ae:	689a      	ldr	r2, [r3, #8]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	3380      	adds	r3, #128	@ 0x80
 80047c4:	4619      	mov	r1, r3
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	025b      	lsls	r3, r3, #9
 80047cc:	089b      	lsrs	r3, r3, #2
 80047ce:	f7fd fd01 	bl	80021d4 <HAL_DMA_Start_IT>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d017      	beq.n	8004808 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 80047e6:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a35      	ldr	r2, [pc, #212]	@ (80048c4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80047ee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047f4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e055      	b.n	80048b4 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f042 0208 	orr.w	r2, r2, #8
 8004816:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800481c:	2b01      	cmp	r3, #1
 800481e:	d002      	beq.n	8004826 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8004820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004822:	025b      	lsls	r3, r3, #9
 8004824:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004826:	f04f 33ff 	mov.w	r3, #4294967295
 800482a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	025b      	lsls	r3, r3, #9
 8004830:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004832:	2390      	movs	r3, #144	@ 0x90
 8004834:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004836:	2302      	movs	r3, #2
 8004838:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800483a:	2300      	movs	r3, #0
 800483c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800483e:	2301      	movs	r3, #1
 8004840:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f107 0210 	add.w	r2, r7, #16
 800484a:	4611      	mov	r1, r2
 800484c:	4618      	mov	r0, r3
 800484e:	f001 fa31 	bl	8005cb4 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d90a      	bls.n	800486e <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2282      	movs	r2, #130	@ 0x82
 800485c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004864:	4618      	mov	r0, r3
 8004866:	f001 fa95 	bl	8005d94 <SDMMC_CmdReadMultiBlock>
 800486a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800486c:	e009      	b.n	8004882 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2281      	movs	r2, #129	@ 0x81
 8004872:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800487a:	4618      	mov	r0, r3
 800487c:	f001 fa68 	bl	8005d50 <SDMMC_CmdReadSingleBlock>
 8004880:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8004882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004884:	2b00      	cmp	r3, #0
 8004886:	d012      	beq.n	80048ae <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a0d      	ldr	r2, [pc, #52]	@ (80048c4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800488e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004896:	431a      	orrs	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e002      	b.n	80048b4 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 80048ae:	2300      	movs	r3, #0
 80048b0:	e000      	b.n	80048b4 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 80048b2:	2302      	movs	r3, #2
  }
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3730      	adds	r7, #48	@ 0x30
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	0800519f 	.word	0x0800519f
 80048c0:	08005211 	.word	0x08005211
 80048c4:	004005ff 	.word	0x004005ff

080048c8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b08c      	sub	sp, #48	@ 0x30
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
 80048d4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d107      	bne.n	80048f0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e0c6      	b.n	8004a7e <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	f040 80bf 	bne.w	8004a7c <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004904:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	441a      	add	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800490e:	429a      	cmp	r2, r3
 8004910:	d907      	bls.n	8004922 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004916:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e0ad      	b.n	8004a7e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2203      	movs	r2, #3
 8004926:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2200      	movs	r2, #0
 8004930:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f042 021a 	orr.w	r2, r2, #26
 8004940:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004946:	4a50      	ldr	r2, [pc, #320]	@ (8004a88 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8004948:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800494e:	4a4f      	ldr	r2, [pc, #316]	@ (8004a8c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004950:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004956:	2200      	movs	r2, #0
 8004958:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800495e:	2b01      	cmp	r3, #1
 8004960:	d002      	beq.n	8004968 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8004962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004964:	025b      	lsls	r3, r3, #9
 8004966:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d90a      	bls.n	8004984 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	22a0      	movs	r2, #160	@ 0xa0
 8004972:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800497a:	4618      	mov	r0, r3
 800497c:	f001 fa4e 	bl	8005e1c <SDMMC_CmdWriteMultiBlock>
 8004980:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8004982:	e009      	b.n	8004998 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2290      	movs	r2, #144	@ 0x90
 8004988:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004990:	4618      	mov	r0, r3
 8004992:	f001 fa21 	bl	8005dd8 <SDMMC_CmdWriteSingleBlock>
 8004996:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800499a:	2b00      	cmp	r3, #0
 800499c:	d012      	beq.n	80049c4 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a3b      	ldr	r2, [pc, #236]	@ (8004a90 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80049a4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049ac:	431a      	orrs	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e05c      	b.n	8004a7e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f042 0208 	orr.w	r2, r2, #8
 80049d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049d8:	2240      	movs	r2, #64	@ 0x40
 80049da:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ec:	689a      	ldr	r2, [r3, #8]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	430a      	orrs	r2, r1
 80049f6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80049fc:	68b9      	ldr	r1, [r7, #8]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	3380      	adds	r3, #128	@ 0x80
 8004a04:	461a      	mov	r2, r3
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	025b      	lsls	r3, r3, #9
 8004a0a:	089b      	lsrs	r3, r3, #2
 8004a0c:	f7fd fbe2 	bl	80021d4 <HAL_DMA_Start_IT>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d01a      	beq.n	8004a4c <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f022 021a 	bic.w	r2, r2, #26
 8004a24:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a19      	ldr	r2, [pc, #100]	@ (8004a90 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8004a2c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a32:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e018      	b.n	8004a7e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a50:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	025b      	lsls	r3, r3, #9
 8004a56:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004a58:	2390      	movs	r3, #144	@ 0x90
 8004a5a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004a60:	2300      	movs	r3, #0
 8004a62:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8004a64:	2301      	movs	r3, #1
 8004a66:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f107 0210 	add.w	r2, r7, #16
 8004a70:	4611      	mov	r1, r2
 8004a72:	4618      	mov	r0, r3
 8004a74:	f001 f91e 	bl	8005cb4 <SDMMC_ConfigData>

      return HAL_OK;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	e000      	b.n	8004a7e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8004a7c:	2302      	movs	r3, #2
  }
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3730      	adds	r7, #48	@ 0x30
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	08005175 	.word	0x08005175
 8004a8c:	08005211 	.word	0x08005211
 8004a90:	004005ff 	.word	0x004005ff

08004a94 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aa8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d008      	beq.n	8004ac2 <HAL_SD_IRQHandler+0x2e>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f003 0308 	and.w	r3, r3, #8
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 fdec 	bl	8005698 <SD_Read_IT>
 8004ac0:	e15a      	b.n	8004d78 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 808d 	beq.w	8004bec <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004ada:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	4b9a      	ldr	r3, [pc, #616]	@ (8004d50 <HAL_SD_IRQHandler+0x2bc>)
 8004ae8:	400b      	ands	r3, r1
 8004aea:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 0201 	bic.w	r2, r2, #1
 8004afa:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f003 0308 	and.w	r3, r3, #8
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d039      	beq.n	8004b7a <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f003 0302 	and.w	r3, r3, #2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d104      	bne.n	8004b1a <HAL_SD_IRQHandler+0x86>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f003 0320 	and.w	r3, r3, #32
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d011      	beq.n	8004b3e <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f001 f99e 	bl	8005e60 <SDMMC_CmdStopTransfer>
 8004b24:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d008      	beq.n	8004b3e <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	431a      	orrs	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 f921 	bl	8004d80 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004b46:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d104      	bne.n	8004b6a <HAL_SD_IRQHandler+0xd6>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d003      	beq.n	8004b72 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f001 fdb4 	bl	80066d8 <HAL_SD_RxCpltCallback>
 8004b70:	e102      	b.n	8004d78 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f001 fda6 	bl	80066c4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004b78:	e0fe      	b.n	8004d78 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f000 80f9 	beq.w	8004d78 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f003 0320 	and.w	r3, r3, #32
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d011      	beq.n	8004bb4 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4618      	mov	r0, r3
 8004b96:	f001 f963 	bl	8005e60 <SDMMC_CmdStopTransfer>
 8004b9a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d008      	beq.n	8004bb4 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	431a      	orrs	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f8e6 	bl	8004d80 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f040 80dc 	bne.w	8004d78 <HAL_SD_IRQHandler+0x2e4>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f040 80d6 	bne.w	8004d78 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f022 0208 	bic.w	r2, r2, #8
 8004bda:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f001 fd6d 	bl	80066c4 <HAL_SD_TxCpltCallback>
}
 8004bea:	e0c5      	b.n	8004d78 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d008      	beq.n	8004c0c <HAL_SD_IRQHandler+0x178>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f003 0308 	and.w	r3, r3, #8
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d003      	beq.n	8004c0c <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 fd98 	bl	800573a <SD_Write_IT>
 8004c0a:	e0b5      	b.n	8004d78 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c12:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f000 80ae 	beq.w	8004d78 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d005      	beq.n	8004c36 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c2e:	f043 0202 	orr.w	r2, r3, #2
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c3c:	f003 0308 	and.w	r3, r3, #8
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d005      	beq.n	8004c50 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c48:	f043 0208 	orr.w	r2, r3, #8
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c56:	f003 0320 	and.w	r3, r3, #32
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d005      	beq.n	8004c6a <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c62:	f043 0220 	orr.w	r2, r3, #32
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c70:	f003 0310 	and.w	r3, r3, #16
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d005      	beq.n	8004c84 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c7c:	f043 0210 	orr.w	r2, r3, #16
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004c8c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8004c9c:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f001 f8dc 	bl	8005e60 <SDMMC_CmdStopTransfer>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f003 0308 	and.w	r3, r3, #8
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00a      	beq.n	8004cd4 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 f857 	bl	8004d80 <HAL_SD_ErrorCallback>
}
 8004cd2:	e051      	b.n	8004d78 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d04c      	beq.n	8004d78 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f003 0310 	and.w	r3, r3, #16
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d104      	bne.n	8004cf2 <HAL_SD_IRQHandler+0x25e>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f003 0320 	and.w	r3, r3, #32
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d011      	beq.n	8004d16 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cf6:	4a17      	ldr	r2, [pc, #92]	@ (8004d54 <HAL_SD_IRQHandler+0x2c0>)
 8004cf8:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7fd fac8 	bl	8002294 <HAL_DMA_Abort_IT>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d036      	beq.n	8004d78 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 fad0 	bl	80052b4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004d14:	e030      	b.n	8004d78 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d104      	bne.n	8004d2a <HAL_SD_IRQHandler+0x296>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d018      	beq.n	8004d5c <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2e:	4a0a      	ldr	r2, [pc, #40]	@ (8004d58 <HAL_SD_IRQHandler+0x2c4>)
 8004d30:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7fd faac 	bl	8002294 <HAL_DMA_Abort_IT>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d01a      	beq.n	8004d78 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 faeb 	bl	8005322 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004d4c:	e014      	b.n	8004d78 <HAL_SD_IRQHandler+0x2e4>
 8004d4e:	bf00      	nop
 8004d50:	ffff3ec5 	.word	0xffff3ec5
 8004d54:	080052b5 	.word	0x080052b5
 8004d58:	08005323 	.word	0x08005323
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f001 fc9d 	bl	80066b0 <HAL_SD_AbortCallback>
}
 8004d76:	e7ff      	b.n	8004d78 <HAL_SD_IRQHandler+0x2e4>
 8004d78:	bf00      	nop
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004da2:	0f9b      	lsrs	r3, r3, #30
 8004da4:	b2da      	uxtb	r2, r3
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004dae:	0e9b      	lsrs	r3, r3, #26
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	f003 030f 	and.w	r3, r3, #15
 8004db6:	b2da      	uxtb	r2, r3
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004dc0:	0e1b      	lsrs	r3, r3, #24
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	f003 0303 	and.w	r3, r3, #3
 8004dc8:	b2da      	uxtb	r2, r3
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004dd2:	0c1b      	lsrs	r3, r3, #16
 8004dd4:	b2da      	uxtb	r2, r3
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004dde:	0a1b      	lsrs	r3, r3, #8
 8004de0:	b2da      	uxtb	r2, r3
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004dea:	b2da      	uxtb	r2, r3
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004df4:	0d1b      	lsrs	r3, r3, #20
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e00:	0c1b      	lsrs	r3, r3, #16
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	f003 030f 	and.w	r3, r3, #15
 8004e08:	b2da      	uxtb	r2, r3
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e12:	0bdb      	lsrs	r3, r3, #15
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	b2da      	uxtb	r2, r3
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e24:	0b9b      	lsrs	r3, r3, #14
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	f003 0301 	and.w	r3, r3, #1
 8004e2c:	b2da      	uxtb	r2, r3
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e36:	0b5b      	lsrs	r3, r3, #13
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	b2da      	uxtb	r2, r3
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e48:	0b1b      	lsrs	r3, r3, #12
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	f003 0301 	and.w	r3, r3, #1
 8004e50:	b2da      	uxtb	r2, r3
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d163      	bne.n	8004f2c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e68:	009a      	lsls	r2, r3, #2
 8004e6a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004e6e:	4013      	ands	r3, r2
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8004e74:	0f92      	lsrs	r2, r2, #30
 8004e76:	431a      	orrs	r2, r3
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e80:	0edb      	lsrs	r3, r3, #27
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	f003 0307 	and.w	r3, r3, #7
 8004e88:	b2da      	uxtb	r2, r3
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e92:	0e1b      	lsrs	r3, r3, #24
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	f003 0307 	and.w	r3, r3, #7
 8004e9a:	b2da      	uxtb	r2, r3
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ea4:	0d5b      	lsrs	r3, r3, #21
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	f003 0307 	and.w	r3, r3, #7
 8004eac:	b2da      	uxtb	r2, r3
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004eb6:	0c9b      	lsrs	r3, r3, #18
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	f003 0307 	and.w	r3, r3, #7
 8004ebe:	b2da      	uxtb	r2, r3
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ec8:	0bdb      	lsrs	r3, r3, #15
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	f003 0307 	and.w	r3, r3, #7
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	1c5a      	adds	r2, r3, #1
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	7e1b      	ldrb	r3, [r3, #24]
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	f003 0307 	and.w	r3, r3, #7
 8004eea:	3302      	adds	r3, #2
 8004eec:	2201      	movs	r2, #1
 8004eee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004ef6:	fb03 f202 	mul.w	r2, r3, r2
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	7a1b      	ldrb	r3, [r3, #8]
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	f003 030f 	and.w	r3, r3, #15
 8004f08:	2201      	movs	r2, #1
 8004f0a:	409a      	lsls	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004f18:	0a52      	lsrs	r2, r2, #9
 8004f1a:	fb03 f202 	mul.w	r2, r3, r2
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f28:	661a      	str	r2, [r3, #96]	@ 0x60
 8004f2a:	e031      	b.n	8004f90 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d11d      	bne.n	8004f70 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f38:	041b      	lsls	r3, r3, #16
 8004f3a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f42:	0c1b      	lsrs	r3, r3, #16
 8004f44:	431a      	orrs	r2, r3
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	3301      	adds	r3, #1
 8004f50:	029a      	lsls	r2, r3, #10
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f64:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	661a      	str	r2, [r3, #96]	@ 0x60
 8004f6e:	e00f      	b.n	8004f90 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a58      	ldr	r2, [pc, #352]	@ (80050d8 <HAL_SD_GetCardCSD+0x344>)
 8004f76:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f7c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e09d      	b.n	80050cc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f94:	0b9b      	lsrs	r3, r3, #14
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	b2da      	uxtb	r2, r3
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fa6:	09db      	lsrs	r3, r3, #7
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fae:	b2da      	uxtb	r2, r3
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fbe:	b2da      	uxtb	r2, r3
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fc8:	0fdb      	lsrs	r3, r3, #31
 8004fca:	b2da      	uxtb	r2, r3
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fd4:	0f5b      	lsrs	r3, r3, #29
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	f003 0303 	and.w	r3, r3, #3
 8004fdc:	b2da      	uxtb	r2, r3
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fe6:	0e9b      	lsrs	r3, r3, #26
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	f003 0307 	and.w	r3, r3, #7
 8004fee:	b2da      	uxtb	r2, r3
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ff8:	0d9b      	lsrs	r3, r3, #22
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	f003 030f 	and.w	r3, r3, #15
 8005000:	b2da      	uxtb	r2, r3
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800500a:	0d5b      	lsrs	r3, r3, #21
 800500c:	b2db      	uxtb	r3, r3
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	b2da      	uxtb	r2, r3
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005026:	0c1b      	lsrs	r3, r3, #16
 8005028:	b2db      	uxtb	r3, r3
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	b2da      	uxtb	r2, r3
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800503a:	0bdb      	lsrs	r3, r3, #15
 800503c:	b2db      	uxtb	r3, r3
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	b2da      	uxtb	r2, r3
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800504e:	0b9b      	lsrs	r3, r3, #14
 8005050:	b2db      	uxtb	r3, r3
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	b2da      	uxtb	r2, r3
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005062:	0b5b      	lsrs	r3, r3, #13
 8005064:	b2db      	uxtb	r3, r3
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	b2da      	uxtb	r2, r3
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005076:	0b1b      	lsrs	r3, r3, #12
 8005078:	b2db      	uxtb	r3, r3
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	b2da      	uxtb	r2, r3
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800508a:	0a9b      	lsrs	r3, r3, #10
 800508c:	b2db      	uxtb	r3, r3
 800508e:	f003 0303 	and.w	r3, r3, #3
 8005092:	b2da      	uxtb	r2, r3
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800509e:	0a1b      	lsrs	r3, r3, #8
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	f003 0303 	and.w	r3, r3, #3
 80050a6:	b2da      	uxtb	r2, r3
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050b2:	085b      	lsrs	r3, r3, #1
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050ba:	b2da      	uxtb	r2, r3
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr
 80050d8:	004005ff 	.word	0x004005ff

080050dc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800513c:	2300      	movs	r3, #0
 800513e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005140:	f107 030c 	add.w	r3, r7, #12
 8005144:	4619      	mov	r1, r3
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 fa7e 	bl	8005648 <SD_SendStatus>
 800514c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d005      	beq.n	8005160 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	431a      	orrs	r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	0a5b      	lsrs	r3, r3, #9
 8005164:	f003 030f 	and.w	r3, r3, #15
 8005168:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800516a:	693b      	ldr	r3, [r7, #16]
}
 800516c:	4618      	mov	r0, r3
 800516e:	3718      	adds	r7, #24
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005180:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005190:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8005192:	bf00      	nop
 8005194:	3714      	adds	r7, #20
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800519e:	b580      	push	{r7, lr}
 80051a0:	b084      	sub	sp, #16
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051aa:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051b0:	2b82      	cmp	r3, #130	@ 0x82
 80051b2:	d111      	bne.n	80051d8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4618      	mov	r0, r3
 80051ba:	f000 fe51 	bl	8005e60 <SDMMC_CmdStopTransfer>
 80051be:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d008      	beq.n	80051d8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	431a      	orrs	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f7ff fdd4 	bl	8004d80 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f022 0208 	bic.w	r2, r2, #8
 80051e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f240 523a 	movw	r2, #1338	@ 0x53a
 80051f0:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	f001 fa69 	bl	80066d8 <HAL_SD_RxCpltCallback>
#endif
}
 8005206:	bf00      	nop
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
	...

08005210 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b086      	sub	sp, #24
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800521c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f7fd f9e4 	bl	80025ec <HAL_DMA_GetError>
 8005224:	4603      	mov	r3, r0
 8005226:	2b02      	cmp	r3, #2
 8005228:	d03e      	beq.n	80052a8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800522e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005230:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005236:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005238:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d002      	beq.n	8005246 <SD_DMAError+0x36>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d12d      	bne.n	80052a2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a19      	ldr	r2, [pc, #100]	@ (80052b0 <SD_DMAError+0xa0>)
 800524c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800525c:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005262:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800526a:	6978      	ldr	r0, [r7, #20]
 800526c:	f7ff ff62 	bl	8005134 <HAL_SD_GetCardState>
 8005270:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	2b06      	cmp	r3, #6
 8005276:	d002      	beq.n	800527e <SD_DMAError+0x6e>
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	2b05      	cmp	r3, #5
 800527c:	d10a      	bne.n	8005294 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4618      	mov	r0, r3
 8005284:	f000 fdec 	bl	8005e60 <SDMMC_CmdStopTransfer>
 8005288:	4602      	mov	r2, r0
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800528e:	431a      	orrs	r2, r3
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	2200      	movs	r2, #0
 80052a0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80052a2:	6978      	ldr	r0, [r7, #20]
 80052a4:	f7ff fd6c 	bl	8004d80 <HAL_SD_ErrorCallback>
#endif
  }
}
 80052a8:	bf00      	nop
 80052aa:	3718      	adds	r7, #24
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	004005ff 	.word	0x004005ff

080052b4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052c0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f240 523a 	movw	r2, #1338	@ 0x53a
 80052ca:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f7ff ff31 	bl	8005134 <HAL_SD_GetCardState>
 80052d2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	2b06      	cmp	r3, #6
 80052e6:	d002      	beq.n	80052ee <SD_DMATxAbort+0x3a>
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	2b05      	cmp	r3, #5
 80052ec:	d10a      	bne.n	8005304 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 fdb4 	bl	8005e60 <SDMMC_CmdStopTransfer>
 80052f8:	4602      	mov	r2, r0
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052fe:	431a      	orrs	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005308:	2b00      	cmp	r3, #0
 800530a:	d103      	bne.n	8005314 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f001 f9cf 	bl	80066b0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005312:	e002      	b.n	800531a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f7ff fd33 	bl	8004d80 <HAL_SD_ErrorCallback>
}
 800531a:	bf00      	nop
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b084      	sub	sp, #16
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800532e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005338:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f7ff fefa 	bl	8005134 <HAL_SD_GetCardState>
 8005340:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	2b06      	cmp	r3, #6
 8005354:	d002      	beq.n	800535c <SD_DMARxAbort+0x3a>
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	2b05      	cmp	r3, #5
 800535a:	d10a      	bne.n	8005372 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4618      	mov	r0, r3
 8005362:	f000 fd7d 	bl	8005e60 <SDMMC_CmdStopTransfer>
 8005366:	4602      	mov	r2, r0
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800536c:	431a      	orrs	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005376:	2b00      	cmp	r3, #0
 8005378:	d103      	bne.n	8005382 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f001 f998 	bl	80066b0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005380:	e002      	b.n	8005388 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f7ff fcfc 	bl	8004d80 <HAL_SD_ErrorCallback>
}
 8005388:	bf00      	nop
 800538a:	3710      	adds	r7, #16
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005390:	b5b0      	push	{r4, r5, r7, lr}
 8005392:	b094      	sub	sp, #80	@ 0x50
 8005394:	af04      	add	r7, sp, #16
 8005396:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005398:	2301      	movs	r3, #1
 800539a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4618      	mov	r0, r3
 80053a2:	f000 fc2f 	bl	8005c04 <SDMMC_GetPowerState>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d102      	bne.n	80053b2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80053ac:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80053b0:	e0b8      	b.n	8005524 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053b6:	2b03      	cmp	r3, #3
 80053b8:	d02f      	beq.n	800541a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 fe16 	bl	8005ff0 <SDMMC_CmdSendCID>
 80053c4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80053c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d001      	beq.n	80053d0 <SD_InitCard+0x40>
    {
      return errorstate;
 80053cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053ce:	e0a9      	b.n	8005524 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2100      	movs	r1, #0
 80053d6:	4618      	mov	r0, r3
 80053d8:	f000 fc59 	bl	8005c8e <SDMMC_GetResponse>
 80053dc:	4602      	mov	r2, r0
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2104      	movs	r1, #4
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 fc50 	bl	8005c8e <SDMMC_GetResponse>
 80053ee:	4602      	mov	r2, r0
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2108      	movs	r1, #8
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 fc47 	bl	8005c8e <SDMMC_GetResponse>
 8005400:	4602      	mov	r2, r0
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	210c      	movs	r1, #12
 800540c:	4618      	mov	r0, r3
 800540e:	f000 fc3e 	bl	8005c8e <SDMMC_GetResponse>
 8005412:	4602      	mov	r2, r0
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800541e:	2b03      	cmp	r3, #3
 8005420:	d00d      	beq.n	800543e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f107 020e 	add.w	r2, r7, #14
 800542a:	4611      	mov	r1, r2
 800542c:	4618      	mov	r0, r3
 800542e:	f000 fe1c 	bl	800606a <SDMMC_CmdSetRelAdd>
 8005432:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005434:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <SD_InitCard+0xae>
    {
      return errorstate;
 800543a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800543c:	e072      	b.n	8005524 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005442:	2b03      	cmp	r3, #3
 8005444:	d036      	beq.n	80054b4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005446:	89fb      	ldrh	r3, [r7, #14]
 8005448:	461a      	mov	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005456:	041b      	lsls	r3, r3, #16
 8005458:	4619      	mov	r1, r3
 800545a:	4610      	mov	r0, r2
 800545c:	f000 fde6 	bl	800602c <SDMMC_CmdSendCSD>
 8005460:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005464:	2b00      	cmp	r3, #0
 8005466:	d001      	beq.n	800546c <SD_InitCard+0xdc>
    {
      return errorstate;
 8005468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800546a:	e05b      	b.n	8005524 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2100      	movs	r1, #0
 8005472:	4618      	mov	r0, r3
 8005474:	f000 fc0b 	bl	8005c8e <SDMMC_GetResponse>
 8005478:	4602      	mov	r2, r0
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2104      	movs	r1, #4
 8005484:	4618      	mov	r0, r3
 8005486:	f000 fc02 	bl	8005c8e <SDMMC_GetResponse>
 800548a:	4602      	mov	r2, r0
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2108      	movs	r1, #8
 8005496:	4618      	mov	r0, r3
 8005498:	f000 fbf9 	bl	8005c8e <SDMMC_GetResponse>
 800549c:	4602      	mov	r2, r0
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	210c      	movs	r1, #12
 80054a8:	4618      	mov	r0, r3
 80054aa:	f000 fbf0 	bl	8005c8e <SDMMC_GetResponse>
 80054ae:	4602      	mov	r2, r0
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2104      	movs	r1, #4
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 fbe7 	bl	8005c8e <SDMMC_GetResponse>
 80054c0:	4603      	mov	r3, r0
 80054c2:	0d1a      	lsrs	r2, r3, #20
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80054c8:	f107 0310 	add.w	r3, r7, #16
 80054cc:	4619      	mov	r1, r3
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f7ff fc60 	bl	8004d94 <HAL_SD_GetCardCSD>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d002      	beq.n	80054e0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80054da:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80054de:	e021      	b.n	8005524 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6819      	ldr	r1, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054e8:	041b      	lsls	r3, r3, #16
 80054ea:	2200      	movs	r2, #0
 80054ec:	461c      	mov	r4, r3
 80054ee:	4615      	mov	r5, r2
 80054f0:	4622      	mov	r2, r4
 80054f2:	462b      	mov	r3, r5
 80054f4:	4608      	mov	r0, r1
 80054f6:	f000 fcd5 	bl	8005ea4 <SDMMC_CmdSelDesel>
 80054fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80054fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <SD_InitCard+0x176>
  {
    return errorstate;
 8005502:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005504:	e00e      	b.n	8005524 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681d      	ldr	r5, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	466c      	mov	r4, sp
 800550e:	f103 0210 	add.w	r2, r3, #16
 8005512:	ca07      	ldmia	r2, {r0, r1, r2}
 8005514:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005518:	3304      	adds	r3, #4
 800551a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800551c:	4628      	mov	r0, r5
 800551e:	f000 fb19 	bl	8005b54 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3740      	adds	r7, #64	@ 0x40
 8005528:	46bd      	mov	sp, r7
 800552a:	bdb0      	pop	{r4, r5, r7, pc}

0800552c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b086      	sub	sp, #24
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005534:	2300      	movs	r3, #0
 8005536:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005538:	2300      	movs	r3, #0
 800553a:	617b      	str	r3, [r7, #20]
 800553c:	2300      	movs	r3, #0
 800553e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4618      	mov	r0, r3
 8005546:	f000 fcd0 	bl	8005eea <SDMMC_CmdGoIdleState>
 800554a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d001      	beq.n	8005556 <SD_PowerON+0x2a>
  {
    return errorstate;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	e072      	b.n	800563c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4618      	mov	r0, r3
 800555c:	f000 fce3 	bl	8005f26 <SDMMC_CmdOperCond>
 8005560:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00d      	beq.n	8005584 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4618      	mov	r0, r3
 8005574:	f000 fcb9 	bl	8005eea <SDMMC_CmdGoIdleState>
 8005578:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d004      	beq.n	800558a <SD_PowerON+0x5e>
    {
      return errorstate;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	e05b      	b.n	800563c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800558e:	2b01      	cmp	r3, #1
 8005590:	d137      	bne.n	8005602 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2100      	movs	r1, #0
 8005598:	4618      	mov	r0, r3
 800559a:	f000 fce3 	bl	8005f64 <SDMMC_CmdAppCommand>
 800559e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d02d      	beq.n	8005602 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80055a6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80055aa:	e047      	b.n	800563c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2100      	movs	r1, #0
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 fcd6 	bl	8005f64 <SDMMC_CmdAppCommand>
 80055b8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d001      	beq.n	80055c4 <SD_PowerON+0x98>
    {
      return errorstate;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	e03b      	b.n	800563c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	491e      	ldr	r1, [pc, #120]	@ (8005644 <SD_PowerON+0x118>)
 80055ca:	4618      	mov	r0, r3
 80055cc:	f000 fcec 	bl	8005fa8 <SDMMC_CmdAppOperCommand>
 80055d0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d002      	beq.n	80055de <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80055d8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80055dc:	e02e      	b.n	800563c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2100      	movs	r1, #0
 80055e4:	4618      	mov	r0, r3
 80055e6:	f000 fb52 	bl	8005c8e <SDMMC_GetResponse>
 80055ea:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	0fdb      	lsrs	r3, r3, #31
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d101      	bne.n	80055f8 <SD_PowerON+0xcc>
 80055f4:	2301      	movs	r3, #1
 80055f6:	e000      	b.n	80055fa <SD_PowerON+0xce>
 80055f8:	2300      	movs	r3, #0
 80055fa:	613b      	str	r3, [r7, #16]

    count++;
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	3301      	adds	r3, #1
 8005600:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005608:	4293      	cmp	r3, r2
 800560a:	d802      	bhi.n	8005612 <SD_PowerON+0xe6>
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d0cc      	beq.n	80055ac <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005618:	4293      	cmp	r3, r2
 800561a:	d902      	bls.n	8005622 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800561c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005620:	e00c      	b.n	800563c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d003      	beq.n	8005634 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	645a      	str	r2, [r3, #68]	@ 0x44
 8005632:	e002      	b.n	800563a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3718      	adds	r7, #24
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	c1100000 	.word	0xc1100000

08005648 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d102      	bne.n	800565e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005658:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800565c:	e018      	b.n	8005690 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005666:	041b      	lsls	r3, r3, #16
 8005668:	4619      	mov	r1, r3
 800566a:	4610      	mov	r0, r2
 800566c:	f000 fd1e 	bl	80060ac <SDMMC_CmdSendStatus>
 8005670:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d001      	beq.n	800567c <SD_SendStatus+0x34>
  {
    return errorstate;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	e009      	b.n	8005690 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2100      	movs	r1, #0
 8005682:	4618      	mov	r0, r3
 8005684:	f000 fb03 	bl	8005c8e <SDMMC_GetResponse>
 8005688:	4602      	mov	r2, r0
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3710      	adds	r7, #16
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056aa:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d03f      	beq.n	8005732 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80056b2:	2300      	movs	r3, #0
 80056b4:	617b      	str	r3, [r7, #20]
 80056b6:	e033      	b.n	8005720 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4618      	mov	r0, r3
 80056be:	f000 fa75 	bl	8005bac <SDMMC_ReadFIFO>
 80056c2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	b2da      	uxtb	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	701a      	strb	r2, [r3, #0]
      tmp++;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	3301      	adds	r3, #1
 80056d0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	3b01      	subs	r3, #1
 80056d6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	0a1b      	lsrs	r3, r3, #8
 80056dc:	b2da      	uxtb	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	3301      	adds	r3, #1
 80056e6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	3b01      	subs	r3, #1
 80056ec:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	0c1b      	lsrs	r3, r3, #16
 80056f2:	b2da      	uxtb	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	3301      	adds	r3, #1
 80056fc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	3b01      	subs	r3, #1
 8005702:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	0e1b      	lsrs	r3, r3, #24
 8005708:	b2da      	uxtb	r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	3301      	adds	r3, #1
 8005712:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	3b01      	subs	r3, #1
 8005718:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	3301      	adds	r3, #1
 800571e:	617b      	str	r3, [r7, #20]
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	2b07      	cmp	r3, #7
 8005724:	d9c8      	bls.n	80056b8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8005732:	bf00      	nop
 8005734:	3718      	adds	r7, #24
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800573a:	b580      	push	{r7, lr}
 800573c:	b086      	sub	sp, #24
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800574c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d043      	beq.n	80057dc <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8005754:	2300      	movs	r3, #0
 8005756:	617b      	str	r3, [r7, #20]
 8005758:	e037      	b.n	80057ca <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	3301      	adds	r3, #1
 8005764:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	3b01      	subs	r3, #1
 800576a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	021a      	lsls	r2, r3, #8
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	4313      	orrs	r3, r2
 8005776:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	3301      	adds	r3, #1
 800577c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	3b01      	subs	r3, #1
 8005782:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	041a      	lsls	r2, r3, #16
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	4313      	orrs	r3, r2
 800578e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	3301      	adds	r3, #1
 8005794:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	3b01      	subs	r3, #1
 800579a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	061a      	lsls	r2, r3, #24
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	3301      	adds	r3, #1
 80057ac:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	3b01      	subs	r3, #1
 80057b2:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f107 0208 	add.w	r2, r7, #8
 80057bc:	4611      	mov	r1, r2
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 fa01 	bl	8005bc6 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	3301      	adds	r3, #1
 80057c8:	617b      	str	r3, [r7, #20]
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	2b07      	cmp	r3, #7
 80057ce:	d9c4      	bls.n	800575a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 80057dc:	bf00      	nop
 80057de:	3718      	adds	r7, #24
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d101      	bne.n	80057f8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e025      	b.n	8005844 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	2b00      	cmp	r3, #0
 8005802:	d106      	bne.n	8005812 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f7fb ff6b 	bl	80016e8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2202      	movs	r2, #2
 8005816:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	3304      	adds	r3, #4
 8005822:	4619      	mov	r1, r3
 8005824:	4610      	mov	r0, r2
 8005826:	f000 f893 	bl	8005950 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6818      	ldr	r0, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	461a      	mov	r2, r3
 8005834:	6839      	ldr	r1, [r7, #0]
 8005836:	f000 f8e7 	bl	8005a08 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	3708      	adds	r7, #8
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <HAL_SDRAM_IRQHandler>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
void HAL_SDRAM_IRQHandler(SDRAM_HandleTypeDef *hsdram)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  /* Check SDRAM interrupt Rising edge flag */
  if (__FMC_SDRAM_GET_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_IT))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	2b01      	cmp	r3, #1
 8005860:	d10a      	bne.n	8005878 <HAL_SDRAM_IRQHandler+0x2c>
  {
    /* SDRAM refresh error interrupt callback */
#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 1)
    hsdram->RefreshErrorCallback(hsdram);
#else
    HAL_SDRAM_RefreshErrorCallback(hsdram);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f80c 	bl	8005880 <HAL_SDRAM_RefreshErrorCallback>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

    /* Clear SDRAM refresh error interrupt pending bit */
    __FMC_SDRAM_CLEAR_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_ERROR);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	695a      	ldr	r2, [r3, #20]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f042 0201 	orr.w	r2, r2, #1
 8005876:	615a      	str	r2, [r3, #20]
  }
}
 8005878:	bf00      	nop
 800587a:	3708      	adds	r7, #8
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <HAL_SDRAM_RefreshErrorCallback>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_RefreshErrorCallback(SDRAM_HandleTypeDef *hsdram)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_RefreshErrorCallback could be implemented in the user file
   */
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80058a6:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80058a8:	7dfb      	ldrb	r3, [r7, #23]
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d101      	bne.n	80058b2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80058ae:	2302      	movs	r3, #2
 80058b0:	e021      	b.n	80058f6 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80058b2:	7dfb      	ldrb	r3, [r7, #23]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d002      	beq.n	80058be <HAL_SDRAM_SendCommand+0x2a>
 80058b8:	7dfb      	ldrb	r3, [r7, #23]
 80058ba:	2b05      	cmp	r3, #5
 80058bc:	d118      	bne.n	80058f0 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2202      	movs	r2, #2
 80058c2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	68b9      	ldr	r1, [r7, #8]
 80058ce:	4618      	mov	r0, r3
 80058d0:	f000 f904 	bl	8005adc <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d104      	bne.n	80058e6 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2205      	movs	r2, #5
 80058e0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80058e4:	e006      	b.n	80058f4 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80058ee:	e001      	b.n	80058f4 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e000      	b.n	80058f6 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3718      	adds	r7, #24
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b082      	sub	sp, #8
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
 8005906:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800590e:	b2db      	uxtb	r3, r3
 8005910:	2b02      	cmp	r3, #2
 8005912:	d101      	bne.n	8005918 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005914:	2302      	movs	r3, #2
 8005916:	e016      	b.n	8005946 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800591e:	b2db      	uxtb	r3, r3
 8005920:	2b01      	cmp	r3, #1
 8005922:	d10f      	bne.n	8005944 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2202      	movs	r2, #2
 8005928:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6839      	ldr	r1, [r7, #0]
 8005932:	4618      	mov	r0, r3
 8005934:	f000 f8f6 	bl	8005b24 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005940:	2300      	movs	r3, #0
 8005942:	e000      	b.n	8005946 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
}
 8005946:	4618      	mov	r0, r3
 8005948:	3708      	adds	r7, #8
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
	...

08005950 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d121      	bne.n	80059a6 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	4b27      	ldr	r3, [pc, #156]	@ (8005a04 <FMC_SDRAM_Init+0xb4>)
 8005968:	4013      	ands	r3, r2
 800596a:	683a      	ldr	r2, [r7, #0]
 800596c:	6851      	ldr	r1, [r2, #4]
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	6892      	ldr	r2, [r2, #8]
 8005972:	4311      	orrs	r1, r2
 8005974:	683a      	ldr	r2, [r7, #0]
 8005976:	68d2      	ldr	r2, [r2, #12]
 8005978:	4311      	orrs	r1, r2
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	6912      	ldr	r2, [r2, #16]
 800597e:	4311      	orrs	r1, r2
 8005980:	683a      	ldr	r2, [r7, #0]
 8005982:	6952      	ldr	r2, [r2, #20]
 8005984:	4311      	orrs	r1, r2
 8005986:	683a      	ldr	r2, [r7, #0]
 8005988:	6992      	ldr	r2, [r2, #24]
 800598a:	4311      	orrs	r1, r2
 800598c:	683a      	ldr	r2, [r7, #0]
 800598e:	69d2      	ldr	r2, [r2, #28]
 8005990:	4311      	orrs	r1, r2
 8005992:	683a      	ldr	r2, [r7, #0]
 8005994:	6a12      	ldr	r2, [r2, #32]
 8005996:	4311      	orrs	r1, r2
 8005998:	683a      	ldr	r2, [r7, #0]
 800599a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800599c:	430a      	orrs	r2, r1
 800599e:	431a      	orrs	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	601a      	str	r2, [r3, #0]
 80059a4:	e026      	b.n	80059f4 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	69d9      	ldr	r1, [r3, #28]
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	4319      	orrs	r1, r3
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059bc:	430b      	orrs	r3, r1
 80059be:	431a      	orrs	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685a      	ldr	r2, [r3, #4]
 80059c8:	4b0e      	ldr	r3, [pc, #56]	@ (8005a04 <FMC_SDRAM_Init+0xb4>)
 80059ca:	4013      	ands	r3, r2
 80059cc:	683a      	ldr	r2, [r7, #0]
 80059ce:	6851      	ldr	r1, [r2, #4]
 80059d0:	683a      	ldr	r2, [r7, #0]
 80059d2:	6892      	ldr	r2, [r2, #8]
 80059d4:	4311      	orrs	r1, r2
 80059d6:	683a      	ldr	r2, [r7, #0]
 80059d8:	68d2      	ldr	r2, [r2, #12]
 80059da:	4311      	orrs	r1, r2
 80059dc:	683a      	ldr	r2, [r7, #0]
 80059de:	6912      	ldr	r2, [r2, #16]
 80059e0:	4311      	orrs	r1, r2
 80059e2:	683a      	ldr	r2, [r7, #0]
 80059e4:	6952      	ldr	r2, [r2, #20]
 80059e6:	4311      	orrs	r1, r2
 80059e8:	683a      	ldr	r2, [r7, #0]
 80059ea:	6992      	ldr	r2, [r2, #24]
 80059ec:	430a      	orrs	r2, r1
 80059ee:	431a      	orrs	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	ffff8000 	.word	0xffff8000

08005a08 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d128      	bne.n	8005a6c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	1e59      	subs	r1, r3, #1
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	011b      	lsls	r3, r3, #4
 8005a30:	4319      	orrs	r1, r3
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	3b01      	subs	r3, #1
 8005a38:	021b      	lsls	r3, r3, #8
 8005a3a:	4319      	orrs	r1, r3
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	3b01      	subs	r3, #1
 8005a42:	031b      	lsls	r3, r3, #12
 8005a44:	4319      	orrs	r1, r3
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	041b      	lsls	r3, r3, #16
 8005a4e:	4319      	orrs	r1, r3
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	695b      	ldr	r3, [r3, #20]
 8005a54:	3b01      	subs	r3, #1
 8005a56:	051b      	lsls	r3, r3, #20
 8005a58:	4319      	orrs	r1, r3
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	061b      	lsls	r3, r3, #24
 8005a62:	430b      	orrs	r3, r1
 8005a64:	431a      	orrs	r2, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	609a      	str	r2, [r3, #8]
 8005a6a:	e02d      	b.n	8005ac8 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	689a      	ldr	r2, [r3, #8]
 8005a70:	4b19      	ldr	r3, [pc, #100]	@ (8005ad8 <FMC_SDRAM_Timing_Init+0xd0>)
 8005a72:	4013      	ands	r3, r2
 8005a74:	68ba      	ldr	r2, [r7, #8]
 8005a76:	68d2      	ldr	r2, [r2, #12]
 8005a78:	3a01      	subs	r2, #1
 8005a7a:	0311      	lsls	r1, r2, #12
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	6952      	ldr	r2, [r2, #20]
 8005a80:	3a01      	subs	r2, #1
 8005a82:	0512      	lsls	r2, r2, #20
 8005a84:	430a      	orrs	r2, r1
 8005a86:	431a      	orrs	r2, r3
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	1e59      	subs	r1, r3, #1
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	011b      	lsls	r3, r3, #4
 8005aa2:	4319      	orrs	r1, r3
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	021b      	lsls	r3, r3, #8
 8005aac:	4319      	orrs	r1, r3
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	041b      	lsls	r3, r3, #16
 8005ab6:	4319      	orrs	r1, r3
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	3b01      	subs	r3, #1
 8005abe:	061b      	lsls	r3, r3, #24
 8005ac0:	430b      	orrs	r3, r1
 8005ac2:	431a      	orrs	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3714      	adds	r7, #20
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	ff0f0fff 	.word	0xff0f0fff

08005adc <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	691a      	ldr	r2, [r3, #16]
 8005aec:	4b0c      	ldr	r3, [pc, #48]	@ (8005b20 <FMC_SDRAM_SendCommand+0x44>)
 8005aee:	4013      	ands	r3, r2
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	6811      	ldr	r1, [r2, #0]
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	6852      	ldr	r2, [r2, #4]
 8005af8:	4311      	orrs	r1, r2
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	6892      	ldr	r2, [r2, #8]
 8005afe:	3a01      	subs	r2, #1
 8005b00:	0152      	lsls	r2, r2, #5
 8005b02:	4311      	orrs	r1, r2
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	68d2      	ldr	r2, [r2, #12]
 8005b08:	0252      	lsls	r2, r2, #9
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	431a      	orrs	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3714      	adds	r7, #20
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr
 8005b20:	ffc00000 	.word	0xffc00000

08005b24 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	695a      	ldr	r2, [r3, #20]
 8005b32:	4b07      	ldr	r3, [pc, #28]	@ (8005b50 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8005b34:	4013      	ands	r3, r2
 8005b36:	683a      	ldr	r2, [r7, #0]
 8005b38:	0052      	lsls	r2, r2, #1
 8005b3a:	431a      	orrs	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	370c      	adds	r7, #12
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	ffffc001 	.word	0xffffc001

08005b54 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8005b54:	b084      	sub	sp, #16
 8005b56:	b480      	push	{r7}
 8005b58:	b085      	sub	sp, #20
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
 8005b5e:	f107 001c 	add.w	r0, r7, #28
 8005b62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005b66:	2300      	movs	r3, #0
 8005b68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005b6a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005b6c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005b6e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8005b72:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8005b76:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8005b7a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8005b7e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685a      	ldr	r2, [r3, #4]
 8005b8a:	4b07      	ldr	r3, [pc, #28]	@ (8005ba8 <SDMMC_Init+0x54>)
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	431a      	orrs	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3714      	adds	r7, #20
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	b004      	add	sp, #16
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	ffff8100 	.word	0xffff8100

08005bac <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	370c      	adds	r7, #12
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8005bc6:	b480      	push	{r7}
 8005bc8:	b083      	sub	sp, #12
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
 8005bce:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2203      	movs	r2, #3
 8005bf4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0303 	and.w	r3, r3, #3
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005c3e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005c44:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005c4a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	68da      	ldr	r2, [r3, #12]
 8005c56:	4b06      	ldr	r3, [pc, #24]	@ (8005c70 <SDMMC_SendCommand+0x50>)
 8005c58:	4013      	ands	r3, r2
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	431a      	orrs	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3714      	adds	r7, #20
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr
 8005c70:	fffff000 	.word	0xfffff000

08005c74 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	b2db      	uxtb	r3, r3
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	370c      	adds	r7, #12
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr

08005c8e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8005c8e:	b480      	push	{r7}
 8005c90:	b085      	sub	sp, #20
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
 8005c96:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	3314      	adds	r3, #20
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
}  
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3714      	adds	r7, #20
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	685a      	ldr	r2, [r3, #4]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005cda:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005ce0:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005ce6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cf2:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	431a      	orrs	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0

}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b088      	sub	sp, #32
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005d1a:	2310      	movs	r3, #16
 8005d1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005d1e:	2340      	movs	r3, #64	@ 0x40
 8005d20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005d22:	2300      	movs	r3, #0
 8005d24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005d26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005d2c:	f107 0308 	add.w	r3, r7, #8
 8005d30:	4619      	mov	r1, r3
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f7ff ff74 	bl	8005c20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8005d38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d3c:	2110      	movs	r1, #16
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 f9d6 	bl	80060f0 <SDMMC_GetCmdResp1>
 8005d44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d46:	69fb      	ldr	r3, [r7, #28]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3720      	adds	r7, #32
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b088      	sub	sp, #32
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005d5e:	2311      	movs	r3, #17
 8005d60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005d62:	2340      	movs	r3, #64	@ 0x40
 8005d64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005d66:	2300      	movs	r3, #0
 8005d68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005d6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005d70:	f107 0308 	add.w	r3, r7, #8
 8005d74:	4619      	mov	r1, r3
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f7ff ff52 	bl	8005c20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005d7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d80:	2111      	movs	r1, #17
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 f9b4 	bl	80060f0 <SDMMC_GetCmdResp1>
 8005d88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d8a:	69fb      	ldr	r3, [r7, #28]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3720      	adds	r7, #32
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b088      	sub	sp, #32
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005da2:	2312      	movs	r3, #18
 8005da4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005da6:	2340      	movs	r3, #64	@ 0x40
 8005da8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005daa:	2300      	movs	r3, #0
 8005dac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005dae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005db2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005db4:	f107 0308 	add.w	r3, r7, #8
 8005db8:	4619      	mov	r1, r3
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f7ff ff30 	bl	8005c20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005dc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dc4:	2112      	movs	r1, #18
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 f992 	bl	80060f0 <SDMMC_GetCmdResp1>
 8005dcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005dce:	69fb      	ldr	r3, [r7, #28]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3720      	adds	r7, #32
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b088      	sub	sp, #32
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005de6:	2318      	movs	r3, #24
 8005de8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005dea:	2340      	movs	r3, #64	@ 0x40
 8005dec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005dee:	2300      	movs	r3, #0
 8005df0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005df2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005df6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005df8:	f107 0308 	add.w	r3, r7, #8
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7ff ff0e 	bl	8005c20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005e04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e08:	2118      	movs	r1, #24
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 f970 	bl	80060f0 <SDMMC_GetCmdResp1>
 8005e10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e12:	69fb      	ldr	r3, [r7, #28]
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3720      	adds	r7, #32
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b088      	sub	sp, #32
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005e2a:	2319      	movs	r3, #25
 8005e2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005e2e:	2340      	movs	r3, #64	@ 0x40
 8005e30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005e32:	2300      	movs	r3, #0
 8005e34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005e36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005e3c:	f107 0308 	add.w	r3, r7, #8
 8005e40:	4619      	mov	r1, r3
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f7ff feec 	bl	8005c20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005e48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e4c:	2119      	movs	r1, #25
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 f94e 	bl	80060f0 <SDMMC_GetCmdResp1>
 8005e54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e56:	69fb      	ldr	r3, [r7, #28]
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3720      	adds	r7, #32
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b088      	sub	sp, #32
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005e6c:	230c      	movs	r3, #12
 8005e6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005e70:	2340      	movs	r3, #64	@ 0x40
 8005e72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005e74:	2300      	movs	r3, #0
 8005e76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005e78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005e7e:	f107 0308 	add.w	r3, r7, #8
 8005e82:	4619      	mov	r1, r3
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f7ff fecb 	bl	8005c20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8005e8a:	4a05      	ldr	r2, [pc, #20]	@ (8005ea0 <SDMMC_CmdStopTransfer+0x40>)
 8005e8c:	210c      	movs	r1, #12
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 f92e 	bl	80060f0 <SDMMC_GetCmdResp1>
 8005e94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e96:	69fb      	ldr	r3, [r7, #28]
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3720      	adds	r7, #32
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	05f5e100 	.word	0x05f5e100

08005ea4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b08a      	sub	sp, #40	@ 0x28
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005eb4:	2307      	movs	r3, #7
 8005eb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005eb8:	2340      	movs	r3, #64	@ 0x40
 8005eba:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005ec0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005ec4:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005ec6:	f107 0310 	add.w	r3, r7, #16
 8005eca:	4619      	mov	r1, r3
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f7ff fea7 	bl	8005c20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8005ed2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ed6:	2107      	movs	r1, #7
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f000 f909 	bl	80060f0 <SDMMC_GetCmdResp1>
 8005ede:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3728      	adds	r7, #40	@ 0x28
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}

08005eea <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8005eea:	b580      	push	{r7, lr}
 8005eec:	b088      	sub	sp, #32
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8005efa:	2300      	movs	r3, #0
 8005efc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005efe:	2300      	movs	r3, #0
 8005f00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005f02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f06:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005f08:	f107 0308 	add.w	r3, r7, #8
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f7ff fe86 	bl	8005c20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 fb23 	bl	8006560 <SDMMC_GetCmdError>
 8005f1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f1c:	69fb      	ldr	r3, [r7, #28]
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3720      	adds	r7, #32
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8005f26:	b580      	push	{r7, lr}
 8005f28:	b088      	sub	sp, #32
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005f2e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8005f32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005f34:	2308      	movs	r3, #8
 8005f36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005f38:	2340      	movs	r3, #64	@ 0x40
 8005f3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005f40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f44:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005f46:	f107 0308 	add.w	r3, r7, #8
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f7ff fe67 	bl	8005c20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 fab6 	bl	80064c4 <SDMMC_GetCmdResp7>
 8005f58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f5a:	69fb      	ldr	r3, [r7, #28]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3720      	adds	r7, #32
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b088      	sub	sp, #32
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005f72:	2337      	movs	r3, #55	@ 0x37
 8005f74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005f76:	2340      	movs	r3, #64	@ 0x40
 8005f78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005f7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005f84:	f107 0308 	add.w	r3, r7, #8
 8005f88:	4619      	mov	r1, r3
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7ff fe48 	bl	8005c20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8005f90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f94:	2137      	movs	r1, #55	@ 0x37
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 f8aa 	bl	80060f0 <SDMMC_GetCmdResp1>
 8005f9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f9e:	69fb      	ldr	r3, [r7, #28]
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3720      	adds	r7, #32
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b088      	sub	sp, #32
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005fb2:	683a      	ldr	r2, [r7, #0]
 8005fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8005fec <SDMMC_CmdAppOperCommand+0x44>)
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005fba:	2329      	movs	r3, #41	@ 0x29
 8005fbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005fbe:	2340      	movs	r3, #64	@ 0x40
 8005fc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005fc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005fca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005fcc:	f107 0308 	add.w	r3, r7, #8
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7ff fe24 	bl	8005c20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 f9bf 	bl	800635c <SDMMC_GetCmdResp3>
 8005fde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005fe0:	69fb      	ldr	r3, [r7, #28]
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3720      	adds	r7, #32
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	80100000 	.word	0x80100000

08005ff0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b088      	sub	sp, #32
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005ffc:	2302      	movs	r3, #2
 8005ffe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006000:	23c0      	movs	r3, #192	@ 0xc0
 8006002:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006004:	2300      	movs	r3, #0
 8006006:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006008:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800600c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800600e:	f107 0308 	add.w	r3, r7, #8
 8006012:	4619      	mov	r1, r3
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f7ff fe03 	bl	8005c20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 f956 	bl	80062cc <SDMMC_GetCmdResp2>
 8006020:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006022:	69fb      	ldr	r3, [r7, #28]
}
 8006024:	4618      	mov	r0, r3
 8006026:	3720      	adds	r7, #32
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b088      	sub	sp, #32
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800603a:	2309      	movs	r3, #9
 800603c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800603e:	23c0      	movs	r3, #192	@ 0xc0
 8006040:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006042:	2300      	movs	r3, #0
 8006044:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006046:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800604a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800604c:	f107 0308 	add.w	r3, r7, #8
 8006050:	4619      	mov	r1, r3
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f7ff fde4 	bl	8005c20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 f937 	bl	80062cc <SDMMC_GetCmdResp2>
 800605e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006060:	69fb      	ldr	r3, [r7, #28]
}
 8006062:	4618      	mov	r0, r3
 8006064:	3720      	adds	r7, #32
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800606a:	b580      	push	{r7, lr}
 800606c:	b088      	sub	sp, #32
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
 8006072:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006074:	2300      	movs	r3, #0
 8006076:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006078:	2303      	movs	r3, #3
 800607a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800607c:	2340      	movs	r3, #64	@ 0x40
 800607e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006080:	2300      	movs	r3, #0
 8006082:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006084:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006088:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800608a:	f107 0308 	add.w	r3, r7, #8
 800608e:	4619      	mov	r1, r3
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f7ff fdc5 	bl	8005c20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006096:	683a      	ldr	r2, [r7, #0]
 8006098:	2103      	movs	r1, #3
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f99c 	bl	80063d8 <SDMMC_GetCmdResp6>
 80060a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060a2:	69fb      	ldr	r3, [r7, #28]
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3720      	adds	r7, #32
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b088      	sub	sp, #32
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80060ba:	230d      	movs	r3, #13
 80060bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80060be:	2340      	movs	r3, #64	@ 0x40
 80060c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80060c2:	2300      	movs	r3, #0
 80060c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80060c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80060ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80060cc:	f107 0308 	add.w	r3, r7, #8
 80060d0:	4619      	mov	r1, r3
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f7ff fda4 	bl	8005c20 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80060d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060dc:	210d      	movs	r1, #13
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 f806 	bl	80060f0 <SDMMC_GetCmdResp1>
 80060e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060e6:	69fb      	ldr	r3, [r7, #28]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3720      	adds	r7, #32
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b088      	sub	sp, #32
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	460b      	mov	r3, r1
 80060fa:	607a      	str	r2, [r7, #4]
 80060fc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80060fe:	4b70      	ldr	r3, [pc, #448]	@ (80062c0 <SDMMC_GetCmdResp1+0x1d0>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a70      	ldr	r2, [pc, #448]	@ (80062c4 <SDMMC_GetCmdResp1+0x1d4>)
 8006104:	fba2 2303 	umull	r2, r3, r2, r3
 8006108:	0a5a      	lsrs	r2, r3, #9
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	fb02 f303 	mul.w	r3, r2, r3
 8006110:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	1e5a      	subs	r2, r3, #1
 8006116:	61fa      	str	r2, [r7, #28]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d102      	bne.n	8006122 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800611c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006120:	e0c9      	b.n	80062b6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006126:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800612e:	2b00      	cmp	r3, #0
 8006130:	d0ef      	beq.n	8006112 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006138:	2b00      	cmp	r3, #0
 800613a:	d1ea      	bne.n	8006112 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006140:	f003 0304 	and.w	r3, r3, #4
 8006144:	2b00      	cmp	r3, #0
 8006146:	d004      	beq.n	8006152 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2204      	movs	r2, #4
 800614c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800614e:	2304      	movs	r3, #4
 8006150:	e0b1      	b.n	80062b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006156:	f003 0301 	and.w	r3, r3, #1
 800615a:	2b00      	cmp	r3, #0
 800615c:	d004      	beq.n	8006168 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2201      	movs	r2, #1
 8006162:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006164:	2301      	movs	r3, #1
 8006166:	e0a6      	b.n	80062b6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	22c5      	movs	r2, #197	@ 0xc5
 800616c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f7ff fd80 	bl	8005c74 <SDMMC_GetCommandResponse>
 8006174:	4603      	mov	r3, r0
 8006176:	461a      	mov	r2, r3
 8006178:	7afb      	ldrb	r3, [r7, #11]
 800617a:	4293      	cmp	r3, r2
 800617c:	d001      	beq.n	8006182 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800617e:	2301      	movs	r3, #1
 8006180:	e099      	b.n	80062b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006182:	2100      	movs	r1, #0
 8006184:	68f8      	ldr	r0, [r7, #12]
 8006186:	f7ff fd82 	bl	8005c8e <SDMMC_GetResponse>
 800618a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	4b4e      	ldr	r3, [pc, #312]	@ (80062c8 <SDMMC_GetCmdResp1+0x1d8>)
 8006190:	4013      	ands	r3, r2
 8006192:	2b00      	cmp	r3, #0
 8006194:	d101      	bne.n	800619a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006196:	2300      	movs	r3, #0
 8006198:	e08d      	b.n	80062b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	2b00      	cmp	r3, #0
 800619e:	da02      	bge.n	80061a6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80061a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80061a4:	e087      	b.n	80062b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d001      	beq.n	80061b4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80061b0:	2340      	movs	r3, #64	@ 0x40
 80061b2:	e080      	b.n	80062b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d001      	beq.n	80061c2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80061be:	2380      	movs	r3, #128	@ 0x80
 80061c0:	e079      	b.n	80062b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d002      	beq.n	80061d2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80061cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80061d0:	e071      	b.n	80062b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d002      	beq.n	80061e2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80061dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80061e0:	e069      	b.n	80062b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d002      	beq.n	80061f2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80061ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80061f0:	e061      	b.n	80062b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d002      	beq.n	8006202 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80061fc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006200:	e059      	b.n	80062b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006208:	2b00      	cmp	r3, #0
 800620a:	d002      	beq.n	8006212 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800620c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006210:	e051      	b.n	80062b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d002      	beq.n	8006222 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800621c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006220:	e049      	b.n	80062b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d002      	beq.n	8006232 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800622c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006230:	e041      	b.n	80062b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006238:	2b00      	cmp	r3, #0
 800623a:	d002      	beq.n	8006242 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800623c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006240:	e039      	b.n	80062b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006248:	2b00      	cmp	r3, #0
 800624a:	d002      	beq.n	8006252 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800624c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006250:	e031      	b.n	80062b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006258:	2b00      	cmp	r3, #0
 800625a:	d002      	beq.n	8006262 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800625c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8006260:	e029      	b.n	80062b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d002      	beq.n	8006272 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800626c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006270:	e021      	b.n	80062b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006278:	2b00      	cmp	r3, #0
 800627a:	d002      	beq.n	8006282 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800627c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006280:	e019      	b.n	80062b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006288:	2b00      	cmp	r3, #0
 800628a:	d002      	beq.n	8006292 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800628c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8006290:	e011      	b.n	80062b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006298:	2b00      	cmp	r3, #0
 800629a:	d002      	beq.n	80062a2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800629c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80062a0:	e009      	b.n	80062b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f003 0308 	and.w	r3, r3, #8
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d002      	beq.n	80062b2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80062ac:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80062b0:	e001      	b.n	80062b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80062b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3720      	adds	r7, #32
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	20000000 	.word	0x20000000
 80062c4:	10624dd3 	.word	0x10624dd3
 80062c8:	fdffe008 	.word	0xfdffe008

080062cc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80062d4:	4b1f      	ldr	r3, [pc, #124]	@ (8006354 <SDMMC_GetCmdResp2+0x88>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a1f      	ldr	r2, [pc, #124]	@ (8006358 <SDMMC_GetCmdResp2+0x8c>)
 80062da:	fba2 2303 	umull	r2, r3, r2, r3
 80062de:	0a5b      	lsrs	r3, r3, #9
 80062e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062e4:	fb02 f303 	mul.w	r3, r2, r3
 80062e8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	1e5a      	subs	r2, r3, #1
 80062ee:	60fa      	str	r2, [r7, #12]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d102      	bne.n	80062fa <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80062f4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80062f8:	e026      	b.n	8006348 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062fe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006306:	2b00      	cmp	r3, #0
 8006308:	d0ef      	beq.n	80062ea <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1ea      	bne.n	80062ea <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006318:	f003 0304 	and.w	r3, r3, #4
 800631c:	2b00      	cmp	r3, #0
 800631e:	d004      	beq.n	800632a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2204      	movs	r2, #4
 8006324:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006326:	2304      	movs	r3, #4
 8006328:	e00e      	b.n	8006348 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	2b00      	cmp	r3, #0
 8006334:	d004      	beq.n	8006340 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2201      	movs	r2, #1
 800633a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800633c:	2301      	movs	r3, #1
 800633e:	e003      	b.n	8006348 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	22c5      	movs	r2, #197	@ 0xc5
 8006344:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3714      	adds	r7, #20
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr
 8006354:	20000000 	.word	0x20000000
 8006358:	10624dd3 	.word	0x10624dd3

0800635c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006364:	4b1a      	ldr	r3, [pc, #104]	@ (80063d0 <SDMMC_GetCmdResp3+0x74>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a1a      	ldr	r2, [pc, #104]	@ (80063d4 <SDMMC_GetCmdResp3+0x78>)
 800636a:	fba2 2303 	umull	r2, r3, r2, r3
 800636e:	0a5b      	lsrs	r3, r3, #9
 8006370:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006374:	fb02 f303 	mul.w	r3, r2, r3
 8006378:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	1e5a      	subs	r2, r3, #1
 800637e:	60fa      	str	r2, [r7, #12]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d102      	bne.n	800638a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006384:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006388:	e01b      	b.n	80063c2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800638e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006396:	2b00      	cmp	r3, #0
 8006398:	d0ef      	beq.n	800637a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d1ea      	bne.n	800637a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063a8:	f003 0304 	and.w	r3, r3, #4
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d004      	beq.n	80063ba <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2204      	movs	r2, #4
 80063b4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80063b6:	2304      	movs	r3, #4
 80063b8:	e003      	b.n	80063c2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	22c5      	movs	r2, #197	@ 0xc5
 80063be:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3714      	adds	r7, #20
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop
 80063d0:	20000000 	.word	0x20000000
 80063d4:	10624dd3 	.word	0x10624dd3

080063d8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b088      	sub	sp, #32
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	460b      	mov	r3, r1
 80063e2:	607a      	str	r2, [r7, #4]
 80063e4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80063e6:	4b35      	ldr	r3, [pc, #212]	@ (80064bc <SDMMC_GetCmdResp6+0xe4>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a35      	ldr	r2, [pc, #212]	@ (80064c0 <SDMMC_GetCmdResp6+0xe8>)
 80063ec:	fba2 2303 	umull	r2, r3, r2, r3
 80063f0:	0a5b      	lsrs	r3, r3, #9
 80063f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063f6:	fb02 f303 	mul.w	r3, r2, r3
 80063fa:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	1e5a      	subs	r2, r3, #1
 8006400:	61fa      	str	r2, [r7, #28]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d102      	bne.n	800640c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006406:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800640a:	e052      	b.n	80064b2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006410:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006418:	2b00      	cmp	r3, #0
 800641a:	d0ef      	beq.n	80063fc <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006422:	2b00      	cmp	r3, #0
 8006424:	d1ea      	bne.n	80063fc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800642a:	f003 0304 	and.w	r3, r3, #4
 800642e:	2b00      	cmp	r3, #0
 8006430:	d004      	beq.n	800643c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2204      	movs	r2, #4
 8006436:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006438:	2304      	movs	r3, #4
 800643a:	e03a      	b.n	80064b2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006440:	f003 0301 	and.w	r3, r3, #1
 8006444:	2b00      	cmp	r3, #0
 8006446:	d004      	beq.n	8006452 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2201      	movs	r2, #1
 800644c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800644e:	2301      	movs	r3, #1
 8006450:	e02f      	b.n	80064b2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006452:	68f8      	ldr	r0, [r7, #12]
 8006454:	f7ff fc0e 	bl	8005c74 <SDMMC_GetCommandResponse>
 8006458:	4603      	mov	r3, r0
 800645a:	461a      	mov	r2, r3
 800645c:	7afb      	ldrb	r3, [r7, #11]
 800645e:	4293      	cmp	r3, r2
 8006460:	d001      	beq.n	8006466 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006462:	2301      	movs	r3, #1
 8006464:	e025      	b.n	80064b2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	22c5      	movs	r2, #197	@ 0xc5
 800646a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800646c:	2100      	movs	r1, #0
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	f7ff fc0d 	bl	8005c8e <SDMMC_GetResponse>
 8006474:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800647c:	2b00      	cmp	r3, #0
 800647e:	d106      	bne.n	800648e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	0c1b      	lsrs	r3, r3, #16
 8006484:	b29a      	uxth	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800648a:	2300      	movs	r3, #0
 800648c:	e011      	b.n	80064b2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006494:	2b00      	cmp	r3, #0
 8006496:	d002      	beq.n	800649e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006498:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800649c:	e009      	b.n	80064b2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d002      	beq.n	80064ae <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80064a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80064ac:	e001      	b.n	80064b2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80064ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3720      	adds	r7, #32
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	20000000 	.word	0x20000000
 80064c0:	10624dd3 	.word	0x10624dd3

080064c4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80064cc:	4b22      	ldr	r3, [pc, #136]	@ (8006558 <SDMMC_GetCmdResp7+0x94>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a22      	ldr	r2, [pc, #136]	@ (800655c <SDMMC_GetCmdResp7+0x98>)
 80064d2:	fba2 2303 	umull	r2, r3, r2, r3
 80064d6:	0a5b      	lsrs	r3, r3, #9
 80064d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064dc:	fb02 f303 	mul.w	r3, r2, r3
 80064e0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	1e5a      	subs	r2, r3, #1
 80064e6:	60fa      	str	r2, [r7, #12]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d102      	bne.n	80064f2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80064ec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80064f0:	e02c      	b.n	800654c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064f6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d0ef      	beq.n	80064e2 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1ea      	bne.n	80064e2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006510:	f003 0304 	and.w	r3, r3, #4
 8006514:	2b00      	cmp	r3, #0
 8006516:	d004      	beq.n	8006522 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2204      	movs	r2, #4
 800651c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800651e:	2304      	movs	r3, #4
 8006520:	e014      	b.n	800654c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006526:	f003 0301 	and.w	r3, r3, #1
 800652a:	2b00      	cmp	r3, #0
 800652c:	d004      	beq.n	8006538 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2201      	movs	r2, #1
 8006532:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006534:	2301      	movs	r3, #1
 8006536:	e009      	b.n	800654c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800653c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006540:	2b00      	cmp	r3, #0
 8006542:	d002      	beq.n	800654a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2240      	movs	r2, #64	@ 0x40
 8006548:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800654a:	2300      	movs	r3, #0
  
}
 800654c:	4618      	mov	r0, r3
 800654e:	3714      	adds	r7, #20
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr
 8006558:	20000000 	.word	0x20000000
 800655c:	10624dd3 	.word	0x10624dd3

08006560 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006568:	4b11      	ldr	r3, [pc, #68]	@ (80065b0 <SDMMC_GetCmdError+0x50>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a11      	ldr	r2, [pc, #68]	@ (80065b4 <SDMMC_GetCmdError+0x54>)
 800656e:	fba2 2303 	umull	r2, r3, r2, r3
 8006572:	0a5b      	lsrs	r3, r3, #9
 8006574:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006578:	fb02 f303 	mul.w	r3, r2, r3
 800657c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	1e5a      	subs	r2, r3, #1
 8006582:	60fa      	str	r2, [r7, #12]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d102      	bne.n	800658e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006588:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800658c:	e009      	b.n	80065a2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006596:	2b00      	cmp	r3, #0
 8006598:	d0f1      	beq.n	800657e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	22c5      	movs	r2, #197	@ 0xc5
 800659e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3714      	adds	r7, #20
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	20000000 	.word	0x20000000
 80065b4:	10624dd3 	.word	0x10624dd3

080065b8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80065bc:	4904      	ldr	r1, [pc, #16]	@ (80065d0 <MX_FATFS_Init+0x18>)
 80065be:	4805      	ldr	r0, [pc, #20]	@ (80065d4 <MX_FATFS_Init+0x1c>)
 80065c0:	f000 fa92 	bl	8006ae8 <FATFS_LinkDriver>
 80065c4:	4603      	mov	r3, r0
 80065c6:	461a      	mov	r2, r3
 80065c8:	4b03      	ldr	r3, [pc, #12]	@ (80065d8 <MX_FATFS_Init+0x20>)
 80065ca:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80065cc:	bf00      	nop
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	20000358 	.word	0x20000358
 80065d4:	08006b90 	.word	0x08006b90
 80065d8:	20000354 	.word	0x20000354

080065dc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b082      	sub	sp, #8
 80065e0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80065e2:	2300      	movs	r3, #0
 80065e4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80065e6:	f000 f888 	bl	80066fa <BSP_SD_IsDetected>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d001      	beq.n	80065f4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80065f0:	2302      	movs	r3, #2
 80065f2:	e005      	b.n	8006600 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80065f4:	4804      	ldr	r0, [pc, #16]	@ (8006608 <BSP_SD_Init+0x2c>)
 80065f6:	f7fd ffcd 	bl	8004594 <HAL_SD_Init>
 80065fa:	4603      	mov	r3, r0
 80065fc:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80065fe:	79fb      	ldrb	r3, [r7, #7]
}
 8006600:	4618      	mov	r0, r3
 8006602:	3708      	adds	r7, #8
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}
 8006608:	20000114 	.word	0x20000114

0800660c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b086      	sub	sp, #24
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006618:	2300      	movs	r3, #0
 800661a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	68ba      	ldr	r2, [r7, #8]
 8006620:	68f9      	ldr	r1, [r7, #12]
 8006622:	4806      	ldr	r0, [pc, #24]	@ (800663c <BSP_SD_ReadBlocks_DMA+0x30>)
 8006624:	f7fe f86e 	bl	8004704 <HAL_SD_ReadBlocks_DMA>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d001      	beq.n	8006632 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006632:	7dfb      	ldrb	r3, [r7, #23]
}
 8006634:	4618      	mov	r0, r3
 8006636:	3718      	adds	r7, #24
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}
 800663c:	20000114 	.word	0x20000114

08006640 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800664c:	2300      	movs	r3, #0
 800664e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	68f9      	ldr	r1, [r7, #12]
 8006656:	4806      	ldr	r0, [pc, #24]	@ (8006670 <BSP_SD_WriteBlocks_DMA+0x30>)
 8006658:	f7fe f936 	bl	80048c8 <HAL_SD_WriteBlocks_DMA>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d001      	beq.n	8006666 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006666:	7dfb      	ldrb	r3, [r7, #23]
}
 8006668:	4618      	mov	r0, r3
 800666a:	3718      	adds	r7, #24
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}
 8006670:	20000114 	.word	0x20000114

08006674 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006678:	4805      	ldr	r0, [pc, #20]	@ (8006690 <BSP_SD_GetCardState+0x1c>)
 800667a:	f7fe fd5b 	bl	8005134 <HAL_SD_GetCardState>
 800667e:	4603      	mov	r3, r0
 8006680:	2b04      	cmp	r3, #4
 8006682:	bf14      	ite	ne
 8006684:	2301      	movne	r3, #1
 8006686:	2300      	moveq	r3, #0
 8006688:	b2db      	uxtb	r3, r3
}
 800668a:	4618      	mov	r0, r3
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	20000114 	.word	0x20000114

08006694 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800669c:	6879      	ldr	r1, [r7, #4]
 800669e:	4803      	ldr	r0, [pc, #12]	@ (80066ac <BSP_SD_GetCardInfo+0x18>)
 80066a0:	f7fe fd1c 	bl	80050dc <HAL_SD_GetCardInfo>
}
 80066a4:	bf00      	nop
 80066a6:	3708      	adds	r7, #8
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	20000114 	.word	0x20000114

080066b0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80066b8:	f000 f818 	bl	80066ec <BSP_SD_AbortCallback>
}
 80066bc:	bf00      	nop
 80066be:	3708      	adds	r7, #8
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80066cc:	f000 f9a8 	bl	8006a20 <BSP_SD_WriteCpltCallback>
}
 80066d0:	bf00      	nop
 80066d2:	3708      	adds	r7, #8
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80066e0:	f000 f9aa 	bl	8006a38 <BSP_SD_ReadCpltCallback>
}
 80066e4:	bf00      	nop
 80066e6:	3708      	adds	r7, #8
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80066ec:	b480      	push	{r7}
 80066ee:	af00      	add	r7, sp, #0

}
 80066f0:	bf00      	nop
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b082      	sub	sp, #8
 80066fe:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006700:	2301      	movs	r3, #1
 8006702:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8006704:	f000 f80c 	bl	8006720 <BSP_PlatformIsDetected>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d101      	bne.n	8006712 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800670e:	2300      	movs	r3, #0
 8006710:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8006712:	79fb      	ldrb	r3, [r7, #7]
 8006714:	b2db      	uxtb	r3, r3
}
 8006716:	4618      	mov	r0, r3
 8006718:	3708      	adds	r7, #8
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
	...

08006720 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8006726:	2301      	movs	r3, #1
 8006728:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800672a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800672e:	4806      	ldr	r0, [pc, #24]	@ (8006748 <BSP_PlatformIsDetected+0x28>)
 8006730:	f7fc fbe0 	bl	8002ef4 <HAL_GPIO_ReadPin>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d001      	beq.n	800673e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800673a:	2300      	movs	r3, #0
 800673c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800673e:	79fb      	ldrb	r3, [r7, #7]
}
 8006740:	4618      	mov	r0, r3
 8006742:	3708      	adds	r7, #8
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	40020800 	.word	0x40020800

0800674c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8006754:	f7fb fa78 	bl	8001c48 <HAL_GetTick>
 8006758:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800675a:	e006      	b.n	800676a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800675c:	f7ff ff8a 	bl	8006674 <BSP_SD_GetCardState>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d101      	bne.n	800676a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8006766:	2300      	movs	r3, #0
 8006768:	e009      	b.n	800677e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800676a:	f7fb fa6d 	bl	8001c48 <HAL_GetTick>
 800676e:	4602      	mov	r2, r0
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	429a      	cmp	r2, r3
 8006778:	d8f0      	bhi.n	800675c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800677a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800677e:	4618      	mov	r0, r3
 8006780:	3710      	adds	r7, #16
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
	...

08006788 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	4603      	mov	r3, r0
 8006790:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006792:	4b0b      	ldr	r3, [pc, #44]	@ (80067c0 <SD_CheckStatus+0x38>)
 8006794:	2201      	movs	r2, #1
 8006796:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8006798:	f7ff ff6c 	bl	8006674 <BSP_SD_GetCardState>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d107      	bne.n	80067b2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80067a2:	4b07      	ldr	r3, [pc, #28]	@ (80067c0 <SD_CheckStatus+0x38>)
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	f023 0301 	bic.w	r3, r3, #1
 80067ac:	b2da      	uxtb	r2, r3
 80067ae:	4b04      	ldr	r3, [pc, #16]	@ (80067c0 <SD_CheckStatus+0x38>)
 80067b0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80067b2:	4b03      	ldr	r3, [pc, #12]	@ (80067c0 <SD_CheckStatus+0x38>)
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	b2db      	uxtb	r3, r3
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3708      	adds	r7, #8
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	2000000d 	.word	0x2000000d

080067c4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b082      	sub	sp, #8
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	4603      	mov	r3, r0
 80067cc:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80067ce:	f7ff ff05 	bl	80065dc <BSP_SD_Init>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d107      	bne.n	80067e8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80067d8:	79fb      	ldrb	r3, [r7, #7]
 80067da:	4618      	mov	r0, r3
 80067dc:	f7ff ffd4 	bl	8006788 <SD_CheckStatus>
 80067e0:	4603      	mov	r3, r0
 80067e2:	461a      	mov	r2, r3
 80067e4:	4b04      	ldr	r3, [pc, #16]	@ (80067f8 <SD_initialize+0x34>)
 80067e6:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80067e8:	4b03      	ldr	r3, [pc, #12]	@ (80067f8 <SD_initialize+0x34>)
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	b2db      	uxtb	r3, r3
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3708      	adds	r7, #8
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	2000000d 	.word	0x2000000d

080067fc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	4603      	mov	r3, r0
 8006804:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006806:	79fb      	ldrb	r3, [r7, #7]
 8006808:	4618      	mov	r0, r3
 800680a:	f7ff ffbd 	bl	8006788 <SD_CheckStatus>
 800680e:	4603      	mov	r3, r0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3708      	adds	r7, #8
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af00      	add	r7, sp, #0
 800681e:	60b9      	str	r1, [r7, #8]
 8006820:	607a      	str	r2, [r7, #4]
 8006822:	603b      	str	r3, [r7, #0]
 8006824:	4603      	mov	r3, r0
 8006826:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800682c:	f247 5030 	movw	r0, #30000	@ 0x7530
 8006830:	f7ff ff8c 	bl	800674c <SD_CheckStatusWithTimeout>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	da01      	bge.n	800683e <SD_read+0x26>
  {
    return res;
 800683a:	7dfb      	ldrb	r3, [r7, #23]
 800683c:	e03b      	b.n	80068b6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800683e:	683a      	ldr	r2, [r7, #0]
 8006840:	6879      	ldr	r1, [r7, #4]
 8006842:	68b8      	ldr	r0, [r7, #8]
 8006844:	f7ff fee2 	bl	800660c <BSP_SD_ReadBlocks_DMA>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d132      	bne.n	80068b4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800684e:	4b1c      	ldr	r3, [pc, #112]	@ (80068c0 <SD_read+0xa8>)
 8006850:	2200      	movs	r2, #0
 8006852:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8006854:	f7fb f9f8 	bl	8001c48 <HAL_GetTick>
 8006858:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800685a:	bf00      	nop
 800685c:	4b18      	ldr	r3, [pc, #96]	@ (80068c0 <SD_read+0xa8>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d108      	bne.n	8006876 <SD_read+0x5e>
 8006864:	f7fb f9f0 	bl	8001c48 <HAL_GetTick>
 8006868:	4602      	mov	r2, r0
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	f247 522f 	movw	r2, #29999	@ 0x752f
 8006872:	4293      	cmp	r3, r2
 8006874:	d9f2      	bls.n	800685c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8006876:	4b12      	ldr	r3, [pc, #72]	@ (80068c0 <SD_read+0xa8>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d102      	bne.n	8006884 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	75fb      	strb	r3, [r7, #23]
 8006882:	e017      	b.n	80068b4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8006884:	4b0e      	ldr	r3, [pc, #56]	@ (80068c0 <SD_read+0xa8>)
 8006886:	2200      	movs	r2, #0
 8006888:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800688a:	f7fb f9dd 	bl	8001c48 <HAL_GetTick>
 800688e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006890:	e007      	b.n	80068a2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006892:	f7ff feef 	bl	8006674 <BSP_SD_GetCardState>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d102      	bne.n	80068a2 <SD_read+0x8a>
          {
            res = RES_OK;
 800689c:	2300      	movs	r3, #0
 800689e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80068a0:	e008      	b.n	80068b4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80068a2:	f7fb f9d1 	bl	8001c48 <HAL_GetTick>
 80068a6:	4602      	mov	r2, r0
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	f247 522f 	movw	r2, #29999	@ 0x752f
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d9ee      	bls.n	8006892 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80068b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3718      	adds	r7, #24
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	20000360 	.word	0x20000360

080068c4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b086      	sub	sp, #24
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60b9      	str	r1, [r7, #8]
 80068cc:	607a      	str	r2, [r7, #4]
 80068ce:	603b      	str	r3, [r7, #0]
 80068d0:	4603      	mov	r3, r0
 80068d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80068d8:	4b24      	ldr	r3, [pc, #144]	@ (800696c <SD_write+0xa8>)
 80068da:	2200      	movs	r2, #0
 80068dc:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80068de:	f247 5030 	movw	r0, #30000	@ 0x7530
 80068e2:	f7ff ff33 	bl	800674c <SD_CheckStatusWithTimeout>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	da01      	bge.n	80068f0 <SD_write+0x2c>
  {
    return res;
 80068ec:	7dfb      	ldrb	r3, [r7, #23]
 80068ee:	e038      	b.n	8006962 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80068f0:	683a      	ldr	r2, [r7, #0]
 80068f2:	6879      	ldr	r1, [r7, #4]
 80068f4:	68b8      	ldr	r0, [r7, #8]
 80068f6:	f7ff fea3 	bl	8006640 <BSP_SD_WriteBlocks_DMA>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d12f      	bne.n	8006960 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8006900:	f7fb f9a2 	bl	8001c48 <HAL_GetTick>
 8006904:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8006906:	bf00      	nop
 8006908:	4b18      	ldr	r3, [pc, #96]	@ (800696c <SD_write+0xa8>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d108      	bne.n	8006922 <SD_write+0x5e>
 8006910:	f7fb f99a 	bl	8001c48 <HAL_GetTick>
 8006914:	4602      	mov	r2, r0
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	f247 522f 	movw	r2, #29999	@ 0x752f
 800691e:	4293      	cmp	r3, r2
 8006920:	d9f2      	bls.n	8006908 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8006922:	4b12      	ldr	r3, [pc, #72]	@ (800696c <SD_write+0xa8>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d102      	bne.n	8006930 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	75fb      	strb	r3, [r7, #23]
 800692e:	e017      	b.n	8006960 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8006930:	4b0e      	ldr	r3, [pc, #56]	@ (800696c <SD_write+0xa8>)
 8006932:	2200      	movs	r2, #0
 8006934:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8006936:	f7fb f987 	bl	8001c48 <HAL_GetTick>
 800693a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800693c:	e007      	b.n	800694e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800693e:	f7ff fe99 	bl	8006674 <BSP_SD_GetCardState>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d102      	bne.n	800694e <SD_write+0x8a>
          {
            res = RES_OK;
 8006948:	2300      	movs	r3, #0
 800694a:	75fb      	strb	r3, [r7, #23]
            break;
 800694c:	e008      	b.n	8006960 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800694e:	f7fb f97b 	bl	8001c48 <HAL_GetTick>
 8006952:	4602      	mov	r2, r0
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	f247 522f 	movw	r2, #29999	@ 0x752f
 800695c:	4293      	cmp	r3, r2
 800695e:	d9ee      	bls.n	800693e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8006960:	7dfb      	ldrb	r3, [r7, #23]
}
 8006962:	4618      	mov	r0, r3
 8006964:	3718      	adds	r7, #24
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	2000035c 	.word	0x2000035c

08006970 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b08c      	sub	sp, #48	@ 0x30
 8006974:	af00      	add	r7, sp, #0
 8006976:	4603      	mov	r3, r0
 8006978:	603a      	str	r2, [r7, #0]
 800697a:	71fb      	strb	r3, [r7, #7]
 800697c:	460b      	mov	r3, r1
 800697e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006986:	4b25      	ldr	r3, [pc, #148]	@ (8006a1c <SD_ioctl+0xac>)
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	b2db      	uxtb	r3, r3
 800698c:	f003 0301 	and.w	r3, r3, #1
 8006990:	2b00      	cmp	r3, #0
 8006992:	d001      	beq.n	8006998 <SD_ioctl+0x28>
 8006994:	2303      	movs	r3, #3
 8006996:	e03c      	b.n	8006a12 <SD_ioctl+0xa2>

  switch (cmd)
 8006998:	79bb      	ldrb	r3, [r7, #6]
 800699a:	2b03      	cmp	r3, #3
 800699c:	d834      	bhi.n	8006a08 <SD_ioctl+0x98>
 800699e:	a201      	add	r2, pc, #4	@ (adr r2, 80069a4 <SD_ioctl+0x34>)
 80069a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a4:	080069b5 	.word	0x080069b5
 80069a8:	080069bd 	.word	0x080069bd
 80069ac:	080069d5 	.word	0x080069d5
 80069b0:	080069ef 	.word	0x080069ef
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80069b4:	2300      	movs	r3, #0
 80069b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80069ba:	e028      	b.n	8006a0e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80069bc:	f107 030c 	add.w	r3, r7, #12
 80069c0:	4618      	mov	r0, r3
 80069c2:	f7ff fe67 	bl	8006694 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80069c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80069cc:	2300      	movs	r3, #0
 80069ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80069d2:	e01c      	b.n	8006a0e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80069d4:	f107 030c 	add.w	r3, r7, #12
 80069d8:	4618      	mov	r0, r3
 80069da:	f7ff fe5b 	bl	8006694 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80069de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80069e6:	2300      	movs	r3, #0
 80069e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80069ec:	e00f      	b.n	8006a0e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80069ee:	f107 030c 	add.w	r3, r7, #12
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7ff fe4e 	bl	8006694 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80069f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069fa:	0a5a      	lsrs	r2, r3, #9
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006a00:	2300      	movs	r3, #0
 8006a02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006a06:	e002      	b.n	8006a0e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006a08:	2304      	movs	r3, #4
 8006a0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8006a0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3730      	adds	r7, #48	@ 0x30
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	2000000d 	.word	0x2000000d

08006a20 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8006a20:	b480      	push	{r7}
 8006a22:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8006a24:	4b03      	ldr	r3, [pc, #12]	@ (8006a34 <BSP_SD_WriteCpltCallback+0x14>)
 8006a26:	2201      	movs	r2, #1
 8006a28:	601a      	str	r2, [r3, #0]
}
 8006a2a:	bf00      	nop
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr
 8006a34:	2000035c 	.word	0x2000035c

08006a38 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8006a3c:	4b03      	ldr	r3, [pc, #12]	@ (8006a4c <BSP_SD_ReadCpltCallback+0x14>)
 8006a3e:	2201      	movs	r2, #1
 8006a40:	601a      	str	r2, [r3, #0]
}
 8006a42:	bf00      	nop
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr
 8006a4c:	20000360 	.word	0x20000360

08006a50 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b087      	sub	sp, #28
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006a62:	2300      	movs	r3, #0
 8006a64:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006a66:	4b1f      	ldr	r3, [pc, #124]	@ (8006ae4 <FATFS_LinkDriverEx+0x94>)
 8006a68:	7a5b      	ldrb	r3, [r3, #9]
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d131      	bne.n	8006ad4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006a70:	4b1c      	ldr	r3, [pc, #112]	@ (8006ae4 <FATFS_LinkDriverEx+0x94>)
 8006a72:	7a5b      	ldrb	r3, [r3, #9]
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	461a      	mov	r2, r3
 8006a78:	4b1a      	ldr	r3, [pc, #104]	@ (8006ae4 <FATFS_LinkDriverEx+0x94>)
 8006a7a:	2100      	movs	r1, #0
 8006a7c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006a7e:	4b19      	ldr	r3, [pc, #100]	@ (8006ae4 <FATFS_LinkDriverEx+0x94>)
 8006a80:	7a5b      	ldrb	r3, [r3, #9]
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	4a17      	ldr	r2, [pc, #92]	@ (8006ae4 <FATFS_LinkDriverEx+0x94>)
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	4413      	add	r3, r2
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006a8e:	4b15      	ldr	r3, [pc, #84]	@ (8006ae4 <FATFS_LinkDriverEx+0x94>)
 8006a90:	7a5b      	ldrb	r3, [r3, #9]
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	461a      	mov	r2, r3
 8006a96:	4b13      	ldr	r3, [pc, #76]	@ (8006ae4 <FATFS_LinkDriverEx+0x94>)
 8006a98:	4413      	add	r3, r2
 8006a9a:	79fa      	ldrb	r2, [r7, #7]
 8006a9c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006a9e:	4b11      	ldr	r3, [pc, #68]	@ (8006ae4 <FATFS_LinkDriverEx+0x94>)
 8006aa0:	7a5b      	ldrb	r3, [r3, #9]
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	1c5a      	adds	r2, r3, #1
 8006aa6:	b2d1      	uxtb	r1, r2
 8006aa8:	4a0e      	ldr	r2, [pc, #56]	@ (8006ae4 <FATFS_LinkDriverEx+0x94>)
 8006aaa:	7251      	strb	r1, [r2, #9]
 8006aac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006aae:	7dbb      	ldrb	r3, [r7, #22]
 8006ab0:	3330      	adds	r3, #48	@ 0x30
 8006ab2:	b2da      	uxtb	r2, r3
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	3301      	adds	r3, #1
 8006abc:	223a      	movs	r2, #58	@ 0x3a
 8006abe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	3302      	adds	r3, #2
 8006ac4:	222f      	movs	r2, #47	@ 0x2f
 8006ac6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	3303      	adds	r3, #3
 8006acc:	2200      	movs	r2, #0
 8006ace:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	371c      	adds	r7, #28
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	20000364 	.word	0x20000364

08006ae8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006af2:	2200      	movs	r2, #0
 8006af4:	6839      	ldr	r1, [r7, #0]
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f7ff ffaa 	bl	8006a50 <FATFS_LinkDriverEx>
 8006afc:	4603      	mov	r3, r0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3708      	adds	r7, #8
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <memset>:
 8006b06:	4402      	add	r2, r0
 8006b08:	4603      	mov	r3, r0
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d100      	bne.n	8006b10 <memset+0xa>
 8006b0e:	4770      	bx	lr
 8006b10:	f803 1b01 	strb.w	r1, [r3], #1
 8006b14:	e7f9      	b.n	8006b0a <memset+0x4>
	...

08006b18 <__libc_init_array>:
 8006b18:	b570      	push	{r4, r5, r6, lr}
 8006b1a:	4d0d      	ldr	r5, [pc, #52]	@ (8006b50 <__libc_init_array+0x38>)
 8006b1c:	4c0d      	ldr	r4, [pc, #52]	@ (8006b54 <__libc_init_array+0x3c>)
 8006b1e:	1b64      	subs	r4, r4, r5
 8006b20:	10a4      	asrs	r4, r4, #2
 8006b22:	2600      	movs	r6, #0
 8006b24:	42a6      	cmp	r6, r4
 8006b26:	d109      	bne.n	8006b3c <__libc_init_array+0x24>
 8006b28:	4d0b      	ldr	r5, [pc, #44]	@ (8006b58 <__libc_init_array+0x40>)
 8006b2a:	4c0c      	ldr	r4, [pc, #48]	@ (8006b5c <__libc_init_array+0x44>)
 8006b2c:	f000 f818 	bl	8006b60 <_init>
 8006b30:	1b64      	subs	r4, r4, r5
 8006b32:	10a4      	asrs	r4, r4, #2
 8006b34:	2600      	movs	r6, #0
 8006b36:	42a6      	cmp	r6, r4
 8006b38:	d105      	bne.n	8006b46 <__libc_init_array+0x2e>
 8006b3a:	bd70      	pop	{r4, r5, r6, pc}
 8006b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b40:	4798      	blx	r3
 8006b42:	3601      	adds	r6, #1
 8006b44:	e7ee      	b.n	8006b24 <__libc_init_array+0xc>
 8006b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b4a:	4798      	blx	r3
 8006b4c:	3601      	adds	r6, #1
 8006b4e:	e7f2      	b.n	8006b36 <__libc_init_array+0x1e>
 8006b50:	08006bac 	.word	0x08006bac
 8006b54:	08006bac 	.word	0x08006bac
 8006b58:	08006bac 	.word	0x08006bac
 8006b5c:	08006bb0 	.word	0x08006bb0

08006b60 <_init>:
 8006b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b62:	bf00      	nop
 8006b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b66:	bc08      	pop	{r3}
 8006b68:	469e      	mov	lr, r3
 8006b6a:	4770      	bx	lr

08006b6c <_fini>:
 8006b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b6e:	bf00      	nop
 8006b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b72:	bc08      	pop	{r3}
 8006b74:	469e      	mov	lr, r3
 8006b76:	4770      	bx	lr
