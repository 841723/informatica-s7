
SdImageDisplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000964c  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  08009814  08009814  0000a814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ce4  08009ce4  0000b05c  2**0
                  CONTENTS
  4 .ARM          00000008  08009ce4  08009ce4  0000ace4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009cec  08009cec  0000b05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cec  08009cec  0000acec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009cf0  08009cf0  0000acf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08009cf4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000878  2000005c  08009d50  0000b05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  200008d4  08009d50  0000b8d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f1a  00000000  00000000  0000b08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032bc  00000000  00000000  0001dfa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  00021268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cc5  00000000  00000000  00022360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004723  00000000  00000000  00023025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000185d6  00000000  00000000  00027748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f093a  00000000  00000000  0003fd1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00130658  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004818  00000000  00000000  0013069c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00134eb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000005c 	.word	0x2000005c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080097fc 	.word	0x080097fc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000060 	.word	0x20000060
 8000204:	080097fc 	.word	0x080097fc

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b09c      	sub	sp, #112	@ 0x70
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fe:	f001 f994 	bl	800182a <HAL_Init>
  /* USER CODE BEGIN Init */
  uint8_t buff[100];
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000502:	f000 f853 	bl	80005ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000506:	f000 fa33 	bl	8000970 <MX_GPIO_Init>
  MX_DMA_Init();
 800050a:	f000 f9bd 	bl	8000888 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 800050e:	f000 f999 	bl	8000844 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000512:	f005 fe07 	bl	8006124 <MX_FATFS_Init>
  MX_DMA2D_Init();
 8000516:	f000 f8b1 	bl	800067c <MX_DMA2D_Init>
  MX_LTDC_Init();
 800051a:	f000 f8e1 	bl	80006e0 <MX_LTDC_Init>
  MX_FMC_Init();
 800051e:	f000 f9d9 	bl	80008d4 <MX_FMC_Init>
//  }
//
//  memset(image, 0xFFFF, sizeof(image)); // Imagen blanca
//  Display_Image_DMA2D(image, 240, 320);

  FRESULT res = f_mount(&SDFatFS, SDPath, 0);
 8000522:	2200      	movs	r2, #0
 8000524:	491c      	ldr	r1, [pc, #112]	@ (8000598 <main+0xa0>)
 8000526:	481d      	ldr	r0, [pc, #116]	@ (800059c <main+0xa4>)
 8000528:	f008 f976 	bl	8008818 <f_mount>
 800052c:	4603      	mov	r3, r0
 800052e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  if (res == FR_OK)
 8000532:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000536:	2b00      	cmp	r3, #0
 8000538:	d12b      	bne.n	8000592 <main+0x9a>
  {
    res = f_open(&SDFile, "test.txt", FA_WRITE | FA_CREATE_ALWAYS);
 800053a:	220a      	movs	r2, #10
 800053c:	4918      	ldr	r1, [pc, #96]	@ (80005a0 <main+0xa8>)
 800053e:	4819      	ldr	r0, [pc, #100]	@ (80005a4 <main+0xac>)
 8000540:	f008 f9b0 	bl	80088a4 <f_open>
 8000544:	4603      	mov	r3, r0
 8000546:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    if (res == FR_OK)
 800054a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800054e:	2b00      	cmp	r3, #0
 8000550:	d108      	bne.n	8000564 <main+0x6c>
    {
      UINT byteswritten;
      f_write(&SDFile, "Hello World!\r\n", 14, (void *)&byteswritten);
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	220e      	movs	r2, #14
 8000556:	4914      	ldr	r1, [pc, #80]	@ (80005a8 <main+0xb0>)
 8000558:	4812      	ldr	r0, [pc, #72]	@ (80005a4 <main+0xac>)
 800055a:	f008 fcac 	bl	8008eb6 <f_write>
      f_close(&SDFile);
 800055e:	4811      	ldr	r0, [pc, #68]	@ (80005a4 <main+0xac>)
 8000560:	f008 fe9c 	bl	800929c <f_close>
    }

    res = f_open(&SDFile, "test.txt", FA_READ);
 8000564:	2201      	movs	r2, #1
 8000566:	490e      	ldr	r1, [pc, #56]	@ (80005a0 <main+0xa8>)
 8000568:	480e      	ldr	r0, [pc, #56]	@ (80005a4 <main+0xac>)
 800056a:	f008 f99b 	bl	80088a4 <f_open>
 800056e:	4603      	mov	r3, r0
 8000570:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    if (res == FR_OK)
 8000574:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000578:	2b00      	cmp	r3, #0
 800057a:	d10a      	bne.n	8000592 <main+0x9a>
    {
      UINT bytesread;
      f_read(&SDFile, (void *)buff, sizeof(buff), (void *)&bytesread);
 800057c:	463b      	mov	r3, r7
 800057e:	f107 0108 	add.w	r1, r7, #8
 8000582:	2264      	movs	r2, #100	@ 0x64
 8000584:	4807      	ldr	r0, [pc, #28]	@ (80005a4 <main+0xac>)
 8000586:	f008 fb57 	bl	8008c38 <f_read>
      f_close(&SDFile);
 800058a:	4806      	ldr	r0, [pc, #24]	@ (80005a4 <main+0xac>)
 800058c:	f008 fe86 	bl	800929c <f_close>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000590:	bf00      	nop
 8000592:	bf00      	nop
 8000594:	e7fd      	b.n	8000592 <main+0x9a>
 8000596:	bf00      	nop
 8000598:	200002e8 	.word	0x200002e8
 800059c:	200002ec 	.word	0x200002ec
 80005a0:	08009814 	.word	0x08009814
 80005a4:	20000520 	.word	0x20000520
 80005a8:	08009820 	.word	0x08009820

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b094      	sub	sp, #80	@ 0x50
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	f107 0320 	add.w	r3, r7, #32
 80005b6:	2230      	movs	r2, #48	@ 0x30
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f009 f890 	bl	80096e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d0:	4b28      	ldr	r3, [pc, #160]	@ (8000674 <SystemClock_Config+0xc8>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d4:	4a27      	ldr	r2, [pc, #156]	@ (8000674 <SystemClock_Config+0xc8>)
 80005d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005da:	6413      	str	r3, [r2, #64]	@ 0x40
 80005dc:	4b25      	ldr	r3, [pc, #148]	@ (8000674 <SystemClock_Config+0xc8>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005e4:	60bb      	str	r3, [r7, #8]
 80005e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005e8:	4b23      	ldr	r3, [pc, #140]	@ (8000678 <SystemClock_Config+0xcc>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005f0:	4a21      	ldr	r2, [pc, #132]	@ (8000678 <SystemClock_Config+0xcc>)
 80005f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005f6:	6013      	str	r3, [r2, #0]
 80005f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000678 <SystemClock_Config+0xcc>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000604:	2302      	movs	r3, #2
 8000606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000608:	2301      	movs	r3, #1
 800060a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800060c:	2310      	movs	r3, #16
 800060e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000610:	2302      	movs	r3, #2
 8000612:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000614:	2300      	movs	r3, #0
 8000616:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000618:	2308      	movs	r3, #8
 800061a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800061c:	2332      	movs	r3, #50	@ 0x32
 800061e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000620:	2302      	movs	r3, #2
 8000622:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000624:	2302      	movs	r3, #2
 8000626:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 0320 	add.w	r3, r7, #32
 800062c:	4618      	mov	r0, r3
 800062e:	f002 fb97 	bl	8002d60 <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000638:	f000 fd50 	bl	80010dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000640:	2302      	movs	r3, #2
 8000642:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000648:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800064c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800064e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000652:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2101      	movs	r1, #1
 800065a:	4618      	mov	r0, r3
 800065c:	f002 fe24 	bl	80032a8 <HAL_RCC_ClockConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000666:	f000 fd39 	bl	80010dc <Error_Handler>
  }
}
 800066a:	bf00      	nop
 800066c:	3750      	adds	r7, #80	@ 0x50
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40023800 	.word	0x40023800
 8000678:	40007000 	.word	0x40007000

0800067c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000680:	4b15      	ldr	r3, [pc, #84]	@ (80006d8 <MX_DMA2D_Init+0x5c>)
 8000682:	4a16      	ldr	r2, [pc, #88]	@ (80006dc <MX_DMA2D_Init+0x60>)
 8000684:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000686:	4b14      	ldr	r3, [pc, #80]	@ (80006d8 <MX_DMA2D_Init+0x5c>)
 8000688:	2200      	movs	r2, #0
 800068a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 800068c:	4b12      	ldr	r3, [pc, #72]	@ (80006d8 <MX_DMA2D_Init+0x5c>)
 800068e:	2202      	movs	r2, #2
 8000690:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000692:	4b11      	ldr	r3, [pc, #68]	@ (80006d8 <MX_DMA2D_Init+0x5c>)
 8000694:	2200      	movs	r2, #0
 8000696:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000698:	4b0f      	ldr	r3, [pc, #60]	@ (80006d8 <MX_DMA2D_Init+0x5c>)
 800069a:	2200      	movs	r2, #0
 800069c:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 800069e:	4b0e      	ldr	r3, [pc, #56]	@ (80006d8 <MX_DMA2D_Init+0x5c>)
 80006a0:	2202      	movs	r2, #2
 80006a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	@ (80006d8 <MX_DMA2D_Init+0x5c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	@ (80006d8 <MX_DMA2D_Init+0x5c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80006b0:	4809      	ldr	r0, [pc, #36]	@ (80006d8 <MX_DMA2D_Init+0x5c>)
 80006b2:	f001 fdf3 	bl	800229c <HAL_DMA2D_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80006bc:	f000 fd0e 	bl	80010dc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80006c0:	2101      	movs	r1, #1
 80006c2:	4805      	ldr	r0, [pc, #20]	@ (80006d8 <MX_DMA2D_Init+0x5c>)
 80006c4:	f001 fe34 	bl	8002330 <HAL_DMA2D_ConfigLayer>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80006ce:	f000 fd05 	bl	80010dc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000078 	.word	0x20000078
 80006dc:	4002b000 	.word	0x4002b000

080006e0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b09a      	sub	sp, #104	@ 0x68
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80006e6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80006ea:	2234      	movs	r2, #52	@ 0x34
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f008 fff6 	bl	80096e0 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80006f4:	463b      	mov	r3, r7
 80006f6:	2234      	movs	r2, #52	@ 0x34
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f008 fff0 	bl	80096e0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000700:	4b4e      	ldr	r3, [pc, #312]	@ (800083c <MX_LTDC_Init+0x15c>)
 8000702:	4a4f      	ldr	r2, [pc, #316]	@ (8000840 <MX_LTDC_Init+0x160>)
 8000704:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000706:	4b4d      	ldr	r3, [pc, #308]	@ (800083c <MX_LTDC_Init+0x15c>)
 8000708:	2200      	movs	r2, #0
 800070a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800070c:	4b4b      	ldr	r3, [pc, #300]	@ (800083c <MX_LTDC_Init+0x15c>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000712:	4b4a      	ldr	r3, [pc, #296]	@ (800083c <MX_LTDC_Init+0x15c>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000718:	4b48      	ldr	r3, [pc, #288]	@ (800083c <MX_LTDC_Init+0x15c>)
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800071e:	4b47      	ldr	r3, [pc, #284]	@ (800083c <MX_LTDC_Init+0x15c>)
 8000720:	2207      	movs	r2, #7
 8000722:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000724:	4b45      	ldr	r3, [pc, #276]	@ (800083c <MX_LTDC_Init+0x15c>)
 8000726:	2203      	movs	r2, #3
 8000728:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800072a:	4b44      	ldr	r3, [pc, #272]	@ (800083c <MX_LTDC_Init+0x15c>)
 800072c:	220e      	movs	r2, #14
 800072e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000730:	4b42      	ldr	r3, [pc, #264]	@ (800083c <MX_LTDC_Init+0x15c>)
 8000732:	2205      	movs	r2, #5
 8000734:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8000736:	4b41      	ldr	r3, [pc, #260]	@ (800083c <MX_LTDC_Init+0x15c>)
 8000738:	f240 228e 	movw	r2, #654	@ 0x28e
 800073c:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800073e:	4b3f      	ldr	r3, [pc, #252]	@ (800083c <MX_LTDC_Init+0x15c>)
 8000740:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8000744:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 8000746:	4b3d      	ldr	r3, [pc, #244]	@ (800083c <MX_LTDC_Init+0x15c>)
 8000748:	f44f 7225 	mov.w	r2, #660	@ 0x294
 800074c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 800074e:	4b3b      	ldr	r3, [pc, #236]	@ (800083c <MX_LTDC_Init+0x15c>)
 8000750:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8000754:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000756:	4b39      	ldr	r3, [pc, #228]	@ (800083c <MX_LTDC_Init+0x15c>)
 8000758:	2200      	movs	r2, #0
 800075a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 800075e:	4b37      	ldr	r3, [pc, #220]	@ (800083c <MX_LTDC_Init+0x15c>)
 8000760:	2200      	movs	r2, #0
 8000762:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000766:	4b35      	ldr	r3, [pc, #212]	@ (800083c <MX_LTDC_Init+0x15c>)
 8000768:	2200      	movs	r2, #0
 800076a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800076e:	4833      	ldr	r0, [pc, #204]	@ (800083c <MX_LTDC_Init+0x15c>)
 8000770:	f002 f84e 	bl	8002810 <HAL_LTDC_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800077a:	f000 fcaf 	bl	80010dc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800078e:	2300      	movs	r3, #0
 8000790:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800079a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800079e:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80007a0:	2305      	movs	r3, #5
 80007a2:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80007c2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80007c6:	2200      	movs	r2, #0
 80007c8:	4619      	mov	r1, r3
 80007ca:	481c      	ldr	r0, [pc, #112]	@ (800083c <MX_LTDC_Init+0x15c>)
 80007cc:	f002 f8f0 	bl	80029b0 <HAL_LTDC_ConfigLayer>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80007d6:	f000 fc81 	bl	80010dc <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80007f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007fa:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80007fc:	2305      	movs	r3, #5
 80007fe:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800081e:	463b      	mov	r3, r7
 8000820:	2201      	movs	r2, #1
 8000822:	4619      	mov	r1, r3
 8000824:	4805      	ldr	r0, [pc, #20]	@ (800083c <MX_LTDC_Init+0x15c>)
 8000826:	f002 f8c3 	bl	80029b0 <HAL_LTDC_ConfigLayer>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8000830:	f000 fc54 	bl	80010dc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	3768      	adds	r7, #104	@ 0x68
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	200000b8 	.word	0x200000b8
 8000840:	40016800 	.word	0x40016800

08000844 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000848:	4b0d      	ldr	r3, [pc, #52]	@ (8000880 <MX_SDMMC1_SD_Init+0x3c>)
 800084a:	4a0e      	ldr	r2, [pc, #56]	@ (8000884 <MX_SDMMC1_SD_Init+0x40>)
 800084c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800084e:	4b0c      	ldr	r3, [pc, #48]	@ (8000880 <MX_SDMMC1_SD_Init+0x3c>)
 8000850:	2200      	movs	r2, #0
 8000852:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000854:	4b0a      	ldr	r3, [pc, #40]	@ (8000880 <MX_SDMMC1_SD_Init+0x3c>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800085a:	4b09      	ldr	r3, [pc, #36]	@ (8000880 <MX_SDMMC1_SD_Init+0x3c>)
 800085c:	2200      	movs	r2, #0
 800085e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000860:	4b07      	ldr	r3, [pc, #28]	@ (8000880 <MX_SDMMC1_SD_Init+0x3c>)
 8000862:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000866:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000868:	4b05      	ldr	r3, [pc, #20]	@ (8000880 <MX_SDMMC1_SD_Init+0x3c>)
 800086a:	2200      	movs	r2, #0
 800086c:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800086e:	4b04      	ldr	r3, [pc, #16]	@ (8000880 <MX_SDMMC1_SD_Init+0x3c>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	20000160 	.word	0x20000160
 8000884:	40012c00 	.word	0x40012c00

08000888 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800088e:	4b10      	ldr	r3, [pc, #64]	@ (80008d0 <MX_DMA_Init+0x48>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	4a0f      	ldr	r2, [pc, #60]	@ (80008d0 <MX_DMA_Init+0x48>)
 8000894:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000898:	6313      	str	r3, [r2, #48]	@ 0x30
 800089a:	4b0d      	ldr	r3, [pc, #52]	@ (80008d0 <MX_DMA_Init+0x48>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2100      	movs	r1, #0
 80008aa:	203b      	movs	r0, #59	@ 0x3b
 80008ac:	f001 f919 	bl	8001ae2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80008b0:	203b      	movs	r0, #59	@ 0x3b
 80008b2:	f001 f932 	bl	8001b1a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2100      	movs	r1, #0
 80008ba:	2045      	movs	r0, #69	@ 0x45
 80008bc:	f001 f911 	bl	8001ae2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80008c0:	2045      	movs	r0, #69	@ 0x45
 80008c2:	f001 f92a 	bl	8001b1a <HAL_NVIC_EnableIRQ>

}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40023800 	.word	0x40023800

080008d4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b088      	sub	sp, #32
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]
 80008e8:	615a      	str	r2, [r3, #20]
 80008ea:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80008ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000968 <MX_FMC_Init+0x94>)
 80008ee:	4a1f      	ldr	r2, [pc, #124]	@ (800096c <MX_FMC_Init+0x98>)
 80008f0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80008f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000968 <MX_FMC_Init+0x94>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80008f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000968 <MX_FMC_Init+0x94>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80008fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000968 <MX_FMC_Init+0x94>)
 8000900:	2204      	movs	r2, #4
 8000902:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000904:	4b18      	ldr	r3, [pc, #96]	@ (8000968 <MX_FMC_Init+0x94>)
 8000906:	2210      	movs	r2, #16
 8000908:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800090a:	4b17      	ldr	r3, [pc, #92]	@ (8000968 <MX_FMC_Init+0x94>)
 800090c:	2240      	movs	r2, #64	@ 0x40
 800090e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000910:	4b15      	ldr	r3, [pc, #84]	@ (8000968 <MX_FMC_Init+0x94>)
 8000912:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000916:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000918:	4b13      	ldr	r3, [pc, #76]	@ (8000968 <MX_FMC_Init+0x94>)
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 800091e:	4b12      	ldr	r3, [pc, #72]	@ (8000968 <MX_FMC_Init+0x94>)
 8000920:	2200      	movs	r2, #0
 8000922:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000924:	4b10      	ldr	r3, [pc, #64]	@ (8000968 <MX_FMC_Init+0x94>)
 8000926:	2200      	movs	r2, #0
 8000928:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800092a:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <MX_FMC_Init+0x94>)
 800092c:	2200      	movs	r2, #0
 800092e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000930:	2302      	movs	r3, #2
 8000932:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000934:	2307      	movs	r3, #7
 8000936:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000938:	2304      	movs	r3, #4
 800093a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800093c:	2307      	movs	r3, #7
 800093e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000940:	2303      	movs	r3, #3
 8000942:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000944:	2302      	movs	r3, #2
 8000946:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000948:	2302      	movs	r3, #2
 800094a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	4619      	mov	r1, r3
 8000950:	4805      	ldr	r0, [pc, #20]	@ (8000968 <MX_FMC_Init+0x94>)
 8000952:	f004 fd76 	bl	8005442 <HAL_SDRAM_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_FMC_Init+0x8c>
  {
    Error_Handler( );
 800095c:	f000 fbbe 	bl	80010dc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000960:	bf00      	nop
 8000962:	3720      	adds	r7, #32
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	200002a4 	.word	0x200002a4
 800096c:	a0000140 	.word	0xa0000140

08000970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b090      	sub	sp, #64	@ 0x40
 8000974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000976:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000986:	4bad      	ldr	r3, [pc, #692]	@ (8000c3c <MX_GPIO_Init+0x2cc>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	4aac      	ldr	r2, [pc, #688]	@ (8000c3c <MX_GPIO_Init+0x2cc>)
 800098c:	f043 0310 	orr.w	r3, r3, #16
 8000990:	6313      	str	r3, [r2, #48]	@ 0x30
 8000992:	4baa      	ldr	r3, [pc, #680]	@ (8000c3c <MX_GPIO_Init+0x2cc>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	f003 0310 	and.w	r3, r3, #16
 800099a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800099c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800099e:	4ba7      	ldr	r3, [pc, #668]	@ (8000c3c <MX_GPIO_Init+0x2cc>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	4aa6      	ldr	r2, [pc, #664]	@ (8000c3c <MX_GPIO_Init+0x2cc>)
 80009a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009aa:	4ba4      	ldr	r3, [pc, #656]	@ (8000c3c <MX_GPIO_Init+0x2cc>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80009b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b6:	4ba1      	ldr	r3, [pc, #644]	@ (8000c3c <MX_GPIO_Init+0x2cc>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	4aa0      	ldr	r2, [pc, #640]	@ (8000c3c <MX_GPIO_Init+0x2cc>)
 80009bc:	f043 0302 	orr.w	r3, r3, #2
 80009c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c2:	4b9e      	ldr	r3, [pc, #632]	@ (8000c3c <MX_GPIO_Init+0x2cc>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	f003 0302 	and.w	r3, r3, #2
 80009ca:	623b      	str	r3, [r7, #32]
 80009cc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ce:	4b9b      	ldr	r3, [pc, #620]	@ (8000c3c <MX_GPIO_Init+0x2cc>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	4a9a      	ldr	r2, [pc, #616]	@ (8000c3c <MX_GPIO_Init+0x2cc>)
 80009d4:	f043 0308 	orr.w	r3, r3, #8
 80009d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009da:	4b98      	ldr	r3, [pc, #608]	@ (8000c3c <MX_GPIO_Init+0x2cc>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	f003 0308 	and.w	r3, r3, #8
 80009e2:	61fb      	str	r3, [r7, #28]
 80009e4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e6:	4b95      	ldr	r3, [pc, #596]	@ (8000c3c <MX_GPIO_Init+0x2cc>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	4a94      	ldr	r2, [pc, #592]	@ (8000c3c <MX_GPIO_Init+0x2cc>)
 80009ec:	f043 0304 	orr.w	r3, r3, #4
 80009f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f2:	4b92      	ldr	r3, [pc, #584]	@ (8000c3c <MX_GPIO_Init+0x2cc>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	f003 0304 	and.w	r3, r3, #4
 80009fa:	61bb      	str	r3, [r7, #24]
 80009fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	4b8f      	ldr	r3, [pc, #572]	@ (8000c3c <MX_GPIO_Init+0x2cc>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	4a8e      	ldr	r2, [pc, #568]	@ (8000c3c <MX_GPIO_Init+0x2cc>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0a:	4b8c      	ldr	r3, [pc, #560]	@ (8000c3c <MX_GPIO_Init+0x2cc>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	617b      	str	r3, [r7, #20]
 8000a14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000a16:	4b89      	ldr	r3, [pc, #548]	@ (8000c3c <MX_GPIO_Init+0x2cc>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	4a88      	ldr	r2, [pc, #544]	@ (8000c3c <MX_GPIO_Init+0x2cc>)
 8000a1c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a22:	4b86      	ldr	r3, [pc, #536]	@ (8000c3c <MX_GPIO_Init+0x2cc>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a2e:	4b83      	ldr	r3, [pc, #524]	@ (8000c3c <MX_GPIO_Init+0x2cc>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	4a82      	ldr	r2, [pc, #520]	@ (8000c3c <MX_GPIO_Init+0x2cc>)
 8000a34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3a:	4b80      	ldr	r3, [pc, #512]	@ (8000c3c <MX_GPIO_Init+0x2cc>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000a46:	4b7d      	ldr	r3, [pc, #500]	@ (8000c3c <MX_GPIO_Init+0x2cc>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	4a7c      	ldr	r2, [pc, #496]	@ (8000c3c <MX_GPIO_Init+0x2cc>)
 8000a4c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a52:	4b7a      	ldr	r3, [pc, #488]	@ (8000c3c <MX_GPIO_Init+0x2cc>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a5e:	4b77      	ldr	r3, [pc, #476]	@ (8000c3c <MX_GPIO_Init+0x2cc>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	4a76      	ldr	r2, [pc, #472]	@ (8000c3c <MX_GPIO_Init+0x2cc>)
 8000a64:	f043 0320 	orr.w	r3, r3, #32
 8000a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6a:	4b74      	ldr	r3, [pc, #464]	@ (8000c3c <MX_GPIO_Init+0x2cc>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	f003 0320 	and.w	r3, r3, #32
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a76:	4b71      	ldr	r3, [pc, #452]	@ (8000c3c <MX_GPIO_Init+0x2cc>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	4a70      	ldr	r2, [pc, #448]	@ (8000c3c <MX_GPIO_Init+0x2cc>)
 8000a7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a82:	4b6e      	ldr	r3, [pc, #440]	@ (8000c3c <MX_GPIO_Init+0x2cc>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	2120      	movs	r1, #32
 8000a92:	486b      	ldr	r0, [pc, #428]	@ (8000c40 <MX_GPIO_Init+0x2d0>)
 8000a94:	f001 fea2 	bl	80027dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f241 010c 	movw	r1, #4108	@ 0x100c
 8000a9e:	4869      	ldr	r0, [pc, #420]	@ (8000c44 <MX_GPIO_Init+0x2d4>)
 8000aa0:	f001 fe9c 	bl	80027dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2108      	movs	r1, #8
 8000aa8:	4867      	ldr	r0, [pc, #412]	@ (8000c48 <MX_GPIO_Init+0x2d8>)
 8000aaa:	f001 fe97 	bl	80027dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ab4:	4865      	ldr	r0, [pc, #404]	@ (8000c4c <MX_GPIO_Init+0x2dc>)
 8000ab6:	f001 fe91 	bl	80027dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	21c8      	movs	r1, #200	@ 0xc8
 8000abe:	4864      	ldr	r0, [pc, #400]	@ (8000c50 <MX_GPIO_Init+0x2e0>)
 8000ac0:	f001 fe8c 	bl	80027dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000ac4:	2308      	movs	r3, #8
 8000ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	485f      	ldr	r0, [pc, #380]	@ (8000c54 <MX_GPIO_Init+0x2e4>)
 8000ad8:	f001 fcbc 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000adc:	2304      	movs	r3, #4
 8000ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000aec:	2309      	movs	r3, #9
 8000aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000af0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000af4:	4619      	mov	r1, r3
 8000af6:	4857      	ldr	r0, [pc, #348]	@ (8000c54 <MX_GPIO_Init+0x2e4>)
 8000af8:	f001 fcac 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000afc:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8000b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b02:	2302      	movs	r3, #2
 8000b04:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b0e:	230b      	movs	r3, #11
 8000b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b12:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b16:	4619      	mov	r1, r3
 8000b18:	484d      	ldr	r0, [pc, #308]	@ (8000c50 <MX_GPIO_Init+0x2e0>)
 8000b1a:	f001 fc9b 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000b1e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b24:	2312      	movs	r3, #18
 8000b26:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b30:	2304      	movs	r3, #4
 8000b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4847      	ldr	r0, [pc, #284]	@ (8000c58 <MX_GPIO_Init+0x2e8>)
 8000b3c:	f001 fc8a 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000b40:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8000b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000b52:	230a      	movs	r3, #10
 8000b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	483e      	ldr	r0, [pc, #248]	@ (8000c58 <MX_GPIO_Init+0x2e8>)
 8000b5e:	f001 fc79 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000b62:	2310      	movs	r3, #16
 8000b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b66:	2302      	movs	r3, #2
 8000b68:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b72:	2302      	movs	r3, #2
 8000b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000b76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4836      	ldr	r0, [pc, #216]	@ (8000c58 <MX_GPIO_Init+0x2e8>)
 8000b7e:	f001 fc69 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000b82:	2380      	movs	r3, #128	@ 0x80
 8000b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	2302      	movs	r3, #2
 8000b88:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000b92:	2308      	movs	r3, #8
 8000b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4828      	ldr	r0, [pc, #160]	@ (8000c40 <MX_GPIO_Init+0x2d0>)
 8000b9e:	f001 fc59 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000ba2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000bb8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4827      	ldr	r0, [pc, #156]	@ (8000c5c <MX_GPIO_Init+0x2ec>)
 8000bc0:	f001 fc48 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000bc4:	2360      	movs	r3, #96	@ 0x60
 8000bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000bd4:	230d      	movs	r3, #13
 8000bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bd8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bdc:	4619      	mov	r1, r3
 8000bde:	481d      	ldr	r0, [pc, #116]	@ (8000c54 <MX_GPIO_Init+0x2e4>)
 8000be0:	f001 fc38 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000be4:	2380      	movs	r3, #128	@ 0x80
 8000be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bf4:	2307      	movs	r3, #7
 8000bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000bf8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4816      	ldr	r0, [pc, #88]	@ (8000c58 <MX_GPIO_Init+0x2e8>)
 8000c00:	f001 fc28 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000c04:	2340      	movs	r3, #64	@ 0x40
 8000c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c10:	2303      	movs	r3, #3
 8000c12:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000c14:	230a      	movs	r3, #10
 8000c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000c18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	480e      	ldr	r0, [pc, #56]	@ (8000c58 <MX_GPIO_Init+0x2e8>)
 8000c20:	f001 fc18 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000c24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c36:	4619      	mov	r1, r3
 8000c38:	e012      	b.n	8000c60 <MX_GPIO_Init+0x2f0>
 8000c3a:	bf00      	nop
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40020c00 	.word	0x40020c00
 8000c44:	40022000 	.word	0x40022000
 8000c48:	40022800 	.word	0x40022800
 8000c4c:	40021c00 	.word	0x40021c00
 8000c50:	40021800 	.word	0x40021800
 8000c54:	40021000 	.word	0x40021000
 8000c58:	40020400 	.word	0x40020400
 8000c5c:	40020000 	.word	0x40020000
 8000c60:	48bc      	ldr	r0, [pc, #752]	@ (8000f54 <MX_GPIO_Init+0x5e4>)
 8000c62:	f001 fbf7 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000c66:	2340      	movs	r3, #64	@ 0x40
 8000c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c6a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000c6e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000c74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c78:	4619      	mov	r1, r3
 8000c7a:	48b7      	ldr	r0, [pc, #732]	@ (8000f58 <MX_GPIO_Init+0x5e8>)
 8000c7c:	f001 fbea 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000c80:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c92:	230a      	movs	r3, #10
 8000c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	48af      	ldr	r0, [pc, #700]	@ (8000f5c <MX_GPIO_Init+0x5ec>)
 8000c9e:	f001 fbd9 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000ca2:	23f0      	movs	r3, #240	@ 0xf0
 8000ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000cb2:	230a      	movs	r3, #10
 8000cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000cb6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cba:	4619      	mov	r1, r3
 8000cbc:	48a8      	ldr	r0, [pc, #672]	@ (8000f60 <MX_GPIO_Init+0x5f0>)
 8000cbe:	f001 fbc9 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000cc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000cd4:	230a      	movs	r3, #10
 8000cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000cd8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cdc:	4619      	mov	r1, r3
 8000cde:	48a1      	ldr	r0, [pc, #644]	@ (8000f64 <MX_GPIO_Init+0x5f4>)
 8000ce0:	f001 fbb8 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000ce4:	2320      	movs	r3, #32
 8000ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cf4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4897      	ldr	r0, [pc, #604]	@ (8000f58 <MX_GPIO_Init+0x5e8>)
 8000cfc:	f001 fbaa 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000d00:	2308      	movs	r3, #8
 8000d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d04:	2302      	movs	r3, #2
 8000d06:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d10:	230d      	movs	r3, #13
 8000d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000d14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d18:	4619      	mov	r1, r3
 8000d1a:	488f      	ldr	r0, [pc, #572]	@ (8000f58 <MX_GPIO_Init+0x5e8>)
 8000d1c:	f001 fb9a 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000d20:	f241 030c 	movw	r3, #4108	@ 0x100c
 8000d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d26:	2301      	movs	r3, #1
 8000d28:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d36:	4619      	mov	r1, r3
 8000d38:	4889      	ldr	r0, [pc, #548]	@ (8000f60 <MX_GPIO_Init+0x5f0>)
 8000d3a:	f001 fb8b 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000d3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d44:	2300      	movs	r3, #0
 8000d46:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000d4c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d50:	4619      	mov	r1, r3
 8000d52:	4885      	ldr	r0, [pc, #532]	@ (8000f68 <MX_GPIO_Init+0x5f8>)
 8000d54:	f001 fb7e 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000d58:	2308      	movs	r3, #8
 8000d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2300      	movs	r3, #0
 8000d66:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000d68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	487f      	ldr	r0, [pc, #508]	@ (8000f6c <MX_GPIO_Init+0x5fc>)
 8000d70:	f001 fb70 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000d74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d86:	230d      	movs	r3, #13
 8000d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000d8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4874      	ldr	r0, [pc, #464]	@ (8000f64 <MX_GPIO_Init+0x5f4>)
 8000d92:	f001 fb5f 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000d96:	2310      	movs	r3, #16
 8000d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000da2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000da6:	4619      	mov	r1, r3
 8000da8:	486b      	ldr	r0, [pc, #428]	@ (8000f58 <MX_GPIO_Init+0x5e8>)
 8000daa:	f001 fb53 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000dae:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db4:	2300      	movs	r3, #0
 8000db6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000dbc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	486b      	ldr	r0, [pc, #428]	@ (8000f70 <MX_GPIO_Init+0x600>)
 8000dc4:	f001 fb46 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dd8:	2305      	movs	r3, #5
 8000dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8000ddc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000de0:	4619      	mov	r1, r3
 8000de2:	485f      	ldr	r0, [pc, #380]	@ (8000f60 <MX_GPIO_Init+0x5f0>)
 8000de4:	f001 fb36 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000de8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dee:	2301      	movs	r3, #1
 8000df0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000dfa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dfe:	4619      	mov	r1, r3
 8000e00:	485b      	ldr	r0, [pc, #364]	@ (8000f70 <MX_GPIO_Init+0x600>)
 8000e02:	f001 fb27 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000e06:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8000e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e14:	2300      	movs	r3, #0
 8000e16:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e18:	230d      	movs	r3, #13
 8000e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e20:	4619      	mov	r1, r3
 8000e22:	4853      	ldr	r0, [pc, #332]	@ (8000f70 <MX_GPIO_Init+0x600>)
 8000e24:	f001 fb16 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	2300      	movs	r3, #0
 8000e36:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000e3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e40:	4619      	mov	r1, r3
 8000e42:	4847      	ldr	r0, [pc, #284]	@ (8000f60 <MX_GPIO_Init+0x5f0>)
 8000e44:	f001 fb06 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000e48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e5a:	2307      	movs	r3, #7
 8000e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000e5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e62:	4619      	mov	r1, r3
 8000e64:	483d      	ldr	r0, [pc, #244]	@ (8000f5c <MX_GPIO_Init+0x5ec>)
 8000e66:	f001 faf5 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000e6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000e80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e84:	4619      	mov	r1, r3
 8000e86:	4835      	ldr	r0, [pc, #212]	@ (8000f5c <MX_GPIO_Init+0x5ec>)
 8000e88:	f001 fae4 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000e8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e92:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000e96:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	482f      	ldr	r0, [pc, #188]	@ (8000f60 <MX_GPIO_Init+0x5f0>)
 8000ea4:	f001 fad6 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000ea8:	23c0      	movs	r3, #192	@ 0xc0
 8000eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000eb8:	2308      	movs	r3, #8
 8000eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ebc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4829      	ldr	r0, [pc, #164]	@ (8000f68 <MX_GPIO_Init+0x5f8>)
 8000ec4:	f001 fac6 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000ec8:	2310      	movs	r3, #16
 8000eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000ed8:	230a      	movs	r3, #10
 8000eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000edc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4823      	ldr	r0, [pc, #140]	@ (8000f70 <MX_GPIO_Init+0x600>)
 8000ee4:	f001 fab6 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000ee8:	23c8      	movs	r3, #200	@ 0xc8
 8000eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eec:	2301      	movs	r3, #1
 8000eee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ef8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000efc:	4619      	mov	r1, r3
 8000efe:	4819      	ldr	r0, [pc, #100]	@ (8000f64 <MX_GPIO_Init+0x5f4>)
 8000f00:	f001 faa8 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000f04:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8000f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f12:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f16:	4619      	mov	r1, r3
 8000f18:	4816      	ldr	r0, [pc, #88]	@ (8000f74 <MX_GPIO_Init+0x604>)
 8000f1a:	f001 fa9b 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000f1e:	2305      	movs	r3, #5
 8000f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f22:	2302      	movs	r3, #2
 8000f24:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000f2e:	230a      	movs	r3, #10
 8000f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f36:	4619      	mov	r1, r3
 8000f38:	480b      	ldr	r0, [pc, #44]	@ (8000f68 <MX_GPIO_Init+0x5f8>)
 8000f3a:	f001 fa8b 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f3e:	2332      	movs	r3, #50	@ 0x32
 8000f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f4e:	230b      	movs	r3, #11
 8000f50:	e012      	b.n	8000f78 <MX_GPIO_Init+0x608>
 8000f52:	bf00      	nop
 8000f54:	40022400 	.word	0x40022400
 8000f58:	40020c00 	.word	0x40020c00
 8000f5c:	40020000 	.word	0x40020000
 8000f60:	40022000 	.word	0x40022000
 8000f64:	40021800 	.word	0x40021800
 8000f68:	40020800 	.word	0x40020800
 8000f6c:	40022800 	.word	0x40022800
 8000f70:	40021c00 	.word	0x40021c00
 8000f74:	40021400 	.word	0x40021400
 8000f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4850      	ldr	r0, [pc, #320]	@ (80010c4 <MX_GPIO_Init+0x754>)
 8000f82:	f001 fa67 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f86:	2304      	movs	r3, #4
 8000f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f92:	2303      	movs	r3, #3
 8000f94:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000f96:	2309      	movs	r3, #9
 8000f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4849      	ldr	r0, [pc, #292]	@ (80010c8 <MX_GPIO_Init+0x758>)
 8000fa2:	f001 fa57 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000fa6:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	2302      	movs	r3, #2
 8000fae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000fb8:	2309      	movs	r3, #9
 8000fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fbc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4842      	ldr	r0, [pc, #264]	@ (80010cc <MX_GPIO_Init+0x75c>)
 8000fc4:	f001 fa46 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000fc8:	2304      	movs	r3, #4
 8000fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000fd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fd8:	4619      	mov	r1, r3
 8000fda:	483d      	ldr	r0, [pc, #244]	@ (80010d0 <MX_GPIO_Init+0x760>)
 8000fdc:	f001 fa3a 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000fe0:	2386      	movs	r3, #134	@ 0x86
 8000fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fec:	2303      	movs	r3, #3
 8000fee:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ff0:	230b      	movs	r3, #11
 8000ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4836      	ldr	r0, [pc, #216]	@ (80010d4 <MX_GPIO_Init+0x764>)
 8000ffc:	f001 fa2a 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001000:	2301      	movs	r3, #1
 8001002:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001004:	2303      	movs	r3, #3
 8001006:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800100c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001010:	4619      	mov	r1, r3
 8001012:	4830      	ldr	r0, [pc, #192]	@ (80010d4 <MX_GPIO_Init+0x764>)
 8001014:	f001 fa1e 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001018:	2350      	movs	r3, #80	@ 0x50
 800101a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	2300      	movs	r3, #0
 8001026:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001028:	230d      	movs	r3, #13
 800102a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001030:	4619      	mov	r1, r3
 8001032:	4828      	ldr	r0, [pc, #160]	@ (80010d4 <MX_GPIO_Init+0x764>)
 8001034:	f001 fa0e 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001038:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800103c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800103e:	2312      	movs	r3, #18
 8001040:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001046:	2303      	movs	r3, #3
 8001048:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800104a:	2304      	movs	r3, #4
 800104c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800104e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001052:	4619      	mov	r1, r3
 8001054:	4820      	ldr	r0, [pc, #128]	@ (80010d8 <MX_GPIO_Init+0x768>)
 8001056:	f001 f9fd 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800105a:	2328      	movs	r3, #40	@ 0x28
 800105c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001066:	2303      	movs	r3, #3
 8001068:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800106a:	230a      	movs	r3, #10
 800106c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001072:	4619      	mov	r1, r3
 8001074:	4817      	ldr	r0, [pc, #92]	@ (80010d4 <MX_GPIO_Init+0x764>)
 8001076:	f001 f9ed 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800107a:	2340      	movs	r3, #64	@ 0x40
 800107c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107e:	2302      	movs	r3, #2
 8001080:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001086:	2300      	movs	r3, #0
 8001088:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800108a:	2309      	movs	r3, #9
 800108c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800108e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001092:	4619      	mov	r1, r3
 8001094:	4810      	ldr	r0, [pc, #64]	@ (80010d8 <MX_GPIO_Init+0x768>)
 8001096:	f001 f9dd 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800109a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800109e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a0:	2302      	movs	r3, #2
 80010a2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2300      	movs	r3, #0
 80010aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010ac:	2305      	movs	r3, #5
 80010ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010b4:	4619      	mov	r1, r3
 80010b6:	4804      	ldr	r0, [pc, #16]	@ (80010c8 <MX_GPIO_Init+0x758>)
 80010b8:	f001 f9cc 	bl	8002454 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010bc:	bf00      	nop
 80010be:	3740      	adds	r7, #64	@ 0x40
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40020800 	.word	0x40020800
 80010c8:	40020400 	.word	0x40020400
 80010cc:	40020c00 	.word	0x40020c00
 80010d0:	40021800 	.word	0x40021800
 80010d4:	40020000 	.word	0x40020000
 80010d8:	40021c00 	.word	0x40021c00

080010dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e0:	b672      	cpsid	i
}
 80010e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010e4:	bf00      	nop
 80010e6:	e7fd      	b.n	80010e4 <Error_Handler+0x8>

080010e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010ee:	4b0f      	ldr	r3, [pc, #60]	@ (800112c <HAL_MspInit+0x44>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f2:	4a0e      	ldr	r2, [pc, #56]	@ (800112c <HAL_MspInit+0x44>)
 80010f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80010fa:	4b0c      	ldr	r3, [pc, #48]	@ (800112c <HAL_MspInit+0x44>)
 80010fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001106:	4b09      	ldr	r3, [pc, #36]	@ (800112c <HAL_MspInit+0x44>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800110a:	4a08      	ldr	r2, [pc, #32]	@ (800112c <HAL_MspInit+0x44>)
 800110c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001110:	6453      	str	r3, [r2, #68]	@ 0x44
 8001112:	4b06      	ldr	r3, [pc, #24]	@ (800112c <HAL_MspInit+0x44>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001116:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800111a:	603b      	str	r3, [r7, #0]
 800111c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	40023800 	.word	0x40023800

08001130 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a0a      	ldr	r2, [pc, #40]	@ (8001168 <HAL_DMA2D_MspInit+0x38>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d10b      	bne.n	800115a <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001142:	4b0a      	ldr	r3, [pc, #40]	@ (800116c <HAL_DMA2D_MspInit+0x3c>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001146:	4a09      	ldr	r2, [pc, #36]	@ (800116c <HAL_DMA2D_MspInit+0x3c>)
 8001148:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800114c:	6313      	str	r3, [r2, #48]	@ 0x30
 800114e:	4b07      	ldr	r3, [pc, #28]	@ (800116c <HAL_DMA2D_MspInit+0x3c>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 800115a:	bf00      	nop
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	4002b000 	.word	0x4002b000
 800116c:	40023800 	.word	0x40023800

08001170 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b0ae      	sub	sp, #184	@ 0xb8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001188:	f107 0320 	add.w	r3, r7, #32
 800118c:	2284      	movs	r2, #132	@ 0x84
 800118e:	2100      	movs	r1, #0
 8001190:	4618      	mov	r0, r3
 8001192:	f008 faa5 	bl	80096e0 <memset>
  if(hltdc->Instance==LTDC)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a6a      	ldr	r2, [pc, #424]	@ (8001344 <HAL_LTDC_MspInit+0x1d4>)
 800119c:	4293      	cmp	r3, r2
 800119e:	f040 80cc 	bne.w	800133a <HAL_LTDC_MspInit+0x1ca>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80011a2:	2308      	movs	r3, #8
 80011a4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80011a6:	2332      	movs	r3, #50	@ 0x32
 80011a8:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80011aa:	2302      	movs	r3, #2
 80011ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80011ae:	2302      	movs	r3, #2
 80011b0:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80011b2:	2300      	movs	r3, #0
 80011b4:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80011b6:	2301      	movs	r3, #1
 80011b8:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80011ba:	2300      	movs	r3, #0
 80011bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011be:	f107 0320 	add.w	r3, r7, #32
 80011c2:	4618      	mov	r0, r3
 80011c4:	f002 fa22 	bl	800360c <HAL_RCCEx_PeriphCLKConfig>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_LTDC_MspInit+0x62>
    {
      Error_Handler();
 80011ce:	f7ff ff85 	bl	80010dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80011d2:	4b5d      	ldr	r3, [pc, #372]	@ (8001348 <HAL_LTDC_MspInit+0x1d8>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d6:	4a5c      	ldr	r2, [pc, #368]	@ (8001348 <HAL_LTDC_MspInit+0x1d8>)
 80011d8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80011dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80011de:	4b5a      	ldr	r3, [pc, #360]	@ (8001348 <HAL_LTDC_MspInit+0x1d8>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80011e6:	61fb      	str	r3, [r7, #28]
 80011e8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011ea:	4b57      	ldr	r3, [pc, #348]	@ (8001348 <HAL_LTDC_MspInit+0x1d8>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	4a56      	ldr	r2, [pc, #344]	@ (8001348 <HAL_LTDC_MspInit+0x1d8>)
 80011f0:	f043 0310 	orr.w	r3, r3, #16
 80011f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f6:	4b54      	ldr	r3, [pc, #336]	@ (8001348 <HAL_LTDC_MspInit+0x1d8>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	f003 0310 	and.w	r3, r3, #16
 80011fe:	61bb      	str	r3, [r7, #24]
 8001200:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001202:	4b51      	ldr	r3, [pc, #324]	@ (8001348 <HAL_LTDC_MspInit+0x1d8>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	4a50      	ldr	r2, [pc, #320]	@ (8001348 <HAL_LTDC_MspInit+0x1d8>)
 8001208:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800120c:	6313      	str	r3, [r2, #48]	@ 0x30
 800120e:	4b4e      	ldr	r3, [pc, #312]	@ (8001348 <HAL_LTDC_MspInit+0x1d8>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001216:	617b      	str	r3, [r7, #20]
 8001218:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800121a:	4b4b      	ldr	r3, [pc, #300]	@ (8001348 <HAL_LTDC_MspInit+0x1d8>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	4a4a      	ldr	r2, [pc, #296]	@ (8001348 <HAL_LTDC_MspInit+0x1d8>)
 8001220:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001224:	6313      	str	r3, [r2, #48]	@ 0x30
 8001226:	4b48      	ldr	r3, [pc, #288]	@ (8001348 <HAL_LTDC_MspInit+0x1d8>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001232:	4b45      	ldr	r3, [pc, #276]	@ (8001348 <HAL_LTDC_MspInit+0x1d8>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	4a44      	ldr	r2, [pc, #272]	@ (8001348 <HAL_LTDC_MspInit+0x1d8>)
 8001238:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800123c:	6313      	str	r3, [r2, #48]	@ 0x30
 800123e:	4b42      	ldr	r3, [pc, #264]	@ (8001348 <HAL_LTDC_MspInit+0x1d8>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800124a:	4b3f      	ldr	r3, [pc, #252]	@ (8001348 <HAL_LTDC_MspInit+0x1d8>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	4a3e      	ldr	r2, [pc, #248]	@ (8001348 <HAL_LTDC_MspInit+0x1d8>)
 8001250:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001254:	6313      	str	r3, [r2, #48]	@ 0x30
 8001256:	4b3c      	ldr	r3, [pc, #240]	@ (8001348 <HAL_LTDC_MspInit+0x1d8>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001262:	2310      	movs	r3, #16
 8001264:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001268:	2302      	movs	r3, #2
 800126a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001274:	2300      	movs	r3, #0
 8001276:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800127a:	230e      	movs	r3, #14
 800127c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001280:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001284:	4619      	mov	r1, r3
 8001286:	4831      	ldr	r0, [pc, #196]	@ (800134c <HAL_LTDC_MspInit+0x1dc>)
 8001288:	f001 f8e4 	bl	8002454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800128c:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8001290:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a0:	2300      	movs	r3, #0
 80012a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012a6:	230e      	movs	r3, #14
 80012a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80012ac:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012b0:	4619      	mov	r1, r3
 80012b2:	4827      	ldr	r0, [pc, #156]	@ (8001350 <HAL_LTDC_MspInit+0x1e0>)
 80012b4:	f001 f8ce 	bl	8002454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80012b8:	23f7      	movs	r3, #247	@ 0xf7
 80012ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012be:	2302      	movs	r3, #2
 80012c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	2300      	movs	r3, #0
 80012cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012d0:	230e      	movs	r3, #14
 80012d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80012d6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012da:	4619      	mov	r1, r3
 80012dc:	481d      	ldr	r0, [pc, #116]	@ (8001354 <HAL_LTDC_MspInit+0x1e4>)
 80012de:	f001 f8b9 	bl	8002454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80012e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ea:	2302      	movs	r3, #2
 80012ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80012fc:	2309      	movs	r3, #9
 80012fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001302:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001306:	4619      	mov	r1, r3
 8001308:	4813      	ldr	r0, [pc, #76]	@ (8001358 <HAL_LTDC_MspInit+0x1e8>)
 800130a:	f001 f8a3 	bl	8002454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800130e:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8001312:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2300      	movs	r3, #0
 8001324:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001328:	230e      	movs	r3, #14
 800132a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800132e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001332:	4619      	mov	r1, r3
 8001334:	4809      	ldr	r0, [pc, #36]	@ (800135c <HAL_LTDC_MspInit+0x1ec>)
 8001336:	f001 f88d 	bl	8002454 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 800133a:	bf00      	nop
 800133c:	37b8      	adds	r7, #184	@ 0xb8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40016800 	.word	0x40016800
 8001348:	40023800 	.word	0x40023800
 800134c:	40021000 	.word	0x40021000
 8001350:	40022400 	.word	0x40022400
 8001354:	40022800 	.word	0x40022800
 8001358:	40021800 	.word	0x40021800
 800135c:	40022000 	.word	0x40022000

08001360 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b0ac      	sub	sp, #176	@ 0xb0
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001378:	f107 0318 	add.w	r3, r7, #24
 800137c:	2284      	movs	r2, #132	@ 0x84
 800137e:	2100      	movs	r1, #0
 8001380:	4618      	mov	r0, r3
 8001382:	f008 f9ad 	bl	80096e0 <memset>
  if(hsd->Instance==SDMMC1)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a73      	ldr	r2, [pc, #460]	@ (8001558 <HAL_SD_MspInit+0x1f8>)
 800138c:	4293      	cmp	r3, r2
 800138e:	f040 80de 	bne.w	800154e <HAL_SD_MspInit+0x1ee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001392:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8001396:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_SYSCLK;
 8001398:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800139c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013a0:	f107 0318 	add.w	r3, r7, #24
 80013a4:	4618      	mov	r0, r3
 80013a6:	f002 f931 	bl	800360c <HAL_RCCEx_PeriphCLKConfig>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80013b0:	f7ff fe94 	bl	80010dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80013b4:	4b69      	ldr	r3, [pc, #420]	@ (800155c <HAL_SD_MspInit+0x1fc>)
 80013b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b8:	4a68      	ldr	r2, [pc, #416]	@ (800155c <HAL_SD_MspInit+0x1fc>)
 80013ba:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80013be:	6453      	str	r3, [r2, #68]	@ 0x44
 80013c0:	4b66      	ldr	r3, [pc, #408]	@ (800155c <HAL_SD_MspInit+0x1fc>)
 80013c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013c8:	617b      	str	r3, [r7, #20]
 80013ca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013cc:	4b63      	ldr	r3, [pc, #396]	@ (800155c <HAL_SD_MspInit+0x1fc>)
 80013ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d0:	4a62      	ldr	r2, [pc, #392]	@ (800155c <HAL_SD_MspInit+0x1fc>)
 80013d2:	f043 0304 	orr.w	r3, r3, #4
 80013d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d8:	4b60      	ldr	r3, [pc, #384]	@ (800155c <HAL_SD_MspInit+0x1fc>)
 80013da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013dc:	f003 0304 	and.w	r3, r3, #4
 80013e0:	613b      	str	r3, [r7, #16]
 80013e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e4:	4b5d      	ldr	r3, [pc, #372]	@ (800155c <HAL_SD_MspInit+0x1fc>)
 80013e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e8:	4a5c      	ldr	r2, [pc, #368]	@ (800155c <HAL_SD_MspInit+0x1fc>)
 80013ea:	f043 0308 	orr.w	r3, r3, #8
 80013ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f0:	4b5a      	ldr	r3, [pc, #360]	@ (800155c <HAL_SD_MspInit+0x1fc>)
 80013f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f4:	f003 0308 	and.w	r3, r3, #8
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80013fc:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001400:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001404:	2302      	movs	r3, #2
 8001406:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001410:	2303      	movs	r3, #3
 8001412:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001416:	230c      	movs	r3, #12
 8001418:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800141c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001420:	4619      	mov	r1, r3
 8001422:	484f      	ldr	r0, [pc, #316]	@ (8001560 <HAL_SD_MspInit+0x200>)
 8001424:	f001 f816 	bl	8002454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8001428:	2304      	movs	r3, #4
 800142a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	2302      	movs	r3, #2
 8001430:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143a:	2303      	movs	r3, #3
 800143c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001440:	230c      	movs	r3, #12
 8001442:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8001446:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800144a:	4619      	mov	r1, r3
 800144c:	4845      	ldr	r0, [pc, #276]	@ (8001564 <HAL_SD_MspInit+0x204>)
 800144e:	f001 f801 	bl	8002454 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8001452:	4b45      	ldr	r3, [pc, #276]	@ (8001568 <HAL_SD_MspInit+0x208>)
 8001454:	4a45      	ldr	r2, [pc, #276]	@ (800156c <HAL_SD_MspInit+0x20c>)
 8001456:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8001458:	4b43      	ldr	r3, [pc, #268]	@ (8001568 <HAL_SD_MspInit+0x208>)
 800145a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800145e:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001460:	4b41      	ldr	r3, [pc, #260]	@ (8001568 <HAL_SD_MspInit+0x208>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001466:	4b40      	ldr	r3, [pc, #256]	@ (8001568 <HAL_SD_MspInit+0x208>)
 8001468:	2200      	movs	r2, #0
 800146a:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800146c:	4b3e      	ldr	r3, [pc, #248]	@ (8001568 <HAL_SD_MspInit+0x208>)
 800146e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001472:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001474:	4b3c      	ldr	r3, [pc, #240]	@ (8001568 <HAL_SD_MspInit+0x208>)
 8001476:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800147a:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800147c:	4b3a      	ldr	r3, [pc, #232]	@ (8001568 <HAL_SD_MspInit+0x208>)
 800147e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001482:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8001484:	4b38      	ldr	r3, [pc, #224]	@ (8001568 <HAL_SD_MspInit+0x208>)
 8001486:	2220      	movs	r2, #32
 8001488:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800148a:	4b37      	ldr	r3, [pc, #220]	@ (8001568 <HAL_SD_MspInit+0x208>)
 800148c:	2200      	movs	r2, #0
 800148e:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001490:	4b35      	ldr	r3, [pc, #212]	@ (8001568 <HAL_SD_MspInit+0x208>)
 8001492:	2204      	movs	r2, #4
 8001494:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001496:	4b34      	ldr	r3, [pc, #208]	@ (8001568 <HAL_SD_MspInit+0x208>)
 8001498:	2203      	movs	r2, #3
 800149a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 800149c:	4b32      	ldr	r3, [pc, #200]	@ (8001568 <HAL_SD_MspInit+0x208>)
 800149e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80014a2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80014a4:	4b30      	ldr	r3, [pc, #192]	@ (8001568 <HAL_SD_MspInit+0x208>)
 80014a6:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80014aa:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80014ac:	482e      	ldr	r0, [pc, #184]	@ (8001568 <HAL_SD_MspInit+0x208>)
 80014ae:	f000 fb4f 	bl	8001b50 <HAL_DMA_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <HAL_SD_MspInit+0x15c>
    {
      Error_Handler();
 80014b8:	f7ff fe10 	bl	80010dc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4a2a      	ldr	r2, [pc, #168]	@ (8001568 <HAL_SD_MspInit+0x208>)
 80014c0:	641a      	str	r2, [r3, #64]	@ 0x40
 80014c2:	4a29      	ldr	r2, [pc, #164]	@ (8001568 <HAL_SD_MspInit+0x208>)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 80014c8:	4b29      	ldr	r3, [pc, #164]	@ (8001570 <HAL_SD_MspInit+0x210>)
 80014ca:	4a2a      	ldr	r2, [pc, #168]	@ (8001574 <HAL_SD_MspInit+0x214>)
 80014cc:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80014ce:	4b28      	ldr	r3, [pc, #160]	@ (8001570 <HAL_SD_MspInit+0x210>)
 80014d0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80014d4:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014d6:	4b26      	ldr	r3, [pc, #152]	@ (8001570 <HAL_SD_MspInit+0x210>)
 80014d8:	2240      	movs	r2, #64	@ 0x40
 80014da:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014dc:	4b24      	ldr	r3, [pc, #144]	@ (8001570 <HAL_SD_MspInit+0x210>)
 80014de:	2200      	movs	r2, #0
 80014e0:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014e2:	4b23      	ldr	r3, [pc, #140]	@ (8001570 <HAL_SD_MspInit+0x210>)
 80014e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014e8:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014ea:	4b21      	ldr	r3, [pc, #132]	@ (8001570 <HAL_SD_MspInit+0x210>)
 80014ec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014f0:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001570 <HAL_SD_MspInit+0x210>)
 80014f4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014f8:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80014fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001570 <HAL_SD_MspInit+0x210>)
 80014fc:	2220      	movs	r2, #32
 80014fe:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001500:	4b1b      	ldr	r3, [pc, #108]	@ (8001570 <HAL_SD_MspInit+0x210>)
 8001502:	2200      	movs	r2, #0
 8001504:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001506:	4b1a      	ldr	r3, [pc, #104]	@ (8001570 <HAL_SD_MspInit+0x210>)
 8001508:	2204      	movs	r2, #4
 800150a:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800150c:	4b18      	ldr	r3, [pc, #96]	@ (8001570 <HAL_SD_MspInit+0x210>)
 800150e:	2203      	movs	r2, #3
 8001510:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001512:	4b17      	ldr	r3, [pc, #92]	@ (8001570 <HAL_SD_MspInit+0x210>)
 8001514:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001518:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800151a:	4b15      	ldr	r3, [pc, #84]	@ (8001570 <HAL_SD_MspInit+0x210>)
 800151c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001520:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8001522:	4813      	ldr	r0, [pc, #76]	@ (8001570 <HAL_SD_MspInit+0x210>)
 8001524:	f000 fb14 	bl	8001b50 <HAL_DMA_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <HAL_SD_MspInit+0x1d2>
    {
      Error_Handler();
 800152e:	f7ff fdd5 	bl	80010dc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a0e      	ldr	r2, [pc, #56]	@ (8001570 <HAL_SD_MspInit+0x210>)
 8001536:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001538:	4a0d      	ldr	r2, [pc, #52]	@ (8001570 <HAL_SD_MspInit+0x210>)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800153e:	2200      	movs	r2, #0
 8001540:	2100      	movs	r1, #0
 8001542:	2031      	movs	r0, #49	@ 0x31
 8001544:	f000 facd 	bl	8001ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001548:	2031      	movs	r0, #49	@ 0x31
 800154a:	f000 fae6 	bl	8001b1a <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 800154e:	bf00      	nop
 8001550:	37b0      	adds	r7, #176	@ 0xb0
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40012c00 	.word	0x40012c00
 800155c:	40023800 	.word	0x40023800
 8001560:	40020800 	.word	0x40020800
 8001564:	40020c00 	.word	0x40020c00
 8001568:	200001e4 	.word	0x200001e4
 800156c:	40026458 	.word	0x40026458
 8001570:	20000244 	.word	0x20000244
 8001574:	400264a0 	.word	0x400264a0

08001578 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800158c:	4b3a      	ldr	r3, [pc, #232]	@ (8001678 <HAL_FMC_MspInit+0x100>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d16d      	bne.n	8001670 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8001594:	4b38      	ldr	r3, [pc, #224]	@ (8001678 <HAL_FMC_MspInit+0x100>)
 8001596:	2201      	movs	r2, #1
 8001598:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800159a:	4b38      	ldr	r3, [pc, #224]	@ (800167c <HAL_FMC_MspInit+0x104>)
 800159c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800159e:	4a37      	ldr	r2, [pc, #220]	@ (800167c <HAL_FMC_MspInit+0x104>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6393      	str	r3, [r2, #56]	@ 0x38
 80015a6:	4b35      	ldr	r3, [pc, #212]	@ (800167c <HAL_FMC_MspInit+0x104>)
 80015a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	603b      	str	r3, [r7, #0]
 80015b0:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80015b2:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80015b6:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b8:	2302      	movs	r3, #2
 80015ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c0:	2303      	movs	r3, #3
 80015c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015c4:	230c      	movs	r3, #12
 80015c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	4619      	mov	r1, r3
 80015cc:	482c      	ldr	r0, [pc, #176]	@ (8001680 <HAL_FMC_MspInit+0x108>)
 80015ce:	f000 ff41 	bl	8002454 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80015d2:	f248 1333 	movw	r3, #33075	@ 0x8133
 80015d6:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	2302      	movs	r3, #2
 80015da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e0:	2303      	movs	r3, #3
 80015e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015e4:	230c      	movs	r3, #12
 80015e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	4619      	mov	r1, r3
 80015ec:	4825      	ldr	r0, [pc, #148]	@ (8001684 <HAL_FMC_MspInit+0x10c>)
 80015ee:	f000 ff31 	bl	8002454 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80015f2:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80015f6:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f8:	2302      	movs	r3, #2
 80015fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001600:	2303      	movs	r3, #3
 8001602:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001604:	230c      	movs	r3, #12
 8001606:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001608:	1d3b      	adds	r3, r7, #4
 800160a:	4619      	mov	r1, r3
 800160c:	481e      	ldr	r0, [pc, #120]	@ (8001688 <HAL_FMC_MspInit+0x110>)
 800160e:	f000 ff21 	bl	8002454 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8001612:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001616:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001618:	2302      	movs	r3, #2
 800161a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001620:	2303      	movs	r3, #3
 8001622:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001624:	230c      	movs	r3, #12
 8001626:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	4619      	mov	r1, r3
 800162c:	4817      	ldr	r0, [pc, #92]	@ (800168c <HAL_FMC_MspInit+0x114>)
 800162e:	f000 ff11 	bl	8002454 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8001632:	2328      	movs	r3, #40	@ 0x28
 8001634:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001636:	2302      	movs	r3, #2
 8001638:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163e:	2303      	movs	r3, #3
 8001640:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001642:	230c      	movs	r3, #12
 8001644:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	4619      	mov	r1, r3
 800164a:	4811      	ldr	r0, [pc, #68]	@ (8001690 <HAL_FMC_MspInit+0x118>)
 800164c:	f000 ff02 	bl	8002454 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001650:	2308      	movs	r3, #8
 8001652:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001654:	2302      	movs	r3, #2
 8001656:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165c:	2303      	movs	r3, #3
 800165e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001660:	230c      	movs	r3, #12
 8001662:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	4619      	mov	r1, r3
 8001668:	480a      	ldr	r0, [pc, #40]	@ (8001694 <HAL_FMC_MspInit+0x11c>)
 800166a:	f000 fef3 	bl	8002454 <HAL_GPIO_Init>
 800166e:	e000      	b.n	8001672 <HAL_FMC_MspInit+0xfa>
    return;
 8001670:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	200002d8 	.word	0x200002d8
 800167c:	40023800 	.word	0x40023800
 8001680:	40021000 	.word	0x40021000
 8001684:	40021800 	.word	0x40021800
 8001688:	40020c00 	.word	0x40020c00
 800168c:	40021400 	.word	0x40021400
 8001690:	40021c00 	.word	0x40021c00
 8001694:	40020800 	.word	0x40020800

08001698 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80016a0:	f7ff ff6a 	bl	8001578 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80016a4:	bf00      	nop
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016b0:	bf00      	nop
 80016b2:	e7fd      	b.n	80016b0 <NMI_Handler+0x4>

080016b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b8:	bf00      	nop
 80016ba:	e7fd      	b.n	80016b8 <HardFault_Handler+0x4>

080016bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016c0:	bf00      	nop
 80016c2:	e7fd      	b.n	80016c0 <MemManage_Handler+0x4>

080016c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c8:	bf00      	nop
 80016ca:	e7fd      	b.n	80016c8 <BusFault_Handler+0x4>

080016cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d0:	bf00      	nop
 80016d2:	e7fd      	b.n	80016d0 <UsageFault_Handler+0x4>

080016d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001702:	f000 f8cf 	bl	80018a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001710:	4802      	ldr	r0, [pc, #8]	@ (800171c <SDMMC1_IRQHandler+0x10>)
 8001712:	f002 fdeb 	bl	80042ec <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000160 	.word	0x20000160

08001720 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001724:	4802      	ldr	r0, [pc, #8]	@ (8001730 <DMA2_Stream3_IRQHandler+0x10>)
 8001726:	f000 fb43 	bl	8001db0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	200001e4 	.word	0x200001e4

08001734 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001738:	4802      	ldr	r0, [pc, #8]	@ (8001744 <DMA2_Stream6_IRQHandler+0x10>)
 800173a:	f000 fb39 	bl	8001db0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000244 	.word	0x20000244

08001748 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001750:	4a14      	ldr	r2, [pc, #80]	@ (80017a4 <_sbrk+0x5c>)
 8001752:	4b15      	ldr	r3, [pc, #84]	@ (80017a8 <_sbrk+0x60>)
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800175c:	4b13      	ldr	r3, [pc, #76]	@ (80017ac <_sbrk+0x64>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d102      	bne.n	800176a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001764:	4b11      	ldr	r3, [pc, #68]	@ (80017ac <_sbrk+0x64>)
 8001766:	4a12      	ldr	r2, [pc, #72]	@ (80017b0 <_sbrk+0x68>)
 8001768:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800176a:	4b10      	ldr	r3, [pc, #64]	@ (80017ac <_sbrk+0x64>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	429a      	cmp	r2, r3
 8001776:	d207      	bcs.n	8001788 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001778:	f007 ffca 	bl	8009710 <__errno>
 800177c:	4603      	mov	r3, r0
 800177e:	220c      	movs	r2, #12
 8001780:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001782:	f04f 33ff 	mov.w	r3, #4294967295
 8001786:	e009      	b.n	800179c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001788:	4b08      	ldr	r3, [pc, #32]	@ (80017ac <_sbrk+0x64>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800178e:	4b07      	ldr	r3, [pc, #28]	@ (80017ac <_sbrk+0x64>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	4a05      	ldr	r2, [pc, #20]	@ (80017ac <_sbrk+0x64>)
 8001798:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800179a:	68fb      	ldr	r3, [r7, #12]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20050000 	.word	0x20050000
 80017a8:	00000800 	.word	0x00000800
 80017ac:	200002dc 	.word	0x200002dc
 80017b0:	200008d8 	.word	0x200008d8

080017b4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017b8:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <SystemInit+0x20>)
 80017ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017be:	4a05      	ldr	r2, [pc, #20]	@ (80017d4 <SystemInit+0x20>)
 80017c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001810 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017dc:	f7ff ffea 	bl	80017b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017e0:	480c      	ldr	r0, [pc, #48]	@ (8001814 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017e2:	490d      	ldr	r1, [pc, #52]	@ (8001818 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017e4:	4a0d      	ldr	r2, [pc, #52]	@ (800181c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e8:	e002      	b.n	80017f0 <LoopCopyDataInit>

080017ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ee:	3304      	adds	r3, #4

080017f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f4:	d3f9      	bcc.n	80017ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001820 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001824 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017fc:	e001      	b.n	8001802 <LoopFillZerobss>

080017fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001800:	3204      	adds	r2, #4

08001802 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001802:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001804:	d3fb      	bcc.n	80017fe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001806:	f007 ff89 	bl	800971c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800180a:	f7fe fe75 	bl	80004f8 <main>
  bx  lr    
 800180e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001810:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001814:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001818:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800181c:	08009cf4 	.word	0x08009cf4
  ldr r2, =_sbss
 8001820:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001824:	200008d4 	.word	0x200008d4

08001828 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001828:	e7fe      	b.n	8001828 <ADC_IRQHandler>

0800182a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800182e:	2003      	movs	r0, #3
 8001830:	f000 f94c 	bl	8001acc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001834:	2000      	movs	r0, #0
 8001836:	f000 f805 	bl	8001844 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800183a:	f7ff fc55 	bl	80010e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	bd80      	pop	{r7, pc}

08001844 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800184c:	4b12      	ldr	r3, [pc, #72]	@ (8001898 <HAL_InitTick+0x54>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4b12      	ldr	r3, [pc, #72]	@ (800189c <HAL_InitTick+0x58>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	4619      	mov	r1, r3
 8001856:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800185a:	fbb3 f3f1 	udiv	r3, r3, r1
 800185e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001862:	4618      	mov	r0, r3
 8001864:	f000 f967 	bl	8001b36 <HAL_SYSTICK_Config>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e00e      	b.n	8001890 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b0f      	cmp	r3, #15
 8001876:	d80a      	bhi.n	800188e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001878:	2200      	movs	r2, #0
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	f04f 30ff 	mov.w	r0, #4294967295
 8001880:	f000 f92f 	bl	8001ae2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001884:	4a06      	ldr	r2, [pc, #24]	@ (80018a0 <HAL_InitTick+0x5c>)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800188a:	2300      	movs	r3, #0
 800188c:	e000      	b.n	8001890 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
}
 8001890:	4618      	mov	r0, r3
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20000000 	.word	0x20000000
 800189c:	20000008 	.word	0x20000008
 80018a0:	20000004 	.word	0x20000004

080018a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018a8:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <HAL_IncTick+0x20>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	461a      	mov	r2, r3
 80018ae:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <HAL_IncTick+0x24>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4413      	add	r3, r2
 80018b4:	4a04      	ldr	r2, [pc, #16]	@ (80018c8 <HAL_IncTick+0x24>)
 80018b6:	6013      	str	r3, [r2, #0]
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	20000008 	.word	0x20000008
 80018c8:	200002e0 	.word	0x200002e0

080018cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return uwTick;
 80018d0:	4b03      	ldr	r3, [pc, #12]	@ (80018e0 <HAL_GetTick+0x14>)
 80018d2:	681b      	ldr	r3, [r3, #0]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	200002e0 	.word	0x200002e0

080018e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018ec:	f7ff ffee 	bl	80018cc <HAL_GetTick>
 80018f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018fc:	d005      	beq.n	800190a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001928 <HAL_Delay+0x44>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	461a      	mov	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4413      	add	r3, r2
 8001908:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800190a:	bf00      	nop
 800190c:	f7ff ffde 	bl	80018cc <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	429a      	cmp	r2, r3
 800191a:	d8f7      	bhi.n	800190c <HAL_Delay+0x28>
  {
  }
}
 800191c:	bf00      	nop
 800191e:	bf00      	nop
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000008 	.word	0x20000008

0800192c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800193c:	4b0b      	ldr	r3, [pc, #44]	@ (800196c <__NVIC_SetPriorityGrouping+0x40>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001948:	4013      	ands	r3, r2
 800194a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001954:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <__NVIC_SetPriorityGrouping+0x44>)
 8001956:	4313      	orrs	r3, r2
 8001958:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800195a:	4a04      	ldr	r2, [pc, #16]	@ (800196c <__NVIC_SetPriorityGrouping+0x40>)
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	60d3      	str	r3, [r2, #12]
}
 8001960:	bf00      	nop
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	e000ed00 	.word	0xe000ed00
 8001970:	05fa0000 	.word	0x05fa0000

08001974 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001978:	4b04      	ldr	r3, [pc, #16]	@ (800198c <__NVIC_GetPriorityGrouping+0x18>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	0a1b      	lsrs	r3, r3, #8
 800197e:	f003 0307 	and.w	r3, r3, #7
}
 8001982:	4618      	mov	r0, r3
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	db0b      	blt.n	80019ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	f003 021f 	and.w	r2, r3, #31
 80019a8:	4907      	ldr	r1, [pc, #28]	@ (80019c8 <__NVIC_EnableIRQ+0x38>)
 80019aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ae:	095b      	lsrs	r3, r3, #5
 80019b0:	2001      	movs	r0, #1
 80019b2:	fa00 f202 	lsl.w	r2, r0, r2
 80019b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	e000e100 	.word	0xe000e100

080019cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	6039      	str	r1, [r7, #0]
 80019d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	db0a      	blt.n	80019f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	490c      	ldr	r1, [pc, #48]	@ (8001a18 <__NVIC_SetPriority+0x4c>)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	0112      	lsls	r2, r2, #4
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	440b      	add	r3, r1
 80019f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f4:	e00a      	b.n	8001a0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	4908      	ldr	r1, [pc, #32]	@ (8001a1c <__NVIC_SetPriority+0x50>)
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	3b04      	subs	r3, #4
 8001a04:	0112      	lsls	r2, r2, #4
 8001a06:	b2d2      	uxtb	r2, r2
 8001a08:	440b      	add	r3, r1
 8001a0a:	761a      	strb	r2, [r3, #24]
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	e000e100 	.word	0xe000e100
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b089      	sub	sp, #36	@ 0x24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f1c3 0307 	rsb	r3, r3, #7
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	bf28      	it	cs
 8001a3e:	2304      	movcs	r3, #4
 8001a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	3304      	adds	r3, #4
 8001a46:	2b06      	cmp	r3, #6
 8001a48:	d902      	bls.n	8001a50 <NVIC_EncodePriority+0x30>
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	3b03      	subs	r3, #3
 8001a4e:	e000      	b.n	8001a52 <NVIC_EncodePriority+0x32>
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a54:	f04f 32ff 	mov.w	r2, #4294967295
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43da      	mvns	r2, r3
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	401a      	ands	r2, r3
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a68:	f04f 31ff 	mov.w	r1, #4294967295
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a72:	43d9      	mvns	r1, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a78:	4313      	orrs	r3, r2
         );
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3724      	adds	r7, #36	@ 0x24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
	...

08001a88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a98:	d301      	bcc.n	8001a9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e00f      	b.n	8001abe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac8 <SysTick_Config+0x40>)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aa6:	210f      	movs	r1, #15
 8001aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aac:	f7ff ff8e 	bl	80019cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ab0:	4b05      	ldr	r3, [pc, #20]	@ (8001ac8 <SysTick_Config+0x40>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ab6:	4b04      	ldr	r3, [pc, #16]	@ (8001ac8 <SysTick_Config+0x40>)
 8001ab8:	2207      	movs	r2, #7
 8001aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	e000e010 	.word	0xe000e010

08001acc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7ff ff29 	bl	800192c <__NVIC_SetPriorityGrouping>
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b086      	sub	sp, #24
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	4603      	mov	r3, r0
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	607a      	str	r2, [r7, #4]
 8001aee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001af4:	f7ff ff3e 	bl	8001974 <__NVIC_GetPriorityGrouping>
 8001af8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	68b9      	ldr	r1, [r7, #8]
 8001afe:	6978      	ldr	r0, [r7, #20]
 8001b00:	f7ff ff8e 	bl	8001a20 <NVIC_EncodePriority>
 8001b04:	4602      	mov	r2, r0
 8001b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b0a:	4611      	mov	r1, r2
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff ff5d 	bl	80019cc <__NVIC_SetPriority>
}
 8001b12:	bf00      	nop
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	4603      	mov	r3, r0
 8001b22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff ff31 	bl	8001990 <__NVIC_EnableIRQ>
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b082      	sub	sp, #8
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7ff ffa2 	bl	8001a88 <SysTick_Config>
 8001b44:	4603      	mov	r3, r0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
	...

08001b50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b5c:	f7ff feb6 	bl	80018cc <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e099      	b.n	8001ca0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2202      	movs	r2, #2
 8001b70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 0201 	bic.w	r2, r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b8c:	e00f      	b.n	8001bae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b8e:	f7ff fe9d 	bl	80018cc <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b05      	cmp	r3, #5
 8001b9a:	d908      	bls.n	8001bae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2220      	movs	r2, #32
 8001ba0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e078      	b.n	8001ca0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1e8      	bne.n	8001b8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	4b38      	ldr	r3, [pc, #224]	@ (8001ca8 <HAL_DMA_Init+0x158>)
 8001bc8:	4013      	ands	r3, r2
 8001bca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001be6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bf2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d107      	bne.n	8001c18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c10:	4313      	orrs	r3, r2
 8001c12:	697a      	ldr	r2, [r7, #20]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	f023 0307 	bic.w	r3, r3, #7
 8001c2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d117      	bne.n	8001c72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d00e      	beq.n	8001c72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 faa5 	bl	80021a4 <DMA_CheckFifoParam>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d008      	beq.n	8001c72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2240      	movs	r2, #64	@ 0x40
 8001c64:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e016      	b.n	8001ca0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 fa5c 	bl	8002138 <DMA_CalcBaseAndBitshift>
 8001c80:	4603      	mov	r3, r0
 8001c82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c88:	223f      	movs	r2, #63	@ 0x3f
 8001c8a:	409a      	lsls	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	f010803f 	.word	0xf010803f

08001cac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
 8001cb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d101      	bne.n	8001cd2 <HAL_DMA_Start_IT+0x26>
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e048      	b.n	8001d64 <HAL_DMA_Start_IT+0xb8>
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d137      	bne.n	8001d56 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2202      	movs	r2, #2
 8001cea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	68b9      	ldr	r1, [r7, #8]
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f000 f9ee 	bl	80020dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d04:	223f      	movs	r2, #63	@ 0x3f
 8001d06:	409a      	lsls	r2, r3
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f042 0216 	orr.w	r2, r2, #22
 8001d1a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	695a      	ldr	r2, [r3, #20]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001d2a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d007      	beq.n	8001d44 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f042 0208 	orr.w	r2, r2, #8
 8001d42:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f042 0201 	orr.w	r2, r2, #1
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	e005      	b.n	8001d62 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d62:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d004      	beq.n	8001d8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2280      	movs	r2, #128	@ 0x80
 8001d84:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e00c      	b.n	8001da4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2205      	movs	r2, #5
 8001d8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f022 0201 	bic.w	r2, r2, #1
 8001da0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001dbc:	4b8e      	ldr	r3, [pc, #568]	@ (8001ff8 <HAL_DMA_IRQHandler+0x248>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a8e      	ldr	r2, [pc, #568]	@ (8001ffc <HAL_DMA_IRQHandler+0x24c>)
 8001dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc6:	0a9b      	lsrs	r3, r3, #10
 8001dc8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dda:	2208      	movs	r2, #8
 8001ddc:	409a      	lsls	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4013      	ands	r3, r2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d01a      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d013      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0204 	bic.w	r2, r2, #4
 8001e02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e08:	2208      	movs	r2, #8
 8001e0a:	409a      	lsls	r2, r3
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e14:	f043 0201 	orr.w	r2, r3, #1
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e20:	2201      	movs	r2, #1
 8001e22:	409a      	lsls	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4013      	ands	r3, r2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d012      	beq.n	8001e52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00b      	beq.n	8001e52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e3e:	2201      	movs	r2, #1
 8001e40:	409a      	lsls	r2, r3
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e4a:	f043 0202 	orr.w	r2, r3, #2
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e56:	2204      	movs	r2, #4
 8001e58:	409a      	lsls	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d012      	beq.n	8001e88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00b      	beq.n	8001e88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e74:	2204      	movs	r2, #4
 8001e76:	409a      	lsls	r2, r3
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e80:	f043 0204 	orr.w	r2, r3, #4
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e8c:	2210      	movs	r2, #16
 8001e8e:	409a      	lsls	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	4013      	ands	r3, r2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d043      	beq.n	8001f20 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d03c      	beq.n	8001f20 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eaa:	2210      	movs	r2, #16
 8001eac:	409a      	lsls	r2, r3
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d018      	beq.n	8001ef2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d108      	bne.n	8001ee0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d024      	beq.n	8001f20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	4798      	blx	r3
 8001ede:	e01f      	b.n	8001f20 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d01b      	beq.n	8001f20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	4798      	blx	r3
 8001ef0:	e016      	b.n	8001f20 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d107      	bne.n	8001f10 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 0208 	bic.w	r2, r2, #8
 8001f0e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f24:	2220      	movs	r2, #32
 8001f26:	409a      	lsls	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f000 808f 	beq.w	8002050 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0310 	and.w	r3, r3, #16
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f000 8087 	beq.w	8002050 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f46:	2220      	movs	r2, #32
 8001f48:	409a      	lsls	r2, r3
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b05      	cmp	r3, #5
 8001f58:	d136      	bne.n	8001fc8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 0216 	bic.w	r2, r2, #22
 8001f68:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	695a      	ldr	r2, [r3, #20]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f78:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d103      	bne.n	8001f8a <HAL_DMA_IRQHandler+0x1da>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d007      	beq.n	8001f9a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 0208 	bic.w	r2, r2, #8
 8001f98:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f9e:	223f      	movs	r2, #63	@ 0x3f
 8001fa0:	409a      	lsls	r2, r3
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d07e      	beq.n	80020bc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	4798      	blx	r3
        }
        return;
 8001fc6:	e079      	b.n	80020bc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d01d      	beq.n	8002012 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d10d      	bne.n	8002000 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d031      	beq.n	8002050 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	4798      	blx	r3
 8001ff4:	e02c      	b.n	8002050 <HAL_DMA_IRQHandler+0x2a0>
 8001ff6:	bf00      	nop
 8001ff8:	20000000 	.word	0x20000000
 8001ffc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002004:	2b00      	cmp	r3, #0
 8002006:	d023      	beq.n	8002050 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	4798      	blx	r3
 8002010:	e01e      	b.n	8002050 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800201c:	2b00      	cmp	r3, #0
 800201e:	d10f      	bne.n	8002040 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 0210 	bic.w	r2, r2, #16
 800202e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002044:	2b00      	cmp	r3, #0
 8002046:	d003      	beq.n	8002050 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002054:	2b00      	cmp	r3, #0
 8002056:	d032      	beq.n	80020be <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b00      	cmp	r3, #0
 8002062:	d022      	beq.n	80020aa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2205      	movs	r2, #5
 8002068:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f022 0201 	bic.w	r2, r2, #1
 800207a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	3301      	adds	r3, #1
 8002080:	60bb      	str	r3, [r7, #8]
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	429a      	cmp	r2, r3
 8002086:	d307      	bcc.n	8002098 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1f2      	bne.n	800207c <HAL_DMA_IRQHandler+0x2cc>
 8002096:	e000      	b.n	800209a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002098:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d005      	beq.n	80020be <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	4798      	blx	r3
 80020ba:	e000      	b.n	80020be <HAL_DMA_IRQHandler+0x30e>
        return;
 80020bc:	bf00      	nop
    }
  }
}
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
 80020e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80020f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	2b40      	cmp	r3, #64	@ 0x40
 8002108:	d108      	bne.n	800211c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800211a:	e007      	b.n	800212c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68ba      	ldr	r2, [r7, #8]
 8002122:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	60da      	str	r2, [r3, #12]
}
 800212c:	bf00      	nop
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	b2db      	uxtb	r3, r3
 8002146:	3b10      	subs	r3, #16
 8002148:	4a13      	ldr	r2, [pc, #76]	@ (8002198 <DMA_CalcBaseAndBitshift+0x60>)
 800214a:	fba2 2303 	umull	r2, r3, r2, r3
 800214e:	091b      	lsrs	r3, r3, #4
 8002150:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002152:	4a12      	ldr	r2, [pc, #72]	@ (800219c <DMA_CalcBaseAndBitshift+0x64>)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4413      	add	r3, r2
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	461a      	mov	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2b03      	cmp	r3, #3
 8002164:	d908      	bls.n	8002178 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	461a      	mov	r2, r3
 800216c:	4b0c      	ldr	r3, [pc, #48]	@ (80021a0 <DMA_CalcBaseAndBitshift+0x68>)
 800216e:	4013      	ands	r3, r2
 8002170:	1d1a      	adds	r2, r3, #4
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	659a      	str	r2, [r3, #88]	@ 0x58
 8002176:	e006      	b.n	8002186 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	461a      	mov	r2, r3
 800217e:	4b08      	ldr	r3, [pc, #32]	@ (80021a0 <DMA_CalcBaseAndBitshift+0x68>)
 8002180:	4013      	ands	r3, r2
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800218a:	4618      	mov	r0, r3
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	aaaaaaab 	.word	0xaaaaaaab
 800219c:	08009888 	.word	0x08009888
 80021a0:	fffffc00 	.word	0xfffffc00

080021a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021ac:	2300      	movs	r3, #0
 80021ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d11f      	bne.n	80021fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	2b03      	cmp	r3, #3
 80021c2:	d856      	bhi.n	8002272 <DMA_CheckFifoParam+0xce>
 80021c4:	a201      	add	r2, pc, #4	@ (adr r2, 80021cc <DMA_CheckFifoParam+0x28>)
 80021c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ca:	bf00      	nop
 80021cc:	080021dd 	.word	0x080021dd
 80021d0:	080021ef 	.word	0x080021ef
 80021d4:	080021dd 	.word	0x080021dd
 80021d8:	08002273 	.word	0x08002273
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d046      	beq.n	8002276 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021ec:	e043      	b.n	8002276 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80021f6:	d140      	bne.n	800227a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021fc:	e03d      	b.n	800227a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002206:	d121      	bne.n	800224c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2b03      	cmp	r3, #3
 800220c:	d837      	bhi.n	800227e <DMA_CheckFifoParam+0xda>
 800220e:	a201      	add	r2, pc, #4	@ (adr r2, 8002214 <DMA_CheckFifoParam+0x70>)
 8002210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002214:	08002225 	.word	0x08002225
 8002218:	0800222b 	.word	0x0800222b
 800221c:	08002225 	.word	0x08002225
 8002220:	0800223d 	.word	0x0800223d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	73fb      	strb	r3, [r7, #15]
      break;
 8002228:	e030      	b.n	800228c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d025      	beq.n	8002282 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800223a:	e022      	b.n	8002282 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002240:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002244:	d11f      	bne.n	8002286 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800224a:	e01c      	b.n	8002286 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	2b02      	cmp	r3, #2
 8002250:	d903      	bls.n	800225a <DMA_CheckFifoParam+0xb6>
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	2b03      	cmp	r3, #3
 8002256:	d003      	beq.n	8002260 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002258:	e018      	b.n	800228c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	73fb      	strb	r3, [r7, #15]
      break;
 800225e:	e015      	b.n	800228c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002264:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00e      	beq.n	800228a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	73fb      	strb	r3, [r7, #15]
      break;
 8002270:	e00b      	b.n	800228a <DMA_CheckFifoParam+0xe6>
      break;
 8002272:	bf00      	nop
 8002274:	e00a      	b.n	800228c <DMA_CheckFifoParam+0xe8>
      break;
 8002276:	bf00      	nop
 8002278:	e008      	b.n	800228c <DMA_CheckFifoParam+0xe8>
      break;
 800227a:	bf00      	nop
 800227c:	e006      	b.n	800228c <DMA_CheckFifoParam+0xe8>
      break;
 800227e:	bf00      	nop
 8002280:	e004      	b.n	800228c <DMA_CheckFifoParam+0xe8>
      break;
 8002282:	bf00      	nop
 8002284:	e002      	b.n	800228c <DMA_CheckFifoParam+0xe8>
      break;   
 8002286:	bf00      	nop
 8002288:	e000      	b.n	800228c <DMA_CheckFifoParam+0xe8>
      break;
 800228a:	bf00      	nop
    }
  } 
  
  return status; 
 800228c:	7bfb      	ldrb	r3, [r7, #15]
}
 800228e:	4618      	mov	r0, r3
 8002290:	3714      	adds	r7, #20
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop

0800229c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e039      	b.n	8002322 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d106      	bne.n	80022c8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7fe ff34 	bl	8001130 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2202      	movs	r2, #2
 80022cc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	430a      	orrs	r2, r1
 80022e4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022ec:	f023 0107 	bic.w	r1, r3, #7
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	430a      	orrs	r2, r1
 80022fa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002302:	4b0a      	ldr	r3, [pc, #40]	@ (800232c <HAL_DMA2D_Init+0x90>)
 8002304:	4013      	ands	r3, r2
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	68d1      	ldr	r1, [r2, #12]
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	6812      	ldr	r2, [r2, #0]
 800230e:	430b      	orrs	r3, r1
 8002310:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	ffffc000 	.word	0xffffc000

08002330 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002330:	b480      	push	{r7}
 8002332:	b087      	sub	sp, #28
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002348:	2b01      	cmp	r3, #1
 800234a:	d101      	bne.n	8002350 <HAL_DMA2D_ConfigLayer+0x20>
 800234c:	2302      	movs	r3, #2
 800234e:	e079      	b.n	8002444 <HAL_DMA2D_ConfigLayer+0x114>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2202      	movs	r2, #2
 800235c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	011b      	lsls	r3, r3, #4
 8002364:	3318      	adds	r3, #24
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	4413      	add	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	685a      	ldr	r2, [r3, #4]
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	041b      	lsls	r3, r3, #16
 8002376:	4313      	orrs	r3, r2
 8002378:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800237a:	4b35      	ldr	r3, [pc, #212]	@ (8002450 <HAL_DMA2D_ConfigLayer+0x120>)
 800237c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b0a      	cmp	r3, #10
 8002384:	d003      	beq.n	800238e <HAL_DMA2D_ConfigLayer+0x5e>
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b09      	cmp	r3, #9
 800238c:	d107      	bne.n	800239e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	4313      	orrs	r3, r2
 800239a:	617b      	str	r3, [r7, #20]
 800239c:	e005      	b.n	80023aa <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	061b      	lsls	r3, r3, #24
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d120      	bne.n	80023f2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	43db      	mvns	r3, r3
 80023ba:	ea02 0103 	and.w	r1, r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	430a      	orrs	r2, r1
 80023c6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	6812      	ldr	r2, [r2, #0]
 80023d0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b0a      	cmp	r3, #10
 80023d8:	d003      	beq.n	80023e2 <HAL_DMA2D_ConfigLayer+0xb2>
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b09      	cmp	r3, #9
 80023e0:	d127      	bne.n	8002432 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	68da      	ldr	r2, [r3, #12]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80023ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80023f0:	e01f      	b.n	8002432 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	69da      	ldr	r2, [r3, #28]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	43db      	mvns	r3, r3
 80023fc:	ea02 0103 	and.w	r1, r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	430a      	orrs	r2, r1
 8002408:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	6812      	ldr	r2, [r2, #0]
 8002412:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b0a      	cmp	r3, #10
 800241a:	d003      	beq.n	8002424 <HAL_DMA2D_ConfigLayer+0xf4>
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b09      	cmp	r3, #9
 8002422:	d106      	bne.n	8002432 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	68da      	ldr	r2, [r3, #12]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002430:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	371c      	adds	r7, #28
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	ff03000f 	.word	0xff03000f

08002454 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002454:	b480      	push	{r7}
 8002456:	b089      	sub	sp, #36	@ 0x24
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800245e:	2300      	movs	r3, #0
 8002460:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002462:	2300      	movs	r3, #0
 8002464:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002466:	2300      	movs	r3, #0
 8002468:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800246a:	2300      	movs	r3, #0
 800246c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800246e:	2300      	movs	r3, #0
 8002470:	61fb      	str	r3, [r7, #28]
 8002472:	e175      	b.n	8002760 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002474:	2201      	movs	r2, #1
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	4013      	ands	r3, r2
 8002486:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	429a      	cmp	r2, r3
 800248e:	f040 8164 	bne.w	800275a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	2b01      	cmp	r3, #1
 800249c:	d005      	beq.n	80024aa <HAL_GPIO_Init+0x56>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d130      	bne.n	800250c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	2203      	movs	r2, #3
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	43db      	mvns	r3, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4013      	ands	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024e0:	2201      	movs	r2, #1
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43db      	mvns	r3, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4013      	ands	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	091b      	lsrs	r3, r3, #4
 80024f6:	f003 0201 	and.w	r2, r3, #1
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 0303 	and.w	r3, r3, #3
 8002514:	2b03      	cmp	r3, #3
 8002516:	d017      	beq.n	8002548 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	2203      	movs	r2, #3
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	43db      	mvns	r3, r3
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4013      	ands	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4313      	orrs	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 0303 	and.w	r3, r3, #3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d123      	bne.n	800259c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	08da      	lsrs	r2, r3, #3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3208      	adds	r2, #8
 800255c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	220f      	movs	r2, #15
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	691a      	ldr	r2, [r3, #16]
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	08da      	lsrs	r2, r3, #3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	3208      	adds	r2, #8
 8002596:	69b9      	ldr	r1, [r7, #24]
 8002598:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	2203      	movs	r2, #3
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f003 0203 	and.w	r2, r3, #3
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f000 80be 	beq.w	800275a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025de:	4b66      	ldr	r3, [pc, #408]	@ (8002778 <HAL_GPIO_Init+0x324>)
 80025e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e2:	4a65      	ldr	r2, [pc, #404]	@ (8002778 <HAL_GPIO_Init+0x324>)
 80025e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80025ea:	4b63      	ldr	r3, [pc, #396]	@ (8002778 <HAL_GPIO_Init+0x324>)
 80025ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80025f6:	4a61      	ldr	r2, [pc, #388]	@ (800277c <HAL_GPIO_Init+0x328>)
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	089b      	lsrs	r3, r3, #2
 80025fc:	3302      	adds	r3, #2
 80025fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002602:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	220f      	movs	r2, #15
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	43db      	mvns	r3, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4013      	ands	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a58      	ldr	r2, [pc, #352]	@ (8002780 <HAL_GPIO_Init+0x32c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d037      	beq.n	8002692 <HAL_GPIO_Init+0x23e>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a57      	ldr	r2, [pc, #348]	@ (8002784 <HAL_GPIO_Init+0x330>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d031      	beq.n	800268e <HAL_GPIO_Init+0x23a>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a56      	ldr	r2, [pc, #344]	@ (8002788 <HAL_GPIO_Init+0x334>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d02b      	beq.n	800268a <HAL_GPIO_Init+0x236>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a55      	ldr	r2, [pc, #340]	@ (800278c <HAL_GPIO_Init+0x338>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d025      	beq.n	8002686 <HAL_GPIO_Init+0x232>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a54      	ldr	r2, [pc, #336]	@ (8002790 <HAL_GPIO_Init+0x33c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d01f      	beq.n	8002682 <HAL_GPIO_Init+0x22e>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a53      	ldr	r2, [pc, #332]	@ (8002794 <HAL_GPIO_Init+0x340>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d019      	beq.n	800267e <HAL_GPIO_Init+0x22a>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a52      	ldr	r2, [pc, #328]	@ (8002798 <HAL_GPIO_Init+0x344>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d013      	beq.n	800267a <HAL_GPIO_Init+0x226>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a51      	ldr	r2, [pc, #324]	@ (800279c <HAL_GPIO_Init+0x348>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d00d      	beq.n	8002676 <HAL_GPIO_Init+0x222>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a50      	ldr	r2, [pc, #320]	@ (80027a0 <HAL_GPIO_Init+0x34c>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d007      	beq.n	8002672 <HAL_GPIO_Init+0x21e>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a4f      	ldr	r2, [pc, #316]	@ (80027a4 <HAL_GPIO_Init+0x350>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d101      	bne.n	800266e <HAL_GPIO_Init+0x21a>
 800266a:	2309      	movs	r3, #9
 800266c:	e012      	b.n	8002694 <HAL_GPIO_Init+0x240>
 800266e:	230a      	movs	r3, #10
 8002670:	e010      	b.n	8002694 <HAL_GPIO_Init+0x240>
 8002672:	2308      	movs	r3, #8
 8002674:	e00e      	b.n	8002694 <HAL_GPIO_Init+0x240>
 8002676:	2307      	movs	r3, #7
 8002678:	e00c      	b.n	8002694 <HAL_GPIO_Init+0x240>
 800267a:	2306      	movs	r3, #6
 800267c:	e00a      	b.n	8002694 <HAL_GPIO_Init+0x240>
 800267e:	2305      	movs	r3, #5
 8002680:	e008      	b.n	8002694 <HAL_GPIO_Init+0x240>
 8002682:	2304      	movs	r3, #4
 8002684:	e006      	b.n	8002694 <HAL_GPIO_Init+0x240>
 8002686:	2303      	movs	r3, #3
 8002688:	e004      	b.n	8002694 <HAL_GPIO_Init+0x240>
 800268a:	2302      	movs	r3, #2
 800268c:	e002      	b.n	8002694 <HAL_GPIO_Init+0x240>
 800268e:	2301      	movs	r3, #1
 8002690:	e000      	b.n	8002694 <HAL_GPIO_Init+0x240>
 8002692:	2300      	movs	r3, #0
 8002694:	69fa      	ldr	r2, [r7, #28]
 8002696:	f002 0203 	and.w	r2, r2, #3
 800269a:	0092      	lsls	r2, r2, #2
 800269c:	4093      	lsls	r3, r2
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80026a4:	4935      	ldr	r1, [pc, #212]	@ (800277c <HAL_GPIO_Init+0x328>)
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	089b      	lsrs	r3, r3, #2
 80026aa:	3302      	adds	r3, #2
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026b2:	4b3d      	ldr	r3, [pc, #244]	@ (80027a8 <HAL_GPIO_Init+0x354>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	43db      	mvns	r3, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4013      	ands	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026d6:	4a34      	ldr	r2, [pc, #208]	@ (80027a8 <HAL_GPIO_Init+0x354>)
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026dc:	4b32      	ldr	r3, [pc, #200]	@ (80027a8 <HAL_GPIO_Init+0x354>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	43db      	mvns	r3, r3
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4013      	ands	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d003      	beq.n	8002700 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002700:	4a29      	ldr	r2, [pc, #164]	@ (80027a8 <HAL_GPIO_Init+0x354>)
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002706:	4b28      	ldr	r3, [pc, #160]	@ (80027a8 <HAL_GPIO_Init+0x354>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	43db      	mvns	r3, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4013      	ands	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	4313      	orrs	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800272a:	4a1f      	ldr	r2, [pc, #124]	@ (80027a8 <HAL_GPIO_Init+0x354>)
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002730:	4b1d      	ldr	r3, [pc, #116]	@ (80027a8 <HAL_GPIO_Init+0x354>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	43db      	mvns	r3, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4013      	ands	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d003      	beq.n	8002754 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	4313      	orrs	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002754:	4a14      	ldr	r2, [pc, #80]	@ (80027a8 <HAL_GPIO_Init+0x354>)
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	3301      	adds	r3, #1
 800275e:	61fb      	str	r3, [r7, #28]
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	2b0f      	cmp	r3, #15
 8002764:	f67f ae86 	bls.w	8002474 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002768:	bf00      	nop
 800276a:	bf00      	nop
 800276c:	3724      	adds	r7, #36	@ 0x24
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	40023800 	.word	0x40023800
 800277c:	40013800 	.word	0x40013800
 8002780:	40020000 	.word	0x40020000
 8002784:	40020400 	.word	0x40020400
 8002788:	40020800 	.word	0x40020800
 800278c:	40020c00 	.word	0x40020c00
 8002790:	40021000 	.word	0x40021000
 8002794:	40021400 	.word	0x40021400
 8002798:	40021800 	.word	0x40021800
 800279c:	40021c00 	.word	0x40021c00
 80027a0:	40022000 	.word	0x40022000
 80027a4:	40022400 	.word	0x40022400
 80027a8:	40013c00 	.word	0x40013c00

080027ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	460b      	mov	r3, r1
 80027b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691a      	ldr	r2, [r3, #16]
 80027bc:	887b      	ldrh	r3, [r7, #2]
 80027be:	4013      	ands	r3, r2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d002      	beq.n	80027ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027c4:	2301      	movs	r3, #1
 80027c6:	73fb      	strb	r3, [r7, #15]
 80027c8:	e001      	b.n	80027ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027ca:	2300      	movs	r3, #0
 80027cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	460b      	mov	r3, r1
 80027e6:	807b      	strh	r3, [r7, #2]
 80027e8:	4613      	mov	r3, r2
 80027ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027ec:	787b      	ldrb	r3, [r7, #1]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027f2:	887a      	ldrh	r2, [r7, #2]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80027f8:	e003      	b.n	8002802 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80027fa:	887b      	ldrh	r3, [r7, #2]
 80027fc:	041a      	lsls	r2, r3, #16
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	619a      	str	r2, [r3, #24]
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
	...

08002810 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e0bf      	b.n	80029a2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d106      	bne.n	800283c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7fe fc9a 	bl	8001170 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2202      	movs	r2, #2
 8002840:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	699a      	ldr	r2, [r3, #24]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8002852:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6999      	ldr	r1, [r3, #24]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002868:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	430a      	orrs	r2, r1
 8002876:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6899      	ldr	r1, [r3, #8]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	4b4a      	ldr	r3, [pc, #296]	@ (80029ac <HAL_LTDC_Init+0x19c>)
 8002884:	400b      	ands	r3, r1
 8002886:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	041b      	lsls	r3, r3, #16
 800288e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6899      	ldr	r1, [r3, #8]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	699a      	ldr	r2, [r3, #24]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	431a      	orrs	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68d9      	ldr	r1, [r3, #12]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	4b3e      	ldr	r3, [pc, #248]	@ (80029ac <HAL_LTDC_Init+0x19c>)
 80028b2:	400b      	ands	r3, r1
 80028b4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	041b      	lsls	r3, r3, #16
 80028bc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68d9      	ldr	r1, [r3, #12]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a1a      	ldr	r2, [r3, #32]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	431a      	orrs	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6919      	ldr	r1, [r3, #16]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	4b33      	ldr	r3, [pc, #204]	@ (80029ac <HAL_LTDC_Init+0x19c>)
 80028e0:	400b      	ands	r3, r1
 80028e2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e8:	041b      	lsls	r3, r3, #16
 80028ea:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6919      	ldr	r1, [r3, #16]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	431a      	orrs	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6959      	ldr	r1, [r3, #20]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	4b27      	ldr	r3, [pc, #156]	@ (80029ac <HAL_LTDC_Init+0x19c>)
 800290e:	400b      	ands	r3, r1
 8002910:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002916:	041b      	lsls	r3, r3, #16
 8002918:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6959      	ldr	r1, [r3, #20]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	431a      	orrs	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	430a      	orrs	r2, r1
 800292e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002936:	021b      	lsls	r3, r3, #8
 8002938:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8002940:	041b      	lsls	r3, r3, #16
 8002942:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8002952:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4313      	orrs	r3, r2
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8002966:	431a      	orrs	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f042 0206 	orr.w	r2, r2, #6
 800297e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	699a      	ldr	r2, [r3, #24]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f042 0201 	orr.w	r2, r2, #1
 800298e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	f000f800 	.word	0xf000f800

080029b0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80029b0:	b5b0      	push	{r4, r5, r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d101      	bne.n	80029ca <HAL_LTDC_ConfigLayer+0x1a>
 80029c6:	2302      	movs	r3, #2
 80029c8:	e02c      	b.n	8002a24 <HAL_LTDC_ConfigLayer+0x74>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2202      	movs	r2, #2
 80029d6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2134      	movs	r1, #52	@ 0x34
 80029e0:	fb01 f303 	mul.w	r3, r1, r3
 80029e4:	4413      	add	r3, r2
 80029e6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	4614      	mov	r4, r2
 80029ee:	461d      	mov	r5, r3
 80029f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029fc:	682b      	ldr	r3, [r5, #0]
 80029fe:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	68b9      	ldr	r1, [r7, #8]
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 f811 	bl	8002a2c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bdb0      	pop	{r4, r5, r7, pc}

08002a2c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b089      	sub	sp, #36	@ 0x24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	0c1b      	lsrs	r3, r3, #16
 8002a44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a48:	4413      	add	r3, r2
 8002a4a:	041b      	lsls	r3, r3, #16
 8002a4c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	461a      	mov	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	01db      	lsls	r3, r3, #7
 8002a58:	4413      	add	r3, r2
 8002a5a:	3384      	adds	r3, #132	@ 0x84
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	6812      	ldr	r2, [r2, #0]
 8002a62:	4611      	mov	r1, r2
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	01d2      	lsls	r2, r2, #7
 8002a68:	440a      	add	r2, r1
 8002a6a:	3284      	adds	r2, #132	@ 0x84
 8002a6c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002a70:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	0c1b      	lsrs	r3, r3, #16
 8002a7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002a82:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002a84:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	01db      	lsls	r3, r3, #7
 8002a90:	440b      	add	r3, r1
 8002a92:	3384      	adds	r3, #132	@ 0x84
 8002a94:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002a9a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	68da      	ldr	r2, [r3, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002aaa:	4413      	add	r3, r2
 8002aac:	041b      	lsls	r3, r3, #16
 8002aae:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	01db      	lsls	r3, r3, #7
 8002aba:	4413      	add	r3, r2
 8002abc:	3384      	adds	r3, #132	@ 0x84
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	6812      	ldr	r2, [r2, #0]
 8002ac4:	4611      	mov	r1, r2
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	01d2      	lsls	r2, r2, #7
 8002aca:	440a      	add	r2, r1
 8002acc:	3284      	adds	r2, #132	@ 0x84
 8002ace:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002ad2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ae2:	4413      	add	r3, r2
 8002ae4:	1c5a      	adds	r2, r3, #1
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4619      	mov	r1, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	01db      	lsls	r3, r3, #7
 8002af0:	440b      	add	r3, r1
 8002af2:	3384      	adds	r3, #132	@ 0x84
 8002af4:	4619      	mov	r1, r3
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	461a      	mov	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	01db      	lsls	r3, r3, #7
 8002b06:	4413      	add	r3, r2
 8002b08:	3384      	adds	r3, #132	@ 0x84
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	6812      	ldr	r2, [r2, #0]
 8002b10:	4611      	mov	r1, r2
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	01d2      	lsls	r2, r2, #7
 8002b16:	440a      	add	r2, r1
 8002b18:	3284      	adds	r2, #132	@ 0x84
 8002b1a:	f023 0307 	bic.w	r3, r3, #7
 8002b1e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	461a      	mov	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	01db      	lsls	r3, r3, #7
 8002b2a:	4413      	add	r3, r2
 8002b2c:	3384      	adds	r3, #132	@ 0x84
 8002b2e:	461a      	mov	r2, r3
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002b3c:	021b      	lsls	r3, r3, #8
 8002b3e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002b46:	041b      	lsls	r3, r3, #16
 8002b48:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	061b      	lsls	r3, r3, #24
 8002b50:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	461a      	mov	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	01db      	lsls	r3, r3, #7
 8002b5c:	4413      	add	r3, r2
 8002b5e:	3384      	adds	r3, #132	@ 0x84
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	461a      	mov	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	01db      	lsls	r3, r3, #7
 8002b6c:	4413      	add	r3, r2
 8002b6e:	3384      	adds	r3, #132	@ 0x84
 8002b70:	461a      	mov	r2, r3
 8002b72:	2300      	movs	r3, #0
 8002b74:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	431a      	orrs	r2, r3
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	431a      	orrs	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	01db      	lsls	r3, r3, #7
 8002b90:	440b      	add	r3, r1
 8002b92:	3384      	adds	r3, #132	@ 0x84
 8002b94:	4619      	mov	r1, r3
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	01db      	lsls	r3, r3, #7
 8002ba6:	4413      	add	r3, r2
 8002ba8:	3384      	adds	r3, #132	@ 0x84
 8002baa:	695b      	ldr	r3, [r3, #20]
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	6812      	ldr	r2, [r2, #0]
 8002bb0:	4611      	mov	r1, r2
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	01d2      	lsls	r2, r2, #7
 8002bb6:	440a      	add	r2, r1
 8002bb8:	3284      	adds	r2, #132	@ 0x84
 8002bba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002bbe:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	01db      	lsls	r3, r3, #7
 8002bca:	4413      	add	r3, r2
 8002bcc:	3384      	adds	r3, #132	@ 0x84
 8002bce:	461a      	mov	r2, r3
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	01db      	lsls	r3, r3, #7
 8002be0:	4413      	add	r3, r2
 8002be2:	3384      	adds	r3, #132	@ 0x84
 8002be4:	69da      	ldr	r2, [r3, #28]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4619      	mov	r1, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	01db      	lsls	r3, r3, #7
 8002bf0:	440b      	add	r3, r1
 8002bf2:	3384      	adds	r3, #132	@ 0x84
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4b58      	ldr	r3, [pc, #352]	@ (8002d58 <LTDC_SetConfig+0x32c>)
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	69da      	ldr	r2, [r3, #28]
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	68f9      	ldr	r1, [r7, #12]
 8002c06:	6809      	ldr	r1, [r1, #0]
 8002c08:	4608      	mov	r0, r1
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	01c9      	lsls	r1, r1, #7
 8002c0e:	4401      	add	r1, r0
 8002c10:	3184      	adds	r1, #132	@ 0x84
 8002c12:	4313      	orrs	r3, r2
 8002c14:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	01db      	lsls	r3, r3, #7
 8002c20:	4413      	add	r3, r2
 8002c22:	3384      	adds	r3, #132	@ 0x84
 8002c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	01db      	lsls	r3, r3, #7
 8002c30:	4413      	add	r3, r2
 8002c32:	3384      	adds	r3, #132	@ 0x84
 8002c34:	461a      	mov	r2, r3
 8002c36:	2300      	movs	r3, #0
 8002c38:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	01db      	lsls	r3, r3, #7
 8002c44:	4413      	add	r3, r2
 8002c46:	3384      	adds	r3, #132	@ 0x84
 8002c48:	461a      	mov	r2, r3
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4e:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d102      	bne.n	8002c5e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8002c58:	2304      	movs	r3, #4
 8002c5a:	61fb      	str	r3, [r7, #28]
 8002c5c:	e01b      	b.n	8002c96 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d102      	bne.n	8002c6c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8002c66:	2303      	movs	r3, #3
 8002c68:	61fb      	str	r3, [r7, #28]
 8002c6a:	e014      	b.n	8002c96 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	d00b      	beq.n	8002c8c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d007      	beq.n	8002c8c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002c80:	2b03      	cmp	r3, #3
 8002c82:	d003      	beq.n	8002c8c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002c88:	2b07      	cmp	r3, #7
 8002c8a:	d102      	bne.n	8002c92 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	61fb      	str	r3, [r7, #28]
 8002c90:	e001      	b.n	8002c96 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8002c92:	2301      	movs	r3, #1
 8002c94:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	01db      	lsls	r3, r3, #7
 8002ca0:	4413      	add	r3, r2
 8002ca2:	3384      	adds	r3, #132	@ 0x84
 8002ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	6812      	ldr	r2, [r2, #0]
 8002caa:	4611      	mov	r1, r2
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	01d2      	lsls	r2, r2, #7
 8002cb0:	440a      	add	r2, r1
 8002cb2:	3284      	adds	r2, #132	@ 0x84
 8002cb4:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8002cb8:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cbe:	69fa      	ldr	r2, [r7, #28]
 8002cc0:	fb02 f303 	mul.w	r3, r2, r3
 8002cc4:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	6859      	ldr	r1, [r3, #4]
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	1acb      	subs	r3, r1, r3
 8002cd0:	69f9      	ldr	r1, [r7, #28]
 8002cd2:	fb01 f303 	mul.w	r3, r1, r3
 8002cd6:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002cd8:	68f9      	ldr	r1, [r7, #12]
 8002cda:	6809      	ldr	r1, [r1, #0]
 8002cdc:	4608      	mov	r0, r1
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	01c9      	lsls	r1, r1, #7
 8002ce2:	4401      	add	r1, r0
 8002ce4:	3184      	adds	r1, #132	@ 0x84
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	01db      	lsls	r3, r3, #7
 8002cf4:	4413      	add	r3, r2
 8002cf6:	3384      	adds	r3, #132	@ 0x84
 8002cf8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4619      	mov	r1, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	01db      	lsls	r3, r3, #7
 8002d04:	440b      	add	r3, r1
 8002d06:	3384      	adds	r3, #132	@ 0x84
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4b14      	ldr	r3, [pc, #80]	@ (8002d5c <LTDC_SetConfig+0x330>)
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	461a      	mov	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	01db      	lsls	r3, r3, #7
 8002d1a:	4413      	add	r3, r2
 8002d1c:	3384      	adds	r3, #132	@ 0x84
 8002d1e:	461a      	mov	r2, r3
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d24:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	01db      	lsls	r3, r3, #7
 8002d30:	4413      	add	r3, r2
 8002d32:	3384      	adds	r3, #132	@ 0x84
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	6812      	ldr	r2, [r2, #0]
 8002d3a:	4611      	mov	r1, r2
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	01d2      	lsls	r2, r2, #7
 8002d40:	440a      	add	r2, r1
 8002d42:	3284      	adds	r2, #132	@ 0x84
 8002d44:	f043 0301 	orr.w	r3, r3, #1
 8002d48:	6013      	str	r3, [r2, #0]
}
 8002d4a:	bf00      	nop
 8002d4c:	3724      	adds	r7, #36	@ 0x24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	fffff8f8 	.word	0xfffff8f8
 8002d5c:	fffff800 	.word	0xfffff800

08002d60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e291      	b.n	800329a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f000 8087 	beq.w	8002e92 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d84:	4b96      	ldr	r3, [pc, #600]	@ (8002fe0 <HAL_RCC_OscConfig+0x280>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f003 030c 	and.w	r3, r3, #12
 8002d8c:	2b04      	cmp	r3, #4
 8002d8e:	d00c      	beq.n	8002daa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d90:	4b93      	ldr	r3, [pc, #588]	@ (8002fe0 <HAL_RCC_OscConfig+0x280>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f003 030c 	and.w	r3, r3, #12
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	d112      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x62>
 8002d9c:	4b90      	ldr	r3, [pc, #576]	@ (8002fe0 <HAL_RCC_OscConfig+0x280>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002da4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002da8:	d10b      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002daa:	4b8d      	ldr	r3, [pc, #564]	@ (8002fe0 <HAL_RCC_OscConfig+0x280>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d06c      	beq.n	8002e90 <HAL_RCC_OscConfig+0x130>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d168      	bne.n	8002e90 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e26b      	b.n	800329a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dca:	d106      	bne.n	8002dda <HAL_RCC_OscConfig+0x7a>
 8002dcc:	4b84      	ldr	r3, [pc, #528]	@ (8002fe0 <HAL_RCC_OscConfig+0x280>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a83      	ldr	r2, [pc, #524]	@ (8002fe0 <HAL_RCC_OscConfig+0x280>)
 8002dd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dd6:	6013      	str	r3, [r2, #0]
 8002dd8:	e02e      	b.n	8002e38 <HAL_RCC_OscConfig+0xd8>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10c      	bne.n	8002dfc <HAL_RCC_OscConfig+0x9c>
 8002de2:	4b7f      	ldr	r3, [pc, #508]	@ (8002fe0 <HAL_RCC_OscConfig+0x280>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a7e      	ldr	r2, [pc, #504]	@ (8002fe0 <HAL_RCC_OscConfig+0x280>)
 8002de8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dec:	6013      	str	r3, [r2, #0]
 8002dee:	4b7c      	ldr	r3, [pc, #496]	@ (8002fe0 <HAL_RCC_OscConfig+0x280>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a7b      	ldr	r2, [pc, #492]	@ (8002fe0 <HAL_RCC_OscConfig+0x280>)
 8002df4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	e01d      	b.n	8002e38 <HAL_RCC_OscConfig+0xd8>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e04:	d10c      	bne.n	8002e20 <HAL_RCC_OscConfig+0xc0>
 8002e06:	4b76      	ldr	r3, [pc, #472]	@ (8002fe0 <HAL_RCC_OscConfig+0x280>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a75      	ldr	r2, [pc, #468]	@ (8002fe0 <HAL_RCC_OscConfig+0x280>)
 8002e0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	4b73      	ldr	r3, [pc, #460]	@ (8002fe0 <HAL_RCC_OscConfig+0x280>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a72      	ldr	r2, [pc, #456]	@ (8002fe0 <HAL_RCC_OscConfig+0x280>)
 8002e18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e1c:	6013      	str	r3, [r2, #0]
 8002e1e:	e00b      	b.n	8002e38 <HAL_RCC_OscConfig+0xd8>
 8002e20:	4b6f      	ldr	r3, [pc, #444]	@ (8002fe0 <HAL_RCC_OscConfig+0x280>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a6e      	ldr	r2, [pc, #440]	@ (8002fe0 <HAL_RCC_OscConfig+0x280>)
 8002e26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e2a:	6013      	str	r3, [r2, #0]
 8002e2c:	4b6c      	ldr	r3, [pc, #432]	@ (8002fe0 <HAL_RCC_OscConfig+0x280>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a6b      	ldr	r2, [pc, #428]	@ (8002fe0 <HAL_RCC_OscConfig+0x280>)
 8002e32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d013      	beq.n	8002e68 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e40:	f7fe fd44 	bl	80018cc <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e48:	f7fe fd40 	bl	80018cc <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b64      	cmp	r3, #100	@ 0x64
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e21f      	b.n	800329a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e5a:	4b61      	ldr	r3, [pc, #388]	@ (8002fe0 <HAL_RCC_OscConfig+0x280>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0f0      	beq.n	8002e48 <HAL_RCC_OscConfig+0xe8>
 8002e66:	e014      	b.n	8002e92 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e68:	f7fe fd30 	bl	80018cc <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e70:	f7fe fd2c 	bl	80018cc <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b64      	cmp	r3, #100	@ 0x64
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e20b      	b.n	800329a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e82:	4b57      	ldr	r3, [pc, #348]	@ (8002fe0 <HAL_RCC_OscConfig+0x280>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1f0      	bne.n	8002e70 <HAL_RCC_OscConfig+0x110>
 8002e8e:	e000      	b.n	8002e92 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d069      	beq.n	8002f72 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e9e:	4b50      	ldr	r3, [pc, #320]	@ (8002fe0 <HAL_RCC_OscConfig+0x280>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 030c 	and.w	r3, r3, #12
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00b      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eaa:	4b4d      	ldr	r3, [pc, #308]	@ (8002fe0 <HAL_RCC_OscConfig+0x280>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f003 030c 	and.w	r3, r3, #12
 8002eb2:	2b08      	cmp	r3, #8
 8002eb4:	d11c      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x190>
 8002eb6:	4b4a      	ldr	r3, [pc, #296]	@ (8002fe0 <HAL_RCC_OscConfig+0x280>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d116      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ec2:	4b47      	ldr	r3, [pc, #284]	@ (8002fe0 <HAL_RCC_OscConfig+0x280>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d005      	beq.n	8002eda <HAL_RCC_OscConfig+0x17a>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d001      	beq.n	8002eda <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e1df      	b.n	800329a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eda:	4b41      	ldr	r3, [pc, #260]	@ (8002fe0 <HAL_RCC_OscConfig+0x280>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	493d      	ldr	r1, [pc, #244]	@ (8002fe0 <HAL_RCC_OscConfig+0x280>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eee:	e040      	b.n	8002f72 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d023      	beq.n	8002f40 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ef8:	4b39      	ldr	r3, [pc, #228]	@ (8002fe0 <HAL_RCC_OscConfig+0x280>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a38      	ldr	r2, [pc, #224]	@ (8002fe0 <HAL_RCC_OscConfig+0x280>)
 8002efe:	f043 0301 	orr.w	r3, r3, #1
 8002f02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f04:	f7fe fce2 	bl	80018cc <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f0c:	f7fe fcde 	bl	80018cc <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e1bd      	b.n	800329a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f1e:	4b30      	ldr	r3, [pc, #192]	@ (8002fe0 <HAL_RCC_OscConfig+0x280>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0f0      	beq.n	8002f0c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f2a:	4b2d      	ldr	r3, [pc, #180]	@ (8002fe0 <HAL_RCC_OscConfig+0x280>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	4929      	ldr	r1, [pc, #164]	@ (8002fe0 <HAL_RCC_OscConfig+0x280>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	600b      	str	r3, [r1, #0]
 8002f3e:	e018      	b.n	8002f72 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f40:	4b27      	ldr	r3, [pc, #156]	@ (8002fe0 <HAL_RCC_OscConfig+0x280>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a26      	ldr	r2, [pc, #152]	@ (8002fe0 <HAL_RCC_OscConfig+0x280>)
 8002f46:	f023 0301 	bic.w	r3, r3, #1
 8002f4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4c:	f7fe fcbe 	bl	80018cc <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f54:	f7fe fcba 	bl	80018cc <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e199      	b.n	800329a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f66:	4b1e      	ldr	r3, [pc, #120]	@ (8002fe0 <HAL_RCC_OscConfig+0x280>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1f0      	bne.n	8002f54 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d038      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d019      	beq.n	8002fba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f86:	4b16      	ldr	r3, [pc, #88]	@ (8002fe0 <HAL_RCC_OscConfig+0x280>)
 8002f88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f8a:	4a15      	ldr	r2, [pc, #84]	@ (8002fe0 <HAL_RCC_OscConfig+0x280>)
 8002f8c:	f043 0301 	orr.w	r3, r3, #1
 8002f90:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f92:	f7fe fc9b 	bl	80018cc <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f9a:	f7fe fc97 	bl	80018cc <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e176      	b.n	800329a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fac:	4b0c      	ldr	r3, [pc, #48]	@ (8002fe0 <HAL_RCC_OscConfig+0x280>)
 8002fae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0f0      	beq.n	8002f9a <HAL_RCC_OscConfig+0x23a>
 8002fb8:	e01a      	b.n	8002ff0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fba:	4b09      	ldr	r3, [pc, #36]	@ (8002fe0 <HAL_RCC_OscConfig+0x280>)
 8002fbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fbe:	4a08      	ldr	r2, [pc, #32]	@ (8002fe0 <HAL_RCC_OscConfig+0x280>)
 8002fc0:	f023 0301 	bic.w	r3, r3, #1
 8002fc4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc6:	f7fe fc81 	bl	80018cc <HAL_GetTick>
 8002fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fcc:	e00a      	b.n	8002fe4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fce:	f7fe fc7d 	bl	80018cc <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d903      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e15c      	b.n	800329a <HAL_RCC_OscConfig+0x53a>
 8002fe0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fe4:	4b91      	ldr	r3, [pc, #580]	@ (800322c <HAL_RCC_OscConfig+0x4cc>)
 8002fe6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1ee      	bne.n	8002fce <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0304 	and.w	r3, r3, #4
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 80a4 	beq.w	8003146 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ffe:	4b8b      	ldr	r3, [pc, #556]	@ (800322c <HAL_RCC_OscConfig+0x4cc>)
 8003000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003002:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10d      	bne.n	8003026 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800300a:	4b88      	ldr	r3, [pc, #544]	@ (800322c <HAL_RCC_OscConfig+0x4cc>)
 800300c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300e:	4a87      	ldr	r2, [pc, #540]	@ (800322c <HAL_RCC_OscConfig+0x4cc>)
 8003010:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003014:	6413      	str	r3, [r2, #64]	@ 0x40
 8003016:	4b85      	ldr	r3, [pc, #532]	@ (800322c <HAL_RCC_OscConfig+0x4cc>)
 8003018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800301e:	60bb      	str	r3, [r7, #8]
 8003020:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003022:	2301      	movs	r3, #1
 8003024:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003026:	4b82      	ldr	r3, [pc, #520]	@ (8003230 <HAL_RCC_OscConfig+0x4d0>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800302e:	2b00      	cmp	r3, #0
 8003030:	d118      	bne.n	8003064 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003032:	4b7f      	ldr	r3, [pc, #508]	@ (8003230 <HAL_RCC_OscConfig+0x4d0>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a7e      	ldr	r2, [pc, #504]	@ (8003230 <HAL_RCC_OscConfig+0x4d0>)
 8003038:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800303c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800303e:	f7fe fc45 	bl	80018cc <HAL_GetTick>
 8003042:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003044:	e008      	b.n	8003058 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003046:	f7fe fc41 	bl	80018cc <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b64      	cmp	r3, #100	@ 0x64
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e120      	b.n	800329a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003058:	4b75      	ldr	r3, [pc, #468]	@ (8003230 <HAL_RCC_OscConfig+0x4d0>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003060:	2b00      	cmp	r3, #0
 8003062:	d0f0      	beq.n	8003046 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d106      	bne.n	800307a <HAL_RCC_OscConfig+0x31a>
 800306c:	4b6f      	ldr	r3, [pc, #444]	@ (800322c <HAL_RCC_OscConfig+0x4cc>)
 800306e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003070:	4a6e      	ldr	r2, [pc, #440]	@ (800322c <HAL_RCC_OscConfig+0x4cc>)
 8003072:	f043 0301 	orr.w	r3, r3, #1
 8003076:	6713      	str	r3, [r2, #112]	@ 0x70
 8003078:	e02d      	b.n	80030d6 <HAL_RCC_OscConfig+0x376>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10c      	bne.n	800309c <HAL_RCC_OscConfig+0x33c>
 8003082:	4b6a      	ldr	r3, [pc, #424]	@ (800322c <HAL_RCC_OscConfig+0x4cc>)
 8003084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003086:	4a69      	ldr	r2, [pc, #420]	@ (800322c <HAL_RCC_OscConfig+0x4cc>)
 8003088:	f023 0301 	bic.w	r3, r3, #1
 800308c:	6713      	str	r3, [r2, #112]	@ 0x70
 800308e:	4b67      	ldr	r3, [pc, #412]	@ (800322c <HAL_RCC_OscConfig+0x4cc>)
 8003090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003092:	4a66      	ldr	r2, [pc, #408]	@ (800322c <HAL_RCC_OscConfig+0x4cc>)
 8003094:	f023 0304 	bic.w	r3, r3, #4
 8003098:	6713      	str	r3, [r2, #112]	@ 0x70
 800309a:	e01c      	b.n	80030d6 <HAL_RCC_OscConfig+0x376>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	2b05      	cmp	r3, #5
 80030a2:	d10c      	bne.n	80030be <HAL_RCC_OscConfig+0x35e>
 80030a4:	4b61      	ldr	r3, [pc, #388]	@ (800322c <HAL_RCC_OscConfig+0x4cc>)
 80030a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030a8:	4a60      	ldr	r2, [pc, #384]	@ (800322c <HAL_RCC_OscConfig+0x4cc>)
 80030aa:	f043 0304 	orr.w	r3, r3, #4
 80030ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80030b0:	4b5e      	ldr	r3, [pc, #376]	@ (800322c <HAL_RCC_OscConfig+0x4cc>)
 80030b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b4:	4a5d      	ldr	r2, [pc, #372]	@ (800322c <HAL_RCC_OscConfig+0x4cc>)
 80030b6:	f043 0301 	orr.w	r3, r3, #1
 80030ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80030bc:	e00b      	b.n	80030d6 <HAL_RCC_OscConfig+0x376>
 80030be:	4b5b      	ldr	r3, [pc, #364]	@ (800322c <HAL_RCC_OscConfig+0x4cc>)
 80030c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030c2:	4a5a      	ldr	r2, [pc, #360]	@ (800322c <HAL_RCC_OscConfig+0x4cc>)
 80030c4:	f023 0301 	bic.w	r3, r3, #1
 80030c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80030ca:	4b58      	ldr	r3, [pc, #352]	@ (800322c <HAL_RCC_OscConfig+0x4cc>)
 80030cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ce:	4a57      	ldr	r2, [pc, #348]	@ (800322c <HAL_RCC_OscConfig+0x4cc>)
 80030d0:	f023 0304 	bic.w	r3, r3, #4
 80030d4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d015      	beq.n	800310a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030de:	f7fe fbf5 	bl	80018cc <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e4:	e00a      	b.n	80030fc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030e6:	f7fe fbf1 	bl	80018cc <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e0ce      	b.n	800329a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030fc:	4b4b      	ldr	r3, [pc, #300]	@ (800322c <HAL_RCC_OscConfig+0x4cc>)
 80030fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0ee      	beq.n	80030e6 <HAL_RCC_OscConfig+0x386>
 8003108:	e014      	b.n	8003134 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800310a:	f7fe fbdf 	bl	80018cc <HAL_GetTick>
 800310e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003110:	e00a      	b.n	8003128 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003112:	f7fe fbdb 	bl	80018cc <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003120:	4293      	cmp	r3, r2
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e0b8      	b.n	800329a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003128:	4b40      	ldr	r3, [pc, #256]	@ (800322c <HAL_RCC_OscConfig+0x4cc>)
 800312a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1ee      	bne.n	8003112 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003134:	7dfb      	ldrb	r3, [r7, #23]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d105      	bne.n	8003146 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800313a:	4b3c      	ldr	r3, [pc, #240]	@ (800322c <HAL_RCC_OscConfig+0x4cc>)
 800313c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313e:	4a3b      	ldr	r2, [pc, #236]	@ (800322c <HAL_RCC_OscConfig+0x4cc>)
 8003140:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003144:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	2b00      	cmp	r3, #0
 800314c:	f000 80a4 	beq.w	8003298 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003150:	4b36      	ldr	r3, [pc, #216]	@ (800322c <HAL_RCC_OscConfig+0x4cc>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 030c 	and.w	r3, r3, #12
 8003158:	2b08      	cmp	r3, #8
 800315a:	d06b      	beq.n	8003234 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	2b02      	cmp	r3, #2
 8003162:	d149      	bne.n	80031f8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003164:	4b31      	ldr	r3, [pc, #196]	@ (800322c <HAL_RCC_OscConfig+0x4cc>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a30      	ldr	r2, [pc, #192]	@ (800322c <HAL_RCC_OscConfig+0x4cc>)
 800316a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800316e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003170:	f7fe fbac 	bl	80018cc <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003178:	f7fe fba8 	bl	80018cc <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e087      	b.n	800329a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800318a:	4b28      	ldr	r3, [pc, #160]	@ (800322c <HAL_RCC_OscConfig+0x4cc>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1f0      	bne.n	8003178 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69da      	ldr	r2, [r3, #28]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a4:	019b      	lsls	r3, r3, #6
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ac:	085b      	lsrs	r3, r3, #1
 80031ae:	3b01      	subs	r3, #1
 80031b0:	041b      	lsls	r3, r3, #16
 80031b2:	431a      	orrs	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b8:	061b      	lsls	r3, r3, #24
 80031ba:	4313      	orrs	r3, r2
 80031bc:	4a1b      	ldr	r2, [pc, #108]	@ (800322c <HAL_RCC_OscConfig+0x4cc>)
 80031be:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80031c2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031c4:	4b19      	ldr	r3, [pc, #100]	@ (800322c <HAL_RCC_OscConfig+0x4cc>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a18      	ldr	r2, [pc, #96]	@ (800322c <HAL_RCC_OscConfig+0x4cc>)
 80031ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d0:	f7fe fb7c 	bl	80018cc <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d8:	f7fe fb78 	bl	80018cc <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e057      	b.n	800329a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ea:	4b10      	ldr	r3, [pc, #64]	@ (800322c <HAL_RCC_OscConfig+0x4cc>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d0f0      	beq.n	80031d8 <HAL_RCC_OscConfig+0x478>
 80031f6:	e04f      	b.n	8003298 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f8:	4b0c      	ldr	r3, [pc, #48]	@ (800322c <HAL_RCC_OscConfig+0x4cc>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a0b      	ldr	r2, [pc, #44]	@ (800322c <HAL_RCC_OscConfig+0x4cc>)
 80031fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003202:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003204:	f7fe fb62 	bl	80018cc <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800320c:	f7fe fb5e 	bl	80018cc <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e03d      	b.n	800329a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800321e:	4b03      	ldr	r3, [pc, #12]	@ (800322c <HAL_RCC_OscConfig+0x4cc>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1f0      	bne.n	800320c <HAL_RCC_OscConfig+0x4ac>
 800322a:	e035      	b.n	8003298 <HAL_RCC_OscConfig+0x538>
 800322c:	40023800 	.word	0x40023800
 8003230:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003234:	4b1b      	ldr	r3, [pc, #108]	@ (80032a4 <HAL_RCC_OscConfig+0x544>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d028      	beq.n	8003294 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800324c:	429a      	cmp	r2, r3
 800324e:	d121      	bne.n	8003294 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800325a:	429a      	cmp	r2, r3
 800325c:	d11a      	bne.n	8003294 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003264:	4013      	ands	r3, r2
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800326a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800326c:	4293      	cmp	r3, r2
 800326e:	d111      	bne.n	8003294 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800327a:	085b      	lsrs	r3, r3, #1
 800327c:	3b01      	subs	r3, #1
 800327e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003280:	429a      	cmp	r2, r3
 8003282:	d107      	bne.n	8003294 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800328e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003290:	429a      	cmp	r2, r3
 8003292:	d001      	beq.n	8003298 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e000      	b.n	800329a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3718      	adds	r7, #24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	40023800 	.word	0x40023800

080032a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80032b2:	2300      	movs	r3, #0
 80032b4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e0d0      	b.n	8003462 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032c0:	4b6a      	ldr	r3, [pc, #424]	@ (800346c <HAL_RCC_ClockConfig+0x1c4>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 030f 	and.w	r3, r3, #15
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d910      	bls.n	80032f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ce:	4b67      	ldr	r3, [pc, #412]	@ (800346c <HAL_RCC_ClockConfig+0x1c4>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f023 020f 	bic.w	r2, r3, #15
 80032d6:	4965      	ldr	r1, [pc, #404]	@ (800346c <HAL_RCC_ClockConfig+0x1c4>)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	4313      	orrs	r3, r2
 80032dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032de:	4b63      	ldr	r3, [pc, #396]	@ (800346c <HAL_RCC_ClockConfig+0x1c4>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 030f 	and.w	r3, r3, #15
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d001      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e0b8      	b.n	8003462 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d020      	beq.n	800333e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	d005      	beq.n	8003314 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003308:	4b59      	ldr	r3, [pc, #356]	@ (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	4a58      	ldr	r2, [pc, #352]	@ (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 800330e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003312:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0308 	and.w	r3, r3, #8
 800331c:	2b00      	cmp	r3, #0
 800331e:	d005      	beq.n	800332c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003320:	4b53      	ldr	r3, [pc, #332]	@ (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	4a52      	ldr	r2, [pc, #328]	@ (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 8003326:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800332a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800332c:	4b50      	ldr	r3, [pc, #320]	@ (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	494d      	ldr	r1, [pc, #308]	@ (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 800333a:	4313      	orrs	r3, r2
 800333c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d040      	beq.n	80033cc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d107      	bne.n	8003362 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003352:	4b47      	ldr	r3, [pc, #284]	@ (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d115      	bne.n	800338a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e07f      	b.n	8003462 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2b02      	cmp	r3, #2
 8003368:	d107      	bne.n	800337a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800336a:	4b41      	ldr	r3, [pc, #260]	@ (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d109      	bne.n	800338a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e073      	b.n	8003462 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800337a:	4b3d      	ldr	r3, [pc, #244]	@ (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e06b      	b.n	8003462 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800338a:	4b39      	ldr	r3, [pc, #228]	@ (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f023 0203 	bic.w	r2, r3, #3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	4936      	ldr	r1, [pc, #216]	@ (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 8003398:	4313      	orrs	r3, r2
 800339a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800339c:	f7fe fa96 	bl	80018cc <HAL_GetTick>
 80033a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033a2:	e00a      	b.n	80033ba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033a4:	f7fe fa92 	bl	80018cc <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e053      	b.n	8003462 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ba:	4b2d      	ldr	r3, [pc, #180]	@ (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 020c 	and.w	r2, r3, #12
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d1eb      	bne.n	80033a4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033cc:	4b27      	ldr	r3, [pc, #156]	@ (800346c <HAL_RCC_ClockConfig+0x1c4>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 030f 	and.w	r3, r3, #15
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d210      	bcs.n	80033fc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033da:	4b24      	ldr	r3, [pc, #144]	@ (800346c <HAL_RCC_ClockConfig+0x1c4>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f023 020f 	bic.w	r2, r3, #15
 80033e2:	4922      	ldr	r1, [pc, #136]	@ (800346c <HAL_RCC_ClockConfig+0x1c4>)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ea:	4b20      	ldr	r3, [pc, #128]	@ (800346c <HAL_RCC_ClockConfig+0x1c4>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 030f 	and.w	r3, r3, #15
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d001      	beq.n	80033fc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e032      	b.n	8003462 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0304 	and.w	r3, r3, #4
 8003404:	2b00      	cmp	r3, #0
 8003406:	d008      	beq.n	800341a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003408:	4b19      	ldr	r3, [pc, #100]	@ (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	4916      	ldr	r1, [pc, #88]	@ (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 8003416:	4313      	orrs	r3, r2
 8003418:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0308 	and.w	r3, r3, #8
 8003422:	2b00      	cmp	r3, #0
 8003424:	d009      	beq.n	800343a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003426:	4b12      	ldr	r3, [pc, #72]	@ (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	490e      	ldr	r1, [pc, #56]	@ (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 8003436:	4313      	orrs	r3, r2
 8003438:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800343a:	f000 f821 	bl	8003480 <HAL_RCC_GetSysClockFreq>
 800343e:	4602      	mov	r2, r0
 8003440:	4b0b      	ldr	r3, [pc, #44]	@ (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	091b      	lsrs	r3, r3, #4
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	490a      	ldr	r1, [pc, #40]	@ (8003474 <HAL_RCC_ClockConfig+0x1cc>)
 800344c:	5ccb      	ldrb	r3, [r1, r3]
 800344e:	fa22 f303 	lsr.w	r3, r2, r3
 8003452:	4a09      	ldr	r2, [pc, #36]	@ (8003478 <HAL_RCC_ClockConfig+0x1d0>)
 8003454:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003456:	4b09      	ldr	r3, [pc, #36]	@ (800347c <HAL_RCC_ClockConfig+0x1d4>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f7fe f9f2 	bl	8001844 <HAL_InitTick>

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	40023c00 	.word	0x40023c00
 8003470:	40023800 	.word	0x40023800
 8003474:	08009878 	.word	0x08009878
 8003478:	20000000 	.word	0x20000000
 800347c:	20000004 	.word	0x20000004

08003480 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003480:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003484:	b090      	sub	sp, #64	@ 0x40
 8003486:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003488:	2300      	movs	r3, #0
 800348a:	637b      	str	r3, [r7, #52]	@ 0x34
 800348c:	2300      	movs	r3, #0
 800348e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003490:	2300      	movs	r3, #0
 8003492:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003494:	2300      	movs	r3, #0
 8003496:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003498:	4b59      	ldr	r3, [pc, #356]	@ (8003600 <HAL_RCC_GetSysClockFreq+0x180>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f003 030c 	and.w	r3, r3, #12
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	d00d      	beq.n	80034c0 <HAL_RCC_GetSysClockFreq+0x40>
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	f200 80a1 	bhi.w	80035ec <HAL_RCC_GetSysClockFreq+0x16c>
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d002      	beq.n	80034b4 <HAL_RCC_GetSysClockFreq+0x34>
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d003      	beq.n	80034ba <HAL_RCC_GetSysClockFreq+0x3a>
 80034b2:	e09b      	b.n	80035ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034b4:	4b53      	ldr	r3, [pc, #332]	@ (8003604 <HAL_RCC_GetSysClockFreq+0x184>)
 80034b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034b8:	e09b      	b.n	80035f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034ba:	4b53      	ldr	r3, [pc, #332]	@ (8003608 <HAL_RCC_GetSysClockFreq+0x188>)
 80034bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034be:	e098      	b.n	80035f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034c0:	4b4f      	ldr	r3, [pc, #316]	@ (8003600 <HAL_RCC_GetSysClockFreq+0x180>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034c8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80034ca:	4b4d      	ldr	r3, [pc, #308]	@ (8003600 <HAL_RCC_GetSysClockFreq+0x180>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d028      	beq.n	8003528 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034d6:	4b4a      	ldr	r3, [pc, #296]	@ (8003600 <HAL_RCC_GetSysClockFreq+0x180>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	099b      	lsrs	r3, r3, #6
 80034dc:	2200      	movs	r2, #0
 80034de:	623b      	str	r3, [r7, #32]
 80034e0:	627a      	str	r2, [r7, #36]	@ 0x24
 80034e2:	6a3b      	ldr	r3, [r7, #32]
 80034e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80034e8:	2100      	movs	r1, #0
 80034ea:	4b47      	ldr	r3, [pc, #284]	@ (8003608 <HAL_RCC_GetSysClockFreq+0x188>)
 80034ec:	fb03 f201 	mul.w	r2, r3, r1
 80034f0:	2300      	movs	r3, #0
 80034f2:	fb00 f303 	mul.w	r3, r0, r3
 80034f6:	4413      	add	r3, r2
 80034f8:	4a43      	ldr	r2, [pc, #268]	@ (8003608 <HAL_RCC_GetSysClockFreq+0x188>)
 80034fa:	fba0 1202 	umull	r1, r2, r0, r2
 80034fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003500:	460a      	mov	r2, r1
 8003502:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003504:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003506:	4413      	add	r3, r2
 8003508:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800350a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800350c:	2200      	movs	r2, #0
 800350e:	61bb      	str	r3, [r7, #24]
 8003510:	61fa      	str	r2, [r7, #28]
 8003512:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003516:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800351a:	f7fc fe75 	bl	8000208 <__aeabi_uldivmod>
 800351e:	4602      	mov	r2, r0
 8003520:	460b      	mov	r3, r1
 8003522:	4613      	mov	r3, r2
 8003524:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003526:	e053      	b.n	80035d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003528:	4b35      	ldr	r3, [pc, #212]	@ (8003600 <HAL_RCC_GetSysClockFreq+0x180>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	099b      	lsrs	r3, r3, #6
 800352e:	2200      	movs	r2, #0
 8003530:	613b      	str	r3, [r7, #16]
 8003532:	617a      	str	r2, [r7, #20]
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800353a:	f04f 0b00 	mov.w	fp, #0
 800353e:	4652      	mov	r2, sl
 8003540:	465b      	mov	r3, fp
 8003542:	f04f 0000 	mov.w	r0, #0
 8003546:	f04f 0100 	mov.w	r1, #0
 800354a:	0159      	lsls	r1, r3, #5
 800354c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003550:	0150      	lsls	r0, r2, #5
 8003552:	4602      	mov	r2, r0
 8003554:	460b      	mov	r3, r1
 8003556:	ebb2 080a 	subs.w	r8, r2, sl
 800355a:	eb63 090b 	sbc.w	r9, r3, fp
 800355e:	f04f 0200 	mov.w	r2, #0
 8003562:	f04f 0300 	mov.w	r3, #0
 8003566:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800356a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800356e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003572:	ebb2 0408 	subs.w	r4, r2, r8
 8003576:	eb63 0509 	sbc.w	r5, r3, r9
 800357a:	f04f 0200 	mov.w	r2, #0
 800357e:	f04f 0300 	mov.w	r3, #0
 8003582:	00eb      	lsls	r3, r5, #3
 8003584:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003588:	00e2      	lsls	r2, r4, #3
 800358a:	4614      	mov	r4, r2
 800358c:	461d      	mov	r5, r3
 800358e:	eb14 030a 	adds.w	r3, r4, sl
 8003592:	603b      	str	r3, [r7, #0]
 8003594:	eb45 030b 	adc.w	r3, r5, fp
 8003598:	607b      	str	r3, [r7, #4]
 800359a:	f04f 0200 	mov.w	r2, #0
 800359e:	f04f 0300 	mov.w	r3, #0
 80035a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035a6:	4629      	mov	r1, r5
 80035a8:	028b      	lsls	r3, r1, #10
 80035aa:	4621      	mov	r1, r4
 80035ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035b0:	4621      	mov	r1, r4
 80035b2:	028a      	lsls	r2, r1, #10
 80035b4:	4610      	mov	r0, r2
 80035b6:	4619      	mov	r1, r3
 80035b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ba:	2200      	movs	r2, #0
 80035bc:	60bb      	str	r3, [r7, #8]
 80035be:	60fa      	str	r2, [r7, #12]
 80035c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035c4:	f7fc fe20 	bl	8000208 <__aeabi_uldivmod>
 80035c8:	4602      	mov	r2, r0
 80035ca:	460b      	mov	r3, r1
 80035cc:	4613      	mov	r3, r2
 80035ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80035d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003600 <HAL_RCC_GetSysClockFreq+0x180>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	0c1b      	lsrs	r3, r3, #16
 80035d6:	f003 0303 	and.w	r3, r3, #3
 80035da:	3301      	adds	r3, #1
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80035e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80035e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035ea:	e002      	b.n	80035f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035ec:	4b05      	ldr	r3, [pc, #20]	@ (8003604 <HAL_RCC_GetSysClockFreq+0x184>)
 80035ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3740      	adds	r7, #64	@ 0x40
 80035f8:	46bd      	mov	sp, r7
 80035fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035fe:	bf00      	nop
 8003600:	40023800 	.word	0x40023800
 8003604:	00f42400 	.word	0x00f42400
 8003608:	017d7840 	.word	0x017d7840

0800360c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b088      	sub	sp, #32
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003614:	2300      	movs	r3, #0
 8003616:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003618:	2300      	movs	r3, #0
 800361a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800361c:	2300      	movs	r3, #0
 800361e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003620:	2300      	movs	r3, #0
 8003622:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003624:	2300      	movs	r3, #0
 8003626:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	2b00      	cmp	r3, #0
 8003632:	d012      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003634:	4b69      	ldr	r3, [pc, #420]	@ (80037dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	4a68      	ldr	r2, [pc, #416]	@ (80037dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800363a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800363e:	6093      	str	r3, [r2, #8]
 8003640:	4b66      	ldr	r3, [pc, #408]	@ (80037dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003648:	4964      	ldr	r1, [pc, #400]	@ (80037dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800364a:	4313      	orrs	r3, r2
 800364c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003656:	2301      	movs	r3, #1
 8003658:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d017      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003666:	4b5d      	ldr	r3, [pc, #372]	@ (80037dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003668:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800366c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003674:	4959      	ldr	r1, [pc, #356]	@ (80037dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003676:	4313      	orrs	r3, r2
 8003678:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003680:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003684:	d101      	bne.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003686:	2301      	movs	r3, #1
 8003688:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003692:	2301      	movs	r3, #1
 8003694:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d017      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80036a2:	4b4e      	ldr	r3, [pc, #312]	@ (80037dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036a8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b0:	494a      	ldr	r1, [pc, #296]	@ (80037dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036c0:	d101      	bne.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80036c2:	2301      	movs	r3, #1
 80036c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80036ce:	2301      	movs	r3, #1
 80036d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80036de:	2301      	movs	r3, #1
 80036e0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0320 	and.w	r3, r3, #32
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 808b 	beq.w	8003806 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80036f0:	4b3a      	ldr	r3, [pc, #232]	@ (80037dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f4:	4a39      	ldr	r2, [pc, #228]	@ (80037dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80036fc:	4b37      	ldr	r3, [pc, #220]	@ (80037dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003700:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003704:	60bb      	str	r3, [r7, #8]
 8003706:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003708:	4b35      	ldr	r3, [pc, #212]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a34      	ldr	r2, [pc, #208]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800370e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003712:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003714:	f7fe f8da 	bl	80018cc <HAL_GetTick>
 8003718:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800371a:	e008      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800371c:	f7fe f8d6 	bl	80018cc <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b64      	cmp	r3, #100	@ 0x64
 8003728:	d901      	bls.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e357      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800372e:	4b2c      	ldr	r3, [pc, #176]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0f0      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800373a:	4b28      	ldr	r3, [pc, #160]	@ (80037dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800373c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800373e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003742:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d035      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	429a      	cmp	r2, r3
 8003756:	d02e      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003758:	4b20      	ldr	r3, [pc, #128]	@ (80037dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800375a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800375c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003760:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003762:	4b1e      	ldr	r3, [pc, #120]	@ (80037dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003766:	4a1d      	ldr	r2, [pc, #116]	@ (80037dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800376c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800376e:	4b1b      	ldr	r3, [pc, #108]	@ (80037dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003772:	4a1a      	ldr	r2, [pc, #104]	@ (80037dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003774:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003778:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800377a:	4a18      	ldr	r2, [pc, #96]	@ (80037dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003780:	4b16      	ldr	r3, [pc, #88]	@ (80037dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b01      	cmp	r3, #1
 800378a:	d114      	bne.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800378c:	f7fe f89e 	bl	80018cc <HAL_GetTick>
 8003790:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003792:	e00a      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003794:	f7fe f89a 	bl	80018cc <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d901      	bls.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e319      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037aa:	4b0c      	ldr	r3, [pc, #48]	@ (80037dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0ee      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037c2:	d111      	bne.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80037c4:	4b05      	ldr	r3, [pc, #20]	@ (80037dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80037d0:	4b04      	ldr	r3, [pc, #16]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80037d2:	400b      	ands	r3, r1
 80037d4:	4901      	ldr	r1, [pc, #4]	@ (80037dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	608b      	str	r3, [r1, #8]
 80037da:	e00b      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80037dc:	40023800 	.word	0x40023800
 80037e0:	40007000 	.word	0x40007000
 80037e4:	0ffffcff 	.word	0x0ffffcff
 80037e8:	4baa      	ldr	r3, [pc, #680]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	4aa9      	ldr	r2, [pc, #676]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ee:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80037f2:	6093      	str	r3, [r2, #8]
 80037f4:	4ba7      	ldr	r3, [pc, #668]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003800:	49a4      	ldr	r1, [pc, #656]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003802:	4313      	orrs	r3, r2
 8003804:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0310 	and.w	r3, r3, #16
 800380e:	2b00      	cmp	r3, #0
 8003810:	d010      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003812:	4ba0      	ldr	r3, [pc, #640]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003814:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003818:	4a9e      	ldr	r2, [pc, #632]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800381a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800381e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003822:	4b9c      	ldr	r3, [pc, #624]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003824:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800382c:	4999      	ldr	r1, [pc, #612]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800382e:	4313      	orrs	r3, r2
 8003830:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00a      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003840:	4b94      	ldr	r3, [pc, #592]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003846:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800384e:	4991      	ldr	r1, [pc, #580]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003850:	4313      	orrs	r3, r2
 8003852:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00a      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003862:	4b8c      	ldr	r3, [pc, #560]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003864:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003868:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003870:	4988      	ldr	r1, [pc, #544]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003872:	4313      	orrs	r3, r2
 8003874:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00a      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003884:	4b83      	ldr	r3, [pc, #524]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800388a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003892:	4980      	ldr	r1, [pc, #512]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003894:	4313      	orrs	r3, r2
 8003896:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00a      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80038a6:	4b7b      	ldr	r3, [pc, #492]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ac:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038b4:	4977      	ldr	r1, [pc, #476]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00a      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038c8:	4b72      	ldr	r3, [pc, #456]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ce:	f023 0203 	bic.w	r2, r3, #3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d6:	496f      	ldr	r1, [pc, #444]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00a      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038ea:	4b6a      	ldr	r3, [pc, #424]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038f0:	f023 020c 	bic.w	r2, r3, #12
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038f8:	4966      	ldr	r1, [pc, #408]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00a      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800390c:	4b61      	ldr	r3, [pc, #388]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800390e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003912:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800391a:	495e      	ldr	r1, [pc, #376]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800391c:	4313      	orrs	r3, r2
 800391e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00a      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800392e:	4b59      	ldr	r3, [pc, #356]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003930:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003934:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800393c:	4955      	ldr	r1, [pc, #340]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800393e:	4313      	orrs	r3, r2
 8003940:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00a      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003950:	4b50      	ldr	r3, [pc, #320]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003956:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800395e:	494d      	ldr	r1, [pc, #308]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003960:	4313      	orrs	r3, r2
 8003962:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00a      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003972:	4b48      	ldr	r3, [pc, #288]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003974:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003978:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003980:	4944      	ldr	r1, [pc, #272]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003982:	4313      	orrs	r3, r2
 8003984:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00a      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003994:	4b3f      	ldr	r3, [pc, #252]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800399a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039a2:	493c      	ldr	r1, [pc, #240]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00a      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80039b6:	4b37      	ldr	r3, [pc, #220]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039bc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039c4:	4933      	ldr	r1, [pc, #204]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00a      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80039d8:	4b2e      	ldr	r3, [pc, #184]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039de:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039e6:	492b      	ldr	r1, [pc, #172]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d011      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80039fa:	4b26      	ldr	r3, [pc, #152]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a00:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a08:	4922      	ldr	r1, [pc, #136]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a18:	d101      	bne.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0308 	and.w	r3, r3, #8
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00a      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a3a:	4b16      	ldr	r3, [pc, #88]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a40:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a48:	4912      	ldr	r1, [pc, #72]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00b      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a5c:	4b0d      	ldr	r3, [pc, #52]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a62:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a6c:	4909      	ldr	r1, [pc, #36]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d006      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 80d9 	beq.w	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a88:	4b02      	ldr	r3, [pc, #8]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a01      	ldr	r2, [pc, #4]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a8e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003a92:	e001      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003a94:	40023800 	.word	0x40023800
 8003a98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a9a:	f7fd ff17 	bl	80018cc <HAL_GetTick>
 8003a9e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003aa0:	e008      	b.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003aa2:	f7fd ff13 	bl	80018cc <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b64      	cmp	r3, #100	@ 0x64
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e194      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ab4:	4b6c      	ldr	r3, [pc, #432]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1f0      	bne.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d021      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d11d      	bne.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ad4:	4b64      	ldr	r3, [pc, #400]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ada:	0c1b      	lsrs	r3, r3, #16
 8003adc:	f003 0303 	and.w	r3, r3, #3
 8003ae0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ae2:	4b61      	ldr	r3, [pc, #388]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ae8:	0e1b      	lsrs	r3, r3, #24
 8003aea:	f003 030f 	and.w	r3, r3, #15
 8003aee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	019a      	lsls	r2, r3, #6
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	041b      	lsls	r3, r3, #16
 8003afa:	431a      	orrs	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	061b      	lsls	r3, r3, #24
 8003b00:	431a      	orrs	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	071b      	lsls	r3, r3, #28
 8003b08:	4957      	ldr	r1, [pc, #348]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d004      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b20:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b24:	d00a      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d02e      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b3a:	d129      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003b3c:	4b4a      	ldr	r3, [pc, #296]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b42:	0c1b      	lsrs	r3, r3, #16
 8003b44:	f003 0303 	and.w	r3, r3, #3
 8003b48:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b4a:	4b47      	ldr	r3, [pc, #284]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b50:	0f1b      	lsrs	r3, r3, #28
 8003b52:	f003 0307 	and.w	r3, r3, #7
 8003b56:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	019a      	lsls	r2, r3, #6
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	041b      	lsls	r3, r3, #16
 8003b62:	431a      	orrs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	061b      	lsls	r3, r3, #24
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	071b      	lsls	r3, r3, #28
 8003b70:	493d      	ldr	r1, [pc, #244]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003b78:	4b3b      	ldr	r3, [pc, #236]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b7e:	f023 021f 	bic.w	r2, r3, #31
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b86:	3b01      	subs	r3, #1
 8003b88:	4937      	ldr	r1, [pc, #220]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d01d      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b9c:	4b32      	ldr	r3, [pc, #200]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ba2:	0e1b      	lsrs	r3, r3, #24
 8003ba4:	f003 030f 	and.w	r3, r3, #15
 8003ba8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003baa:	4b2f      	ldr	r3, [pc, #188]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bb0:	0f1b      	lsrs	r3, r3, #28
 8003bb2:	f003 0307 	and.w	r3, r3, #7
 8003bb6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	019a      	lsls	r2, r3, #6
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	041b      	lsls	r3, r3, #16
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	061b      	lsls	r3, r3, #24
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	071b      	lsls	r3, r3, #28
 8003bd0:	4925      	ldr	r1, [pc, #148]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d011      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	019a      	lsls	r2, r3, #6
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	041b      	lsls	r3, r3, #16
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	061b      	lsls	r3, r3, #24
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	071b      	lsls	r3, r3, #28
 8003c00:	4919      	ldr	r1, [pc, #100]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c08:	4b17      	ldr	r3, [pc, #92]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a16      	ldr	r2, [pc, #88]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c0e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003c12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c14:	f7fd fe5a 	bl	80018cc <HAL_GetTick>
 8003c18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c1a:	e008      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c1c:	f7fd fe56 	bl	80018cc <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b64      	cmp	r3, #100	@ 0x64
 8003c28:	d901      	bls.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e0d7      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d0f0      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	f040 80cd 	bne.w	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003c42:	4b09      	ldr	r3, [pc, #36]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a08      	ldr	r2, [pc, #32]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c4e:	f7fd fe3d 	bl	80018cc <HAL_GetTick>
 8003c52:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c54:	e00a      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c56:	f7fd fe39 	bl	80018cc <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b64      	cmp	r3, #100	@ 0x64
 8003c62:	d903      	bls.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e0ba      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003c68:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c6c:	4b5e      	ldr	r3, [pc, #376]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c78:	d0ed      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d009      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d02e      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d12a      	bne.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ca2:	4b51      	ldr	r3, [pc, #324]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ca8:	0c1b      	lsrs	r3, r3, #16
 8003caa:	f003 0303 	and.w	r3, r3, #3
 8003cae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003cb0:	4b4d      	ldr	r3, [pc, #308]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cb6:	0f1b      	lsrs	r3, r3, #28
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	019a      	lsls	r2, r3, #6
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	041b      	lsls	r3, r3, #16
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	061b      	lsls	r3, r3, #24
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	071b      	lsls	r3, r3, #28
 8003cd6:	4944      	ldr	r1, [pc, #272]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003cde:	4b42      	ldr	r3, [pc, #264]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ce4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cec:	3b01      	subs	r3, #1
 8003cee:	021b      	lsls	r3, r3, #8
 8003cf0:	493d      	ldr	r1, [pc, #244]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d022      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d0c:	d11d      	bne.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d0e:	4b36      	ldr	r3, [pc, #216]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d14:	0e1b      	lsrs	r3, r3, #24
 8003d16:	f003 030f 	and.w	r3, r3, #15
 8003d1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d1c:	4b32      	ldr	r3, [pc, #200]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d22:	0f1b      	lsrs	r3, r3, #28
 8003d24:	f003 0307 	and.w	r3, r3, #7
 8003d28:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	019a      	lsls	r2, r3, #6
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	041b      	lsls	r3, r3, #16
 8003d36:	431a      	orrs	r2, r3
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	061b      	lsls	r3, r3, #24
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	071b      	lsls	r3, r3, #28
 8003d42:	4929      	ldr	r1, [pc, #164]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0308 	and.w	r3, r3, #8
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d028      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d56:	4b24      	ldr	r3, [pc, #144]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d5c:	0e1b      	lsrs	r3, r3, #24
 8003d5e:	f003 030f 	and.w	r3, r3, #15
 8003d62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d64:	4b20      	ldr	r3, [pc, #128]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d6a:	0c1b      	lsrs	r3, r3, #16
 8003d6c:	f003 0303 	and.w	r3, r3, #3
 8003d70:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	019a      	lsls	r2, r3, #6
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	041b      	lsls	r3, r3, #16
 8003d7c:	431a      	orrs	r2, r3
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	061b      	lsls	r3, r3, #24
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	071b      	lsls	r3, r3, #28
 8003d8a:	4917      	ldr	r1, [pc, #92]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003d92:	4b15      	ldr	r3, [pc, #84]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d98:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da0:	4911      	ldr	r1, [pc, #68]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003da8:	4b0f      	ldr	r3, [pc, #60]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a0e      	ldr	r2, [pc, #56]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003dae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003db2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003db4:	f7fd fd8a 	bl	80018cc <HAL_GetTick>
 8003db8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003dba:	e008      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003dbc:	f7fd fd86 	bl	80018cc <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b64      	cmp	r3, #100	@ 0x64
 8003dc8:	d901      	bls.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e007      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003dce:	4b06      	ldr	r3, [pc, #24]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003dd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003dda:	d1ef      	bne.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3720      	adds	r7, #32
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	40023800 	.word	0x40023800

08003dec <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e022      	b.n	8003e44 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d105      	bne.n	8003e16 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f7fd faa5 	bl	8001360 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2203      	movs	r2, #3
 8003e1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 f814 	bl	8003e4c <HAL_SD_InitCard>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e00a      	b.n	8003e44 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003e4c:	b5b0      	push	{r4, r5, r7, lr}
 8003e4e:	b08e      	sub	sp, #56	@ 0x38
 8003e50:	af04      	add	r7, sp, #16
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003e54:	2300      	movs	r3, #0
 8003e56:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8003e60:	2300      	movs	r3, #0
 8003e62:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003e64:	2300      	movs	r3, #0
 8003e66:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8003e68:	2376      	movs	r3, #118	@ 0x76
 8003e6a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681d      	ldr	r5, [r3, #0]
 8003e70:	466c      	mov	r4, sp
 8003e72:	f107 0314 	add.w	r3, r7, #20
 8003e76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003e7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003e7e:	f107 0308 	add.w	r3, r7, #8
 8003e82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e84:	4628      	mov	r0, r5
 8003e86:	f001 fbd7 	bl	8005638 <SDMMC_Init>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8003e90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e059      	b.n	8003f50 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003eaa:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f001 fc0b 	bl	80056cc <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ec4:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8003ec6:	2002      	movs	r0, #2
 8003ec8:	f7fd fd0c 	bl	80018e4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 fff3 	bl	8004eb8 <SD_PowerON>
 8003ed2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00b      	beq.n	8003ef2 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ee6:	6a3b      	ldr	r3, [r7, #32]
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e02e      	b.n	8003f50 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 ff12 	bl	8004d1c <SD_InitCard>
 8003ef8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003efa:	6a3b      	ldr	r3, [r7, #32]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00b      	beq.n	8003f18 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f0c:	6a3b      	ldr	r3, [r7, #32]
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e01b      	b.n	8003f50 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003f20:	4618      	mov	r0, r3
 8003f22:	f001 fc65 	bl	80057f0 <SDMMC_CmdBlockLength>
 8003f26:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f28:	6a3b      	ldr	r3, [r7, #32]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00f      	beq.n	8003f4e <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a09      	ldr	r2, [pc, #36]	@ (8003f58 <HAL_SD_InitCard+0x10c>)
 8003f34:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f3a:	6a3b      	ldr	r3, [r7, #32]
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e000      	b.n	8003f50 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3728      	adds	r7, #40	@ 0x28
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bdb0      	pop	{r4, r5, r7, pc}
 8003f58:	004005ff 	.word	0x004005ff

08003f5c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b08c      	sub	sp, #48	@ 0x30
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
 8003f68:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d107      	bne.n	8003f84 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f78:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e0c3      	b.n	800410c <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	f040 80bc 	bne.w	800410a <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003f98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	441a      	add	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d907      	bls.n	8003fb6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003faa:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e0aa      	b.n	800410c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2203      	movs	r2, #3
 8003fba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8003fd4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fda:	4a4e      	ldr	r2, [pc, #312]	@ (8004114 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8003fdc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe2:	4a4d      	ldr	r2, [pc, #308]	@ (8004118 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003fe4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fea:	2200      	movs	r2, #0
 8003fec:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	3380      	adds	r3, #128	@ 0x80
 800401c:	4619      	mov	r1, r3
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	025b      	lsls	r3, r3, #9
 8004024:	089b      	lsrs	r3, r3, #2
 8004026:	f7fd fe41 	bl	8001cac <HAL_DMA_Start_IT>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d017      	beq.n	8004060 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800403e:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a35      	ldr	r2, [pc, #212]	@ (800411c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8004046:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800404c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e055      	b.n	800410c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f042 0208 	orr.w	r2, r2, #8
 800406e:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004074:	2b01      	cmp	r3, #1
 8004076:	d002      	beq.n	800407e <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8004078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800407a:	025b      	lsls	r3, r3, #9
 800407c:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800407e:	f04f 33ff 	mov.w	r3, #4294967295
 8004082:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	025b      	lsls	r3, r3, #9
 8004088:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800408a:	2390      	movs	r3, #144	@ 0x90
 800408c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800408e:	2302      	movs	r3, #2
 8004090:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004092:	2300      	movs	r3, #0
 8004094:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8004096:	2301      	movs	r3, #1
 8004098:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f107 0210 	add.w	r2, r7, #16
 80040a2:	4611      	mov	r1, r2
 80040a4:	4618      	mov	r0, r3
 80040a6:	f001 fb77 	bl	8005798 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d90a      	bls.n	80040c6 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2282      	movs	r2, #130	@ 0x82
 80040b4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040bc:	4618      	mov	r0, r3
 80040be:	f001 fbdb 	bl	8005878 <SDMMC_CmdReadMultiBlock>
 80040c2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80040c4:	e009      	b.n	80040da <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2281      	movs	r2, #129	@ 0x81
 80040ca:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040d2:	4618      	mov	r0, r3
 80040d4:	f001 fbae 	bl	8005834 <SDMMC_CmdReadSingleBlock>
 80040d8:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80040da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d012      	beq.n	8004106 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a0d      	ldr	r2, [pc, #52]	@ (800411c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80040e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040ee:	431a      	orrs	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e002      	b.n	800410c <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8004106:	2300      	movs	r3, #0
 8004108:	e000      	b.n	800410c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800410a:	2302      	movs	r3, #2
  }
}
 800410c:	4618      	mov	r0, r3
 800410e:	3730      	adds	r7, #48	@ 0x30
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	08004b2b 	.word	0x08004b2b
 8004118:	08004b9d 	.word	0x08004b9d
 800411c:	004005ff 	.word	0x004005ff

08004120 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b08c      	sub	sp, #48	@ 0x30
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
 800412c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d107      	bne.n	8004148 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800413c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e0c6      	b.n	80042d6 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b01      	cmp	r3, #1
 8004152:	f040 80bf 	bne.w	80042d4 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800415c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	441a      	add	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004166:	429a      	cmp	r2, r3
 8004168:	d907      	bls.n	800417a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800416e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e0ad      	b.n	80042d6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2203      	movs	r2, #3
 800417e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2200      	movs	r2, #0
 8004188:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f042 021a 	orr.w	r2, r2, #26
 8004198:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800419e:	4a50      	ldr	r2, [pc, #320]	@ (80042e0 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80041a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041a6:	4a4f      	ldr	r2, [pc, #316]	@ (80042e4 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80041a8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ae:	2200      	movs	r2, #0
 80041b0:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d002      	beq.n	80041c0 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80041ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041bc:	025b      	lsls	r3, r3, #9
 80041be:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d90a      	bls.n	80041dc <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	22a0      	movs	r2, #160	@ 0xa0
 80041ca:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041d2:	4618      	mov	r0, r3
 80041d4:	f001 fb94 	bl	8005900 <SDMMC_CmdWriteMultiBlock>
 80041d8:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80041da:	e009      	b.n	80041f0 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2290      	movs	r2, #144	@ 0x90
 80041e0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041e8:	4618      	mov	r0, r3
 80041ea:	f001 fb67 	bl	80058bc <SDMMC_CmdWriteSingleBlock>
 80041ee:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80041f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d012      	beq.n	800421c <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a3b      	ldr	r2, [pc, #236]	@ (80042e8 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80041fc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004204:	431a      	orrs	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e05c      	b.n	80042d6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f042 0208 	orr.w	r2, r2, #8
 800422a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004230:	2240      	movs	r2, #64	@ 0x40
 8004232:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004244:	689a      	ldr	r2, [r3, #8]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	430a      	orrs	r2, r1
 800424e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004254:	68b9      	ldr	r1, [r7, #8]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	3380      	adds	r3, #128	@ 0x80
 800425c:	461a      	mov	r2, r3
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	025b      	lsls	r3, r3, #9
 8004262:	089b      	lsrs	r3, r3, #2
 8004264:	f7fd fd22 	bl	8001cac <HAL_DMA_Start_IT>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d01a      	beq.n	80042a4 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 021a 	bic.w	r2, r2, #26
 800427c:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a19      	ldr	r2, [pc, #100]	@ (80042e8 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8004284:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800428a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e018      	b.n	80042d6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80042a4:	f04f 33ff 	mov.w	r3, #4294967295
 80042a8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	025b      	lsls	r3, r3, #9
 80042ae:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80042b0:	2390      	movs	r3, #144	@ 0x90
 80042b2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80042b4:	2300      	movs	r3, #0
 80042b6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80042b8:	2300      	movs	r3, #0
 80042ba:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80042bc:	2301      	movs	r3, #1
 80042be:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f107 0210 	add.w	r2, r7, #16
 80042c8:	4611      	mov	r1, r2
 80042ca:	4618      	mov	r0, r3
 80042cc:	f001 fa64 	bl	8005798 <SDMMC_ConfigData>

      return HAL_OK;
 80042d0:	2300      	movs	r3, #0
 80042d2:	e000      	b.n	80042d6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 80042d4:	2302      	movs	r3, #2
  }
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3730      	adds	r7, #48	@ 0x30
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	08004b01 	.word	0x08004b01
 80042e4:	08004b9d 	.word	0x08004b9d
 80042e8:	004005ff 	.word	0x004005ff

080042ec <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f8:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004300:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d008      	beq.n	800431a <HAL_SD_IRQHandler+0x2e>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f003 0308 	and.w	r3, r3, #8
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 ffef 	bl	80052f6 <SD_Read_IT>
 8004318:	e15a      	b.n	80045d0 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 808d 	beq.w	8004444 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004332:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	4b9a      	ldr	r3, [pc, #616]	@ (80045a8 <HAL_SD_IRQHandler+0x2bc>)
 8004340:	400b      	ands	r3, r1
 8004342:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 0201 	bic.w	r2, r2, #1
 8004352:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f003 0308 	and.w	r3, r3, #8
 800435a:	2b00      	cmp	r3, #0
 800435c:	d039      	beq.n	80043d2 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d104      	bne.n	8004372 <HAL_SD_IRQHandler+0x86>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f003 0320 	and.w	r3, r3, #32
 800436e:	2b00      	cmp	r3, #0
 8004370:	d011      	beq.n	8004396 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4618      	mov	r0, r3
 8004378:	f001 fae4 	bl	8005944 <SDMMC_CmdStopTransfer>
 800437c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d008      	beq.n	8004396 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	431a      	orrs	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 f921 	bl	80045d8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800439e:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d104      	bne.n	80043c2 <HAL_SD_IRQHandler+0xd6>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d003      	beq.n	80043ca <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f001 ff54 	bl	8006270 <HAL_SD_RxCpltCallback>
 80043c8:	e102      	b.n	80045d0 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f001 ff46 	bl	800625c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80043d0:	e0fe      	b.n	80045d0 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 80f9 	beq.w	80045d0 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f003 0320 	and.w	r3, r3, #32
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d011      	beq.n	800440c <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f001 faa9 	bl	8005944 <SDMMC_CmdStopTransfer>
 80043f2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d008      	beq.n	800440c <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	431a      	orrs	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f8e6 	bl	80045d8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b00      	cmp	r3, #0
 8004414:	f040 80dc 	bne.w	80045d0 <HAL_SD_IRQHandler+0x2e4>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	f040 80d6 	bne.w	80045d0 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f022 0208 	bic.w	r2, r2, #8
 8004432:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f001 ff0d 	bl	800625c <HAL_SD_TxCpltCallback>
}
 8004442:	e0c5      	b.n	80045d0 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800444a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d008      	beq.n	8004464 <HAL_SD_IRQHandler+0x178>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f003 0308 	and.w	r3, r3, #8
 8004458:	2b00      	cmp	r3, #0
 800445a:	d003      	beq.n	8004464 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 ff9b 	bl	8005398 <SD_Write_IT>
 8004462:	e0b5      	b.n	80045d0 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800446a:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 80ae 	beq.w	80045d0 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d005      	beq.n	800448e <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004486:	f043 0202 	orr.w	r2, r3, #2
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004494:	f003 0308 	and.w	r3, r3, #8
 8004498:	2b00      	cmp	r3, #0
 800449a:	d005      	beq.n	80044a8 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044a0:	f043 0208 	orr.w	r2, r3, #8
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ae:	f003 0320 	and.w	r3, r3, #32
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d005      	beq.n	80044c2 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ba:	f043 0220 	orr.w	r2, r3, #32
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044c8:	f003 0310 	and.w	r3, r3, #16
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d005      	beq.n	80044dc <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044d4:	f043 0210 	orr.w	r2, r3, #16
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f240 523a 	movw	r2, #1338	@ 0x53a
 80044e4:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 80044f4:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f001 fa22 	bl	8005944 <SDMMC_CmdStopTransfer>
 8004500:	4602      	mov	r2, r0
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004506:	431a      	orrs	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f003 0308 	and.w	r3, r3, #8
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00a      	beq.n	800452c <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2201      	movs	r2, #1
 800451a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 f857 	bl	80045d8 <HAL_SD_ErrorCallback>
}
 800452a:	e051      	b.n	80045d0 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004532:	2b00      	cmp	r3, #0
 8004534:	d04c      	beq.n	80045d0 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f003 0310 	and.w	r3, r3, #16
 800453c:	2b00      	cmp	r3, #0
 800453e:	d104      	bne.n	800454a <HAL_SD_IRQHandler+0x25e>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f003 0320 	and.w	r3, r3, #32
 8004546:	2b00      	cmp	r3, #0
 8004548:	d011      	beq.n	800456e <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800454e:	4a17      	ldr	r2, [pc, #92]	@ (80045ac <HAL_SD_IRQHandler+0x2c0>)
 8004550:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004556:	4618      	mov	r0, r3
 8004558:	f7fd fc08 	bl	8001d6c <HAL_DMA_Abort_IT>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d036      	beq.n	80045d0 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004566:	4618      	mov	r0, r3
 8004568:	f000 fb6a 	bl	8004c40 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800456c:	e030      	b.n	80045d0 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	2b00      	cmp	r3, #0
 8004576:	d104      	bne.n	8004582 <HAL_SD_IRQHandler+0x296>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d018      	beq.n	80045b4 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004586:	4a0a      	ldr	r2, [pc, #40]	@ (80045b0 <HAL_SD_IRQHandler+0x2c4>)
 8004588:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800458e:	4618      	mov	r0, r3
 8004590:	f7fd fbec 	bl	8001d6c <HAL_DMA_Abort_IT>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d01a      	beq.n	80045d0 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459e:	4618      	mov	r0, r3
 80045a0:	f000 fb85 	bl	8004cae <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80045a4:	e014      	b.n	80045d0 <HAL_SD_IRQHandler+0x2e4>
 80045a6:	bf00      	nop
 80045a8:	ffff3ec5 	.word	0xffff3ec5
 80045ac:	08004c41 	.word	0x08004c41
 80045b0:	08004caf 	.word	0x08004caf
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f001 fe3d 	bl	8006248 <HAL_SD_AbortCallback>
}
 80045ce:	e7ff      	b.n	80045d0 <HAL_SD_IRQHandler+0x2e4>
 80045d0:	bf00      	nop
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045fa:	0f9b      	lsrs	r3, r3, #30
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004606:	0e9b      	lsrs	r3, r3, #26
 8004608:	b2db      	uxtb	r3, r3
 800460a:	f003 030f 	and.w	r3, r3, #15
 800460e:	b2da      	uxtb	r2, r3
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004618:	0e1b      	lsrs	r3, r3, #24
 800461a:	b2db      	uxtb	r3, r3
 800461c:	f003 0303 	and.w	r3, r3, #3
 8004620:	b2da      	uxtb	r2, r3
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800462a:	0c1b      	lsrs	r3, r3, #16
 800462c:	b2da      	uxtb	r2, r3
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004636:	0a1b      	lsrs	r3, r3, #8
 8004638:	b2da      	uxtb	r2, r3
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004642:	b2da      	uxtb	r2, r3
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800464c:	0d1b      	lsrs	r3, r3, #20
 800464e:	b29a      	uxth	r2, r3
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004658:	0c1b      	lsrs	r3, r3, #16
 800465a:	b2db      	uxtb	r3, r3
 800465c:	f003 030f 	and.w	r3, r3, #15
 8004660:	b2da      	uxtb	r2, r3
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800466a:	0bdb      	lsrs	r3, r3, #15
 800466c:	b2db      	uxtb	r3, r3
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	b2da      	uxtb	r2, r3
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800467c:	0b9b      	lsrs	r3, r3, #14
 800467e:	b2db      	uxtb	r3, r3
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	b2da      	uxtb	r2, r3
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800468e:	0b5b      	lsrs	r3, r3, #13
 8004690:	b2db      	uxtb	r3, r3
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	b2da      	uxtb	r2, r3
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046a0:	0b1b      	lsrs	r3, r3, #12
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2200      	movs	r2, #0
 80046b2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d163      	bne.n	8004784 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046c0:	009a      	lsls	r2, r3, #2
 80046c2:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80046c6:	4013      	ands	r3, r2
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80046cc:	0f92      	lsrs	r2, r2, #30
 80046ce:	431a      	orrs	r2, r3
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046d8:	0edb      	lsrs	r3, r3, #27
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	f003 0307 	and.w	r3, r3, #7
 80046e0:	b2da      	uxtb	r2, r3
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046ea:	0e1b      	lsrs	r3, r3, #24
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	f003 0307 	and.w	r3, r3, #7
 80046f2:	b2da      	uxtb	r2, r3
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046fc:	0d5b      	lsrs	r3, r3, #21
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	f003 0307 	and.w	r3, r3, #7
 8004704:	b2da      	uxtb	r2, r3
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800470e:	0c9b      	lsrs	r3, r3, #18
 8004710:	b2db      	uxtb	r3, r3
 8004712:	f003 0307 	and.w	r3, r3, #7
 8004716:	b2da      	uxtb	r2, r3
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004720:	0bdb      	lsrs	r3, r3, #15
 8004722:	b2db      	uxtb	r3, r3
 8004724:	f003 0307 	and.w	r3, r3, #7
 8004728:	b2da      	uxtb	r2, r3
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	1c5a      	adds	r2, r3, #1
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	7e1b      	ldrb	r3, [r3, #24]
 800473c:	b2db      	uxtb	r3, r3
 800473e:	f003 0307 	and.w	r3, r3, #7
 8004742:	3302      	adds	r3, #2
 8004744:	2201      	movs	r2, #1
 8004746:	fa02 f303 	lsl.w	r3, r2, r3
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800474e:	fb03 f202 	mul.w	r2, r3, r2
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	7a1b      	ldrb	r3, [r3, #8]
 800475a:	b2db      	uxtb	r3, r3
 800475c:	f003 030f 	and.w	r3, r3, #15
 8004760:	2201      	movs	r2, #1
 8004762:	409a      	lsls	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004770:	0a52      	lsrs	r2, r2, #9
 8004772:	fb03 f202 	mul.w	r2, r3, r2
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004780:	661a      	str	r2, [r3, #96]	@ 0x60
 8004782:	e031      	b.n	80047e8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004788:	2b01      	cmp	r3, #1
 800478a:	d11d      	bne.n	80047c8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004790:	041b      	lsls	r3, r3, #16
 8004792:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800479a:	0c1b      	lsrs	r3, r3, #16
 800479c:	431a      	orrs	r2, r3
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	3301      	adds	r3, #1
 80047a8:	029a      	lsls	r2, r3, #10
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047bc:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	661a      	str	r2, [r3, #96]	@ 0x60
 80047c6:	e00f      	b.n	80047e8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a58      	ldr	r2, [pc, #352]	@ (8004930 <HAL_SD_GetCardCSD+0x344>)
 80047ce:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047d4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e09d      	b.n	8004924 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047ec:	0b9b      	lsrs	r3, r3, #14
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	f003 0301 	and.w	r3, r3, #1
 80047f4:	b2da      	uxtb	r2, r3
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047fe:	09db      	lsrs	r3, r3, #7
 8004800:	b2db      	uxtb	r3, r3
 8004802:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004806:	b2da      	uxtb	r2, r3
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004810:	b2db      	uxtb	r3, r3
 8004812:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004816:	b2da      	uxtb	r2, r3
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004820:	0fdb      	lsrs	r3, r3, #31
 8004822:	b2da      	uxtb	r2, r3
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800482c:	0f5b      	lsrs	r3, r3, #29
 800482e:	b2db      	uxtb	r3, r3
 8004830:	f003 0303 	and.w	r3, r3, #3
 8004834:	b2da      	uxtb	r2, r3
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800483e:	0e9b      	lsrs	r3, r3, #26
 8004840:	b2db      	uxtb	r3, r3
 8004842:	f003 0307 	and.w	r3, r3, #7
 8004846:	b2da      	uxtb	r2, r3
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004850:	0d9b      	lsrs	r3, r3, #22
 8004852:	b2db      	uxtb	r3, r3
 8004854:	f003 030f 	and.w	r3, r3, #15
 8004858:	b2da      	uxtb	r2, r3
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004862:	0d5b      	lsrs	r3, r3, #21
 8004864:	b2db      	uxtb	r3, r3
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	b2da      	uxtb	r2, r3
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800487e:	0c1b      	lsrs	r3, r3, #16
 8004880:	b2db      	uxtb	r3, r3
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	b2da      	uxtb	r2, r3
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004892:	0bdb      	lsrs	r3, r3, #15
 8004894:	b2db      	uxtb	r3, r3
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	b2da      	uxtb	r2, r3
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048a6:	0b9b      	lsrs	r3, r3, #14
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	b2da      	uxtb	r2, r3
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ba:	0b5b      	lsrs	r3, r3, #13
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	b2da      	uxtb	r2, r3
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ce:	0b1b      	lsrs	r3, r3, #12
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	b2da      	uxtb	r2, r3
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048e2:	0a9b      	lsrs	r3, r3, #10
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	f003 0303 	and.w	r3, r3, #3
 80048ea:	b2da      	uxtb	r2, r3
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048f6:	0a1b      	lsrs	r3, r3, #8
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	f003 0303 	and.w	r3, r3, #3
 80048fe:	b2da      	uxtb	r2, r3
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800490a:	085b      	lsrs	r3, r3, #1
 800490c:	b2db      	uxtb	r3, r3
 800490e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004912:	b2da      	uxtb	r2, r3
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr
 8004930:	004005ff 	.word	0x004005ff

08004934 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800498c:	b5b0      	push	{r4, r5, r7, lr}
 800498e:	b08e      	sub	sp, #56	@ 0x38
 8004990:	af04      	add	r7, sp, #16
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8004996:	2300      	movs	r3, #0
 8004998:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2203      	movs	r2, #3
 80049a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049a8:	2b03      	cmp	r3, #3
 80049aa:	d02e      	beq.n	8004a0a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049b2:	d106      	bne.n	80049c2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	639a      	str	r2, [r3, #56]	@ 0x38
 80049c0:	e029      	b.n	8004a16 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049c8:	d10a      	bne.n	80049e0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 fb2a 	bl	8005024 <SD_WideBus_Enable>
 80049d0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049d6:	6a3b      	ldr	r3, [r7, #32]
 80049d8:	431a      	orrs	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	639a      	str	r2, [r3, #56]	@ 0x38
 80049de:	e01a      	b.n	8004a16 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10a      	bne.n	80049fc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 fb67 	bl	80050ba <SD_WideBus_Disable>
 80049ec:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049f2:	6a3b      	ldr	r3, [r7, #32]
 80049f4:	431a      	orrs	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	639a      	str	r2, [r3, #56]	@ 0x38
 80049fa:	e00c      	b.n	8004a16 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a00:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	639a      	str	r2, [r3, #56]	@ 0x38
 8004a08:	e005      	b.n	8004a16 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a0e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00b      	beq.n	8004a36 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a26      	ldr	r2, [pc, #152]	@ (8004abc <HAL_SD_ConfigWideBusOperation+0x130>)
 8004a24:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004a34:	e01f      	b.n	8004a76 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	695b      	ldr	r3, [r3, #20]
 8004a50:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681d      	ldr	r5, [r3, #0]
 8004a5c:	466c      	mov	r4, sp
 8004a5e:	f107 0314 	add.w	r3, r7, #20
 8004a62:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004a66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004a6a:	f107 0308 	add.w	r3, r7, #8
 8004a6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a70:	4628      	mov	r0, r5
 8004a72:	f000 fde1 	bl	8005638 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f000 feb6 	bl	80057f0 <SDMMC_CmdBlockLength>
 8004a84:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a86:	6a3b      	ldr	r3, [r7, #32]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00c      	beq.n	8004aa6 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a0a      	ldr	r2, [pc, #40]	@ (8004abc <HAL_SD_ConfigWideBusOperation+0x130>)
 8004a92:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a98:	6a3b      	ldr	r3, [r7, #32]
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8004aae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3728      	adds	r7, #40	@ 0x28
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bdb0      	pop	{r4, r5, r7, pc}
 8004aba:	bf00      	nop
 8004abc:	004005ff 	.word	0x004005ff

08004ac0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004acc:	f107 030c 	add.w	r3, r7, #12
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 fa7e 	bl	8004fd4 <SD_SendStatus>
 8004ad8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d005      	beq.n	8004aec <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	0a5b      	lsrs	r3, r3, #9
 8004af0:	f003 030f 	and.w	r3, r3, #15
 8004af4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004af6:	693b      	ldr	r3, [r7, #16]
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3718      	adds	r7, #24
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b0c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b1c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004b1e:	bf00      	nop
 8004b20:	3714      	adds	r7, #20
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b084      	sub	sp, #16
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b36:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b3c:	2b82      	cmp	r3, #130	@ 0x82
 8004b3e:	d111      	bne.n	8004b64 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f000 fefd 	bl	8005944 <SDMMC_CmdStopTransfer>
 8004b4a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d008      	beq.n	8004b64 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f7ff fd3a 	bl	80045d8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 0208 	bic.w	r2, r2, #8
 8004b72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004b7c:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f001 fb6f 	bl	8006270 <HAL_SD_RxCpltCallback>
#endif
}
 8004b92:	bf00      	nop
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
	...

08004b9c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f7fd fa8a 	bl	80020c4 <HAL_DMA_GetError>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d03e      	beq.n	8004c34 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bbc:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bc4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d002      	beq.n	8004bd2 <SD_DMAError+0x36>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d12d      	bne.n	8004c2e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a19      	ldr	r2, [pc, #100]	@ (8004c3c <SD_DMAError+0xa0>)
 8004bd8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8004be8:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bee:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8004bf6:	6978      	ldr	r0, [r7, #20]
 8004bf8:	f7ff ff62 	bl	8004ac0 <HAL_SD_GetCardState>
 8004bfc:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	2b06      	cmp	r3, #6
 8004c02:	d002      	beq.n	8004c0a <SD_DMAError+0x6e>
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	2b05      	cmp	r3, #5
 8004c08:	d10a      	bne.n	8004c20 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f000 fe98 	bl	8005944 <SDMMC_CmdStopTransfer>
 8004c14:	4602      	mov	r2, r0
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8004c2e:	6978      	ldr	r0, [r7, #20]
 8004c30:	f7ff fcd2 	bl	80045d8 <HAL_SD_ErrorCallback>
#endif
  }
}
 8004c34:	bf00      	nop
 8004c36:	3718      	adds	r7, #24
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	004005ff 	.word	0x004005ff

08004c40 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c4c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004c56:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f7ff ff31 	bl	8004ac0 <HAL_SD_GetCardState>
 8004c5e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	2b06      	cmp	r3, #6
 8004c72:	d002      	beq.n	8004c7a <SD_DMATxAbort+0x3a>
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	2b05      	cmp	r3, #5
 8004c78:	d10a      	bne.n	8004c90 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 fe60 	bl	8005944 <SDMMC_CmdStopTransfer>
 8004c84:	4602      	mov	r2, r0
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c8a:	431a      	orrs	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d103      	bne.n	8004ca0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f001 fad5 	bl	8006248 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004c9e:	e002      	b.n	8004ca6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f7ff fc99 	bl	80045d8 <HAL_SD_ErrorCallback>
}
 8004ca6:	bf00      	nop
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b084      	sub	sp, #16
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cba:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004cc4:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f7ff fefa 	bl	8004ac0 <HAL_SD_GetCardState>
 8004ccc:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	2b06      	cmp	r3, #6
 8004ce0:	d002      	beq.n	8004ce8 <SD_DMARxAbort+0x3a>
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	2b05      	cmp	r3, #5
 8004ce6:	d10a      	bne.n	8004cfe <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4618      	mov	r0, r3
 8004cee:	f000 fe29 	bl	8005944 <SDMMC_CmdStopTransfer>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cf8:	431a      	orrs	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d103      	bne.n	8004d0e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f001 fa9e 	bl	8006248 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004d0c:	e002      	b.n	8004d14 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f7ff fc62 	bl	80045d8 <HAL_SD_ErrorCallback>
}
 8004d14:	bf00      	nop
 8004d16:	3710      	adds	r7, #16
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004d1c:	b5b0      	push	{r4, r5, r7, lr}
 8004d1e:	b094      	sub	sp, #80	@ 0x50
 8004d20:	af04      	add	r7, sp, #16
 8004d22:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004d24:	2301      	movs	r3, #1
 8004d26:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f000 fcdb 	bl	80056e8 <SDMMC_GetPowerState>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d102      	bne.n	8004d3e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004d38:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004d3c:	e0b8      	b.n	8004eb0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d42:	2b03      	cmp	r3, #3
 8004d44:	d02f      	beq.n	8004da6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 ff05 	bl	8005b5a <SDMMC_CmdSendCID>
 8004d50:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d001      	beq.n	8004d5c <SD_InitCard+0x40>
    {
      return errorstate;
 8004d58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d5a:	e0a9      	b.n	8004eb0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2100      	movs	r1, #0
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 fd05 	bl	8005772 <SDMMC_GetResponse>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2104      	movs	r1, #4
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 fcfc 	bl	8005772 <SDMMC_GetResponse>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2108      	movs	r1, #8
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 fcf3 	bl	8005772 <SDMMC_GetResponse>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	210c      	movs	r1, #12
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f000 fcea 	bl	8005772 <SDMMC_GetResponse>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004daa:	2b03      	cmp	r3, #3
 8004dac:	d00d      	beq.n	8004dca <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f107 020e 	add.w	r2, r7, #14
 8004db6:	4611      	mov	r1, r2
 8004db8:	4618      	mov	r0, r3
 8004dba:	f000 ff0b 	bl	8005bd4 <SDMMC_CmdSetRelAdd>
 8004dbe:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004dc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d001      	beq.n	8004dca <SD_InitCard+0xae>
    {
      return errorstate;
 8004dc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dc8:	e072      	b.n	8004eb0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dce:	2b03      	cmp	r3, #3
 8004dd0:	d036      	beq.n	8004e40 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004dd2:	89fb      	ldrh	r3, [r7, #14]
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004de2:	041b      	lsls	r3, r3, #16
 8004de4:	4619      	mov	r1, r3
 8004de6:	4610      	mov	r0, r2
 8004de8:	f000 fed5 	bl	8005b96 <SDMMC_CmdSendCSD>
 8004dec:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004dee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d001      	beq.n	8004df8 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004df4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004df6:	e05b      	b.n	8004eb0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2100      	movs	r1, #0
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 fcb7 	bl	8005772 <SDMMC_GetResponse>
 8004e04:	4602      	mov	r2, r0
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2104      	movs	r1, #4
 8004e10:	4618      	mov	r0, r3
 8004e12:	f000 fcae 	bl	8005772 <SDMMC_GetResponse>
 8004e16:	4602      	mov	r2, r0
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2108      	movs	r1, #8
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 fca5 	bl	8005772 <SDMMC_GetResponse>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	210c      	movs	r1, #12
 8004e34:	4618      	mov	r0, r3
 8004e36:	f000 fc9c 	bl	8005772 <SDMMC_GetResponse>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2104      	movs	r1, #4
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 fc93 	bl	8005772 <SDMMC_GetResponse>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	0d1a      	lsrs	r2, r3, #20
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004e54:	f107 0310 	add.w	r3, r7, #16
 8004e58:	4619      	mov	r1, r3
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f7ff fbc6 	bl	80045ec <HAL_SD_GetCardCSD>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d002      	beq.n	8004e6c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004e66:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004e6a:	e021      	b.n	8004eb0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6819      	ldr	r1, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e74:	041b      	lsls	r3, r3, #16
 8004e76:	2200      	movs	r2, #0
 8004e78:	461c      	mov	r4, r3
 8004e7a:	4615      	mov	r5, r2
 8004e7c:	4622      	mov	r2, r4
 8004e7e:	462b      	mov	r3, r5
 8004e80:	4608      	mov	r0, r1
 8004e82:	f000 fd81 	bl	8005988 <SDMMC_CmdSelDesel>
 8004e86:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d001      	beq.n	8004e92 <SD_InitCard+0x176>
  {
    return errorstate;
 8004e8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e90:	e00e      	b.n	8004eb0 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681d      	ldr	r5, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	466c      	mov	r4, sp
 8004e9a:	f103 0210 	add.w	r2, r3, #16
 8004e9e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004ea0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004ea4:	3304      	adds	r3, #4
 8004ea6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ea8:	4628      	mov	r0, r5
 8004eaa:	f000 fbc5 	bl	8005638 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3740      	adds	r7, #64	@ 0x40
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bdb0      	pop	{r4, r5, r7, pc}

08004eb8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	617b      	str	r3, [r7, #20]
 8004ec8:	2300      	movs	r3, #0
 8004eca:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f000 fd7c 	bl	80059ce <SDMMC_CmdGoIdleState>
 8004ed6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <SD_PowerON+0x2a>
  {
    return errorstate;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	e072      	b.n	8004fc8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f000 fd8f 	bl	8005a0a <SDMMC_CmdOperCond>
 8004eec:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00d      	beq.n	8004f10 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 fd65 	bl	80059ce <SDMMC_CmdGoIdleState>
 8004f04:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d004      	beq.n	8004f16 <SD_PowerON+0x5e>
    {
      return errorstate;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	e05b      	b.n	8004fc8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d137      	bne.n	8004f8e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2100      	movs	r1, #0
 8004f24:	4618      	mov	r0, r3
 8004f26:	f000 fd8f 	bl	8005a48 <SDMMC_CmdAppCommand>
 8004f2a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d02d      	beq.n	8004f8e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004f32:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004f36:	e047      	b.n	8004fc8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 fd82 	bl	8005a48 <SDMMC_CmdAppCommand>
 8004f44:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d001      	beq.n	8004f50 <SD_PowerON+0x98>
    {
      return errorstate;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	e03b      	b.n	8004fc8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	491e      	ldr	r1, [pc, #120]	@ (8004fd0 <SD_PowerON+0x118>)
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 fd98 	bl	8005a8c <SDMMC_CmdAppOperCommand>
 8004f5c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d002      	beq.n	8004f6a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004f64:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004f68:	e02e      	b.n	8004fc8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2100      	movs	r1, #0
 8004f70:	4618      	mov	r0, r3
 8004f72:	f000 fbfe 	bl	8005772 <SDMMC_GetResponse>
 8004f76:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	0fdb      	lsrs	r3, r3, #31
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d101      	bne.n	8004f84 <SD_PowerON+0xcc>
 8004f80:	2301      	movs	r3, #1
 8004f82:	e000      	b.n	8004f86 <SD_PowerON+0xce>
 8004f84:	2300      	movs	r3, #0
 8004f86:	613b      	str	r3, [r7, #16]

    count++;
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d802      	bhi.n	8004f9e <SD_PowerON+0xe6>
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d0cc      	beq.n	8004f38 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d902      	bls.n	8004fae <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004fa8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004fac:	e00c      	b.n	8004fc8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d003      	beq.n	8004fc0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	645a      	str	r2, [r3, #68]	@ 0x44
 8004fbe:	e002      	b.n	8004fc6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3718      	adds	r7, #24
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	c1100000 	.word	0xc1100000

08004fd4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d102      	bne.n	8004fea <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004fe4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004fe8:	e018      	b.n	800501c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ff2:	041b      	lsls	r3, r3, #16
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	4610      	mov	r0, r2
 8004ff8:	f000 fe0d 	bl	8005c16 <SDMMC_CmdSendStatus>
 8004ffc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d001      	beq.n	8005008 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	e009      	b.n	800501c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2100      	movs	r1, #0
 800500e:	4618      	mov	r0, r3
 8005010:	f000 fbaf 	bl	8005772 <SDMMC_GetResponse>
 8005014:	4602      	mov	r2, r0
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3710      	adds	r7, #16
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b086      	sub	sp, #24
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800502c:	2300      	movs	r3, #0
 800502e:	60fb      	str	r3, [r7, #12]
 8005030:	2300      	movs	r3, #0
 8005032:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2100      	movs	r1, #0
 800503a:	4618      	mov	r0, r3
 800503c:	f000 fb99 	bl	8005772 <SDMMC_GetResponse>
 8005040:	4603      	mov	r3, r0
 8005042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005046:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800504a:	d102      	bne.n	8005052 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800504c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005050:	e02f      	b.n	80050b2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005052:	f107 030c 	add.w	r3, r7, #12
 8005056:	4619      	mov	r1, r3
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 f879 	bl	8005150 <SD_FindSCR>
 800505e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d001      	beq.n	800506a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	e023      	b.n	80050b2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d01c      	beq.n	80050ae <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800507c:	041b      	lsls	r3, r3, #16
 800507e:	4619      	mov	r1, r3
 8005080:	4610      	mov	r0, r2
 8005082:	f000 fce1 	bl	8005a48 <SDMMC_CmdAppCommand>
 8005086:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d001      	beq.n	8005092 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	e00f      	b.n	80050b2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2102      	movs	r1, #2
 8005098:	4618      	mov	r0, r3
 800509a:	f000 fd1b 	bl	8005ad4 <SDMMC_CmdBusWidth>
 800509e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	e003      	b.n	80050b2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80050aa:	2300      	movs	r3, #0
 80050ac:	e001      	b.n	80050b2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80050ae:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3718      	adds	r7, #24
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b086      	sub	sp, #24
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80050c2:	2300      	movs	r3, #0
 80050c4:	60fb      	str	r3, [r7, #12]
 80050c6:	2300      	movs	r3, #0
 80050c8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2100      	movs	r1, #0
 80050d0:	4618      	mov	r0, r3
 80050d2:	f000 fb4e 	bl	8005772 <SDMMC_GetResponse>
 80050d6:	4603      	mov	r3, r0
 80050d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050e0:	d102      	bne.n	80050e8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80050e2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80050e6:	e02f      	b.n	8005148 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80050e8:	f107 030c 	add.w	r3, r7, #12
 80050ec:	4619      	mov	r1, r3
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f82e 	bl	8005150 <SD_FindSCR>
 80050f4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d001      	beq.n	8005100 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	e023      	b.n	8005148 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d01c      	beq.n	8005144 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005112:	041b      	lsls	r3, r3, #16
 8005114:	4619      	mov	r1, r3
 8005116:	4610      	mov	r0, r2
 8005118:	f000 fc96 	bl	8005a48 <SDMMC_CmdAppCommand>
 800511c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d001      	beq.n	8005128 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	e00f      	b.n	8005148 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2100      	movs	r1, #0
 800512e:	4618      	mov	r0, r3
 8005130:	f000 fcd0 	bl	8005ad4 <SDMMC_CmdBusWidth>
 8005134:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d001      	beq.n	8005140 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	e003      	b.n	8005148 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005140:	2300      	movs	r3, #0
 8005142:	e001      	b.n	8005148 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005144:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8005148:	4618      	mov	r0, r3
 800514a:	3718      	adds	r7, #24
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005150:	b590      	push	{r4, r7, lr}
 8005152:	b08f      	sub	sp, #60	@ 0x3c
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800515a:	f7fc fbb7 	bl	80018cc <HAL_GetTick>
 800515e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8005160:	2300      	movs	r3, #0
 8005162:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005164:	2300      	movs	r3, #0
 8005166:	60bb      	str	r3, [r7, #8]
 8005168:	2300      	movs	r3, #0
 800516a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2108      	movs	r1, #8
 8005176:	4618      	mov	r0, r3
 8005178:	f000 fb3a 	bl	80057f0 <SDMMC_CmdBlockLength>
 800517c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800517e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005180:	2b00      	cmp	r3, #0
 8005182:	d001      	beq.n	8005188 <SD_FindSCR+0x38>
  {
    return errorstate;
 8005184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005186:	e0b2      	b.n	80052ee <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005190:	041b      	lsls	r3, r3, #16
 8005192:	4619      	mov	r1, r3
 8005194:	4610      	mov	r0, r2
 8005196:	f000 fc57 	bl	8005a48 <SDMMC_CmdAppCommand>
 800519a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800519c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d001      	beq.n	80051a6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80051a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051a4:	e0a3      	b.n	80052ee <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80051a6:	f04f 33ff 	mov.w	r3, #4294967295
 80051aa:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80051ac:	2308      	movs	r3, #8
 80051ae:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80051b0:	2330      	movs	r3, #48	@ 0x30
 80051b2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80051b4:	2302      	movs	r3, #2
 80051b6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80051b8:	2300      	movs	r3, #0
 80051ba:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80051bc:	2301      	movs	r3, #1
 80051be:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f107 0210 	add.w	r2, r7, #16
 80051c8:	4611      	mov	r1, r2
 80051ca:	4618      	mov	r0, r3
 80051cc:	f000 fae4 	bl	8005798 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4618      	mov	r0, r3
 80051d6:	f000 fc9f 	bl	8005b18 <SDMMC_CmdSendSCR>
 80051da:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80051dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d02a      	beq.n	8005238 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80051e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051e4:	e083      	b.n	80052ee <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00f      	beq.n	8005214 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6819      	ldr	r1, [r3, #0]
 80051f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	f107 0208 	add.w	r2, r7, #8
 8005200:	18d4      	adds	r4, r2, r3
 8005202:	4608      	mov	r0, r1
 8005204:	f000 fa44 	bl	8005690 <SDMMC_ReadFIFO>
 8005208:	4603      	mov	r3, r0
 800520a:	6023      	str	r3, [r4, #0]
      index++;
 800520c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800520e:	3301      	adds	r3, #1
 8005210:	637b      	str	r3, [r7, #52]	@ 0x34
 8005212:	e006      	b.n	8005222 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800521a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d012      	beq.n	8005248 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005222:	f7fc fb53 	bl	80018cc <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005230:	d102      	bne.n	8005238 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005232:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005236:	e05a      	b.n	80052ee <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800523e:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8005242:	2b00      	cmp	r3, #0
 8005244:	d0cf      	beq.n	80051e6 <SD_FindSCR+0x96>
 8005246:	e000      	b.n	800524a <SD_FindSCR+0xfa>
      break;
 8005248:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005250:	f003 0308 	and.w	r3, r3, #8
 8005254:	2b00      	cmp	r3, #0
 8005256:	d005      	beq.n	8005264 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2208      	movs	r2, #8
 800525e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005260:	2308      	movs	r3, #8
 8005262:	e044      	b.n	80052ee <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d005      	beq.n	800527e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2202      	movs	r2, #2
 8005278:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800527a:	2302      	movs	r3, #2
 800527c:	e037      	b.n	80052ee <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005284:	f003 0320 	and.w	r3, r3, #32
 8005288:	2b00      	cmp	r3, #0
 800528a:	d005      	beq.n	8005298 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2220      	movs	r2, #32
 8005292:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005294:	2320      	movs	r3, #32
 8005296:	e02a      	b.n	80052ee <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f240 523a 	movw	r2, #1338	@ 0x53a
 80052a0:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	061a      	lsls	r2, r3, #24
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	021b      	lsls	r3, r3, #8
 80052aa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80052ae:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	0a1b      	lsrs	r3, r3, #8
 80052b4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80052b8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	0e1b      	lsrs	r3, r3, #24
 80052be:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80052c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052c2:	601a      	str	r2, [r3, #0]
    scr++;
 80052c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052c6:	3304      	adds	r3, #4
 80052c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	061a      	lsls	r2, r3, #24
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	021b      	lsls	r3, r3, #8
 80052d2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80052d6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	0a1b      	lsrs	r3, r3, #8
 80052dc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80052e0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	0e1b      	lsrs	r3, r3, #24
 80052e6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80052e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ea:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	373c      	adds	r7, #60	@ 0x3c
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd90      	pop	{r4, r7, pc}

080052f6 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b086      	sub	sp, #24
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005302:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005308:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d03f      	beq.n	8005390 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8005310:	2300      	movs	r3, #0
 8005312:	617b      	str	r3, [r7, #20]
 8005314:	e033      	b.n	800537e <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4618      	mov	r0, r3
 800531c:	f000 f9b8 	bl	8005690 <SDMMC_ReadFIFO>
 8005320:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	b2da      	uxtb	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	701a      	strb	r2, [r3, #0]
      tmp++;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	3301      	adds	r3, #1
 800532e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	3b01      	subs	r3, #1
 8005334:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	0a1b      	lsrs	r3, r3, #8
 800533a:	b2da      	uxtb	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	3301      	adds	r3, #1
 8005344:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	3b01      	subs	r3, #1
 800534a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	0c1b      	lsrs	r3, r3, #16
 8005350:	b2da      	uxtb	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	3301      	adds	r3, #1
 800535a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	3b01      	subs	r3, #1
 8005360:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	0e1b      	lsrs	r3, r3, #24
 8005366:	b2da      	uxtb	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	3301      	adds	r3, #1
 8005370:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	3b01      	subs	r3, #1
 8005376:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	3301      	adds	r3, #1
 800537c:	617b      	str	r3, [r7, #20]
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	2b07      	cmp	r3, #7
 8005382:	d9c8      	bls.n	8005316 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8005390:	bf00      	nop
 8005392:	3718      	adds	r7, #24
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b086      	sub	sp, #24
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a1b      	ldr	r3, [r3, #32]
 80053a4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053aa:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d043      	beq.n	800543a <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80053b2:	2300      	movs	r3, #0
 80053b4:	617b      	str	r3, [r7, #20]
 80053b6:	e037      	b.n	8005428 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	60bb      	str	r3, [r7, #8]
      tmp++;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	3301      	adds	r3, #1
 80053c2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	3b01      	subs	r3, #1
 80053c8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	021a      	lsls	r2, r3, #8
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	60bb      	str	r3, [r7, #8]
      tmp++;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	3301      	adds	r3, #1
 80053da:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	3b01      	subs	r3, #1
 80053e0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	041a      	lsls	r2, r3, #16
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	60bb      	str	r3, [r7, #8]
      tmp++;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	3301      	adds	r3, #1
 80053f2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	3b01      	subs	r3, #1
 80053f8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	061a      	lsls	r2, r3, #24
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	4313      	orrs	r3, r2
 8005404:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	3301      	adds	r3, #1
 800540a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	3b01      	subs	r3, #1
 8005410:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f107 0208 	add.w	r2, r7, #8
 800541a:	4611      	mov	r1, r2
 800541c:	4618      	mov	r0, r3
 800541e:	f000 f944 	bl	80056aa <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	3301      	adds	r3, #1
 8005426:	617b      	str	r3, [r7, #20]
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	2b07      	cmp	r3, #7
 800542c:	d9c4      	bls.n	80053b8 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	693a      	ldr	r2, [r7, #16]
 8005438:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 800543a:	bf00      	nop
 800543c:	3718      	adds	r7, #24
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b082      	sub	sp, #8
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
 800544a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d101      	bne.n	8005456 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e025      	b.n	80054a2 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800545c:	b2db      	uxtb	r3, r3
 800545e:	2b00      	cmp	r3, #0
 8005460:	d106      	bne.n	8005470 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f7fc f914 	bl	8001698 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2202      	movs	r2, #2
 8005474:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	3304      	adds	r3, #4
 8005480:	4619      	mov	r1, r3
 8005482:	4610      	mov	r0, r2
 8005484:	f000 f812 	bl	80054ac <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6818      	ldr	r0, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	461a      	mov	r2, r3
 8005492:	6839      	ldr	r1, [r7, #0]
 8005494:	f000 f866 	bl	8005564 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3708      	adds	r7, #8
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
	...

080054ac <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d121      	bne.n	8005502 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	4b27      	ldr	r3, [pc, #156]	@ (8005560 <FMC_SDRAM_Init+0xb4>)
 80054c4:	4013      	ands	r3, r2
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	6851      	ldr	r1, [r2, #4]
 80054ca:	683a      	ldr	r2, [r7, #0]
 80054cc:	6892      	ldr	r2, [r2, #8]
 80054ce:	4311      	orrs	r1, r2
 80054d0:	683a      	ldr	r2, [r7, #0]
 80054d2:	68d2      	ldr	r2, [r2, #12]
 80054d4:	4311      	orrs	r1, r2
 80054d6:	683a      	ldr	r2, [r7, #0]
 80054d8:	6912      	ldr	r2, [r2, #16]
 80054da:	4311      	orrs	r1, r2
 80054dc:	683a      	ldr	r2, [r7, #0]
 80054de:	6952      	ldr	r2, [r2, #20]
 80054e0:	4311      	orrs	r1, r2
 80054e2:	683a      	ldr	r2, [r7, #0]
 80054e4:	6992      	ldr	r2, [r2, #24]
 80054e6:	4311      	orrs	r1, r2
 80054e8:	683a      	ldr	r2, [r7, #0]
 80054ea:	69d2      	ldr	r2, [r2, #28]
 80054ec:	4311      	orrs	r1, r2
 80054ee:	683a      	ldr	r2, [r7, #0]
 80054f0:	6a12      	ldr	r2, [r2, #32]
 80054f2:	4311      	orrs	r1, r2
 80054f4:	683a      	ldr	r2, [r7, #0]
 80054f6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80054f8:	430a      	orrs	r2, r1
 80054fa:	431a      	orrs	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	601a      	str	r2, [r3, #0]
 8005500:	e026      	b.n	8005550 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	69d9      	ldr	r1, [r3, #28]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	6a1b      	ldr	r3, [r3, #32]
 8005512:	4319      	orrs	r1, r3
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005518:	430b      	orrs	r3, r1
 800551a:	431a      	orrs	r2, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	4b0e      	ldr	r3, [pc, #56]	@ (8005560 <FMC_SDRAM_Init+0xb4>)
 8005526:	4013      	ands	r3, r2
 8005528:	683a      	ldr	r2, [r7, #0]
 800552a:	6851      	ldr	r1, [r2, #4]
 800552c:	683a      	ldr	r2, [r7, #0]
 800552e:	6892      	ldr	r2, [r2, #8]
 8005530:	4311      	orrs	r1, r2
 8005532:	683a      	ldr	r2, [r7, #0]
 8005534:	68d2      	ldr	r2, [r2, #12]
 8005536:	4311      	orrs	r1, r2
 8005538:	683a      	ldr	r2, [r7, #0]
 800553a:	6912      	ldr	r2, [r2, #16]
 800553c:	4311      	orrs	r1, r2
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	6952      	ldr	r2, [r2, #20]
 8005542:	4311      	orrs	r1, r2
 8005544:	683a      	ldr	r2, [r7, #0]
 8005546:	6992      	ldr	r2, [r2, #24]
 8005548:	430a      	orrs	r2, r1
 800554a:	431a      	orrs	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	ffff8000 	.word	0xffff8000

08005564 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d128      	bne.n	80055c8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	1e59      	subs	r1, r3, #1
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	3b01      	subs	r3, #1
 800558a:	011b      	lsls	r3, r3, #4
 800558c:	4319      	orrs	r1, r3
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	3b01      	subs	r3, #1
 8005594:	021b      	lsls	r3, r3, #8
 8005596:	4319      	orrs	r1, r3
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	3b01      	subs	r3, #1
 800559e:	031b      	lsls	r3, r3, #12
 80055a0:	4319      	orrs	r1, r3
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	3b01      	subs	r3, #1
 80055a8:	041b      	lsls	r3, r3, #16
 80055aa:	4319      	orrs	r1, r3
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	695b      	ldr	r3, [r3, #20]
 80055b0:	3b01      	subs	r3, #1
 80055b2:	051b      	lsls	r3, r3, #20
 80055b4:	4319      	orrs	r1, r3
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	3b01      	subs	r3, #1
 80055bc:	061b      	lsls	r3, r3, #24
 80055be:	430b      	orrs	r3, r1
 80055c0:	431a      	orrs	r2, r3
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	609a      	str	r2, [r3, #8]
 80055c6:	e02d      	b.n	8005624 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	689a      	ldr	r2, [r3, #8]
 80055cc:	4b19      	ldr	r3, [pc, #100]	@ (8005634 <FMC_SDRAM_Timing_Init+0xd0>)
 80055ce:	4013      	ands	r3, r2
 80055d0:	68ba      	ldr	r2, [r7, #8]
 80055d2:	68d2      	ldr	r2, [r2, #12]
 80055d4:	3a01      	subs	r2, #1
 80055d6:	0311      	lsls	r1, r2, #12
 80055d8:	68ba      	ldr	r2, [r7, #8]
 80055da:	6952      	ldr	r2, [r2, #20]
 80055dc:	3a01      	subs	r2, #1
 80055de:	0512      	lsls	r2, r2, #20
 80055e0:	430a      	orrs	r2, r1
 80055e2:	431a      	orrs	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	1e59      	subs	r1, r3, #1
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	3b01      	subs	r3, #1
 80055fc:	011b      	lsls	r3, r3, #4
 80055fe:	4319      	orrs	r1, r3
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	3b01      	subs	r3, #1
 8005606:	021b      	lsls	r3, r3, #8
 8005608:	4319      	orrs	r1, r3
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	3b01      	subs	r3, #1
 8005610:	041b      	lsls	r3, r3, #16
 8005612:	4319      	orrs	r1, r3
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	3b01      	subs	r3, #1
 800561a:	061b      	lsls	r3, r3, #24
 800561c:	430b      	orrs	r3, r1
 800561e:	431a      	orrs	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3714      	adds	r7, #20
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	ff0f0fff 	.word	0xff0f0fff

08005638 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8005638:	b084      	sub	sp, #16
 800563a:	b480      	push	{r7}
 800563c:	b085      	sub	sp, #20
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
 8005642:	f107 001c 	add.w	r0, r7, #28
 8005646:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800564a:	2300      	movs	r3, #0
 800564c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800564e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005650:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005652:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8005656:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800565a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800565c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800565e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8005662:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	4313      	orrs	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	4b07      	ldr	r3, [pc, #28]	@ (800568c <SDMMC_Init+0x54>)
 8005670:	4013      	ands	r3, r2
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	431a      	orrs	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	b004      	add	sp, #16
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	ffff8100 	.word	0xffff8100

08005690 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800569e:	4618      	mov	r0, r3
 80056a0:	370c      	adds	r7, #12
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 80056aa:	b480      	push	{r7}
 80056ac:	b083      	sub	sp, #12
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
 80056b2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2203      	movs	r2, #3
 80056d8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0303 	and.w	r3, r3, #3
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800570e:	2300      	movs	r3, #0
 8005710:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005722:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005728:	431a      	orrs	r2, r3
                       Command->CPSM);
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800572e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	4313      	orrs	r3, r2
 8005734:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68da      	ldr	r2, [r3, #12]
 800573a:	4b06      	ldr	r3, [pc, #24]	@ (8005754 <SDMMC_SendCommand+0x50>)
 800573c:	4013      	ands	r3, r2
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	431a      	orrs	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3714      	adds	r7, #20
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr
 8005754:	fffff000 	.word	0xfffff000

08005758 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	b2db      	uxtb	r3, r3
}
 8005766:	4618      	mov	r0, r3
 8005768:	370c      	adds	r7, #12
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8005772:	b480      	push	{r7}
 8005774:	b085      	sub	sp, #20
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
 800577a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	3314      	adds	r3, #20
 8005780:	461a      	mov	r2, r3
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	4413      	add	r3, r2
 8005786:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
}  
 800578c:	4618      	mov	r0, r3
 800578e:	3714      	adds	r7, #20
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80057a2:	2300      	movs	r3, #0
 80057a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	685a      	ldr	r2, [r3, #4]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80057be:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80057c4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80057ca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d6:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	431a      	orrs	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80057e2:	2300      	movs	r3, #0

}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3714      	adds	r7, #20
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b088      	sub	sp, #32
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80057fe:	2310      	movs	r3, #16
 8005800:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005802:	2340      	movs	r3, #64	@ 0x40
 8005804:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005806:	2300      	movs	r3, #0
 8005808:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800580a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800580e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005810:	f107 0308 	add.w	r3, r7, #8
 8005814:	4619      	mov	r1, r3
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f7ff ff74 	bl	8005704 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800581c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005820:	2110      	movs	r1, #16
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 fa1a 	bl	8005c5c <SDMMC_GetCmdResp1>
 8005828:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800582a:	69fb      	ldr	r3, [r7, #28]
}
 800582c:	4618      	mov	r0, r3
 800582e:	3720      	adds	r7, #32
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b088      	sub	sp, #32
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005842:	2311      	movs	r3, #17
 8005844:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005846:	2340      	movs	r3, #64	@ 0x40
 8005848:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800584a:	2300      	movs	r3, #0
 800584c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800584e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005852:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005854:	f107 0308 	add.w	r3, r7, #8
 8005858:	4619      	mov	r1, r3
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7ff ff52 	bl	8005704 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005860:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005864:	2111      	movs	r1, #17
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f9f8 	bl	8005c5c <SDMMC_GetCmdResp1>
 800586c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800586e:	69fb      	ldr	r3, [r7, #28]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3720      	adds	r7, #32
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b088      	sub	sp, #32
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005886:	2312      	movs	r3, #18
 8005888:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800588a:	2340      	movs	r3, #64	@ 0x40
 800588c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800588e:	2300      	movs	r3, #0
 8005890:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005892:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005896:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005898:	f107 0308 	add.w	r3, r7, #8
 800589c:	4619      	mov	r1, r3
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f7ff ff30 	bl	8005704 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80058a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058a8:	2112      	movs	r1, #18
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f9d6 	bl	8005c5c <SDMMC_GetCmdResp1>
 80058b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80058b2:	69fb      	ldr	r3, [r7, #28]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3720      	adds	r7, #32
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b088      	sub	sp, #32
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80058ca:	2318      	movs	r3, #24
 80058cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80058ce:	2340      	movs	r3, #64	@ 0x40
 80058d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80058d2:	2300      	movs	r3, #0
 80058d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80058d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80058da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80058dc:	f107 0308 	add.w	r3, r7, #8
 80058e0:	4619      	mov	r1, r3
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f7ff ff0e 	bl	8005704 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80058e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058ec:	2118      	movs	r1, #24
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f9b4 	bl	8005c5c <SDMMC_GetCmdResp1>
 80058f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80058f6:	69fb      	ldr	r3, [r7, #28]
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3720      	adds	r7, #32
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b088      	sub	sp, #32
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800590e:	2319      	movs	r3, #25
 8005910:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005912:	2340      	movs	r3, #64	@ 0x40
 8005914:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005916:	2300      	movs	r3, #0
 8005918:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800591a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800591e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005920:	f107 0308 	add.w	r3, r7, #8
 8005924:	4619      	mov	r1, r3
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7ff feec 	bl	8005704 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800592c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005930:	2119      	movs	r1, #25
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f992 	bl	8005c5c <SDMMC_GetCmdResp1>
 8005938:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800593a:	69fb      	ldr	r3, [r7, #28]
}
 800593c:	4618      	mov	r0, r3
 800593e:	3720      	adds	r7, #32
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b088      	sub	sp, #32
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800594c:	2300      	movs	r3, #0
 800594e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005950:	230c      	movs	r3, #12
 8005952:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005954:	2340      	movs	r3, #64	@ 0x40
 8005956:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005958:	2300      	movs	r3, #0
 800595a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800595c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005960:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005962:	f107 0308 	add.w	r3, r7, #8
 8005966:	4619      	mov	r1, r3
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f7ff fecb 	bl	8005704 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800596e:	4a05      	ldr	r2, [pc, #20]	@ (8005984 <SDMMC_CmdStopTransfer+0x40>)
 8005970:	210c      	movs	r1, #12
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f972 	bl	8005c5c <SDMMC_GetCmdResp1>
 8005978:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800597a:	69fb      	ldr	r3, [r7, #28]
}
 800597c:	4618      	mov	r0, r3
 800597e:	3720      	adds	r7, #32
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	05f5e100 	.word	0x05f5e100

08005988 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b08a      	sub	sp, #40	@ 0x28
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005998:	2307      	movs	r3, #7
 800599a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800599c:	2340      	movs	r3, #64	@ 0x40
 800599e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80059a0:	2300      	movs	r3, #0
 80059a2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80059a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80059a8:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80059aa:	f107 0310 	add.w	r3, r7, #16
 80059ae:	4619      	mov	r1, r3
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f7ff fea7 	bl	8005704 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80059b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059ba:	2107      	movs	r1, #7
 80059bc:	68f8      	ldr	r0, [r7, #12]
 80059be:	f000 f94d 	bl	8005c5c <SDMMC_GetCmdResp1>
 80059c2:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 80059c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3728      	adds	r7, #40	@ 0x28
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b088      	sub	sp, #32
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80059d6:	2300      	movs	r3, #0
 80059d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80059da:	2300      	movs	r3, #0
 80059dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80059de:	2300      	movs	r3, #0
 80059e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80059e2:	2300      	movs	r3, #0
 80059e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80059e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80059ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80059ec:	f107 0308 	add.w	r3, r7, #8
 80059f0:	4619      	mov	r1, r3
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f7ff fe86 	bl	8005704 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 fb67 	bl	80060cc <SDMMC_GetCmdError>
 80059fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a00:	69fb      	ldr	r3, [r7, #28]
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3720      	adds	r7, #32
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}

08005a0a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8005a0a:	b580      	push	{r7, lr}
 8005a0c:	b088      	sub	sp, #32
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005a12:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8005a16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005a18:	2308      	movs	r3, #8
 8005a1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005a1c:	2340      	movs	r3, #64	@ 0x40
 8005a1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005a20:	2300      	movs	r3, #0
 8005a22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005a24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a28:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005a2a:	f107 0308 	add.w	r3, r7, #8
 8005a2e:	4619      	mov	r1, r3
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f7ff fe67 	bl	8005704 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 fafa 	bl	8006030 <SDMMC_GetCmdResp7>
 8005a3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a3e:	69fb      	ldr	r3, [r7, #28]
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3720      	adds	r7, #32
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b088      	sub	sp, #32
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005a56:	2337      	movs	r3, #55	@ 0x37
 8005a58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005a5a:	2340      	movs	r3, #64	@ 0x40
 8005a5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005a62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005a68:	f107 0308 	add.w	r3, r7, #8
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f7ff fe48 	bl	8005704 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8005a74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a78:	2137      	movs	r1, #55	@ 0x37
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 f8ee 	bl	8005c5c <SDMMC_GetCmdResp1>
 8005a80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a82:	69fb      	ldr	r3, [r7, #28]
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3720      	adds	r7, #32
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b088      	sub	sp, #32
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005a96:	683a      	ldr	r2, [r7, #0]
 8005a98:	4b0d      	ldr	r3, [pc, #52]	@ (8005ad0 <SDMMC_CmdAppOperCommand+0x44>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005a9e:	2329      	movs	r3, #41	@ 0x29
 8005aa0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005aa2:	2340      	movs	r3, #64	@ 0x40
 8005aa4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005aaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005aae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005ab0:	f107 0308 	add.w	r3, r7, #8
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f7ff fe24 	bl	8005704 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 fa03 	bl	8005ec8 <SDMMC_GetCmdResp3>
 8005ac2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ac4:	69fb      	ldr	r3, [r7, #28]
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3720      	adds	r7, #32
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	80100000 	.word	0x80100000

08005ad4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b088      	sub	sp, #32
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005ae2:	2306      	movs	r3, #6
 8005ae4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005ae6:	2340      	movs	r3, #64	@ 0x40
 8005ae8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005aea:	2300      	movs	r3, #0
 8005aec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005aee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005af2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005af4:	f107 0308 	add.w	r3, r7, #8
 8005af8:	4619      	mov	r1, r3
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f7ff fe02 	bl	8005704 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8005b00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b04:	2106      	movs	r1, #6
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 f8a8 	bl	8005c5c <SDMMC_GetCmdResp1>
 8005b0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b0e:	69fb      	ldr	r3, [r7, #28]
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3720      	adds	r7, #32
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b088      	sub	sp, #32
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8005b20:	2300      	movs	r3, #0
 8005b22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005b24:	2333      	movs	r3, #51	@ 0x33
 8005b26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005b28:	2340      	movs	r3, #64	@ 0x40
 8005b2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005b30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b34:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005b36:	f107 0308 	add.w	r3, r7, #8
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f7ff fde1 	bl	8005704 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8005b42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b46:	2133      	movs	r1, #51	@ 0x33
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 f887 	bl	8005c5c <SDMMC_GetCmdResp1>
 8005b4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b50:	69fb      	ldr	r3, [r7, #28]
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3720      	adds	r7, #32
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b088      	sub	sp, #32
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005b62:	2300      	movs	r3, #0
 8005b64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005b66:	2302      	movs	r3, #2
 8005b68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005b6a:	23c0      	movs	r3, #192	@ 0xc0
 8005b6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005b72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005b78:	f107 0308 	add.w	r3, r7, #8
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f7ff fdc0 	bl	8005704 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 f957 	bl	8005e38 <SDMMC_GetCmdResp2>
 8005b8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b8c:	69fb      	ldr	r3, [r7, #28]
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3720      	adds	r7, #32
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b088      	sub	sp, #32
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
 8005b9e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005ba4:	2309      	movs	r3, #9
 8005ba6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005ba8:	23c0      	movs	r3, #192	@ 0xc0
 8005baa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005bac:	2300      	movs	r3, #0
 8005bae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005bb0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005bb4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005bb6:	f107 0308 	add.w	r3, r7, #8
 8005bba:	4619      	mov	r1, r3
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f7ff fda1 	bl	8005704 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f938 	bl	8005e38 <SDMMC_GetCmdResp2>
 8005bc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005bca:	69fb      	ldr	r3, [r7, #28]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3720      	adds	r7, #32
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b088      	sub	sp, #32
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005bde:	2300      	movs	r3, #0
 8005be0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005be2:	2303      	movs	r3, #3
 8005be4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005be6:	2340      	movs	r3, #64	@ 0x40
 8005be8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005bea:	2300      	movs	r3, #0
 8005bec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005bee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005bf2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005bf4:	f107 0308 	add.w	r3, r7, #8
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f7ff fd82 	bl	8005704 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005c00:	683a      	ldr	r2, [r7, #0]
 8005c02:	2103      	movs	r1, #3
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 f99d 	bl	8005f44 <SDMMC_GetCmdResp6>
 8005c0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c0c:	69fb      	ldr	r3, [r7, #28]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3720      	adds	r7, #32
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b088      	sub	sp, #32
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
 8005c1e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005c24:	230d      	movs	r3, #13
 8005c26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005c28:	2340      	movs	r3, #64	@ 0x40
 8005c2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005c30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c34:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005c36:	f107 0308 	add.w	r3, r7, #8
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f7ff fd61 	bl	8005704 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8005c42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c46:	210d      	movs	r1, #13
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 f807 	bl	8005c5c <SDMMC_GetCmdResp1>
 8005c4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c50:	69fb      	ldr	r3, [r7, #28]
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3720      	adds	r7, #32
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
	...

08005c5c <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b088      	sub	sp, #32
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	460b      	mov	r3, r1
 8005c66:	607a      	str	r2, [r7, #4]
 8005c68:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005c6a:	4b70      	ldr	r3, [pc, #448]	@ (8005e2c <SDMMC_GetCmdResp1+0x1d0>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a70      	ldr	r2, [pc, #448]	@ (8005e30 <SDMMC_GetCmdResp1+0x1d4>)
 8005c70:	fba2 2303 	umull	r2, r3, r2, r3
 8005c74:	0a5a      	lsrs	r2, r3, #9
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	fb02 f303 	mul.w	r3, r2, r3
 8005c7c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	1e5a      	subs	r2, r3, #1
 8005c82:	61fa      	str	r2, [r7, #28]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d102      	bne.n	8005c8e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005c88:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005c8c:	e0c9      	b.n	8005e22 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c92:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d0ef      	beq.n	8005c7e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1ea      	bne.n	8005c7e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cac:	f003 0304 	and.w	r3, r3, #4
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d004      	beq.n	8005cbe <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2204      	movs	r2, #4
 8005cb8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005cba:	2304      	movs	r3, #4
 8005cbc:	e0b1      	b.n	8005e22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cc2:	f003 0301 	and.w	r3, r3, #1
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d004      	beq.n	8005cd4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e0a6      	b.n	8005e22 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	22c5      	movs	r2, #197	@ 0xc5
 8005cd8:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f7ff fd3c 	bl	8005758 <SDMMC_GetCommandResponse>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	7afb      	ldrb	r3, [r7, #11]
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d001      	beq.n	8005cee <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e099      	b.n	8005e22 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005cee:	2100      	movs	r1, #0
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	f7ff fd3e 	bl	8005772 <SDMMC_GetResponse>
 8005cf6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	4b4e      	ldr	r3, [pc, #312]	@ (8005e34 <SDMMC_GetCmdResp1+0x1d8>)
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d101      	bne.n	8005d06 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005d02:	2300      	movs	r3, #0
 8005d04:	e08d      	b.n	8005e22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	da02      	bge.n	8005d12 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005d0c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d10:	e087      	b.n	8005e22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d001      	beq.n	8005d20 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005d1c:	2340      	movs	r3, #64	@ 0x40
 8005d1e:	e080      	b.n	8005e22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d001      	beq.n	8005d2e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005d2a:	2380      	movs	r3, #128	@ 0x80
 8005d2c:	e079      	b.n	8005e22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d002      	beq.n	8005d3e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005d38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005d3c:	e071      	b.n	8005e22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d002      	beq.n	8005d4e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005d48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005d4c:	e069      	b.n	8005e22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d002      	beq.n	8005d5e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005d58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d5c:	e061      	b.n	8005e22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d002      	beq.n	8005d6e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005d68:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005d6c:	e059      	b.n	8005e22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d002      	beq.n	8005d7e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005d78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005d7c:	e051      	b.n	8005e22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d002      	beq.n	8005d8e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005d88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005d8c:	e049      	b.n	8005e22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d002      	beq.n	8005d9e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005d98:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005d9c:	e041      	b.n	8005e22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d002      	beq.n	8005dae <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005da8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dac:	e039      	b.n	8005e22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d002      	beq.n	8005dbe <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005db8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005dbc:	e031      	b.n	8005e22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d002      	beq.n	8005dce <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005dc8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005dcc:	e029      	b.n	8005e22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d002      	beq.n	8005dde <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005dd8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005ddc:	e021      	b.n	8005e22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d002      	beq.n	8005dee <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005de8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005dec:	e019      	b.n	8005e22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d002      	beq.n	8005dfe <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005df8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005dfc:	e011      	b.n	8005e22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d002      	beq.n	8005e0e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005e08:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005e0c:	e009      	b.n	8005e22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	f003 0308 	and.w	r3, r3, #8
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d002      	beq.n	8005e1e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005e18:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8005e1c:	e001      	b.n	8005e22 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005e1e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3720      	adds	r7, #32
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	20000000 	.word	0x20000000
 8005e30:	10624dd3 	.word	0x10624dd3
 8005e34:	fdffe008 	.word	0xfdffe008

08005e38 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005e40:	4b1f      	ldr	r3, [pc, #124]	@ (8005ec0 <SDMMC_GetCmdResp2+0x88>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a1f      	ldr	r2, [pc, #124]	@ (8005ec4 <SDMMC_GetCmdResp2+0x8c>)
 8005e46:	fba2 2303 	umull	r2, r3, r2, r3
 8005e4a:	0a5b      	lsrs	r3, r3, #9
 8005e4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e50:	fb02 f303 	mul.w	r3, r2, r3
 8005e54:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	1e5a      	subs	r2, r3, #1
 8005e5a:	60fa      	str	r2, [r7, #12]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d102      	bne.n	8005e66 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005e60:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005e64:	e026      	b.n	8005eb4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e6a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d0ef      	beq.n	8005e56 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1ea      	bne.n	8005e56 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e84:	f003 0304 	and.w	r3, r3, #4
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d004      	beq.n	8005e96 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2204      	movs	r2, #4
 8005e90:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005e92:	2304      	movs	r3, #4
 8005e94:	e00e      	b.n	8005eb4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e9a:	f003 0301 	and.w	r3, r3, #1
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d004      	beq.n	8005eac <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e003      	b.n	8005eb4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	22c5      	movs	r2, #197	@ 0xc5
 8005eb0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3714      	adds	r7, #20
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr
 8005ec0:	20000000 	.word	0x20000000
 8005ec4:	10624dd3 	.word	0x10624dd3

08005ec8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005ed0:	4b1a      	ldr	r3, [pc, #104]	@ (8005f3c <SDMMC_GetCmdResp3+0x74>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a1a      	ldr	r2, [pc, #104]	@ (8005f40 <SDMMC_GetCmdResp3+0x78>)
 8005ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eda:	0a5b      	lsrs	r3, r3, #9
 8005edc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ee0:	fb02 f303 	mul.w	r3, r2, r3
 8005ee4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	1e5a      	subs	r2, r3, #1
 8005eea:	60fa      	str	r2, [r7, #12]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d102      	bne.n	8005ef6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005ef0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005ef4:	e01b      	b.n	8005f2e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005efa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d0ef      	beq.n	8005ee6 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1ea      	bne.n	8005ee6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f14:	f003 0304 	and.w	r3, r3, #4
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d004      	beq.n	8005f26 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2204      	movs	r2, #4
 8005f20:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005f22:	2304      	movs	r3, #4
 8005f24:	e003      	b.n	8005f2e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	22c5      	movs	r2, #197	@ 0xc5
 8005f2a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3714      	adds	r7, #20
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	20000000 	.word	0x20000000
 8005f40:	10624dd3 	.word	0x10624dd3

08005f44 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b088      	sub	sp, #32
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	607a      	str	r2, [r7, #4]
 8005f50:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005f52:	4b35      	ldr	r3, [pc, #212]	@ (8006028 <SDMMC_GetCmdResp6+0xe4>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a35      	ldr	r2, [pc, #212]	@ (800602c <SDMMC_GetCmdResp6+0xe8>)
 8005f58:	fba2 2303 	umull	r2, r3, r2, r3
 8005f5c:	0a5b      	lsrs	r3, r3, #9
 8005f5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f62:	fb02 f303 	mul.w	r3, r2, r3
 8005f66:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	1e5a      	subs	r2, r3, #1
 8005f6c:	61fa      	str	r2, [r7, #28]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d102      	bne.n	8005f78 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005f72:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005f76:	e052      	b.n	800601e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f7c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d0ef      	beq.n	8005f68 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1ea      	bne.n	8005f68 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f96:	f003 0304 	and.w	r3, r3, #4
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d004      	beq.n	8005fa8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2204      	movs	r2, #4
 8005fa2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005fa4:	2304      	movs	r3, #4
 8005fa6:	e03a      	b.n	800601e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fac:	f003 0301 	and.w	r3, r3, #1
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d004      	beq.n	8005fbe <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e02f      	b.n	800601e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f7ff fbca 	bl	8005758 <SDMMC_GetCommandResponse>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	7afb      	ldrb	r3, [r7, #11]
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d001      	beq.n	8005fd2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e025      	b.n	800601e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	22c5      	movs	r2, #197	@ 0xc5
 8005fd6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005fd8:	2100      	movs	r1, #0
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f7ff fbc9 	bl	8005772 <SDMMC_GetResponse>
 8005fe0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d106      	bne.n	8005ffa <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	0c1b      	lsrs	r3, r3, #16
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	e011      	b.n	800601e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006000:	2b00      	cmp	r3, #0
 8006002:	d002      	beq.n	800600a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006004:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006008:	e009      	b.n	800601e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d002      	beq.n	800601a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006014:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006018:	e001      	b.n	800601e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800601a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800601e:	4618      	mov	r0, r3
 8006020:	3720      	adds	r7, #32
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	20000000 	.word	0x20000000
 800602c:	10624dd3 	.word	0x10624dd3

08006030 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006038:	4b22      	ldr	r3, [pc, #136]	@ (80060c4 <SDMMC_GetCmdResp7+0x94>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a22      	ldr	r2, [pc, #136]	@ (80060c8 <SDMMC_GetCmdResp7+0x98>)
 800603e:	fba2 2303 	umull	r2, r3, r2, r3
 8006042:	0a5b      	lsrs	r3, r3, #9
 8006044:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006048:	fb02 f303 	mul.w	r3, r2, r3
 800604c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	1e5a      	subs	r2, r3, #1
 8006052:	60fa      	str	r2, [r7, #12]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d102      	bne.n	800605e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006058:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800605c:	e02c      	b.n	80060b8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006062:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800606a:	2b00      	cmp	r3, #0
 800606c:	d0ef      	beq.n	800604e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006074:	2b00      	cmp	r3, #0
 8006076:	d1ea      	bne.n	800604e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800607c:	f003 0304 	and.w	r3, r3, #4
 8006080:	2b00      	cmp	r3, #0
 8006082:	d004      	beq.n	800608e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2204      	movs	r2, #4
 8006088:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800608a:	2304      	movs	r3, #4
 800608c:	e014      	b.n	80060b8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006092:	f003 0301 	and.w	r3, r3, #1
 8006096:	2b00      	cmp	r3, #0
 8006098:	d004      	beq.n	80060a4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2201      	movs	r2, #1
 800609e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e009      	b.n	80060b8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d002      	beq.n	80060b6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2240      	movs	r2, #64	@ 0x40
 80060b4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80060b6:	2300      	movs	r3, #0
  
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3714      	adds	r7, #20
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr
 80060c4:	20000000 	.word	0x20000000
 80060c8:	10624dd3 	.word	0x10624dd3

080060cc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80060d4:	4b11      	ldr	r3, [pc, #68]	@ (800611c <SDMMC_GetCmdError+0x50>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a11      	ldr	r2, [pc, #68]	@ (8006120 <SDMMC_GetCmdError+0x54>)
 80060da:	fba2 2303 	umull	r2, r3, r2, r3
 80060de:	0a5b      	lsrs	r3, r3, #9
 80060e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060e4:	fb02 f303 	mul.w	r3, r2, r3
 80060e8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	1e5a      	subs	r2, r3, #1
 80060ee:	60fa      	str	r2, [r7, #12]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d102      	bne.n	80060fa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80060f4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80060f8:	e009      	b.n	800610e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006102:	2b00      	cmp	r3, #0
 8006104:	d0f1      	beq.n	80060ea <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	22c5      	movs	r2, #197	@ 0xc5
 800610a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	3714      	adds	r7, #20
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	20000000 	.word	0x20000000
 8006120:	10624dd3 	.word	0x10624dd3

08006124 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006128:	4904      	ldr	r1, [pc, #16]	@ (800613c <MX_FATFS_Init+0x18>)
 800612a:	4805      	ldr	r0, [pc, #20]	@ (8006140 <MX_FATFS_Init+0x1c>)
 800612c:	f003 f92c 	bl	8009388 <FATFS_LinkDriver>
 8006130:	4603      	mov	r3, r0
 8006132:	461a      	mov	r2, r3
 8006134:	4b03      	ldr	r3, [pc, #12]	@ (8006144 <MX_FATFS_Init+0x20>)
 8006136:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006138:	bf00      	nop
 800613a:	bd80      	pop	{r7, pc}
 800613c:	200002e8 	.word	0x200002e8
 8006140:	08009890 	.word	0x08009890
 8006144:	200002e4 	.word	0x200002e4

08006148 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006148:	b480      	push	{r7}
 800614a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800614c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800614e:	4618      	mov	r0, r3
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800615e:	2300      	movs	r3, #0
 8006160:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006162:	f000 f896 	bl	8006292 <BSP_SD_IsDetected>
 8006166:	4603      	mov	r3, r0
 8006168:	2b01      	cmp	r3, #1
 800616a:	d001      	beq.n	8006170 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800616c:	2302      	movs	r3, #2
 800616e:	e012      	b.n	8006196 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8006170:	480b      	ldr	r0, [pc, #44]	@ (80061a0 <BSP_SD_Init+0x48>)
 8006172:	f7fd fe3b 	bl	8003dec <HAL_SD_Init>
 8006176:	4603      	mov	r3, r0
 8006178:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800617a:	79fb      	ldrb	r3, [r7, #7]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d109      	bne.n	8006194 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8006180:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006184:	4806      	ldr	r0, [pc, #24]	@ (80061a0 <BSP_SD_Init+0x48>)
 8006186:	f7fe fc01 	bl	800498c <HAL_SD_ConfigWideBusOperation>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d001      	beq.n	8006194 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8006194:	79fb      	ldrb	r3, [r7, #7]
}
 8006196:	4618      	mov	r0, r3
 8006198:	3708      	adds	r7, #8
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	20000160 	.word	0x20000160

080061a4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b086      	sub	sp, #24
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80061b0:	2300      	movs	r3, #0
 80061b2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	68f9      	ldr	r1, [r7, #12]
 80061ba:	4806      	ldr	r0, [pc, #24]	@ (80061d4 <BSP_SD_ReadBlocks_DMA+0x30>)
 80061bc:	f7fd fece 	bl	8003f5c <HAL_SD_ReadBlocks_DMA>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d001      	beq.n	80061ca <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80061ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3718      	adds	r7, #24
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	20000160 	.word	0x20000160

080061d8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b086      	sub	sp, #24
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80061e4:	2300      	movs	r3, #0
 80061e6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	68ba      	ldr	r2, [r7, #8]
 80061ec:	68f9      	ldr	r1, [r7, #12]
 80061ee:	4806      	ldr	r0, [pc, #24]	@ (8006208 <BSP_SD_WriteBlocks_DMA+0x30>)
 80061f0:	f7fd ff96 	bl	8004120 <HAL_SD_WriteBlocks_DMA>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d001      	beq.n	80061fe <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80061fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006200:	4618      	mov	r0, r3
 8006202:	3718      	adds	r7, #24
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	20000160 	.word	0x20000160

0800620c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006210:	4805      	ldr	r0, [pc, #20]	@ (8006228 <BSP_SD_GetCardState+0x1c>)
 8006212:	f7fe fc55 	bl	8004ac0 <HAL_SD_GetCardState>
 8006216:	4603      	mov	r3, r0
 8006218:	2b04      	cmp	r3, #4
 800621a:	bf14      	ite	ne
 800621c:	2301      	movne	r3, #1
 800621e:	2300      	moveq	r3, #0
 8006220:	b2db      	uxtb	r3, r3
}
 8006222:	4618      	mov	r0, r3
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	20000160 	.word	0x20000160

0800622c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8006234:	6879      	ldr	r1, [r7, #4]
 8006236:	4803      	ldr	r0, [pc, #12]	@ (8006244 <BSP_SD_GetCardInfo+0x18>)
 8006238:	f7fe fb7c 	bl	8004934 <HAL_SD_GetCardInfo>
}
 800623c:	bf00      	nop
 800623e:	3708      	adds	r7, #8
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	20000160 	.word	0x20000160

08006248 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8006250:	f000 f818 	bl	8006284 <BSP_SD_AbortCallback>
}
 8006254:	bf00      	nop
 8006256:	3708      	adds	r7, #8
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8006264:	f000 f9a8 	bl	80065b8 <BSP_SD_WriteCpltCallback>
}
 8006268:	bf00      	nop
 800626a:	3708      	adds	r7, #8
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8006278:	f000 f9aa 	bl	80065d0 <BSP_SD_ReadCpltCallback>
}
 800627c:	bf00      	nop
 800627e:	3708      	adds	r7, #8
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8006284:	b480      	push	{r7}
 8006286:	af00      	add	r7, sp, #0

}
 8006288:	bf00      	nop
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr

08006292 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b082      	sub	sp, #8
 8006296:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006298:	2301      	movs	r3, #1
 800629a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800629c:	f000 f80c 	bl	80062b8 <BSP_PlatformIsDetected>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d101      	bne.n	80062aa <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80062a6:	2300      	movs	r3, #0
 80062a8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80062aa:	79fb      	ldrb	r3, [r7, #7]
 80062ac:	b2db      	uxtb	r3, r3
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3708      	adds	r7, #8
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
	...

080062b8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80062be:	2301      	movs	r3, #1
 80062c0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80062c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80062c6:	4806      	ldr	r0, [pc, #24]	@ (80062e0 <BSP_PlatformIsDetected+0x28>)
 80062c8:	f7fc fa70 	bl	80027ac <HAL_GPIO_ReadPin>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d001      	beq.n	80062d6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80062d2:	2300      	movs	r3, #0
 80062d4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80062d6:	79fb      	ldrb	r3, [r7, #7]
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3708      	adds	r7, #8
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	40020800 	.word	0x40020800

080062e4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80062ec:	f7fb faee 	bl	80018cc <HAL_GetTick>
 80062f0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80062f2:	e006      	b.n	8006302 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80062f4:	f7ff ff8a 	bl	800620c <BSP_SD_GetCardState>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d101      	bne.n	8006302 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80062fe:	2300      	movs	r3, #0
 8006300:	e009      	b.n	8006316 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8006302:	f7fb fae3 	bl	80018cc <HAL_GetTick>
 8006306:	4602      	mov	r2, r0
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	429a      	cmp	r2, r3
 8006310:	d8f0      	bhi.n	80062f4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8006312:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006316:	4618      	mov	r0, r3
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
	...

08006320 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
 8006326:	4603      	mov	r3, r0
 8006328:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800632a:	4b0b      	ldr	r3, [pc, #44]	@ (8006358 <SD_CheckStatus+0x38>)
 800632c:	2201      	movs	r2, #1
 800632e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8006330:	f7ff ff6c 	bl	800620c <BSP_SD_GetCardState>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d107      	bne.n	800634a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800633a:	4b07      	ldr	r3, [pc, #28]	@ (8006358 <SD_CheckStatus+0x38>)
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	b2db      	uxtb	r3, r3
 8006340:	f023 0301 	bic.w	r3, r3, #1
 8006344:	b2da      	uxtb	r2, r3
 8006346:	4b04      	ldr	r3, [pc, #16]	@ (8006358 <SD_CheckStatus+0x38>)
 8006348:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800634a:	4b03      	ldr	r3, [pc, #12]	@ (8006358 <SD_CheckStatus+0x38>)
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	b2db      	uxtb	r3, r3
}
 8006350:	4618      	mov	r0, r3
 8006352:	3708      	adds	r7, #8
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	20000009 	.word	0x20000009

0800635c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	4603      	mov	r3, r0
 8006364:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8006366:	f7ff fef7 	bl	8006158 <BSP_SD_Init>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d107      	bne.n	8006380 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8006370:	79fb      	ldrb	r3, [r7, #7]
 8006372:	4618      	mov	r0, r3
 8006374:	f7ff ffd4 	bl	8006320 <SD_CheckStatus>
 8006378:	4603      	mov	r3, r0
 800637a:	461a      	mov	r2, r3
 800637c:	4b04      	ldr	r3, [pc, #16]	@ (8006390 <SD_initialize+0x34>)
 800637e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8006380:	4b03      	ldr	r3, [pc, #12]	@ (8006390 <SD_initialize+0x34>)
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	b2db      	uxtb	r3, r3
}
 8006386:	4618      	mov	r0, r3
 8006388:	3708      	adds	r7, #8
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	20000009 	.word	0x20000009

08006394 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	4603      	mov	r3, r0
 800639c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800639e:	79fb      	ldrb	r3, [r7, #7]
 80063a0:	4618      	mov	r0, r3
 80063a2:	f7ff ffbd 	bl	8006320 <SD_CheckStatus>
 80063a6:	4603      	mov	r3, r0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3708      	adds	r7, #8
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b086      	sub	sp, #24
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60b9      	str	r1, [r7, #8]
 80063b8:	607a      	str	r2, [r7, #4]
 80063ba:	603b      	str	r3, [r7, #0]
 80063bc:	4603      	mov	r3, r0
 80063be:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80063c4:	f247 5030 	movw	r0, #30000	@ 0x7530
 80063c8:	f7ff ff8c 	bl	80062e4 <SD_CheckStatusWithTimeout>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	da01      	bge.n	80063d6 <SD_read+0x26>
  {
    return res;
 80063d2:	7dfb      	ldrb	r3, [r7, #23]
 80063d4:	e03b      	b.n	800644e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80063d6:	683a      	ldr	r2, [r7, #0]
 80063d8:	6879      	ldr	r1, [r7, #4]
 80063da:	68b8      	ldr	r0, [r7, #8]
 80063dc:	f7ff fee2 	bl	80061a4 <BSP_SD_ReadBlocks_DMA>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d132      	bne.n	800644c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80063e6:	4b1c      	ldr	r3, [pc, #112]	@ (8006458 <SD_read+0xa8>)
 80063e8:	2200      	movs	r2, #0
 80063ea:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80063ec:	f7fb fa6e 	bl	80018cc <HAL_GetTick>
 80063f0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80063f2:	bf00      	nop
 80063f4:	4b18      	ldr	r3, [pc, #96]	@ (8006458 <SD_read+0xa8>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d108      	bne.n	800640e <SD_read+0x5e>
 80063fc:	f7fb fa66 	bl	80018cc <HAL_GetTick>
 8006400:	4602      	mov	r2, r0
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	f247 522f 	movw	r2, #29999	@ 0x752f
 800640a:	4293      	cmp	r3, r2
 800640c:	d9f2      	bls.n	80063f4 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800640e:	4b12      	ldr	r3, [pc, #72]	@ (8006458 <SD_read+0xa8>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d102      	bne.n	800641c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	75fb      	strb	r3, [r7, #23]
 800641a:	e017      	b.n	800644c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800641c:	4b0e      	ldr	r3, [pc, #56]	@ (8006458 <SD_read+0xa8>)
 800641e:	2200      	movs	r2, #0
 8006420:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8006422:	f7fb fa53 	bl	80018cc <HAL_GetTick>
 8006426:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006428:	e007      	b.n	800643a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800642a:	f7ff feef 	bl	800620c <BSP_SD_GetCardState>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d102      	bne.n	800643a <SD_read+0x8a>
          {
            res = RES_OK;
 8006434:	2300      	movs	r3, #0
 8006436:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8006438:	e008      	b.n	800644c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800643a:	f7fb fa47 	bl	80018cc <HAL_GetTick>
 800643e:	4602      	mov	r2, r0
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	f247 522f 	movw	r2, #29999	@ 0x752f
 8006448:	4293      	cmp	r3, r2
 800644a:	d9ee      	bls.n	800642a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800644c:	7dfb      	ldrb	r3, [r7, #23]
}
 800644e:	4618      	mov	r0, r3
 8006450:	3718      	adds	r7, #24
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	20000754 	.word	0x20000754

0800645c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b086      	sub	sp, #24
 8006460:	af00      	add	r7, sp, #0
 8006462:	60b9      	str	r1, [r7, #8]
 8006464:	607a      	str	r2, [r7, #4]
 8006466:	603b      	str	r3, [r7, #0]
 8006468:	4603      	mov	r3, r0
 800646a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8006470:	4b24      	ldr	r3, [pc, #144]	@ (8006504 <SD_write+0xa8>)
 8006472:	2200      	movs	r2, #0
 8006474:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006476:	f247 5030 	movw	r0, #30000	@ 0x7530
 800647a:	f7ff ff33 	bl	80062e4 <SD_CheckStatusWithTimeout>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	da01      	bge.n	8006488 <SD_write+0x2c>
  {
    return res;
 8006484:	7dfb      	ldrb	r3, [r7, #23]
 8006486:	e038      	b.n	80064fa <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8006488:	683a      	ldr	r2, [r7, #0]
 800648a:	6879      	ldr	r1, [r7, #4]
 800648c:	68b8      	ldr	r0, [r7, #8]
 800648e:	f7ff fea3 	bl	80061d8 <BSP_SD_WriteBlocks_DMA>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d12f      	bne.n	80064f8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8006498:	f7fb fa18 	bl	80018cc <HAL_GetTick>
 800649c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800649e:	bf00      	nop
 80064a0:	4b18      	ldr	r3, [pc, #96]	@ (8006504 <SD_write+0xa8>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d108      	bne.n	80064ba <SD_write+0x5e>
 80064a8:	f7fb fa10 	bl	80018cc <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	f247 522f 	movw	r2, #29999	@ 0x752f
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d9f2      	bls.n	80064a0 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80064ba:	4b12      	ldr	r3, [pc, #72]	@ (8006504 <SD_write+0xa8>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d102      	bne.n	80064c8 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	75fb      	strb	r3, [r7, #23]
 80064c6:	e017      	b.n	80064f8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80064c8:	4b0e      	ldr	r3, [pc, #56]	@ (8006504 <SD_write+0xa8>)
 80064ca:	2200      	movs	r2, #0
 80064cc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80064ce:	f7fb f9fd 	bl	80018cc <HAL_GetTick>
 80064d2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80064d4:	e007      	b.n	80064e6 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80064d6:	f7ff fe99 	bl	800620c <BSP_SD_GetCardState>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d102      	bne.n	80064e6 <SD_write+0x8a>
          {
            res = RES_OK;
 80064e0:	2300      	movs	r3, #0
 80064e2:	75fb      	strb	r3, [r7, #23]
            break;
 80064e4:	e008      	b.n	80064f8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80064e6:	f7fb f9f1 	bl	80018cc <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	f247 522f 	movw	r2, #29999	@ 0x752f
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d9ee      	bls.n	80064d6 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80064f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3718      	adds	r7, #24
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	20000750 	.word	0x20000750

08006508 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b08c      	sub	sp, #48	@ 0x30
 800650c:	af00      	add	r7, sp, #0
 800650e:	4603      	mov	r3, r0
 8006510:	603a      	str	r2, [r7, #0]
 8006512:	71fb      	strb	r3, [r7, #7]
 8006514:	460b      	mov	r3, r1
 8006516:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800651e:	4b25      	ldr	r3, [pc, #148]	@ (80065b4 <SD_ioctl+0xac>)
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	b2db      	uxtb	r3, r3
 8006524:	f003 0301 	and.w	r3, r3, #1
 8006528:	2b00      	cmp	r3, #0
 800652a:	d001      	beq.n	8006530 <SD_ioctl+0x28>
 800652c:	2303      	movs	r3, #3
 800652e:	e03c      	b.n	80065aa <SD_ioctl+0xa2>

  switch (cmd)
 8006530:	79bb      	ldrb	r3, [r7, #6]
 8006532:	2b03      	cmp	r3, #3
 8006534:	d834      	bhi.n	80065a0 <SD_ioctl+0x98>
 8006536:	a201      	add	r2, pc, #4	@ (adr r2, 800653c <SD_ioctl+0x34>)
 8006538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800653c:	0800654d 	.word	0x0800654d
 8006540:	08006555 	.word	0x08006555
 8006544:	0800656d 	.word	0x0800656d
 8006548:	08006587 	.word	0x08006587
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800654c:	2300      	movs	r3, #0
 800654e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006552:	e028      	b.n	80065a6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006554:	f107 030c 	add.w	r3, r7, #12
 8006558:	4618      	mov	r0, r3
 800655a:	f7ff fe67 	bl	800622c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800655e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006564:	2300      	movs	r3, #0
 8006566:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800656a:	e01c      	b.n	80065a6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800656c:	f107 030c 	add.w	r3, r7, #12
 8006570:	4618      	mov	r0, r3
 8006572:	f7ff fe5b 	bl	800622c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006578:	b29a      	uxth	r2, r3
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800657e:	2300      	movs	r3, #0
 8006580:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006584:	e00f      	b.n	80065a6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006586:	f107 030c 	add.w	r3, r7, #12
 800658a:	4618      	mov	r0, r3
 800658c:	f7ff fe4e 	bl	800622c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006592:	0a5a      	lsrs	r2, r3, #9
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006598:	2300      	movs	r3, #0
 800659a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800659e:	e002      	b.n	80065a6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80065a0:	2304      	movs	r3, #4
 80065a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80065a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3730      	adds	r7, #48	@ 0x30
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	20000009 	.word	0x20000009

080065b8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80065b8:	b480      	push	{r7}
 80065ba:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80065bc:	4b03      	ldr	r3, [pc, #12]	@ (80065cc <BSP_SD_WriteCpltCallback+0x14>)
 80065be:	2201      	movs	r2, #1
 80065c0:	601a      	str	r2, [r3, #0]
}
 80065c2:	bf00      	nop
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr
 80065cc:	20000750 	.word	0x20000750

080065d0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80065d0:	b480      	push	{r7}
 80065d2:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80065d4:	4b03      	ldr	r3, [pc, #12]	@ (80065e4 <BSP_SD_ReadCpltCallback+0x14>)
 80065d6:	2201      	movs	r2, #1
 80065d8:	601a      	str	r2, [r3, #0]
}
 80065da:	bf00      	nop
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr
 80065e4:	20000754 	.word	0x20000754

080065e8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	4603      	mov	r3, r0
 80065f0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80065f2:	79fb      	ldrb	r3, [r7, #7]
 80065f4:	4a08      	ldr	r2, [pc, #32]	@ (8006618 <disk_status+0x30>)
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	4413      	add	r3, r2
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	79fa      	ldrb	r2, [r7, #7]
 8006600:	4905      	ldr	r1, [pc, #20]	@ (8006618 <disk_status+0x30>)
 8006602:	440a      	add	r2, r1
 8006604:	7a12      	ldrb	r2, [r2, #8]
 8006606:	4610      	mov	r0, r2
 8006608:	4798      	blx	r3
 800660a:	4603      	mov	r3, r0
 800660c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800660e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006610:	4618      	mov	r0, r3
 8006612:	3710      	adds	r7, #16
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}
 8006618:	20000780 	.word	0x20000780

0800661c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	4603      	mov	r3, r0
 8006624:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006626:	2300      	movs	r3, #0
 8006628:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800662a:	79fb      	ldrb	r3, [r7, #7]
 800662c:	4a0d      	ldr	r2, [pc, #52]	@ (8006664 <disk_initialize+0x48>)
 800662e:	5cd3      	ldrb	r3, [r2, r3]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d111      	bne.n	8006658 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006634:	79fb      	ldrb	r3, [r7, #7]
 8006636:	4a0b      	ldr	r2, [pc, #44]	@ (8006664 <disk_initialize+0x48>)
 8006638:	2101      	movs	r1, #1
 800663a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800663c:	79fb      	ldrb	r3, [r7, #7]
 800663e:	4a09      	ldr	r2, [pc, #36]	@ (8006664 <disk_initialize+0x48>)
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	4413      	add	r3, r2
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	79fa      	ldrb	r2, [r7, #7]
 800664a:	4906      	ldr	r1, [pc, #24]	@ (8006664 <disk_initialize+0x48>)
 800664c:	440a      	add	r2, r1
 800664e:	7a12      	ldrb	r2, [r2, #8]
 8006650:	4610      	mov	r0, r2
 8006652:	4798      	blx	r3
 8006654:	4603      	mov	r3, r0
 8006656:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006658:	7bfb      	ldrb	r3, [r7, #15]
}
 800665a:	4618      	mov	r0, r3
 800665c:	3710      	adds	r7, #16
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	20000780 	.word	0x20000780

08006668 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006668:	b590      	push	{r4, r7, lr}
 800666a:	b087      	sub	sp, #28
 800666c:	af00      	add	r7, sp, #0
 800666e:	60b9      	str	r1, [r7, #8]
 8006670:	607a      	str	r2, [r7, #4]
 8006672:	603b      	str	r3, [r7, #0]
 8006674:	4603      	mov	r3, r0
 8006676:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006678:	7bfb      	ldrb	r3, [r7, #15]
 800667a:	4a0a      	ldr	r2, [pc, #40]	@ (80066a4 <disk_read+0x3c>)
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	4413      	add	r3, r2
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	689c      	ldr	r4, [r3, #8]
 8006684:	7bfb      	ldrb	r3, [r7, #15]
 8006686:	4a07      	ldr	r2, [pc, #28]	@ (80066a4 <disk_read+0x3c>)
 8006688:	4413      	add	r3, r2
 800668a:	7a18      	ldrb	r0, [r3, #8]
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	68b9      	ldr	r1, [r7, #8]
 8006692:	47a0      	blx	r4
 8006694:	4603      	mov	r3, r0
 8006696:	75fb      	strb	r3, [r7, #23]
  return res;
 8006698:	7dfb      	ldrb	r3, [r7, #23]
}
 800669a:	4618      	mov	r0, r3
 800669c:	371c      	adds	r7, #28
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd90      	pop	{r4, r7, pc}
 80066a2:	bf00      	nop
 80066a4:	20000780 	.word	0x20000780

080066a8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80066a8:	b590      	push	{r4, r7, lr}
 80066aa:	b087      	sub	sp, #28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60b9      	str	r1, [r7, #8]
 80066b0:	607a      	str	r2, [r7, #4]
 80066b2:	603b      	str	r3, [r7, #0]
 80066b4:	4603      	mov	r3, r0
 80066b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80066b8:	7bfb      	ldrb	r3, [r7, #15]
 80066ba:	4a0a      	ldr	r2, [pc, #40]	@ (80066e4 <disk_write+0x3c>)
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4413      	add	r3, r2
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	68dc      	ldr	r4, [r3, #12]
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
 80066c6:	4a07      	ldr	r2, [pc, #28]	@ (80066e4 <disk_write+0x3c>)
 80066c8:	4413      	add	r3, r2
 80066ca:	7a18      	ldrb	r0, [r3, #8]
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	68b9      	ldr	r1, [r7, #8]
 80066d2:	47a0      	blx	r4
 80066d4:	4603      	mov	r3, r0
 80066d6:	75fb      	strb	r3, [r7, #23]
  return res;
 80066d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80066da:	4618      	mov	r0, r3
 80066dc:	371c      	adds	r7, #28
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd90      	pop	{r4, r7, pc}
 80066e2:	bf00      	nop
 80066e4:	20000780 	.word	0x20000780

080066e8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	4603      	mov	r3, r0
 80066f0:	603a      	str	r2, [r7, #0]
 80066f2:	71fb      	strb	r3, [r7, #7]
 80066f4:	460b      	mov	r3, r1
 80066f6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80066f8:	79fb      	ldrb	r3, [r7, #7]
 80066fa:	4a09      	ldr	r2, [pc, #36]	@ (8006720 <disk_ioctl+0x38>)
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	4413      	add	r3, r2
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	79fa      	ldrb	r2, [r7, #7]
 8006706:	4906      	ldr	r1, [pc, #24]	@ (8006720 <disk_ioctl+0x38>)
 8006708:	440a      	add	r2, r1
 800670a:	7a10      	ldrb	r0, [r2, #8]
 800670c:	79b9      	ldrb	r1, [r7, #6]
 800670e:	683a      	ldr	r2, [r7, #0]
 8006710:	4798      	blx	r3
 8006712:	4603      	mov	r3, r0
 8006714:	73fb      	strb	r3, [r7, #15]
  return res;
 8006716:	7bfb      	ldrb	r3, [r7, #15]
}
 8006718:	4618      	mov	r0, r3
 800671a:	3710      	adds	r7, #16
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}
 8006720:	20000780 	.word	0x20000780

08006724 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	3301      	adds	r3, #1
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006734:	89fb      	ldrh	r3, [r7, #14]
 8006736:	021b      	lsls	r3, r3, #8
 8006738:	b21a      	sxth	r2, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	b21b      	sxth	r3, r3
 8006740:	4313      	orrs	r3, r2
 8006742:	b21b      	sxth	r3, r3
 8006744:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006746:	89fb      	ldrh	r3, [r7, #14]
}
 8006748:	4618      	mov	r0, r3
 800674a:	3714      	adds	r7, #20
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006754:	b480      	push	{r7}
 8006756:	b085      	sub	sp, #20
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	3303      	adds	r3, #3
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	021b      	lsls	r3, r3, #8
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	3202      	adds	r2, #2
 800676c:	7812      	ldrb	r2, [r2, #0]
 800676e:	4313      	orrs	r3, r2
 8006770:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	021b      	lsls	r3, r3, #8
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	3201      	adds	r2, #1
 800677a:	7812      	ldrb	r2, [r2, #0]
 800677c:	4313      	orrs	r3, r2
 800677e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	021b      	lsls	r3, r3, #8
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	7812      	ldrb	r2, [r2, #0]
 8006788:	4313      	orrs	r3, r2
 800678a:	60fb      	str	r3, [r7, #12]
	return rv;
 800678c:	68fb      	ldr	r3, [r7, #12]
}
 800678e:	4618      	mov	r0, r3
 8006790:	3714      	adds	r7, #20
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800679a:	b480      	push	{r7}
 800679c:	b083      	sub	sp, #12
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
 80067a2:	460b      	mov	r3, r1
 80067a4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	1c5a      	adds	r2, r3, #1
 80067aa:	607a      	str	r2, [r7, #4]
 80067ac:	887a      	ldrh	r2, [r7, #2]
 80067ae:	b2d2      	uxtb	r2, r2
 80067b0:	701a      	strb	r2, [r3, #0]
 80067b2:	887b      	ldrh	r3, [r7, #2]
 80067b4:	0a1b      	lsrs	r3, r3, #8
 80067b6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	1c5a      	adds	r2, r3, #1
 80067bc:	607a      	str	r2, [r7, #4]
 80067be:	887a      	ldrh	r2, [r7, #2]
 80067c0:	b2d2      	uxtb	r2, r2
 80067c2:	701a      	strb	r2, [r3, #0]
}
 80067c4:	bf00      	nop
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	1c5a      	adds	r2, r3, #1
 80067de:	607a      	str	r2, [r7, #4]
 80067e0:	683a      	ldr	r2, [r7, #0]
 80067e2:	b2d2      	uxtb	r2, r2
 80067e4:	701a      	strb	r2, [r3, #0]
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	0a1b      	lsrs	r3, r3, #8
 80067ea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	1c5a      	adds	r2, r3, #1
 80067f0:	607a      	str	r2, [r7, #4]
 80067f2:	683a      	ldr	r2, [r7, #0]
 80067f4:	b2d2      	uxtb	r2, r2
 80067f6:	701a      	strb	r2, [r3, #0]
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	0a1b      	lsrs	r3, r3, #8
 80067fc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	1c5a      	adds	r2, r3, #1
 8006802:	607a      	str	r2, [r7, #4]
 8006804:	683a      	ldr	r2, [r7, #0]
 8006806:	b2d2      	uxtb	r2, r2
 8006808:	701a      	strb	r2, [r3, #0]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	0a1b      	lsrs	r3, r3, #8
 800680e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	1c5a      	adds	r2, r3, #1
 8006814:	607a      	str	r2, [r7, #4]
 8006816:	683a      	ldr	r2, [r7, #0]
 8006818:	b2d2      	uxtb	r2, r2
 800681a:	701a      	strb	r2, [r3, #0]
}
 800681c:	bf00      	nop
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006828:	b480      	push	{r7}
 800682a:	b087      	sub	sp, #28
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00d      	beq.n	800685e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	1c53      	adds	r3, r2, #1
 8006846:	613b      	str	r3, [r7, #16]
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	1c59      	adds	r1, r3, #1
 800684c:	6179      	str	r1, [r7, #20]
 800684e:	7812      	ldrb	r2, [r2, #0]
 8006850:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	3b01      	subs	r3, #1
 8006856:	607b      	str	r3, [r7, #4]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1f1      	bne.n	8006842 <mem_cpy+0x1a>
	}
}
 800685e:	bf00      	nop
 8006860:	371c      	adds	r7, #28
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr

0800686a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800686a:	b480      	push	{r7}
 800686c:	b087      	sub	sp, #28
 800686e:	af00      	add	r7, sp, #0
 8006870:	60f8      	str	r0, [r7, #12]
 8006872:	60b9      	str	r1, [r7, #8]
 8006874:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	1c5a      	adds	r2, r3, #1
 800687e:	617a      	str	r2, [r7, #20]
 8006880:	68ba      	ldr	r2, [r7, #8]
 8006882:	b2d2      	uxtb	r2, r2
 8006884:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	3b01      	subs	r3, #1
 800688a:	607b      	str	r3, [r7, #4]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1f3      	bne.n	800687a <mem_set+0x10>
}
 8006892:	bf00      	nop
 8006894:	bf00      	nop
 8006896:	371c      	adds	r7, #28
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80068a0:	b480      	push	{r7}
 80068a2:	b089      	sub	sp, #36	@ 0x24
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	61fb      	str	r3, [r7, #28]
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80068b4:	2300      	movs	r3, #0
 80068b6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	1c5a      	adds	r2, r3, #1
 80068bc:	61fa      	str	r2, [r7, #28]
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	4619      	mov	r1, r3
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	1c5a      	adds	r2, r3, #1
 80068c6:	61ba      	str	r2, [r7, #24]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	1acb      	subs	r3, r1, r3
 80068cc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	3b01      	subs	r3, #1
 80068d2:	607b      	str	r3, [r7, #4]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d002      	beq.n	80068e0 <mem_cmp+0x40>
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d0eb      	beq.n	80068b8 <mem_cmp+0x18>

	return r;
 80068e0:	697b      	ldr	r3, [r7, #20]
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3724      	adds	r7, #36	@ 0x24
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr

080068ee <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80068ee:	b480      	push	{r7}
 80068f0:	b083      	sub	sp, #12
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
 80068f6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80068f8:	e002      	b.n	8006900 <chk_chr+0x12>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	3301      	adds	r3, #1
 80068fe:	607b      	str	r3, [r7, #4]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d005      	beq.n	8006914 <chk_chr+0x26>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	461a      	mov	r2, r3
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	4293      	cmp	r3, r2
 8006912:	d1f2      	bne.n	80068fa <chk_chr+0xc>
	return *str;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	781b      	ldrb	r3, [r3, #0]
}
 8006918:	4618      	mov	r0, r3
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006924:	b480      	push	{r7}
 8006926:	b085      	sub	sp, #20
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800692e:	2300      	movs	r3, #0
 8006930:	60bb      	str	r3, [r7, #8]
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	60fb      	str	r3, [r7, #12]
 8006936:	e029      	b.n	800698c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006938:	4a27      	ldr	r2, [pc, #156]	@ (80069d8 <chk_lock+0xb4>)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	011b      	lsls	r3, r3, #4
 800693e:	4413      	add	r3, r2
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d01d      	beq.n	8006982 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006946:	4a24      	ldr	r2, [pc, #144]	@ (80069d8 <chk_lock+0xb4>)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	011b      	lsls	r3, r3, #4
 800694c:	4413      	add	r3, r2
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	429a      	cmp	r2, r3
 8006956:	d116      	bne.n	8006986 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006958:	4a1f      	ldr	r2, [pc, #124]	@ (80069d8 <chk_lock+0xb4>)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	011b      	lsls	r3, r3, #4
 800695e:	4413      	add	r3, r2
 8006960:	3304      	adds	r3, #4
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006968:	429a      	cmp	r2, r3
 800696a:	d10c      	bne.n	8006986 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800696c:	4a1a      	ldr	r2, [pc, #104]	@ (80069d8 <chk_lock+0xb4>)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	011b      	lsls	r3, r3, #4
 8006972:	4413      	add	r3, r2
 8006974:	3308      	adds	r3, #8
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800697c:	429a      	cmp	r2, r3
 800697e:	d102      	bne.n	8006986 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006980:	e007      	b.n	8006992 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006982:	2301      	movs	r3, #1
 8006984:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	3301      	adds	r3, #1
 800698a:	60fb      	str	r3, [r7, #12]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2b01      	cmp	r3, #1
 8006990:	d9d2      	bls.n	8006938 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2b02      	cmp	r3, #2
 8006996:	d109      	bne.n	80069ac <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d102      	bne.n	80069a4 <chk_lock+0x80>
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	d101      	bne.n	80069a8 <chk_lock+0x84>
 80069a4:	2300      	movs	r3, #0
 80069a6:	e010      	b.n	80069ca <chk_lock+0xa6>
 80069a8:	2312      	movs	r3, #18
 80069aa:	e00e      	b.n	80069ca <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d108      	bne.n	80069c4 <chk_lock+0xa0>
 80069b2:	4a09      	ldr	r2, [pc, #36]	@ (80069d8 <chk_lock+0xb4>)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	011b      	lsls	r3, r3, #4
 80069b8:	4413      	add	r3, r2
 80069ba:	330c      	adds	r3, #12
 80069bc:	881b      	ldrh	r3, [r3, #0]
 80069be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069c2:	d101      	bne.n	80069c8 <chk_lock+0xa4>
 80069c4:	2310      	movs	r3, #16
 80069c6:	e000      	b.n	80069ca <chk_lock+0xa6>
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3714      	adds	r7, #20
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	20000760 	.word	0x20000760

080069dc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80069e2:	2300      	movs	r3, #0
 80069e4:	607b      	str	r3, [r7, #4]
 80069e6:	e002      	b.n	80069ee <enq_lock+0x12>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	3301      	adds	r3, #1
 80069ec:	607b      	str	r3, [r7, #4]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d806      	bhi.n	8006a02 <enq_lock+0x26>
 80069f4:	4a09      	ldr	r2, [pc, #36]	@ (8006a1c <enq_lock+0x40>)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	011b      	lsls	r3, r3, #4
 80069fa:	4413      	add	r3, r2
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1f2      	bne.n	80069e8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	bf14      	ite	ne
 8006a08:	2301      	movne	r3, #1
 8006a0a:	2300      	moveq	r3, #0
 8006a0c:	b2db      	uxtb	r3, r3
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	370c      	adds	r7, #12
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	20000760 	.word	0x20000760

08006a20 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b085      	sub	sp, #20
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	60fb      	str	r3, [r7, #12]
 8006a2e:	e01f      	b.n	8006a70 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006a30:	4a41      	ldr	r2, [pc, #260]	@ (8006b38 <inc_lock+0x118>)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	011b      	lsls	r3, r3, #4
 8006a36:	4413      	add	r3, r2
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d113      	bne.n	8006a6a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006a42:	4a3d      	ldr	r2, [pc, #244]	@ (8006b38 <inc_lock+0x118>)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	011b      	lsls	r3, r3, #4
 8006a48:	4413      	add	r3, r2
 8006a4a:	3304      	adds	r3, #4
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d109      	bne.n	8006a6a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006a56:	4a38      	ldr	r2, [pc, #224]	@ (8006b38 <inc_lock+0x118>)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	011b      	lsls	r3, r3, #4
 8006a5c:	4413      	add	r3, r2
 8006a5e:	3308      	adds	r3, #8
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d006      	beq.n	8006a78 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	60fb      	str	r3, [r7, #12]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d9dc      	bls.n	8006a30 <inc_lock+0x10>
 8006a76:	e000      	b.n	8006a7a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006a78:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	d132      	bne.n	8006ae6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006a80:	2300      	movs	r3, #0
 8006a82:	60fb      	str	r3, [r7, #12]
 8006a84:	e002      	b.n	8006a8c <inc_lock+0x6c>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	3301      	adds	r3, #1
 8006a8a:	60fb      	str	r3, [r7, #12]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d806      	bhi.n	8006aa0 <inc_lock+0x80>
 8006a92:	4a29      	ldr	r2, [pc, #164]	@ (8006b38 <inc_lock+0x118>)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	011b      	lsls	r3, r3, #4
 8006a98:	4413      	add	r3, r2
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d1f2      	bne.n	8006a86 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d101      	bne.n	8006aaa <inc_lock+0x8a>
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	e040      	b.n	8006b2c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	4922      	ldr	r1, [pc, #136]	@ (8006b38 <inc_lock+0x118>)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	011b      	lsls	r3, r3, #4
 8006ab4:	440b      	add	r3, r1
 8006ab6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	689a      	ldr	r2, [r3, #8]
 8006abc:	491e      	ldr	r1, [pc, #120]	@ (8006b38 <inc_lock+0x118>)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	011b      	lsls	r3, r3, #4
 8006ac2:	440b      	add	r3, r1
 8006ac4:	3304      	adds	r3, #4
 8006ac6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	695a      	ldr	r2, [r3, #20]
 8006acc:	491a      	ldr	r1, [pc, #104]	@ (8006b38 <inc_lock+0x118>)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	011b      	lsls	r3, r3, #4
 8006ad2:	440b      	add	r3, r1
 8006ad4:	3308      	adds	r3, #8
 8006ad6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006ad8:	4a17      	ldr	r2, [pc, #92]	@ (8006b38 <inc_lock+0x118>)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	011b      	lsls	r3, r3, #4
 8006ade:	4413      	add	r3, r2
 8006ae0:	330c      	adds	r3, #12
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d009      	beq.n	8006b00 <inc_lock+0xe0>
 8006aec:	4a12      	ldr	r2, [pc, #72]	@ (8006b38 <inc_lock+0x118>)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	011b      	lsls	r3, r3, #4
 8006af2:	4413      	add	r3, r2
 8006af4:	330c      	adds	r3, #12
 8006af6:	881b      	ldrh	r3, [r3, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d001      	beq.n	8006b00 <inc_lock+0xe0>
 8006afc:	2300      	movs	r3, #0
 8006afe:	e015      	b.n	8006b2c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d108      	bne.n	8006b18 <inc_lock+0xf8>
 8006b06:	4a0c      	ldr	r2, [pc, #48]	@ (8006b38 <inc_lock+0x118>)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	011b      	lsls	r3, r3, #4
 8006b0c:	4413      	add	r3, r2
 8006b0e:	330c      	adds	r3, #12
 8006b10:	881b      	ldrh	r3, [r3, #0]
 8006b12:	3301      	adds	r3, #1
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	e001      	b.n	8006b1c <inc_lock+0xfc>
 8006b18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006b1c:	4906      	ldr	r1, [pc, #24]	@ (8006b38 <inc_lock+0x118>)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	011b      	lsls	r3, r3, #4
 8006b22:	440b      	add	r3, r1
 8006b24:	330c      	adds	r3, #12
 8006b26:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	3301      	adds	r3, #1
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3714      	adds	r7, #20
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr
 8006b38:	20000760 	.word	0x20000760

08006b3c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b085      	sub	sp, #20
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	3b01      	subs	r3, #1
 8006b48:	607b      	str	r3, [r7, #4]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d825      	bhi.n	8006b9c <dec_lock+0x60>
		n = Files[i].ctr;
 8006b50:	4a17      	ldr	r2, [pc, #92]	@ (8006bb0 <dec_lock+0x74>)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	011b      	lsls	r3, r3, #4
 8006b56:	4413      	add	r3, r2
 8006b58:	330c      	adds	r3, #12
 8006b5a:	881b      	ldrh	r3, [r3, #0]
 8006b5c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006b5e:	89fb      	ldrh	r3, [r7, #14]
 8006b60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b64:	d101      	bne.n	8006b6a <dec_lock+0x2e>
 8006b66:	2300      	movs	r3, #0
 8006b68:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006b6a:	89fb      	ldrh	r3, [r7, #14]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d002      	beq.n	8006b76 <dec_lock+0x3a>
 8006b70:	89fb      	ldrh	r3, [r7, #14]
 8006b72:	3b01      	subs	r3, #1
 8006b74:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006b76:	4a0e      	ldr	r2, [pc, #56]	@ (8006bb0 <dec_lock+0x74>)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	011b      	lsls	r3, r3, #4
 8006b7c:	4413      	add	r3, r2
 8006b7e:	330c      	adds	r3, #12
 8006b80:	89fa      	ldrh	r2, [r7, #14]
 8006b82:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006b84:	89fb      	ldrh	r3, [r7, #14]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d105      	bne.n	8006b96 <dec_lock+0x5a>
 8006b8a:	4a09      	ldr	r2, [pc, #36]	@ (8006bb0 <dec_lock+0x74>)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	011b      	lsls	r3, r3, #4
 8006b90:	4413      	add	r3, r2
 8006b92:	2200      	movs	r2, #0
 8006b94:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006b96:	2300      	movs	r3, #0
 8006b98:	737b      	strb	r3, [r7, #13]
 8006b9a:	e001      	b.n	8006ba0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006b9c:	2302      	movs	r3, #2
 8006b9e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006ba0:	7b7b      	ldrb	r3, [r7, #13]
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3714      	adds	r7, #20
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr
 8006bae:	bf00      	nop
 8006bb0:	20000760 	.word	0x20000760

08006bb4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b085      	sub	sp, #20
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	60fb      	str	r3, [r7, #12]
 8006bc0:	e010      	b.n	8006be4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006bc2:	4a0d      	ldr	r2, [pc, #52]	@ (8006bf8 <clear_lock+0x44>)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	011b      	lsls	r3, r3, #4
 8006bc8:	4413      	add	r3, r2
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d105      	bne.n	8006bde <clear_lock+0x2a>
 8006bd2:	4a09      	ldr	r2, [pc, #36]	@ (8006bf8 <clear_lock+0x44>)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	011b      	lsls	r3, r3, #4
 8006bd8:	4413      	add	r3, r2
 8006bda:	2200      	movs	r2, #0
 8006bdc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	3301      	adds	r3, #1
 8006be2:	60fb      	str	r3, [r7, #12]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d9eb      	bls.n	8006bc2 <clear_lock+0xe>
	}
}
 8006bea:	bf00      	nop
 8006bec:	bf00      	nop
 8006bee:	3714      	adds	r7, #20
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr
 8006bf8:	20000760 	.word	0x20000760

08006bfc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b086      	sub	sp, #24
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006c04:	2300      	movs	r3, #0
 8006c06:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	78db      	ldrb	r3, [r3, #3]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d034      	beq.n	8006c7a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c14:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	7858      	ldrb	r0, [r3, #1]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006c20:	2301      	movs	r3, #1
 8006c22:	697a      	ldr	r2, [r7, #20]
 8006c24:	f7ff fd40 	bl	80066a8 <disk_write>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d002      	beq.n	8006c34 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	73fb      	strb	r3, [r7, #15]
 8006c32:	e022      	b.n	8006c7a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c3e:	697a      	ldr	r2, [r7, #20]
 8006c40:	1ad2      	subs	r2, r2, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	69db      	ldr	r3, [r3, #28]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d217      	bcs.n	8006c7a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	789b      	ldrb	r3, [r3, #2]
 8006c4e:	613b      	str	r3, [r7, #16]
 8006c50:	e010      	b.n	8006c74 <sync_window+0x78>
					wsect += fs->fsize;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	69db      	ldr	r3, [r3, #28]
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	4413      	add	r3, r2
 8006c5a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	7858      	ldrb	r0, [r3, #1]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006c66:	2301      	movs	r3, #1
 8006c68:	697a      	ldr	r2, [r7, #20]
 8006c6a:	f7ff fd1d 	bl	80066a8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	3b01      	subs	r3, #1
 8006c72:	613b      	str	r3, [r7, #16]
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d8eb      	bhi.n	8006c52 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3718      	adds	r7, #24
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c96:	683a      	ldr	r2, [r7, #0]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d01b      	beq.n	8006cd4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f7ff ffad 	bl	8006bfc <sync_window>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006ca6:	7bfb      	ldrb	r3, [r7, #15]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d113      	bne.n	8006cd4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	7858      	ldrb	r0, [r3, #1]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	683a      	ldr	r2, [r7, #0]
 8006cba:	f7ff fcd5 	bl	8006668 <disk_read>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d004      	beq.n	8006cce <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8006cc8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	683a      	ldr	r2, [r7, #0]
 8006cd2:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8006cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3710      	adds	r7, #16
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
	...

08006ce0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f7ff ff87 	bl	8006bfc <sync_window>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006cf2:	7bfb      	ldrb	r3, [r7, #15]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d158      	bne.n	8006daa <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	2b03      	cmp	r3, #3
 8006cfe:	d148      	bne.n	8006d92 <sync_fs+0xb2>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	791b      	ldrb	r3, [r3, #4]
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d144      	bne.n	8006d92 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	3334      	adds	r3, #52	@ 0x34
 8006d0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d10:	2100      	movs	r1, #0
 8006d12:	4618      	mov	r0, r3
 8006d14:	f7ff fda9 	bl	800686a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	3334      	adds	r3, #52	@ 0x34
 8006d1c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006d20:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7ff fd38 	bl	800679a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	3334      	adds	r3, #52	@ 0x34
 8006d2e:	4921      	ldr	r1, [pc, #132]	@ (8006db4 <sync_fs+0xd4>)
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7ff fd4d 	bl	80067d0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	3334      	adds	r3, #52	@ 0x34
 8006d3a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006d3e:	491e      	ldr	r1, [pc, #120]	@ (8006db8 <sync_fs+0xd8>)
 8006d40:	4618      	mov	r0, r3
 8006d42:	f7ff fd45 	bl	80067d0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	3334      	adds	r3, #52	@ 0x34
 8006d4a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	695b      	ldr	r3, [r3, #20]
 8006d52:	4619      	mov	r1, r3
 8006d54:	4610      	mov	r0, r2
 8006d56:	f7ff fd3b 	bl	80067d0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	3334      	adds	r3, #52	@ 0x34
 8006d5e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	4619      	mov	r1, r3
 8006d68:	4610      	mov	r0, r2
 8006d6a:	f7ff fd31 	bl	80067d0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a1b      	ldr	r3, [r3, #32]
 8006d72:	1c5a      	adds	r2, r3, #1
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	7858      	ldrb	r0, [r3, #1]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d86:	2301      	movs	r3, #1
 8006d88:	f7ff fc8e 	bl	80066a8 <disk_write>
			fs->fsi_flag = 0;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	785b      	ldrb	r3, [r3, #1]
 8006d96:	2200      	movs	r2, #0
 8006d98:	2100      	movs	r1, #0
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7ff fca4 	bl	80066e8 <disk_ioctl>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d001      	beq.n	8006daa <sync_fs+0xca>
 8006da6:	2301      	movs	r3, #1
 8006da8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3710      	adds	r7, #16
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	41615252 	.word	0x41615252
 8006db8:	61417272 	.word	0x61417272

08006dbc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	3b02      	subs	r3, #2
 8006dca:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	699b      	ldr	r3, [r3, #24]
 8006dd0:	3b02      	subs	r3, #2
 8006dd2:	683a      	ldr	r2, [r7, #0]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d301      	bcc.n	8006ddc <clust2sect+0x20>
 8006dd8:	2300      	movs	r3, #0
 8006dda:	e008      	b.n	8006dee <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	895b      	ldrh	r3, [r3, #10]
 8006de0:	461a      	mov	r2, r3
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	fb03 f202 	mul.w	r2, r3, r2
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dec:	4413      	add	r3, r2
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	370c      	adds	r7, #12
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr

08006dfa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b086      	sub	sp, #24
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
 8006e02:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d904      	bls.n	8006e1a <get_fat+0x20>
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	683a      	ldr	r2, [r7, #0]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d302      	bcc.n	8006e20 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	617b      	str	r3, [r7, #20]
 8006e1e:	e08e      	b.n	8006f3e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006e20:	f04f 33ff 	mov.w	r3, #4294967295
 8006e24:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	2b03      	cmp	r3, #3
 8006e2c:	d061      	beq.n	8006ef2 <get_fat+0xf8>
 8006e2e:	2b03      	cmp	r3, #3
 8006e30:	dc7b      	bgt.n	8006f2a <get_fat+0x130>
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d002      	beq.n	8006e3c <get_fat+0x42>
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	d041      	beq.n	8006ebe <get_fat+0xc4>
 8006e3a:	e076      	b.n	8006f2a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	60fb      	str	r3, [r7, #12]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	085b      	lsrs	r3, r3, #1
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	4413      	add	r3, r2
 8006e48:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	0a5b      	lsrs	r3, r3, #9
 8006e52:	4413      	add	r3, r2
 8006e54:	4619      	mov	r1, r3
 8006e56:	6938      	ldr	r0, [r7, #16]
 8006e58:	f7ff ff14 	bl	8006c84 <move_window>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d166      	bne.n	8006f30 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	1c5a      	adds	r2, r3, #1
 8006e66:	60fa      	str	r2, [r7, #12]
 8006e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e6c:	693a      	ldr	r2, [r7, #16]
 8006e6e:	4413      	add	r3, r2
 8006e70:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006e74:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	0a5b      	lsrs	r3, r3, #9
 8006e7e:	4413      	add	r3, r2
 8006e80:	4619      	mov	r1, r3
 8006e82:	6938      	ldr	r0, [r7, #16]
 8006e84:	f7ff fefe 	bl	8006c84 <move_window>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d152      	bne.n	8006f34 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e94:	693a      	ldr	r2, [r7, #16]
 8006e96:	4413      	add	r3, r2
 8006e98:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006e9c:	021b      	lsls	r3, r3, #8
 8006e9e:	68ba      	ldr	r2, [r7, #8]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	f003 0301 	and.w	r3, r3, #1
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d002      	beq.n	8006eb4 <get_fat+0xba>
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	091b      	lsrs	r3, r3, #4
 8006eb2:	e002      	b.n	8006eba <get_fat+0xc0>
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006eba:	617b      	str	r3, [r7, #20]
			break;
 8006ebc:	e03f      	b.n	8006f3e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	0a1b      	lsrs	r3, r3, #8
 8006ec6:	4413      	add	r3, r2
 8006ec8:	4619      	mov	r1, r3
 8006eca:	6938      	ldr	r0, [r7, #16]
 8006ecc:	f7ff feda 	bl	8006c84 <move_window>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d130      	bne.n	8006f38 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	005b      	lsls	r3, r3, #1
 8006ee0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006ee4:	4413      	add	r3, r2
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7ff fc1c 	bl	8006724 <ld_word>
 8006eec:	4603      	mov	r3, r0
 8006eee:	617b      	str	r3, [r7, #20]
			break;
 8006ef0:	e025      	b.n	8006f3e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	09db      	lsrs	r3, r3, #7
 8006efa:	4413      	add	r3, r2
 8006efc:	4619      	mov	r1, r3
 8006efe:	6938      	ldr	r0, [r7, #16]
 8006f00:	f7ff fec0 	bl	8006c84 <move_window>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d118      	bne.n	8006f3c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006f18:	4413      	add	r3, r2
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7ff fc1a 	bl	8006754 <ld_dword>
 8006f20:	4603      	mov	r3, r0
 8006f22:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006f26:	617b      	str	r3, [r7, #20]
			break;
 8006f28:	e009      	b.n	8006f3e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	617b      	str	r3, [r7, #20]
 8006f2e:	e006      	b.n	8006f3e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006f30:	bf00      	nop
 8006f32:	e004      	b.n	8006f3e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006f34:	bf00      	nop
 8006f36:	e002      	b.n	8006f3e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006f38:	bf00      	nop
 8006f3a:	e000      	b.n	8006f3e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006f3c:	bf00      	nop
		}
	}

	return val;
 8006f3e:	697b      	ldr	r3, [r7, #20]
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3718      	adds	r7, #24
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006f48:	b590      	push	{r4, r7, lr}
 8006f4a:	b089      	sub	sp, #36	@ 0x24
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006f54:	2302      	movs	r3, #2
 8006f56:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	f240 80d9 	bls.w	8007112 <put_fat+0x1ca>
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	68ba      	ldr	r2, [r7, #8]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	f080 80d3 	bcs.w	8007112 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	2b03      	cmp	r3, #3
 8006f72:	f000 8096 	beq.w	80070a2 <put_fat+0x15a>
 8006f76:	2b03      	cmp	r3, #3
 8006f78:	f300 80cb 	bgt.w	8007112 <put_fat+0x1ca>
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d002      	beq.n	8006f86 <put_fat+0x3e>
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	d06e      	beq.n	8007062 <put_fat+0x11a>
 8006f84:	e0c5      	b.n	8007112 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	61bb      	str	r3, [r7, #24]
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	085b      	lsrs	r3, r3, #1
 8006f8e:	69ba      	ldr	r2, [r7, #24]
 8006f90:	4413      	add	r3, r2
 8006f92:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	0a5b      	lsrs	r3, r3, #9
 8006f9c:	4413      	add	r3, r2
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	68f8      	ldr	r0, [r7, #12]
 8006fa2:	f7ff fe6f 	bl	8006c84 <move_window>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006faa:	7ffb      	ldrb	r3, [r7, #31]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	f040 80a9 	bne.w	8007104 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	1c59      	adds	r1, r3, #1
 8006fbc:	61b9      	str	r1, [r7, #24]
 8006fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fc2:	4413      	add	r3, r2
 8006fc4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	f003 0301 	and.w	r3, r3, #1
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d00d      	beq.n	8006fec <put_fat+0xa4>
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	b25b      	sxtb	r3, r3
 8006fd6:	f003 030f 	and.w	r3, r3, #15
 8006fda:	b25a      	sxtb	r2, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	011b      	lsls	r3, r3, #4
 8006fe2:	b25b      	sxtb	r3, r3
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	b25b      	sxtb	r3, r3
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	e001      	b.n	8006ff0 <put_fat+0xa8>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	697a      	ldr	r2, [r7, #20]
 8006ff2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	0a5b      	lsrs	r3, r3, #9
 8007002:	4413      	add	r3, r2
 8007004:	4619      	mov	r1, r3
 8007006:	68f8      	ldr	r0, [r7, #12]
 8007008:	f7ff fe3c 	bl	8006c84 <move_window>
 800700c:	4603      	mov	r3, r0
 800700e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007010:	7ffb      	ldrb	r3, [r7, #31]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d178      	bne.n	8007108 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007022:	4413      	add	r3, r2
 8007024:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	f003 0301 	and.w	r3, r3, #1
 800702c:	2b00      	cmp	r3, #0
 800702e:	d003      	beq.n	8007038 <put_fat+0xf0>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	091b      	lsrs	r3, r3, #4
 8007034:	b2db      	uxtb	r3, r3
 8007036:	e00e      	b.n	8007056 <put_fat+0x10e>
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	b25b      	sxtb	r3, r3
 800703e:	f023 030f 	bic.w	r3, r3, #15
 8007042:	b25a      	sxtb	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	0a1b      	lsrs	r3, r3, #8
 8007048:	b25b      	sxtb	r3, r3
 800704a:	f003 030f 	and.w	r3, r3, #15
 800704e:	b25b      	sxtb	r3, r3
 8007050:	4313      	orrs	r3, r2
 8007052:	b25b      	sxtb	r3, r3
 8007054:	b2db      	uxtb	r3, r3
 8007056:	697a      	ldr	r2, [r7, #20]
 8007058:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2201      	movs	r2, #1
 800705e:	70da      	strb	r2, [r3, #3]
			break;
 8007060:	e057      	b.n	8007112 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	0a1b      	lsrs	r3, r3, #8
 800706a:	4413      	add	r3, r2
 800706c:	4619      	mov	r1, r3
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f7ff fe08 	bl	8006c84 <move_window>
 8007074:	4603      	mov	r3, r0
 8007076:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007078:	7ffb      	ldrb	r3, [r7, #31]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d146      	bne.n	800710c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	005b      	lsls	r3, r3, #1
 8007088:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800708c:	4413      	add	r3, r2
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	b292      	uxth	r2, r2
 8007092:	4611      	mov	r1, r2
 8007094:	4618      	mov	r0, r3
 8007096:	f7ff fb80 	bl	800679a <st_word>
			fs->wflag = 1;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2201      	movs	r2, #1
 800709e:	70da      	strb	r2, [r3, #3]
			break;
 80070a0:	e037      	b.n	8007112 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	09db      	lsrs	r3, r3, #7
 80070aa:	4413      	add	r3, r2
 80070ac:	4619      	mov	r1, r3
 80070ae:	68f8      	ldr	r0, [r7, #12]
 80070b0:	f7ff fde8 	bl	8006c84 <move_window>
 80070b4:	4603      	mov	r3, r0
 80070b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80070b8:	7ffb      	ldrb	r3, [r7, #31]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d128      	bne.n	8007110 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80070d2:	4413      	add	r3, r2
 80070d4:	4618      	mov	r0, r3
 80070d6:	f7ff fb3d 	bl	8006754 <ld_dword>
 80070da:	4603      	mov	r3, r0
 80070dc:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80070e0:	4323      	orrs	r3, r4
 80070e2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80070f2:	4413      	add	r3, r2
 80070f4:	6879      	ldr	r1, [r7, #4]
 80070f6:	4618      	mov	r0, r3
 80070f8:	f7ff fb6a 	bl	80067d0 <st_dword>
			fs->wflag = 1;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2201      	movs	r2, #1
 8007100:	70da      	strb	r2, [r3, #3]
			break;
 8007102:	e006      	b.n	8007112 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007104:	bf00      	nop
 8007106:	e004      	b.n	8007112 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007108:	bf00      	nop
 800710a:	e002      	b.n	8007112 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800710c:	bf00      	nop
 800710e:	e000      	b.n	8007112 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007110:	bf00      	nop
		}
	}
	return res;
 8007112:	7ffb      	ldrb	r3, [r7, #31]
}
 8007114:	4618      	mov	r0, r3
 8007116:	3724      	adds	r7, #36	@ 0x24
 8007118:	46bd      	mov	sp, r7
 800711a:	bd90      	pop	{r4, r7, pc}

0800711c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b088      	sub	sp, #32
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007128:	2300      	movs	r3, #0
 800712a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	2b01      	cmp	r3, #1
 8007136:	d904      	bls.n	8007142 <remove_chain+0x26>
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	699b      	ldr	r3, [r3, #24]
 800713c:	68ba      	ldr	r2, [r7, #8]
 800713e:	429a      	cmp	r2, r3
 8007140:	d301      	bcc.n	8007146 <remove_chain+0x2a>
 8007142:	2302      	movs	r3, #2
 8007144:	e04b      	b.n	80071de <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00c      	beq.n	8007166 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800714c:	f04f 32ff 	mov.w	r2, #4294967295
 8007150:	6879      	ldr	r1, [r7, #4]
 8007152:	69b8      	ldr	r0, [r7, #24]
 8007154:	f7ff fef8 	bl	8006f48 <put_fat>
 8007158:	4603      	mov	r3, r0
 800715a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800715c:	7ffb      	ldrb	r3, [r7, #31]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d001      	beq.n	8007166 <remove_chain+0x4a>
 8007162:	7ffb      	ldrb	r3, [r7, #31]
 8007164:	e03b      	b.n	80071de <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007166:	68b9      	ldr	r1, [r7, #8]
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	f7ff fe46 	bl	8006dfa <get_fat>
 800716e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d031      	beq.n	80071da <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	2b01      	cmp	r3, #1
 800717a:	d101      	bne.n	8007180 <remove_chain+0x64>
 800717c:	2302      	movs	r3, #2
 800717e:	e02e      	b.n	80071de <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007186:	d101      	bne.n	800718c <remove_chain+0x70>
 8007188:	2301      	movs	r3, #1
 800718a:	e028      	b.n	80071de <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800718c:	2200      	movs	r2, #0
 800718e:	68b9      	ldr	r1, [r7, #8]
 8007190:	69b8      	ldr	r0, [r7, #24]
 8007192:	f7ff fed9 	bl	8006f48 <put_fat>
 8007196:	4603      	mov	r3, r0
 8007198:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800719a:	7ffb      	ldrb	r3, [r7, #31]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d001      	beq.n	80071a4 <remove_chain+0x88>
 80071a0:	7ffb      	ldrb	r3, [r7, #31]
 80071a2:	e01c      	b.n	80071de <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	695a      	ldr	r2, [r3, #20]
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	699b      	ldr	r3, [r3, #24]
 80071ac:	3b02      	subs	r3, #2
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d20b      	bcs.n	80071ca <remove_chain+0xae>
			fs->free_clst++;
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	695b      	ldr	r3, [r3, #20]
 80071b6:	1c5a      	adds	r2, r3, #1
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	791b      	ldrb	r3, [r3, #4]
 80071c0:	f043 0301 	orr.w	r3, r3, #1
 80071c4:	b2da      	uxtb	r2, r3
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	699b      	ldr	r3, [r3, #24]
 80071d2:	68ba      	ldr	r2, [r7, #8]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d3c6      	bcc.n	8007166 <remove_chain+0x4a>
 80071d8:	e000      	b.n	80071dc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80071da:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80071dc:	2300      	movs	r3, #0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3720      	adds	r7, #32
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}

080071e6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b088      	sub	sp, #32
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
 80071ee:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d10d      	bne.n	8007218 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d004      	beq.n	8007212 <create_chain+0x2c>
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	699b      	ldr	r3, [r3, #24]
 800720c:	69ba      	ldr	r2, [r7, #24]
 800720e:	429a      	cmp	r2, r3
 8007210:	d31b      	bcc.n	800724a <create_chain+0x64>
 8007212:	2301      	movs	r3, #1
 8007214:	61bb      	str	r3, [r7, #24]
 8007216:	e018      	b.n	800724a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007218:	6839      	ldr	r1, [r7, #0]
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f7ff fded 	bl	8006dfa <get_fat>
 8007220:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2b01      	cmp	r3, #1
 8007226:	d801      	bhi.n	800722c <create_chain+0x46>
 8007228:	2301      	movs	r3, #1
 800722a:	e070      	b.n	800730e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007232:	d101      	bne.n	8007238 <create_chain+0x52>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	e06a      	b.n	800730e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	429a      	cmp	r2, r3
 8007240:	d201      	bcs.n	8007246 <create_chain+0x60>
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	e063      	b.n	800730e <create_chain+0x128>
		scl = clst;
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800724e:	69fb      	ldr	r3, [r7, #28]
 8007250:	3301      	adds	r3, #1
 8007252:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	699b      	ldr	r3, [r3, #24]
 8007258:	69fa      	ldr	r2, [r7, #28]
 800725a:	429a      	cmp	r2, r3
 800725c:	d307      	bcc.n	800726e <create_chain+0x88>
				ncl = 2;
 800725e:	2302      	movs	r3, #2
 8007260:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007262:	69fa      	ldr	r2, [r7, #28]
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	429a      	cmp	r2, r3
 8007268:	d901      	bls.n	800726e <create_chain+0x88>
 800726a:	2300      	movs	r3, #0
 800726c:	e04f      	b.n	800730e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800726e:	69f9      	ldr	r1, [r7, #28]
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f7ff fdc2 	bl	8006dfa <get_fat>
 8007276:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00e      	beq.n	800729c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d003      	beq.n	800728c <create_chain+0xa6>
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800728a:	d101      	bne.n	8007290 <create_chain+0xaa>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	e03e      	b.n	800730e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007290:	69fa      	ldr	r2, [r7, #28]
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	429a      	cmp	r2, r3
 8007296:	d1da      	bne.n	800724e <create_chain+0x68>
 8007298:	2300      	movs	r3, #0
 800729a:	e038      	b.n	800730e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800729c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800729e:	f04f 32ff 	mov.w	r2, #4294967295
 80072a2:	69f9      	ldr	r1, [r7, #28]
 80072a4:	6938      	ldr	r0, [r7, #16]
 80072a6:	f7ff fe4f 	bl	8006f48 <put_fat>
 80072aa:	4603      	mov	r3, r0
 80072ac:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80072ae:	7dfb      	ldrb	r3, [r7, #23]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d109      	bne.n	80072c8 <create_chain+0xe2>
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d006      	beq.n	80072c8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80072ba:	69fa      	ldr	r2, [r7, #28]
 80072bc:	6839      	ldr	r1, [r7, #0]
 80072be:	6938      	ldr	r0, [r7, #16]
 80072c0:	f7ff fe42 	bl	8006f48 <put_fat>
 80072c4:	4603      	mov	r3, r0
 80072c6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80072c8:	7dfb      	ldrb	r3, [r7, #23]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d116      	bne.n	80072fc <create_chain+0x116>
		fs->last_clst = ncl;
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	69fa      	ldr	r2, [r7, #28]
 80072d2:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	695a      	ldr	r2, [r3, #20]
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	699b      	ldr	r3, [r3, #24]
 80072dc:	3b02      	subs	r3, #2
 80072de:	429a      	cmp	r2, r3
 80072e0:	d804      	bhi.n	80072ec <create_chain+0x106>
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	695b      	ldr	r3, [r3, #20]
 80072e6:	1e5a      	subs	r2, r3, #1
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	791b      	ldrb	r3, [r3, #4]
 80072f0:	f043 0301 	orr.w	r3, r3, #1
 80072f4:	b2da      	uxtb	r2, r3
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	711a      	strb	r2, [r3, #4]
 80072fa:	e007      	b.n	800730c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80072fc:	7dfb      	ldrb	r3, [r7, #23]
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d102      	bne.n	8007308 <create_chain+0x122>
 8007302:	f04f 33ff 	mov.w	r3, #4294967295
 8007306:	e000      	b.n	800730a <create_chain+0x124>
 8007308:	2301      	movs	r3, #1
 800730a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800730c:	69fb      	ldr	r3, [r7, #28]
}
 800730e:	4618      	mov	r0, r3
 8007310:	3720      	adds	r7, #32
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007316:	b480      	push	{r7}
 8007318:	b087      	sub	sp, #28
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
 800731e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800732a:	3304      	adds	r3, #4
 800732c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	0a5b      	lsrs	r3, r3, #9
 8007332:	68fa      	ldr	r2, [r7, #12]
 8007334:	8952      	ldrh	r2, [r2, #10]
 8007336:	fbb3 f3f2 	udiv	r3, r3, r2
 800733a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	1d1a      	adds	r2, r3, #4
 8007340:	613a      	str	r2, [r7, #16]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d101      	bne.n	8007350 <clmt_clust+0x3a>
 800734c:	2300      	movs	r3, #0
 800734e:	e010      	b.n	8007372 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007350:	697a      	ldr	r2, [r7, #20]
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	429a      	cmp	r2, r3
 8007356:	d307      	bcc.n	8007368 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007358:	697a      	ldr	r2, [r7, #20]
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	617b      	str	r3, [r7, #20]
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	3304      	adds	r3, #4
 8007364:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007366:	e7e9      	b.n	800733c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007368:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	4413      	add	r3, r2
}
 8007372:	4618      	mov	r0, r3
 8007374:	371c      	adds	r7, #28
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr

0800737e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800737e:	b580      	push	{r7, lr}
 8007380:	b086      	sub	sp, #24
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
 8007386:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007394:	d204      	bcs.n	80073a0 <dir_sdi+0x22>
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	f003 031f 	and.w	r3, r3, #31
 800739c:	2b00      	cmp	r3, #0
 800739e:	d001      	beq.n	80073a4 <dir_sdi+0x26>
		return FR_INT_ERR;
 80073a0:	2302      	movs	r3, #2
 80073a2:	e063      	b.n	800746c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	683a      	ldr	r2, [r7, #0]
 80073a8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d106      	bne.n	80073c4 <dir_sdi+0x46>
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	d902      	bls.n	80073c4 <dir_sdi+0x46>
		clst = fs->dirbase;
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073c2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d10c      	bne.n	80073e4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	095b      	lsrs	r3, r3, #5
 80073ce:	693a      	ldr	r2, [r7, #16]
 80073d0:	8912      	ldrh	r2, [r2, #8]
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d301      	bcc.n	80073da <dir_sdi+0x5c>
 80073d6:	2302      	movs	r3, #2
 80073d8:	e048      	b.n	800746c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	61da      	str	r2, [r3, #28]
 80073e2:	e029      	b.n	8007438 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	895b      	ldrh	r3, [r3, #10]
 80073e8:	025b      	lsls	r3, r3, #9
 80073ea:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80073ec:	e019      	b.n	8007422 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6979      	ldr	r1, [r7, #20]
 80073f2:	4618      	mov	r0, r3
 80073f4:	f7ff fd01 	bl	8006dfa <get_fat>
 80073f8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007400:	d101      	bne.n	8007406 <dir_sdi+0x88>
 8007402:	2301      	movs	r3, #1
 8007404:	e032      	b.n	800746c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	2b01      	cmp	r3, #1
 800740a:	d904      	bls.n	8007416 <dir_sdi+0x98>
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	699b      	ldr	r3, [r3, #24]
 8007410:	697a      	ldr	r2, [r7, #20]
 8007412:	429a      	cmp	r2, r3
 8007414:	d301      	bcc.n	800741a <dir_sdi+0x9c>
 8007416:	2302      	movs	r3, #2
 8007418:	e028      	b.n	800746c <dir_sdi+0xee>
			ofs -= csz;
 800741a:	683a      	ldr	r2, [r7, #0]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007422:	683a      	ldr	r2, [r7, #0]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	429a      	cmp	r2, r3
 8007428:	d2e1      	bcs.n	80073ee <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800742a:	6979      	ldr	r1, [r7, #20]
 800742c:	6938      	ldr	r0, [r7, #16]
 800742e:	f7ff fcc5 	bl	8006dbc <clust2sect>
 8007432:	4602      	mov	r2, r0
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	697a      	ldr	r2, [r7, #20]
 800743c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	69db      	ldr	r3, [r3, #28]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d101      	bne.n	800744a <dir_sdi+0xcc>
 8007446:	2302      	movs	r3, #2
 8007448:	e010      	b.n	800746c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	69da      	ldr	r2, [r3, #28]
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	0a5b      	lsrs	r3, r3, #9
 8007452:	441a      	add	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007464:	441a      	add	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	3718      	adds	r7, #24
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b086      	sub	sp, #24
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	695b      	ldr	r3, [r3, #20]
 8007488:	3320      	adds	r3, #32
 800748a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	69db      	ldr	r3, [r3, #28]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d003      	beq.n	800749c <dir_next+0x28>
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800749a:	d301      	bcc.n	80074a0 <dir_next+0x2c>
 800749c:	2304      	movs	r3, #4
 800749e:	e0aa      	b.n	80075f6 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	f040 8098 	bne.w	80075dc <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	69db      	ldr	r3, [r3, #28]
 80074b0:	1c5a      	adds	r2, r3, #1
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	699b      	ldr	r3, [r3, #24]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d10b      	bne.n	80074d6 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	095b      	lsrs	r3, r3, #5
 80074c2:	68fa      	ldr	r2, [r7, #12]
 80074c4:	8912      	ldrh	r2, [r2, #8]
 80074c6:	4293      	cmp	r3, r2
 80074c8:	f0c0 8088 	bcc.w	80075dc <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	61da      	str	r2, [r3, #28]
 80074d2:	2304      	movs	r3, #4
 80074d4:	e08f      	b.n	80075f6 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	0a5b      	lsrs	r3, r3, #9
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	8952      	ldrh	r2, [r2, #10]
 80074de:	3a01      	subs	r2, #1
 80074e0:	4013      	ands	r3, r2
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d17a      	bne.n	80075dc <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	699b      	ldr	r3, [r3, #24]
 80074ec:	4619      	mov	r1, r3
 80074ee:	4610      	mov	r0, r2
 80074f0:	f7ff fc83 	bl	8006dfa <get_fat>
 80074f4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d801      	bhi.n	8007500 <dir_next+0x8c>
 80074fc:	2302      	movs	r3, #2
 80074fe:	e07a      	b.n	80075f6 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007506:	d101      	bne.n	800750c <dir_next+0x98>
 8007508:	2301      	movs	r3, #1
 800750a:	e074      	b.n	80075f6 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	699b      	ldr	r3, [r3, #24]
 8007510:	697a      	ldr	r2, [r7, #20]
 8007512:	429a      	cmp	r2, r3
 8007514:	d358      	bcc.n	80075c8 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d104      	bne.n	8007526 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	61da      	str	r2, [r3, #28]
 8007522:	2304      	movs	r3, #4
 8007524:	e067      	b.n	80075f6 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	699b      	ldr	r3, [r3, #24]
 800752c:	4619      	mov	r1, r3
 800752e:	4610      	mov	r0, r2
 8007530:	f7ff fe59 	bl	80071e6 <create_chain>
 8007534:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d101      	bne.n	8007540 <dir_next+0xcc>
 800753c:	2307      	movs	r3, #7
 800753e:	e05a      	b.n	80075f6 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	2b01      	cmp	r3, #1
 8007544:	d101      	bne.n	800754a <dir_next+0xd6>
 8007546:	2302      	movs	r3, #2
 8007548:	e055      	b.n	80075f6 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007550:	d101      	bne.n	8007556 <dir_next+0xe2>
 8007552:	2301      	movs	r3, #1
 8007554:	e04f      	b.n	80075f6 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	f7ff fb50 	bl	8006bfc <sync_window>
 800755c:	4603      	mov	r3, r0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d001      	beq.n	8007566 <dir_next+0xf2>
 8007562:	2301      	movs	r3, #1
 8007564:	e047      	b.n	80075f6 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	3334      	adds	r3, #52	@ 0x34
 800756a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800756e:	2100      	movs	r1, #0
 8007570:	4618      	mov	r0, r3
 8007572:	f7ff f97a 	bl	800686a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007576:	2300      	movs	r3, #0
 8007578:	613b      	str	r3, [r7, #16]
 800757a:	6979      	ldr	r1, [r7, #20]
 800757c:	68f8      	ldr	r0, [r7, #12]
 800757e:	f7ff fc1d 	bl	8006dbc <clust2sect>
 8007582:	4602      	mov	r2, r0
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	631a      	str	r2, [r3, #48]	@ 0x30
 8007588:	e012      	b.n	80075b0 <dir_next+0x13c>
						fs->wflag = 1;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2201      	movs	r2, #1
 800758e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007590:	68f8      	ldr	r0, [r7, #12]
 8007592:	f7ff fb33 	bl	8006bfc <sync_window>
 8007596:	4603      	mov	r3, r0
 8007598:	2b00      	cmp	r3, #0
 800759a:	d001      	beq.n	80075a0 <dir_next+0x12c>
 800759c:	2301      	movs	r3, #1
 800759e:	e02a      	b.n	80075f6 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	3301      	adds	r3, #1
 80075a4:	613b      	str	r3, [r7, #16]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075aa:	1c5a      	adds	r2, r3, #1
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	895b      	ldrh	r3, [r3, #10]
 80075b4:	461a      	mov	r2, r3
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d3e6      	bcc.n	800758a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	1ad2      	subs	r2, r2, r3
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	697a      	ldr	r2, [r7, #20]
 80075cc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80075ce:	6979      	ldr	r1, [r7, #20]
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	f7ff fbf3 	bl	8006dbc <clust2sect>
 80075d6:	4602      	mov	r2, r0
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	68ba      	ldr	r2, [r7, #8]
 80075e0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ee:	441a      	add	r2, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3718      	adds	r7, #24
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}

080075fe <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b086      	sub	sp, #24
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
 8007606:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800760e:	2100      	movs	r1, #0
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f7ff feb4 	bl	800737e <dir_sdi>
 8007616:	4603      	mov	r3, r0
 8007618:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800761a:	7dfb      	ldrb	r3, [r7, #23]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d12b      	bne.n	8007678 <dir_alloc+0x7a>
		n = 0;
 8007620:	2300      	movs	r3, #0
 8007622:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	69db      	ldr	r3, [r3, #28]
 8007628:	4619      	mov	r1, r3
 800762a:	68f8      	ldr	r0, [r7, #12]
 800762c:	f7ff fb2a 	bl	8006c84 <move_window>
 8007630:	4603      	mov	r3, r0
 8007632:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007634:	7dfb      	ldrb	r3, [r7, #23]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d11d      	bne.n	8007676 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a1b      	ldr	r3, [r3, #32]
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	2be5      	cmp	r3, #229	@ 0xe5
 8007642:	d004      	beq.n	800764e <dir_alloc+0x50>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6a1b      	ldr	r3, [r3, #32]
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d107      	bne.n	800765e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	3301      	adds	r3, #1
 8007652:	613b      	str	r3, [r7, #16]
 8007654:	693a      	ldr	r2, [r7, #16]
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	429a      	cmp	r2, r3
 800765a:	d102      	bne.n	8007662 <dir_alloc+0x64>
 800765c:	e00c      	b.n	8007678 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800765e:	2300      	movs	r3, #0
 8007660:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007662:	2101      	movs	r1, #1
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f7ff ff05 	bl	8007474 <dir_next>
 800766a:	4603      	mov	r3, r0
 800766c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800766e:	7dfb      	ldrb	r3, [r7, #23]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d0d7      	beq.n	8007624 <dir_alloc+0x26>
 8007674:	e000      	b.n	8007678 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007676:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007678:	7dfb      	ldrb	r3, [r7, #23]
 800767a:	2b04      	cmp	r3, #4
 800767c:	d101      	bne.n	8007682 <dir_alloc+0x84>
 800767e:	2307      	movs	r3, #7
 8007680:	75fb      	strb	r3, [r7, #23]
	return res;
 8007682:	7dfb      	ldrb	r3, [r7, #23]
}
 8007684:	4618      	mov	r0, r3
 8007686:	3718      	adds	r7, #24
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	331a      	adds	r3, #26
 800769a:	4618      	mov	r0, r3
 800769c:	f7ff f842 	bl	8006724 <ld_word>
 80076a0:	4603      	mov	r3, r0
 80076a2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	2b03      	cmp	r3, #3
 80076aa:	d109      	bne.n	80076c0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	3314      	adds	r3, #20
 80076b0:	4618      	mov	r0, r3
 80076b2:	f7ff f837 	bl	8006724 <ld_word>
 80076b6:	4603      	mov	r3, r0
 80076b8:	041b      	lsls	r3, r3, #16
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	4313      	orrs	r3, r2
 80076be:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80076c0:	68fb      	ldr	r3, [r7, #12]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b084      	sub	sp, #16
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	60f8      	str	r0, [r7, #12]
 80076d2:	60b9      	str	r1, [r7, #8]
 80076d4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	331a      	adds	r3, #26
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	b292      	uxth	r2, r2
 80076de:	4611      	mov	r1, r2
 80076e0:	4618      	mov	r0, r3
 80076e2:	f7ff f85a 	bl	800679a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	2b03      	cmp	r3, #3
 80076ec:	d109      	bne.n	8007702 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	f103 0214 	add.w	r2, r3, #20
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	0c1b      	lsrs	r3, r3, #16
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	4619      	mov	r1, r3
 80076fc:	4610      	mov	r0, r2
 80076fe:	f7ff f84c 	bl	800679a <st_word>
	}
}
 8007702:	bf00      	nop
 8007704:	3710      	adds	r7, #16
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
	...

0800770c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800770c:	b590      	push	{r4, r7, lr}
 800770e:	b087      	sub	sp, #28
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	331a      	adds	r3, #26
 800771a:	4618      	mov	r0, r3
 800771c:	f7ff f802 	bl	8006724 <ld_word>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d001      	beq.n	800772a <cmp_lfn+0x1e>
 8007726:	2300      	movs	r3, #0
 8007728:	e059      	b.n	80077de <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007732:	1e5a      	subs	r2, r3, #1
 8007734:	4613      	mov	r3, r2
 8007736:	005b      	lsls	r3, r3, #1
 8007738:	4413      	add	r3, r2
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	4413      	add	r3, r2
 800773e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007740:	2301      	movs	r3, #1
 8007742:	81fb      	strh	r3, [r7, #14]
 8007744:	2300      	movs	r3, #0
 8007746:	613b      	str	r3, [r7, #16]
 8007748:	e033      	b.n	80077b2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800774a:	4a27      	ldr	r2, [pc, #156]	@ (80077e8 <cmp_lfn+0xdc>)
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	4413      	add	r3, r2
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	461a      	mov	r2, r3
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	4413      	add	r3, r2
 8007758:	4618      	mov	r0, r3
 800775a:	f7fe ffe3 	bl	8006724 <ld_word>
 800775e:	4603      	mov	r3, r0
 8007760:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007762:	89fb      	ldrh	r3, [r7, #14]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d01a      	beq.n	800779e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	2bfe      	cmp	r3, #254	@ 0xfe
 800776c:	d812      	bhi.n	8007794 <cmp_lfn+0x88>
 800776e:	89bb      	ldrh	r3, [r7, #12]
 8007770:	4618      	mov	r0, r3
 8007772:	f001 fe55 	bl	8009420 <ff_wtoupper>
 8007776:	4603      	mov	r3, r0
 8007778:	461c      	mov	r4, r3
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	1c5a      	adds	r2, r3, #1
 800777e:	617a      	str	r2, [r7, #20]
 8007780:	005b      	lsls	r3, r3, #1
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	4413      	add	r3, r2
 8007786:	881b      	ldrh	r3, [r3, #0]
 8007788:	4618      	mov	r0, r3
 800778a:	f001 fe49 	bl	8009420 <ff_wtoupper>
 800778e:	4603      	mov	r3, r0
 8007790:	429c      	cmp	r4, r3
 8007792:	d001      	beq.n	8007798 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8007794:	2300      	movs	r3, #0
 8007796:	e022      	b.n	80077de <cmp_lfn+0xd2>
			}
			wc = uc;
 8007798:	89bb      	ldrh	r3, [r7, #12]
 800779a:	81fb      	strh	r3, [r7, #14]
 800779c:	e006      	b.n	80077ac <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800779e:	89bb      	ldrh	r3, [r7, #12]
 80077a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d001      	beq.n	80077ac <cmp_lfn+0xa0>
 80077a8:	2300      	movs	r3, #0
 80077aa:	e018      	b.n	80077de <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	3301      	adds	r3, #1
 80077b0:	613b      	str	r3, [r7, #16]
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	2b0c      	cmp	r3, #12
 80077b6:	d9c8      	bls.n	800774a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d00b      	beq.n	80077dc <cmp_lfn+0xd0>
 80077c4:	89fb      	ldrh	r3, [r7, #14]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d008      	beq.n	80077dc <cmp_lfn+0xd0>
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	005b      	lsls	r3, r3, #1
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	4413      	add	r3, r2
 80077d2:	881b      	ldrh	r3, [r3, #0]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d001      	beq.n	80077dc <cmp_lfn+0xd0>
 80077d8:	2300      	movs	r3, #0
 80077da:	e000      	b.n	80077de <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80077dc:	2301      	movs	r3, #1
}
 80077de:	4618      	mov	r0, r3
 80077e0:	371c      	adds	r7, #28
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd90      	pop	{r4, r7, pc}
 80077e6:	bf00      	nop
 80077e8:	08009924 	.word	0x08009924

080077ec <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b088      	sub	sp, #32
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	4611      	mov	r1, r2
 80077f8:	461a      	mov	r2, r3
 80077fa:	460b      	mov	r3, r1
 80077fc:	71fb      	strb	r3, [r7, #7]
 80077fe:	4613      	mov	r3, r2
 8007800:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	330d      	adds	r3, #13
 8007806:	79ba      	ldrb	r2, [r7, #6]
 8007808:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	330b      	adds	r3, #11
 800780e:	220f      	movs	r2, #15
 8007810:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	330c      	adds	r3, #12
 8007816:	2200      	movs	r2, #0
 8007818:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	331a      	adds	r3, #26
 800781e:	2100      	movs	r1, #0
 8007820:	4618      	mov	r0, r3
 8007822:	f7fe ffba 	bl	800679a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8007826:	79fb      	ldrb	r3, [r7, #7]
 8007828:	1e5a      	subs	r2, r3, #1
 800782a:	4613      	mov	r3, r2
 800782c:	005b      	lsls	r3, r3, #1
 800782e:	4413      	add	r3, r2
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	4413      	add	r3, r2
 8007834:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8007836:	2300      	movs	r3, #0
 8007838:	82fb      	strh	r3, [r7, #22]
 800783a:	2300      	movs	r3, #0
 800783c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800783e:	8afb      	ldrh	r3, [r7, #22]
 8007840:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007844:	4293      	cmp	r3, r2
 8007846:	d007      	beq.n	8007858 <put_lfn+0x6c>
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	1c5a      	adds	r2, r3, #1
 800784c:	61fa      	str	r2, [r7, #28]
 800784e:	005b      	lsls	r3, r3, #1
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	4413      	add	r3, r2
 8007854:	881b      	ldrh	r3, [r3, #0]
 8007856:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8007858:	4a17      	ldr	r2, [pc, #92]	@ (80078b8 <put_lfn+0xcc>)
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	4413      	add	r3, r2
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	461a      	mov	r2, r3
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	4413      	add	r3, r2
 8007866:	8afa      	ldrh	r2, [r7, #22]
 8007868:	4611      	mov	r1, r2
 800786a:	4618      	mov	r0, r3
 800786c:	f7fe ff95 	bl	800679a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007870:	8afb      	ldrh	r3, [r7, #22]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d102      	bne.n	800787c <put_lfn+0x90>
 8007876:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800787a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	3301      	adds	r3, #1
 8007880:	61bb      	str	r3, [r7, #24]
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	2b0c      	cmp	r3, #12
 8007886:	d9da      	bls.n	800783e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007888:	8afb      	ldrh	r3, [r7, #22]
 800788a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800788e:	4293      	cmp	r3, r2
 8007890:	d006      	beq.n	80078a0 <put_lfn+0xb4>
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	005b      	lsls	r3, r3, #1
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	4413      	add	r3, r2
 800789a:	881b      	ldrh	r3, [r3, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d103      	bne.n	80078a8 <put_lfn+0xbc>
 80078a0:	79fb      	ldrb	r3, [r7, #7]
 80078a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078a6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	79fa      	ldrb	r2, [r7, #7]
 80078ac:	701a      	strb	r2, [r3, #0]
}
 80078ae:	bf00      	nop
 80078b0:	3720      	adds	r7, #32
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	08009924 	.word	0x08009924

080078bc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b08c      	sub	sp, #48	@ 0x30
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
 80078c8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80078ca:	220b      	movs	r2, #11
 80078cc:	68b9      	ldr	r1, [r7, #8]
 80078ce:	68f8      	ldr	r0, [r7, #12]
 80078d0:	f7fe ffaa 	bl	8006828 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	2b05      	cmp	r3, #5
 80078d8:	d929      	bls.n	800792e <gen_numname+0x72>
		sr = seq;
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80078de:	e020      	b.n	8007922 <gen_numname+0x66>
			wc = *lfn++;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	1c9a      	adds	r2, r3, #2
 80078e4:	607a      	str	r2, [r7, #4]
 80078e6:	881b      	ldrh	r3, [r3, #0]
 80078e8:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 80078ea:	2300      	movs	r3, #0
 80078ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80078ee:	e015      	b.n	800791c <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 80078f0:	69fb      	ldr	r3, [r7, #28]
 80078f2:	005a      	lsls	r2, r3, #1
 80078f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80078f6:	f003 0301 	and.w	r3, r3, #1
 80078fa:	4413      	add	r3, r2
 80078fc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80078fe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007900:	085b      	lsrs	r3, r3, #1
 8007902:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800790a:	2b00      	cmp	r3, #0
 800790c:	d003      	beq.n	8007916 <gen_numname+0x5a>
 800790e:	69fa      	ldr	r2, [r7, #28]
 8007910:	4b30      	ldr	r3, [pc, #192]	@ (80079d4 <gen_numname+0x118>)
 8007912:	4053      	eors	r3, r2
 8007914:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8007916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007918:	3301      	adds	r3, #1
 800791a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800791c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800791e:	2b0f      	cmp	r3, #15
 8007920:	d9e6      	bls.n	80078f0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	881b      	ldrh	r3, [r3, #0]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d1da      	bne.n	80078e0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800792e:	2307      	movs	r3, #7
 8007930:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	b2db      	uxtb	r3, r3
 8007936:	f003 030f 	and.w	r3, r3, #15
 800793a:	b2db      	uxtb	r3, r3
 800793c:	3330      	adds	r3, #48	@ 0x30
 800793e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8007942:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007946:	2b39      	cmp	r3, #57	@ 0x39
 8007948:	d904      	bls.n	8007954 <gen_numname+0x98>
 800794a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800794e:	3307      	adds	r3, #7
 8007950:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8007954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007956:	1e5a      	subs	r2, r3, #1
 8007958:	62ba      	str	r2, [r7, #40]	@ 0x28
 800795a:	3330      	adds	r3, #48	@ 0x30
 800795c:	443b      	add	r3, r7
 800795e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8007962:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	091b      	lsrs	r3, r3, #4
 800796a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d1df      	bne.n	8007932 <gen_numname+0x76>
	ns[i] = '~';
 8007972:	f107 0214 	add.w	r2, r7, #20
 8007976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007978:	4413      	add	r3, r2
 800797a:	227e      	movs	r2, #126	@ 0x7e
 800797c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800797e:	2300      	movs	r3, #0
 8007980:	627b      	str	r3, [r7, #36]	@ 0x24
 8007982:	e002      	b.n	800798a <gen_numname+0xce>
 8007984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007986:	3301      	adds	r3, #1
 8007988:	627b      	str	r3, [r7, #36]	@ 0x24
 800798a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800798c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800798e:	429a      	cmp	r2, r3
 8007990:	d205      	bcs.n	800799e <gen_numname+0xe2>
 8007992:	68fa      	ldr	r2, [r7, #12]
 8007994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007996:	4413      	add	r3, r2
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	2b20      	cmp	r3, #32
 800799c:	d1f2      	bne.n	8007984 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800799e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079a0:	2b07      	cmp	r3, #7
 80079a2:	d807      	bhi.n	80079b4 <gen_numname+0xf8>
 80079a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079a6:	1c5a      	adds	r2, r3, #1
 80079a8:	62ba      	str	r2, [r7, #40]	@ 0x28
 80079aa:	3330      	adds	r3, #48	@ 0x30
 80079ac:	443b      	add	r3, r7
 80079ae:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80079b2:	e000      	b.n	80079b6 <gen_numname+0xfa>
 80079b4:	2120      	movs	r1, #32
 80079b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b8:	1c5a      	adds	r2, r3, #1
 80079ba:	627a      	str	r2, [r7, #36]	@ 0x24
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	4413      	add	r3, r2
 80079c0:	460a      	mov	r2, r1
 80079c2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80079c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c6:	2b07      	cmp	r3, #7
 80079c8:	d9e9      	bls.n	800799e <gen_numname+0xe2>
}
 80079ca:	bf00      	nop
 80079cc:	bf00      	nop
 80079ce:	3730      	adds	r7, #48	@ 0x30
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	00011021 	.word	0x00011021

080079d8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80079d8:	b480      	push	{r7}
 80079da:	b085      	sub	sp, #20
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80079e0:	2300      	movs	r3, #0
 80079e2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80079e4:	230b      	movs	r3, #11
 80079e6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80079e8:	7bfb      	ldrb	r3, [r7, #15]
 80079ea:	b2da      	uxtb	r2, r3
 80079ec:	0852      	lsrs	r2, r2, #1
 80079ee:	01db      	lsls	r3, r3, #7
 80079f0:	4313      	orrs	r3, r2
 80079f2:	b2da      	uxtb	r2, r3
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	1c59      	adds	r1, r3, #1
 80079f8:	6079      	str	r1, [r7, #4]
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	4413      	add	r3, r2
 80079fe:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	3b01      	subs	r3, #1
 8007a04:	60bb      	str	r3, [r7, #8]
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1ed      	bne.n	80079e8 <sum_sfn+0x10>
	return sum;
 8007a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3714      	adds	r7, #20
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr

08007a1a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b086      	sub	sp, #24
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007a28:	2100      	movs	r1, #0
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f7ff fca7 	bl	800737e <dir_sdi>
 8007a30:	4603      	mov	r3, r0
 8007a32:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007a34:	7dfb      	ldrb	r3, [r7, #23]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d001      	beq.n	8007a3e <dir_find+0x24>
 8007a3a:	7dfb      	ldrb	r3, [r7, #23]
 8007a3c:	e0a9      	b.n	8007b92 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007a3e:	23ff      	movs	r3, #255	@ 0xff
 8007a40:	753b      	strb	r3, [r7, #20]
 8007a42:	7d3b      	ldrb	r3, [r7, #20]
 8007a44:	757b      	strb	r3, [r7, #21]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f04f 32ff 	mov.w	r2, #4294967295
 8007a4c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	69db      	ldr	r3, [r3, #28]
 8007a52:	4619      	mov	r1, r3
 8007a54:	6938      	ldr	r0, [r7, #16]
 8007a56:	f7ff f915 	bl	8006c84 <move_window>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007a5e:	7dfb      	ldrb	r3, [r7, #23]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f040 8090 	bne.w	8007b86 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a1b      	ldr	r3, [r3, #32]
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007a6e:	7dbb      	ldrb	r3, [r7, #22]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d102      	bne.n	8007a7a <dir_find+0x60>
 8007a74:	2304      	movs	r3, #4
 8007a76:	75fb      	strb	r3, [r7, #23]
 8007a78:	e08a      	b.n	8007b90 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a1b      	ldr	r3, [r3, #32]
 8007a7e:	330b      	adds	r3, #11
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a86:	73fb      	strb	r3, [r7, #15]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	7bfa      	ldrb	r2, [r7, #15]
 8007a8c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007a8e:	7dbb      	ldrb	r3, [r7, #22]
 8007a90:	2be5      	cmp	r3, #229	@ 0xe5
 8007a92:	d007      	beq.n	8007aa4 <dir_find+0x8a>
 8007a94:	7bfb      	ldrb	r3, [r7, #15]
 8007a96:	f003 0308 	and.w	r3, r3, #8
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d009      	beq.n	8007ab2 <dir_find+0x98>
 8007a9e:	7bfb      	ldrb	r3, [r7, #15]
 8007aa0:	2b0f      	cmp	r3, #15
 8007aa2:	d006      	beq.n	8007ab2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007aa4:	23ff      	movs	r3, #255	@ 0xff
 8007aa6:	757b      	strb	r3, [r7, #21]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8007aae:	631a      	str	r2, [r3, #48]	@ 0x30
 8007ab0:	e05e      	b.n	8007b70 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8007ab2:	7bfb      	ldrb	r3, [r7, #15]
 8007ab4:	2b0f      	cmp	r3, #15
 8007ab6:	d136      	bne.n	8007b26 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d154      	bne.n	8007b70 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8007ac6:	7dbb      	ldrb	r3, [r7, #22]
 8007ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d00d      	beq.n	8007aec <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6a1b      	ldr	r3, [r3, #32]
 8007ad4:	7b5b      	ldrb	r3, [r3, #13]
 8007ad6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8007ad8:	7dbb      	ldrb	r3, [r7, #22]
 8007ada:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ade:	75bb      	strb	r3, [r7, #22]
 8007ae0:	7dbb      	ldrb	r3, [r7, #22]
 8007ae2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	695a      	ldr	r2, [r3, #20]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007aec:	7dba      	ldrb	r2, [r7, #22]
 8007aee:	7d7b      	ldrb	r3, [r7, #21]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d115      	bne.n	8007b20 <dir_find+0x106>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6a1b      	ldr	r3, [r3, #32]
 8007af8:	330d      	adds	r3, #13
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	7d3a      	ldrb	r2, [r7, #20]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d10e      	bne.n	8007b20 <dir_find+0x106>
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	68da      	ldr	r2, [r3, #12]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6a1b      	ldr	r3, [r3, #32]
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	4610      	mov	r0, r2
 8007b0e:	f7ff fdfd 	bl	800770c <cmp_lfn>
 8007b12:	4603      	mov	r3, r0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d003      	beq.n	8007b20 <dir_find+0x106>
 8007b18:	7d7b      	ldrb	r3, [r7, #21]
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	e000      	b.n	8007b22 <dir_find+0x108>
 8007b20:	23ff      	movs	r3, #255	@ 0xff
 8007b22:	757b      	strb	r3, [r7, #21]
 8007b24:	e024      	b.n	8007b70 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007b26:	7d7b      	ldrb	r3, [r7, #21]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d109      	bne.n	8007b40 <dir_find+0x126>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6a1b      	ldr	r3, [r3, #32]
 8007b30:	4618      	mov	r0, r3
 8007b32:	f7ff ff51 	bl	80079d8 <sum_sfn>
 8007b36:	4603      	mov	r3, r0
 8007b38:	461a      	mov	r2, r3
 8007b3a:	7d3b      	ldrb	r3, [r7, #20]
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d024      	beq.n	8007b8a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007b46:	f003 0301 	and.w	r3, r3, #1
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d10a      	bne.n	8007b64 <dir_find+0x14a>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a18      	ldr	r0, [r3, #32]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	3324      	adds	r3, #36	@ 0x24
 8007b56:	220b      	movs	r2, #11
 8007b58:	4619      	mov	r1, r3
 8007b5a:	f7fe fea1 	bl	80068a0 <mem_cmp>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d014      	beq.n	8007b8e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007b64:	23ff      	movs	r3, #255	@ 0xff
 8007b66:	757b      	strb	r3, [r7, #21]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8007b6e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007b70:	2100      	movs	r1, #0
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f7ff fc7e 	bl	8007474 <dir_next>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007b7c:	7dfb      	ldrb	r3, [r7, #23]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	f43f af65 	beq.w	8007a4e <dir_find+0x34>
 8007b84:	e004      	b.n	8007b90 <dir_find+0x176>
		if (res != FR_OK) break;
 8007b86:	bf00      	nop
 8007b88:	e002      	b.n	8007b90 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007b8a:	bf00      	nop
 8007b8c:	e000      	b.n	8007b90 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007b8e:	bf00      	nop

	return res;
 8007b90:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3718      	adds	r7, #24
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
	...

08007b9c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b08c      	sub	sp, #48	@ 0x30
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007bb0:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d001      	beq.n	8007bbc <dir_register+0x20>
 8007bb8:	2306      	movs	r3, #6
 8007bba:	e0e0      	b.n	8007d7e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bc0:	e002      	b.n	8007bc8 <dir_register+0x2c>
 8007bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	68da      	ldr	r2, [r3, #12]
 8007bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bce:	005b      	lsls	r3, r3, #1
 8007bd0:	4413      	add	r3, r2
 8007bd2:	881b      	ldrh	r3, [r3, #0]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d1f4      	bne.n	8007bc2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8007bde:	f107 030c 	add.w	r3, r7, #12
 8007be2:	220c      	movs	r2, #12
 8007be4:	4618      	mov	r0, r3
 8007be6:	f7fe fe1f 	bl	8006828 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8007bea:	7dfb      	ldrb	r3, [r7, #23]
 8007bec:	f003 0301 	and.w	r3, r3, #1
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d032      	beq.n	8007c5a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2240      	movs	r2, #64	@ 0x40
 8007bf8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c00:	e016      	b.n	8007c30 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	68da      	ldr	r2, [r3, #12]
 8007c0c:	f107 010c 	add.w	r1, r7, #12
 8007c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c12:	f7ff fe53 	bl	80078bc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f7ff feff 	bl	8007a1a <dir_find>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8007c22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d106      	bne.n	8007c38 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8007c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c32:	2b63      	cmp	r3, #99	@ 0x63
 8007c34:	d9e5      	bls.n	8007c02 <dir_register+0x66>
 8007c36:	e000      	b.n	8007c3a <dir_register+0x9e>
			if (res != FR_OK) break;
 8007c38:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c3c:	2b64      	cmp	r3, #100	@ 0x64
 8007c3e:	d101      	bne.n	8007c44 <dir_register+0xa8>
 8007c40:	2307      	movs	r3, #7
 8007c42:	e09c      	b.n	8007d7e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007c44:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007c48:	2b04      	cmp	r3, #4
 8007c4a:	d002      	beq.n	8007c52 <dir_register+0xb6>
 8007c4c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007c50:	e095      	b.n	8007d7e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8007c52:	7dfa      	ldrb	r2, [r7, #23]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007c5a:	7dfb      	ldrb	r3, [r7, #23]
 8007c5c:	f003 0302 	and.w	r3, r3, #2
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d007      	beq.n	8007c74 <dir_register+0xd8>
 8007c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c66:	330c      	adds	r3, #12
 8007c68:	4a47      	ldr	r2, [pc, #284]	@ (8007d88 <dir_register+0x1ec>)
 8007c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c6e:	089b      	lsrs	r3, r3, #2
 8007c70:	3301      	adds	r3, #1
 8007c72:	e000      	b.n	8007c76 <dir_register+0xda>
 8007c74:	2301      	movs	r3, #1
 8007c76:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007c78:	6a39      	ldr	r1, [r7, #32]
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f7ff fcbf 	bl	80075fe <dir_alloc>
 8007c80:	4603      	mov	r3, r0
 8007c82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007c86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d148      	bne.n	8007d20 <dir_register+0x184>
 8007c8e:	6a3b      	ldr	r3, [r7, #32]
 8007c90:	3b01      	subs	r3, #1
 8007c92:	623b      	str	r3, [r7, #32]
 8007c94:	6a3b      	ldr	r3, [r7, #32]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d042      	beq.n	8007d20 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	695a      	ldr	r2, [r3, #20]
 8007c9e:	6a3b      	ldr	r3, [r7, #32]
 8007ca0:	015b      	lsls	r3, r3, #5
 8007ca2:	1ad3      	subs	r3, r2, r3
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f7ff fb69 	bl	800737e <dir_sdi>
 8007cac:	4603      	mov	r3, r0
 8007cae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8007cb2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d132      	bne.n	8007d20 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	3324      	adds	r3, #36	@ 0x24
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7ff fe8a 	bl	80079d8 <sum_sfn>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	69db      	ldr	r3, [r3, #28]
 8007ccc:	4619      	mov	r1, r3
 8007cce:	69f8      	ldr	r0, [r7, #28]
 8007cd0:	f7fe ffd8 	bl	8006c84 <move_window>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8007cda:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d11d      	bne.n	8007d1e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007ce2:	69fb      	ldr	r3, [r7, #28]
 8007ce4:	68d8      	ldr	r0, [r3, #12]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6a19      	ldr	r1, [r3, #32]
 8007cea:	6a3b      	ldr	r3, [r7, #32]
 8007cec:	b2da      	uxtb	r2, r3
 8007cee:	7efb      	ldrb	r3, [r7, #27]
 8007cf0:	f7ff fd7c 	bl	80077ec <put_lfn>
				fs->wflag = 1;
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8007cfa:	2100      	movs	r1, #0
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f7ff fbb9 	bl	8007474 <dir_next>
 8007d02:	4603      	mov	r3, r0
 8007d04:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8007d08:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d107      	bne.n	8007d20 <dir_register+0x184>
 8007d10:	6a3b      	ldr	r3, [r7, #32]
 8007d12:	3b01      	subs	r3, #1
 8007d14:	623b      	str	r3, [r7, #32]
 8007d16:	6a3b      	ldr	r3, [r7, #32]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d1d5      	bne.n	8007cc8 <dir_register+0x12c>
 8007d1c:	e000      	b.n	8007d20 <dir_register+0x184>
				if (res != FR_OK) break;
 8007d1e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007d20:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d128      	bne.n	8007d7a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	69db      	ldr	r3, [r3, #28]
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	69f8      	ldr	r0, [r7, #28]
 8007d30:	f7fe ffa8 	bl	8006c84 <move_window>
 8007d34:	4603      	mov	r3, r0
 8007d36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8007d3a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d11b      	bne.n	8007d7a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a1b      	ldr	r3, [r3, #32]
 8007d46:	2220      	movs	r2, #32
 8007d48:	2100      	movs	r1, #0
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7fe fd8d 	bl	800686a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6a18      	ldr	r0, [r3, #32]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	3324      	adds	r3, #36	@ 0x24
 8007d58:	220b      	movs	r2, #11
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	f7fe fd64 	bl	8006828 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a1b      	ldr	r3, [r3, #32]
 8007d6a:	330c      	adds	r3, #12
 8007d6c:	f002 0218 	and.w	r2, r2, #24
 8007d70:	b2d2      	uxtb	r2, r2
 8007d72:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007d74:	69fb      	ldr	r3, [r7, #28]
 8007d76:	2201      	movs	r2, #1
 8007d78:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007d7a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3730      	adds	r7, #48	@ 0x30
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	4ec4ec4f 	.word	0x4ec4ec4f

08007d8c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b08a      	sub	sp, #40	@ 0x28
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	613b      	str	r3, [r7, #16]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	60fb      	str	r3, [r7, #12]
 8007da4:	2300      	movs	r3, #0
 8007da6:	617b      	str	r3, [r7, #20]
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	1c5a      	adds	r2, r3, #1
 8007db0:	61ba      	str	r2, [r7, #24]
 8007db2:	693a      	ldr	r2, [r7, #16]
 8007db4:	4413      	add	r3, r2
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8007dba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007dbc:	2b1f      	cmp	r3, #31
 8007dbe:	d940      	bls.n	8007e42 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007dc0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007dc2:	2b2f      	cmp	r3, #47	@ 0x2f
 8007dc4:	d006      	beq.n	8007dd4 <create_name+0x48>
 8007dc6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007dc8:	2b5c      	cmp	r3, #92	@ 0x5c
 8007dca:	d110      	bne.n	8007dee <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007dcc:	e002      	b.n	8007dd4 <create_name+0x48>
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	61bb      	str	r3, [r7, #24]
 8007dd4:	693a      	ldr	r2, [r7, #16]
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	4413      	add	r3, r2
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	2b2f      	cmp	r3, #47	@ 0x2f
 8007dde:	d0f6      	beq.n	8007dce <create_name+0x42>
 8007de0:	693a      	ldr	r2, [r7, #16]
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	4413      	add	r3, r2
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	2b5c      	cmp	r3, #92	@ 0x5c
 8007dea:	d0f0      	beq.n	8007dce <create_name+0x42>
			break;
 8007dec:	e02a      	b.n	8007e44 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	2bfe      	cmp	r3, #254	@ 0xfe
 8007df2:	d901      	bls.n	8007df8 <create_name+0x6c>
 8007df4:	2306      	movs	r3, #6
 8007df6:	e17d      	b.n	80080f4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007df8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007dfe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007e00:	2101      	movs	r1, #1
 8007e02:	4618      	mov	r0, r3
 8007e04:	f001 fad0 	bl	80093a8 <ff_convert>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007e0c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d101      	bne.n	8007e16 <create_name+0x8a>
 8007e12:	2306      	movs	r3, #6
 8007e14:	e16e      	b.n	80080f4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007e16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007e18:	2b7f      	cmp	r3, #127	@ 0x7f
 8007e1a:	d809      	bhi.n	8007e30 <create_name+0xa4>
 8007e1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007e1e:	4619      	mov	r1, r3
 8007e20:	488d      	ldr	r0, [pc, #564]	@ (8008058 <create_name+0x2cc>)
 8007e22:	f7fe fd64 	bl	80068ee <chk_chr>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d001      	beq.n	8007e30 <create_name+0xa4>
 8007e2c:	2306      	movs	r3, #6
 8007e2e:	e161      	b.n	80080f4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	1c5a      	adds	r2, r3, #1
 8007e34:	617a      	str	r2, [r7, #20]
 8007e36:	005b      	lsls	r3, r3, #1
 8007e38:	68fa      	ldr	r2, [r7, #12]
 8007e3a:	4413      	add	r3, r2
 8007e3c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007e3e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007e40:	e7b4      	b.n	8007dac <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8007e42:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007e44:	693a      	ldr	r2, [r7, #16]
 8007e46:	69bb      	ldr	r3, [r7, #24]
 8007e48:	441a      	add	r2, r3
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007e4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007e50:	2b1f      	cmp	r3, #31
 8007e52:	d801      	bhi.n	8007e58 <create_name+0xcc>
 8007e54:	2304      	movs	r3, #4
 8007e56:	e000      	b.n	8007e5a <create_name+0xce>
 8007e58:	2300      	movs	r3, #0
 8007e5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007e5e:	e011      	b.n	8007e84 <create_name+0xf8>
		w = lfn[di - 1];
 8007e60:	697a      	ldr	r2, [r7, #20]
 8007e62:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8007e66:	4413      	add	r3, r2
 8007e68:	005b      	lsls	r3, r3, #1
 8007e6a:	68fa      	ldr	r2, [r7, #12]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	881b      	ldrh	r3, [r3, #0]
 8007e70:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8007e72:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007e74:	2b20      	cmp	r3, #32
 8007e76:	d002      	beq.n	8007e7e <create_name+0xf2>
 8007e78:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007e7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e7c:	d106      	bne.n	8007e8c <create_name+0x100>
		di--;
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	3b01      	subs	r3, #1
 8007e82:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d1ea      	bne.n	8007e60 <create_name+0xd4>
 8007e8a:	e000      	b.n	8007e8e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8007e8c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	005b      	lsls	r3, r3, #1
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	4413      	add	r3, r2
 8007e96:	2200      	movs	r2, #0
 8007e98:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d101      	bne.n	8007ea4 <create_name+0x118>
 8007ea0:	2306      	movs	r3, #6
 8007ea2:	e127      	b.n	80080f4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	3324      	adds	r3, #36	@ 0x24
 8007ea8:	220b      	movs	r2, #11
 8007eaa:	2120      	movs	r1, #32
 8007eac:	4618      	mov	r0, r3
 8007eae:	f7fe fcdc 	bl	800686a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	61bb      	str	r3, [r7, #24]
 8007eb6:	e002      	b.n	8007ebe <create_name+0x132>
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	61bb      	str	r3, [r7, #24]
 8007ebe:	69bb      	ldr	r3, [r7, #24]
 8007ec0:	005b      	lsls	r3, r3, #1
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	4413      	add	r3, r2
 8007ec6:	881b      	ldrh	r3, [r3, #0]
 8007ec8:	2b20      	cmp	r3, #32
 8007eca:	d0f5      	beq.n	8007eb8 <create_name+0x12c>
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	005b      	lsls	r3, r3, #1
 8007ed0:	68fa      	ldr	r2, [r7, #12]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	881b      	ldrh	r3, [r3, #0]
 8007ed6:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ed8:	d0ee      	beq.n	8007eb8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007eda:	69bb      	ldr	r3, [r7, #24]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d009      	beq.n	8007ef4 <create_name+0x168>
 8007ee0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ee4:	f043 0303 	orr.w	r3, r3, #3
 8007ee8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007eec:	e002      	b.n	8007ef4 <create_name+0x168>
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	3b01      	subs	r3, #1
 8007ef2:	617b      	str	r3, [r7, #20]
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d009      	beq.n	8007f0e <create_name+0x182>
 8007efa:	697a      	ldr	r2, [r7, #20]
 8007efc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8007f00:	4413      	add	r3, r2
 8007f02:	005b      	lsls	r3, r3, #1
 8007f04:	68fa      	ldr	r2, [r7, #12]
 8007f06:	4413      	add	r3, r2
 8007f08:	881b      	ldrh	r3, [r3, #0]
 8007f0a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f0c:	d1ef      	bne.n	8007eee <create_name+0x162>

	i = b = 0; ni = 8;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007f14:	2300      	movs	r3, #0
 8007f16:	623b      	str	r3, [r7, #32]
 8007f18:	2308      	movs	r3, #8
 8007f1a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	1c5a      	adds	r2, r3, #1
 8007f20:	61ba      	str	r2, [r7, #24]
 8007f22:	005b      	lsls	r3, r3, #1
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	4413      	add	r3, r2
 8007f28:	881b      	ldrh	r3, [r3, #0]
 8007f2a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007f2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	f000 8090 	beq.w	8008054 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007f34:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007f36:	2b20      	cmp	r3, #32
 8007f38:	d006      	beq.n	8007f48 <create_name+0x1bc>
 8007f3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007f3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f3e:	d10a      	bne.n	8007f56 <create_name+0x1ca>
 8007f40:	69ba      	ldr	r2, [r7, #24]
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d006      	beq.n	8007f56 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007f48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f4c:	f043 0303 	orr.w	r3, r3, #3
 8007f50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007f54:	e07d      	b.n	8008052 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007f56:	6a3a      	ldr	r2, [r7, #32]
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d203      	bcs.n	8007f66 <create_name+0x1da>
 8007f5e:	69ba      	ldr	r2, [r7, #24]
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d123      	bne.n	8007fae <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007f66:	69fb      	ldr	r3, [r7, #28]
 8007f68:	2b0b      	cmp	r3, #11
 8007f6a:	d106      	bne.n	8007f7a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007f6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f70:	f043 0303 	orr.w	r3, r3, #3
 8007f74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007f78:	e075      	b.n	8008066 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007f7a:	69ba      	ldr	r2, [r7, #24]
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d005      	beq.n	8007f8e <create_name+0x202>
 8007f82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f86:	f043 0303 	orr.w	r3, r3, #3
 8007f8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8007f8e:	69ba      	ldr	r2, [r7, #24]
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d866      	bhi.n	8008064 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	61bb      	str	r3, [r7, #24]
 8007f9a:	2308      	movs	r3, #8
 8007f9c:	623b      	str	r3, [r7, #32]
 8007f9e:	230b      	movs	r3, #11
 8007fa0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007fa2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007fac:	e051      	b.n	8008052 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007fae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007fb0:	2b7f      	cmp	r3, #127	@ 0x7f
 8007fb2:	d914      	bls.n	8007fde <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007fb4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007fb6:	2100      	movs	r1, #0
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f001 f9f5 	bl	80093a8 <ff_convert>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007fc2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d004      	beq.n	8007fd2 <create_name+0x246>
 8007fc8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007fca:	3b80      	subs	r3, #128	@ 0x80
 8007fcc:	4a23      	ldr	r2, [pc, #140]	@ (800805c <create_name+0x2d0>)
 8007fce:	5cd3      	ldrb	r3, [r2, r3]
 8007fd0:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007fd2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007fd6:	f043 0302 	orr.w	r3, r3, #2
 8007fda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007fde:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d007      	beq.n	8007ff4 <create_name+0x268>
 8007fe4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	481d      	ldr	r0, [pc, #116]	@ (8008060 <create_name+0x2d4>)
 8007fea:	f7fe fc80 	bl	80068ee <chk_chr>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d008      	beq.n	8008006 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007ff4:	235f      	movs	r3, #95	@ 0x5f
 8007ff6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007ff8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ffc:	f043 0303 	orr.w	r3, r3, #3
 8008000:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008004:	e01b      	b.n	800803e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8008006:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008008:	2b40      	cmp	r3, #64	@ 0x40
 800800a:	d909      	bls.n	8008020 <create_name+0x294>
 800800c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800800e:	2b5a      	cmp	r3, #90	@ 0x5a
 8008010:	d806      	bhi.n	8008020 <create_name+0x294>
					b |= 2;
 8008012:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008016:	f043 0302 	orr.w	r3, r3, #2
 800801a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800801e:	e00e      	b.n	800803e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008020:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008022:	2b60      	cmp	r3, #96	@ 0x60
 8008024:	d90b      	bls.n	800803e <create_name+0x2b2>
 8008026:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008028:	2b7a      	cmp	r3, #122	@ 0x7a
 800802a:	d808      	bhi.n	800803e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800802c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008030:	f043 0301 	orr.w	r3, r3, #1
 8008034:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008038:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800803a:	3b20      	subs	r3, #32
 800803c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800803e:	6a3b      	ldr	r3, [r7, #32]
 8008040:	1c5a      	adds	r2, r3, #1
 8008042:	623a      	str	r2, [r7, #32]
 8008044:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008046:	b2d1      	uxtb	r1, r2
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	4413      	add	r3, r2
 800804c:	460a      	mov	r2, r1
 800804e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8008052:	e763      	b.n	8007f1c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8008054:	bf00      	nop
 8008056:	e006      	b.n	8008066 <create_name+0x2da>
 8008058:	08009830 	.word	0x08009830
 800805c:	080098a4 	.word	0x080098a4
 8008060:	0800983c 	.word	0x0800983c
			if (si > di) break;			/* No extension */
 8008064:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800806c:	2be5      	cmp	r3, #229	@ 0xe5
 800806e:	d103      	bne.n	8008078 <create_name+0x2ec>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2205      	movs	r2, #5
 8008074:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8008078:	69fb      	ldr	r3, [r7, #28]
 800807a:	2b08      	cmp	r3, #8
 800807c:	d104      	bne.n	8008088 <create_name+0x2fc>
 800807e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8008088:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800808c:	f003 030c 	and.w	r3, r3, #12
 8008090:	2b0c      	cmp	r3, #12
 8008092:	d005      	beq.n	80080a0 <create_name+0x314>
 8008094:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008098:	f003 0303 	and.w	r3, r3, #3
 800809c:	2b03      	cmp	r3, #3
 800809e:	d105      	bne.n	80080ac <create_name+0x320>
 80080a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80080a4:	f043 0302 	orr.w	r3, r3, #2
 80080a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80080ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80080b0:	f003 0302 	and.w	r3, r3, #2
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d117      	bne.n	80080e8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80080b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80080bc:	f003 0303 	and.w	r3, r3, #3
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d105      	bne.n	80080d0 <create_name+0x344>
 80080c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80080c8:	f043 0310 	orr.w	r3, r3, #16
 80080cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80080d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80080d4:	f003 030c 	and.w	r3, r3, #12
 80080d8:	2b04      	cmp	r3, #4
 80080da:	d105      	bne.n	80080e8 <create_name+0x35c>
 80080dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80080e0:	f043 0308 	orr.w	r3, r3, #8
 80080e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80080ee:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 80080f2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3728      	adds	r7, #40	@ 0x28
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b086      	sub	sp, #24
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008110:	e002      	b.n	8008118 <follow_path+0x1c>
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	3301      	adds	r3, #1
 8008116:	603b      	str	r3, [r7, #0]
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	2b2f      	cmp	r3, #47	@ 0x2f
 800811e:	d0f8      	beq.n	8008112 <follow_path+0x16>
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	2b5c      	cmp	r3, #92	@ 0x5c
 8008126:	d0f4      	beq.n	8008112 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	2200      	movs	r2, #0
 800812c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	2b1f      	cmp	r3, #31
 8008134:	d80a      	bhi.n	800814c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2280      	movs	r2, #128	@ 0x80
 800813a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800813e:	2100      	movs	r1, #0
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f7ff f91c 	bl	800737e <dir_sdi>
 8008146:	4603      	mov	r3, r0
 8008148:	75fb      	strb	r3, [r7, #23]
 800814a:	e043      	b.n	80081d4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800814c:	463b      	mov	r3, r7
 800814e:	4619      	mov	r1, r3
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f7ff fe1b 	bl	8007d8c <create_name>
 8008156:	4603      	mov	r3, r0
 8008158:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800815a:	7dfb      	ldrb	r3, [r7, #23]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d134      	bne.n	80081ca <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f7ff fc5a 	bl	8007a1a <dir_find>
 8008166:	4603      	mov	r3, r0
 8008168:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008170:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008172:	7dfb      	ldrb	r3, [r7, #23]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00a      	beq.n	800818e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008178:	7dfb      	ldrb	r3, [r7, #23]
 800817a:	2b04      	cmp	r3, #4
 800817c:	d127      	bne.n	80081ce <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800817e:	7afb      	ldrb	r3, [r7, #11]
 8008180:	f003 0304 	and.w	r3, r3, #4
 8008184:	2b00      	cmp	r3, #0
 8008186:	d122      	bne.n	80081ce <follow_path+0xd2>
 8008188:	2305      	movs	r3, #5
 800818a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800818c:	e01f      	b.n	80081ce <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800818e:	7afb      	ldrb	r3, [r7, #11]
 8008190:	f003 0304 	and.w	r3, r3, #4
 8008194:	2b00      	cmp	r3, #0
 8008196:	d11c      	bne.n	80081d2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	799b      	ldrb	r3, [r3, #6]
 800819c:	f003 0310 	and.w	r3, r3, #16
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d102      	bne.n	80081aa <follow_path+0xae>
				res = FR_NO_PATH; break;
 80081a4:	2305      	movs	r3, #5
 80081a6:	75fb      	strb	r3, [r7, #23]
 80081a8:	e014      	b.n	80081d4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	695b      	ldr	r3, [r3, #20]
 80081b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081b8:	4413      	add	r3, r2
 80081ba:	4619      	mov	r1, r3
 80081bc:	68f8      	ldr	r0, [r7, #12]
 80081be:	f7ff fa65 	bl	800768c <ld_clust>
 80081c2:	4602      	mov	r2, r0
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80081c8:	e7c0      	b.n	800814c <follow_path+0x50>
			if (res != FR_OK) break;
 80081ca:	bf00      	nop
 80081cc:	e002      	b.n	80081d4 <follow_path+0xd8>
				break;
 80081ce:	bf00      	nop
 80081d0:	e000      	b.n	80081d4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80081d2:	bf00      	nop
			}
		}
	}

	return res;
 80081d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3718      	adds	r7, #24
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}

080081de <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80081de:	b480      	push	{r7}
 80081e0:	b087      	sub	sp, #28
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80081e6:	f04f 33ff 	mov.w	r3, #4294967295
 80081ea:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d031      	beq.n	8008258 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	617b      	str	r3, [r7, #20]
 80081fa:	e002      	b.n	8008202 <get_ldnumber+0x24>
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	3301      	adds	r3, #1
 8008200:	617b      	str	r3, [r7, #20]
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	2b1f      	cmp	r3, #31
 8008208:	d903      	bls.n	8008212 <get_ldnumber+0x34>
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	2b3a      	cmp	r3, #58	@ 0x3a
 8008210:	d1f4      	bne.n	80081fc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	2b3a      	cmp	r3, #58	@ 0x3a
 8008218:	d11c      	bne.n	8008254 <get_ldnumber+0x76>
			tp = *path;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	1c5a      	adds	r2, r3, #1
 8008224:	60fa      	str	r2, [r7, #12]
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	3b30      	subs	r3, #48	@ 0x30
 800822a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	2b09      	cmp	r3, #9
 8008230:	d80e      	bhi.n	8008250 <get_ldnumber+0x72>
 8008232:	68fa      	ldr	r2, [r7, #12]
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	429a      	cmp	r2, r3
 8008238:	d10a      	bne.n	8008250 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d107      	bne.n	8008250 <get_ldnumber+0x72>
					vol = (int)i;
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	3301      	adds	r3, #1
 8008248:	617b      	str	r3, [r7, #20]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	697a      	ldr	r2, [r7, #20]
 800824e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	e002      	b.n	800825a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008254:	2300      	movs	r3, #0
 8008256:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008258:	693b      	ldr	r3, [r7, #16]
}
 800825a:	4618      	mov	r0, r3
 800825c:	371c      	adds	r7, #28
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr
	...

08008268 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	70da      	strb	r2, [r3, #3]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f04f 32ff 	mov.w	r2, #4294967295
 800827e:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008280:	6839      	ldr	r1, [r7, #0]
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f7fe fcfe 	bl	8006c84 <move_window>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d001      	beq.n	8008292 <check_fs+0x2a>
 800828e:	2304      	movs	r3, #4
 8008290:	e038      	b.n	8008304 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	3334      	adds	r3, #52	@ 0x34
 8008296:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800829a:	4618      	mov	r0, r3
 800829c:	f7fe fa42 	bl	8006724 <ld_word>
 80082a0:	4603      	mov	r3, r0
 80082a2:	461a      	mov	r2, r3
 80082a4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d001      	beq.n	80082b0 <check_fs+0x48>
 80082ac:	2303      	movs	r3, #3
 80082ae:	e029      	b.n	8008304 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80082b6:	2be9      	cmp	r3, #233	@ 0xe9
 80082b8:	d009      	beq.n	80082ce <check_fs+0x66>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80082c0:	2beb      	cmp	r3, #235	@ 0xeb
 80082c2:	d11e      	bne.n	8008302 <check_fs+0x9a>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80082ca:	2b90      	cmp	r3, #144	@ 0x90
 80082cc:	d119      	bne.n	8008302 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	3334      	adds	r3, #52	@ 0x34
 80082d2:	3336      	adds	r3, #54	@ 0x36
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7fe fa3d 	bl	8006754 <ld_dword>
 80082da:	4603      	mov	r3, r0
 80082dc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80082e0:	4a0a      	ldr	r2, [pc, #40]	@ (800830c <check_fs+0xa4>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d101      	bne.n	80082ea <check_fs+0x82>
 80082e6:	2300      	movs	r3, #0
 80082e8:	e00c      	b.n	8008304 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	3334      	adds	r3, #52	@ 0x34
 80082ee:	3352      	adds	r3, #82	@ 0x52
 80082f0:	4618      	mov	r0, r3
 80082f2:	f7fe fa2f 	bl	8006754 <ld_dword>
 80082f6:	4603      	mov	r3, r0
 80082f8:	4a05      	ldr	r2, [pc, #20]	@ (8008310 <check_fs+0xa8>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d101      	bne.n	8008302 <check_fs+0x9a>
 80082fe:	2300      	movs	r3, #0
 8008300:	e000      	b.n	8008304 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008302:	2302      	movs	r3, #2
}
 8008304:	4618      	mov	r0, r3
 8008306:	3708      	adds	r7, #8
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}
 800830c:	00544146 	.word	0x00544146
 8008310:	33544146 	.word	0x33544146

08008314 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b096      	sub	sp, #88	@ 0x58
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	4613      	mov	r3, r2
 8008320:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	2200      	movs	r2, #0
 8008326:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008328:	68f8      	ldr	r0, [r7, #12]
 800832a:	f7ff ff58 	bl	80081de <get_ldnumber>
 800832e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008330:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008332:	2b00      	cmp	r3, #0
 8008334:	da01      	bge.n	800833a <find_volume+0x26>
 8008336:	230b      	movs	r3, #11
 8008338:	e22d      	b.n	8008796 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800833a:	4aa1      	ldr	r2, [pc, #644]	@ (80085c0 <find_volume+0x2ac>)
 800833c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800833e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008342:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008346:	2b00      	cmp	r3, #0
 8008348:	d101      	bne.n	800834e <find_volume+0x3a>
 800834a:	230c      	movs	r3, #12
 800834c:	e223      	b.n	8008796 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008352:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008354:	79fb      	ldrb	r3, [r7, #7]
 8008356:	f023 0301 	bic.w	r3, r3, #1
 800835a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800835c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d01a      	beq.n	800839a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008366:	785b      	ldrb	r3, [r3, #1]
 8008368:	4618      	mov	r0, r3
 800836a:	f7fe f93d 	bl	80065e8 <disk_status>
 800836e:	4603      	mov	r3, r0
 8008370:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008374:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008378:	f003 0301 	and.w	r3, r3, #1
 800837c:	2b00      	cmp	r3, #0
 800837e:	d10c      	bne.n	800839a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008380:	79fb      	ldrb	r3, [r7, #7]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d007      	beq.n	8008396 <find_volume+0x82>
 8008386:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800838a:	f003 0304 	and.w	r3, r3, #4
 800838e:	2b00      	cmp	r3, #0
 8008390:	d001      	beq.n	8008396 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008392:	230a      	movs	r3, #10
 8008394:	e1ff      	b.n	8008796 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8008396:	2300      	movs	r3, #0
 8008398:	e1fd      	b.n	8008796 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800839a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800839c:	2200      	movs	r2, #0
 800839e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80083a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083a2:	b2da      	uxtb	r2, r3
 80083a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083a6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80083a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083aa:	785b      	ldrb	r3, [r3, #1]
 80083ac:	4618      	mov	r0, r3
 80083ae:	f7fe f935 	bl	800661c <disk_initialize>
 80083b2:	4603      	mov	r3, r0
 80083b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80083b8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80083bc:	f003 0301 	and.w	r3, r3, #1
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d001      	beq.n	80083c8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80083c4:	2303      	movs	r3, #3
 80083c6:	e1e6      	b.n	8008796 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80083c8:	79fb      	ldrb	r3, [r7, #7]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d007      	beq.n	80083de <find_volume+0xca>
 80083ce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80083d2:	f003 0304 	and.w	r3, r3, #4
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d001      	beq.n	80083de <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80083da:	230a      	movs	r3, #10
 80083dc:	e1db      	b.n	8008796 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80083de:	2300      	movs	r3, #0
 80083e0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80083e2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80083e4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80083e6:	f7ff ff3f 	bl	8008268 <check_fs>
 80083ea:	4603      	mov	r3, r0
 80083ec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80083f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80083f4:	2b02      	cmp	r3, #2
 80083f6:	d149      	bne.n	800848c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80083f8:	2300      	movs	r3, #0
 80083fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80083fc:	e01e      	b.n	800843c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80083fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008400:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008404:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008406:	011b      	lsls	r3, r3, #4
 8008408:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800840c:	4413      	add	r3, r2
 800840e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008412:	3304      	adds	r3, #4
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d006      	beq.n	8008428 <find_volume+0x114>
 800841a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800841c:	3308      	adds	r3, #8
 800841e:	4618      	mov	r0, r3
 8008420:	f7fe f998 	bl	8006754 <ld_dword>
 8008424:	4602      	mov	r2, r0
 8008426:	e000      	b.n	800842a <find_volume+0x116>
 8008428:	2200      	movs	r2, #0
 800842a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	3358      	adds	r3, #88	@ 0x58
 8008430:	443b      	add	r3, r7
 8008432:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008436:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008438:	3301      	adds	r3, #1
 800843a:	643b      	str	r3, [r7, #64]	@ 0x40
 800843c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800843e:	2b03      	cmp	r3, #3
 8008440:	d9dd      	bls.n	80083fe <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008442:	2300      	movs	r3, #0
 8008444:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8008446:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008448:	2b00      	cmp	r3, #0
 800844a:	d002      	beq.n	8008452 <find_volume+0x13e>
 800844c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800844e:	3b01      	subs	r3, #1
 8008450:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008452:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	3358      	adds	r3, #88	@ 0x58
 8008458:	443b      	add	r3, r7
 800845a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800845e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008460:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008462:	2b00      	cmp	r3, #0
 8008464:	d005      	beq.n	8008472 <find_volume+0x15e>
 8008466:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008468:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800846a:	f7ff fefd 	bl	8008268 <check_fs>
 800846e:	4603      	mov	r3, r0
 8008470:	e000      	b.n	8008474 <find_volume+0x160>
 8008472:	2303      	movs	r3, #3
 8008474:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008478:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800847c:	2b01      	cmp	r3, #1
 800847e:	d905      	bls.n	800848c <find_volume+0x178>
 8008480:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008482:	3301      	adds	r3, #1
 8008484:	643b      	str	r3, [r7, #64]	@ 0x40
 8008486:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008488:	2b03      	cmp	r3, #3
 800848a:	d9e2      	bls.n	8008452 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800848c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008490:	2b04      	cmp	r3, #4
 8008492:	d101      	bne.n	8008498 <find_volume+0x184>
 8008494:	2301      	movs	r3, #1
 8008496:	e17e      	b.n	8008796 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008498:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800849c:	2b01      	cmp	r3, #1
 800849e:	d901      	bls.n	80084a4 <find_volume+0x190>
 80084a0:	230d      	movs	r3, #13
 80084a2:	e178      	b.n	8008796 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80084a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a6:	3334      	adds	r3, #52	@ 0x34
 80084a8:	330b      	adds	r3, #11
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7fe f93a 	bl	8006724 <ld_word>
 80084b0:	4603      	mov	r3, r0
 80084b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084b6:	d001      	beq.n	80084bc <find_volume+0x1a8>
 80084b8:	230d      	movs	r3, #13
 80084ba:	e16c      	b.n	8008796 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80084bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084be:	3334      	adds	r3, #52	@ 0x34
 80084c0:	3316      	adds	r3, #22
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7fe f92e 	bl	8006724 <ld_word>
 80084c8:	4603      	mov	r3, r0
 80084ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80084cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d106      	bne.n	80084e0 <find_volume+0x1cc>
 80084d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084d4:	3334      	adds	r3, #52	@ 0x34
 80084d6:	3324      	adds	r3, #36	@ 0x24
 80084d8:	4618      	mov	r0, r3
 80084da:	f7fe f93b 	bl	8006754 <ld_dword>
 80084de:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80084e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80084e4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80084e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084e8:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80084ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ee:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80084f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084f2:	789b      	ldrb	r3, [r3, #2]
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d005      	beq.n	8008504 <find_volume+0x1f0>
 80084f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084fa:	789b      	ldrb	r3, [r3, #2]
 80084fc:	2b02      	cmp	r3, #2
 80084fe:	d001      	beq.n	8008504 <find_volume+0x1f0>
 8008500:	230d      	movs	r3, #13
 8008502:	e148      	b.n	8008796 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008506:	789b      	ldrb	r3, [r3, #2]
 8008508:	461a      	mov	r2, r3
 800850a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800850c:	fb02 f303 	mul.w	r3, r2, r3
 8008510:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008514:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008518:	461a      	mov	r2, r3
 800851a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800851c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800851e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008520:	895b      	ldrh	r3, [r3, #10]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d008      	beq.n	8008538 <find_volume+0x224>
 8008526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008528:	895b      	ldrh	r3, [r3, #10]
 800852a:	461a      	mov	r2, r3
 800852c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800852e:	895b      	ldrh	r3, [r3, #10]
 8008530:	3b01      	subs	r3, #1
 8008532:	4013      	ands	r3, r2
 8008534:	2b00      	cmp	r3, #0
 8008536:	d001      	beq.n	800853c <find_volume+0x228>
 8008538:	230d      	movs	r3, #13
 800853a:	e12c      	b.n	8008796 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800853c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800853e:	3334      	adds	r3, #52	@ 0x34
 8008540:	3311      	adds	r3, #17
 8008542:	4618      	mov	r0, r3
 8008544:	f7fe f8ee 	bl	8006724 <ld_word>
 8008548:	4603      	mov	r3, r0
 800854a:	461a      	mov	r2, r3
 800854c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800854e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008552:	891b      	ldrh	r3, [r3, #8]
 8008554:	f003 030f 	and.w	r3, r3, #15
 8008558:	b29b      	uxth	r3, r3
 800855a:	2b00      	cmp	r3, #0
 800855c:	d001      	beq.n	8008562 <find_volume+0x24e>
 800855e:	230d      	movs	r3, #13
 8008560:	e119      	b.n	8008796 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008564:	3334      	adds	r3, #52	@ 0x34
 8008566:	3313      	adds	r3, #19
 8008568:	4618      	mov	r0, r3
 800856a:	f7fe f8db 	bl	8006724 <ld_word>
 800856e:	4603      	mov	r3, r0
 8008570:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008572:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008574:	2b00      	cmp	r3, #0
 8008576:	d106      	bne.n	8008586 <find_volume+0x272>
 8008578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800857a:	3334      	adds	r3, #52	@ 0x34
 800857c:	3320      	adds	r3, #32
 800857e:	4618      	mov	r0, r3
 8008580:	f7fe f8e8 	bl	8006754 <ld_dword>
 8008584:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008588:	3334      	adds	r3, #52	@ 0x34
 800858a:	330e      	adds	r3, #14
 800858c:	4618      	mov	r0, r3
 800858e:	f7fe f8c9 	bl	8006724 <ld_word>
 8008592:	4603      	mov	r3, r0
 8008594:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008596:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008598:	2b00      	cmp	r3, #0
 800859a:	d101      	bne.n	80085a0 <find_volume+0x28c>
 800859c:	230d      	movs	r3, #13
 800859e:	e0fa      	b.n	8008796 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80085a0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80085a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085a4:	4413      	add	r3, r2
 80085a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80085a8:	8912      	ldrh	r2, [r2, #8]
 80085aa:	0912      	lsrs	r2, r2, #4
 80085ac:	b292      	uxth	r2, r2
 80085ae:	4413      	add	r3, r2
 80085b0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80085b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80085b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d204      	bcs.n	80085c4 <find_volume+0x2b0>
 80085ba:	230d      	movs	r3, #13
 80085bc:	e0eb      	b.n	8008796 <find_volume+0x482>
 80085be:	bf00      	nop
 80085c0:	20000758 	.word	0x20000758
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80085c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80085c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085c8:	1ad3      	subs	r3, r2, r3
 80085ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80085cc:	8952      	ldrh	r2, [r2, #10]
 80085ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80085d2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80085d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d101      	bne.n	80085de <find_volume+0x2ca>
 80085da:	230d      	movs	r3, #13
 80085dc:	e0db      	b.n	8008796 <find_volume+0x482>
		fmt = FS_FAT32;
 80085de:	2303      	movs	r3, #3
 80085e0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80085e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d802      	bhi.n	80085f4 <find_volume+0x2e0>
 80085ee:	2302      	movs	r3, #2
 80085f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80085f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d802      	bhi.n	8008604 <find_volume+0x2f0>
 80085fe:	2301      	movs	r3, #1
 8008600:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008606:	1c9a      	adds	r2, r3, #2
 8008608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800860a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800860c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800860e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008610:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008612:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008614:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008616:	441a      	add	r2, r3
 8008618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800861a:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800861c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800861e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008620:	441a      	add	r2, r3
 8008622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008624:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8008626:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800862a:	2b03      	cmp	r3, #3
 800862c:	d11e      	bne.n	800866c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800862e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008630:	3334      	adds	r3, #52	@ 0x34
 8008632:	332a      	adds	r3, #42	@ 0x2a
 8008634:	4618      	mov	r0, r3
 8008636:	f7fe f875 	bl	8006724 <ld_word>
 800863a:	4603      	mov	r3, r0
 800863c:	2b00      	cmp	r3, #0
 800863e:	d001      	beq.n	8008644 <find_volume+0x330>
 8008640:	230d      	movs	r3, #13
 8008642:	e0a8      	b.n	8008796 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008646:	891b      	ldrh	r3, [r3, #8]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d001      	beq.n	8008650 <find_volume+0x33c>
 800864c:	230d      	movs	r3, #13
 800864e:	e0a2      	b.n	8008796 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008652:	3334      	adds	r3, #52	@ 0x34
 8008654:	332c      	adds	r3, #44	@ 0x2c
 8008656:	4618      	mov	r0, r3
 8008658:	f7fe f87c 	bl	8006754 <ld_dword>
 800865c:	4602      	mov	r2, r0
 800865e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008660:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008664:	699b      	ldr	r3, [r3, #24]
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	647b      	str	r3, [r7, #68]	@ 0x44
 800866a:	e01f      	b.n	80086ac <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800866c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800866e:	891b      	ldrh	r3, [r3, #8]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d101      	bne.n	8008678 <find_volume+0x364>
 8008674:	230d      	movs	r3, #13
 8008676:	e08e      	b.n	8008796 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800867a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800867c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800867e:	441a      	add	r2, r3
 8008680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008682:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008684:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008688:	2b02      	cmp	r3, #2
 800868a:	d103      	bne.n	8008694 <find_volume+0x380>
 800868c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800868e:	699b      	ldr	r3, [r3, #24]
 8008690:	005b      	lsls	r3, r3, #1
 8008692:	e00a      	b.n	80086aa <find_volume+0x396>
 8008694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008696:	699a      	ldr	r2, [r3, #24]
 8008698:	4613      	mov	r3, r2
 800869a:	005b      	lsls	r3, r3, #1
 800869c:	4413      	add	r3, r2
 800869e:	085a      	lsrs	r2, r3, #1
 80086a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086a2:	699b      	ldr	r3, [r3, #24]
 80086a4:	f003 0301 	and.w	r3, r3, #1
 80086a8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80086aa:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80086ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086ae:	69da      	ldr	r2, [r3, #28]
 80086b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086b2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80086b6:	0a5b      	lsrs	r3, r3, #9
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d201      	bcs.n	80086c0 <find_volume+0x3ac>
 80086bc:	230d      	movs	r3, #13
 80086be:	e06a      	b.n	8008796 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80086c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086c2:	f04f 32ff 	mov.w	r2, #4294967295
 80086c6:	615a      	str	r2, [r3, #20]
 80086c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086ca:	695a      	ldr	r2, [r3, #20]
 80086cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086ce:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80086d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086d2:	2280      	movs	r2, #128	@ 0x80
 80086d4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80086d6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80086da:	2b03      	cmp	r3, #3
 80086dc:	d149      	bne.n	8008772 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80086de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086e0:	3334      	adds	r3, #52	@ 0x34
 80086e2:	3330      	adds	r3, #48	@ 0x30
 80086e4:	4618      	mov	r0, r3
 80086e6:	f7fe f81d 	bl	8006724 <ld_word>
 80086ea:	4603      	mov	r3, r0
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d140      	bne.n	8008772 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80086f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80086f2:	3301      	adds	r3, #1
 80086f4:	4619      	mov	r1, r3
 80086f6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80086f8:	f7fe fac4 	bl	8006c84 <move_window>
 80086fc:	4603      	mov	r3, r0
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d137      	bne.n	8008772 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8008702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008704:	2200      	movs	r2, #0
 8008706:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800870a:	3334      	adds	r3, #52	@ 0x34
 800870c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008710:	4618      	mov	r0, r3
 8008712:	f7fe f807 	bl	8006724 <ld_word>
 8008716:	4603      	mov	r3, r0
 8008718:	461a      	mov	r2, r3
 800871a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800871e:	429a      	cmp	r2, r3
 8008720:	d127      	bne.n	8008772 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008724:	3334      	adds	r3, #52	@ 0x34
 8008726:	4618      	mov	r0, r3
 8008728:	f7fe f814 	bl	8006754 <ld_dword>
 800872c:	4603      	mov	r3, r0
 800872e:	4a1c      	ldr	r2, [pc, #112]	@ (80087a0 <find_volume+0x48c>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d11e      	bne.n	8008772 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008736:	3334      	adds	r3, #52	@ 0x34
 8008738:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800873c:	4618      	mov	r0, r3
 800873e:	f7fe f809 	bl	8006754 <ld_dword>
 8008742:	4603      	mov	r3, r0
 8008744:	4a17      	ldr	r2, [pc, #92]	@ (80087a4 <find_volume+0x490>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d113      	bne.n	8008772 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800874a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800874c:	3334      	adds	r3, #52	@ 0x34
 800874e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8008752:	4618      	mov	r0, r3
 8008754:	f7fd fffe 	bl	8006754 <ld_dword>
 8008758:	4602      	mov	r2, r0
 800875a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800875c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800875e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008760:	3334      	adds	r3, #52	@ 0x34
 8008762:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8008766:	4618      	mov	r0, r3
 8008768:	f7fd fff4 	bl	8006754 <ld_dword>
 800876c:	4602      	mov	r2, r0
 800876e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008770:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008774:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8008778:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800877a:	4b0b      	ldr	r3, [pc, #44]	@ (80087a8 <find_volume+0x494>)
 800877c:	881b      	ldrh	r3, [r3, #0]
 800877e:	3301      	adds	r3, #1
 8008780:	b29a      	uxth	r2, r3
 8008782:	4b09      	ldr	r3, [pc, #36]	@ (80087a8 <find_volume+0x494>)
 8008784:	801a      	strh	r2, [r3, #0]
 8008786:	4b08      	ldr	r3, [pc, #32]	@ (80087a8 <find_volume+0x494>)
 8008788:	881a      	ldrh	r2, [r3, #0]
 800878a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800878c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800878e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008790:	f7fe fa10 	bl	8006bb4 <clear_lock>
#endif
	return FR_OK;
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	3758      	adds	r7, #88	@ 0x58
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	41615252 	.word	0x41615252
 80087a4:	61417272 	.word	0x61417272
 80087a8:	2000075c 	.word	0x2000075c

080087ac <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80087b6:	2309      	movs	r3, #9
 80087b8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d01c      	beq.n	80087fa <validate+0x4e>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d018      	beq.n	80087fa <validate+0x4e>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d013      	beq.n	80087fa <validate+0x4e>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	889a      	ldrh	r2, [r3, #4]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	88db      	ldrh	r3, [r3, #6]
 80087dc:	429a      	cmp	r2, r3
 80087de:	d10c      	bne.n	80087fa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	785b      	ldrb	r3, [r3, #1]
 80087e6:	4618      	mov	r0, r3
 80087e8:	f7fd fefe 	bl	80065e8 <disk_status>
 80087ec:	4603      	mov	r3, r0
 80087ee:	f003 0301 	and.w	r3, r3, #1
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d101      	bne.n	80087fa <validate+0x4e>
			res = FR_OK;
 80087f6:	2300      	movs	r3, #0
 80087f8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80087fa:	7bfb      	ldrb	r3, [r7, #15]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d102      	bne.n	8008806 <validate+0x5a>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	e000      	b.n	8008808 <validate+0x5c>
 8008806:	2300      	movs	r3, #0
 8008808:	683a      	ldr	r2, [r7, #0]
 800880a:	6013      	str	r3, [r2, #0]
	return res;
 800880c:	7bfb      	ldrb	r3, [r7, #15]
}
 800880e:	4618      	mov	r0, r3
 8008810:	3710      	adds	r7, #16
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
	...

08008818 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b088      	sub	sp, #32
 800881c:	af00      	add	r7, sp, #0
 800881e:	60f8      	str	r0, [r7, #12]
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	4613      	mov	r3, r2
 8008824:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800882a:	f107 0310 	add.w	r3, r7, #16
 800882e:	4618      	mov	r0, r3
 8008830:	f7ff fcd5 	bl	80081de <get_ldnumber>
 8008834:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008836:	69fb      	ldr	r3, [r7, #28]
 8008838:	2b00      	cmp	r3, #0
 800883a:	da01      	bge.n	8008840 <f_mount+0x28>
 800883c:	230b      	movs	r3, #11
 800883e:	e02b      	b.n	8008898 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008840:	4a17      	ldr	r2, [pc, #92]	@ (80088a0 <f_mount+0x88>)
 8008842:	69fb      	ldr	r3, [r7, #28]
 8008844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008848:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800884a:	69bb      	ldr	r3, [r7, #24]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d005      	beq.n	800885c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008850:	69b8      	ldr	r0, [r7, #24]
 8008852:	f7fe f9af 	bl	8006bb4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008856:	69bb      	ldr	r3, [r7, #24]
 8008858:	2200      	movs	r2, #0
 800885a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d002      	beq.n	8008868 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2200      	movs	r2, #0
 8008866:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	490d      	ldr	r1, [pc, #52]	@ (80088a0 <f_mount+0x88>)
 800886c:	69fb      	ldr	r3, [r7, #28]
 800886e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d002      	beq.n	800887e <f_mount+0x66>
 8008878:	79fb      	ldrb	r3, [r7, #7]
 800887a:	2b01      	cmp	r3, #1
 800887c:	d001      	beq.n	8008882 <f_mount+0x6a>
 800887e:	2300      	movs	r3, #0
 8008880:	e00a      	b.n	8008898 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008882:	f107 010c 	add.w	r1, r7, #12
 8008886:	f107 0308 	add.w	r3, r7, #8
 800888a:	2200      	movs	r2, #0
 800888c:	4618      	mov	r0, r3
 800888e:	f7ff fd41 	bl	8008314 <find_volume>
 8008892:	4603      	mov	r3, r0
 8008894:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008896:	7dfb      	ldrb	r3, [r7, #23]
}
 8008898:	4618      	mov	r0, r3
 800889a:	3720      	adds	r7, #32
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	20000758 	.word	0x20000758

080088a4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b09a      	sub	sp, #104	@ 0x68
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	60f8      	str	r0, [r7, #12]
 80088ac:	60b9      	str	r1, [r7, #8]
 80088ae:	4613      	mov	r3, r2
 80088b0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d101      	bne.n	80088bc <f_open+0x18>
 80088b8:	2309      	movs	r3, #9
 80088ba:	e1b9      	b.n	8008c30 <f_open+0x38c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80088bc:	79fb      	ldrb	r3, [r7, #7]
 80088be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80088c2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80088c4:	79fa      	ldrb	r2, [r7, #7]
 80088c6:	f107 0110 	add.w	r1, r7, #16
 80088ca:	f107 0308 	add.w	r3, r7, #8
 80088ce:	4618      	mov	r0, r3
 80088d0:	f7ff fd20 	bl	8008314 <find_volume>
 80088d4:	4603      	mov	r3, r0
 80088d6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 80088da:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80088de:	2b00      	cmp	r3, #0
 80088e0:	f040 819d 	bne.w	8008c1e <f_open+0x37a>
		dj.obj.fs = fs;
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 80088e8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80088ec:	f000 fe22 	bl	8009534 <ff_memalloc>
 80088f0:	65b8      	str	r0, [r7, #88]	@ 0x58
 80088f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d101      	bne.n	80088fc <f_open+0x58>
 80088f8:	2311      	movs	r3, #17
 80088fa:	e199      	b.n	8008c30 <f_open+0x38c>
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008900:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	f107 0314 	add.w	r3, r7, #20
 8008908:	4611      	mov	r1, r2
 800890a:	4618      	mov	r0, r3
 800890c:	f7ff fbf6 	bl	80080fc <follow_path>
 8008910:	4603      	mov	r3, r0
 8008912:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008916:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800891a:	2b00      	cmp	r3, #0
 800891c:	d118      	bne.n	8008950 <f_open+0xac>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800891e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008922:	b25b      	sxtb	r3, r3
 8008924:	2b00      	cmp	r3, #0
 8008926:	da03      	bge.n	8008930 <f_open+0x8c>
				res = FR_INVALID_NAME;
 8008928:	2306      	movs	r3, #6
 800892a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800892e:	e00f      	b.n	8008950 <f_open+0xac>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008930:	79fb      	ldrb	r3, [r7, #7]
 8008932:	2b01      	cmp	r3, #1
 8008934:	bf8c      	ite	hi
 8008936:	2301      	movhi	r3, #1
 8008938:	2300      	movls	r3, #0
 800893a:	b2db      	uxtb	r3, r3
 800893c:	461a      	mov	r2, r3
 800893e:	f107 0314 	add.w	r3, r7, #20
 8008942:	4611      	mov	r1, r2
 8008944:	4618      	mov	r0, r3
 8008946:	f7fd ffed 	bl	8006924 <chk_lock>
 800894a:	4603      	mov	r3, r0
 800894c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008950:	79fb      	ldrb	r3, [r7, #7]
 8008952:	f003 031c 	and.w	r3, r3, #28
 8008956:	2b00      	cmp	r3, #0
 8008958:	d07f      	beq.n	8008a5a <f_open+0x1b6>
			if (res != FR_OK) {					/* No file, create new */
 800895a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800895e:	2b00      	cmp	r3, #0
 8008960:	d017      	beq.n	8008992 <f_open+0xee>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008962:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008966:	2b04      	cmp	r3, #4
 8008968:	d10e      	bne.n	8008988 <f_open+0xe4>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800896a:	f7fe f837 	bl	80069dc <enq_lock>
 800896e:	4603      	mov	r3, r0
 8008970:	2b00      	cmp	r3, #0
 8008972:	d006      	beq.n	8008982 <f_open+0xde>
 8008974:	f107 0314 	add.w	r3, r7, #20
 8008978:	4618      	mov	r0, r3
 800897a:	f7ff f90f 	bl	8007b9c <dir_register>
 800897e:	4603      	mov	r3, r0
 8008980:	e000      	b.n	8008984 <f_open+0xe0>
 8008982:	2312      	movs	r3, #18
 8008984:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008988:	79fb      	ldrb	r3, [r7, #7]
 800898a:	f043 0308 	orr.w	r3, r3, #8
 800898e:	71fb      	strb	r3, [r7, #7]
 8008990:	e010      	b.n	80089b4 <f_open+0x110>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008992:	7ebb      	ldrb	r3, [r7, #26]
 8008994:	f003 0311 	and.w	r3, r3, #17
 8008998:	2b00      	cmp	r3, #0
 800899a:	d003      	beq.n	80089a4 <f_open+0x100>
					res = FR_DENIED;
 800899c:	2307      	movs	r3, #7
 800899e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80089a2:	e007      	b.n	80089b4 <f_open+0x110>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80089a4:	79fb      	ldrb	r3, [r7, #7]
 80089a6:	f003 0304 	and.w	r3, r3, #4
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d002      	beq.n	80089b4 <f_open+0x110>
 80089ae:	2308      	movs	r3, #8
 80089b0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80089b4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d168      	bne.n	8008a8e <f_open+0x1ea>
 80089bc:	79fb      	ldrb	r3, [r7, #7]
 80089be:	f003 0308 	and.w	r3, r3, #8
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d063      	beq.n	8008a8e <f_open+0x1ea>
				dw = GET_FATTIME();
 80089c6:	f7fd fbbf 	bl	8006148 <get_fattime>
 80089ca:	6578      	str	r0, [r7, #84]	@ 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80089cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089ce:	330e      	adds	r3, #14
 80089d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80089d2:	4618      	mov	r0, r3
 80089d4:	f7fd fefc 	bl	80067d0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80089d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089da:	3316      	adds	r3, #22
 80089dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80089de:	4618      	mov	r0, r3
 80089e0:	f7fd fef6 	bl	80067d0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80089e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089e6:	330b      	adds	r3, #11
 80089e8:	2220      	movs	r2, #32
 80089ea:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80089f0:	4611      	mov	r1, r2
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7fe fe4a 	bl	800768c <ld_clust>
 80089f8:	6538      	str	r0, [r7, #80]	@ 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80089fe:	2200      	movs	r2, #0
 8008a00:	4618      	mov	r0, r3
 8008a02:	f7fe fe62 	bl	80076ca <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a08:	331c      	adds	r3, #28
 8008a0a:	2100      	movs	r1, #0
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f7fd fedf 	bl	80067d0 <st_dword>
					fs->wflag = 1;
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	2201      	movs	r2, #1
 8008a16:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008a18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d037      	beq.n	8008a8e <f_open+0x1ea>
						dw = fs->winsect;
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a22:	657b      	str	r3, [r7, #84]	@ 0x54
						res = remove_chain(&dj.obj, cl, 0);
 8008a24:	f107 0314 	add.w	r3, r7, #20
 8008a28:	2200      	movs	r2, #0
 8008a2a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f7fe fb75 	bl	800711c <remove_chain>
 8008a32:	4603      	mov	r3, r0
 8008a34:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8008a38:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d126      	bne.n	8008a8e <f_open+0x1ea>
							res = move_window(fs, dw);
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7fe f91d 	bl	8006c84 <move_window>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008a54:	3a01      	subs	r2, #1
 8008a56:	611a      	str	r2, [r3, #16]
 8008a58:	e019      	b.n	8008a8e <f_open+0x1ea>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008a5a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d115      	bne.n	8008a8e <f_open+0x1ea>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008a62:	7ebb      	ldrb	r3, [r7, #26]
 8008a64:	f003 0310 	and.w	r3, r3, #16
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d003      	beq.n	8008a74 <f_open+0x1d0>
					res = FR_NO_FILE;
 8008a6c:	2304      	movs	r3, #4
 8008a6e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008a72:	e00c      	b.n	8008a8e <f_open+0x1ea>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008a74:	79fb      	ldrb	r3, [r7, #7]
 8008a76:	f003 0302 	and.w	r3, r3, #2
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d007      	beq.n	8008a8e <f_open+0x1ea>
 8008a7e:	7ebb      	ldrb	r3, [r7, #26]
 8008a80:	f003 0301 	and.w	r3, r3, #1
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d002      	beq.n	8008a8e <f_open+0x1ea>
						res = FR_DENIED;
 8008a88:	2307      	movs	r3, #7
 8008a8a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8008a8e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d126      	bne.n	8008ae4 <f_open+0x240>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008a96:	79fb      	ldrb	r3, [r7, #7]
 8008a98:	f003 0308 	and.w	r3, r3, #8
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d003      	beq.n	8008aa8 <f_open+0x204>
				mode |= FA_MODIFIED;
 8008aa0:	79fb      	ldrb	r3, [r7, #7]
 8008aa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008aa6:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8008ab0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008ab6:	79fb      	ldrb	r3, [r7, #7]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	bf8c      	ite	hi
 8008abc:	2301      	movhi	r3, #1
 8008abe:	2300      	movls	r3, #0
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	f107 0314 	add.w	r3, r7, #20
 8008ac8:	4611      	mov	r1, r2
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7fd ffa8 	bl	8006a20 <inc_lock>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	691b      	ldr	r3, [r3, #16]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d102      	bne.n	8008ae4 <f_open+0x240>
 8008ade:	2302      	movs	r3, #2
 8008ae0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008ae4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	f040 8095 	bne.w	8008c18 <f_open+0x374>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008af2:	4611      	mov	r1, r2
 8008af4:	4618      	mov	r0, r3
 8008af6:	f7fe fdc9 	bl	800768c <ld_clust>
 8008afa:	4602      	mov	r2, r0
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008b00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b02:	331c      	adds	r3, #28
 8008b04:	4618      	mov	r0, r3
 8008b06:	f7fd fe25 	bl	8006754 <ld_dword>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2200      	movs	r2, #0
 8008b14:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008b16:	693a      	ldr	r2, [r7, #16]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	88da      	ldrh	r2, [r3, #6]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	79fa      	ldrb	r2, [r7, #7]
 8008b28:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2200      	movs	r2, #0
 8008b34:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	3330      	adds	r3, #48	@ 0x30
 8008b40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008b44:	2100      	movs	r1, #0
 8008b46:	4618      	mov	r0, r3
 8008b48:	f7fd fe8f 	bl	800686a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008b4c:	79fb      	ldrb	r3, [r7, #7]
 8008b4e:	f003 0320 	and.w	r3, r3, #32
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d060      	beq.n	8008c18 <f_open+0x374>
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	68db      	ldr	r3, [r3, #12]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d05c      	beq.n	8008c18 <f_open+0x374>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	68da      	ldr	r2, [r3, #12]
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	895b      	ldrh	r3, [r3, #10]
 8008b6a:	025b      	lsls	r3, r3, #9
 8008b6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	689b      	ldr	r3, [r3, #8]
 8008b72:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	68db      	ldr	r3, [r3, #12]
 8008b78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b7a:	e016      	b.n	8008baa <f_open+0x306>
					clst = get_fat(&fp->obj, clst);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008b80:	4618      	mov	r0, r3
 8008b82:	f7fe f93a 	bl	8006dfa <get_fat>
 8008b86:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8008b88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d802      	bhi.n	8008b94 <f_open+0x2f0>
 8008b8e:	2302      	movs	r3, #2
 8008b90:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008b94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b9a:	d102      	bne.n	8008ba2 <f_open+0x2fe>
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008ba2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008ba4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ba6:	1ad3      	subs	r3, r2, r3
 8008ba8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008baa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d103      	bne.n	8008bba <f_open+0x316>
 8008bb2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008bb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d8e0      	bhi.n	8008b7c <f_open+0x2d8>
				}
				fp->clust = clst;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008bbe:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008bc0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d127      	bne.n	8008c18 <f_open+0x374>
 8008bc8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d022      	beq.n	8008c18 <f_open+0x374>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7fe f8f0 	bl	8006dbc <clust2sect>
 8008bdc:	64b8      	str	r0, [r7, #72]	@ 0x48
 8008bde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d103      	bne.n	8008bec <f_open+0x348>
						res = FR_INT_ERR;
 8008be4:	2302      	movs	r3, #2
 8008be6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008bea:	e015      	b.n	8008c18 <f_open+0x374>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008bec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008bee:	0a5a      	lsrs	r2, r3, #9
 8008bf0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008bf2:	441a      	add	r2, r3
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	7858      	ldrb	r0, [r3, #1]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	6a1a      	ldr	r2, [r3, #32]
 8008c06:	2301      	movs	r3, #1
 8008c08:	f7fd fd2e 	bl	8006668 <disk_read>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d002      	beq.n	8008c18 <f_open+0x374>
 8008c12:	2301      	movs	r3, #1
 8008c14:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 8008c18:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8008c1a:	f000 fc97 	bl	800954c <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008c1e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d002      	beq.n	8008c2c <f_open+0x388>
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008c2c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3768      	adds	r7, #104	@ 0x68
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b08e      	sub	sp, #56	@ 0x38
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	60b9      	str	r1, [r7, #8]
 8008c42:	607a      	str	r2, [r7, #4]
 8008c44:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f107 0214 	add.w	r2, r7, #20
 8008c56:	4611      	mov	r1, r2
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7ff fda7 	bl	80087ac <validate>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008c64:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d107      	bne.n	8008c7c <f_read+0x44>
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	7d5b      	ldrb	r3, [r3, #21]
 8008c70:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8008c74:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d002      	beq.n	8008c82 <f_read+0x4a>
 8008c7c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008c80:	e115      	b.n	8008eae <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	7d1b      	ldrb	r3, [r3, #20]
 8008c86:	f003 0301 	and.w	r3, r3, #1
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d101      	bne.n	8008c92 <f_read+0x5a>
 8008c8e:	2307      	movs	r3, #7
 8008c90:	e10d      	b.n	8008eae <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	68da      	ldr	r2, [r3, #12]
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	699b      	ldr	r3, [r3, #24]
 8008c9a:	1ad3      	subs	r3, r2, r3
 8008c9c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	6a3b      	ldr	r3, [r7, #32]
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	f240 80fe 	bls.w	8008ea4 <f_read+0x26c>
 8008ca8:	6a3b      	ldr	r3, [r7, #32]
 8008caa:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008cac:	e0fa      	b.n	8008ea4 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	699b      	ldr	r3, [r3, #24]
 8008cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	f040 80c6 	bne.w	8008e48 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	699b      	ldr	r3, [r3, #24]
 8008cc0:	0a5b      	lsrs	r3, r3, #9
 8008cc2:	697a      	ldr	r2, [r7, #20]
 8008cc4:	8952      	ldrh	r2, [r2, #10]
 8008cc6:	3a01      	subs	r2, #1
 8008cc8:	4013      	ands	r3, r2
 8008cca:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d12f      	bne.n	8008d32 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	699b      	ldr	r3, [r3, #24]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d103      	bne.n	8008ce2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ce0:	e013      	b.n	8008d0a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d007      	beq.n	8008cfa <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	699b      	ldr	r3, [r3, #24]
 8008cee:	4619      	mov	r1, r3
 8008cf0:	68f8      	ldr	r0, [r7, #12]
 8008cf2:	f7fe fb10 	bl	8007316 <clmt_clust>
 8008cf6:	6338      	str	r0, [r7, #48]	@ 0x30
 8008cf8:	e007      	b.n	8008d0a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008cfa:	68fa      	ldr	r2, [r7, #12]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	69db      	ldr	r3, [r3, #28]
 8008d00:	4619      	mov	r1, r3
 8008d02:	4610      	mov	r0, r2
 8008d04:	f7fe f879 	bl	8006dfa <get_fat>
 8008d08:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d804      	bhi.n	8008d1a <f_read+0xe2>
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2202      	movs	r2, #2
 8008d14:	755a      	strb	r2, [r3, #21]
 8008d16:	2302      	movs	r3, #2
 8008d18:	e0c9      	b.n	8008eae <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d20:	d104      	bne.n	8008d2c <f_read+0xf4>
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2201      	movs	r2, #1
 8008d26:	755a      	strb	r2, [r3, #21]
 8008d28:	2301      	movs	r3, #1
 8008d2a:	e0c0      	b.n	8008eae <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d30:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008d32:	697a      	ldr	r2, [r7, #20]
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	69db      	ldr	r3, [r3, #28]
 8008d38:	4619      	mov	r1, r3
 8008d3a:	4610      	mov	r0, r2
 8008d3c:	f7fe f83e 	bl	8006dbc <clust2sect>
 8008d40:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008d42:	69bb      	ldr	r3, [r7, #24]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d104      	bne.n	8008d52 <f_read+0x11a>
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2202      	movs	r2, #2
 8008d4c:	755a      	strb	r2, [r3, #21]
 8008d4e:	2302      	movs	r3, #2
 8008d50:	e0ad      	b.n	8008eae <f_read+0x276>
			sect += csect;
 8008d52:	69ba      	ldr	r2, [r7, #24]
 8008d54:	69fb      	ldr	r3, [r7, #28]
 8008d56:	4413      	add	r3, r2
 8008d58:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	0a5b      	lsrs	r3, r3, #9
 8008d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d039      	beq.n	8008dda <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008d66:	69fa      	ldr	r2, [r7, #28]
 8008d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d6a:	4413      	add	r3, r2
 8008d6c:	697a      	ldr	r2, [r7, #20]
 8008d6e:	8952      	ldrh	r2, [r2, #10]
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d905      	bls.n	8008d80 <f_read+0x148>
					cc = fs->csize - csect;
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	895b      	ldrh	r3, [r3, #10]
 8008d78:	461a      	mov	r2, r3
 8008d7a:	69fb      	ldr	r3, [r7, #28]
 8008d7c:	1ad3      	subs	r3, r2, r3
 8008d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	7858      	ldrb	r0, [r3, #1]
 8008d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d86:	69ba      	ldr	r2, [r7, #24]
 8008d88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008d8a:	f7fd fc6d 	bl	8006668 <disk_read>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d004      	beq.n	8008d9e <f_read+0x166>
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2201      	movs	r2, #1
 8008d98:	755a      	strb	r2, [r3, #21]
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e087      	b.n	8008eae <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	7d1b      	ldrb	r3, [r3, #20]
 8008da2:	b25b      	sxtb	r3, r3
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	da14      	bge.n	8008dd2 <f_read+0x19a>
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	6a1a      	ldr	r2, [r3, #32]
 8008dac:	69bb      	ldr	r3, [r7, #24]
 8008dae:	1ad3      	subs	r3, r2, r3
 8008db0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d90d      	bls.n	8008dd2 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	6a1a      	ldr	r2, [r3, #32]
 8008dba:	69bb      	ldr	r3, [r7, #24]
 8008dbc:	1ad3      	subs	r3, r2, r3
 8008dbe:	025b      	lsls	r3, r3, #9
 8008dc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008dc2:	18d0      	adds	r0, r2, r3
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	3330      	adds	r3, #48	@ 0x30
 8008dc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008dcc:	4619      	mov	r1, r3
 8008dce:	f7fd fd2b 	bl	8006828 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dd4:	025b      	lsls	r3, r3, #9
 8008dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8008dd8:	e050      	b.n	8008e7c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	6a1b      	ldr	r3, [r3, #32]
 8008dde:	69ba      	ldr	r2, [r7, #24]
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d02e      	beq.n	8008e42 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	7d1b      	ldrb	r3, [r3, #20]
 8008de8:	b25b      	sxtb	r3, r3
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	da18      	bge.n	8008e20 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	7858      	ldrb	r0, [r3, #1]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	6a1a      	ldr	r2, [r3, #32]
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	f7fd fc53 	bl	80066a8 <disk_write>
 8008e02:	4603      	mov	r3, r0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d004      	beq.n	8008e12 <f_read+0x1da>
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	755a      	strb	r2, [r3, #21]
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e04d      	b.n	8008eae <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	7d1b      	ldrb	r3, [r3, #20]
 8008e16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e1a:	b2da      	uxtb	r2, r3
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	7858      	ldrb	r0, [r3, #1]
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	69ba      	ldr	r2, [r7, #24]
 8008e2e:	f7fd fc1b 	bl	8006668 <disk_read>
 8008e32:	4603      	mov	r3, r0
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d004      	beq.n	8008e42 <f_read+0x20a>
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	755a      	strb	r2, [r3, #21]
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e035      	b.n	8008eae <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	69ba      	ldr	r2, [r7, #24]
 8008e46:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	699b      	ldr	r3, [r3, #24]
 8008e4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e50:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8008e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008e56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d901      	bls.n	8008e62 <f_read+0x22a>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	699b      	ldr	r3, [r3, #24]
 8008e6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e70:	4413      	add	r3, r2
 8008e72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e74:	4619      	mov	r1, r3
 8008e76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008e78:	f7fd fcd6 	bl	8006828 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008e7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e80:	4413      	add	r3, r2
 8008e82:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	699a      	ldr	r2, [r3, #24]
 8008e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e8a:	441a      	add	r2, r3
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	619a      	str	r2, [r3, #24]
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e96:	441a      	add	r2, r3
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	601a      	str	r2, [r3, #0]
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ea0:	1ad3      	subs	r3, r2, r3
 8008ea2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	f47f af01 	bne.w	8008cae <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008eac:	2300      	movs	r3, #0
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3738      	adds	r7, #56	@ 0x38
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}

08008eb6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b08c      	sub	sp, #48	@ 0x30
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	60f8      	str	r0, [r7, #12]
 8008ebe:	60b9      	str	r1, [r7, #8]
 8008ec0:	607a      	str	r2, [r7, #4]
 8008ec2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f107 0210 	add.w	r2, r7, #16
 8008ed4:	4611      	mov	r1, r2
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f7ff fc68 	bl	80087ac <validate>
 8008edc:	4603      	mov	r3, r0
 8008ede:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008ee2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d107      	bne.n	8008efa <f_write+0x44>
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	7d5b      	ldrb	r3, [r3, #21]
 8008eee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008ef2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d002      	beq.n	8008f00 <f_write+0x4a>
 8008efa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008efe:	e14b      	b.n	8009198 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	7d1b      	ldrb	r3, [r3, #20]
 8008f04:	f003 0302 	and.w	r3, r3, #2
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d101      	bne.n	8008f10 <f_write+0x5a>
 8008f0c:	2307      	movs	r3, #7
 8008f0e:	e143      	b.n	8009198 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	699a      	ldr	r2, [r3, #24]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	441a      	add	r2, r3
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	699b      	ldr	r3, [r3, #24]
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	f080 812d 	bcs.w	800917c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	699b      	ldr	r3, [r3, #24]
 8008f26:	43db      	mvns	r3, r3
 8008f28:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008f2a:	e127      	b.n	800917c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	699b      	ldr	r3, [r3, #24]
 8008f30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	f040 80e3 	bne.w	8009100 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	699b      	ldr	r3, [r3, #24]
 8008f3e:	0a5b      	lsrs	r3, r3, #9
 8008f40:	693a      	ldr	r2, [r7, #16]
 8008f42:	8952      	ldrh	r2, [r2, #10]
 8008f44:	3a01      	subs	r2, #1
 8008f46:	4013      	ands	r3, r2
 8008f48:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d143      	bne.n	8008fd8 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	699b      	ldr	r3, [r3, #24]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d10c      	bne.n	8008f72 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	689b      	ldr	r3, [r3, #8]
 8008f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d11a      	bne.n	8008f9a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2100      	movs	r1, #0
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f7fe f93c 	bl	80071e6 <create_chain>
 8008f6e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008f70:	e013      	b.n	8008f9a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d007      	beq.n	8008f8a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	699b      	ldr	r3, [r3, #24]
 8008f7e:	4619      	mov	r1, r3
 8008f80:	68f8      	ldr	r0, [r7, #12]
 8008f82:	f7fe f9c8 	bl	8007316 <clmt_clust>
 8008f86:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008f88:	e007      	b.n	8008f9a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008f8a:	68fa      	ldr	r2, [r7, #12]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	69db      	ldr	r3, [r3, #28]
 8008f90:	4619      	mov	r1, r3
 8008f92:	4610      	mov	r0, r2
 8008f94:	f7fe f927 	bl	80071e6 <create_chain>
 8008f98:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	f000 80f2 	beq.w	8009186 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d104      	bne.n	8008fb2 <f_write+0xfc>
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2202      	movs	r2, #2
 8008fac:	755a      	strb	r2, [r3, #21]
 8008fae:	2302      	movs	r3, #2
 8008fb0:	e0f2      	b.n	8009198 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fb8:	d104      	bne.n	8008fc4 <f_write+0x10e>
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	755a      	strb	r2, [r3, #21]
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	e0e9      	b.n	8009198 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008fc8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	689b      	ldr	r3, [r3, #8]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d102      	bne.n	8008fd8 <f_write+0x122>
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008fd6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	7d1b      	ldrb	r3, [r3, #20]
 8008fdc:	b25b      	sxtb	r3, r3
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	da18      	bge.n	8009014 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	7858      	ldrb	r0, [r3, #1]
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	6a1a      	ldr	r2, [r3, #32]
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	f7fd fb59 	bl	80066a8 <disk_write>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d004      	beq.n	8009006 <f_write+0x150>
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2201      	movs	r2, #1
 8009000:	755a      	strb	r2, [r3, #21]
 8009002:	2301      	movs	r3, #1
 8009004:	e0c8      	b.n	8009198 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	7d1b      	ldrb	r3, [r3, #20]
 800900a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800900e:	b2da      	uxtb	r2, r3
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009014:	693a      	ldr	r2, [r7, #16]
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	69db      	ldr	r3, [r3, #28]
 800901a:	4619      	mov	r1, r3
 800901c:	4610      	mov	r0, r2
 800901e:	f7fd fecd 	bl	8006dbc <clust2sect>
 8009022:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d104      	bne.n	8009034 <f_write+0x17e>
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2202      	movs	r2, #2
 800902e:	755a      	strb	r2, [r3, #21]
 8009030:	2302      	movs	r3, #2
 8009032:	e0b1      	b.n	8009198 <f_write+0x2e2>
			sect += csect;
 8009034:	697a      	ldr	r2, [r7, #20]
 8009036:	69bb      	ldr	r3, [r7, #24]
 8009038:	4413      	add	r3, r2
 800903a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	0a5b      	lsrs	r3, r3, #9
 8009040:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009042:	6a3b      	ldr	r3, [r7, #32]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d03c      	beq.n	80090c2 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009048:	69ba      	ldr	r2, [r7, #24]
 800904a:	6a3b      	ldr	r3, [r7, #32]
 800904c:	4413      	add	r3, r2
 800904e:	693a      	ldr	r2, [r7, #16]
 8009050:	8952      	ldrh	r2, [r2, #10]
 8009052:	4293      	cmp	r3, r2
 8009054:	d905      	bls.n	8009062 <f_write+0x1ac>
					cc = fs->csize - csect;
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	895b      	ldrh	r3, [r3, #10]
 800905a:	461a      	mov	r2, r3
 800905c:	69bb      	ldr	r3, [r7, #24]
 800905e:	1ad3      	subs	r3, r2, r3
 8009060:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	7858      	ldrb	r0, [r3, #1]
 8009066:	6a3b      	ldr	r3, [r7, #32]
 8009068:	697a      	ldr	r2, [r7, #20]
 800906a:	69f9      	ldr	r1, [r7, #28]
 800906c:	f7fd fb1c 	bl	80066a8 <disk_write>
 8009070:	4603      	mov	r3, r0
 8009072:	2b00      	cmp	r3, #0
 8009074:	d004      	beq.n	8009080 <f_write+0x1ca>
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2201      	movs	r2, #1
 800907a:	755a      	strb	r2, [r3, #21]
 800907c:	2301      	movs	r3, #1
 800907e:	e08b      	b.n	8009198 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6a1a      	ldr	r2, [r3, #32]
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	1ad3      	subs	r3, r2, r3
 8009088:	6a3a      	ldr	r2, [r7, #32]
 800908a:	429a      	cmp	r2, r3
 800908c:	d915      	bls.n	80090ba <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	6a1a      	ldr	r2, [r3, #32]
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	1ad3      	subs	r3, r2, r3
 800909c:	025b      	lsls	r3, r3, #9
 800909e:	69fa      	ldr	r2, [r7, #28]
 80090a0:	4413      	add	r3, r2
 80090a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80090a6:	4619      	mov	r1, r3
 80090a8:	f7fd fbbe 	bl	8006828 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	7d1b      	ldrb	r3, [r3, #20]
 80090b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090b4:	b2da      	uxtb	r2, r3
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80090ba:	6a3b      	ldr	r3, [r7, #32]
 80090bc:	025b      	lsls	r3, r3, #9
 80090be:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80090c0:	e03f      	b.n	8009142 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	6a1b      	ldr	r3, [r3, #32]
 80090c6:	697a      	ldr	r2, [r7, #20]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d016      	beq.n	80090fa <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	699a      	ldr	r2, [r3, #24]
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d210      	bcs.n	80090fa <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	7858      	ldrb	r0, [r3, #1]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80090e2:	2301      	movs	r3, #1
 80090e4:	697a      	ldr	r2, [r7, #20]
 80090e6:	f7fd fabf 	bl	8006668 <disk_read>
 80090ea:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d004      	beq.n	80090fa <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2201      	movs	r2, #1
 80090f4:	755a      	strb	r2, [r3, #21]
 80090f6:	2301      	movs	r3, #1
 80090f8:	e04e      	b.n	8009198 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	697a      	ldr	r2, [r7, #20]
 80090fe:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	699b      	ldr	r3, [r3, #24]
 8009104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009108:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800910c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800910e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	429a      	cmp	r2, r3
 8009114:	d901      	bls.n	800911a <f_write+0x264>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	699b      	ldr	r3, [r3, #24]
 8009124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009128:	4413      	add	r3, r2
 800912a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800912c:	69f9      	ldr	r1, [r7, #28]
 800912e:	4618      	mov	r0, r3
 8009130:	f7fd fb7a 	bl	8006828 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	7d1b      	ldrb	r3, [r3, #20]
 8009138:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800913c:	b2da      	uxtb	r2, r3
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009142:	69fa      	ldr	r2, [r7, #28]
 8009144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009146:	4413      	add	r3, r2
 8009148:	61fb      	str	r3, [r7, #28]
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	699a      	ldr	r2, [r3, #24]
 800914e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009150:	441a      	add	r2, r3
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	619a      	str	r2, [r3, #24]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	68da      	ldr	r2, [r3, #12]
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	699b      	ldr	r3, [r3, #24]
 800915e:	429a      	cmp	r2, r3
 8009160:	bf38      	it	cc
 8009162:	461a      	movcc	r2, r3
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	60da      	str	r2, [r3, #12]
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800916e:	441a      	add	r2, r3
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	601a      	str	r2, [r3, #0]
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009178:	1ad3      	subs	r3, r2, r3
 800917a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2b00      	cmp	r3, #0
 8009180:	f47f aed4 	bne.w	8008f2c <f_write+0x76>
 8009184:	e000      	b.n	8009188 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009186:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	7d1b      	ldrb	r3, [r3, #20]
 800918c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009190:	b2da      	uxtb	r2, r3
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009196:	2300      	movs	r3, #0
}
 8009198:	4618      	mov	r0, r3
 800919a:	3730      	adds	r7, #48	@ 0x30
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b086      	sub	sp, #24
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f107 0208 	add.w	r2, r7, #8
 80091ae:	4611      	mov	r1, r2
 80091b0:	4618      	mov	r0, r3
 80091b2:	f7ff fafb 	bl	80087ac <validate>
 80091b6:	4603      	mov	r3, r0
 80091b8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80091ba:	7dfb      	ldrb	r3, [r7, #23]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d168      	bne.n	8009292 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	7d1b      	ldrb	r3, [r3, #20]
 80091c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d062      	beq.n	8009292 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	7d1b      	ldrb	r3, [r3, #20]
 80091d0:	b25b      	sxtb	r3, r3
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	da15      	bge.n	8009202 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	7858      	ldrb	r0, [r3, #1]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6a1a      	ldr	r2, [r3, #32]
 80091e4:	2301      	movs	r3, #1
 80091e6:	f7fd fa5f 	bl	80066a8 <disk_write>
 80091ea:	4603      	mov	r3, r0
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d001      	beq.n	80091f4 <f_sync+0x54>
 80091f0:	2301      	movs	r3, #1
 80091f2:	e04f      	b.n	8009294 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	7d1b      	ldrb	r3, [r3, #20]
 80091f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091fc:	b2da      	uxtb	r2, r3
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009202:	f7fc ffa1 	bl	8006148 <get_fattime>
 8009206:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009208:	68ba      	ldr	r2, [r7, #8]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800920e:	4619      	mov	r1, r3
 8009210:	4610      	mov	r0, r2
 8009212:	f7fd fd37 	bl	8006c84 <move_window>
 8009216:	4603      	mov	r3, r0
 8009218:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800921a:	7dfb      	ldrb	r3, [r7, #23]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d138      	bne.n	8009292 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009224:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	330b      	adds	r3, #11
 800922a:	781a      	ldrb	r2, [r3, #0]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	330b      	adds	r3, #11
 8009230:	f042 0220 	orr.w	r2, r2, #32
 8009234:	b2d2      	uxtb	r2, r2
 8009236:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6818      	ldr	r0, [r3, #0]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	461a      	mov	r2, r3
 8009242:	68f9      	ldr	r1, [r7, #12]
 8009244:	f7fe fa41 	bl	80076ca <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f103 021c 	add.w	r2, r3, #28
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	4619      	mov	r1, r3
 8009254:	4610      	mov	r0, r2
 8009256:	f7fd fabb 	bl	80067d0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	3316      	adds	r3, #22
 800925e:	6939      	ldr	r1, [r7, #16]
 8009260:	4618      	mov	r0, r3
 8009262:	f7fd fab5 	bl	80067d0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	3312      	adds	r3, #18
 800926a:	2100      	movs	r1, #0
 800926c:	4618      	mov	r0, r3
 800926e:	f7fd fa94 	bl	800679a <st_word>
					fs->wflag = 1;
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	2201      	movs	r2, #1
 8009276:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	4618      	mov	r0, r3
 800927c:	f7fd fd30 	bl	8006ce0 <sync_fs>
 8009280:	4603      	mov	r3, r0
 8009282:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	7d1b      	ldrb	r3, [r3, #20]
 8009288:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800928c:	b2da      	uxtb	r2, r3
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009292:	7dfb      	ldrb	r3, [r7, #23]
}
 8009294:	4618      	mov	r0, r3
 8009296:	3718      	adds	r7, #24
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f7ff ff7b 	bl	80091a0 <f_sync>
 80092aa:	4603      	mov	r3, r0
 80092ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80092ae:	7bfb      	ldrb	r3, [r7, #15]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d118      	bne.n	80092e6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f107 0208 	add.w	r2, r7, #8
 80092ba:	4611      	mov	r1, r2
 80092bc:	4618      	mov	r0, r3
 80092be:	f7ff fa75 	bl	80087ac <validate>
 80092c2:	4603      	mov	r3, r0
 80092c4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80092c6:	7bfb      	ldrb	r3, [r7, #15]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d10c      	bne.n	80092e6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	691b      	ldr	r3, [r3, #16]
 80092d0:	4618      	mov	r0, r3
 80092d2:	f7fd fc33 	bl	8006b3c <dec_lock>
 80092d6:	4603      	mov	r3, r0
 80092d8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80092da:	7bfb      	ldrb	r3, [r7, #15]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d102      	bne.n	80092e6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2200      	movs	r2, #0
 80092e4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80092e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3710      	adds	r7, #16
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}

080092f0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b087      	sub	sp, #28
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	60f8      	str	r0, [r7, #12]
 80092f8:	60b9      	str	r1, [r7, #8]
 80092fa:	4613      	mov	r3, r2
 80092fc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80092fe:	2301      	movs	r3, #1
 8009300:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009302:	2300      	movs	r3, #0
 8009304:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009306:	4b1f      	ldr	r3, [pc, #124]	@ (8009384 <FATFS_LinkDriverEx+0x94>)
 8009308:	7a5b      	ldrb	r3, [r3, #9]
 800930a:	b2db      	uxtb	r3, r3
 800930c:	2b00      	cmp	r3, #0
 800930e:	d131      	bne.n	8009374 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009310:	4b1c      	ldr	r3, [pc, #112]	@ (8009384 <FATFS_LinkDriverEx+0x94>)
 8009312:	7a5b      	ldrb	r3, [r3, #9]
 8009314:	b2db      	uxtb	r3, r3
 8009316:	461a      	mov	r2, r3
 8009318:	4b1a      	ldr	r3, [pc, #104]	@ (8009384 <FATFS_LinkDriverEx+0x94>)
 800931a:	2100      	movs	r1, #0
 800931c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800931e:	4b19      	ldr	r3, [pc, #100]	@ (8009384 <FATFS_LinkDriverEx+0x94>)
 8009320:	7a5b      	ldrb	r3, [r3, #9]
 8009322:	b2db      	uxtb	r3, r3
 8009324:	4a17      	ldr	r2, [pc, #92]	@ (8009384 <FATFS_LinkDriverEx+0x94>)
 8009326:	009b      	lsls	r3, r3, #2
 8009328:	4413      	add	r3, r2
 800932a:	68fa      	ldr	r2, [r7, #12]
 800932c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800932e:	4b15      	ldr	r3, [pc, #84]	@ (8009384 <FATFS_LinkDriverEx+0x94>)
 8009330:	7a5b      	ldrb	r3, [r3, #9]
 8009332:	b2db      	uxtb	r3, r3
 8009334:	461a      	mov	r2, r3
 8009336:	4b13      	ldr	r3, [pc, #76]	@ (8009384 <FATFS_LinkDriverEx+0x94>)
 8009338:	4413      	add	r3, r2
 800933a:	79fa      	ldrb	r2, [r7, #7]
 800933c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800933e:	4b11      	ldr	r3, [pc, #68]	@ (8009384 <FATFS_LinkDriverEx+0x94>)
 8009340:	7a5b      	ldrb	r3, [r3, #9]
 8009342:	b2db      	uxtb	r3, r3
 8009344:	1c5a      	adds	r2, r3, #1
 8009346:	b2d1      	uxtb	r1, r2
 8009348:	4a0e      	ldr	r2, [pc, #56]	@ (8009384 <FATFS_LinkDriverEx+0x94>)
 800934a:	7251      	strb	r1, [r2, #9]
 800934c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800934e:	7dbb      	ldrb	r3, [r7, #22]
 8009350:	3330      	adds	r3, #48	@ 0x30
 8009352:	b2da      	uxtb	r2, r3
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	3301      	adds	r3, #1
 800935c:	223a      	movs	r2, #58	@ 0x3a
 800935e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	3302      	adds	r3, #2
 8009364:	222f      	movs	r2, #47	@ 0x2f
 8009366:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	3303      	adds	r3, #3
 800936c:	2200      	movs	r2, #0
 800936e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009370:	2300      	movs	r3, #0
 8009372:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009374:	7dfb      	ldrb	r3, [r7, #23]
}
 8009376:	4618      	mov	r0, r3
 8009378:	371c      	adds	r7, #28
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr
 8009382:	bf00      	nop
 8009384:	20000780 	.word	0x20000780

08009388 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009392:	2200      	movs	r2, #0
 8009394:	6839      	ldr	r1, [r7, #0]
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f7ff ffaa 	bl	80092f0 <FATFS_LinkDriverEx>
 800939c:	4603      	mov	r3, r0
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3708      	adds	r7, #8
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}
	...

080093a8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b085      	sub	sp, #20
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	4603      	mov	r3, r0
 80093b0:	6039      	str	r1, [r7, #0]
 80093b2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80093b4:	88fb      	ldrh	r3, [r7, #6]
 80093b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80093b8:	d802      	bhi.n	80093c0 <ff_convert+0x18>
		c = chr;
 80093ba:	88fb      	ldrh	r3, [r7, #6]
 80093bc:	81fb      	strh	r3, [r7, #14]
 80093be:	e025      	b.n	800940c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d00b      	beq.n	80093de <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80093c6:	88fb      	ldrh	r3, [r7, #6]
 80093c8:	2bff      	cmp	r3, #255	@ 0xff
 80093ca:	d805      	bhi.n	80093d8 <ff_convert+0x30>
 80093cc:	88fb      	ldrh	r3, [r7, #6]
 80093ce:	3b80      	subs	r3, #128	@ 0x80
 80093d0:	4a12      	ldr	r2, [pc, #72]	@ (800941c <ff_convert+0x74>)
 80093d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093d6:	e000      	b.n	80093da <ff_convert+0x32>
 80093d8:	2300      	movs	r3, #0
 80093da:	81fb      	strh	r3, [r7, #14]
 80093dc:	e016      	b.n	800940c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80093de:	2300      	movs	r3, #0
 80093e0:	81fb      	strh	r3, [r7, #14]
 80093e2:	e009      	b.n	80093f8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80093e4:	89fb      	ldrh	r3, [r7, #14]
 80093e6:	4a0d      	ldr	r2, [pc, #52]	@ (800941c <ff_convert+0x74>)
 80093e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093ec:	88fa      	ldrh	r2, [r7, #6]
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d006      	beq.n	8009400 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80093f2:	89fb      	ldrh	r3, [r7, #14]
 80093f4:	3301      	adds	r3, #1
 80093f6:	81fb      	strh	r3, [r7, #14]
 80093f8:	89fb      	ldrh	r3, [r7, #14]
 80093fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80093fc:	d9f2      	bls.n	80093e4 <ff_convert+0x3c>
 80093fe:	e000      	b.n	8009402 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8009400:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8009402:	89fb      	ldrh	r3, [r7, #14]
 8009404:	3380      	adds	r3, #128	@ 0x80
 8009406:	b29b      	uxth	r3, r3
 8009408:	b2db      	uxtb	r3, r3
 800940a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800940c:	89fb      	ldrh	r3, [r7, #14]
}
 800940e:	4618      	mov	r0, r3
 8009410:	3714      	adds	r7, #20
 8009412:	46bd      	mov	sp, r7
 8009414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009418:	4770      	bx	lr
 800941a:	bf00      	nop
 800941c:	08009934 	.word	0x08009934

08009420 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8009420:	b480      	push	{r7}
 8009422:	b087      	sub	sp, #28
 8009424:	af00      	add	r7, sp, #0
 8009426:	4603      	mov	r3, r0
 8009428:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800942a:	88fb      	ldrh	r3, [r7, #6]
 800942c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009430:	d201      	bcs.n	8009436 <ff_wtoupper+0x16>
 8009432:	4b3e      	ldr	r3, [pc, #248]	@ (800952c <ff_wtoupper+0x10c>)
 8009434:	e000      	b.n	8009438 <ff_wtoupper+0x18>
 8009436:	4b3e      	ldr	r3, [pc, #248]	@ (8009530 <ff_wtoupper+0x110>)
 8009438:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	1c9a      	adds	r2, r3, #2
 800943e:	617a      	str	r2, [r7, #20]
 8009440:	881b      	ldrh	r3, [r3, #0]
 8009442:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8009444:	8a7b      	ldrh	r3, [r7, #18]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d068      	beq.n	800951c <ff_wtoupper+0xfc>
 800944a:	88fa      	ldrh	r2, [r7, #6]
 800944c:	8a7b      	ldrh	r3, [r7, #18]
 800944e:	429a      	cmp	r2, r3
 8009450:	d364      	bcc.n	800951c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	1c9a      	adds	r2, r3, #2
 8009456:	617a      	str	r2, [r7, #20]
 8009458:	881b      	ldrh	r3, [r3, #0]
 800945a:	823b      	strh	r3, [r7, #16]
 800945c:	8a3b      	ldrh	r3, [r7, #16]
 800945e:	0a1b      	lsrs	r3, r3, #8
 8009460:	81fb      	strh	r3, [r7, #14]
 8009462:	8a3b      	ldrh	r3, [r7, #16]
 8009464:	b2db      	uxtb	r3, r3
 8009466:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8009468:	88fa      	ldrh	r2, [r7, #6]
 800946a:	8a79      	ldrh	r1, [r7, #18]
 800946c:	8a3b      	ldrh	r3, [r7, #16]
 800946e:	440b      	add	r3, r1
 8009470:	429a      	cmp	r2, r3
 8009472:	da49      	bge.n	8009508 <ff_wtoupper+0xe8>
			switch (cmd) {
 8009474:	89fb      	ldrh	r3, [r7, #14]
 8009476:	2b08      	cmp	r3, #8
 8009478:	d84f      	bhi.n	800951a <ff_wtoupper+0xfa>
 800947a:	a201      	add	r2, pc, #4	@ (adr r2, 8009480 <ff_wtoupper+0x60>)
 800947c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009480:	080094a5 	.word	0x080094a5
 8009484:	080094b7 	.word	0x080094b7
 8009488:	080094cd 	.word	0x080094cd
 800948c:	080094d5 	.word	0x080094d5
 8009490:	080094dd 	.word	0x080094dd
 8009494:	080094e5 	.word	0x080094e5
 8009498:	080094ed 	.word	0x080094ed
 800949c:	080094f5 	.word	0x080094f5
 80094a0:	080094fd 	.word	0x080094fd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80094a4:	88fa      	ldrh	r2, [r7, #6]
 80094a6:	8a7b      	ldrh	r3, [r7, #18]
 80094a8:	1ad3      	subs	r3, r2, r3
 80094aa:	005b      	lsls	r3, r3, #1
 80094ac:	697a      	ldr	r2, [r7, #20]
 80094ae:	4413      	add	r3, r2
 80094b0:	881b      	ldrh	r3, [r3, #0]
 80094b2:	80fb      	strh	r3, [r7, #6]
 80094b4:	e027      	b.n	8009506 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80094b6:	88fa      	ldrh	r2, [r7, #6]
 80094b8:	8a7b      	ldrh	r3, [r7, #18]
 80094ba:	1ad3      	subs	r3, r2, r3
 80094bc:	b29b      	uxth	r3, r3
 80094be:	f003 0301 	and.w	r3, r3, #1
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	88fa      	ldrh	r2, [r7, #6]
 80094c6:	1ad3      	subs	r3, r2, r3
 80094c8:	80fb      	strh	r3, [r7, #6]
 80094ca:	e01c      	b.n	8009506 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80094cc:	88fb      	ldrh	r3, [r7, #6]
 80094ce:	3b10      	subs	r3, #16
 80094d0:	80fb      	strh	r3, [r7, #6]
 80094d2:	e018      	b.n	8009506 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80094d4:	88fb      	ldrh	r3, [r7, #6]
 80094d6:	3b20      	subs	r3, #32
 80094d8:	80fb      	strh	r3, [r7, #6]
 80094da:	e014      	b.n	8009506 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80094dc:	88fb      	ldrh	r3, [r7, #6]
 80094de:	3b30      	subs	r3, #48	@ 0x30
 80094e0:	80fb      	strh	r3, [r7, #6]
 80094e2:	e010      	b.n	8009506 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80094e4:	88fb      	ldrh	r3, [r7, #6]
 80094e6:	3b1a      	subs	r3, #26
 80094e8:	80fb      	strh	r3, [r7, #6]
 80094ea:	e00c      	b.n	8009506 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80094ec:	88fb      	ldrh	r3, [r7, #6]
 80094ee:	3308      	adds	r3, #8
 80094f0:	80fb      	strh	r3, [r7, #6]
 80094f2:	e008      	b.n	8009506 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80094f4:	88fb      	ldrh	r3, [r7, #6]
 80094f6:	3b50      	subs	r3, #80	@ 0x50
 80094f8:	80fb      	strh	r3, [r7, #6]
 80094fa:	e004      	b.n	8009506 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80094fc:	88fb      	ldrh	r3, [r7, #6]
 80094fe:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8009502:	80fb      	strh	r3, [r7, #6]
 8009504:	bf00      	nop
			}
			break;
 8009506:	e008      	b.n	800951a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8009508:	89fb      	ldrh	r3, [r7, #14]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d195      	bne.n	800943a <ff_wtoupper+0x1a>
 800950e:	8a3b      	ldrh	r3, [r7, #16]
 8009510:	005b      	lsls	r3, r3, #1
 8009512:	697a      	ldr	r2, [r7, #20]
 8009514:	4413      	add	r3, r2
 8009516:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8009518:	e78f      	b.n	800943a <ff_wtoupper+0x1a>
			break;
 800951a:	bf00      	nop
	}

	return chr;
 800951c:	88fb      	ldrh	r3, [r7, #6]
}
 800951e:	4618      	mov	r0, r3
 8009520:	371c      	adds	r7, #28
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr
 800952a:	bf00      	nop
 800952c:	08009a34 	.word	0x08009a34
 8009530:	08009c28 	.word	0x08009c28

08009534 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b082      	sub	sp, #8
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 f811 	bl	8009564 <malloc>
 8009542:	4603      	mov	r3, r0
}
 8009544:	4618      	mov	r0, r3
 8009546:	3708      	adds	r7, #8
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 f80d 	bl	8009574 <free>
}
 800955a:	bf00      	nop
 800955c:	3708      	adds	r7, #8
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
	...

08009564 <malloc>:
 8009564:	4b02      	ldr	r3, [pc, #8]	@ (8009570 <malloc+0xc>)
 8009566:	4601      	mov	r1, r0
 8009568:	6818      	ldr	r0, [r3, #0]
 800956a:	f000 b82d 	b.w	80095c8 <_malloc_r>
 800956e:	bf00      	nop
 8009570:	2000000c 	.word	0x2000000c

08009574 <free>:
 8009574:	4b02      	ldr	r3, [pc, #8]	@ (8009580 <free+0xc>)
 8009576:	4601      	mov	r1, r0
 8009578:	6818      	ldr	r0, [r3, #0]
 800957a:	f000 b8f5 	b.w	8009768 <_free_r>
 800957e:	bf00      	nop
 8009580:	2000000c 	.word	0x2000000c

08009584 <sbrk_aligned>:
 8009584:	b570      	push	{r4, r5, r6, lr}
 8009586:	4e0f      	ldr	r6, [pc, #60]	@ (80095c4 <sbrk_aligned+0x40>)
 8009588:	460c      	mov	r4, r1
 800958a:	6831      	ldr	r1, [r6, #0]
 800958c:	4605      	mov	r5, r0
 800958e:	b911      	cbnz	r1, 8009596 <sbrk_aligned+0x12>
 8009590:	f000 f8ae 	bl	80096f0 <_sbrk_r>
 8009594:	6030      	str	r0, [r6, #0]
 8009596:	4621      	mov	r1, r4
 8009598:	4628      	mov	r0, r5
 800959a:	f000 f8a9 	bl	80096f0 <_sbrk_r>
 800959e:	1c43      	adds	r3, r0, #1
 80095a0:	d103      	bne.n	80095aa <sbrk_aligned+0x26>
 80095a2:	f04f 34ff 	mov.w	r4, #4294967295
 80095a6:	4620      	mov	r0, r4
 80095a8:	bd70      	pop	{r4, r5, r6, pc}
 80095aa:	1cc4      	adds	r4, r0, #3
 80095ac:	f024 0403 	bic.w	r4, r4, #3
 80095b0:	42a0      	cmp	r0, r4
 80095b2:	d0f8      	beq.n	80095a6 <sbrk_aligned+0x22>
 80095b4:	1a21      	subs	r1, r4, r0
 80095b6:	4628      	mov	r0, r5
 80095b8:	f000 f89a 	bl	80096f0 <_sbrk_r>
 80095bc:	3001      	adds	r0, #1
 80095be:	d1f2      	bne.n	80095a6 <sbrk_aligned+0x22>
 80095c0:	e7ef      	b.n	80095a2 <sbrk_aligned+0x1e>
 80095c2:	bf00      	nop
 80095c4:	2000078c 	.word	0x2000078c

080095c8 <_malloc_r>:
 80095c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095cc:	1ccd      	adds	r5, r1, #3
 80095ce:	f025 0503 	bic.w	r5, r5, #3
 80095d2:	3508      	adds	r5, #8
 80095d4:	2d0c      	cmp	r5, #12
 80095d6:	bf38      	it	cc
 80095d8:	250c      	movcc	r5, #12
 80095da:	2d00      	cmp	r5, #0
 80095dc:	4606      	mov	r6, r0
 80095de:	db01      	blt.n	80095e4 <_malloc_r+0x1c>
 80095e0:	42a9      	cmp	r1, r5
 80095e2:	d904      	bls.n	80095ee <_malloc_r+0x26>
 80095e4:	230c      	movs	r3, #12
 80095e6:	6033      	str	r3, [r6, #0]
 80095e8:	2000      	movs	r0, #0
 80095ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80096c4 <_malloc_r+0xfc>
 80095f2:	f000 f869 	bl	80096c8 <__malloc_lock>
 80095f6:	f8d8 3000 	ldr.w	r3, [r8]
 80095fa:	461c      	mov	r4, r3
 80095fc:	bb44      	cbnz	r4, 8009650 <_malloc_r+0x88>
 80095fe:	4629      	mov	r1, r5
 8009600:	4630      	mov	r0, r6
 8009602:	f7ff ffbf 	bl	8009584 <sbrk_aligned>
 8009606:	1c43      	adds	r3, r0, #1
 8009608:	4604      	mov	r4, r0
 800960a:	d158      	bne.n	80096be <_malloc_r+0xf6>
 800960c:	f8d8 4000 	ldr.w	r4, [r8]
 8009610:	4627      	mov	r7, r4
 8009612:	2f00      	cmp	r7, #0
 8009614:	d143      	bne.n	800969e <_malloc_r+0xd6>
 8009616:	2c00      	cmp	r4, #0
 8009618:	d04b      	beq.n	80096b2 <_malloc_r+0xea>
 800961a:	6823      	ldr	r3, [r4, #0]
 800961c:	4639      	mov	r1, r7
 800961e:	4630      	mov	r0, r6
 8009620:	eb04 0903 	add.w	r9, r4, r3
 8009624:	f000 f864 	bl	80096f0 <_sbrk_r>
 8009628:	4581      	cmp	r9, r0
 800962a:	d142      	bne.n	80096b2 <_malloc_r+0xea>
 800962c:	6821      	ldr	r1, [r4, #0]
 800962e:	1a6d      	subs	r5, r5, r1
 8009630:	4629      	mov	r1, r5
 8009632:	4630      	mov	r0, r6
 8009634:	f7ff ffa6 	bl	8009584 <sbrk_aligned>
 8009638:	3001      	adds	r0, #1
 800963a:	d03a      	beq.n	80096b2 <_malloc_r+0xea>
 800963c:	6823      	ldr	r3, [r4, #0]
 800963e:	442b      	add	r3, r5
 8009640:	6023      	str	r3, [r4, #0]
 8009642:	f8d8 3000 	ldr.w	r3, [r8]
 8009646:	685a      	ldr	r2, [r3, #4]
 8009648:	bb62      	cbnz	r2, 80096a4 <_malloc_r+0xdc>
 800964a:	f8c8 7000 	str.w	r7, [r8]
 800964e:	e00f      	b.n	8009670 <_malloc_r+0xa8>
 8009650:	6822      	ldr	r2, [r4, #0]
 8009652:	1b52      	subs	r2, r2, r5
 8009654:	d420      	bmi.n	8009698 <_malloc_r+0xd0>
 8009656:	2a0b      	cmp	r2, #11
 8009658:	d917      	bls.n	800968a <_malloc_r+0xc2>
 800965a:	1961      	adds	r1, r4, r5
 800965c:	42a3      	cmp	r3, r4
 800965e:	6025      	str	r5, [r4, #0]
 8009660:	bf18      	it	ne
 8009662:	6059      	strne	r1, [r3, #4]
 8009664:	6863      	ldr	r3, [r4, #4]
 8009666:	bf08      	it	eq
 8009668:	f8c8 1000 	streq.w	r1, [r8]
 800966c:	5162      	str	r2, [r4, r5]
 800966e:	604b      	str	r3, [r1, #4]
 8009670:	4630      	mov	r0, r6
 8009672:	f000 f82f 	bl	80096d4 <__malloc_unlock>
 8009676:	f104 000b 	add.w	r0, r4, #11
 800967a:	1d23      	adds	r3, r4, #4
 800967c:	f020 0007 	bic.w	r0, r0, #7
 8009680:	1ac2      	subs	r2, r0, r3
 8009682:	bf1c      	itt	ne
 8009684:	1a1b      	subne	r3, r3, r0
 8009686:	50a3      	strne	r3, [r4, r2]
 8009688:	e7af      	b.n	80095ea <_malloc_r+0x22>
 800968a:	6862      	ldr	r2, [r4, #4]
 800968c:	42a3      	cmp	r3, r4
 800968e:	bf0c      	ite	eq
 8009690:	f8c8 2000 	streq.w	r2, [r8]
 8009694:	605a      	strne	r2, [r3, #4]
 8009696:	e7eb      	b.n	8009670 <_malloc_r+0xa8>
 8009698:	4623      	mov	r3, r4
 800969a:	6864      	ldr	r4, [r4, #4]
 800969c:	e7ae      	b.n	80095fc <_malloc_r+0x34>
 800969e:	463c      	mov	r4, r7
 80096a0:	687f      	ldr	r7, [r7, #4]
 80096a2:	e7b6      	b.n	8009612 <_malloc_r+0x4a>
 80096a4:	461a      	mov	r2, r3
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	42a3      	cmp	r3, r4
 80096aa:	d1fb      	bne.n	80096a4 <_malloc_r+0xdc>
 80096ac:	2300      	movs	r3, #0
 80096ae:	6053      	str	r3, [r2, #4]
 80096b0:	e7de      	b.n	8009670 <_malloc_r+0xa8>
 80096b2:	230c      	movs	r3, #12
 80096b4:	6033      	str	r3, [r6, #0]
 80096b6:	4630      	mov	r0, r6
 80096b8:	f000 f80c 	bl	80096d4 <__malloc_unlock>
 80096bc:	e794      	b.n	80095e8 <_malloc_r+0x20>
 80096be:	6005      	str	r5, [r0, #0]
 80096c0:	e7d6      	b.n	8009670 <_malloc_r+0xa8>
 80096c2:	bf00      	nop
 80096c4:	20000790 	.word	0x20000790

080096c8 <__malloc_lock>:
 80096c8:	4801      	ldr	r0, [pc, #4]	@ (80096d0 <__malloc_lock+0x8>)
 80096ca:	f000 b84b 	b.w	8009764 <__retarget_lock_acquire_recursive>
 80096ce:	bf00      	nop
 80096d0:	200008d0 	.word	0x200008d0

080096d4 <__malloc_unlock>:
 80096d4:	4801      	ldr	r0, [pc, #4]	@ (80096dc <__malloc_unlock+0x8>)
 80096d6:	f000 b846 	b.w	8009766 <__retarget_lock_release_recursive>
 80096da:	bf00      	nop
 80096dc:	200008d0 	.word	0x200008d0

080096e0 <memset>:
 80096e0:	4402      	add	r2, r0
 80096e2:	4603      	mov	r3, r0
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d100      	bne.n	80096ea <memset+0xa>
 80096e8:	4770      	bx	lr
 80096ea:	f803 1b01 	strb.w	r1, [r3], #1
 80096ee:	e7f9      	b.n	80096e4 <memset+0x4>

080096f0 <_sbrk_r>:
 80096f0:	b538      	push	{r3, r4, r5, lr}
 80096f2:	4d06      	ldr	r5, [pc, #24]	@ (800970c <_sbrk_r+0x1c>)
 80096f4:	2300      	movs	r3, #0
 80096f6:	4604      	mov	r4, r0
 80096f8:	4608      	mov	r0, r1
 80096fa:	602b      	str	r3, [r5, #0]
 80096fc:	f7f8 f824 	bl	8001748 <_sbrk>
 8009700:	1c43      	adds	r3, r0, #1
 8009702:	d102      	bne.n	800970a <_sbrk_r+0x1a>
 8009704:	682b      	ldr	r3, [r5, #0]
 8009706:	b103      	cbz	r3, 800970a <_sbrk_r+0x1a>
 8009708:	6023      	str	r3, [r4, #0]
 800970a:	bd38      	pop	{r3, r4, r5, pc}
 800970c:	200008cc 	.word	0x200008cc

08009710 <__errno>:
 8009710:	4b01      	ldr	r3, [pc, #4]	@ (8009718 <__errno+0x8>)
 8009712:	6818      	ldr	r0, [r3, #0]
 8009714:	4770      	bx	lr
 8009716:	bf00      	nop
 8009718:	2000000c 	.word	0x2000000c

0800971c <__libc_init_array>:
 800971c:	b570      	push	{r4, r5, r6, lr}
 800971e:	4d0d      	ldr	r5, [pc, #52]	@ (8009754 <__libc_init_array+0x38>)
 8009720:	4c0d      	ldr	r4, [pc, #52]	@ (8009758 <__libc_init_array+0x3c>)
 8009722:	1b64      	subs	r4, r4, r5
 8009724:	10a4      	asrs	r4, r4, #2
 8009726:	2600      	movs	r6, #0
 8009728:	42a6      	cmp	r6, r4
 800972a:	d109      	bne.n	8009740 <__libc_init_array+0x24>
 800972c:	4d0b      	ldr	r5, [pc, #44]	@ (800975c <__libc_init_array+0x40>)
 800972e:	4c0c      	ldr	r4, [pc, #48]	@ (8009760 <__libc_init_array+0x44>)
 8009730:	f000 f864 	bl	80097fc <_init>
 8009734:	1b64      	subs	r4, r4, r5
 8009736:	10a4      	asrs	r4, r4, #2
 8009738:	2600      	movs	r6, #0
 800973a:	42a6      	cmp	r6, r4
 800973c:	d105      	bne.n	800974a <__libc_init_array+0x2e>
 800973e:	bd70      	pop	{r4, r5, r6, pc}
 8009740:	f855 3b04 	ldr.w	r3, [r5], #4
 8009744:	4798      	blx	r3
 8009746:	3601      	adds	r6, #1
 8009748:	e7ee      	b.n	8009728 <__libc_init_array+0xc>
 800974a:	f855 3b04 	ldr.w	r3, [r5], #4
 800974e:	4798      	blx	r3
 8009750:	3601      	adds	r6, #1
 8009752:	e7f2      	b.n	800973a <__libc_init_array+0x1e>
 8009754:	08009cec 	.word	0x08009cec
 8009758:	08009cec 	.word	0x08009cec
 800975c:	08009cec 	.word	0x08009cec
 8009760:	08009cf0 	.word	0x08009cf0

08009764 <__retarget_lock_acquire_recursive>:
 8009764:	4770      	bx	lr

08009766 <__retarget_lock_release_recursive>:
 8009766:	4770      	bx	lr

08009768 <_free_r>:
 8009768:	b538      	push	{r3, r4, r5, lr}
 800976a:	4605      	mov	r5, r0
 800976c:	2900      	cmp	r1, #0
 800976e:	d041      	beq.n	80097f4 <_free_r+0x8c>
 8009770:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009774:	1f0c      	subs	r4, r1, #4
 8009776:	2b00      	cmp	r3, #0
 8009778:	bfb8      	it	lt
 800977a:	18e4      	addlt	r4, r4, r3
 800977c:	f7ff ffa4 	bl	80096c8 <__malloc_lock>
 8009780:	4a1d      	ldr	r2, [pc, #116]	@ (80097f8 <_free_r+0x90>)
 8009782:	6813      	ldr	r3, [r2, #0]
 8009784:	b933      	cbnz	r3, 8009794 <_free_r+0x2c>
 8009786:	6063      	str	r3, [r4, #4]
 8009788:	6014      	str	r4, [r2, #0]
 800978a:	4628      	mov	r0, r5
 800978c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009790:	f7ff bfa0 	b.w	80096d4 <__malloc_unlock>
 8009794:	42a3      	cmp	r3, r4
 8009796:	d908      	bls.n	80097aa <_free_r+0x42>
 8009798:	6820      	ldr	r0, [r4, #0]
 800979a:	1821      	adds	r1, r4, r0
 800979c:	428b      	cmp	r3, r1
 800979e:	bf01      	itttt	eq
 80097a0:	6819      	ldreq	r1, [r3, #0]
 80097a2:	685b      	ldreq	r3, [r3, #4]
 80097a4:	1809      	addeq	r1, r1, r0
 80097a6:	6021      	streq	r1, [r4, #0]
 80097a8:	e7ed      	b.n	8009786 <_free_r+0x1e>
 80097aa:	461a      	mov	r2, r3
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	b10b      	cbz	r3, 80097b4 <_free_r+0x4c>
 80097b0:	42a3      	cmp	r3, r4
 80097b2:	d9fa      	bls.n	80097aa <_free_r+0x42>
 80097b4:	6811      	ldr	r1, [r2, #0]
 80097b6:	1850      	adds	r0, r2, r1
 80097b8:	42a0      	cmp	r0, r4
 80097ba:	d10b      	bne.n	80097d4 <_free_r+0x6c>
 80097bc:	6820      	ldr	r0, [r4, #0]
 80097be:	4401      	add	r1, r0
 80097c0:	1850      	adds	r0, r2, r1
 80097c2:	4283      	cmp	r3, r0
 80097c4:	6011      	str	r1, [r2, #0]
 80097c6:	d1e0      	bne.n	800978a <_free_r+0x22>
 80097c8:	6818      	ldr	r0, [r3, #0]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	6053      	str	r3, [r2, #4]
 80097ce:	4408      	add	r0, r1
 80097d0:	6010      	str	r0, [r2, #0]
 80097d2:	e7da      	b.n	800978a <_free_r+0x22>
 80097d4:	d902      	bls.n	80097dc <_free_r+0x74>
 80097d6:	230c      	movs	r3, #12
 80097d8:	602b      	str	r3, [r5, #0]
 80097da:	e7d6      	b.n	800978a <_free_r+0x22>
 80097dc:	6820      	ldr	r0, [r4, #0]
 80097de:	1821      	adds	r1, r4, r0
 80097e0:	428b      	cmp	r3, r1
 80097e2:	bf04      	itt	eq
 80097e4:	6819      	ldreq	r1, [r3, #0]
 80097e6:	685b      	ldreq	r3, [r3, #4]
 80097e8:	6063      	str	r3, [r4, #4]
 80097ea:	bf04      	itt	eq
 80097ec:	1809      	addeq	r1, r1, r0
 80097ee:	6021      	streq	r1, [r4, #0]
 80097f0:	6054      	str	r4, [r2, #4]
 80097f2:	e7ca      	b.n	800978a <_free_r+0x22>
 80097f4:	bd38      	pop	{r3, r4, r5, pc}
 80097f6:	bf00      	nop
 80097f8:	20000790 	.word	0x20000790

080097fc <_init>:
 80097fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097fe:	bf00      	nop
 8009800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009802:	bc08      	pop	{r3}
 8009804:	469e      	mov	lr, r3
 8009806:	4770      	bx	lr

08009808 <_fini>:
 8009808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800980a:	bf00      	nop
 800980c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800980e:	bc08      	pop	{r3}
 8009810:	469e      	mov	lr, r3
 8009812:	4770      	bx	lr
