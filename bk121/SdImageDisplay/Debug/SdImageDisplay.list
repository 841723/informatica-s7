
SdImageDisplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dec  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08006fb4  08006fb4  00007fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fe0  08006fe0  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  08006fe0  08006fe0  00007fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fe8  08006fe8  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fe8  08006fe8  00007fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006fec  08006fec  00007fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006ff0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  2000000c  08006ffc  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20000504  08006ffc  00008504  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013001  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033d6  00000000  00000000  0001b03d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  0001e418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ca1  00000000  00000000  0001f4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000292fc  00000000  00000000  00020181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000177b5  00000000  00000000  0004947d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0966  00000000  00000000  00060c32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00151598  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004430  00000000  00000000  001515dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00155a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006f9c 	.word	0x08006f9c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08006f9c 	.word	0x08006f9c

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <Display_Image_DMA2D>:

#include <display.h>

void Test_SDRAM(void);

HAL_StatusTypeDef Display_Image_DMA2D(uint16_t* src, uint16_t width, uint16_t height) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b094      	sub	sp, #80	@ 0x50
 80004fc:	af02      	add	r7, sp, #8
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	460b      	mov	r3, r1
 8000502:	807b      	strh	r3, [r7, #2]
 8000504:	4613      	mov	r3, r2
 8000506:	803b      	strh	r3, [r7, #0]
    DMA2D_HandleTypeDef hdma2d;

    // Configura DMA2D
    hdma2d.Instance = DMA2D;
 8000508:	4b1a      	ldr	r3, [pc, #104]	@ (8000574 <Display_Image_DMA2D+0x7c>)
 800050a:	60bb      	str	r3, [r7, #8]
    hdma2d.Init.Mode = DMA2D_M2M;
 800050c:	2300      	movs	r3, #0
 800050e:	60fb      	str	r3, [r7, #12]
    hdma2d.Init.ColorMode = DMA2D_RGB565;
 8000510:	2302      	movs	r3, #2
 8000512:	613b      	str	r3, [r7, #16]
    hdma2d.Init.OutputOffset = 0;
 8000514:	2300      	movs	r3, #0
 8000516:	617b      	str	r3, [r7, #20]

    Test_SDRAM();
 8000518:	f000 f82e 	bl	8000578 <Test_SDRAM>

    if (HAL_DMA2D_Init(&hdma2d) != HAL_OK) {
 800051c:	f107 0308 	add.w	r3, r7, #8
 8000520:	4618      	mov	r0, r3
 8000522:	f001 ff3d 	bl	80023a0 <HAL_DMA2D_Init>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <Display_Image_DMA2D+0x38>
        return HAL_ERROR;
 800052c:	2301      	movs	r3, #1
 800052e:	e01c      	b.n	800056a <Display_Image_DMA2D+0x72>
    }

    // Inicia la transferencia de la imagen al framebuffer
    if (HAL_DMA2D_Start(&hdma2d, (uint32_t)src, FRAME_BUFFER_ADDRESS, width, height) != HAL_OK) {
 8000530:	6879      	ldr	r1, [r7, #4]
 8000532:	887a      	ldrh	r2, [r7, #2]
 8000534:	883b      	ldrh	r3, [r7, #0]
 8000536:	f107 0008 	add.w	r0, r7, #8
 800053a:	9300      	str	r3, [sp, #0]
 800053c:	4613      	mov	r3, r2
 800053e:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 8000542:	f001 ff77 	bl	8002434 <HAL_DMA2D_Start>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <Display_Image_DMA2D+0x58>
    	return HAL_ERROR;
 800054c:	2301      	movs	r3, #1
 800054e:	e00c      	b.n	800056a <Display_Image_DMA2D+0x72>
    }

    // Espera hasta que se complete la transferencia
    if (HAL_DMA2D_PollForTransfer(&hdma2d, 1000) != HAL_OK) {
 8000550:	f107 0308 	add.w	r3, r7, #8
 8000554:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000558:	4618      	mov	r0, r3
 800055a:	f001 ff96 	bl	800248a <HAL_DMA2D_PollForTransfer>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <Display_Image_DMA2D+0x70>
    	return HAL_ERROR;
 8000564:	2301      	movs	r3, #1
 8000566:	e000      	b.n	800056a <Display_Image_DMA2D+0x72>
    }

    return HAL_OK;
 8000568:	2300      	movs	r3, #0
}
 800056a:	4618      	mov	r0, r3
 800056c:	3748      	adds	r7, #72	@ 0x48
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	4002b000 	.word	0x4002b000

08000578 <Test_SDRAM>:

void Test_SDRAM(void) {
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
    uint32_t *sdram_addr = (uint32_t *)FRAME_BUFFER_ADDRESS;
 800057e:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8000582:	607b      	str	r3, [r7, #4]

    // Escribir valores en la SDRAM
    for (uint32_t i = 0; i < 1024; i++) {
 8000584:	2300      	movs	r3, #0
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	e008      	b.n	800059c <Test_SDRAM+0x24>
        sdram_addr[i] = i;
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	4413      	add	r3, r2
 8000592:	68fa      	ldr	r2, [r7, #12]
 8000594:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < 1024; i++) {
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	3301      	adds	r3, #1
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80005a2:	d3f2      	bcc.n	800058a <Test_SDRAM+0x12>
    }

    // Verificar valores
    for (uint32_t i = 0; i < 1024; i++) {
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	e00a      	b.n	80005c0 <Test_SDRAM+0x48>
        if (sdram_addr[i] != i) {
 80005aa:	68bb      	ldr	r3, [r7, #8]
 80005ac:	009b      	lsls	r3, r3, #2
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	4413      	add	r3, r2
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	68ba      	ldr	r2, [r7, #8]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d107      	bne.n	80005ca <Test_SDRAM+0x52>
    for (uint32_t i = 0; i < 1024; i++) {
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	3301      	adds	r3, #1
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80005c6:	d3f0      	bcc.n	80005aa <Test_SDRAM+0x32>
 80005c8:	e000      	b.n	80005cc <Test_SDRAM+0x54>
            return;
 80005ca:	bf00      	nop
        }
    }
}
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
	...

080005d8 <FATFS_Init>:
FRESULT res; /* FatFs function common result code */
uint32_t byteswritten; /* File write/read counts */
uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
uint8_t rtext[_MAX_SS];/* File read buffer */

void FATFS_Init() {
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 80005dc:	2200      	movs	r2, #0
 80005de:	4905      	ldr	r1, [pc, #20]	@ (80005f4 <FATFS_Init+0x1c>)
 80005e0:	4805      	ldr	r0, [pc, #20]	@ (80005f8 <FATFS_Init+0x20>)
 80005e2:	f006 fc0d 	bl	8006e00 <f_mount>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <FATFS_Init+0x18>
	{
		Error_Handler();
 80005ec:	f000 fe2e 	bl	800124c <Error_Handler>
	}
}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000294 	.word	0x20000294
 80005f8:	20000298 	.word	0x20000298

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000600:	b086      	sub	sp, #24
 8000602:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	const int height = 240;
 8000604:	23f0      	movs	r3, #240	@ 0xf0
 8000606:	613b      	str	r3, [r7, #16]
	const int width = 320;
 8000608:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800060c:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060e:	f001 f98e 	bl	800192e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000612:	f000 f883 	bl	800071c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000616:	f000 fa63 	bl	8000ae0 <MX_GPIO_Init>
  MX_DMA_Init();
 800061a:	f000 f9eb 	bl	80009f4 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 800061e:	f000 f9c9 	bl	80009b4 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000622:	f005 fd69 	bl	80060f8 <MX_FATFS_Init>
  MX_DMA2D_Init();
 8000626:	f000 f8e1 	bl	80007ec <MX_DMA2D_Init>
  MX_LTDC_Init();
 800062a:	f000 f911 	bl	8000850 <MX_LTDC_Init>
  MX_FMC_Init();
 800062e:	f000 fa07 	bl	8000a40 <MX_FMC_Init>
  /* USER CODE BEGIN 2 */
  FATFS_Init();
 8000632:	f7ff ffd1 	bl	80005d8 <FATFS_Init>
//    if (Display_Image_DMA2D((uint16_t*)image_buffer, IMAGE_WIDTH, IMAGE_HEIGHT) != HAL_OK) {
//      Error_Handler();
//    }
//  }

  uint16_t image[height * width]; // Ejemplo de una imagen en RGB565 (240x320)
 8000636:	693b      	ldr	r3, [r7, #16]
 8000638:	68fa      	ldr	r2, [r7, #12]
 800063a:	fb02 f303 	mul.w	r3, r2, r3
 800063e:	3b01      	subs	r3, #1
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	693b      	ldr	r3, [r7, #16]
 8000644:	68fa      	ldr	r2, [r7, #12]
 8000646:	fb02 f303 	mul.w	r3, r2, r3
 800064a:	461a      	mov	r2, r3
 800064c:	2300      	movs	r3, #0
 800064e:	4690      	mov	r8, r2
 8000650:	4699      	mov	r9, r3
 8000652:	f04f 0200 	mov.w	r2, #0
 8000656:	f04f 0300 	mov.w	r3, #0
 800065a:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800065e:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8000662:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8000666:	693b      	ldr	r3, [r7, #16]
 8000668:	68fa      	ldr	r2, [r7, #12]
 800066a:	fb02 f303 	mul.w	r3, r2, r3
 800066e:	461a      	mov	r2, r3
 8000670:	2300      	movs	r3, #0
 8000672:	4614      	mov	r4, r2
 8000674:	461d      	mov	r5, r3
 8000676:	f04f 0200 	mov.w	r2, #0
 800067a:	f04f 0300 	mov.w	r3, #0
 800067e:	012b      	lsls	r3, r5, #4
 8000680:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000684:	0122      	lsls	r2, r4, #4
 8000686:	693b      	ldr	r3, [r7, #16]
 8000688:	68fa      	ldr	r2, [r7, #12]
 800068a:	fb02 f303 	mul.w	r3, r2, r3
 800068e:	005b      	lsls	r3, r3, #1
 8000690:	3307      	adds	r3, #7
 8000692:	08db      	lsrs	r3, r3, #3
 8000694:	00db      	lsls	r3, r3, #3
 8000696:	ebad 0d03 	sub.w	sp, sp, r3
 800069a:	466b      	mov	r3, sp
 800069c:	3301      	adds	r3, #1
 800069e:	085b      	lsrs	r3, r3, #1
 80006a0:	005b      	lsls	r3, r3, #1
 80006a2:	607b      	str	r3, [r7, #4]

  for (uint16_t y = 0; y < height; y++) {
 80006a4:	2300      	movs	r3, #0
 80006a6:	82fb      	strh	r3, [r7, #22]
 80006a8:	e020      	b.n	80006ec <main+0xf0>
	  for (uint16_t x = 0; x < width; x++) {
 80006aa:	2300      	movs	r3, #0
 80006ac:	82bb      	strh	r3, [r7, #20]
 80006ae:	e016      	b.n	80006de <main+0xe2>
		  uint16_t color = (x * 31 / width) << 11; // Azul, con intensidad según la posición
 80006b0:	8aba      	ldrh	r2, [r7, #20]
 80006b2:	4613      	mov	r3, r2
 80006b4:	015b      	lsls	r3, r3, #5
 80006b6:	1a9a      	subs	r2, r3, r2
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80006be:	b29b      	uxth	r3, r3
 80006c0:	02db      	lsls	r3, r3, #11
 80006c2:	807b      	strh	r3, [r7, #2]
		  image[y * width + x] = color;
 80006c4:	8afb      	ldrh	r3, [r7, #22]
 80006c6:	68fa      	ldr	r2, [r7, #12]
 80006c8:	fb03 f202 	mul.w	r2, r3, r2
 80006cc:	8abb      	ldrh	r3, [r7, #20]
 80006ce:	441a      	add	r2, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	8879      	ldrh	r1, [r7, #2]
 80006d4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  for (uint16_t x = 0; x < width; x++) {
 80006d8:	8abb      	ldrh	r3, [r7, #20]
 80006da:	3301      	adds	r3, #1
 80006dc:	82bb      	strh	r3, [r7, #20]
 80006de:	8abb      	ldrh	r3, [r7, #20]
 80006e0:	68fa      	ldr	r2, [r7, #12]
 80006e2:	429a      	cmp	r2, r3
 80006e4:	dce4      	bgt.n	80006b0 <main+0xb4>
  for (uint16_t y = 0; y < height; y++) {
 80006e6:	8afb      	ldrh	r3, [r7, #22]
 80006e8:	3301      	adds	r3, #1
 80006ea:	82fb      	strh	r3, [r7, #22]
 80006ec:	8afb      	ldrh	r3, [r7, #22]
 80006ee:	693a      	ldr	r2, [r7, #16]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	dcda      	bgt.n	80006aa <main+0xae>
  uint16_t image[height * width]; // Ejemplo de una imagen en RGB565 (240x320)
 80006f4:	693b      	ldr	r3, [r7, #16]
 80006f6:	68fa      	ldr	r2, [r7, #12]
 80006f8:	fb02 f303 	mul.w	r3, r2, r3
	  }
  }

  memset(image, 0xFFFF, sizeof(image)); // Imagen blanca
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	461a      	mov	r2, r3
 8000700:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000704:	6878      	ldr	r0, [r7, #4]
 8000706:	f006 fc1c 	bl	8006f42 <memset>
  Display_Image_DMA2D(image, 240, 320);
 800070a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800070e:	21f0      	movs	r1, #240	@ 0xf0
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f7ff fef1 	bl	80004f8 <Display_Image_DMA2D>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000716:	bf00      	nop
 8000718:	e7fd      	b.n	8000716 <main+0x11a>
	...

0800071c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b094      	sub	sp, #80	@ 0x50
 8000720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	f107 0320 	add.w	r3, r7, #32
 8000726:	2230      	movs	r2, #48	@ 0x30
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f006 fc09 	bl	8006f42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000740:	4b28      	ldr	r3, [pc, #160]	@ (80007e4 <SystemClock_Config+0xc8>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000744:	4a27      	ldr	r2, [pc, #156]	@ (80007e4 <SystemClock_Config+0xc8>)
 8000746:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800074a:	6413      	str	r3, [r2, #64]	@ 0x40
 800074c:	4b25      	ldr	r3, [pc, #148]	@ (80007e4 <SystemClock_Config+0xc8>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000750:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000754:	60bb      	str	r3, [r7, #8]
 8000756:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000758:	4b23      	ldr	r3, [pc, #140]	@ (80007e8 <SystemClock_Config+0xcc>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000760:	4a21      	ldr	r2, [pc, #132]	@ (80007e8 <SystemClock_Config+0xcc>)
 8000762:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000766:	6013      	str	r3, [r2, #0]
 8000768:	4b1f      	ldr	r3, [pc, #124]	@ (80007e8 <SystemClock_Config+0xcc>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000774:	2302      	movs	r3, #2
 8000776:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000778:	2301      	movs	r3, #1
 800077a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800077c:	2310      	movs	r3, #16
 800077e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000780:	2302      	movs	r3, #2
 8000782:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000784:	2300      	movs	r3, #0
 8000786:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000788:	2308      	movs	r3, #8
 800078a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800078c:	2332      	movs	r3, #50	@ 0x32
 800078e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000790:	2302      	movs	r3, #2
 8000792:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000794:	2302      	movs	r3, #2
 8000796:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000798:	f107 0320 	add.w	r3, r7, #32
 800079c:	4618      	mov	r0, r3
 800079e:	f002 fd11 	bl	80031c4 <HAL_RCC_OscConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0x90>
  {
    Error_Handler();
 80007a8:	f000 fd50 	bl	800124c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ac:	230f      	movs	r3, #15
 80007ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b0:	2302      	movs	r3, #2
 80007b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007b8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	2101      	movs	r1, #1
 80007ca:	4618      	mov	r0, r3
 80007cc:	f002 ff9e 	bl	800370c <HAL_RCC_ClockConfig>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80007d6:	f000 fd39 	bl	800124c <Error_Handler>
  }
}
 80007da:	bf00      	nop
 80007dc:	3750      	adds	r7, #80	@ 0x50
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40007000 	.word	0x40007000

080007ec <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80007f0:	4b15      	ldr	r3, [pc, #84]	@ (8000848 <MX_DMA2D_Init+0x5c>)
 80007f2:	4a16      	ldr	r2, [pc, #88]	@ (800084c <MX_DMA2D_Init+0x60>)
 80007f4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80007f6:	4b14      	ldr	r3, [pc, #80]	@ (8000848 <MX_DMA2D_Init+0x5c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80007fc:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <MX_DMA2D_Init+0x5c>)
 80007fe:	2202      	movs	r2, #2
 8000800:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000802:	4b11      	ldr	r3, [pc, #68]	@ (8000848 <MX_DMA2D_Init+0x5c>)
 8000804:	2200      	movs	r2, #0
 8000806:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000808:	4b0f      	ldr	r3, [pc, #60]	@ (8000848 <MX_DMA2D_Init+0x5c>)
 800080a:	2200      	movs	r2, #0
 800080c:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 800080e:	4b0e      	ldr	r3, [pc, #56]	@ (8000848 <MX_DMA2D_Init+0x5c>)
 8000810:	2202      	movs	r2, #2
 8000812:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000814:	4b0c      	ldr	r3, [pc, #48]	@ (8000848 <MX_DMA2D_Init+0x5c>)
 8000816:	2200      	movs	r2, #0
 8000818:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800081a:	4b0b      	ldr	r3, [pc, #44]	@ (8000848 <MX_DMA2D_Init+0x5c>)
 800081c:	2200      	movs	r2, #0
 800081e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000820:	4809      	ldr	r0, [pc, #36]	@ (8000848 <MX_DMA2D_Init+0x5c>)
 8000822:	f001 fdbd 	bl	80023a0 <HAL_DMA2D_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800082c:	f000 fd0e 	bl	800124c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000830:	2101      	movs	r1, #1
 8000832:	4805      	ldr	r0, [pc, #20]	@ (8000848 <MX_DMA2D_Init+0x5c>)
 8000834:	f001 ff12 	bl	800265c <HAL_DMA2D_ConfigLayer>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800083e:	f000 fd05 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000028 	.word	0x20000028
 800084c:	4002b000 	.word	0x4002b000

08000850 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b09a      	sub	sp, #104	@ 0x68
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000856:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800085a:	2234      	movs	r2, #52	@ 0x34
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f006 fb6f 	bl	8006f42 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000864:	463b      	mov	r3, r7
 8000866:	2234      	movs	r2, #52	@ 0x34
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f006 fb69 	bl	8006f42 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000870:	4b4e      	ldr	r3, [pc, #312]	@ (80009ac <MX_LTDC_Init+0x15c>)
 8000872:	4a4f      	ldr	r2, [pc, #316]	@ (80009b0 <MX_LTDC_Init+0x160>)
 8000874:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000876:	4b4d      	ldr	r3, [pc, #308]	@ (80009ac <MX_LTDC_Init+0x15c>)
 8000878:	2200      	movs	r2, #0
 800087a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800087c:	4b4b      	ldr	r3, [pc, #300]	@ (80009ac <MX_LTDC_Init+0x15c>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000882:	4b4a      	ldr	r3, [pc, #296]	@ (80009ac <MX_LTDC_Init+0x15c>)
 8000884:	2200      	movs	r2, #0
 8000886:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000888:	4b48      	ldr	r3, [pc, #288]	@ (80009ac <MX_LTDC_Init+0x15c>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800088e:	4b47      	ldr	r3, [pc, #284]	@ (80009ac <MX_LTDC_Init+0x15c>)
 8000890:	2207      	movs	r2, #7
 8000892:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000894:	4b45      	ldr	r3, [pc, #276]	@ (80009ac <MX_LTDC_Init+0x15c>)
 8000896:	2203      	movs	r2, #3
 8000898:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800089a:	4b44      	ldr	r3, [pc, #272]	@ (80009ac <MX_LTDC_Init+0x15c>)
 800089c:	220e      	movs	r2, #14
 800089e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80008a0:	4b42      	ldr	r3, [pc, #264]	@ (80009ac <MX_LTDC_Init+0x15c>)
 80008a2:	2205      	movs	r2, #5
 80008a4:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80008a6:	4b41      	ldr	r3, [pc, #260]	@ (80009ac <MX_LTDC_Init+0x15c>)
 80008a8:	f240 228e 	movw	r2, #654	@ 0x28e
 80008ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80008ae:	4b3f      	ldr	r3, [pc, #252]	@ (80009ac <MX_LTDC_Init+0x15c>)
 80008b0:	f240 12e5 	movw	r2, #485	@ 0x1e5
 80008b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 80008b6:	4b3d      	ldr	r3, [pc, #244]	@ (80009ac <MX_LTDC_Init+0x15c>)
 80008b8:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80008bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 80008be:	4b3b      	ldr	r3, [pc, #236]	@ (80009ac <MX_LTDC_Init+0x15c>)
 80008c0:	f240 12e7 	movw	r2, #487	@ 0x1e7
 80008c4:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80008c6:	4b39      	ldr	r3, [pc, #228]	@ (80009ac <MX_LTDC_Init+0x15c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80008ce:	4b37      	ldr	r3, [pc, #220]	@ (80009ac <MX_LTDC_Init+0x15c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80008d6:	4b35      	ldr	r3, [pc, #212]	@ (80009ac <MX_LTDC_Init+0x15c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80008de:	4833      	ldr	r0, [pc, #204]	@ (80009ac <MX_LTDC_Init+0x15c>)
 80008e0:	f002 f9c8 	bl	8002c74 <HAL_LTDC_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80008ea:	f000 fcaf 	bl	800124c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80008fe:	2300      	movs	r3, #0
 8000900:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8000902:	2300      	movs	r3, #0
 8000904:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800090a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800090e:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000910:	2305      	movs	r3, #5
 8000912:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000932:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000936:	2200      	movs	r2, #0
 8000938:	4619      	mov	r1, r3
 800093a:	481c      	ldr	r0, [pc, #112]	@ (80009ac <MX_LTDC_Init+0x15c>)
 800093c:	f002 fa6a 	bl	8002e14 <HAL_LTDC_ConfigLayer>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8000946:	f000 fc81 	bl	800124c <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000962:	2300      	movs	r3, #0
 8000964:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000966:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800096a:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800096c:	2305      	movs	r3, #5
 800096e:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800098e:	463b      	mov	r3, r7
 8000990:	2201      	movs	r2, #1
 8000992:	4619      	mov	r1, r3
 8000994:	4805      	ldr	r0, [pc, #20]	@ (80009ac <MX_LTDC_Init+0x15c>)
 8000996:	f002 fa3d 	bl	8002e14 <HAL_LTDC_ConfigLayer>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80009a0:	f000 fc54 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80009a4:	bf00      	nop
 80009a6:	3768      	adds	r7, #104	@ 0x68
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000068 	.word	0x20000068
 80009b0:	40016800 	.word	0x40016800

080009b4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	@ (80009ec <MX_SDMMC1_SD_Init+0x38>)
 80009ba:	4a0d      	ldr	r2, [pc, #52]	@ (80009f0 <MX_SDMMC1_SD_Init+0x3c>)
 80009bc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80009be:	4b0b      	ldr	r3, [pc, #44]	@ (80009ec <MX_SDMMC1_SD_Init+0x38>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80009c4:	4b09      	ldr	r3, [pc, #36]	@ (80009ec <MX_SDMMC1_SD_Init+0x38>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80009ca:	4b08      	ldr	r3, [pc, #32]	@ (80009ec <MX_SDMMC1_SD_Init+0x38>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80009d0:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <MX_SDMMC1_SD_Init+0x38>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80009d6:	4b05      	ldr	r3, [pc, #20]	@ (80009ec <MX_SDMMC1_SD_Init+0x38>)
 80009d8:	2200      	movs	r2, #0
 80009da:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80009dc:	4b03      	ldr	r3, [pc, #12]	@ (80009ec <MX_SDMMC1_SD_Init+0x38>)
 80009de:	2200      	movs	r2, #0
 80009e0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	20000110 	.word	0x20000110
 80009f0:	40012c00 	.word	0x40012c00

080009f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009fa:	4b10      	ldr	r3, [pc, #64]	@ (8000a3c <MX_DMA_Init+0x48>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	4a0f      	ldr	r2, [pc, #60]	@ (8000a3c <MX_DMA_Init+0x48>)
 8000a00:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a06:	4b0d      	ldr	r3, [pc, #52]	@ (8000a3c <MX_DMA_Init+0x48>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2100      	movs	r1, #0
 8000a16:	203b      	movs	r0, #59	@ 0x3b
 8000a18:	f001 f8e5 	bl	8001be6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000a1c:	203b      	movs	r0, #59	@ 0x3b
 8000a1e:	f001 f8fe 	bl	8001c1e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	2045      	movs	r0, #69	@ 0x45
 8000a28:	f001 f8dd 	bl	8001be6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000a2c:	2045      	movs	r0, #69	@ 0x45
 8000a2e:	f001 f8f6 	bl	8001c1e <HAL_NVIC_EnableIRQ>

}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800

08000a40 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b088      	sub	sp, #32
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
 8000a54:	615a      	str	r2, [r3, #20]
 8000a56:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000a58:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad8 <MX_FMC_Init+0x98>)
 8000a5a:	4a20      	ldr	r2, [pc, #128]	@ (8000adc <MX_FMC_Init+0x9c>)
 8000a5c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad8 <MX_FMC_Init+0x98>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000a64:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad8 <MX_FMC_Init+0x98>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad8 <MX_FMC_Init+0x98>)
 8000a6c:	2204      	movs	r2, #4
 8000a6e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000a70:	4b19      	ldr	r3, [pc, #100]	@ (8000ad8 <MX_FMC_Init+0x98>)
 8000a72:	2210      	movs	r2, #16
 8000a74:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a76:	4b18      	ldr	r3, [pc, #96]	@ (8000ad8 <MX_FMC_Init+0x98>)
 8000a78:	2240      	movs	r2, #64	@ 0x40
 8000a7a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000a7c:	4b16      	ldr	r3, [pc, #88]	@ (8000ad8 <MX_FMC_Init+0x98>)
 8000a7e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000a82:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a84:	4b14      	ldr	r3, [pc, #80]	@ (8000ad8 <MX_FMC_Init+0x98>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000a8a:	4b13      	ldr	r3, [pc, #76]	@ (8000ad8 <MX_FMC_Init+0x98>)
 8000a8c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a90:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000a92:	4b11      	ldr	r3, [pc, #68]	@ (8000ad8 <MX_FMC_Init+0x98>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000a98:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad8 <MX_FMC_Init+0x98>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000aa2:	2307      	movs	r3, #7
 8000aa4:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000aa6:	2304      	movs	r3, #4
 8000aa8:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000aaa:	2307      	movs	r3, #7
 8000aac:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	4619      	mov	r1, r3
 8000abe:	4806      	ldr	r0, [pc, #24]	@ (8000ad8 <MX_FMC_Init+0x98>)
 8000ac0:	f004 fcee 	bl	80054a0 <HAL_SDRAM_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_FMC_Init+0x8e>
  {
    Error_Handler( );
 8000aca:	f000 fbbf 	bl	800124c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000ace:	bf00      	nop
 8000ad0:	3720      	adds	r7, #32
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000254 	.word	0x20000254
 8000adc:	a0000140 	.word	0xa0000140

08000ae0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b090      	sub	sp, #64	@ 0x40
 8000ae4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
 8000af4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000af6:	4bad      	ldr	r3, [pc, #692]	@ (8000dac <MX_GPIO_Init+0x2cc>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	4aac      	ldr	r2, [pc, #688]	@ (8000dac <MX_GPIO_Init+0x2cc>)
 8000afc:	f043 0310 	orr.w	r3, r3, #16
 8000b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b02:	4baa      	ldr	r3, [pc, #680]	@ (8000dac <MX_GPIO_Init+0x2cc>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	f003 0310 	and.w	r3, r3, #16
 8000b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b0e:	4ba7      	ldr	r3, [pc, #668]	@ (8000dac <MX_GPIO_Init+0x2cc>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	4aa6      	ldr	r2, [pc, #664]	@ (8000dac <MX_GPIO_Init+0x2cc>)
 8000b14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1a:	4ba4      	ldr	r3, [pc, #656]	@ (8000dac <MX_GPIO_Init+0x2cc>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b22:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b26:	4ba1      	ldr	r3, [pc, #644]	@ (8000dac <MX_GPIO_Init+0x2cc>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	4aa0      	ldr	r2, [pc, #640]	@ (8000dac <MX_GPIO_Init+0x2cc>)
 8000b2c:	f043 0302 	orr.w	r3, r3, #2
 8000b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b32:	4b9e      	ldr	r3, [pc, #632]	@ (8000dac <MX_GPIO_Init+0x2cc>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	f003 0302 	and.w	r3, r3, #2
 8000b3a:	623b      	str	r3, [r7, #32]
 8000b3c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b3e:	4b9b      	ldr	r3, [pc, #620]	@ (8000dac <MX_GPIO_Init+0x2cc>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b42:	4a9a      	ldr	r2, [pc, #616]	@ (8000dac <MX_GPIO_Init+0x2cc>)
 8000b44:	f043 0308 	orr.w	r3, r3, #8
 8000b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4a:	4b98      	ldr	r3, [pc, #608]	@ (8000dac <MX_GPIO_Init+0x2cc>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	f003 0308 	and.w	r3, r3, #8
 8000b52:	61fb      	str	r3, [r7, #28]
 8000b54:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b56:	4b95      	ldr	r3, [pc, #596]	@ (8000dac <MX_GPIO_Init+0x2cc>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5a:	4a94      	ldr	r2, [pc, #592]	@ (8000dac <MX_GPIO_Init+0x2cc>)
 8000b5c:	f043 0304 	orr.w	r3, r3, #4
 8000b60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b62:	4b92      	ldr	r3, [pc, #584]	@ (8000dac <MX_GPIO_Init+0x2cc>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	f003 0304 	and.w	r3, r3, #4
 8000b6a:	61bb      	str	r3, [r7, #24]
 8000b6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6e:	4b8f      	ldr	r3, [pc, #572]	@ (8000dac <MX_GPIO_Init+0x2cc>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	4a8e      	ldr	r2, [pc, #568]	@ (8000dac <MX_GPIO_Init+0x2cc>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7a:	4b8c      	ldr	r3, [pc, #560]	@ (8000dac <MX_GPIO_Init+0x2cc>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b86:	4b89      	ldr	r3, [pc, #548]	@ (8000dac <MX_GPIO_Init+0x2cc>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	4a88      	ldr	r2, [pc, #544]	@ (8000dac <MX_GPIO_Init+0x2cc>)
 8000b8c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b92:	4b86      	ldr	r3, [pc, #536]	@ (8000dac <MX_GPIO_Init+0x2cc>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000b9e:	4b83      	ldr	r3, [pc, #524]	@ (8000dac <MX_GPIO_Init+0x2cc>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	4a82      	ldr	r2, [pc, #520]	@ (8000dac <MX_GPIO_Init+0x2cc>)
 8000ba4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000baa:	4b80      	ldr	r3, [pc, #512]	@ (8000dac <MX_GPIO_Init+0x2cc>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000bb6:	4b7d      	ldr	r3, [pc, #500]	@ (8000dac <MX_GPIO_Init+0x2cc>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	4a7c      	ldr	r2, [pc, #496]	@ (8000dac <MX_GPIO_Init+0x2cc>)
 8000bbc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc2:	4b7a      	ldr	r3, [pc, #488]	@ (8000dac <MX_GPIO_Init+0x2cc>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bce:	4b77      	ldr	r3, [pc, #476]	@ (8000dac <MX_GPIO_Init+0x2cc>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	4a76      	ldr	r2, [pc, #472]	@ (8000dac <MX_GPIO_Init+0x2cc>)
 8000bd4:	f043 0320 	orr.w	r3, r3, #32
 8000bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bda:	4b74      	ldr	r3, [pc, #464]	@ (8000dac <MX_GPIO_Init+0x2cc>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	f003 0320 	and.w	r3, r3, #32
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000be6:	4b71      	ldr	r3, [pc, #452]	@ (8000dac <MX_GPIO_Init+0x2cc>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bea:	4a70      	ldr	r2, [pc, #448]	@ (8000dac <MX_GPIO_Init+0x2cc>)
 8000bec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf2:	4b6e      	ldr	r3, [pc, #440]	@ (8000dac <MX_GPIO_Init+0x2cc>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bfa:	603b      	str	r3, [r7, #0]
 8000bfc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000bfe:	2201      	movs	r2, #1
 8000c00:	2120      	movs	r1, #32
 8000c02:	486b      	ldr	r0, [pc, #428]	@ (8000db0 <MX_GPIO_Init+0x2d0>)
 8000c04:	f002 f81c 	bl	8002c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f241 010c 	movw	r1, #4108	@ 0x100c
 8000c0e:	4869      	ldr	r0, [pc, #420]	@ (8000db4 <MX_GPIO_Init+0x2d4>)
 8000c10:	f002 f816 	bl	8002c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2108      	movs	r1, #8
 8000c18:	4867      	ldr	r0, [pc, #412]	@ (8000db8 <MX_GPIO_Init+0x2d8>)
 8000c1a:	f002 f811 	bl	8002c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c24:	4865      	ldr	r0, [pc, #404]	@ (8000dbc <MX_GPIO_Init+0x2dc>)
 8000c26:	f002 f80b 	bl	8002c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	21c8      	movs	r1, #200	@ 0xc8
 8000c2e:	4864      	ldr	r0, [pc, #400]	@ (8000dc0 <MX_GPIO_Init+0x2e0>)
 8000c30:	f002 f806 	bl	8002c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000c34:	2308      	movs	r3, #8
 8000c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c44:	4619      	mov	r1, r3
 8000c46:	485f      	ldr	r0, [pc, #380]	@ (8000dc4 <MX_GPIO_Init+0x2e4>)
 8000c48:	f001 fe36 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000c4c:	2304      	movs	r3, #4
 8000c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000c5c:	2309      	movs	r3, #9
 8000c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000c60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c64:	4619      	mov	r1, r3
 8000c66:	4857      	ldr	r0, [pc, #348]	@ (8000dc4 <MX_GPIO_Init+0x2e4>)
 8000c68:	f001 fe26 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000c6c:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8000c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c7e:	230b      	movs	r3, #11
 8000c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c86:	4619      	mov	r1, r3
 8000c88:	484d      	ldr	r0, [pc, #308]	@ (8000dc0 <MX_GPIO_Init+0x2e0>)
 8000c8a:	f001 fe15 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000c8e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c94:	2312      	movs	r3, #18
 8000c96:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ca0:	2304      	movs	r3, #4
 8000ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4847      	ldr	r0, [pc, #284]	@ (8000dc8 <MX_GPIO_Init+0x2e8>)
 8000cac:	f001 fe04 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000cb0:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8000cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000cc2:	230a      	movs	r3, #10
 8000cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cca:	4619      	mov	r1, r3
 8000ccc:	483e      	ldr	r0, [pc, #248]	@ (8000dc8 <MX_GPIO_Init+0x2e8>)
 8000cce:	f001 fdf3 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000cd2:	2310      	movs	r3, #16
 8000cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000ce6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cea:	4619      	mov	r1, r3
 8000cec:	4836      	ldr	r0, [pc, #216]	@ (8000dc8 <MX_GPIO_Init+0x2e8>)
 8000cee:	f001 fde3 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000cf2:	2380      	movs	r3, #128	@ 0x80
 8000cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000d02:	2308      	movs	r3, #8
 8000d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000d06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4828      	ldr	r0, [pc, #160]	@ (8000db0 <MX_GPIO_Init+0x2d0>)
 8000d0e:	f001 fdd3 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000d12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d24:	2301      	movs	r3, #1
 8000d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000d28:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4827      	ldr	r0, [pc, #156]	@ (8000dcc <MX_GPIO_Init+0x2ec>)
 8000d30:	f001 fdc2 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000d34:	2360      	movs	r3, #96	@ 0x60
 8000d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d40:	2300      	movs	r3, #0
 8000d42:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d44:	230d      	movs	r3, #13
 8000d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	481d      	ldr	r0, [pc, #116]	@ (8000dc4 <MX_GPIO_Init+0x2e4>)
 8000d50:	f001 fdb2 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000d54:	2380      	movs	r3, #128	@ 0x80
 8000d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2300      	movs	r3, #0
 8000d62:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d64:	2307      	movs	r3, #7
 8000d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000d68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4816      	ldr	r0, [pc, #88]	@ (8000dc8 <MX_GPIO_Init+0x2e8>)
 8000d70:	f001 fda2 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000d74:	2340      	movs	r3, #64	@ 0x40
 8000d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d80:	2303      	movs	r3, #3
 8000d82:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000d84:	230a      	movs	r3, #10
 8000d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000d88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	480e      	ldr	r0, [pc, #56]	@ (8000dc8 <MX_GPIO_Init+0x2e8>)
 8000d90:	f001 fd92 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000d94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000da2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000da6:	4619      	mov	r1, r3
 8000da8:	e012      	b.n	8000dd0 <MX_GPIO_Init+0x2f0>
 8000daa:	bf00      	nop
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40020c00 	.word	0x40020c00
 8000db4:	40022000 	.word	0x40022000
 8000db8:	40022800 	.word	0x40022800
 8000dbc:	40021c00 	.word	0x40021c00
 8000dc0:	40021800 	.word	0x40021800
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	40020400 	.word	0x40020400
 8000dcc:	40020000 	.word	0x40020000
 8000dd0:	48bc      	ldr	r0, [pc, #752]	@ (80010c4 <MX_GPIO_Init+0x5e4>)
 8000dd2:	f001 fd71 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000dd6:	2340      	movs	r3, #64	@ 0x40
 8000dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000dda:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000dde:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000de4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000de8:	4619      	mov	r1, r3
 8000dea:	48b7      	ldr	r0, [pc, #732]	@ (80010c8 <MX_GPIO_Init+0x5e8>)
 8000dec:	f001 fd64 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000df0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	2302      	movs	r3, #2
 8000df8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e02:	230a      	movs	r3, #10
 8000e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	48af      	ldr	r0, [pc, #700]	@ (80010cc <MX_GPIO_Init+0x5ec>)
 8000e0e:	f001 fd53 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000e12:	23f0      	movs	r3, #240	@ 0xf0
 8000e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e16:	2302      	movs	r3, #2
 8000e18:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000e22:	230a      	movs	r3, #10
 8000e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	48a8      	ldr	r0, [pc, #672]	@ (80010d0 <MX_GPIO_Init+0x5f0>)
 8000e2e:	f001 fd43 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000e32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	2300      	movs	r3, #0
 8000e42:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000e44:	230a      	movs	r3, #10
 8000e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000e48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	48a1      	ldr	r0, [pc, #644]	@ (80010d4 <MX_GPIO_Init+0x5f4>)
 8000e50:	f001 fd32 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000e54:	2320      	movs	r3, #32
 8000e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	2300      	movs	r3, #0
 8000e62:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4897      	ldr	r0, [pc, #604]	@ (80010c8 <MX_GPIO_Init+0x5e8>)
 8000e6c:	f001 fd24 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000e70:	2308      	movs	r3, #8
 8000e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e74:	2302      	movs	r3, #2
 8000e76:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e80:	230d      	movs	r3, #13
 8000e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000e84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e88:	4619      	mov	r1, r3
 8000e8a:	488f      	ldr	r0, [pc, #572]	@ (80010c8 <MX_GPIO_Init+0x5e8>)
 8000e8c:	f001 fd14 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000e90:	f241 030c 	movw	r3, #4108	@ 0x100c
 8000e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e96:	2301      	movs	r3, #1
 8000e98:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ea2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4889      	ldr	r0, [pc, #548]	@ (80010d0 <MX_GPIO_Init+0x5f0>)
 8000eaa:	f001 fd05 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000eae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000ebc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4885      	ldr	r0, [pc, #532]	@ (80010d8 <MX_GPIO_Init+0x5f8>)
 8000ec4:	f001 fcf8 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000ec8:	2308      	movs	r3, #8
 8000eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000ed8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000edc:	4619      	mov	r1, r3
 8000ede:	487f      	ldr	r0, [pc, #508]	@ (80010dc <MX_GPIO_Init+0x5fc>)
 8000ee0:	f001 fcea 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000ee4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eea:	2302      	movs	r3, #2
 8000eec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ef6:	230d      	movs	r3, #13
 8000ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000efa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000efe:	4619      	mov	r1, r3
 8000f00:	4874      	ldr	r0, [pc, #464]	@ (80010d4 <MX_GPIO_Init+0x5f4>)
 8000f02:	f001 fcd9 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000f06:	2310      	movs	r3, #16
 8000f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f12:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f16:	4619      	mov	r1, r3
 8000f18:	486b      	ldr	r0, [pc, #428]	@ (80010c8 <MX_GPIO_Init+0x5e8>)
 8000f1a:	f001 fccd 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000f1e:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f24:	2300      	movs	r3, #0
 8000f26:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f2c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f30:	4619      	mov	r1, r3
 8000f32:	486b      	ldr	r0, [pc, #428]	@ (80010e0 <MX_GPIO_Init+0x600>)
 8000f34:	f001 fcc0 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f44:	2300      	movs	r3, #0
 8000f46:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f48:	2305      	movs	r3, #5
 8000f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8000f4c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f50:	4619      	mov	r1, r3
 8000f52:	485f      	ldr	r0, [pc, #380]	@ (80010d0 <MX_GPIO_Init+0x5f0>)
 8000f54:	f001 fcb0 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000f58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000f6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f6e:	4619      	mov	r1, r3
 8000f70:	485b      	ldr	r0, [pc, #364]	@ (80010e0 <MX_GPIO_Init+0x600>)
 8000f72:	f001 fca1 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000f76:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8000f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f84:	2300      	movs	r3, #0
 8000f86:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000f88:	230d      	movs	r3, #13
 8000f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f90:	4619      	mov	r1, r3
 8000f92:	4853      	ldr	r0, [pc, #332]	@ (80010e0 <MX_GPIO_Init+0x600>)
 8000f94:	f001 fc90 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000fac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4847      	ldr	r0, [pc, #284]	@ (80010d0 <MX_GPIO_Init+0x5f0>)
 8000fb4:	f001 fc80 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000fb8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fca:	2307      	movs	r3, #7
 8000fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000fce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	483d      	ldr	r0, [pc, #244]	@ (80010cc <MX_GPIO_Init+0x5ec>)
 8000fd6:	f001 fc6f 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000fda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000fec:	2301      	movs	r3, #1
 8000fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000ff0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4835      	ldr	r0, [pc, #212]	@ (80010cc <MX_GPIO_Init+0x5ec>)
 8000ff8:	f001 fc5e 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000ffc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001000:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001002:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001006:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800100c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001010:	4619      	mov	r1, r3
 8001012:	482f      	ldr	r0, [pc, #188]	@ (80010d0 <MX_GPIO_Init+0x5f0>)
 8001014:	f001 fc50 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8001018:	23c0      	movs	r3, #192	@ 0xc0
 800101a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001024:	2303      	movs	r3, #3
 8001026:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001028:	2308      	movs	r3, #8
 800102a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800102c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001030:	4619      	mov	r1, r3
 8001032:	4829      	ldr	r0, [pc, #164]	@ (80010d8 <MX_GPIO_Init+0x5f8>)
 8001034:	f001 fc40 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001038:	2310      	movs	r3, #16
 800103a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103c:	2302      	movs	r3, #2
 800103e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001044:	2303      	movs	r3, #3
 8001046:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001048:	230a      	movs	r3, #10
 800104a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800104c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001050:	4619      	mov	r1, r3
 8001052:	4823      	ldr	r0, [pc, #140]	@ (80010e0 <MX_GPIO_Init+0x600>)
 8001054:	f001 fc30 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001058:	23c8      	movs	r3, #200	@ 0xc8
 800105a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105c:	2301      	movs	r3, #1
 800105e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001064:	2300      	movs	r3, #0
 8001066:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001068:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800106c:	4619      	mov	r1, r3
 800106e:	4819      	ldr	r0, [pc, #100]	@ (80010d4 <MX_GPIO_Init+0x5f4>)
 8001070:	f001 fc22 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001074:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8001078:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800107a:	2303      	movs	r3, #3
 800107c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001082:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001086:	4619      	mov	r1, r3
 8001088:	4816      	ldr	r0, [pc, #88]	@ (80010e4 <MX_GPIO_Init+0x604>)
 800108a:	f001 fc15 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800108e:	2305      	movs	r3, #5
 8001090:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109a:	2303      	movs	r3, #3
 800109c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800109e:	230a      	movs	r3, #10
 80010a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010a6:	4619      	mov	r1, r3
 80010a8:	480b      	ldr	r0, [pc, #44]	@ (80010d8 <MX_GPIO_Init+0x5f8>)
 80010aa:	f001 fc05 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80010ae:	2332      	movs	r3, #50	@ 0x32
 80010b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ba:	2303      	movs	r3, #3
 80010bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010be:	230b      	movs	r3, #11
 80010c0:	e012      	b.n	80010e8 <MX_GPIO_Init+0x608>
 80010c2:	bf00      	nop
 80010c4:	40022400 	.word	0x40022400
 80010c8:	40020c00 	.word	0x40020c00
 80010cc:	40020000 	.word	0x40020000
 80010d0:	40022000 	.word	0x40022000
 80010d4:	40021800 	.word	0x40021800
 80010d8:	40020800 	.word	0x40020800
 80010dc:	40022800 	.word	0x40022800
 80010e0:	40021c00 	.word	0x40021c00
 80010e4:	40021400 	.word	0x40021400
 80010e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010ee:	4619      	mov	r1, r3
 80010f0:	4850      	ldr	r0, [pc, #320]	@ (8001234 <MX_GPIO_Init+0x754>)
 80010f2:	f001 fbe1 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010f6:	2304      	movs	r3, #4
 80010f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001102:	2303      	movs	r3, #3
 8001104:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001106:	2309      	movs	r3, #9
 8001108:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800110e:	4619      	mov	r1, r3
 8001110:	4849      	ldr	r0, [pc, #292]	@ (8001238 <MX_GPIO_Init+0x758>)
 8001112:	f001 fbd1 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001116:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800111a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	2302      	movs	r3, #2
 800111e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001124:	2303      	movs	r3, #3
 8001126:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001128:	2309      	movs	r3, #9
 800112a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800112c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001130:	4619      	mov	r1, r3
 8001132:	4842      	ldr	r0, [pc, #264]	@ (800123c <MX_GPIO_Init+0x75c>)
 8001134:	f001 fbc0 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001138:	2304      	movs	r3, #4
 800113a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800113c:	2300      	movs	r3, #0
 800113e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001144:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001148:	4619      	mov	r1, r3
 800114a:	483d      	ldr	r0, [pc, #244]	@ (8001240 <MX_GPIO_Init+0x760>)
 800114c:	f001 fbb4 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001150:	2386      	movs	r3, #134	@ 0x86
 8001152:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001154:	2302      	movs	r3, #2
 8001156:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115c:	2303      	movs	r3, #3
 800115e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001160:	230b      	movs	r3, #11
 8001162:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001164:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001168:	4619      	mov	r1, r3
 800116a:	4836      	ldr	r0, [pc, #216]	@ (8001244 <MX_GPIO_Init+0x764>)
 800116c:	f001 fba4 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001170:	2301      	movs	r3, #1
 8001172:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001174:	2303      	movs	r3, #3
 8001176:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800117c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001180:	4619      	mov	r1, r3
 8001182:	4830      	ldr	r0, [pc, #192]	@ (8001244 <MX_GPIO_Init+0x764>)
 8001184:	f001 fb98 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001188:	2350      	movs	r3, #80	@ 0x50
 800118a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118c:	2302      	movs	r3, #2
 800118e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001194:	2300      	movs	r3, #0
 8001196:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001198:	230d      	movs	r3, #13
 800119a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011a0:	4619      	mov	r1, r3
 80011a2:	4828      	ldr	r0, [pc, #160]	@ (8001244 <MX_GPIO_Init+0x764>)
 80011a4:	f001 fb88 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80011a8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80011ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ae:	2312      	movs	r3, #18
 80011b0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b6:	2303      	movs	r3, #3
 80011b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80011ba:	2304      	movs	r3, #4
 80011bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80011be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011c2:	4619      	mov	r1, r3
 80011c4:	4820      	ldr	r0, [pc, #128]	@ (8001248 <MX_GPIO_Init+0x768>)
 80011c6:	f001 fb77 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80011ca:	2328      	movs	r3, #40	@ 0x28
 80011cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ce:	2302      	movs	r3, #2
 80011d0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d6:	2303      	movs	r3, #3
 80011d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80011da:	230a      	movs	r3, #10
 80011dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011e2:	4619      	mov	r1, r3
 80011e4:	4817      	ldr	r0, [pc, #92]	@ (8001244 <MX_GPIO_Init+0x764>)
 80011e6:	f001 fb67 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80011ea:	2340      	movs	r3, #64	@ 0x40
 80011ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ee:	2302      	movs	r3, #2
 80011f0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	2300      	movs	r3, #0
 80011f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80011fa:	2309      	movs	r3, #9
 80011fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80011fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001202:	4619      	mov	r1, r3
 8001204:	4810      	ldr	r0, [pc, #64]	@ (8001248 <MX_GPIO_Init+0x768>)
 8001206:	f001 fb57 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800120a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800120e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001210:	2302      	movs	r3, #2
 8001212:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2300      	movs	r3, #0
 800121a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800121c:	2305      	movs	r3, #5
 800121e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001220:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001224:	4619      	mov	r1, r3
 8001226:	4804      	ldr	r0, [pc, #16]	@ (8001238 <MX_GPIO_Init+0x758>)
 8001228:	f001 fb46 	bl	80028b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800122c:	bf00      	nop
 800122e:	3740      	adds	r7, #64	@ 0x40
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40020800 	.word	0x40020800
 8001238:	40020400 	.word	0x40020400
 800123c:	40020c00 	.word	0x40020c00
 8001240:	40021800 	.word	0x40021800
 8001244:	40020000 	.word	0x40020000
 8001248:	40021c00 	.word	0x40021c00

0800124c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001250:	b672      	cpsid	i
}
 8001252:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001254:	bf00      	nop
 8001256:	e7fd      	b.n	8001254 <Error_Handler+0x8>

08001258 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800125e:	4b0f      	ldr	r3, [pc, #60]	@ (800129c <HAL_MspInit+0x44>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001262:	4a0e      	ldr	r2, [pc, #56]	@ (800129c <HAL_MspInit+0x44>)
 8001264:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001268:	6413      	str	r3, [r2, #64]	@ 0x40
 800126a:	4b0c      	ldr	r3, [pc, #48]	@ (800129c <HAL_MspInit+0x44>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001276:	4b09      	ldr	r3, [pc, #36]	@ (800129c <HAL_MspInit+0x44>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127a:	4a08      	ldr	r2, [pc, #32]	@ (800129c <HAL_MspInit+0x44>)
 800127c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001280:	6453      	str	r3, [r2, #68]	@ 0x44
 8001282:	4b06      	ldr	r3, [pc, #24]	@ (800129c <HAL_MspInit+0x44>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001286:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800128a:	603b      	str	r3, [r7, #0]
 800128c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	40023800 	.word	0x40023800

080012a0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a0a      	ldr	r2, [pc, #40]	@ (80012d8 <HAL_DMA2D_MspInit+0x38>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d10b      	bne.n	80012ca <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80012b2:	4b0a      	ldr	r3, [pc, #40]	@ (80012dc <HAL_DMA2D_MspInit+0x3c>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	4a09      	ldr	r2, [pc, #36]	@ (80012dc <HAL_DMA2D_MspInit+0x3c>)
 80012b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80012bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012be:	4b07      	ldr	r3, [pc, #28]	@ (80012dc <HAL_DMA2D_MspInit+0x3c>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 80012ca:	bf00      	nop
 80012cc:	3714      	adds	r7, #20
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	4002b000 	.word	0x4002b000
 80012dc:	40023800 	.word	0x40023800

080012e0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b0ae      	sub	sp, #184	@ 0xb8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012f8:	f107 0320 	add.w	r3, r7, #32
 80012fc:	2284      	movs	r2, #132	@ 0x84
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f005 fe1e 	bl	8006f42 <memset>
  if(hltdc->Instance==LTDC)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a6a      	ldr	r2, [pc, #424]	@ (80014b4 <HAL_LTDC_MspInit+0x1d4>)
 800130c:	4293      	cmp	r3, r2
 800130e:	f040 80cc 	bne.w	80014aa <HAL_LTDC_MspInit+0x1ca>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001312:	2308      	movs	r3, #8
 8001314:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001316:	2332      	movs	r3, #50	@ 0x32
 8001318:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800131a:	2302      	movs	r3, #2
 800131c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800131e:	2302      	movs	r3, #2
 8001320:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001322:	2300      	movs	r3, #0
 8001324:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001326:	2301      	movs	r3, #1
 8001328:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800132a:	2300      	movs	r3, #0
 800132c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800132e:	f107 0320 	add.w	r3, r7, #32
 8001332:	4618      	mov	r0, r3
 8001334:	f002 fb9c 	bl	8003a70 <HAL_RCCEx_PeriphCLKConfig>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <HAL_LTDC_MspInit+0x62>
    {
      Error_Handler();
 800133e:	f7ff ff85 	bl	800124c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001342:	4b5d      	ldr	r3, [pc, #372]	@ (80014b8 <HAL_LTDC_MspInit+0x1d8>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001346:	4a5c      	ldr	r2, [pc, #368]	@ (80014b8 <HAL_LTDC_MspInit+0x1d8>)
 8001348:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800134c:	6453      	str	r3, [r2, #68]	@ 0x44
 800134e:	4b5a      	ldr	r3, [pc, #360]	@ (80014b8 <HAL_LTDC_MspInit+0x1d8>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001352:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001356:	61fb      	str	r3, [r7, #28]
 8001358:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800135a:	4b57      	ldr	r3, [pc, #348]	@ (80014b8 <HAL_LTDC_MspInit+0x1d8>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	4a56      	ldr	r2, [pc, #344]	@ (80014b8 <HAL_LTDC_MspInit+0x1d8>)
 8001360:	f043 0310 	orr.w	r3, r3, #16
 8001364:	6313      	str	r3, [r2, #48]	@ 0x30
 8001366:	4b54      	ldr	r3, [pc, #336]	@ (80014b8 <HAL_LTDC_MspInit+0x1d8>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	f003 0310 	and.w	r3, r3, #16
 800136e:	61bb      	str	r3, [r7, #24]
 8001370:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001372:	4b51      	ldr	r3, [pc, #324]	@ (80014b8 <HAL_LTDC_MspInit+0x1d8>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	4a50      	ldr	r2, [pc, #320]	@ (80014b8 <HAL_LTDC_MspInit+0x1d8>)
 8001378:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800137c:	6313      	str	r3, [r2, #48]	@ 0x30
 800137e:	4b4e      	ldr	r3, [pc, #312]	@ (80014b8 <HAL_LTDC_MspInit+0x1d8>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001386:	617b      	str	r3, [r7, #20]
 8001388:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800138a:	4b4b      	ldr	r3, [pc, #300]	@ (80014b8 <HAL_LTDC_MspInit+0x1d8>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138e:	4a4a      	ldr	r2, [pc, #296]	@ (80014b8 <HAL_LTDC_MspInit+0x1d8>)
 8001390:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001394:	6313      	str	r3, [r2, #48]	@ 0x30
 8001396:	4b48      	ldr	r3, [pc, #288]	@ (80014b8 <HAL_LTDC_MspInit+0x1d8>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800139e:	613b      	str	r3, [r7, #16]
 80013a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80013a2:	4b45      	ldr	r3, [pc, #276]	@ (80014b8 <HAL_LTDC_MspInit+0x1d8>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	4a44      	ldr	r2, [pc, #272]	@ (80014b8 <HAL_LTDC_MspInit+0x1d8>)
 80013a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ae:	4b42      	ldr	r3, [pc, #264]	@ (80014b8 <HAL_LTDC_MspInit+0x1d8>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80013ba:	4b3f      	ldr	r3, [pc, #252]	@ (80014b8 <HAL_LTDC_MspInit+0x1d8>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	4a3e      	ldr	r2, [pc, #248]	@ (80014b8 <HAL_LTDC_MspInit+0x1d8>)
 80013c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c6:	4b3c      	ldr	r3, [pc, #240]	@ (80014b8 <HAL_LTDC_MspInit+0x1d8>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80013d2:	2310      	movs	r3, #16
 80013d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d8:	2302      	movs	r3, #2
 80013da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e4:	2300      	movs	r3, #0
 80013e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013ea:	230e      	movs	r3, #14
 80013ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80013f0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80013f4:	4619      	mov	r1, r3
 80013f6:	4831      	ldr	r0, [pc, #196]	@ (80014bc <HAL_LTDC_MspInit+0x1dc>)
 80013f8:	f001 fa5e 	bl	80028b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80013fc:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8001400:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001404:	2302      	movs	r3, #2
 8001406:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001410:	2300      	movs	r3, #0
 8001412:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001416:	230e      	movs	r3, #14
 8001418:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800141c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001420:	4619      	mov	r1, r3
 8001422:	4827      	ldr	r0, [pc, #156]	@ (80014c0 <HAL_LTDC_MspInit+0x1e0>)
 8001424:	f001 fa48 	bl	80028b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001428:	23f7      	movs	r3, #247	@ 0xf7
 800142a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	2302      	movs	r3, #2
 8001430:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143a:	2300      	movs	r3, #0
 800143c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001440:	230e      	movs	r3, #14
 8001442:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001446:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800144a:	4619      	mov	r1, r3
 800144c:	481d      	ldr	r0, [pc, #116]	@ (80014c4 <HAL_LTDC_MspInit+0x1e4>)
 800144e:	f001 fa33 	bl	80028b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001452:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001456:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001466:	2300      	movs	r3, #0
 8001468:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800146c:	2309      	movs	r3, #9
 800146e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001472:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001476:	4619      	mov	r1, r3
 8001478:	4813      	ldr	r0, [pc, #76]	@ (80014c8 <HAL_LTDC_MspInit+0x1e8>)
 800147a:	f001 fa1d 	bl	80028b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800147e:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8001482:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	2302      	movs	r3, #2
 8001488:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	2300      	movs	r3, #0
 8001494:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001498:	230e      	movs	r3, #14
 800149a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800149e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80014a2:	4619      	mov	r1, r3
 80014a4:	4809      	ldr	r0, [pc, #36]	@ (80014cc <HAL_LTDC_MspInit+0x1ec>)
 80014a6:	f001 fa07 	bl	80028b8 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80014aa:	bf00      	nop
 80014ac:	37b8      	adds	r7, #184	@ 0xb8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40016800 	.word	0x40016800
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40021000 	.word	0x40021000
 80014c0:	40022400 	.word	0x40022400
 80014c4:	40022800 	.word	0x40022800
 80014c8:	40021800 	.word	0x40021800
 80014cc:	40022000 	.word	0x40022000

080014d0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b0ac      	sub	sp, #176	@ 0xb0
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014e8:	f107 0318 	add.w	r3, r7, #24
 80014ec:	2284      	movs	r2, #132	@ 0x84
 80014ee:	2100      	movs	r1, #0
 80014f0:	4618      	mov	r0, r3
 80014f2:	f005 fd26 	bl	8006f42 <memset>
  if(hsd->Instance==SDMMC1)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a73      	ldr	r2, [pc, #460]	@ (80016c8 <HAL_SD_MspInit+0x1f8>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	f040 80de 	bne.w	80016be <HAL_SD_MspInit+0x1ee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001502:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8001506:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_SYSCLK;
 8001508:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800150c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001510:	f107 0318 	add.w	r3, r7, #24
 8001514:	4618      	mov	r0, r3
 8001516:	f002 faab 	bl	8003a70 <HAL_RCCEx_PeriphCLKConfig>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001520:	f7ff fe94 	bl	800124c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001524:	4b69      	ldr	r3, [pc, #420]	@ (80016cc <HAL_SD_MspInit+0x1fc>)
 8001526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001528:	4a68      	ldr	r2, [pc, #416]	@ (80016cc <HAL_SD_MspInit+0x1fc>)
 800152a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800152e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001530:	4b66      	ldr	r3, [pc, #408]	@ (80016cc <HAL_SD_MspInit+0x1fc>)
 8001532:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001534:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001538:	617b      	str	r3, [r7, #20]
 800153a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800153c:	4b63      	ldr	r3, [pc, #396]	@ (80016cc <HAL_SD_MspInit+0x1fc>)
 800153e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001540:	4a62      	ldr	r2, [pc, #392]	@ (80016cc <HAL_SD_MspInit+0x1fc>)
 8001542:	f043 0304 	orr.w	r3, r3, #4
 8001546:	6313      	str	r3, [r2, #48]	@ 0x30
 8001548:	4b60      	ldr	r3, [pc, #384]	@ (80016cc <HAL_SD_MspInit+0x1fc>)
 800154a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	613b      	str	r3, [r7, #16]
 8001552:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001554:	4b5d      	ldr	r3, [pc, #372]	@ (80016cc <HAL_SD_MspInit+0x1fc>)
 8001556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001558:	4a5c      	ldr	r2, [pc, #368]	@ (80016cc <HAL_SD_MspInit+0x1fc>)
 800155a:	f043 0308 	orr.w	r3, r3, #8
 800155e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001560:	4b5a      	ldr	r3, [pc, #360]	@ (80016cc <HAL_SD_MspInit+0x1fc>)
 8001562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001564:	f003 0308 	and.w	r3, r3, #8
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800156c:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001570:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001574:	2302      	movs	r3, #2
 8001576:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001580:	2303      	movs	r3, #3
 8001582:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001586:	230c      	movs	r3, #12
 8001588:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800158c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001590:	4619      	mov	r1, r3
 8001592:	484f      	ldr	r0, [pc, #316]	@ (80016d0 <HAL_SD_MspInit+0x200>)
 8001594:	f001 f990 	bl	80028b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8001598:	2304      	movs	r3, #4
 800159a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	2302      	movs	r3, #2
 80015a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015aa:	2303      	movs	r3, #3
 80015ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80015b0:	230c      	movs	r3, #12
 80015b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 80015b6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015ba:	4619      	mov	r1, r3
 80015bc:	4845      	ldr	r0, [pc, #276]	@ (80016d4 <HAL_SD_MspInit+0x204>)
 80015be:	f001 f97b 	bl	80028b8 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 80015c2:	4b45      	ldr	r3, [pc, #276]	@ (80016d8 <HAL_SD_MspInit+0x208>)
 80015c4:	4a45      	ldr	r2, [pc, #276]	@ (80016dc <HAL_SD_MspInit+0x20c>)
 80015c6:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80015c8:	4b43      	ldr	r3, [pc, #268]	@ (80016d8 <HAL_SD_MspInit+0x208>)
 80015ca:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80015ce:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015d0:	4b41      	ldr	r3, [pc, #260]	@ (80016d8 <HAL_SD_MspInit+0x208>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015d6:	4b40      	ldr	r3, [pc, #256]	@ (80016d8 <HAL_SD_MspInit+0x208>)
 80015d8:	2200      	movs	r2, #0
 80015da:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015dc:	4b3e      	ldr	r3, [pc, #248]	@ (80016d8 <HAL_SD_MspInit+0x208>)
 80015de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015e2:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015e4:	4b3c      	ldr	r3, [pc, #240]	@ (80016d8 <HAL_SD_MspInit+0x208>)
 80015e6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80015ea:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015ec:	4b3a      	ldr	r3, [pc, #232]	@ (80016d8 <HAL_SD_MspInit+0x208>)
 80015ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015f2:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 80015f4:	4b38      	ldr	r3, [pc, #224]	@ (80016d8 <HAL_SD_MspInit+0x208>)
 80015f6:	2220      	movs	r2, #32
 80015f8:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015fa:	4b37      	ldr	r3, [pc, #220]	@ (80016d8 <HAL_SD_MspInit+0x208>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001600:	4b35      	ldr	r3, [pc, #212]	@ (80016d8 <HAL_SD_MspInit+0x208>)
 8001602:	2204      	movs	r2, #4
 8001604:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001606:	4b34      	ldr	r3, [pc, #208]	@ (80016d8 <HAL_SD_MspInit+0x208>)
 8001608:	2203      	movs	r2, #3
 800160a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 800160c:	4b32      	ldr	r3, [pc, #200]	@ (80016d8 <HAL_SD_MspInit+0x208>)
 800160e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001612:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001614:	4b30      	ldr	r3, [pc, #192]	@ (80016d8 <HAL_SD_MspInit+0x208>)
 8001616:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800161a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 800161c:	482e      	ldr	r0, [pc, #184]	@ (80016d8 <HAL_SD_MspInit+0x208>)
 800161e:	f000 fb19 	bl	8001c54 <HAL_DMA_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <HAL_SD_MspInit+0x15c>
    {
      Error_Handler();
 8001628:	f7ff fe10 	bl	800124c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a2a      	ldr	r2, [pc, #168]	@ (80016d8 <HAL_SD_MspInit+0x208>)
 8001630:	641a      	str	r2, [r3, #64]	@ 0x40
 8001632:	4a29      	ldr	r2, [pc, #164]	@ (80016d8 <HAL_SD_MspInit+0x208>)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8001638:	4b29      	ldr	r3, [pc, #164]	@ (80016e0 <HAL_SD_MspInit+0x210>)
 800163a:	4a2a      	ldr	r2, [pc, #168]	@ (80016e4 <HAL_SD_MspInit+0x214>)
 800163c:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 800163e:	4b28      	ldr	r3, [pc, #160]	@ (80016e0 <HAL_SD_MspInit+0x210>)
 8001640:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001644:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001646:	4b26      	ldr	r3, [pc, #152]	@ (80016e0 <HAL_SD_MspInit+0x210>)
 8001648:	2240      	movs	r2, #64	@ 0x40
 800164a:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800164c:	4b24      	ldr	r3, [pc, #144]	@ (80016e0 <HAL_SD_MspInit+0x210>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001652:	4b23      	ldr	r3, [pc, #140]	@ (80016e0 <HAL_SD_MspInit+0x210>)
 8001654:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001658:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800165a:	4b21      	ldr	r3, [pc, #132]	@ (80016e0 <HAL_SD_MspInit+0x210>)
 800165c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001660:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001662:	4b1f      	ldr	r3, [pc, #124]	@ (80016e0 <HAL_SD_MspInit+0x210>)
 8001664:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001668:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 800166a:	4b1d      	ldr	r3, [pc, #116]	@ (80016e0 <HAL_SD_MspInit+0x210>)
 800166c:	2220      	movs	r2, #32
 800166e:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001670:	4b1b      	ldr	r3, [pc, #108]	@ (80016e0 <HAL_SD_MspInit+0x210>)
 8001672:	2200      	movs	r2, #0
 8001674:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001676:	4b1a      	ldr	r3, [pc, #104]	@ (80016e0 <HAL_SD_MspInit+0x210>)
 8001678:	2204      	movs	r2, #4
 800167a:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800167c:	4b18      	ldr	r3, [pc, #96]	@ (80016e0 <HAL_SD_MspInit+0x210>)
 800167e:	2203      	movs	r2, #3
 8001680:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001682:	4b17      	ldr	r3, [pc, #92]	@ (80016e0 <HAL_SD_MspInit+0x210>)
 8001684:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001688:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800168a:	4b15      	ldr	r3, [pc, #84]	@ (80016e0 <HAL_SD_MspInit+0x210>)
 800168c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001690:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8001692:	4813      	ldr	r0, [pc, #76]	@ (80016e0 <HAL_SD_MspInit+0x210>)
 8001694:	f000 fade 	bl	8001c54 <HAL_DMA_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_SD_MspInit+0x1d2>
    {
      Error_Handler();
 800169e:	f7ff fdd5 	bl	800124c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a0e      	ldr	r2, [pc, #56]	@ (80016e0 <HAL_SD_MspInit+0x210>)
 80016a6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80016a8:	4a0d      	ldr	r2, [pc, #52]	@ (80016e0 <HAL_SD_MspInit+0x210>)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2100      	movs	r1, #0
 80016b2:	2031      	movs	r0, #49	@ 0x31
 80016b4:	f000 fa97 	bl	8001be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80016b8:	2031      	movs	r0, #49	@ 0x31
 80016ba:	f000 fab0 	bl	8001c1e <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 80016be:	bf00      	nop
 80016c0:	37b0      	adds	r7, #176	@ 0xb0
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40012c00 	.word	0x40012c00
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40020800 	.word	0x40020800
 80016d4:	40020c00 	.word	0x40020c00
 80016d8:	20000194 	.word	0x20000194
 80016dc:	40026458 	.word	0x40026458
 80016e0:	200001f4 	.word	0x200001f4
 80016e4:	400264a0 	.word	0x400264a0

080016e8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80016ee:	1d3b      	adds	r3, r7, #4
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80016fc:	4b3a      	ldr	r3, [pc, #232]	@ (80017e8 <HAL_FMC_MspInit+0x100>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d16d      	bne.n	80017e0 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8001704:	4b38      	ldr	r3, [pc, #224]	@ (80017e8 <HAL_FMC_MspInit+0x100>)
 8001706:	2201      	movs	r2, #1
 8001708:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800170a:	4b38      	ldr	r3, [pc, #224]	@ (80017ec <HAL_FMC_MspInit+0x104>)
 800170c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800170e:	4a37      	ldr	r2, [pc, #220]	@ (80017ec <HAL_FMC_MspInit+0x104>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6393      	str	r3, [r2, #56]	@ 0x38
 8001716:	4b35      	ldr	r3, [pc, #212]	@ (80017ec <HAL_FMC_MspInit+0x104>)
 8001718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	603b      	str	r3, [r7, #0]
 8001720:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8001722:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001726:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001728:	2302      	movs	r3, #2
 800172a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001730:	2303      	movs	r3, #3
 8001732:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001734:	230c      	movs	r3, #12
 8001736:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001738:	1d3b      	adds	r3, r7, #4
 800173a:	4619      	mov	r1, r3
 800173c:	482c      	ldr	r0, [pc, #176]	@ (80017f0 <HAL_FMC_MspInit+0x108>)
 800173e:	f001 f8bb 	bl	80028b8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8001742:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001746:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001750:	2303      	movs	r3, #3
 8001752:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001754:	230c      	movs	r3, #12
 8001756:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	4619      	mov	r1, r3
 800175c:	4825      	ldr	r0, [pc, #148]	@ (80017f4 <HAL_FMC_MspInit+0x10c>)
 800175e:	f001 f8ab 	bl	80028b8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8001762:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001766:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001768:	2302      	movs	r3, #2
 800176a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001770:	2303      	movs	r3, #3
 8001772:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001774:	230c      	movs	r3, #12
 8001776:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001778:	1d3b      	adds	r3, r7, #4
 800177a:	4619      	mov	r1, r3
 800177c:	481e      	ldr	r0, [pc, #120]	@ (80017f8 <HAL_FMC_MspInit+0x110>)
 800177e:	f001 f89b 	bl	80028b8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8001782:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001786:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001788:	2302      	movs	r3, #2
 800178a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001790:	2303      	movs	r3, #3
 8001792:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001794:	230c      	movs	r3, #12
 8001796:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001798:	1d3b      	adds	r3, r7, #4
 800179a:	4619      	mov	r1, r3
 800179c:	4817      	ldr	r0, [pc, #92]	@ (80017fc <HAL_FMC_MspInit+0x114>)
 800179e:	f001 f88b 	bl	80028b8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80017a2:	2328      	movs	r3, #40	@ 0x28
 80017a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	2302      	movs	r3, #2
 80017a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ae:	2303      	movs	r3, #3
 80017b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017b2:	230c      	movs	r3, #12
 80017b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	4619      	mov	r1, r3
 80017ba:	4811      	ldr	r0, [pc, #68]	@ (8001800 <HAL_FMC_MspInit+0x118>)
 80017bc:	f001 f87c 	bl	80028b8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80017c0:	2308      	movs	r3, #8
 80017c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c4:	2302      	movs	r3, #2
 80017c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017cc:	2303      	movs	r3, #3
 80017ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017d0:	230c      	movs	r3, #12
 80017d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	4619      	mov	r1, r3
 80017d8:	480a      	ldr	r0, [pc, #40]	@ (8001804 <HAL_FMC_MspInit+0x11c>)
 80017da:	f001 f86d 	bl	80028b8 <HAL_GPIO_Init>
 80017de:	e000      	b.n	80017e2 <HAL_FMC_MspInit+0xfa>
    return;
 80017e0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000288 	.word	0x20000288
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40021000 	.word	0x40021000
 80017f4:	40021800 	.word	0x40021800
 80017f8:	40020c00 	.word	0x40020c00
 80017fc:	40021400 	.word	0x40021400
 8001800:	40021c00 	.word	0x40021c00
 8001804:	40020800 	.word	0x40020800

08001808 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001810:	f7ff ff6a 	bl	80016e8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001814:	bf00      	nop
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001820:	bf00      	nop
 8001822:	e7fd      	b.n	8001820 <NMI_Handler+0x4>

08001824 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001828:	bf00      	nop
 800182a:	e7fd      	b.n	8001828 <HardFault_Handler+0x4>

0800182c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001830:	bf00      	nop
 8001832:	e7fd      	b.n	8001830 <MemManage_Handler+0x4>

08001834 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <BusFault_Handler+0x4>

0800183c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001840:	bf00      	nop
 8001842:	e7fd      	b.n	8001840 <UsageFault_Handler+0x4>

08001844 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001872:	f000 f899 	bl	80019a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
	...

0800187c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001880:	4802      	ldr	r0, [pc, #8]	@ (800188c <SDMMC1_IRQHandler+0x10>)
 8001882:	f002 ff65 	bl	8004750 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000110 	.word	0x20000110

08001890 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001894:	4802      	ldr	r0, [pc, #8]	@ (80018a0 <DMA2_Stream3_IRQHandler+0x10>)
 8001896:	f000 fb0d 	bl	8001eb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000194 	.word	0x20000194

080018a4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 80018a8:	4802      	ldr	r0, [pc, #8]	@ (80018b4 <DMA2_Stream6_IRQHandler+0x10>)
 80018aa:	f000 fb03 	bl	8001eb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	200001f4 	.word	0x200001f4

080018b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018bc:	4b06      	ldr	r3, [pc, #24]	@ (80018d8 <SystemInit+0x20>)
 80018be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018c2:	4a05      	ldr	r2, [pc, #20]	@ (80018d8 <SystemInit+0x20>)
 80018c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001914 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018e0:	f7ff ffea 	bl	80018b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018e4:	480c      	ldr	r0, [pc, #48]	@ (8001918 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018e6:	490d      	ldr	r1, [pc, #52]	@ (800191c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001920 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018ec:	e002      	b.n	80018f4 <LoopCopyDataInit>

080018ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018f2:	3304      	adds	r3, #4

080018f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018f8:	d3f9      	bcc.n	80018ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001924 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001928 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001900:	e001      	b.n	8001906 <LoopFillZerobss>

08001902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001904:	3204      	adds	r2, #4

08001906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001908:	d3fb      	bcc.n	8001902 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800190a:	f005 fb23 	bl	8006f54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800190e:	f7fe fe75 	bl	80005fc <main>
  bx  lr    
 8001912:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001914:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800191c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001920:	08006ff0 	.word	0x08006ff0
  ldr r2, =_sbss
 8001924:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001928:	20000504 	.word	0x20000504

0800192c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800192c:	e7fe      	b.n	800192c <ADC_IRQHandler>

0800192e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001932:	2003      	movs	r0, #3
 8001934:	f000 f94c 	bl	8001bd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001938:	2000      	movs	r0, #0
 800193a:	f000 f805 	bl	8001948 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800193e:	f7ff fc8b 	bl	8001258 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	bd80      	pop	{r7, pc}

08001948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001950:	4b12      	ldr	r3, [pc, #72]	@ (800199c <HAL_InitTick+0x54>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4b12      	ldr	r3, [pc, #72]	@ (80019a0 <HAL_InitTick+0x58>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	4619      	mov	r1, r3
 800195a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800195e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001962:	fbb2 f3f3 	udiv	r3, r2, r3
 8001966:	4618      	mov	r0, r3
 8001968:	f000 f967 	bl	8001c3a <HAL_SYSTICK_Config>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e00e      	b.n	8001994 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b0f      	cmp	r3, #15
 800197a:	d80a      	bhi.n	8001992 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800197c:	2200      	movs	r2, #0
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	f04f 30ff 	mov.w	r0, #4294967295
 8001984:	f000 f92f 	bl	8001be6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001988:	4a06      	ldr	r2, [pc, #24]	@ (80019a4 <HAL_InitTick+0x5c>)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800198e:	2300      	movs	r3, #0
 8001990:	e000      	b.n	8001994 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
}
 8001994:	4618      	mov	r0, r3
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000000 	.word	0x20000000
 80019a0:	20000008 	.word	0x20000008
 80019a4:	20000004 	.word	0x20000004

080019a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019ac:	4b06      	ldr	r3, [pc, #24]	@ (80019c8 <HAL_IncTick+0x20>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <HAL_IncTick+0x24>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4413      	add	r3, r2
 80019b8:	4a04      	ldr	r2, [pc, #16]	@ (80019cc <HAL_IncTick+0x24>)
 80019ba:	6013      	str	r3, [r2, #0]
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	20000008 	.word	0x20000008
 80019cc:	2000028c 	.word	0x2000028c

080019d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return uwTick;
 80019d4:	4b03      	ldr	r3, [pc, #12]	@ (80019e4 <HAL_GetTick+0x14>)
 80019d6:	681b      	ldr	r3, [r3, #0]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	2000028c 	.word	0x2000028c

080019e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019f0:	f7ff ffee 	bl	80019d0 <HAL_GetTick>
 80019f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a00:	d005      	beq.n	8001a0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a02:	4b0a      	ldr	r3, [pc, #40]	@ (8001a2c <HAL_Delay+0x44>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	461a      	mov	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a0e:	bf00      	nop
 8001a10:	f7ff ffde 	bl	80019d0 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d8f7      	bhi.n	8001a10 <HAL_Delay+0x28>
  {
  }
}
 8001a20:	bf00      	nop
 8001a22:	bf00      	nop
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000008 	.word	0x20000008

08001a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a40:	4b0b      	ldr	r3, [pc, #44]	@ (8001a70 <__NVIC_SetPriorityGrouping+0x40>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a58:	4b06      	ldr	r3, [pc, #24]	@ (8001a74 <__NVIC_SetPriorityGrouping+0x44>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a5e:	4a04      	ldr	r2, [pc, #16]	@ (8001a70 <__NVIC_SetPriorityGrouping+0x40>)
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	60d3      	str	r3, [r2, #12]
}
 8001a64:	bf00      	nop
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	e000ed00 	.word	0xe000ed00
 8001a74:	05fa0000 	.word	0x05fa0000

08001a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a7c:	4b04      	ldr	r3, [pc, #16]	@ (8001a90 <__NVIC_GetPriorityGrouping+0x18>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	0a1b      	lsrs	r3, r3, #8
 8001a82:	f003 0307 	and.w	r3, r3, #7
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	db0b      	blt.n	8001abe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	f003 021f 	and.w	r2, r3, #31
 8001aac:	4907      	ldr	r1, [pc, #28]	@ (8001acc <__NVIC_EnableIRQ+0x38>)
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	095b      	lsrs	r3, r3, #5
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	e000e100 	.word	0xe000e100

08001ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	6039      	str	r1, [r7, #0]
 8001ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	db0a      	blt.n	8001afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	490c      	ldr	r1, [pc, #48]	@ (8001b1c <__NVIC_SetPriority+0x4c>)
 8001aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aee:	0112      	lsls	r2, r2, #4
 8001af0:	b2d2      	uxtb	r2, r2
 8001af2:	440b      	add	r3, r1
 8001af4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001af8:	e00a      	b.n	8001b10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	4908      	ldr	r1, [pc, #32]	@ (8001b20 <__NVIC_SetPriority+0x50>)
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	3b04      	subs	r3, #4
 8001b08:	0112      	lsls	r2, r2, #4
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	761a      	strb	r2, [r3, #24]
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000e100 	.word	0xe000e100
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b089      	sub	sp, #36	@ 0x24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f1c3 0307 	rsb	r3, r3, #7
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	bf28      	it	cs
 8001b42:	2304      	movcs	r3, #4
 8001b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3304      	adds	r3, #4
 8001b4a:	2b06      	cmp	r3, #6
 8001b4c:	d902      	bls.n	8001b54 <NVIC_EncodePriority+0x30>
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3b03      	subs	r3, #3
 8001b52:	e000      	b.n	8001b56 <NVIC_EncodePriority+0x32>
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b58:	f04f 32ff 	mov.w	r2, #4294967295
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43da      	mvns	r2, r3
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	401a      	ands	r2, r3
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	fa01 f303 	lsl.w	r3, r1, r3
 8001b76:	43d9      	mvns	r1, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b7c:	4313      	orrs	r3, r2
         );
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3724      	adds	r7, #36	@ 0x24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
	...

08001b8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b9c:	d301      	bcc.n	8001ba2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e00f      	b.n	8001bc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bcc <SysTick_Config+0x40>)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001baa:	210f      	movs	r1, #15
 8001bac:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb0:	f7ff ff8e 	bl	8001ad0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bb4:	4b05      	ldr	r3, [pc, #20]	@ (8001bcc <SysTick_Config+0x40>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bba:	4b04      	ldr	r3, [pc, #16]	@ (8001bcc <SysTick_Config+0x40>)
 8001bbc:	2207      	movs	r2, #7
 8001bbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	e000e010 	.word	0xe000e010

08001bd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f7ff ff29 	bl	8001a30 <__NVIC_SetPriorityGrouping>
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b086      	sub	sp, #24
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	4603      	mov	r3, r0
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	607a      	str	r2, [r7, #4]
 8001bf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bf8:	f7ff ff3e 	bl	8001a78 <__NVIC_GetPriorityGrouping>
 8001bfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	68b9      	ldr	r1, [r7, #8]
 8001c02:	6978      	ldr	r0, [r7, #20]
 8001c04:	f7ff ff8e 	bl	8001b24 <NVIC_EncodePriority>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c0e:	4611      	mov	r1, r2
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff ff5d 	bl	8001ad0 <__NVIC_SetPriority>
}
 8001c16:	bf00      	nop
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	4603      	mov	r3, r0
 8001c26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff ff31 	bl	8001a94 <__NVIC_EnableIRQ>
}
 8001c32:	bf00      	nop
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7ff ffa2 	bl	8001b8c <SysTick_Config>
 8001c48:	4603      	mov	r3, r0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
	...

08001c54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c60:	f7ff feb6 	bl	80019d0 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e099      	b.n	8001da4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2202      	movs	r2, #2
 8001c74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f022 0201 	bic.w	r2, r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c90:	e00f      	b.n	8001cb2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c92:	f7ff fe9d 	bl	80019d0 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b05      	cmp	r3, #5
 8001c9e:	d908      	bls.n	8001cb2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2203      	movs	r2, #3
 8001caa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e078      	b.n	8001da4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1e8      	bne.n	8001c92 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	4b38      	ldr	r3, [pc, #224]	@ (8001dac <HAL_DMA_Init+0x158>)
 8001ccc:	4013      	ands	r3, r2
 8001cce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cde:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cf6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d08:	2b04      	cmp	r3, #4
 8001d0a:	d107      	bne.n	8001d1c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d14:	4313      	orrs	r3, r2
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	f023 0307 	bic.w	r3, r3, #7
 8001d32:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d38:	697a      	ldr	r2, [r7, #20]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	d117      	bne.n	8001d76 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00e      	beq.n	8001d76 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 faa5 	bl	80022a8 <DMA_CheckFifoParam>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d008      	beq.n	8001d76 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2240      	movs	r2, #64	@ 0x40
 8001d68:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001d72:	2301      	movs	r3, #1
 8001d74:	e016      	b.n	8001da4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 fa5c 	bl	800223c <DMA_CalcBaseAndBitshift>
 8001d84:	4603      	mov	r3, r0
 8001d86:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d8c:	223f      	movs	r2, #63	@ 0x3f
 8001d8e:	409a      	lsls	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3718      	adds	r7, #24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	f010803f 	.word	0xf010803f

08001db0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
 8001dbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d101      	bne.n	8001dd6 <HAL_DMA_Start_IT+0x26>
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	e048      	b.n	8001e68 <HAL_DMA_Start_IT+0xb8>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d137      	bne.n	8001e5a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2202      	movs	r2, #2
 8001dee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2200      	movs	r2, #0
 8001df6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	68b9      	ldr	r1, [r7, #8]
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f000 f9ee 	bl	80021e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e08:	223f      	movs	r2, #63	@ 0x3f
 8001e0a:	409a      	lsls	r2, r3
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 0216 	orr.w	r2, r2, #22
 8001e1e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	695a      	ldr	r2, [r3, #20]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001e2e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d007      	beq.n	8001e48 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0208 	orr.w	r2, r2, #8
 8001e46:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0201 	orr.w	r2, r2, #1
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	e005      	b.n	8001e66 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e62:	2302      	movs	r3, #2
 8001e64:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d004      	beq.n	8001e8e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2280      	movs	r2, #128	@ 0x80
 8001e88:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e00c      	b.n	8001ea8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2205      	movs	r2, #5
 8001e92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0201 	bic.w	r2, r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001ec0:	4b8e      	ldr	r3, [pc, #568]	@ (80020fc <HAL_DMA_IRQHandler+0x248>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a8e      	ldr	r2, [pc, #568]	@ (8002100 <HAL_DMA_IRQHandler+0x24c>)
 8001ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eca:	0a9b      	lsrs	r3, r3, #10
 8001ecc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ede:	2208      	movs	r2, #8
 8001ee0:	409a      	lsls	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d01a      	beq.n	8001f20 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d013      	beq.n	8001f20 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 0204 	bic.w	r2, r2, #4
 8001f06:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f0c:	2208      	movs	r2, #8
 8001f0e:	409a      	lsls	r2, r3
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f18:	f043 0201 	orr.w	r2, r3, #1
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f24:	2201      	movs	r2, #1
 8001f26:	409a      	lsls	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d012      	beq.n	8001f56 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00b      	beq.n	8001f56 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f42:	2201      	movs	r2, #1
 8001f44:	409a      	lsls	r2, r3
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f4e:	f043 0202 	orr.w	r2, r3, #2
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f5a:	2204      	movs	r2, #4
 8001f5c:	409a      	lsls	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	4013      	ands	r3, r2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d012      	beq.n	8001f8c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00b      	beq.n	8001f8c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f78:	2204      	movs	r2, #4
 8001f7a:	409a      	lsls	r2, r3
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f84:	f043 0204 	orr.w	r2, r3, #4
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f90:	2210      	movs	r2, #16
 8001f92:	409a      	lsls	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4013      	ands	r3, r2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d043      	beq.n	8002024 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d03c      	beq.n	8002024 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fae:	2210      	movs	r2, #16
 8001fb0:	409a      	lsls	r2, r3
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d018      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d108      	bne.n	8001fe4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d024      	beq.n	8002024 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	4798      	blx	r3
 8001fe2:	e01f      	b.n	8002024 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d01b      	beq.n	8002024 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	4798      	blx	r3
 8001ff4:	e016      	b.n	8002024 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002000:	2b00      	cmp	r3, #0
 8002002:	d107      	bne.n	8002014 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 0208 	bic.w	r2, r2, #8
 8002012:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002028:	2220      	movs	r2, #32
 800202a:	409a      	lsls	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4013      	ands	r3, r2
 8002030:	2b00      	cmp	r3, #0
 8002032:	f000 808f 	beq.w	8002154 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0310 	and.w	r3, r3, #16
 8002040:	2b00      	cmp	r3, #0
 8002042:	f000 8087 	beq.w	8002154 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800204a:	2220      	movs	r2, #32
 800204c:	409a      	lsls	r2, r3
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b05      	cmp	r3, #5
 800205c:	d136      	bne.n	80020cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 0216 	bic.w	r2, r2, #22
 800206c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	695a      	ldr	r2, [r3, #20]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800207c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002082:	2b00      	cmp	r3, #0
 8002084:	d103      	bne.n	800208e <HAL_DMA_IRQHandler+0x1da>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800208a:	2b00      	cmp	r3, #0
 800208c:	d007      	beq.n	800209e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 0208 	bic.w	r2, r2, #8
 800209c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020a2:	223f      	movs	r2, #63	@ 0x3f
 80020a4:	409a      	lsls	r2, r3
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d07e      	beq.n	80021c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	4798      	blx	r3
        }
        return;
 80020ca:	e079      	b.n	80021c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d01d      	beq.n	8002116 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d10d      	bne.n	8002104 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d031      	beq.n	8002154 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	4798      	blx	r3
 80020f8:	e02c      	b.n	8002154 <HAL_DMA_IRQHandler+0x2a0>
 80020fa:	bf00      	nop
 80020fc:	20000000 	.word	0x20000000
 8002100:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002108:	2b00      	cmp	r3, #0
 800210a:	d023      	beq.n	8002154 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	4798      	blx	r3
 8002114:	e01e      	b.n	8002154 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002120:	2b00      	cmp	r3, #0
 8002122:	d10f      	bne.n	8002144 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0210 	bic.w	r2, r2, #16
 8002132:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002158:	2b00      	cmp	r3, #0
 800215a:	d032      	beq.n	80021c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	2b00      	cmp	r3, #0
 8002166:	d022      	beq.n	80021ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2205      	movs	r2, #5
 800216c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0201 	bic.w	r2, r2, #1
 800217e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	3301      	adds	r3, #1
 8002184:	60bb      	str	r3, [r7, #8]
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	429a      	cmp	r2, r3
 800218a:	d307      	bcc.n	800219c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f2      	bne.n	8002180 <HAL_DMA_IRQHandler+0x2cc>
 800219a:	e000      	b.n	800219e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800219c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d005      	beq.n	80021c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	4798      	blx	r3
 80021be:	e000      	b.n	80021c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80021c0:	bf00      	nop
    }
  }
}
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
 80021ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80021fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	2b40      	cmp	r3, #64	@ 0x40
 800220c:	d108      	bne.n	8002220 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800221e:	e007      	b.n	8002230 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68ba      	ldr	r2, [r7, #8]
 8002226:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	60da      	str	r2, [r3, #12]
}
 8002230:	bf00      	nop
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	b2db      	uxtb	r3, r3
 800224a:	3b10      	subs	r3, #16
 800224c:	4a13      	ldr	r2, [pc, #76]	@ (800229c <DMA_CalcBaseAndBitshift+0x60>)
 800224e:	fba2 2303 	umull	r2, r3, r2, r3
 8002252:	091b      	lsrs	r3, r3, #4
 8002254:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002256:	4a12      	ldr	r2, [pc, #72]	@ (80022a0 <DMA_CalcBaseAndBitshift+0x64>)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	4413      	add	r3, r2
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	461a      	mov	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2b03      	cmp	r3, #3
 8002268:	d908      	bls.n	800227c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	4b0c      	ldr	r3, [pc, #48]	@ (80022a4 <DMA_CalcBaseAndBitshift+0x68>)
 8002272:	4013      	ands	r3, r2
 8002274:	1d1a      	adds	r2, r3, #4
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	659a      	str	r2, [r3, #88]	@ 0x58
 800227a:	e006      	b.n	800228a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	461a      	mov	r2, r3
 8002282:	4b08      	ldr	r3, [pc, #32]	@ (80022a4 <DMA_CalcBaseAndBitshift+0x68>)
 8002284:	4013      	ands	r3, r2
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800228e:	4618      	mov	r0, r3
 8002290:	3714      	adds	r7, #20
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	aaaaaaab 	.word	0xaaaaaaab
 80022a0:	08006fc4 	.word	0x08006fc4
 80022a4:	fffffc00 	.word	0xfffffc00

080022a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022b0:	2300      	movs	r3, #0
 80022b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d11f      	bne.n	8002302 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	2b03      	cmp	r3, #3
 80022c6:	d856      	bhi.n	8002376 <DMA_CheckFifoParam+0xce>
 80022c8:	a201      	add	r2, pc, #4	@ (adr r2, 80022d0 <DMA_CheckFifoParam+0x28>)
 80022ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ce:	bf00      	nop
 80022d0:	080022e1 	.word	0x080022e1
 80022d4:	080022f3 	.word	0x080022f3
 80022d8:	080022e1 	.word	0x080022e1
 80022dc:	08002377 	.word	0x08002377
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d046      	beq.n	800237a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022f0:	e043      	b.n	800237a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80022fa:	d140      	bne.n	800237e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002300:	e03d      	b.n	800237e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800230a:	d121      	bne.n	8002350 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	2b03      	cmp	r3, #3
 8002310:	d837      	bhi.n	8002382 <DMA_CheckFifoParam+0xda>
 8002312:	a201      	add	r2, pc, #4	@ (adr r2, 8002318 <DMA_CheckFifoParam+0x70>)
 8002314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002318:	08002329 	.word	0x08002329
 800231c:	0800232f 	.word	0x0800232f
 8002320:	08002329 	.word	0x08002329
 8002324:	08002341 	.word	0x08002341
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	73fb      	strb	r3, [r7, #15]
      break;
 800232c:	e030      	b.n	8002390 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002332:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d025      	beq.n	8002386 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800233e:	e022      	b.n	8002386 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002344:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002348:	d11f      	bne.n	800238a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800234e:	e01c      	b.n	800238a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2b02      	cmp	r3, #2
 8002354:	d903      	bls.n	800235e <DMA_CheckFifoParam+0xb6>
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2b03      	cmp	r3, #3
 800235a:	d003      	beq.n	8002364 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800235c:	e018      	b.n	8002390 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	73fb      	strb	r3, [r7, #15]
      break;
 8002362:	e015      	b.n	8002390 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002368:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00e      	beq.n	800238e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	73fb      	strb	r3, [r7, #15]
      break;
 8002374:	e00b      	b.n	800238e <DMA_CheckFifoParam+0xe6>
      break;
 8002376:	bf00      	nop
 8002378:	e00a      	b.n	8002390 <DMA_CheckFifoParam+0xe8>
      break;
 800237a:	bf00      	nop
 800237c:	e008      	b.n	8002390 <DMA_CheckFifoParam+0xe8>
      break;
 800237e:	bf00      	nop
 8002380:	e006      	b.n	8002390 <DMA_CheckFifoParam+0xe8>
      break;
 8002382:	bf00      	nop
 8002384:	e004      	b.n	8002390 <DMA_CheckFifoParam+0xe8>
      break;
 8002386:	bf00      	nop
 8002388:	e002      	b.n	8002390 <DMA_CheckFifoParam+0xe8>
      break;   
 800238a:	bf00      	nop
 800238c:	e000      	b.n	8002390 <DMA_CheckFifoParam+0xe8>
      break;
 800238e:	bf00      	nop
    }
  } 
  
  return status; 
 8002390:	7bfb      	ldrb	r3, [r7, #15]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop

080023a0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e039      	b.n	8002426 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d106      	bne.n	80023cc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7fe ff6a 	bl	80012a0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2202      	movs	r2, #2
 80023d0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023f0:	f023 0107 	bic.w	r1, r3, #7
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	430a      	orrs	r2, r1
 80023fe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002406:	4b0a      	ldr	r3, [pc, #40]	@ (8002430 <HAL_DMA2D_Init+0x90>)
 8002408:	4013      	ands	r3, r2
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	68d1      	ldr	r1, [r2, #12]
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	6812      	ldr	r2, [r2, #0]
 8002412:	430b      	orrs	r3, r1
 8002414:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	ffffc000 	.word	0xffffc000

08002434 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af02      	add	r7, sp, #8
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
 8002440:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002448:	2b01      	cmp	r3, #1
 800244a:	d101      	bne.n	8002450 <HAL_DMA2D_Start+0x1c>
 800244c:	2302      	movs	r3, #2
 800244e:	e018      	b.n	8002482 <HAL_DMA2D_Start+0x4e>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2202      	movs	r2, #2
 800245c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	68b9      	ldr	r1, [r7, #8]
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 f988 	bl	8002780 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0201 	orr.w	r2, r2, #1
 800247e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b086      	sub	sp, #24
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
 8002492:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8002494:	2300      	movs	r3, #0
 8002496:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d056      	beq.n	8002554 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80024a6:	f7ff fa93 	bl	80019d0 <HAL_GetTick>
 80024aa:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80024ac:	e04b      	b.n	8002546 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d023      	beq.n	8002508 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f003 0320 	and.w	r3, r3, #32
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d005      	beq.n	80024d6 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ce:	f043 0202 	orr.w	r2, r3, #2
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d005      	beq.n	80024ec <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024e4:	f043 0201 	orr.w	r2, r3, #1
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2221      	movs	r2, #33	@ 0x21
 80024f2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2204      	movs	r2, #4
 80024f8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e0a5      	b.n	8002654 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250e:	d01a      	beq.n	8002546 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002510:	f7ff fa5e 	bl	80019d0 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	429a      	cmp	r2, r3
 800251e:	d302      	bcc.n	8002526 <HAL_DMA2D_PollForTransfer+0x9c>
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10f      	bne.n	8002546 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800252a:	f043 0220 	orr.w	r2, r3, #32
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2203      	movs	r2, #3
 8002536:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e086      	b.n	8002654 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0ac      	beq.n	80024ae <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	f003 0320 	and.w	r3, r3, #32
 800255e:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002566:	f003 0320 	and.w	r3, r3, #32
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	4313      	orrs	r3, r2
 800256e:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d061      	beq.n	800263a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002576:	f7ff fa2b 	bl	80019d0 <HAL_GetTick>
 800257a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800257c:	e056      	b.n	800262c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 800258c:	2b00      	cmp	r3, #0
 800258e:	d02e      	beq.n	80025ee <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	2b00      	cmp	r3, #0
 8002598:	d005      	beq.n	80025a6 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800259e:	f043 0204 	orr.w	r2, r3, #4
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f003 0320 	and.w	r3, r3, #32
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d005      	beq.n	80025bc <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025b4:	f043 0202 	orr.w	r2, r3, #2
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d005      	beq.n	80025d2 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025ca:	f043 0201 	orr.w	r2, r3, #1
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2229      	movs	r2, #41	@ 0x29
 80025d8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2204      	movs	r2, #4
 80025de:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e032      	b.n	8002654 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f4:	d01a      	beq.n	800262c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80025f6:	f7ff f9eb 	bl	80019d0 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	429a      	cmp	r2, r3
 8002604:	d302      	bcc.n	800260c <HAL_DMA2D_PollForTransfer+0x182>
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d10f      	bne.n	800262c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002610:	f043 0220 	orr.w	r2, r3, #32
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2203      	movs	r2, #3
 800261c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e013      	b.n	8002654 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f003 0310 	and.w	r3, r3, #16
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0a1      	beq.n	800257e <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2212      	movs	r2, #18
 8002640:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800265c:	b480      	push	{r7}
 800265e:	b087      	sub	sp, #28
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002674:	2b01      	cmp	r3, #1
 8002676:	d101      	bne.n	800267c <HAL_DMA2D_ConfigLayer+0x20>
 8002678:	2302      	movs	r3, #2
 800267a:	e079      	b.n	8002770 <HAL_DMA2D_ConfigLayer+0x114>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2202      	movs	r2, #2
 8002688:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	3318      	adds	r3, #24
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	4413      	add	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	041b      	lsls	r3, r3, #16
 80026a2:	4313      	orrs	r3, r2
 80026a4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80026a6:	4b35      	ldr	r3, [pc, #212]	@ (800277c <HAL_DMA2D_ConfigLayer+0x120>)
 80026a8:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b0a      	cmp	r3, #10
 80026b0:	d003      	beq.n	80026ba <HAL_DMA2D_ConfigLayer+0x5e>
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b09      	cmp	r3, #9
 80026b8:	d107      	bne.n	80026ca <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	e005      	b.n	80026d6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	061b      	lsls	r3, r3, #24
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d120      	bne.n	800271e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	43db      	mvns	r3, r3
 80026e6:	ea02 0103 	and.w	r1, r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	430a      	orrs	r2, r1
 80026f2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	6812      	ldr	r2, [r2, #0]
 80026fc:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b0a      	cmp	r3, #10
 8002704:	d003      	beq.n	800270e <HAL_DMA2D_ConfigLayer+0xb2>
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	2b09      	cmp	r3, #9
 800270c:	d127      	bne.n	800275e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	68da      	ldr	r2, [r3, #12]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800271a:	629a      	str	r2, [r3, #40]	@ 0x28
 800271c:	e01f      	b.n	800275e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	69da      	ldr	r2, [r3, #28]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	43db      	mvns	r3, r3
 8002728:	ea02 0103 	and.w	r1, r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	430a      	orrs	r2, r1
 8002734:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	6812      	ldr	r2, [r2, #0]
 800273e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	2b0a      	cmp	r3, #10
 8002746:	d003      	beq.n	8002750 <HAL_DMA2D_ConfigLayer+0xf4>
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	2b09      	cmp	r3, #9
 800274e:	d106      	bne.n	800275e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	68da      	ldr	r2, [r3, #12]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800275c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	371c      	adds	r7, #28
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	ff03000f 	.word	0xff03000f

08002780 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8002780:	b480      	push	{r7}
 8002782:	b08b      	sub	sp, #44	@ 0x2c
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
 800278c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002794:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	041a      	lsls	r2, r3, #16
 800279c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800279e:	431a      	orrs	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80027b8:	d174      	bne.n	80028a4 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80027c0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80027c8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80027d0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d108      	bne.n	80027f2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	431a      	orrs	r2, r3
 80027e6:	6a3b      	ldr	r3, [r7, #32]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80027f0:	e053      	b.n	800289a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d106      	bne.n	8002808 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	4313      	orrs	r3, r2
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	4313      	orrs	r3, r2
 8002804:	627b      	str	r3, [r7, #36]	@ 0x24
 8002806:	e048      	b.n	800289a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	2b02      	cmp	r3, #2
 800280e:	d111      	bne.n	8002834 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	0cdb      	lsrs	r3, r3, #19
 8002814:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	0a9b      	lsrs	r3, r3, #10
 800281a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	08db      	lsrs	r3, r3, #3
 8002820:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	015a      	lsls	r2, r3, #5
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	02db      	lsls	r3, r3, #11
 800282a:	4313      	orrs	r3, r2
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	4313      	orrs	r3, r2
 8002830:	627b      	str	r3, [r7, #36]	@ 0x24
 8002832:	e032      	b.n	800289a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	2b03      	cmp	r3, #3
 800283a:	d117      	bne.n	800286c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800283c:	6a3b      	ldr	r3, [r7, #32]
 800283e:	0fdb      	lsrs	r3, r3, #31
 8002840:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	0cdb      	lsrs	r3, r3, #19
 8002846:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	0adb      	lsrs	r3, r3, #11
 800284c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	08db      	lsrs	r3, r3, #3
 8002852:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	015a      	lsls	r2, r3, #5
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	029b      	lsls	r3, r3, #10
 800285c:	431a      	orrs	r2, r3
 800285e:	6a3b      	ldr	r3, [r7, #32]
 8002860:	03db      	lsls	r3, r3, #15
 8002862:	4313      	orrs	r3, r2
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	4313      	orrs	r3, r2
 8002868:	627b      	str	r3, [r7, #36]	@ 0x24
 800286a:	e016      	b.n	800289a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800286c:	6a3b      	ldr	r3, [r7, #32]
 800286e:	0f1b      	lsrs	r3, r3, #28
 8002870:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	0d1b      	lsrs	r3, r3, #20
 8002876:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	0b1b      	lsrs	r3, r3, #12
 800287c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	091b      	lsrs	r3, r3, #4
 8002882:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	011a      	lsls	r2, r3, #4
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	021b      	lsls	r3, r3, #8
 800288c:	431a      	orrs	r2, r3
 800288e:	6a3b      	ldr	r3, [r7, #32]
 8002890:	031b      	lsls	r3, r3, #12
 8002892:	4313      	orrs	r3, r2
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	4313      	orrs	r3, r2
 8002898:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028a0:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80028a2:	e003      	b.n	80028ac <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68ba      	ldr	r2, [r7, #8]
 80028aa:	60da      	str	r2, [r3, #12]
}
 80028ac:	bf00      	nop
 80028ae:	372c      	adds	r7, #44	@ 0x2c
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b089      	sub	sp, #36	@ 0x24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80028c2:	2300      	movs	r3, #0
 80028c4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80028c6:	2300      	movs	r3, #0
 80028c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80028ca:	2300      	movs	r3, #0
 80028cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80028ce:	2300      	movs	r3, #0
 80028d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80028d2:	2300      	movs	r3, #0
 80028d4:	61fb      	str	r3, [r7, #28]
 80028d6:	e175      	b.n	8002bc4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80028d8:	2201      	movs	r2, #1
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	4013      	ands	r3, r2
 80028ea:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	f040 8164 	bne.w	8002bbe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d005      	beq.n	800290e <HAL_GPIO_Init+0x56>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d130      	bne.n	8002970 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	2203      	movs	r2, #3
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43db      	mvns	r3, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4013      	ands	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	68da      	ldr	r2, [r3, #12]
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4313      	orrs	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002944:	2201      	movs	r2, #1
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	43db      	mvns	r3, r3
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	4013      	ands	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	091b      	lsrs	r3, r3, #4
 800295a:	f003 0201 	and.w	r2, r3, #1
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	4313      	orrs	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f003 0303 	and.w	r3, r3, #3
 8002978:	2b03      	cmp	r3, #3
 800297a:	d017      	beq.n	80029ac <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	2203      	movs	r2, #3
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f003 0303 	and.w	r3, r3, #3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d123      	bne.n	8002a00 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	08da      	lsrs	r2, r3, #3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3208      	adds	r2, #8
 80029c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	f003 0307 	and.w	r3, r3, #7
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	220f      	movs	r2, #15
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	43db      	mvns	r3, r3
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4013      	ands	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	691a      	ldr	r2, [r3, #16]
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	08da      	lsrs	r2, r3, #3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	3208      	adds	r2, #8
 80029fa:	69b9      	ldr	r1, [r7, #24]
 80029fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	2203      	movs	r2, #3
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	43db      	mvns	r3, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4013      	ands	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f003 0203 	and.w	r2, r3, #3
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 80be 	beq.w	8002bbe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a42:	4b66      	ldr	r3, [pc, #408]	@ (8002bdc <HAL_GPIO_Init+0x324>)
 8002a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a46:	4a65      	ldr	r2, [pc, #404]	@ (8002bdc <HAL_GPIO_Init+0x324>)
 8002a48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a4e:	4b63      	ldr	r3, [pc, #396]	@ (8002bdc <HAL_GPIO_Init+0x324>)
 8002a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002a5a:	4a61      	ldr	r2, [pc, #388]	@ (8002be0 <HAL_GPIO_Init+0x328>)
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	089b      	lsrs	r3, r3, #2
 8002a60:	3302      	adds	r3, #2
 8002a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	f003 0303 	and.w	r3, r3, #3
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	220f      	movs	r2, #15
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	43db      	mvns	r3, r3
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a58      	ldr	r2, [pc, #352]	@ (8002be4 <HAL_GPIO_Init+0x32c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d037      	beq.n	8002af6 <HAL_GPIO_Init+0x23e>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a57      	ldr	r2, [pc, #348]	@ (8002be8 <HAL_GPIO_Init+0x330>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d031      	beq.n	8002af2 <HAL_GPIO_Init+0x23a>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a56      	ldr	r2, [pc, #344]	@ (8002bec <HAL_GPIO_Init+0x334>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d02b      	beq.n	8002aee <HAL_GPIO_Init+0x236>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a55      	ldr	r2, [pc, #340]	@ (8002bf0 <HAL_GPIO_Init+0x338>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d025      	beq.n	8002aea <HAL_GPIO_Init+0x232>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a54      	ldr	r2, [pc, #336]	@ (8002bf4 <HAL_GPIO_Init+0x33c>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d01f      	beq.n	8002ae6 <HAL_GPIO_Init+0x22e>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a53      	ldr	r2, [pc, #332]	@ (8002bf8 <HAL_GPIO_Init+0x340>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d019      	beq.n	8002ae2 <HAL_GPIO_Init+0x22a>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a52      	ldr	r2, [pc, #328]	@ (8002bfc <HAL_GPIO_Init+0x344>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d013      	beq.n	8002ade <HAL_GPIO_Init+0x226>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a51      	ldr	r2, [pc, #324]	@ (8002c00 <HAL_GPIO_Init+0x348>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d00d      	beq.n	8002ada <HAL_GPIO_Init+0x222>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a50      	ldr	r2, [pc, #320]	@ (8002c04 <HAL_GPIO_Init+0x34c>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d007      	beq.n	8002ad6 <HAL_GPIO_Init+0x21e>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a4f      	ldr	r2, [pc, #316]	@ (8002c08 <HAL_GPIO_Init+0x350>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d101      	bne.n	8002ad2 <HAL_GPIO_Init+0x21a>
 8002ace:	2309      	movs	r3, #9
 8002ad0:	e012      	b.n	8002af8 <HAL_GPIO_Init+0x240>
 8002ad2:	230a      	movs	r3, #10
 8002ad4:	e010      	b.n	8002af8 <HAL_GPIO_Init+0x240>
 8002ad6:	2308      	movs	r3, #8
 8002ad8:	e00e      	b.n	8002af8 <HAL_GPIO_Init+0x240>
 8002ada:	2307      	movs	r3, #7
 8002adc:	e00c      	b.n	8002af8 <HAL_GPIO_Init+0x240>
 8002ade:	2306      	movs	r3, #6
 8002ae0:	e00a      	b.n	8002af8 <HAL_GPIO_Init+0x240>
 8002ae2:	2305      	movs	r3, #5
 8002ae4:	e008      	b.n	8002af8 <HAL_GPIO_Init+0x240>
 8002ae6:	2304      	movs	r3, #4
 8002ae8:	e006      	b.n	8002af8 <HAL_GPIO_Init+0x240>
 8002aea:	2303      	movs	r3, #3
 8002aec:	e004      	b.n	8002af8 <HAL_GPIO_Init+0x240>
 8002aee:	2302      	movs	r3, #2
 8002af0:	e002      	b.n	8002af8 <HAL_GPIO_Init+0x240>
 8002af2:	2301      	movs	r3, #1
 8002af4:	e000      	b.n	8002af8 <HAL_GPIO_Init+0x240>
 8002af6:	2300      	movs	r3, #0
 8002af8:	69fa      	ldr	r2, [r7, #28]
 8002afa:	f002 0203 	and.w	r2, r2, #3
 8002afe:	0092      	lsls	r2, r2, #2
 8002b00:	4093      	lsls	r3, r2
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002b08:	4935      	ldr	r1, [pc, #212]	@ (8002be0 <HAL_GPIO_Init+0x328>)
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	089b      	lsrs	r3, r3, #2
 8002b0e:	3302      	adds	r3, #2
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b16:	4b3d      	ldr	r3, [pc, #244]	@ (8002c0c <HAL_GPIO_Init+0x354>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4013      	ands	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b3a:	4a34      	ldr	r2, [pc, #208]	@ (8002c0c <HAL_GPIO_Init+0x354>)
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b40:	4b32      	ldr	r3, [pc, #200]	@ (8002c0c <HAL_GPIO_Init+0x354>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b64:	4a29      	ldr	r2, [pc, #164]	@ (8002c0c <HAL_GPIO_Init+0x354>)
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b6a:	4b28      	ldr	r3, [pc, #160]	@ (8002c0c <HAL_GPIO_Init+0x354>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	43db      	mvns	r3, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4013      	ands	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b8e:	4a1f      	ldr	r2, [pc, #124]	@ (8002c0c <HAL_GPIO_Init+0x354>)
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b94:	4b1d      	ldr	r3, [pc, #116]	@ (8002c0c <HAL_GPIO_Init+0x354>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d003      	beq.n	8002bb8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bb8:	4a14      	ldr	r2, [pc, #80]	@ (8002c0c <HAL_GPIO_Init+0x354>)
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	61fb      	str	r3, [r7, #28]
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	2b0f      	cmp	r3, #15
 8002bc8:	f67f ae86 	bls.w	80028d8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002bcc:	bf00      	nop
 8002bce:	bf00      	nop
 8002bd0:	3724      	adds	r7, #36	@ 0x24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	40013800 	.word	0x40013800
 8002be4:	40020000 	.word	0x40020000
 8002be8:	40020400 	.word	0x40020400
 8002bec:	40020800 	.word	0x40020800
 8002bf0:	40020c00 	.word	0x40020c00
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	40021400 	.word	0x40021400
 8002bfc:	40021800 	.word	0x40021800
 8002c00:	40021c00 	.word	0x40021c00
 8002c04:	40022000 	.word	0x40022000
 8002c08:	40022400 	.word	0x40022400
 8002c0c:	40013c00 	.word	0x40013c00

08002c10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	691a      	ldr	r2, [r3, #16]
 8002c20:	887b      	ldrh	r3, [r7, #2]
 8002c22:	4013      	ands	r3, r2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d002      	beq.n	8002c2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	73fb      	strb	r3, [r7, #15]
 8002c2c:	e001      	b.n	8002c32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	460b      	mov	r3, r1
 8002c4a:	807b      	strh	r3, [r7, #2]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c50:	787b      	ldrb	r3, [r7, #1]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c56:	887a      	ldrh	r2, [r7, #2]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002c5c:	e003      	b.n	8002c66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002c5e:	887b      	ldrh	r3, [r7, #2]
 8002c60:	041a      	lsls	r2, r3, #16
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	619a      	str	r2, [r3, #24]
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
	...

08002c74 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e0bf      	b.n	8002e06 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d106      	bne.n	8002ca0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7fe fb20 	bl	80012e0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	699a      	ldr	r2, [r3, #24]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8002cb6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6999      	ldr	r1, [r3, #24]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002ccc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6899      	ldr	r1, [r3, #8]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	4b4a      	ldr	r3, [pc, #296]	@ (8002e10 <HAL_LTDC_Init+0x19c>)
 8002ce8:	400b      	ands	r3, r1
 8002cea:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	041b      	lsls	r3, r3, #16
 8002cf2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6899      	ldr	r1, [r3, #8]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	699a      	ldr	r2, [r3, #24]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	431a      	orrs	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68d9      	ldr	r1, [r3, #12]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	4b3e      	ldr	r3, [pc, #248]	@ (8002e10 <HAL_LTDC_Init+0x19c>)
 8002d16:	400b      	ands	r3, r1
 8002d18:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	041b      	lsls	r3, r3, #16
 8002d20:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68d9      	ldr	r1, [r3, #12]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a1a      	ldr	r2, [r3, #32]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	430a      	orrs	r2, r1
 8002d36:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6919      	ldr	r1, [r3, #16]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	4b33      	ldr	r3, [pc, #204]	@ (8002e10 <HAL_LTDC_Init+0x19c>)
 8002d44:	400b      	ands	r3, r1
 8002d46:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4c:	041b      	lsls	r3, r3, #16
 8002d4e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6919      	ldr	r1, [r3, #16]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	6959      	ldr	r1, [r3, #20]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	4b27      	ldr	r3, [pc, #156]	@ (8002e10 <HAL_LTDC_Init+0x19c>)
 8002d72:	400b      	ands	r3, r1
 8002d74:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d7a:	041b      	lsls	r3, r3, #16
 8002d7c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6959      	ldr	r1, [r3, #20]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d9a:	021b      	lsls	r3, r3, #8
 8002d9c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8002da4:	041b      	lsls	r3, r3, #16
 8002da6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8002db6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 0206 	orr.w	r2, r2, #6
 8002de2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	699a      	ldr	r2, [r3, #24]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 0201 	orr.w	r2, r2, #1
 8002df2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	f000f800 	.word	0xf000f800

08002e14 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002e14:	b5b0      	push	{r4, r5, r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d101      	bne.n	8002e2e <HAL_LTDC_ConfigLayer+0x1a>
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	e02c      	b.n	8002e88 <HAL_LTDC_ConfigLayer+0x74>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2202      	movs	r2, #2
 8002e3a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2134      	movs	r1, #52	@ 0x34
 8002e44:	fb01 f303 	mul.w	r3, r1, r3
 8002e48:	4413      	add	r3, r2
 8002e4a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	4614      	mov	r4, r2
 8002e52:	461d      	mov	r5, r3
 8002e54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e60:	682b      	ldr	r3, [r5, #0]
 8002e62:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	68b9      	ldr	r1, [r7, #8]
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f000 f811 	bl	8002e90 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2201      	movs	r2, #1
 8002e74:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bdb0      	pop	{r4, r5, r7, pc}

08002e90 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b089      	sub	sp, #36	@ 0x24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	0c1b      	lsrs	r3, r3, #16
 8002ea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eac:	4413      	add	r3, r2
 8002eae:	041b      	lsls	r3, r3, #16
 8002eb0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	01db      	lsls	r3, r3, #7
 8002ebc:	4413      	add	r3, r2
 8002ebe:	3384      	adds	r3, #132	@ 0x84
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	6812      	ldr	r2, [r2, #0]
 8002ec6:	4611      	mov	r1, r2
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	01d2      	lsls	r2, r2, #7
 8002ecc:	440a      	add	r2, r1
 8002ece:	3284      	adds	r2, #132	@ 0x84
 8002ed0:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002ed4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	0c1b      	lsrs	r3, r3, #16
 8002ee2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002ee6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002ee8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4619      	mov	r1, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	01db      	lsls	r3, r3, #7
 8002ef4:	440b      	add	r3, r1
 8002ef6:	3384      	adds	r3, #132	@ 0x84
 8002ef8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002efe:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	68da      	ldr	r2, [r3, #12]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f0e:	4413      	add	r3, r2
 8002f10:	041b      	lsls	r3, r3, #16
 8002f12:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	461a      	mov	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	01db      	lsls	r3, r3, #7
 8002f1e:	4413      	add	r3, r2
 8002f20:	3384      	adds	r3, #132	@ 0x84
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	6812      	ldr	r2, [r2, #0]
 8002f28:	4611      	mov	r1, r2
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	01d2      	lsls	r2, r2, #7
 8002f2e:	440a      	add	r2, r1
 8002f30:	3284      	adds	r2, #132	@ 0x84
 8002f32:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002f36:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f46:	4413      	add	r3, r2
 8002f48:	1c5a      	adds	r2, r3, #1
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4619      	mov	r1, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	01db      	lsls	r3, r3, #7
 8002f54:	440b      	add	r3, r1
 8002f56:	3384      	adds	r3, #132	@ 0x84
 8002f58:	4619      	mov	r1, r3
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	461a      	mov	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	01db      	lsls	r3, r3, #7
 8002f6a:	4413      	add	r3, r2
 8002f6c:	3384      	adds	r3, #132	@ 0x84
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	6812      	ldr	r2, [r2, #0]
 8002f74:	4611      	mov	r1, r2
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	01d2      	lsls	r2, r2, #7
 8002f7a:	440a      	add	r2, r1
 8002f7c:	3284      	adds	r2, #132	@ 0x84
 8002f7e:	f023 0307 	bic.w	r3, r3, #7
 8002f82:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	01db      	lsls	r3, r3, #7
 8002f8e:	4413      	add	r3, r2
 8002f90:	3384      	adds	r3, #132	@ 0x84
 8002f92:	461a      	mov	r2, r3
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002fa0:	021b      	lsls	r3, r3, #8
 8002fa2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002faa:	041b      	lsls	r3, r3, #16
 8002fac:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	061b      	lsls	r3, r3, #24
 8002fb4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	01db      	lsls	r3, r3, #7
 8002fc0:	4413      	add	r3, r2
 8002fc2:	3384      	adds	r3, #132	@ 0x84
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	01db      	lsls	r3, r3, #7
 8002fd0:	4413      	add	r3, r2
 8002fd2:	3384      	adds	r3, #132	@ 0x84
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4619      	mov	r1, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	01db      	lsls	r3, r3, #7
 8002ff4:	440b      	add	r3, r1
 8002ff6:	3384      	adds	r3, #132	@ 0x84
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	461a      	mov	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	01db      	lsls	r3, r3, #7
 800300a:	4413      	add	r3, r2
 800300c:	3384      	adds	r3, #132	@ 0x84
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	6812      	ldr	r2, [r2, #0]
 8003014:	4611      	mov	r1, r2
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	01d2      	lsls	r2, r2, #7
 800301a:	440a      	add	r2, r1
 800301c:	3284      	adds	r2, #132	@ 0x84
 800301e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003022:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	461a      	mov	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	01db      	lsls	r3, r3, #7
 800302e:	4413      	add	r3, r2
 8003030:	3384      	adds	r3, #132	@ 0x84
 8003032:	461a      	mov	r2, r3
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	461a      	mov	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	01db      	lsls	r3, r3, #7
 8003044:	4413      	add	r3, r2
 8003046:	3384      	adds	r3, #132	@ 0x84
 8003048:	69da      	ldr	r2, [r3, #28]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4619      	mov	r1, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	01db      	lsls	r3, r3, #7
 8003054:	440b      	add	r3, r1
 8003056:	3384      	adds	r3, #132	@ 0x84
 8003058:	4619      	mov	r1, r3
 800305a:	4b58      	ldr	r3, [pc, #352]	@ (80031bc <LTDC_SetConfig+0x32c>)
 800305c:	4013      	ands	r3, r2
 800305e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	69da      	ldr	r2, [r3, #28]
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	68f9      	ldr	r1, [r7, #12]
 800306a:	6809      	ldr	r1, [r1, #0]
 800306c:	4608      	mov	r0, r1
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	01c9      	lsls	r1, r1, #7
 8003072:	4401      	add	r1, r0
 8003074:	3184      	adds	r1, #132	@ 0x84
 8003076:	4313      	orrs	r3, r2
 8003078:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	461a      	mov	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	01db      	lsls	r3, r3, #7
 8003084:	4413      	add	r3, r2
 8003086:	3384      	adds	r3, #132	@ 0x84
 8003088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	461a      	mov	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	01db      	lsls	r3, r3, #7
 8003094:	4413      	add	r3, r2
 8003096:	3384      	adds	r3, #132	@ 0x84
 8003098:	461a      	mov	r2, r3
 800309a:	2300      	movs	r3, #0
 800309c:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	461a      	mov	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	01db      	lsls	r3, r3, #7
 80030a8:	4413      	add	r3, r2
 80030aa:	3384      	adds	r3, #132	@ 0x84
 80030ac:	461a      	mov	r2, r3
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b2:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d102      	bne.n	80030c2 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80030bc:	2304      	movs	r3, #4
 80030be:	61fb      	str	r3, [r7, #28]
 80030c0:	e01b      	b.n	80030fa <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d102      	bne.n	80030d0 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80030ca:	2303      	movs	r3, #3
 80030cc:	61fb      	str	r3, [r7, #28]
 80030ce:	e014      	b.n	80030fa <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	2b04      	cmp	r3, #4
 80030d6:	d00b      	beq.n	80030f0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d007      	beq.n	80030f0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80030e4:	2b03      	cmp	r3, #3
 80030e6:	d003      	beq.n	80030f0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80030ec:	2b07      	cmp	r3, #7
 80030ee:	d102      	bne.n	80030f6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80030f0:	2302      	movs	r3, #2
 80030f2:	61fb      	str	r3, [r7, #28]
 80030f4:	e001      	b.n	80030fa <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80030f6:	2301      	movs	r3, #1
 80030f8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	461a      	mov	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	01db      	lsls	r3, r3, #7
 8003104:	4413      	add	r3, r2
 8003106:	3384      	adds	r3, #132	@ 0x84
 8003108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	6812      	ldr	r2, [r2, #0]
 800310e:	4611      	mov	r1, r2
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	01d2      	lsls	r2, r2, #7
 8003114:	440a      	add	r2, r1
 8003116:	3284      	adds	r2, #132	@ 0x84
 8003118:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800311c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003122:	69fa      	ldr	r2, [r7, #28]
 8003124:	fb02 f303 	mul.w	r3, r2, r3
 8003128:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	6859      	ldr	r1, [r3, #4]
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	1acb      	subs	r3, r1, r3
 8003134:	69f9      	ldr	r1, [r7, #28]
 8003136:	fb01 f303 	mul.w	r3, r1, r3
 800313a:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800313c:	68f9      	ldr	r1, [r7, #12]
 800313e:	6809      	ldr	r1, [r1, #0]
 8003140:	4608      	mov	r0, r1
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	01c9      	lsls	r1, r1, #7
 8003146:	4401      	add	r1, r0
 8003148:	3184      	adds	r1, #132	@ 0x84
 800314a:	4313      	orrs	r3, r2
 800314c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	461a      	mov	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	01db      	lsls	r3, r3, #7
 8003158:	4413      	add	r3, r2
 800315a:	3384      	adds	r3, #132	@ 0x84
 800315c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4619      	mov	r1, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	01db      	lsls	r3, r3, #7
 8003168:	440b      	add	r3, r1
 800316a:	3384      	adds	r3, #132	@ 0x84
 800316c:	4619      	mov	r1, r3
 800316e:	4b14      	ldr	r3, [pc, #80]	@ (80031c0 <LTDC_SetConfig+0x330>)
 8003170:	4013      	ands	r3, r2
 8003172:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	461a      	mov	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	01db      	lsls	r3, r3, #7
 800317e:	4413      	add	r3, r2
 8003180:	3384      	adds	r3, #132	@ 0x84
 8003182:	461a      	mov	r2, r3
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003188:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	461a      	mov	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	01db      	lsls	r3, r3, #7
 8003194:	4413      	add	r3, r2
 8003196:	3384      	adds	r3, #132	@ 0x84
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	6812      	ldr	r2, [r2, #0]
 800319e:	4611      	mov	r1, r2
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	01d2      	lsls	r2, r2, #7
 80031a4:	440a      	add	r2, r1
 80031a6:	3284      	adds	r2, #132	@ 0x84
 80031a8:	f043 0301 	orr.w	r3, r3, #1
 80031ac:	6013      	str	r3, [r2, #0]
}
 80031ae:	bf00      	nop
 80031b0:	3724      	adds	r7, #36	@ 0x24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	fffff8f8 	.word	0xfffff8f8
 80031c0:	fffff800 	.word	0xfffff800

080031c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80031cc:	2300      	movs	r3, #0
 80031ce:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e291      	b.n	80036fe <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 8087 	beq.w	80032f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031e8:	4b96      	ldr	r3, [pc, #600]	@ (8003444 <HAL_RCC_OscConfig+0x280>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f003 030c 	and.w	r3, r3, #12
 80031f0:	2b04      	cmp	r3, #4
 80031f2:	d00c      	beq.n	800320e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031f4:	4b93      	ldr	r3, [pc, #588]	@ (8003444 <HAL_RCC_OscConfig+0x280>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 030c 	and.w	r3, r3, #12
 80031fc:	2b08      	cmp	r3, #8
 80031fe:	d112      	bne.n	8003226 <HAL_RCC_OscConfig+0x62>
 8003200:	4b90      	ldr	r3, [pc, #576]	@ (8003444 <HAL_RCC_OscConfig+0x280>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003208:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800320c:	d10b      	bne.n	8003226 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800320e:	4b8d      	ldr	r3, [pc, #564]	@ (8003444 <HAL_RCC_OscConfig+0x280>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d06c      	beq.n	80032f4 <HAL_RCC_OscConfig+0x130>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d168      	bne.n	80032f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e26b      	b.n	80036fe <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800322e:	d106      	bne.n	800323e <HAL_RCC_OscConfig+0x7a>
 8003230:	4b84      	ldr	r3, [pc, #528]	@ (8003444 <HAL_RCC_OscConfig+0x280>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a83      	ldr	r2, [pc, #524]	@ (8003444 <HAL_RCC_OscConfig+0x280>)
 8003236:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800323a:	6013      	str	r3, [r2, #0]
 800323c:	e02e      	b.n	800329c <HAL_RCC_OscConfig+0xd8>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10c      	bne.n	8003260 <HAL_RCC_OscConfig+0x9c>
 8003246:	4b7f      	ldr	r3, [pc, #508]	@ (8003444 <HAL_RCC_OscConfig+0x280>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a7e      	ldr	r2, [pc, #504]	@ (8003444 <HAL_RCC_OscConfig+0x280>)
 800324c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	4b7c      	ldr	r3, [pc, #496]	@ (8003444 <HAL_RCC_OscConfig+0x280>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a7b      	ldr	r2, [pc, #492]	@ (8003444 <HAL_RCC_OscConfig+0x280>)
 8003258:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800325c:	6013      	str	r3, [r2, #0]
 800325e:	e01d      	b.n	800329c <HAL_RCC_OscConfig+0xd8>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003268:	d10c      	bne.n	8003284 <HAL_RCC_OscConfig+0xc0>
 800326a:	4b76      	ldr	r3, [pc, #472]	@ (8003444 <HAL_RCC_OscConfig+0x280>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a75      	ldr	r2, [pc, #468]	@ (8003444 <HAL_RCC_OscConfig+0x280>)
 8003270:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	4b73      	ldr	r3, [pc, #460]	@ (8003444 <HAL_RCC_OscConfig+0x280>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a72      	ldr	r2, [pc, #456]	@ (8003444 <HAL_RCC_OscConfig+0x280>)
 800327c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003280:	6013      	str	r3, [r2, #0]
 8003282:	e00b      	b.n	800329c <HAL_RCC_OscConfig+0xd8>
 8003284:	4b6f      	ldr	r3, [pc, #444]	@ (8003444 <HAL_RCC_OscConfig+0x280>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a6e      	ldr	r2, [pc, #440]	@ (8003444 <HAL_RCC_OscConfig+0x280>)
 800328a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800328e:	6013      	str	r3, [r2, #0]
 8003290:	4b6c      	ldr	r3, [pc, #432]	@ (8003444 <HAL_RCC_OscConfig+0x280>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a6b      	ldr	r2, [pc, #428]	@ (8003444 <HAL_RCC_OscConfig+0x280>)
 8003296:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800329a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d013      	beq.n	80032cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a4:	f7fe fb94 	bl	80019d0 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032ac:	f7fe fb90 	bl	80019d0 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b64      	cmp	r3, #100	@ 0x64
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e21f      	b.n	80036fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032be:	4b61      	ldr	r3, [pc, #388]	@ (8003444 <HAL_RCC_OscConfig+0x280>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0f0      	beq.n	80032ac <HAL_RCC_OscConfig+0xe8>
 80032ca:	e014      	b.n	80032f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032cc:	f7fe fb80 	bl	80019d0 <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032d4:	f7fe fb7c 	bl	80019d0 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b64      	cmp	r3, #100	@ 0x64
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e20b      	b.n	80036fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032e6:	4b57      	ldr	r3, [pc, #348]	@ (8003444 <HAL_RCC_OscConfig+0x280>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1f0      	bne.n	80032d4 <HAL_RCC_OscConfig+0x110>
 80032f2:	e000      	b.n	80032f6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d069      	beq.n	80033d6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003302:	4b50      	ldr	r3, [pc, #320]	@ (8003444 <HAL_RCC_OscConfig+0x280>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 030c 	and.w	r3, r3, #12
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00b      	beq.n	8003326 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800330e:	4b4d      	ldr	r3, [pc, #308]	@ (8003444 <HAL_RCC_OscConfig+0x280>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 030c 	and.w	r3, r3, #12
 8003316:	2b08      	cmp	r3, #8
 8003318:	d11c      	bne.n	8003354 <HAL_RCC_OscConfig+0x190>
 800331a:	4b4a      	ldr	r3, [pc, #296]	@ (8003444 <HAL_RCC_OscConfig+0x280>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d116      	bne.n	8003354 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003326:	4b47      	ldr	r3, [pc, #284]	@ (8003444 <HAL_RCC_OscConfig+0x280>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d005      	beq.n	800333e <HAL_RCC_OscConfig+0x17a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d001      	beq.n	800333e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e1df      	b.n	80036fe <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800333e:	4b41      	ldr	r3, [pc, #260]	@ (8003444 <HAL_RCC_OscConfig+0x280>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	493d      	ldr	r1, [pc, #244]	@ (8003444 <HAL_RCC_OscConfig+0x280>)
 800334e:	4313      	orrs	r3, r2
 8003350:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003352:	e040      	b.n	80033d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d023      	beq.n	80033a4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800335c:	4b39      	ldr	r3, [pc, #228]	@ (8003444 <HAL_RCC_OscConfig+0x280>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a38      	ldr	r2, [pc, #224]	@ (8003444 <HAL_RCC_OscConfig+0x280>)
 8003362:	f043 0301 	orr.w	r3, r3, #1
 8003366:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003368:	f7fe fb32 	bl	80019d0 <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003370:	f7fe fb2e 	bl	80019d0 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e1bd      	b.n	80036fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003382:	4b30      	ldr	r3, [pc, #192]	@ (8003444 <HAL_RCC_OscConfig+0x280>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d0f0      	beq.n	8003370 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800338e:	4b2d      	ldr	r3, [pc, #180]	@ (8003444 <HAL_RCC_OscConfig+0x280>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	4929      	ldr	r1, [pc, #164]	@ (8003444 <HAL_RCC_OscConfig+0x280>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	600b      	str	r3, [r1, #0]
 80033a2:	e018      	b.n	80033d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033a4:	4b27      	ldr	r3, [pc, #156]	@ (8003444 <HAL_RCC_OscConfig+0x280>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a26      	ldr	r2, [pc, #152]	@ (8003444 <HAL_RCC_OscConfig+0x280>)
 80033aa:	f023 0301 	bic.w	r3, r3, #1
 80033ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b0:	f7fe fb0e 	bl	80019d0 <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033b8:	f7fe fb0a 	bl	80019d0 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e199      	b.n	80036fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003444 <HAL_RCC_OscConfig+0x280>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1f0      	bne.n	80033b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0308 	and.w	r3, r3, #8
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d038      	beq.n	8003454 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d019      	beq.n	800341e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ea:	4b16      	ldr	r3, [pc, #88]	@ (8003444 <HAL_RCC_OscConfig+0x280>)
 80033ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033ee:	4a15      	ldr	r2, [pc, #84]	@ (8003444 <HAL_RCC_OscConfig+0x280>)
 80033f0:	f043 0301 	orr.w	r3, r3, #1
 80033f4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f6:	f7fe faeb 	bl	80019d0 <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033fc:	e008      	b.n	8003410 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033fe:	f7fe fae7 	bl	80019d0 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d901      	bls.n	8003410 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e176      	b.n	80036fe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003410:	4b0c      	ldr	r3, [pc, #48]	@ (8003444 <HAL_RCC_OscConfig+0x280>)
 8003412:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d0f0      	beq.n	80033fe <HAL_RCC_OscConfig+0x23a>
 800341c:	e01a      	b.n	8003454 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800341e:	4b09      	ldr	r3, [pc, #36]	@ (8003444 <HAL_RCC_OscConfig+0x280>)
 8003420:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003422:	4a08      	ldr	r2, [pc, #32]	@ (8003444 <HAL_RCC_OscConfig+0x280>)
 8003424:	f023 0301 	bic.w	r3, r3, #1
 8003428:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342a:	f7fe fad1 	bl	80019d0 <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003430:	e00a      	b.n	8003448 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003432:	f7fe facd 	bl	80019d0 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d903      	bls.n	8003448 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e15c      	b.n	80036fe <HAL_RCC_OscConfig+0x53a>
 8003444:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003448:	4b91      	ldr	r3, [pc, #580]	@ (8003690 <HAL_RCC_OscConfig+0x4cc>)
 800344a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1ee      	bne.n	8003432 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b00      	cmp	r3, #0
 800345e:	f000 80a4 	beq.w	80035aa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003462:	4b8b      	ldr	r3, [pc, #556]	@ (8003690 <HAL_RCC_OscConfig+0x4cc>)
 8003464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10d      	bne.n	800348a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800346e:	4b88      	ldr	r3, [pc, #544]	@ (8003690 <HAL_RCC_OscConfig+0x4cc>)
 8003470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003472:	4a87      	ldr	r2, [pc, #540]	@ (8003690 <HAL_RCC_OscConfig+0x4cc>)
 8003474:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003478:	6413      	str	r3, [r2, #64]	@ 0x40
 800347a:	4b85      	ldr	r3, [pc, #532]	@ (8003690 <HAL_RCC_OscConfig+0x4cc>)
 800347c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003482:	60bb      	str	r3, [r7, #8]
 8003484:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003486:	2301      	movs	r3, #1
 8003488:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800348a:	4b82      	ldr	r3, [pc, #520]	@ (8003694 <HAL_RCC_OscConfig+0x4d0>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003492:	2b00      	cmp	r3, #0
 8003494:	d118      	bne.n	80034c8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003496:	4b7f      	ldr	r3, [pc, #508]	@ (8003694 <HAL_RCC_OscConfig+0x4d0>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a7e      	ldr	r2, [pc, #504]	@ (8003694 <HAL_RCC_OscConfig+0x4d0>)
 800349c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034a2:	f7fe fa95 	bl	80019d0 <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034a8:	e008      	b.n	80034bc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034aa:	f7fe fa91 	bl	80019d0 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b64      	cmp	r3, #100	@ 0x64
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e120      	b.n	80036fe <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034bc:	4b75      	ldr	r3, [pc, #468]	@ (8003694 <HAL_RCC_OscConfig+0x4d0>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0f0      	beq.n	80034aa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d106      	bne.n	80034de <HAL_RCC_OscConfig+0x31a>
 80034d0:	4b6f      	ldr	r3, [pc, #444]	@ (8003690 <HAL_RCC_OscConfig+0x4cc>)
 80034d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034d4:	4a6e      	ldr	r2, [pc, #440]	@ (8003690 <HAL_RCC_OscConfig+0x4cc>)
 80034d6:	f043 0301 	orr.w	r3, r3, #1
 80034da:	6713      	str	r3, [r2, #112]	@ 0x70
 80034dc:	e02d      	b.n	800353a <HAL_RCC_OscConfig+0x376>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10c      	bne.n	8003500 <HAL_RCC_OscConfig+0x33c>
 80034e6:	4b6a      	ldr	r3, [pc, #424]	@ (8003690 <HAL_RCC_OscConfig+0x4cc>)
 80034e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ea:	4a69      	ldr	r2, [pc, #420]	@ (8003690 <HAL_RCC_OscConfig+0x4cc>)
 80034ec:	f023 0301 	bic.w	r3, r3, #1
 80034f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80034f2:	4b67      	ldr	r3, [pc, #412]	@ (8003690 <HAL_RCC_OscConfig+0x4cc>)
 80034f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034f6:	4a66      	ldr	r2, [pc, #408]	@ (8003690 <HAL_RCC_OscConfig+0x4cc>)
 80034f8:	f023 0304 	bic.w	r3, r3, #4
 80034fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80034fe:	e01c      	b.n	800353a <HAL_RCC_OscConfig+0x376>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	2b05      	cmp	r3, #5
 8003506:	d10c      	bne.n	8003522 <HAL_RCC_OscConfig+0x35e>
 8003508:	4b61      	ldr	r3, [pc, #388]	@ (8003690 <HAL_RCC_OscConfig+0x4cc>)
 800350a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800350c:	4a60      	ldr	r2, [pc, #384]	@ (8003690 <HAL_RCC_OscConfig+0x4cc>)
 800350e:	f043 0304 	orr.w	r3, r3, #4
 8003512:	6713      	str	r3, [r2, #112]	@ 0x70
 8003514:	4b5e      	ldr	r3, [pc, #376]	@ (8003690 <HAL_RCC_OscConfig+0x4cc>)
 8003516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003518:	4a5d      	ldr	r2, [pc, #372]	@ (8003690 <HAL_RCC_OscConfig+0x4cc>)
 800351a:	f043 0301 	orr.w	r3, r3, #1
 800351e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003520:	e00b      	b.n	800353a <HAL_RCC_OscConfig+0x376>
 8003522:	4b5b      	ldr	r3, [pc, #364]	@ (8003690 <HAL_RCC_OscConfig+0x4cc>)
 8003524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003526:	4a5a      	ldr	r2, [pc, #360]	@ (8003690 <HAL_RCC_OscConfig+0x4cc>)
 8003528:	f023 0301 	bic.w	r3, r3, #1
 800352c:	6713      	str	r3, [r2, #112]	@ 0x70
 800352e:	4b58      	ldr	r3, [pc, #352]	@ (8003690 <HAL_RCC_OscConfig+0x4cc>)
 8003530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003532:	4a57      	ldr	r2, [pc, #348]	@ (8003690 <HAL_RCC_OscConfig+0x4cc>)
 8003534:	f023 0304 	bic.w	r3, r3, #4
 8003538:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d015      	beq.n	800356e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003542:	f7fe fa45 	bl	80019d0 <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003548:	e00a      	b.n	8003560 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800354a:	f7fe fa41 	bl	80019d0 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003558:	4293      	cmp	r3, r2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e0ce      	b.n	80036fe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003560:	4b4b      	ldr	r3, [pc, #300]	@ (8003690 <HAL_RCC_OscConfig+0x4cc>)
 8003562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0ee      	beq.n	800354a <HAL_RCC_OscConfig+0x386>
 800356c:	e014      	b.n	8003598 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800356e:	f7fe fa2f 	bl	80019d0 <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003574:	e00a      	b.n	800358c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003576:	f7fe fa2b 	bl	80019d0 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003584:	4293      	cmp	r3, r2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e0b8      	b.n	80036fe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800358c:	4b40      	ldr	r3, [pc, #256]	@ (8003690 <HAL_RCC_OscConfig+0x4cc>)
 800358e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1ee      	bne.n	8003576 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003598:	7dfb      	ldrb	r3, [r7, #23]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d105      	bne.n	80035aa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800359e:	4b3c      	ldr	r3, [pc, #240]	@ (8003690 <HAL_RCC_OscConfig+0x4cc>)
 80035a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a2:	4a3b      	ldr	r2, [pc, #236]	@ (8003690 <HAL_RCC_OscConfig+0x4cc>)
 80035a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035a8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 80a4 	beq.w	80036fc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035b4:	4b36      	ldr	r3, [pc, #216]	@ (8003690 <HAL_RCC_OscConfig+0x4cc>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f003 030c 	and.w	r3, r3, #12
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d06b      	beq.n	8003698 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d149      	bne.n	800365c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035c8:	4b31      	ldr	r3, [pc, #196]	@ (8003690 <HAL_RCC_OscConfig+0x4cc>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a30      	ldr	r2, [pc, #192]	@ (8003690 <HAL_RCC_OscConfig+0x4cc>)
 80035ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d4:	f7fe f9fc 	bl	80019d0 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035dc:	f7fe f9f8 	bl	80019d0 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e087      	b.n	80036fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ee:	4b28      	ldr	r3, [pc, #160]	@ (8003690 <HAL_RCC_OscConfig+0x4cc>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1f0      	bne.n	80035dc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	69da      	ldr	r2, [r3, #28]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003608:	019b      	lsls	r3, r3, #6
 800360a:	431a      	orrs	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003610:	085b      	lsrs	r3, r3, #1
 8003612:	3b01      	subs	r3, #1
 8003614:	041b      	lsls	r3, r3, #16
 8003616:	431a      	orrs	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800361c:	061b      	lsls	r3, r3, #24
 800361e:	4313      	orrs	r3, r2
 8003620:	4a1b      	ldr	r2, [pc, #108]	@ (8003690 <HAL_RCC_OscConfig+0x4cc>)
 8003622:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003626:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003628:	4b19      	ldr	r3, [pc, #100]	@ (8003690 <HAL_RCC_OscConfig+0x4cc>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a18      	ldr	r2, [pc, #96]	@ (8003690 <HAL_RCC_OscConfig+0x4cc>)
 800362e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003632:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003634:	f7fe f9cc 	bl	80019d0 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800363c:	f7fe f9c8 	bl	80019d0 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b02      	cmp	r3, #2
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e057      	b.n	80036fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800364e:	4b10      	ldr	r3, [pc, #64]	@ (8003690 <HAL_RCC_OscConfig+0x4cc>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d0f0      	beq.n	800363c <HAL_RCC_OscConfig+0x478>
 800365a:	e04f      	b.n	80036fc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800365c:	4b0c      	ldr	r3, [pc, #48]	@ (8003690 <HAL_RCC_OscConfig+0x4cc>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a0b      	ldr	r2, [pc, #44]	@ (8003690 <HAL_RCC_OscConfig+0x4cc>)
 8003662:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003668:	f7fe f9b2 	bl	80019d0 <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003670:	f7fe f9ae 	bl	80019d0 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e03d      	b.n	80036fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003682:	4b03      	ldr	r3, [pc, #12]	@ (8003690 <HAL_RCC_OscConfig+0x4cc>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1f0      	bne.n	8003670 <HAL_RCC_OscConfig+0x4ac>
 800368e:	e035      	b.n	80036fc <HAL_RCC_OscConfig+0x538>
 8003690:	40023800 	.word	0x40023800
 8003694:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003698:	4b1b      	ldr	r3, [pc, #108]	@ (8003708 <HAL_RCC_OscConfig+0x544>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d028      	beq.n	80036f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d121      	bne.n	80036f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036be:	429a      	cmp	r2, r3
 80036c0:	d11a      	bne.n	80036f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80036c8:	4013      	ands	r3, r2
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80036ce:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d111      	bne.n	80036f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036de:	085b      	lsrs	r3, r3, #1
 80036e0:	3b01      	subs	r3, #1
 80036e2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d107      	bne.n	80036f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d001      	beq.n	80036fc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e000      	b.n	80036fe <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3718      	adds	r7, #24
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	40023800 	.word	0x40023800

0800370c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003716:	2300      	movs	r3, #0
 8003718:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d101      	bne.n	8003724 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e0d0      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003724:	4b6a      	ldr	r3, [pc, #424]	@ (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 030f 	and.w	r3, r3, #15
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	429a      	cmp	r2, r3
 8003730:	d910      	bls.n	8003754 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003732:	4b67      	ldr	r3, [pc, #412]	@ (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f023 020f 	bic.w	r2, r3, #15
 800373a:	4965      	ldr	r1, [pc, #404]	@ (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	4313      	orrs	r3, r2
 8003740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003742:	4b63      	ldr	r3, [pc, #396]	@ (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	429a      	cmp	r2, r3
 800374e:	d001      	beq.n	8003754 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e0b8      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d020      	beq.n	80037a2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	2b00      	cmp	r3, #0
 800376a:	d005      	beq.n	8003778 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800376c:	4b59      	ldr	r3, [pc, #356]	@ (80038d4 <HAL_RCC_ClockConfig+0x1c8>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	4a58      	ldr	r2, [pc, #352]	@ (80038d4 <HAL_RCC_ClockConfig+0x1c8>)
 8003772:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003776:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0308 	and.w	r3, r3, #8
 8003780:	2b00      	cmp	r3, #0
 8003782:	d005      	beq.n	8003790 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003784:	4b53      	ldr	r3, [pc, #332]	@ (80038d4 <HAL_RCC_ClockConfig+0x1c8>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	4a52      	ldr	r2, [pc, #328]	@ (80038d4 <HAL_RCC_ClockConfig+0x1c8>)
 800378a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800378e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003790:	4b50      	ldr	r3, [pc, #320]	@ (80038d4 <HAL_RCC_ClockConfig+0x1c8>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	494d      	ldr	r1, [pc, #308]	@ (80038d4 <HAL_RCC_ClockConfig+0x1c8>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d040      	beq.n	8003830 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d107      	bne.n	80037c6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b6:	4b47      	ldr	r3, [pc, #284]	@ (80038d4 <HAL_RCC_ClockConfig+0x1c8>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d115      	bne.n	80037ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e07f      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d107      	bne.n	80037de <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ce:	4b41      	ldr	r3, [pc, #260]	@ (80038d4 <HAL_RCC_ClockConfig+0x1c8>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d109      	bne.n	80037ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e073      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037de:	4b3d      	ldr	r3, [pc, #244]	@ (80038d4 <HAL_RCC_ClockConfig+0x1c8>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e06b      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ee:	4b39      	ldr	r3, [pc, #228]	@ (80038d4 <HAL_RCC_ClockConfig+0x1c8>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f023 0203 	bic.w	r2, r3, #3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	4936      	ldr	r1, [pc, #216]	@ (80038d4 <HAL_RCC_ClockConfig+0x1c8>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003800:	f7fe f8e6 	bl	80019d0 <HAL_GetTick>
 8003804:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003806:	e00a      	b.n	800381e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003808:	f7fe f8e2 	bl	80019d0 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003816:	4293      	cmp	r3, r2
 8003818:	d901      	bls.n	800381e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e053      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800381e:	4b2d      	ldr	r3, [pc, #180]	@ (80038d4 <HAL_RCC_ClockConfig+0x1c8>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 020c 	and.w	r2, r3, #12
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	429a      	cmp	r2, r3
 800382e:	d1eb      	bne.n	8003808 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003830:	4b27      	ldr	r3, [pc, #156]	@ (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 030f 	and.w	r3, r3, #15
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	429a      	cmp	r2, r3
 800383c:	d210      	bcs.n	8003860 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800383e:	4b24      	ldr	r3, [pc, #144]	@ (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f023 020f 	bic.w	r2, r3, #15
 8003846:	4922      	ldr	r1, [pc, #136]	@ (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	4313      	orrs	r3, r2
 800384c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800384e:	4b20      	ldr	r3, [pc, #128]	@ (80038d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	429a      	cmp	r2, r3
 800385a:	d001      	beq.n	8003860 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e032      	b.n	80038c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b00      	cmp	r3, #0
 800386a:	d008      	beq.n	800387e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800386c:	4b19      	ldr	r3, [pc, #100]	@ (80038d4 <HAL_RCC_ClockConfig+0x1c8>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	4916      	ldr	r1, [pc, #88]	@ (80038d4 <HAL_RCC_ClockConfig+0x1c8>)
 800387a:	4313      	orrs	r3, r2
 800387c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0308 	and.w	r3, r3, #8
 8003886:	2b00      	cmp	r3, #0
 8003888:	d009      	beq.n	800389e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800388a:	4b12      	ldr	r3, [pc, #72]	@ (80038d4 <HAL_RCC_ClockConfig+0x1c8>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	490e      	ldr	r1, [pc, #56]	@ (80038d4 <HAL_RCC_ClockConfig+0x1c8>)
 800389a:	4313      	orrs	r3, r2
 800389c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800389e:	f000 f821 	bl	80038e4 <HAL_RCC_GetSysClockFreq>
 80038a2:	4602      	mov	r2, r0
 80038a4:	4b0b      	ldr	r3, [pc, #44]	@ (80038d4 <HAL_RCC_ClockConfig+0x1c8>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	091b      	lsrs	r3, r3, #4
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	490a      	ldr	r1, [pc, #40]	@ (80038d8 <HAL_RCC_ClockConfig+0x1cc>)
 80038b0:	5ccb      	ldrb	r3, [r1, r3]
 80038b2:	fa22 f303 	lsr.w	r3, r2, r3
 80038b6:	4a09      	ldr	r2, [pc, #36]	@ (80038dc <HAL_RCC_ClockConfig+0x1d0>)
 80038b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038ba:	4b09      	ldr	r3, [pc, #36]	@ (80038e0 <HAL_RCC_ClockConfig+0x1d4>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4618      	mov	r0, r3
 80038c0:	f7fe f842 	bl	8001948 <HAL_InitTick>

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	40023c00 	.word	0x40023c00
 80038d4:	40023800 	.word	0x40023800
 80038d8:	08006fb4 	.word	0x08006fb4
 80038dc:	20000000 	.word	0x20000000
 80038e0:	20000004 	.word	0x20000004

080038e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038e8:	b090      	sub	sp, #64	@ 0x40
 80038ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80038ec:	2300      	movs	r3, #0
 80038ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80038f0:	2300      	movs	r3, #0
 80038f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038f4:	2300      	movs	r3, #0
 80038f6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80038f8:	2300      	movs	r3, #0
 80038fa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038fc:	4b59      	ldr	r3, [pc, #356]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x180>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f003 030c 	and.w	r3, r3, #12
 8003904:	2b08      	cmp	r3, #8
 8003906:	d00d      	beq.n	8003924 <HAL_RCC_GetSysClockFreq+0x40>
 8003908:	2b08      	cmp	r3, #8
 800390a:	f200 80a1 	bhi.w	8003a50 <HAL_RCC_GetSysClockFreq+0x16c>
 800390e:	2b00      	cmp	r3, #0
 8003910:	d002      	beq.n	8003918 <HAL_RCC_GetSysClockFreq+0x34>
 8003912:	2b04      	cmp	r3, #4
 8003914:	d003      	beq.n	800391e <HAL_RCC_GetSysClockFreq+0x3a>
 8003916:	e09b      	b.n	8003a50 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003918:	4b53      	ldr	r3, [pc, #332]	@ (8003a68 <HAL_RCC_GetSysClockFreq+0x184>)
 800391a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800391c:	e09b      	b.n	8003a56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800391e:	4b53      	ldr	r3, [pc, #332]	@ (8003a6c <HAL_RCC_GetSysClockFreq+0x188>)
 8003920:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003922:	e098      	b.n	8003a56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003924:	4b4f      	ldr	r3, [pc, #316]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x180>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800392c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800392e:	4b4d      	ldr	r3, [pc, #308]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x180>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d028      	beq.n	800398c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800393a:	4b4a      	ldr	r3, [pc, #296]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x180>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	099b      	lsrs	r3, r3, #6
 8003940:	2200      	movs	r2, #0
 8003942:	623b      	str	r3, [r7, #32]
 8003944:	627a      	str	r2, [r7, #36]	@ 0x24
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800394c:	2100      	movs	r1, #0
 800394e:	4b47      	ldr	r3, [pc, #284]	@ (8003a6c <HAL_RCC_GetSysClockFreq+0x188>)
 8003950:	fb03 f201 	mul.w	r2, r3, r1
 8003954:	2300      	movs	r3, #0
 8003956:	fb00 f303 	mul.w	r3, r0, r3
 800395a:	4413      	add	r3, r2
 800395c:	4a43      	ldr	r2, [pc, #268]	@ (8003a6c <HAL_RCC_GetSysClockFreq+0x188>)
 800395e:	fba0 1202 	umull	r1, r2, r0, r2
 8003962:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003964:	460a      	mov	r2, r1
 8003966:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003968:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800396a:	4413      	add	r3, r2
 800396c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800396e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003970:	2200      	movs	r2, #0
 8003972:	61bb      	str	r3, [r7, #24]
 8003974:	61fa      	str	r2, [r7, #28]
 8003976:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800397a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800397e:	f7fc fc43 	bl	8000208 <__aeabi_uldivmod>
 8003982:	4602      	mov	r2, r0
 8003984:	460b      	mov	r3, r1
 8003986:	4613      	mov	r3, r2
 8003988:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800398a:	e053      	b.n	8003a34 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800398c:	4b35      	ldr	r3, [pc, #212]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x180>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	099b      	lsrs	r3, r3, #6
 8003992:	2200      	movs	r2, #0
 8003994:	613b      	str	r3, [r7, #16]
 8003996:	617a      	str	r2, [r7, #20]
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800399e:	f04f 0b00 	mov.w	fp, #0
 80039a2:	4652      	mov	r2, sl
 80039a4:	465b      	mov	r3, fp
 80039a6:	f04f 0000 	mov.w	r0, #0
 80039aa:	f04f 0100 	mov.w	r1, #0
 80039ae:	0159      	lsls	r1, r3, #5
 80039b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039b4:	0150      	lsls	r0, r2, #5
 80039b6:	4602      	mov	r2, r0
 80039b8:	460b      	mov	r3, r1
 80039ba:	ebb2 080a 	subs.w	r8, r2, sl
 80039be:	eb63 090b 	sbc.w	r9, r3, fp
 80039c2:	f04f 0200 	mov.w	r2, #0
 80039c6:	f04f 0300 	mov.w	r3, #0
 80039ca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80039ce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80039d2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80039d6:	ebb2 0408 	subs.w	r4, r2, r8
 80039da:	eb63 0509 	sbc.w	r5, r3, r9
 80039de:	f04f 0200 	mov.w	r2, #0
 80039e2:	f04f 0300 	mov.w	r3, #0
 80039e6:	00eb      	lsls	r3, r5, #3
 80039e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039ec:	00e2      	lsls	r2, r4, #3
 80039ee:	4614      	mov	r4, r2
 80039f0:	461d      	mov	r5, r3
 80039f2:	eb14 030a 	adds.w	r3, r4, sl
 80039f6:	603b      	str	r3, [r7, #0]
 80039f8:	eb45 030b 	adc.w	r3, r5, fp
 80039fc:	607b      	str	r3, [r7, #4]
 80039fe:	f04f 0200 	mov.w	r2, #0
 8003a02:	f04f 0300 	mov.w	r3, #0
 8003a06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a0a:	4629      	mov	r1, r5
 8003a0c:	028b      	lsls	r3, r1, #10
 8003a0e:	4621      	mov	r1, r4
 8003a10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a14:	4621      	mov	r1, r4
 8003a16:	028a      	lsls	r2, r1, #10
 8003a18:	4610      	mov	r0, r2
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a1e:	2200      	movs	r2, #0
 8003a20:	60bb      	str	r3, [r7, #8]
 8003a22:	60fa      	str	r2, [r7, #12]
 8003a24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a28:	f7fc fbee 	bl	8000208 <__aeabi_uldivmod>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	460b      	mov	r3, r1
 8003a30:	4613      	mov	r3, r2
 8003a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003a34:	4b0b      	ldr	r3, [pc, #44]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	0c1b      	lsrs	r3, r3, #16
 8003a3a:	f003 0303 	and.w	r3, r3, #3
 8003a3e:	3301      	adds	r3, #1
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003a44:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a4e:	e002      	b.n	8003a56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a50:	4b05      	ldr	r3, [pc, #20]	@ (8003a68 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a52:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3740      	adds	r7, #64	@ 0x40
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a62:	bf00      	nop
 8003a64:	40023800 	.word	0x40023800
 8003a68:	00f42400 	.word	0x00f42400
 8003a6c:	017d7840 	.word	0x017d7840

08003a70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b088      	sub	sp, #32
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003a80:	2300      	movs	r3, #0
 8003a82:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003a84:	2300      	movs	r3, #0
 8003a86:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d012      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a98:	4b69      	ldr	r3, [pc, #420]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	4a68      	ldr	r2, [pc, #416]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a9e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003aa2:	6093      	str	r3, [r2, #8]
 8003aa4:	4b66      	ldr	r3, [pc, #408]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aac:	4964      	ldr	r1, [pc, #400]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003aba:	2301      	movs	r3, #1
 8003abc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d017      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003aca:	4b5d      	ldr	r3, [pc, #372]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ad0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad8:	4959      	ldr	r1, [pc, #356]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ae4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ae8:	d101      	bne.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003aea:	2301      	movs	r3, #1
 8003aec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003af6:	2301      	movs	r3, #1
 8003af8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d017      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b06:	4b4e      	ldr	r3, [pc, #312]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b0c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b14:	494a      	ldr	r1, [pc, #296]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b24:	d101      	bne.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003b26:	2301      	movs	r3, #1
 8003b28:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003b32:	2301      	movs	r3, #1
 8003b34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003b42:	2301      	movs	r3, #1
 8003b44:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0320 	and.w	r3, r3, #32
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f000 808b 	beq.w	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b54:	4b3a      	ldr	r3, [pc, #232]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b58:	4a39      	ldr	r2, [pc, #228]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b60:	4b37      	ldr	r3, [pc, #220]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b68:	60bb      	str	r3, [r7, #8]
 8003b6a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b6c:	4b35      	ldr	r3, [pc, #212]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a34      	ldr	r2, [pc, #208]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b78:	f7fd ff2a 	bl	80019d0 <HAL_GetTick>
 8003b7c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b80:	f7fd ff26 	bl	80019d0 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b64      	cmp	r3, #100	@ 0x64
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e357      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b92:	4b2c      	ldr	r3, [pc, #176]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0f0      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b9e:	4b28      	ldr	r3, [pc, #160]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ba6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d035      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d02e      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bbc:	4b20      	ldr	r3, [pc, #128]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bc4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bc6:	4b1e      	ldr	r3, [pc, #120]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bca:	4a1d      	ldr	r2, [pc, #116]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bd0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bd6:	4a1a      	ldr	r2, [pc, #104]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bdc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003bde:	4a18      	ldr	r2, [pc, #96]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003be4:	4b16      	ldr	r3, [pc, #88]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d114      	bne.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf0:	f7fd feee 	bl	80019d0 <HAL_GetTick>
 8003bf4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bf6:	e00a      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bf8:	f7fd feea 	bl	80019d0 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e319      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d0ee      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c26:	d111      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003c28:	4b05      	ldr	r3, [pc, #20]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003c34:	4b04      	ldr	r3, [pc, #16]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003c36:	400b      	ands	r3, r1
 8003c38:	4901      	ldr	r1, [pc, #4]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	608b      	str	r3, [r1, #8]
 8003c3e:	e00b      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003c40:	40023800 	.word	0x40023800
 8003c44:	40007000 	.word	0x40007000
 8003c48:	0ffffcff 	.word	0x0ffffcff
 8003c4c:	4baa      	ldr	r3, [pc, #680]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	4aa9      	ldr	r2, [pc, #676]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c52:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003c56:	6093      	str	r3, [r2, #8]
 8003c58:	4ba7      	ldr	r3, [pc, #668]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c5a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c64:	49a4      	ldr	r1, [pc, #656]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0310 	and.w	r3, r3, #16
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d010      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c76:	4ba0      	ldr	r3, [pc, #640]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c7c:	4a9e      	ldr	r2, [pc, #632]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c82:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003c86:	4b9c      	ldr	r3, [pc, #624]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c88:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c90:	4999      	ldr	r1, [pc, #612]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00a      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ca4:	4b94      	ldr	r3, [pc, #592]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003caa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cb2:	4991      	ldr	r1, [pc, #580]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cc6:	4b8c      	ldr	r3, [pc, #560]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ccc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cd4:	4988      	ldr	r1, [pc, #544]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00a      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ce8:	4b83      	ldr	r3, [pc, #524]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cf6:	4980      	ldr	r1, [pc, #512]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00a      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d0a:	4b7b      	ldr	r3, [pc, #492]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d10:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d18:	4977      	ldr	r1, [pc, #476]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00a      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d2c:	4b72      	ldr	r3, [pc, #456]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d32:	f023 0203 	bic.w	r2, r3, #3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d3a:	496f      	ldr	r1, [pc, #444]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d4e:	4b6a      	ldr	r3, [pc, #424]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d54:	f023 020c 	bic.w	r2, r3, #12
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d5c:	4966      	ldr	r1, [pc, #408]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00a      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d70:	4b61      	ldr	r3, [pc, #388]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d76:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d7e:	495e      	ldr	r1, [pc, #376]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d92:	4b59      	ldr	r3, [pc, #356]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d98:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003da0:	4955      	ldr	r1, [pc, #340]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00a      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003db4:	4b50      	ldr	r3, [pc, #320]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dba:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dc2:	494d      	ldr	r1, [pc, #308]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00a      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003dd6:	4b48      	ldr	r3, [pc, #288]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ddc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003de4:	4944      	ldr	r1, [pc, #272]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00a      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003df8:	4b3f      	ldr	r3, [pc, #252]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dfe:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e06:	493c      	ldr	r1, [pc, #240]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003e1a:	4b37      	ldr	r3, [pc, #220]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e20:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e28:	4933      	ldr	r1, [pc, #204]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00a      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e3c:	4b2e      	ldr	r3, [pc, #184]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e42:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e4a:	492b      	ldr	r1, [pc, #172]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d011      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003e5e:	4b26      	ldr	r3, [pc, #152]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e64:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e6c:	4922      	ldr	r1, [pc, #136]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e7c:	d101      	bne.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0308 	and.w	r3, r3, #8
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00a      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e9e:	4b16      	ldr	r3, [pc, #88]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ea4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eac:	4912      	ldr	r1, [pc, #72]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00b      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ec0:	4b0d      	ldr	r3, [pc, #52]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ec6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ed0:	4909      	ldr	r1, [pc, #36]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d006      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f000 80d9 	beq.w	800409e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003eec:	4b02      	ldr	r3, [pc, #8]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a01      	ldr	r2, [pc, #4]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ef2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003ef6:	e001      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003ef8:	40023800 	.word	0x40023800
 8003efc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003efe:	f7fd fd67 	bl	80019d0 <HAL_GetTick>
 8003f02:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f04:	e008      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f06:	f7fd fd63 	bl	80019d0 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b64      	cmp	r3, #100	@ 0x64
 8003f12:	d901      	bls.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e194      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f18:	4b6c      	ldr	r3, [pc, #432]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1f0      	bne.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d021      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d11d      	bne.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f38:	4b64      	ldr	r3, [pc, #400]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f3e:	0c1b      	lsrs	r3, r3, #16
 8003f40:	f003 0303 	and.w	r3, r3, #3
 8003f44:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f46:	4b61      	ldr	r3, [pc, #388]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f4c:	0e1b      	lsrs	r3, r3, #24
 8003f4e:	f003 030f 	and.w	r3, r3, #15
 8003f52:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	019a      	lsls	r2, r3, #6
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	041b      	lsls	r3, r3, #16
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	061b      	lsls	r3, r3, #24
 8003f64:	431a      	orrs	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	071b      	lsls	r3, r3, #28
 8003f6c:	4957      	ldr	r1, [pc, #348]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d004      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f84:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f88:	d00a      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d02e      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f9e:	d129      	bne.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003fa0:	4b4a      	ldr	r3, [pc, #296]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fa6:	0c1b      	lsrs	r3, r3, #16
 8003fa8:	f003 0303 	and.w	r3, r3, #3
 8003fac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003fae:	4b47      	ldr	r3, [pc, #284]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fb4:	0f1b      	lsrs	r3, r3, #28
 8003fb6:	f003 0307 	and.w	r3, r3, #7
 8003fba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	019a      	lsls	r2, r3, #6
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	041b      	lsls	r3, r3, #16
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	061b      	lsls	r3, r3, #24
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	071b      	lsls	r3, r3, #28
 8003fd4:	493d      	ldr	r1, [pc, #244]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003fdc:	4b3b      	ldr	r3, [pc, #236]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fe2:	f023 021f 	bic.w	r2, r3, #31
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fea:	3b01      	subs	r3, #1
 8003fec:	4937      	ldr	r1, [pc, #220]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d01d      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004000:	4b32      	ldr	r3, [pc, #200]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004002:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004006:	0e1b      	lsrs	r3, r3, #24
 8004008:	f003 030f 	and.w	r3, r3, #15
 800400c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800400e:	4b2f      	ldr	r3, [pc, #188]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004010:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004014:	0f1b      	lsrs	r3, r3, #28
 8004016:	f003 0307 	and.w	r3, r3, #7
 800401a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	019a      	lsls	r2, r3, #6
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	041b      	lsls	r3, r3, #16
 8004028:	431a      	orrs	r2, r3
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	061b      	lsls	r3, r3, #24
 800402e:	431a      	orrs	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	071b      	lsls	r3, r3, #28
 8004034:	4925      	ldr	r1, [pc, #148]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004036:	4313      	orrs	r3, r2
 8004038:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d011      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	019a      	lsls	r2, r3, #6
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	041b      	lsls	r3, r3, #16
 8004054:	431a      	orrs	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	061b      	lsls	r3, r3, #24
 800405c:	431a      	orrs	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	071b      	lsls	r3, r3, #28
 8004064:	4919      	ldr	r1, [pc, #100]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004066:	4313      	orrs	r3, r2
 8004068:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800406c:	4b17      	ldr	r3, [pc, #92]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a16      	ldr	r2, [pc, #88]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004072:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004076:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004078:	f7fd fcaa 	bl	80019d0 <HAL_GetTick>
 800407c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800407e:	e008      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004080:	f7fd fca6 	bl	80019d0 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b64      	cmp	r3, #100	@ 0x64
 800408c:	d901      	bls.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e0d7      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004092:	4b0e      	ldr	r3, [pc, #56]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d0f0      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	f040 80cd 	bne.w	8004240 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80040a6:	4b09      	ldr	r3, [pc, #36]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a08      	ldr	r2, [pc, #32]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040b2:	f7fd fc8d 	bl	80019d0 <HAL_GetTick>
 80040b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040b8:	e00a      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80040ba:	f7fd fc89 	bl	80019d0 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b64      	cmp	r3, #100	@ 0x64
 80040c6:	d903      	bls.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e0ba      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80040cc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040d0:	4b5e      	ldr	r3, [pc, #376]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040dc:	d0ed      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d009      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d02e      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004102:	2b00      	cmp	r3, #0
 8004104:	d12a      	bne.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004106:	4b51      	ldr	r3, [pc, #324]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800410c:	0c1b      	lsrs	r3, r3, #16
 800410e:	f003 0303 	and.w	r3, r3, #3
 8004112:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004114:	4b4d      	ldr	r3, [pc, #308]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800411a:	0f1b      	lsrs	r3, r3, #28
 800411c:	f003 0307 	and.w	r3, r3, #7
 8004120:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	019a      	lsls	r2, r3, #6
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	041b      	lsls	r3, r3, #16
 800412c:	431a      	orrs	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	061b      	lsls	r3, r3, #24
 8004134:	431a      	orrs	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	071b      	lsls	r3, r3, #28
 800413a:	4944      	ldr	r1, [pc, #272]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800413c:	4313      	orrs	r3, r2
 800413e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004142:	4b42      	ldr	r3, [pc, #264]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004144:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004148:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004150:	3b01      	subs	r3, #1
 8004152:	021b      	lsls	r3, r3, #8
 8004154:	493d      	ldr	r1, [pc, #244]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004156:	4313      	orrs	r3, r2
 8004158:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d022      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800416c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004170:	d11d      	bne.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004172:	4b36      	ldr	r3, [pc, #216]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004174:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004178:	0e1b      	lsrs	r3, r3, #24
 800417a:	f003 030f 	and.w	r3, r3, #15
 800417e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004180:	4b32      	ldr	r3, [pc, #200]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004186:	0f1b      	lsrs	r3, r3, #28
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	019a      	lsls	r2, r3, #6
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a1b      	ldr	r3, [r3, #32]
 8004198:	041b      	lsls	r3, r3, #16
 800419a:	431a      	orrs	r2, r3
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	061b      	lsls	r3, r3, #24
 80041a0:	431a      	orrs	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	071b      	lsls	r3, r3, #28
 80041a6:	4929      	ldr	r1, [pc, #164]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0308 	and.w	r3, r3, #8
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d028      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80041ba:	4b24      	ldr	r3, [pc, #144]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041c0:	0e1b      	lsrs	r3, r3, #24
 80041c2:	f003 030f 	and.w	r3, r3, #15
 80041c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80041c8:	4b20      	ldr	r3, [pc, #128]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ce:	0c1b      	lsrs	r3, r3, #16
 80041d0:	f003 0303 	and.w	r3, r3, #3
 80041d4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	019a      	lsls	r2, r3, #6
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	041b      	lsls	r3, r3, #16
 80041e0:	431a      	orrs	r2, r3
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	061b      	lsls	r3, r3, #24
 80041e6:	431a      	orrs	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	69db      	ldr	r3, [r3, #28]
 80041ec:	071b      	lsls	r3, r3, #28
 80041ee:	4917      	ldr	r1, [pc, #92]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80041f6:	4b15      	ldr	r3, [pc, #84]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004204:	4911      	ldr	r1, [pc, #68]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004206:	4313      	orrs	r3, r2
 8004208:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800420c:	4b0f      	ldr	r3, [pc, #60]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a0e      	ldr	r2, [pc, #56]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004212:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004216:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004218:	f7fd fbda 	bl	80019d0 <HAL_GetTick>
 800421c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800421e:	e008      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004220:	f7fd fbd6 	bl	80019d0 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b64      	cmp	r3, #100	@ 0x64
 800422c:	d901      	bls.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e007      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004232:	4b06      	ldr	r3, [pc, #24]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800423a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800423e:	d1ef      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3720      	adds	r7, #32
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	40023800 	.word	0x40023800

08004250 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e022      	b.n	80042a8 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d105      	bne.n	800427a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f7fd f92b 	bl	80014d0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2203      	movs	r2, #3
 800427e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f814 	bl	80042b0 <HAL_SD_InitCard>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e00a      	b.n	80042a8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80042b0:	b5b0      	push	{r4, r5, r7, lr}
 80042b2:	b08e      	sub	sp, #56	@ 0x38
 80042b4:	af04      	add	r7, sp, #16
 80042b6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80042b8:	2300      	movs	r3, #0
 80042ba:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80042bc:	2300      	movs	r3, #0
 80042be:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80042c0:	2300      	movs	r3, #0
 80042c2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80042c4:	2300      	movs	r3, #0
 80042c6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80042c8:	2300      	movs	r3, #0
 80042ca:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80042cc:	2376      	movs	r3, #118	@ 0x76
 80042ce:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681d      	ldr	r5, [r3, #0]
 80042d4:	466c      	mov	r4, sp
 80042d6:	f107 0314 	add.w	r3, r7, #20
 80042da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80042de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80042e2:	f107 0308 	add.w	r3, r7, #8
 80042e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042e8:	4628      	mov	r0, r5
 80042ea:	f001 f9d3 	bl	8005694 <SDMMC_Init>
 80042ee:	4603      	mov	r3, r0
 80042f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 80042f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e059      	b.n	80043b4 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	685a      	ldr	r2, [r3, #4]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800430e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4618      	mov	r0, r3
 8004316:	f001 fa07 	bl	8005728 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004328:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800432a:	2002      	movs	r0, #2
 800432c:	f7fd fb5c 	bl	80019e8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 ff59 	bl	80051e8 <SD_PowerON>
 8004336:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004338:	6a3b      	ldr	r3, [r7, #32]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00b      	beq.n	8004356 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800434a:	6a3b      	ldr	r3, [r7, #32]
 800434c:	431a      	orrs	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e02e      	b.n	80043b4 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 fe78 	bl	800504c <SD_InitCard>
 800435c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800435e:	6a3b      	ldr	r3, [r7, #32]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00b      	beq.n	800437c <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004370:	6a3b      	ldr	r3, [r7, #32]
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e01b      	b.n	80043b4 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004384:	4618      	mov	r0, r3
 8004386:	f001 fa61 	bl	800584c <SDMMC_CmdBlockLength>
 800438a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800438c:	6a3b      	ldr	r3, [r7, #32]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00f      	beq.n	80043b2 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a09      	ldr	r2, [pc, #36]	@ (80043bc <HAL_SD_InitCard+0x10c>)
 8004398:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800439e:	6a3b      	ldr	r3, [r7, #32]
 80043a0:	431a      	orrs	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e000      	b.n	80043b4 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3728      	adds	r7, #40	@ 0x28
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bdb0      	pop	{r4, r5, r7, pc}
 80043bc:	004005ff 	.word	0x004005ff

080043c0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b08c      	sub	sp, #48	@ 0x30
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
 80043cc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d107      	bne.n	80043e8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043dc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e0c3      	b.n	8004570 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	f040 80bc 	bne.w	800456e <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80043fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	441a      	add	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004406:	429a      	cmp	r2, r3
 8004408:	d907      	bls.n	800441a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800440e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e0aa      	b.n	8004570 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2203      	movs	r2, #3
 800441e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2200      	movs	r2, #0
 8004428:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8004438:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443e:	4a4e      	ldr	r2, [pc, #312]	@ (8004578 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8004440:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004446:	4a4d      	ldr	r2, [pc, #308]	@ (800457c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8004448:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444e:	2200      	movs	r2, #0
 8004450:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004456:	2200      	movs	r2, #0
 8004458:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446a:	689a      	ldr	r2, [r3, #8]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	430a      	orrs	r2, r1
 8004474:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	3380      	adds	r3, #128	@ 0x80
 8004480:	4619      	mov	r1, r3
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	025b      	lsls	r3, r3, #9
 8004488:	089b      	lsrs	r3, r3, #2
 800448a:	f7fd fc91 	bl	8001db0 <HAL_DMA_Start_IT>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d017      	beq.n	80044c4 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 80044a2:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a35      	ldr	r2, [pc, #212]	@ (8004580 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80044aa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e055      	b.n	8004570 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 0208 	orr.w	r2, r2, #8
 80044d2:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d002      	beq.n	80044e2 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 80044dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044de:	025b      	lsls	r3, r3, #9
 80044e0:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80044e2:	f04f 33ff 	mov.w	r3, #4294967295
 80044e6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	025b      	lsls	r3, r3, #9
 80044ec:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80044ee:	2390      	movs	r3, #144	@ 0x90
 80044f0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80044f2:	2302      	movs	r3, #2
 80044f4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80044f6:	2300      	movs	r3, #0
 80044f8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80044fa:	2301      	movs	r3, #1
 80044fc:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f107 0210 	add.w	r2, r7, #16
 8004506:	4611      	mov	r1, r2
 8004508:	4618      	mov	r0, r3
 800450a:	f001 f973 	bl	80057f4 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d90a      	bls.n	800452a <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2282      	movs	r2, #130	@ 0x82
 8004518:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004520:	4618      	mov	r0, r3
 8004522:	f001 f9d7 	bl	80058d4 <SDMMC_CmdReadMultiBlock>
 8004526:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8004528:	e009      	b.n	800453e <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2281      	movs	r2, #129	@ 0x81
 800452e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004536:	4618      	mov	r0, r3
 8004538:	f001 f9aa 	bl	8005890 <SDMMC_CmdReadSingleBlock>
 800453c:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800453e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004540:	2b00      	cmp	r3, #0
 8004542:	d012      	beq.n	800456a <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a0d      	ldr	r2, [pc, #52]	@ (8004580 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800454a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004552:	431a      	orrs	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e002      	b.n	8004570 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800456a:	2300      	movs	r3, #0
 800456c:	e000      	b.n	8004570 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800456e:	2302      	movs	r3, #2
  }
}
 8004570:	4618      	mov	r0, r3
 8004572:	3730      	adds	r7, #48	@ 0x30
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	08004e5b 	.word	0x08004e5b
 800457c:	08004ecd 	.word	0x08004ecd
 8004580:	004005ff 	.word	0x004005ff

08004584 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b08c      	sub	sp, #48	@ 0x30
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
 8004590:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d107      	bne.n	80045ac <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045a0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e0c6      	b.n	800473a <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	f040 80bf 	bne.w	8004738 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80045c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	441a      	add	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d907      	bls.n	80045de <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d2:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e0ad      	b.n	800473a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2203      	movs	r2, #3
 80045e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2200      	movs	r2, #0
 80045ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f042 021a 	orr.w	r2, r2, #26
 80045fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004602:	4a50      	ldr	r2, [pc, #320]	@ (8004744 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8004604:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800460a:	4a4f      	ldr	r2, [pc, #316]	@ (8004748 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800460c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004612:	2200      	movs	r2, #0
 8004614:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800461a:	2b01      	cmp	r3, #1
 800461c:	d002      	beq.n	8004624 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800461e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004620:	025b      	lsls	r3, r3, #9
 8004622:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d90a      	bls.n	8004640 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	22a0      	movs	r2, #160	@ 0xa0
 800462e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004636:	4618      	mov	r0, r3
 8004638:	f001 f990 	bl	800595c <SDMMC_CmdWriteMultiBlock>
 800463c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800463e:	e009      	b.n	8004654 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2290      	movs	r2, #144	@ 0x90
 8004644:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800464c:	4618      	mov	r0, r3
 800464e:	f001 f963 	bl	8005918 <SDMMC_CmdWriteSingleBlock>
 8004652:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004656:	2b00      	cmp	r3, #0
 8004658:	d012      	beq.n	8004680 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a3b      	ldr	r2, [pc, #236]	@ (800474c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8004660:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004668:	431a      	orrs	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e05c      	b.n	800473a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0208 	orr.w	r2, r2, #8
 800468e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004694:	2240      	movs	r2, #64	@ 0x40
 8004696:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046a8:	689a      	ldr	r2, [r3, #8]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	430a      	orrs	r2, r1
 80046b2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80046b8:	68b9      	ldr	r1, [r7, #8]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	3380      	adds	r3, #128	@ 0x80
 80046c0:	461a      	mov	r2, r3
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	025b      	lsls	r3, r3, #9
 80046c6:	089b      	lsrs	r3, r3, #2
 80046c8:	f7fd fb72 	bl	8001db0 <HAL_DMA_Start_IT>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d01a      	beq.n	8004708 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f022 021a 	bic.w	r2, r2, #26
 80046e0:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a19      	ldr	r2, [pc, #100]	@ (800474c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80046e8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ee:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e018      	b.n	800473a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004708:	f04f 33ff 	mov.w	r3, #4294967295
 800470c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	025b      	lsls	r3, r3, #9
 8004712:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004714:	2390      	movs	r3, #144	@ 0x90
 8004716:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8004718:	2300      	movs	r3, #0
 800471a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800471c:	2300      	movs	r3, #0
 800471e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8004720:	2301      	movs	r3, #1
 8004722:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f107 0210 	add.w	r2, r7, #16
 800472c:	4611      	mov	r1, r2
 800472e:	4618      	mov	r0, r3
 8004730:	f001 f860 	bl	80057f4 <SDMMC_ConfigData>

      return HAL_OK;
 8004734:	2300      	movs	r3, #0
 8004736:	e000      	b.n	800473a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8004738:	2302      	movs	r3, #2
  }
}
 800473a:	4618      	mov	r0, r3
 800473c:	3730      	adds	r7, #48	@ 0x30
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	08004e31 	.word	0x08004e31
 8004748:	08004ecd 	.word	0x08004ecd
 800474c:	004005ff 	.word	0x004005ff

08004750 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800475c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004764:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d008      	beq.n	800477e <HAL_SD_IRQHandler+0x2e>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f003 0308 	and.w	r3, r3, #8
 8004772:	2b00      	cmp	r3, #0
 8004774:	d003      	beq.n	800477e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 fdec 	bl	8005354 <SD_Read_IT>
 800477c:	e15a      	b.n	8004a34 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004784:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004788:	2b00      	cmp	r3, #0
 800478a:	f000 808d 	beq.w	80048a8 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004796:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	4b9a      	ldr	r3, [pc, #616]	@ (8004a0c <HAL_SD_IRQHandler+0x2bc>)
 80047a4:	400b      	ands	r3, r1
 80047a6:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f022 0201 	bic.w	r2, r2, #1
 80047b6:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f003 0308 	and.w	r3, r3, #8
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d039      	beq.n	8004836 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d104      	bne.n	80047d6 <HAL_SD_IRQHandler+0x86>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f003 0320 	and.w	r3, r3, #32
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d011      	beq.n	80047fa <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4618      	mov	r0, r3
 80047dc:	f001 f8e0 	bl	80059a0 <SDMMC_CmdStopTransfer>
 80047e0:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d008      	beq.n	80047fa <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	431a      	orrs	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 f921 	bl	8004a3c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004802:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	2b00      	cmp	r3, #0
 800481a:	d104      	bne.n	8004826 <HAL_SD_IRQHandler+0xd6>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f003 0302 	and.w	r3, r3, #2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d003      	beq.n	800482e <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f001 fcf6 	bl	8006218 <HAL_SD_RxCpltCallback>
 800482c:	e102      	b.n	8004a34 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f001 fce8 	bl	8006204 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004834:	e0fe      	b.n	8004a34 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800483c:	2b00      	cmp	r3, #0
 800483e:	f000 80f9 	beq.w	8004a34 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f003 0320 	and.w	r3, r3, #32
 8004848:	2b00      	cmp	r3, #0
 800484a:	d011      	beq.n	8004870 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4618      	mov	r0, r3
 8004852:	f001 f8a5 	bl	80059a0 <SDMMC_CmdStopTransfer>
 8004856:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d008      	beq.n	8004870 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	431a      	orrs	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 f8e6 	bl	8004a3c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b00      	cmp	r3, #0
 8004878:	f040 80dc 	bne.w	8004a34 <HAL_SD_IRQHandler+0x2e4>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b00      	cmp	r3, #0
 8004884:	f040 80d6 	bne.w	8004a34 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f022 0208 	bic.w	r2, r2, #8
 8004896:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f001 fcaf 	bl	8006204 <HAL_SD_TxCpltCallback>
}
 80048a6:	e0c5      	b.n	8004a34 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d008      	beq.n	80048c8 <HAL_SD_IRQHandler+0x178>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f003 0308 	and.w	r3, r3, #8
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d003      	beq.n	80048c8 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 fd98 	bl	80053f6 <SD_Write_IT>
 80048c6:	e0b5      	b.n	8004a34 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ce:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 80ae 	beq.w	8004a34 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d005      	beq.n	80048f2 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ea:	f043 0202 	orr.w	r2, r3, #2
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048f8:	f003 0308 	and.w	r3, r3, #8
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d005      	beq.n	800490c <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004904:	f043 0208 	orr.w	r2, r3, #8
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004912:	f003 0320 	and.w	r3, r3, #32
 8004916:	2b00      	cmp	r3, #0
 8004918:	d005      	beq.n	8004926 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800491e:	f043 0220 	orr.w	r2, r3, #32
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800492c:	f003 0310 	and.w	r3, r3, #16
 8004930:	2b00      	cmp	r3, #0
 8004932:	d005      	beq.n	8004940 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004938:	f043 0210 	orr.w	r2, r3, #16
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004948:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8004958:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4618      	mov	r0, r3
 8004960:	f001 f81e 	bl	80059a0 <SDMMC_CmdStopTransfer>
 8004964:	4602      	mov	r2, r0
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800496a:	431a      	orrs	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f003 0308 	and.w	r3, r3, #8
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00a      	beq.n	8004990 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f857 	bl	8004a3c <HAL_SD_ErrorCallback>
}
 800498e:	e051      	b.n	8004a34 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004996:	2b00      	cmp	r3, #0
 8004998:	d04c      	beq.n	8004a34 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f003 0310 	and.w	r3, r3, #16
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d104      	bne.n	80049ae <HAL_SD_IRQHandler+0x25e>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f003 0320 	and.w	r3, r3, #32
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d011      	beq.n	80049d2 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049b2:	4a17      	ldr	r2, [pc, #92]	@ (8004a10 <HAL_SD_IRQHandler+0x2c0>)
 80049b4:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fd fa58 	bl	8001e70 <HAL_DMA_Abort_IT>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d036      	beq.n	8004a34 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ca:	4618      	mov	r0, r3
 80049cc:	f000 fad0 	bl	8004f70 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80049d0:	e030      	b.n	8004a34 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d104      	bne.n	80049e6 <HAL_SD_IRQHandler+0x296>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d018      	beq.n	8004a18 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004a14 <HAL_SD_IRQHandler+0x2c4>)
 80049ec:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7fd fa3c 	bl	8001e70 <HAL_DMA_Abort_IT>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d01a      	beq.n	8004a34 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 faeb 	bl	8004fde <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004a08:	e014      	b.n	8004a34 <HAL_SD_IRQHandler+0x2e4>
 8004a0a:	bf00      	nop
 8004a0c:	ffff3ec5 	.word	0xffff3ec5
 8004a10:	08004f71 	.word	0x08004f71
 8004a14:	08004fdf 	.word	0x08004fdf
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f001 fbdf 	bl	80061f0 <HAL_SD_AbortCallback>
}
 8004a32:	e7ff      	b.n	8004a34 <HAL_SD_IRQHandler+0x2e4>
 8004a34:	bf00      	nop
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a5e:	0f9b      	lsrs	r3, r3, #30
 8004a60:	b2da      	uxtb	r2, r3
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a6a:	0e9b      	lsrs	r3, r3, #26
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	b2da      	uxtb	r2, r3
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a7c:	0e1b      	lsrs	r3, r3, #24
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	f003 0303 	and.w	r3, r3, #3
 8004a84:	b2da      	uxtb	r2, r3
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a8e:	0c1b      	lsrs	r3, r3, #16
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a9a:	0a1b      	lsrs	r3, r3, #8
 8004a9c:	b2da      	uxtb	r2, r3
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004aa6:	b2da      	uxtb	r2, r3
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ab0:	0d1b      	lsrs	r3, r3, #20
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004abc:	0c1b      	lsrs	r3, r3, #16
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	f003 030f 	and.w	r3, r3, #15
 8004ac4:	b2da      	uxtb	r2, r3
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ace:	0bdb      	lsrs	r3, r3, #15
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	b2da      	uxtb	r2, r3
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ae0:	0b9b      	lsrs	r3, r3, #14
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	f003 0301 	and.w	r3, r3, #1
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004af2:	0b5b      	lsrs	r3, r3, #13
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b04:	0b1b      	lsrs	r3, r3, #12
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	f003 0301 	and.w	r3, r3, #1
 8004b0c:	b2da      	uxtb	r2, r3
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	2200      	movs	r2, #0
 8004b16:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d163      	bne.n	8004be8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b24:	009a      	lsls	r2, r3, #2
 8004b26:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8004b30:	0f92      	lsrs	r2, r2, #30
 8004b32:	431a      	orrs	r2, r3
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b3c:	0edb      	lsrs	r3, r3, #27
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	f003 0307 	and.w	r3, r3, #7
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b4e:	0e1b      	lsrs	r3, r3, #24
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	b2da      	uxtb	r2, r3
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b60:	0d5b      	lsrs	r3, r3, #21
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	f003 0307 	and.w	r3, r3, #7
 8004b68:	b2da      	uxtb	r2, r3
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b72:	0c9b      	lsrs	r3, r3, #18
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	f003 0307 	and.w	r3, r3, #7
 8004b7a:	b2da      	uxtb	r2, r3
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b84:	0bdb      	lsrs	r3, r3, #15
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	f003 0307 	and.w	r3, r3, #7
 8004b8c:	b2da      	uxtb	r2, r3
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	1c5a      	adds	r2, r3, #1
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	7e1b      	ldrb	r3, [r3, #24]
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	f003 0307 	and.w	r3, r3, #7
 8004ba6:	3302      	adds	r3, #2
 8004ba8:	2201      	movs	r2, #1
 8004baa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004bb2:	fb03 f202 	mul.w	r2, r3, r2
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	7a1b      	ldrb	r3, [r3, #8]
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	f003 030f 	and.w	r3, r3, #15
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	409a      	lsls	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004bd4:	0a52      	lsrs	r2, r2, #9
 8004bd6:	fb03 f202 	mul.w	r2, r3, r2
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004be4:	661a      	str	r2, [r3, #96]	@ 0x60
 8004be6:	e031      	b.n	8004c4c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d11d      	bne.n	8004c2c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004bf4:	041b      	lsls	r3, r3, #16
 8004bf6:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bfe:	0c1b      	lsrs	r3, r3, #16
 8004c00:	431a      	orrs	r2, r3
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	029a      	lsls	r2, r3, #10
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c20:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	661a      	str	r2, [r3, #96]	@ 0x60
 8004c2a:	e00f      	b.n	8004c4c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a58      	ldr	r2, [pc, #352]	@ (8004d94 <HAL_SD_GetCardCSD+0x344>)
 8004c32:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c38:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e09d      	b.n	8004d88 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c50:	0b9b      	lsrs	r3, r3, #14
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	b2da      	uxtb	r2, r3
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c62:	09db      	lsrs	r3, r3, #7
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c6a:	b2da      	uxtb	r2, r3
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c7a:	b2da      	uxtb	r2, r3
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c84:	0fdb      	lsrs	r3, r3, #31
 8004c86:	b2da      	uxtb	r2, r3
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c90:	0f5b      	lsrs	r3, r3, #29
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	f003 0303 	and.w	r3, r3, #3
 8004c98:	b2da      	uxtb	r2, r3
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ca2:	0e9b      	lsrs	r3, r3, #26
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	f003 0307 	and.w	r3, r3, #7
 8004caa:	b2da      	uxtb	r2, r3
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cb4:	0d9b      	lsrs	r3, r3, #22
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	f003 030f 	and.w	r3, r3, #15
 8004cbc:	b2da      	uxtb	r2, r3
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cc6:	0d5b      	lsrs	r3, r3, #21
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	b2da      	uxtb	r2, r3
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ce2:	0c1b      	lsrs	r3, r3, #16
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	b2da      	uxtb	r2, r3
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cf6:	0bdb      	lsrs	r3, r3, #15
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	b2da      	uxtb	r2, r3
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d0a:	0b9b      	lsrs	r3, r3, #14
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	b2da      	uxtb	r2, r3
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d1e:	0b5b      	lsrs	r3, r3, #13
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	b2da      	uxtb	r2, r3
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d32:	0b1b      	lsrs	r3, r3, #12
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	b2da      	uxtb	r2, r3
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d46:	0a9b      	lsrs	r3, r3, #10
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	f003 0303 	and.w	r3, r3, #3
 8004d4e:	b2da      	uxtb	r2, r3
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d5a:	0a1b      	lsrs	r3, r3, #8
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	f003 0303 	and.w	r3, r3, #3
 8004d62:	b2da      	uxtb	r2, r3
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d6e:	085b      	lsrs	r3, r3, #1
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d76:	b2da      	uxtb	r2, r3
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr
 8004d94:	004005ff 	.word	0x004005ff

08004d98 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004dfc:	f107 030c 	add.w	r3, r7, #12
 8004e00:	4619      	mov	r1, r3
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 fa7e 	bl	8005304 <SD_SendStatus>
 8004e08:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d005      	beq.n	8004e1c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	431a      	orrs	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	0a5b      	lsrs	r3, r3, #9
 8004e20:	f003 030f 	and.w	r3, r3, #15
 8004e24:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004e26:	693b      	ldr	r3, [r7, #16]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3718      	adds	r7, #24
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e3c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e4c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004e4e:	bf00      	nop
 8004e50:	3714      	adds	r7, #20
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b084      	sub	sp, #16
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e66:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e6c:	2b82      	cmp	r3, #130	@ 0x82
 8004e6e:	d111      	bne.n	8004e94 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f000 fd93 	bl	80059a0 <SDMMC_CmdStopTransfer>
 8004e7a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d008      	beq.n	8004e94 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	431a      	orrs	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f7ff fdd4 	bl	8004a3c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f022 0208 	bic.w	r2, r2, #8
 8004ea2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004eac:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f001 f9ab 	bl	8006218 <HAL_SD_RxCpltCallback>
#endif
}
 8004ec2:	bf00      	nop
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
	...

08004ecc <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ed8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f7fd f974 	bl	80021c8 <HAL_DMA_GetError>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d03e      	beq.n	8004f64 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eec:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ef2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ef4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d002      	beq.n	8004f02 <SD_DMAError+0x36>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d12d      	bne.n	8004f5e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a19      	ldr	r2, [pc, #100]	@ (8004f6c <SD_DMAError+0xa0>)
 8004f08:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8004f18:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f1e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8004f26:	6978      	ldr	r0, [r7, #20]
 8004f28:	f7ff ff62 	bl	8004df0 <HAL_SD_GetCardState>
 8004f2c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	2b06      	cmp	r3, #6
 8004f32:	d002      	beq.n	8004f3a <SD_DMAError+0x6e>
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	2b05      	cmp	r3, #5
 8004f38:	d10a      	bne.n	8004f50 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 fd2e 	bl	80059a0 <SDMMC_CmdStopTransfer>
 8004f44:	4602      	mov	r2, r0
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8004f5e:	6978      	ldr	r0, [r7, #20]
 8004f60:	f7ff fd6c 	bl	8004a3c <HAL_SD_ErrorCallback>
#endif
  }
}
 8004f64:	bf00      	nop
 8004f66:	3718      	adds	r7, #24
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	004005ff 	.word	0x004005ff

08004f70 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f7c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004f86:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f7ff ff31 	bl	8004df0 <HAL_SD_GetCardState>
 8004f8e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	2b06      	cmp	r3, #6
 8004fa2:	d002      	beq.n	8004faa <SD_DMATxAbort+0x3a>
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	2b05      	cmp	r3, #5
 8004fa8:	d10a      	bne.n	8004fc0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f000 fcf6 	bl	80059a0 <SDMMC_CmdStopTransfer>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d103      	bne.n	8004fd0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f001 f911 	bl	80061f0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004fce:	e002      	b.n	8004fd6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f7ff fd33 	bl	8004a3c <HAL_SD_ErrorCallback>
}
 8004fd6:	bf00      	nop
 8004fd8:	3710      	adds	r7, #16
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b084      	sub	sp, #16
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fea:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004ff4:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f7ff fefa 	bl	8004df0 <HAL_SD_GetCardState>
 8004ffc:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	2b06      	cmp	r3, #6
 8005010:	d002      	beq.n	8005018 <SD_DMARxAbort+0x3a>
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	2b05      	cmp	r3, #5
 8005016:	d10a      	bne.n	800502e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4618      	mov	r0, r3
 800501e:	f000 fcbf 	bl	80059a0 <SDMMC_CmdStopTransfer>
 8005022:	4602      	mov	r2, r0
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005028:	431a      	orrs	r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005032:	2b00      	cmp	r3, #0
 8005034:	d103      	bne.n	800503e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f001 f8da 	bl	80061f0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800503c:	e002      	b.n	8005044 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f7ff fcfc 	bl	8004a3c <HAL_SD_ErrorCallback>
}
 8005044:	bf00      	nop
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800504c:	b5b0      	push	{r4, r5, r7, lr}
 800504e:	b094      	sub	sp, #80	@ 0x50
 8005050:	af04      	add	r7, sp, #16
 8005052:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005054:	2301      	movs	r3, #1
 8005056:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4618      	mov	r0, r3
 800505e:	f000 fb71 	bl	8005744 <SDMMC_GetPowerState>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d102      	bne.n	800506e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005068:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800506c:	e0b8      	b.n	80051e0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005072:	2b03      	cmp	r3, #3
 8005074:	d02f      	beq.n	80050d6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4618      	mov	r0, r3
 800507c:	f000 fd58 	bl	8005b30 <SDMMC_CmdSendCID>
 8005080:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005084:	2b00      	cmp	r3, #0
 8005086:	d001      	beq.n	800508c <SD_InitCard+0x40>
    {
      return errorstate;
 8005088:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800508a:	e0a9      	b.n	80051e0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2100      	movs	r1, #0
 8005092:	4618      	mov	r0, r3
 8005094:	f000 fb9b 	bl	80057ce <SDMMC_GetResponse>
 8005098:	4602      	mov	r2, r0
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2104      	movs	r1, #4
 80050a4:	4618      	mov	r0, r3
 80050a6:	f000 fb92 	bl	80057ce <SDMMC_GetResponse>
 80050aa:	4602      	mov	r2, r0
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2108      	movs	r1, #8
 80050b6:	4618      	mov	r0, r3
 80050b8:	f000 fb89 	bl	80057ce <SDMMC_GetResponse>
 80050bc:	4602      	mov	r2, r0
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	210c      	movs	r1, #12
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 fb80 	bl	80057ce <SDMMC_GetResponse>
 80050ce:	4602      	mov	r2, r0
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050da:	2b03      	cmp	r3, #3
 80050dc:	d00d      	beq.n	80050fa <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f107 020e 	add.w	r2, r7, #14
 80050e6:	4611      	mov	r1, r2
 80050e8:	4618      	mov	r0, r3
 80050ea:	f000 fd5e 	bl	8005baa <SDMMC_CmdSetRelAdd>
 80050ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80050f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <SD_InitCard+0xae>
    {
      return errorstate;
 80050f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050f8:	e072      	b.n	80051e0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050fe:	2b03      	cmp	r3, #3
 8005100:	d036      	beq.n	8005170 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005102:	89fb      	ldrh	r3, [r7, #14]
 8005104:	461a      	mov	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005112:	041b      	lsls	r3, r3, #16
 8005114:	4619      	mov	r1, r3
 8005116:	4610      	mov	r0, r2
 8005118:	f000 fd28 	bl	8005b6c <SDMMC_CmdSendCSD>
 800511c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800511e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005120:	2b00      	cmp	r3, #0
 8005122:	d001      	beq.n	8005128 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005124:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005126:	e05b      	b.n	80051e0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2100      	movs	r1, #0
 800512e:	4618      	mov	r0, r3
 8005130:	f000 fb4d 	bl	80057ce <SDMMC_GetResponse>
 8005134:	4602      	mov	r2, r0
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2104      	movs	r1, #4
 8005140:	4618      	mov	r0, r3
 8005142:	f000 fb44 	bl	80057ce <SDMMC_GetResponse>
 8005146:	4602      	mov	r2, r0
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2108      	movs	r1, #8
 8005152:	4618      	mov	r0, r3
 8005154:	f000 fb3b 	bl	80057ce <SDMMC_GetResponse>
 8005158:	4602      	mov	r2, r0
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	210c      	movs	r1, #12
 8005164:	4618      	mov	r0, r3
 8005166:	f000 fb32 	bl	80057ce <SDMMC_GetResponse>
 800516a:	4602      	mov	r2, r0
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2104      	movs	r1, #4
 8005176:	4618      	mov	r0, r3
 8005178:	f000 fb29 	bl	80057ce <SDMMC_GetResponse>
 800517c:	4603      	mov	r3, r0
 800517e:	0d1a      	lsrs	r2, r3, #20
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005184:	f107 0310 	add.w	r3, r7, #16
 8005188:	4619      	mov	r1, r3
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7ff fc60 	bl	8004a50 <HAL_SD_GetCardCSD>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d002      	beq.n	800519c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005196:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800519a:	e021      	b.n	80051e0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6819      	ldr	r1, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051a4:	041b      	lsls	r3, r3, #16
 80051a6:	2200      	movs	r2, #0
 80051a8:	461c      	mov	r4, r3
 80051aa:	4615      	mov	r5, r2
 80051ac:	4622      	mov	r2, r4
 80051ae:	462b      	mov	r3, r5
 80051b0:	4608      	mov	r0, r1
 80051b2:	f000 fc17 	bl	80059e4 <SDMMC_CmdSelDesel>
 80051b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80051b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <SD_InitCard+0x176>
  {
    return errorstate;
 80051be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051c0:	e00e      	b.n	80051e0 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681d      	ldr	r5, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	466c      	mov	r4, sp
 80051ca:	f103 0210 	add.w	r2, r3, #16
 80051ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80051d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80051d4:	3304      	adds	r3, #4
 80051d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051d8:	4628      	mov	r0, r5
 80051da:	f000 fa5b 	bl	8005694 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3740      	adds	r7, #64	@ 0x40
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bdb0      	pop	{r4, r5, r7, pc}

080051e8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051f0:	2300      	movs	r3, #0
 80051f2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80051f4:	2300      	movs	r3, #0
 80051f6:	617b      	str	r3, [r7, #20]
 80051f8:	2300      	movs	r3, #0
 80051fa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4618      	mov	r0, r3
 8005202:	f000 fc12 	bl	8005a2a <SDMMC_CmdGoIdleState>
 8005206:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d001      	beq.n	8005212 <SD_PowerON+0x2a>
  {
    return errorstate;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	e072      	b.n	80052f8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4618      	mov	r0, r3
 8005218:	f000 fc25 	bl	8005a66 <SDMMC_CmdOperCond>
 800521c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00d      	beq.n	8005240 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4618      	mov	r0, r3
 8005230:	f000 fbfb 	bl	8005a2a <SDMMC_CmdGoIdleState>
 8005234:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d004      	beq.n	8005246 <SD_PowerON+0x5e>
    {
      return errorstate;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	e05b      	b.n	80052f8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800524a:	2b01      	cmp	r3, #1
 800524c:	d137      	bne.n	80052be <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2100      	movs	r1, #0
 8005254:	4618      	mov	r0, r3
 8005256:	f000 fc25 	bl	8005aa4 <SDMMC_CmdAppCommand>
 800525a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d02d      	beq.n	80052be <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005262:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005266:	e047      	b.n	80052f8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2100      	movs	r1, #0
 800526e:	4618      	mov	r0, r3
 8005270:	f000 fc18 	bl	8005aa4 <SDMMC_CmdAppCommand>
 8005274:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d001      	beq.n	8005280 <SD_PowerON+0x98>
    {
      return errorstate;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	e03b      	b.n	80052f8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	491e      	ldr	r1, [pc, #120]	@ (8005300 <SD_PowerON+0x118>)
 8005286:	4618      	mov	r0, r3
 8005288:	f000 fc2e 	bl	8005ae8 <SDMMC_CmdAppOperCommand>
 800528c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d002      	beq.n	800529a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005294:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005298:	e02e      	b.n	80052f8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2100      	movs	r1, #0
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 fa94 	bl	80057ce <SDMMC_GetResponse>
 80052a6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	0fdb      	lsrs	r3, r3, #31
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d101      	bne.n	80052b4 <SD_PowerON+0xcc>
 80052b0:	2301      	movs	r3, #1
 80052b2:	e000      	b.n	80052b6 <SD_PowerON+0xce>
 80052b4:	2300      	movs	r3, #0
 80052b6:	613b      	str	r3, [r7, #16]

    count++;
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	3301      	adds	r3, #1
 80052bc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d802      	bhi.n	80052ce <SD_PowerON+0xe6>
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d0cc      	beq.n	8005268 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d902      	bls.n	80052de <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80052d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80052dc:	e00c      	b.n	80052f8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d003      	beq.n	80052f0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	645a      	str	r2, [r3, #68]	@ 0x44
 80052ee:	e002      	b.n	80052f6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3718      	adds	r7, #24
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	c1100000 	.word	0xc1100000

08005304 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d102      	bne.n	800531a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005314:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005318:	e018      	b.n	800534c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005322:	041b      	lsls	r3, r3, #16
 8005324:	4619      	mov	r1, r3
 8005326:	4610      	mov	r0, r2
 8005328:	f000 fc60 	bl	8005bec <SDMMC_CmdSendStatus>
 800532c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d001      	beq.n	8005338 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	e009      	b.n	800534c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2100      	movs	r1, #0
 800533e:	4618      	mov	r0, r3
 8005340:	f000 fa45 	bl	80057ce <SDMMC_GetResponse>
 8005344:	4602      	mov	r2, r0
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b086      	sub	sp, #24
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005360:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005366:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d03f      	beq.n	80053ee <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800536e:	2300      	movs	r3, #0
 8005370:	617b      	str	r3, [r7, #20]
 8005372:	e033      	b.n	80053dc <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4618      	mov	r0, r3
 800537a:	f000 f9b7 	bl	80056ec <SDMMC_ReadFIFO>
 800537e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	b2da      	uxtb	r2, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	3301      	adds	r3, #1
 800538c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	3b01      	subs	r3, #1
 8005392:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	0a1b      	lsrs	r3, r3, #8
 8005398:	b2da      	uxtb	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	3301      	adds	r3, #1
 80053a2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	3b01      	subs	r3, #1
 80053a8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	0c1b      	lsrs	r3, r3, #16
 80053ae:	b2da      	uxtb	r2, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	3301      	adds	r3, #1
 80053b8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	3b01      	subs	r3, #1
 80053be:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	0e1b      	lsrs	r3, r3, #24
 80053c4:	b2da      	uxtb	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	3301      	adds	r3, #1
 80053ce:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	3b01      	subs	r3, #1
 80053d4:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	3301      	adds	r3, #1
 80053da:	617b      	str	r3, [r7, #20]
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	2b07      	cmp	r3, #7
 80053e0:	d9c8      	bls.n	8005374 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 80053ee:	bf00      	nop
 80053f0:	3718      	adds	r7, #24
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b086      	sub	sp, #24
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005408:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d043      	beq.n	8005498 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8005410:	2300      	movs	r3, #0
 8005412:	617b      	str	r3, [r7, #20]
 8005414:	e037      	b.n	8005486 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	3301      	adds	r3, #1
 8005420:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	3b01      	subs	r3, #1
 8005426:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	021a      	lsls	r2, r3, #8
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	4313      	orrs	r3, r2
 8005432:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	3301      	adds	r3, #1
 8005438:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	3b01      	subs	r3, #1
 800543e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	041a      	lsls	r2, r3, #16
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	4313      	orrs	r3, r2
 800544a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	3301      	adds	r3, #1
 8005450:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	3b01      	subs	r3, #1
 8005456:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	061a      	lsls	r2, r3, #24
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	4313      	orrs	r3, r2
 8005462:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	3301      	adds	r3, #1
 8005468:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	3b01      	subs	r3, #1
 800546e:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f107 0208 	add.w	r2, r7, #8
 8005478:	4611      	mov	r1, r2
 800547a:	4618      	mov	r0, r3
 800547c:	f000 f943 	bl	8005706 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	3301      	adds	r3, #1
 8005484:	617b      	str	r3, [r7, #20]
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	2b07      	cmp	r3, #7
 800548a:	d9c4      	bls.n	8005416 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8005498:	bf00      	nop
 800549a:	3718      	adds	r7, #24
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d101      	bne.n	80054b4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e025      	b.n	8005500 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d106      	bne.n	80054ce <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f7fc f99d 	bl	8001808 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2202      	movs	r2, #2
 80054d2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	3304      	adds	r3, #4
 80054de:	4619      	mov	r1, r3
 80054e0:	4610      	mov	r0, r2
 80054e2:	f000 f811 	bl	8005508 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6818      	ldr	r0, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	461a      	mov	r2, r3
 80054f0:	6839      	ldr	r1, [r7, #0]
 80054f2:	f000 f865 	bl	80055c0 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3708      	adds	r7, #8
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d121      	bne.n	800555e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	4b27      	ldr	r3, [pc, #156]	@ (80055bc <FMC_SDRAM_Init+0xb4>)
 8005520:	4013      	ands	r3, r2
 8005522:	683a      	ldr	r2, [r7, #0]
 8005524:	6851      	ldr	r1, [r2, #4]
 8005526:	683a      	ldr	r2, [r7, #0]
 8005528:	6892      	ldr	r2, [r2, #8]
 800552a:	4311      	orrs	r1, r2
 800552c:	683a      	ldr	r2, [r7, #0]
 800552e:	68d2      	ldr	r2, [r2, #12]
 8005530:	4311      	orrs	r1, r2
 8005532:	683a      	ldr	r2, [r7, #0]
 8005534:	6912      	ldr	r2, [r2, #16]
 8005536:	4311      	orrs	r1, r2
 8005538:	683a      	ldr	r2, [r7, #0]
 800553a:	6952      	ldr	r2, [r2, #20]
 800553c:	4311      	orrs	r1, r2
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	6992      	ldr	r2, [r2, #24]
 8005542:	4311      	orrs	r1, r2
 8005544:	683a      	ldr	r2, [r7, #0]
 8005546:	69d2      	ldr	r2, [r2, #28]
 8005548:	4311      	orrs	r1, r2
 800554a:	683a      	ldr	r2, [r7, #0]
 800554c:	6a12      	ldr	r2, [r2, #32]
 800554e:	4311      	orrs	r1, r2
 8005550:	683a      	ldr	r2, [r7, #0]
 8005552:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005554:	430a      	orrs	r2, r1
 8005556:	431a      	orrs	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	601a      	str	r2, [r3, #0]
 800555c:	e026      	b.n	80055ac <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	69d9      	ldr	r1, [r3, #28]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	4319      	orrs	r1, r3
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005574:	430b      	orrs	r3, r1
 8005576:	431a      	orrs	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	4b0e      	ldr	r3, [pc, #56]	@ (80055bc <FMC_SDRAM_Init+0xb4>)
 8005582:	4013      	ands	r3, r2
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	6851      	ldr	r1, [r2, #4]
 8005588:	683a      	ldr	r2, [r7, #0]
 800558a:	6892      	ldr	r2, [r2, #8]
 800558c:	4311      	orrs	r1, r2
 800558e:	683a      	ldr	r2, [r7, #0]
 8005590:	68d2      	ldr	r2, [r2, #12]
 8005592:	4311      	orrs	r1, r2
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	6912      	ldr	r2, [r2, #16]
 8005598:	4311      	orrs	r1, r2
 800559a:	683a      	ldr	r2, [r7, #0]
 800559c:	6952      	ldr	r2, [r2, #20]
 800559e:	4311      	orrs	r1, r2
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	6992      	ldr	r2, [r2, #24]
 80055a4:	430a      	orrs	r2, r1
 80055a6:	431a      	orrs	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	ffff8000 	.word	0xffff8000

080055c0 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d128      	bne.n	8005624 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	1e59      	subs	r1, r3, #1
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	3b01      	subs	r3, #1
 80055e6:	011b      	lsls	r3, r3, #4
 80055e8:	4319      	orrs	r1, r3
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	3b01      	subs	r3, #1
 80055f0:	021b      	lsls	r3, r3, #8
 80055f2:	4319      	orrs	r1, r3
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	3b01      	subs	r3, #1
 80055fa:	031b      	lsls	r3, r3, #12
 80055fc:	4319      	orrs	r1, r3
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	3b01      	subs	r3, #1
 8005604:	041b      	lsls	r3, r3, #16
 8005606:	4319      	orrs	r1, r3
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	695b      	ldr	r3, [r3, #20]
 800560c:	3b01      	subs	r3, #1
 800560e:	051b      	lsls	r3, r3, #20
 8005610:	4319      	orrs	r1, r3
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	3b01      	subs	r3, #1
 8005618:	061b      	lsls	r3, r3, #24
 800561a:	430b      	orrs	r3, r1
 800561c:	431a      	orrs	r2, r3
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	609a      	str	r2, [r3, #8]
 8005622:	e02d      	b.n	8005680 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	689a      	ldr	r2, [r3, #8]
 8005628:	4b19      	ldr	r3, [pc, #100]	@ (8005690 <FMC_SDRAM_Timing_Init+0xd0>)
 800562a:	4013      	ands	r3, r2
 800562c:	68ba      	ldr	r2, [r7, #8]
 800562e:	68d2      	ldr	r2, [r2, #12]
 8005630:	3a01      	subs	r2, #1
 8005632:	0311      	lsls	r1, r2, #12
 8005634:	68ba      	ldr	r2, [r7, #8]
 8005636:	6952      	ldr	r2, [r2, #20]
 8005638:	3a01      	subs	r2, #1
 800563a:	0512      	lsls	r2, r2, #20
 800563c:	430a      	orrs	r2, r1
 800563e:	431a      	orrs	r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	1e59      	subs	r1, r3, #1
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	3b01      	subs	r3, #1
 8005658:	011b      	lsls	r3, r3, #4
 800565a:	4319      	orrs	r1, r3
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	3b01      	subs	r3, #1
 8005662:	021b      	lsls	r3, r3, #8
 8005664:	4319      	orrs	r1, r3
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	3b01      	subs	r3, #1
 800566c:	041b      	lsls	r3, r3, #16
 800566e:	4319      	orrs	r1, r3
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	3b01      	subs	r3, #1
 8005676:	061b      	lsls	r3, r3, #24
 8005678:	430b      	orrs	r3, r1
 800567a:	431a      	orrs	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3714      	adds	r7, #20
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	ff0f0fff 	.word	0xff0f0fff

08005694 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8005694:	b084      	sub	sp, #16
 8005696:	b480      	push	{r7}
 8005698:	b085      	sub	sp, #20
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
 800569e:	f107 001c 	add.w	r0, r7, #28
 80056a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80056a6:	2300      	movs	r3, #0
 80056a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80056aa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80056ac:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80056ae:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80056b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 80056b2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80056b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 80056b6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80056b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 80056ba:	431a      	orrs	r2, r3
             Init.ClockDiv
 80056bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 80056be:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685a      	ldr	r2, [r3, #4]
 80056ca:	4b07      	ldr	r3, [pc, #28]	@ (80056e8 <SDMMC_Init+0x54>)
 80056cc:	4013      	ands	r3, r2
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	431a      	orrs	r2, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	b004      	add	sp, #16
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	ffff8100 	.word	0xffff8100

080056ec <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr

08005706 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8005706:	b480      	push	{r7}
 8005708:	b083      	sub	sp, #12
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
 800570e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2203      	movs	r2, #3
 8005734:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	370c      	adds	r7, #12
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0303 	and.w	r3, r3, #3
}
 8005754:	4618      	mov	r0, r3
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800576a:	2300      	movs	r3, #0
 800576c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800577e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005784:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800578a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	4313      	orrs	r3, r2
 8005790:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68da      	ldr	r2, [r3, #12]
 8005796:	4b06      	ldr	r3, [pc, #24]	@ (80057b0 <SDMMC_SendCommand+0x50>)
 8005798:	4013      	ands	r3, r2
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	431a      	orrs	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3714      	adds	r7, #20
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	fffff000 	.word	0xfffff000

080057b4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	b2db      	uxtb	r3, r3
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	370c      	adds	r7, #12
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b085      	sub	sp, #20
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
 80057d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	3314      	adds	r3, #20
 80057dc:	461a      	mov	r2, r3
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	4413      	add	r3, r2
 80057e2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
}  
 80057e8:	4618      	mov	r0, r3
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80057fe:	2300      	movs	r3, #0
 8005800:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	685a      	ldr	r2, [r3, #4]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800581a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005820:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005826:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	4313      	orrs	r3, r2
 800582c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005832:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	431a      	orrs	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800583e:	2300      	movs	r3, #0

}
 8005840:	4618      	mov	r0, r3
 8005842:	3714      	adds	r7, #20
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b088      	sub	sp, #32
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800585a:	2310      	movs	r3, #16
 800585c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800585e:	2340      	movs	r3, #64	@ 0x40
 8005860:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005862:	2300      	movs	r3, #0
 8005864:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005866:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800586a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800586c:	f107 0308 	add.w	r3, r7, #8
 8005870:	4619      	mov	r1, r3
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7ff ff74 	bl	8005760 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8005878:	f241 3288 	movw	r2, #5000	@ 0x1388
 800587c:	2110      	movs	r1, #16
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f9d6 	bl	8005c30 <SDMMC_GetCmdResp1>
 8005884:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005886:	69fb      	ldr	r3, [r7, #28]
}
 8005888:	4618      	mov	r0, r3
 800588a:	3720      	adds	r7, #32
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b088      	sub	sp, #32
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800589e:	2311      	movs	r3, #17
 80058a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80058a2:	2340      	movs	r3, #64	@ 0x40
 80058a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80058a6:	2300      	movs	r3, #0
 80058a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80058aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80058ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80058b0:	f107 0308 	add.w	r3, r7, #8
 80058b4:	4619      	mov	r1, r3
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f7ff ff52 	bl	8005760 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80058bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058c0:	2111      	movs	r1, #17
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f9b4 	bl	8005c30 <SDMMC_GetCmdResp1>
 80058c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80058ca:	69fb      	ldr	r3, [r7, #28]
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3720      	adds	r7, #32
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b088      	sub	sp, #32
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80058e2:	2312      	movs	r3, #18
 80058e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80058e6:	2340      	movs	r3, #64	@ 0x40
 80058e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80058ea:	2300      	movs	r3, #0
 80058ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80058ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80058f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80058f4:	f107 0308 	add.w	r3, r7, #8
 80058f8:	4619      	mov	r1, r3
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f7ff ff30 	bl	8005760 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005900:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005904:	2112      	movs	r1, #18
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f992 	bl	8005c30 <SDMMC_GetCmdResp1>
 800590c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800590e:	69fb      	ldr	r3, [r7, #28]
}
 8005910:	4618      	mov	r0, r3
 8005912:	3720      	adds	r7, #32
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b088      	sub	sp, #32
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005926:	2318      	movs	r3, #24
 8005928:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800592a:	2340      	movs	r3, #64	@ 0x40
 800592c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800592e:	2300      	movs	r3, #0
 8005930:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005932:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005936:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005938:	f107 0308 	add.w	r3, r7, #8
 800593c:	4619      	mov	r1, r3
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7ff ff0e 	bl	8005760 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005944:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005948:	2118      	movs	r1, #24
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 f970 	bl	8005c30 <SDMMC_GetCmdResp1>
 8005950:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005952:	69fb      	ldr	r3, [r7, #28]
}
 8005954:	4618      	mov	r0, r3
 8005956:	3720      	adds	r7, #32
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b088      	sub	sp, #32
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800596a:	2319      	movs	r3, #25
 800596c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800596e:	2340      	movs	r3, #64	@ 0x40
 8005970:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005972:	2300      	movs	r3, #0
 8005974:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005976:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800597a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800597c:	f107 0308 	add.w	r3, r7, #8
 8005980:	4619      	mov	r1, r3
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f7ff feec 	bl	8005760 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005988:	f241 3288 	movw	r2, #5000	@ 0x1388
 800598c:	2119      	movs	r1, #25
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 f94e 	bl	8005c30 <SDMMC_GetCmdResp1>
 8005994:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005996:	69fb      	ldr	r3, [r7, #28]
}
 8005998:	4618      	mov	r0, r3
 800599a:	3720      	adds	r7, #32
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b088      	sub	sp, #32
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80059a8:	2300      	movs	r3, #0
 80059aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80059ac:	230c      	movs	r3, #12
 80059ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80059b0:	2340      	movs	r3, #64	@ 0x40
 80059b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80059b4:	2300      	movs	r3, #0
 80059b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80059b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80059bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80059be:	f107 0308 	add.w	r3, r7, #8
 80059c2:	4619      	mov	r1, r3
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f7ff fecb 	bl	8005760 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80059ca:	4a05      	ldr	r2, [pc, #20]	@ (80059e0 <SDMMC_CmdStopTransfer+0x40>)
 80059cc:	210c      	movs	r1, #12
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 f92e 	bl	8005c30 <SDMMC_GetCmdResp1>
 80059d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80059d6:	69fb      	ldr	r3, [r7, #28]
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3720      	adds	r7, #32
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	05f5e100 	.word	0x05f5e100

080059e4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b08a      	sub	sp, #40	@ 0x28
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80059f4:	2307      	movs	r3, #7
 80059f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80059f8:	2340      	movs	r3, #64	@ 0x40
 80059fa:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80059fc:	2300      	movs	r3, #0
 80059fe:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005a00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a04:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005a06:	f107 0310 	add.w	r3, r7, #16
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	f7ff fea7 	bl	8005760 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8005a12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a16:	2107      	movs	r1, #7
 8005a18:	68f8      	ldr	r0, [r7, #12]
 8005a1a:	f000 f909 	bl	8005c30 <SDMMC_GetCmdResp1>
 8005a1e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8005a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3728      	adds	r7, #40	@ 0x28
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b088      	sub	sp, #32
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005a32:	2300      	movs	r3, #0
 8005a34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005a36:	2300      	movs	r3, #0
 8005a38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005a42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a46:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005a48:	f107 0308 	add.w	r3, r7, #8
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f7ff fe86 	bl	8005760 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 fb23 	bl	80060a0 <SDMMC_GetCmdError>
 8005a5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a5c:	69fb      	ldr	r3, [r7, #28]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3720      	adds	r7, #32
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b088      	sub	sp, #32
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005a6e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8005a72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005a74:	2308      	movs	r3, #8
 8005a76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005a78:	2340      	movs	r3, #64	@ 0x40
 8005a7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005a80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005a86:	f107 0308 	add.w	r3, r7, #8
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f7ff fe67 	bl	8005760 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 fab6 	bl	8006004 <SDMMC_GetCmdResp7>
 8005a98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a9a:	69fb      	ldr	r3, [r7, #28]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3720      	adds	r7, #32
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b088      	sub	sp, #32
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005ab2:	2337      	movs	r3, #55	@ 0x37
 8005ab4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005ab6:	2340      	movs	r3, #64	@ 0x40
 8005ab8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005aba:	2300      	movs	r3, #0
 8005abc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005abe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005ac2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005ac4:	f107 0308 	add.w	r3, r7, #8
 8005ac8:	4619      	mov	r1, r3
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f7ff fe48 	bl	8005760 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8005ad0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ad4:	2137      	movs	r1, #55	@ 0x37
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f8aa 	bl	8005c30 <SDMMC_GetCmdResp1>
 8005adc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ade:	69fb      	ldr	r3, [r7, #28]
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3720      	adds	r7, #32
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b088      	sub	sp, #32
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005af2:	683a      	ldr	r2, [r7, #0]
 8005af4:	4b0d      	ldr	r3, [pc, #52]	@ (8005b2c <SDMMC_CmdAppOperCommand+0x44>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005afa:	2329      	movs	r3, #41	@ 0x29
 8005afc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005afe:	2340      	movs	r3, #64	@ 0x40
 8005b00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005b02:	2300      	movs	r3, #0
 8005b04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005b06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005b0c:	f107 0308 	add.w	r3, r7, #8
 8005b10:	4619      	mov	r1, r3
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7ff fe24 	bl	8005760 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 f9bf 	bl	8005e9c <SDMMC_GetCmdResp3>
 8005b1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b20:	69fb      	ldr	r3, [r7, #28]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3720      	adds	r7, #32
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	80100000 	.word	0x80100000

08005b30 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b088      	sub	sp, #32
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005b40:	23c0      	movs	r3, #192	@ 0xc0
 8005b42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005b44:	2300      	movs	r3, #0
 8005b46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005b48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b4c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005b4e:	f107 0308 	add.w	r3, r7, #8
 8005b52:	4619      	mov	r1, r3
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f7ff fe03 	bl	8005760 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f956 	bl	8005e0c <SDMMC_GetCmdResp2>
 8005b60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b62:	69fb      	ldr	r3, [r7, #28]
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3720      	adds	r7, #32
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b088      	sub	sp, #32
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005b7a:	2309      	movs	r3, #9
 8005b7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005b7e:	23c0      	movs	r3, #192	@ 0xc0
 8005b80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005b82:	2300      	movs	r3, #0
 8005b84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005b86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b8a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005b8c:	f107 0308 	add.w	r3, r7, #8
 8005b90:	4619      	mov	r1, r3
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f7ff fde4 	bl	8005760 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 f937 	bl	8005e0c <SDMMC_GetCmdResp2>
 8005b9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ba0:	69fb      	ldr	r3, [r7, #28]
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3720      	adds	r7, #32
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b088      	sub	sp, #32
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
 8005bb2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005bbc:	2340      	movs	r3, #64	@ 0x40
 8005bbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005bc4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005bc8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005bca:	f107 0308 	add.w	r3, r7, #8
 8005bce:	4619      	mov	r1, r3
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f7ff fdc5 	bl	8005760 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005bd6:	683a      	ldr	r2, [r7, #0]
 8005bd8:	2103      	movs	r1, #3
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f99c 	bl	8005f18 <SDMMC_GetCmdResp6>
 8005be0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005be2:	69fb      	ldr	r3, [r7, #28]
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3720      	adds	r7, #32
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b088      	sub	sp, #32
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005bfa:	230d      	movs	r3, #13
 8005bfc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005bfe:	2340      	movs	r3, #64	@ 0x40
 8005c00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005c02:	2300      	movs	r3, #0
 8005c04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005c06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005c0c:	f107 0308 	add.w	r3, r7, #8
 8005c10:	4619      	mov	r1, r3
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f7ff fda4 	bl	8005760 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8005c18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c1c:	210d      	movs	r1, #13
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f806 	bl	8005c30 <SDMMC_GetCmdResp1>
 8005c24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c26:	69fb      	ldr	r3, [r7, #28]
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3720      	adds	r7, #32
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b088      	sub	sp, #32
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	460b      	mov	r3, r1
 8005c3a:	607a      	str	r2, [r7, #4]
 8005c3c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005c3e:	4b70      	ldr	r3, [pc, #448]	@ (8005e00 <SDMMC_GetCmdResp1+0x1d0>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a70      	ldr	r2, [pc, #448]	@ (8005e04 <SDMMC_GetCmdResp1+0x1d4>)
 8005c44:	fba2 2303 	umull	r2, r3, r2, r3
 8005c48:	0a5a      	lsrs	r2, r3, #9
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	fb02 f303 	mul.w	r3, r2, r3
 8005c50:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	1e5a      	subs	r2, r3, #1
 8005c56:	61fa      	str	r2, [r7, #28]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d102      	bne.n	8005c62 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005c5c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005c60:	e0c9      	b.n	8005df6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c66:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d0ef      	beq.n	8005c52 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d1ea      	bne.n	8005c52 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c80:	f003 0304 	and.w	r3, r3, #4
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d004      	beq.n	8005c92 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2204      	movs	r2, #4
 8005c8c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005c8e:	2304      	movs	r3, #4
 8005c90:	e0b1      	b.n	8005df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c96:	f003 0301 	and.w	r3, r3, #1
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d004      	beq.n	8005ca8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e0a6      	b.n	8005df6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	22c5      	movs	r2, #197	@ 0xc5
 8005cac:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f7ff fd80 	bl	80057b4 <SDMMC_GetCommandResponse>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	7afb      	ldrb	r3, [r7, #11]
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d001      	beq.n	8005cc2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e099      	b.n	8005df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005cc2:	2100      	movs	r1, #0
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	f7ff fd82 	bl	80057ce <SDMMC_GetResponse>
 8005cca:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	4b4e      	ldr	r3, [pc, #312]	@ (8005e08 <SDMMC_GetCmdResp1+0x1d8>)
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d101      	bne.n	8005cda <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	e08d      	b.n	8005df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	da02      	bge.n	8005ce6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005ce0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005ce4:	e087      	b.n	8005df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d001      	beq.n	8005cf4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005cf0:	2340      	movs	r3, #64	@ 0x40
 8005cf2:	e080      	b.n	8005df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d001      	beq.n	8005d02 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005cfe:	2380      	movs	r3, #128	@ 0x80
 8005d00:	e079      	b.n	8005df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d002      	beq.n	8005d12 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005d0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005d10:	e071      	b.n	8005df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d002      	beq.n	8005d22 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005d1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005d20:	e069      	b.n	8005df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d002      	beq.n	8005d32 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005d2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d30:	e061      	b.n	8005df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d002      	beq.n	8005d42 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005d3c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005d40:	e059      	b.n	8005df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d002      	beq.n	8005d52 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005d4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005d50:	e051      	b.n	8005df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d002      	beq.n	8005d62 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005d5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005d60:	e049      	b.n	8005df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d002      	beq.n	8005d72 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005d6c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005d70:	e041      	b.n	8005df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d002      	beq.n	8005d82 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005d7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d80:	e039      	b.n	8005df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d002      	beq.n	8005d92 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005d8c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005d90:	e031      	b.n	8005df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d002      	beq.n	8005da2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005d9c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005da0:	e029      	b.n	8005df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d002      	beq.n	8005db2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005dac:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005db0:	e021      	b.n	8005df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d002      	beq.n	8005dc2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005dbc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005dc0:	e019      	b.n	8005df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d002      	beq.n	8005dd2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005dcc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005dd0:	e011      	b.n	8005df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d002      	beq.n	8005de2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005ddc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005de0:	e009      	b.n	8005df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	f003 0308 	and.w	r3, r3, #8
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d002      	beq.n	8005df2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005dec:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8005df0:	e001      	b.n	8005df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005df2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3720      	adds	r7, #32
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	20000000 	.word	0x20000000
 8005e04:	10624dd3 	.word	0x10624dd3
 8005e08:	fdffe008 	.word	0xfdffe008

08005e0c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005e14:	4b1f      	ldr	r3, [pc, #124]	@ (8005e94 <SDMMC_GetCmdResp2+0x88>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a1f      	ldr	r2, [pc, #124]	@ (8005e98 <SDMMC_GetCmdResp2+0x8c>)
 8005e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e1e:	0a5b      	lsrs	r3, r3, #9
 8005e20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e24:	fb02 f303 	mul.w	r3, r2, r3
 8005e28:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	1e5a      	subs	r2, r3, #1
 8005e2e:	60fa      	str	r2, [r7, #12]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d102      	bne.n	8005e3a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005e34:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005e38:	e026      	b.n	8005e88 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e3e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d0ef      	beq.n	8005e2a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d1ea      	bne.n	8005e2a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e58:	f003 0304 	and.w	r3, r3, #4
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d004      	beq.n	8005e6a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2204      	movs	r2, #4
 8005e64:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005e66:	2304      	movs	r3, #4
 8005e68:	e00e      	b.n	8005e88 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d004      	beq.n	8005e80 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e003      	b.n	8005e88 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	22c5      	movs	r2, #197	@ 0xc5
 8005e84:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3714      	adds	r7, #20
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr
 8005e94:	20000000 	.word	0x20000000
 8005e98:	10624dd3 	.word	0x10624dd3

08005e9c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8005f10 <SDMMC_GetCmdResp3+0x74>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a1a      	ldr	r2, [pc, #104]	@ (8005f14 <SDMMC_GetCmdResp3+0x78>)
 8005eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8005eae:	0a5b      	lsrs	r3, r3, #9
 8005eb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005eb4:	fb02 f303 	mul.w	r3, r2, r3
 8005eb8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	1e5a      	subs	r2, r3, #1
 8005ebe:	60fa      	str	r2, [r7, #12]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d102      	bne.n	8005eca <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005ec4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005ec8:	e01b      	b.n	8005f02 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ece:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d0ef      	beq.n	8005eba <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1ea      	bne.n	8005eba <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ee8:	f003 0304 	and.w	r3, r3, #4
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d004      	beq.n	8005efa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2204      	movs	r2, #4
 8005ef4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005ef6:	2304      	movs	r3, #4
 8005ef8:	e003      	b.n	8005f02 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	22c5      	movs	r2, #197	@ 0xc5
 8005efe:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3714      	adds	r7, #20
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	20000000 	.word	0x20000000
 8005f14:	10624dd3 	.word	0x10624dd3

08005f18 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b088      	sub	sp, #32
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	460b      	mov	r3, r1
 8005f22:	607a      	str	r2, [r7, #4]
 8005f24:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005f26:	4b35      	ldr	r3, [pc, #212]	@ (8005ffc <SDMMC_GetCmdResp6+0xe4>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a35      	ldr	r2, [pc, #212]	@ (8006000 <SDMMC_GetCmdResp6+0xe8>)
 8005f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f30:	0a5b      	lsrs	r3, r3, #9
 8005f32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f36:	fb02 f303 	mul.w	r3, r2, r3
 8005f3a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	1e5a      	subs	r2, r3, #1
 8005f40:	61fa      	str	r2, [r7, #28]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d102      	bne.n	8005f4c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005f46:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005f4a:	e052      	b.n	8005ff2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f50:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d0ef      	beq.n	8005f3c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d1ea      	bne.n	8005f3c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f6a:	f003 0304 	and.w	r3, r3, #4
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d004      	beq.n	8005f7c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2204      	movs	r2, #4
 8005f76:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005f78:	2304      	movs	r3, #4
 8005f7a:	e03a      	b.n	8005ff2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f80:	f003 0301 	and.w	r3, r3, #1
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d004      	beq.n	8005f92 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e02f      	b.n	8005ff2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005f92:	68f8      	ldr	r0, [r7, #12]
 8005f94:	f7ff fc0e 	bl	80057b4 <SDMMC_GetCommandResponse>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	7afb      	ldrb	r3, [r7, #11]
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d001      	beq.n	8005fa6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e025      	b.n	8005ff2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	22c5      	movs	r2, #197	@ 0xc5
 8005faa:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005fac:	2100      	movs	r1, #0
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	f7ff fc0d 	bl	80057ce <SDMMC_GetResponse>
 8005fb4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d106      	bne.n	8005fce <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	0c1b      	lsrs	r3, r3, #16
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	e011      	b.n	8005ff2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d002      	beq.n	8005fde <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005fd8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005fdc:	e009      	b.n	8005ff2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d002      	beq.n	8005fee <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005fe8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005fec:	e001      	b.n	8005ff2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005fee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3720      	adds	r7, #32
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	20000000 	.word	0x20000000
 8006000:	10624dd3 	.word	0x10624dd3

08006004 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800600c:	4b22      	ldr	r3, [pc, #136]	@ (8006098 <SDMMC_GetCmdResp7+0x94>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a22      	ldr	r2, [pc, #136]	@ (800609c <SDMMC_GetCmdResp7+0x98>)
 8006012:	fba2 2303 	umull	r2, r3, r2, r3
 8006016:	0a5b      	lsrs	r3, r3, #9
 8006018:	f241 3288 	movw	r2, #5000	@ 0x1388
 800601c:	fb02 f303 	mul.w	r3, r2, r3
 8006020:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	1e5a      	subs	r2, r3, #1
 8006026:	60fa      	str	r2, [r7, #12]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d102      	bne.n	8006032 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800602c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006030:	e02c      	b.n	800608c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006036:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800603e:	2b00      	cmp	r3, #0
 8006040:	d0ef      	beq.n	8006022 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1ea      	bne.n	8006022 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006050:	f003 0304 	and.w	r3, r3, #4
 8006054:	2b00      	cmp	r3, #0
 8006056:	d004      	beq.n	8006062 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2204      	movs	r2, #4
 800605c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800605e:	2304      	movs	r3, #4
 8006060:	e014      	b.n	800608c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	2b00      	cmp	r3, #0
 800606c:	d004      	beq.n	8006078 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2201      	movs	r2, #1
 8006072:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006074:	2301      	movs	r3, #1
 8006076:	e009      	b.n	800608c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800607c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006080:	2b00      	cmp	r3, #0
 8006082:	d002      	beq.n	800608a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2240      	movs	r2, #64	@ 0x40
 8006088:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800608a:	2300      	movs	r3, #0
  
}
 800608c:	4618      	mov	r0, r3
 800608e:	3714      	adds	r7, #20
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr
 8006098:	20000000 	.word	0x20000000
 800609c:	10624dd3 	.word	0x10624dd3

080060a0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80060a8:	4b11      	ldr	r3, [pc, #68]	@ (80060f0 <SDMMC_GetCmdError+0x50>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a11      	ldr	r2, [pc, #68]	@ (80060f4 <SDMMC_GetCmdError+0x54>)
 80060ae:	fba2 2303 	umull	r2, r3, r2, r3
 80060b2:	0a5b      	lsrs	r3, r3, #9
 80060b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060b8:	fb02 f303 	mul.w	r3, r2, r3
 80060bc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	1e5a      	subs	r2, r3, #1
 80060c2:	60fa      	str	r2, [r7, #12]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d102      	bne.n	80060ce <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80060c8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80060cc:	e009      	b.n	80060e2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d0f1      	beq.n	80060be <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	22c5      	movs	r2, #197	@ 0xc5
 80060de:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3714      	adds	r7, #20
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	20000000 	.word	0x20000000
 80060f4:	10624dd3 	.word	0x10624dd3

080060f8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80060fc:	4904      	ldr	r1, [pc, #16]	@ (8006110 <MX_FATFS_Init+0x18>)
 80060fe:	4805      	ldr	r0, [pc, #20]	@ (8006114 <MX_FATFS_Init+0x1c>)
 8006100:	f000 ff10 	bl	8006f24 <FATFS_LinkDriver>
 8006104:	4603      	mov	r3, r0
 8006106:	461a      	mov	r2, r3
 8006108:	4b03      	ldr	r3, [pc, #12]	@ (8006118 <MX_FATFS_Init+0x20>)
 800610a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800610c:	bf00      	nop
 800610e:	bd80      	pop	{r7, pc}
 8006110:	20000294 	.word	0x20000294
 8006114:	08006fcc 	.word	0x08006fcc
 8006118:	20000290 	.word	0x20000290

0800611c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8006122:	2300      	movs	r3, #0
 8006124:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006126:	f000 f888 	bl	800623a <BSP_SD_IsDetected>
 800612a:	4603      	mov	r3, r0
 800612c:	2b01      	cmp	r3, #1
 800612e:	d001      	beq.n	8006134 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8006130:	2302      	movs	r3, #2
 8006132:	e005      	b.n	8006140 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8006134:	4804      	ldr	r0, [pc, #16]	@ (8006148 <BSP_SD_Init+0x2c>)
 8006136:	f7fe f88b 	bl	8004250 <HAL_SD_Init>
 800613a:	4603      	mov	r3, r0
 800613c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800613e:	79fb      	ldrb	r3, [r7, #7]
}
 8006140:	4618      	mov	r0, r3
 8006142:	3708      	adds	r7, #8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	20000110 	.word	0x20000110

0800614c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b086      	sub	sp, #24
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006158:	2300      	movs	r3, #0
 800615a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	68f9      	ldr	r1, [r7, #12]
 8006162:	4806      	ldr	r0, [pc, #24]	@ (800617c <BSP_SD_ReadBlocks_DMA+0x30>)
 8006164:	f7fe f92c 	bl	80043c0 <HAL_SD_ReadBlocks_DMA>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d001      	beq.n	8006172 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006172:	7dfb      	ldrb	r3, [r7, #23]
}
 8006174:	4618      	mov	r0, r3
 8006176:	3718      	adds	r7, #24
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	20000110 	.word	0x20000110

08006180 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b086      	sub	sp, #24
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800618c:	2300      	movs	r3, #0
 800618e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	68ba      	ldr	r2, [r7, #8]
 8006194:	68f9      	ldr	r1, [r7, #12]
 8006196:	4806      	ldr	r0, [pc, #24]	@ (80061b0 <BSP_SD_WriteBlocks_DMA+0x30>)
 8006198:	f7fe f9f4 	bl	8004584 <HAL_SD_WriteBlocks_DMA>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d001      	beq.n	80061a6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80061a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3718      	adds	r7, #24
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	20000110 	.word	0x20000110

080061b4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80061b8:	4805      	ldr	r0, [pc, #20]	@ (80061d0 <BSP_SD_GetCardState+0x1c>)
 80061ba:	f7fe fe19 	bl	8004df0 <HAL_SD_GetCardState>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b04      	cmp	r3, #4
 80061c2:	bf14      	ite	ne
 80061c4:	2301      	movne	r3, #1
 80061c6:	2300      	moveq	r3, #0
 80061c8:	b2db      	uxtb	r3, r3
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	20000110 	.word	0x20000110

080061d4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80061dc:	6879      	ldr	r1, [r7, #4]
 80061de:	4803      	ldr	r0, [pc, #12]	@ (80061ec <BSP_SD_GetCardInfo+0x18>)
 80061e0:	f7fe fdda 	bl	8004d98 <HAL_SD_GetCardInfo>
}
 80061e4:	bf00      	nop
 80061e6:	3708      	adds	r7, #8
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	20000110 	.word	0x20000110

080061f0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80061f8:	f000 f818 	bl	800622c <BSP_SD_AbortCallback>
}
 80061fc:	bf00      	nop
 80061fe:	3708      	adds	r7, #8
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800620c:	f000 f9a8 	bl	8006560 <BSP_SD_WriteCpltCallback>
}
 8006210:	bf00      	nop
 8006212:	3708      	adds	r7, #8
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8006220:	f000 f9aa 	bl	8006578 <BSP_SD_ReadCpltCallback>
}
 8006224:	bf00      	nop
 8006226:	3708      	adds	r7, #8
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800622c:	b480      	push	{r7}
 800622e:	af00      	add	r7, sp, #0

}
 8006230:	bf00      	nop
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr

0800623a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800623a:	b580      	push	{r7, lr}
 800623c:	b082      	sub	sp, #8
 800623e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006240:	2301      	movs	r3, #1
 8006242:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8006244:	f000 f80c 	bl	8006260 <BSP_PlatformIsDetected>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d101      	bne.n	8006252 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800624e:	2300      	movs	r3, #0
 8006250:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8006252:	79fb      	ldrb	r3, [r7, #7]
 8006254:	b2db      	uxtb	r3, r3
}
 8006256:	4618      	mov	r0, r3
 8006258:	3708      	adds	r7, #8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
	...

08006260 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8006266:	2301      	movs	r3, #1
 8006268:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800626a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800626e:	4806      	ldr	r0, [pc, #24]	@ (8006288 <BSP_PlatformIsDetected+0x28>)
 8006270:	f7fc fcce 	bl	8002c10 <HAL_GPIO_ReadPin>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d001      	beq.n	800627e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800627a:	2300      	movs	r3, #0
 800627c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800627e:	79fb      	ldrb	r3, [r7, #7]
}
 8006280:	4618      	mov	r0, r3
 8006282:	3708      	adds	r7, #8
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}
 8006288:	40020800 	.word	0x40020800

0800628c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8006294:	f7fb fb9c 	bl	80019d0 <HAL_GetTick>
 8006298:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800629a:	e006      	b.n	80062aa <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800629c:	f7ff ff8a 	bl	80061b4 <BSP_SD_GetCardState>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d101      	bne.n	80062aa <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80062a6:	2300      	movs	r3, #0
 80062a8:	e009      	b.n	80062be <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80062aa:	f7fb fb91 	bl	80019d0 <HAL_GetTick>
 80062ae:	4602      	mov	r2, r0
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d8f0      	bhi.n	800629c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80062ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
	...

080062c8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	4603      	mov	r3, r0
 80062d0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80062d2:	4b0b      	ldr	r3, [pc, #44]	@ (8006300 <SD_CheckStatus+0x38>)
 80062d4:	2201      	movs	r2, #1
 80062d6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80062d8:	f7ff ff6c 	bl	80061b4 <BSP_SD_GetCardState>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d107      	bne.n	80062f2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80062e2:	4b07      	ldr	r3, [pc, #28]	@ (8006300 <SD_CheckStatus+0x38>)
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	f023 0301 	bic.w	r3, r3, #1
 80062ec:	b2da      	uxtb	r2, r3
 80062ee:	4b04      	ldr	r3, [pc, #16]	@ (8006300 <SD_CheckStatus+0x38>)
 80062f0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80062f2:	4b03      	ldr	r3, [pc, #12]	@ (8006300 <SD_CheckStatus+0x38>)
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	b2db      	uxtb	r3, r3
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3708      	adds	r7, #8
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	20000009 	.word	0x20000009

08006304 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	4603      	mov	r3, r0
 800630c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800630e:	f7ff ff05 	bl	800611c <BSP_SD_Init>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d107      	bne.n	8006328 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8006318:	79fb      	ldrb	r3, [r7, #7]
 800631a:	4618      	mov	r0, r3
 800631c:	f7ff ffd4 	bl	80062c8 <SD_CheckStatus>
 8006320:	4603      	mov	r3, r0
 8006322:	461a      	mov	r2, r3
 8006324:	4b04      	ldr	r3, [pc, #16]	@ (8006338 <SD_initialize+0x34>)
 8006326:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8006328:	4b03      	ldr	r3, [pc, #12]	@ (8006338 <SD_initialize+0x34>)
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	b2db      	uxtb	r3, r3
}
 800632e:	4618      	mov	r0, r3
 8006330:	3708      	adds	r7, #8
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	20000009 	.word	0x20000009

0800633c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b082      	sub	sp, #8
 8006340:	af00      	add	r7, sp, #0
 8006342:	4603      	mov	r3, r0
 8006344:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006346:	79fb      	ldrb	r3, [r7, #7]
 8006348:	4618      	mov	r0, r3
 800634a:	f7ff ffbd 	bl	80062c8 <SD_CheckStatus>
 800634e:	4603      	mov	r3, r0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3708      	adds	r7, #8
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b086      	sub	sp, #24
 800635c:	af00      	add	r7, sp, #0
 800635e:	60b9      	str	r1, [r7, #8]
 8006360:	607a      	str	r2, [r7, #4]
 8006362:	603b      	str	r3, [r7, #0]
 8006364:	4603      	mov	r3, r0
 8006366:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800636c:	f247 5030 	movw	r0, #30000	@ 0x7530
 8006370:	f7ff ff8c 	bl	800628c <SD_CheckStatusWithTimeout>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	da01      	bge.n	800637e <SD_read+0x26>
  {
    return res;
 800637a:	7dfb      	ldrb	r3, [r7, #23]
 800637c:	e03b      	b.n	80063f6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800637e:	683a      	ldr	r2, [r7, #0]
 8006380:	6879      	ldr	r1, [r7, #4]
 8006382:	68b8      	ldr	r0, [r7, #8]
 8006384:	f7ff fee2 	bl	800614c <BSP_SD_ReadBlocks_DMA>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d132      	bne.n	80063f4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800638e:	4b1c      	ldr	r3, [pc, #112]	@ (8006400 <SD_read+0xa8>)
 8006390:	2200      	movs	r2, #0
 8006392:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8006394:	f7fb fb1c 	bl	80019d0 <HAL_GetTick>
 8006398:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800639a:	bf00      	nop
 800639c:	4b18      	ldr	r3, [pc, #96]	@ (8006400 <SD_read+0xa8>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d108      	bne.n	80063b6 <SD_read+0x5e>
 80063a4:	f7fb fb14 	bl	80019d0 <HAL_GetTick>
 80063a8:	4602      	mov	r2, r0
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	f247 522f 	movw	r2, #29999	@ 0x752f
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d9f2      	bls.n	800639c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80063b6:	4b12      	ldr	r3, [pc, #72]	@ (8006400 <SD_read+0xa8>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d102      	bne.n	80063c4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	75fb      	strb	r3, [r7, #23]
 80063c2:	e017      	b.n	80063f4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80063c4:	4b0e      	ldr	r3, [pc, #56]	@ (8006400 <SD_read+0xa8>)
 80063c6:	2200      	movs	r2, #0
 80063c8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80063ca:	f7fb fb01 	bl	80019d0 <HAL_GetTick>
 80063ce:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80063d0:	e007      	b.n	80063e2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80063d2:	f7ff feef 	bl	80061b4 <BSP_SD_GetCardState>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d102      	bne.n	80063e2 <SD_read+0x8a>
          {
            res = RES_OK;
 80063dc:	2300      	movs	r3, #0
 80063de:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80063e0:	e008      	b.n	80063f4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80063e2:	f7fb faf5 	bl	80019d0 <HAL_GetTick>
 80063e6:	4602      	mov	r2, r0
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	f247 522f 	movw	r2, #29999	@ 0x752f
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d9ee      	bls.n	80063d2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80063f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3718      	adds	r7, #24
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	200004cc 	.word	0x200004cc

08006404 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b086      	sub	sp, #24
 8006408:	af00      	add	r7, sp, #0
 800640a:	60b9      	str	r1, [r7, #8]
 800640c:	607a      	str	r2, [r7, #4]
 800640e:	603b      	str	r3, [r7, #0]
 8006410:	4603      	mov	r3, r0
 8006412:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8006418:	4b24      	ldr	r3, [pc, #144]	@ (80064ac <SD_write+0xa8>)
 800641a:	2200      	movs	r2, #0
 800641c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800641e:	f247 5030 	movw	r0, #30000	@ 0x7530
 8006422:	f7ff ff33 	bl	800628c <SD_CheckStatusWithTimeout>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	da01      	bge.n	8006430 <SD_write+0x2c>
  {
    return res;
 800642c:	7dfb      	ldrb	r3, [r7, #23]
 800642e:	e038      	b.n	80064a2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8006430:	683a      	ldr	r2, [r7, #0]
 8006432:	6879      	ldr	r1, [r7, #4]
 8006434:	68b8      	ldr	r0, [r7, #8]
 8006436:	f7ff fea3 	bl	8006180 <BSP_SD_WriteBlocks_DMA>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d12f      	bne.n	80064a0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8006440:	f7fb fac6 	bl	80019d0 <HAL_GetTick>
 8006444:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8006446:	bf00      	nop
 8006448:	4b18      	ldr	r3, [pc, #96]	@ (80064ac <SD_write+0xa8>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d108      	bne.n	8006462 <SD_write+0x5e>
 8006450:	f7fb fabe 	bl	80019d0 <HAL_GetTick>
 8006454:	4602      	mov	r2, r0
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	f247 522f 	movw	r2, #29999	@ 0x752f
 800645e:	4293      	cmp	r3, r2
 8006460:	d9f2      	bls.n	8006448 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8006462:	4b12      	ldr	r3, [pc, #72]	@ (80064ac <SD_write+0xa8>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d102      	bne.n	8006470 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	75fb      	strb	r3, [r7, #23]
 800646e:	e017      	b.n	80064a0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8006470:	4b0e      	ldr	r3, [pc, #56]	@ (80064ac <SD_write+0xa8>)
 8006472:	2200      	movs	r2, #0
 8006474:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8006476:	f7fb faab 	bl	80019d0 <HAL_GetTick>
 800647a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800647c:	e007      	b.n	800648e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800647e:	f7ff fe99 	bl	80061b4 <BSP_SD_GetCardState>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d102      	bne.n	800648e <SD_write+0x8a>
          {
            res = RES_OK;
 8006488:	2300      	movs	r3, #0
 800648a:	75fb      	strb	r3, [r7, #23]
            break;
 800648c:	e008      	b.n	80064a0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800648e:	f7fb fa9f 	bl	80019d0 <HAL_GetTick>
 8006492:	4602      	mov	r2, r0
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	1ad3      	subs	r3, r2, r3
 8006498:	f247 522f 	movw	r2, #29999	@ 0x752f
 800649c:	4293      	cmp	r3, r2
 800649e:	d9ee      	bls.n	800647e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80064a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3718      	adds	r7, #24
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	200004c8 	.word	0x200004c8

080064b0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b08c      	sub	sp, #48	@ 0x30
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	4603      	mov	r3, r0
 80064b8:	603a      	str	r2, [r7, #0]
 80064ba:	71fb      	strb	r3, [r7, #7]
 80064bc:	460b      	mov	r3, r1
 80064be:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80064c6:	4b25      	ldr	r3, [pc, #148]	@ (800655c <SD_ioctl+0xac>)
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	f003 0301 	and.w	r3, r3, #1
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d001      	beq.n	80064d8 <SD_ioctl+0x28>
 80064d4:	2303      	movs	r3, #3
 80064d6:	e03c      	b.n	8006552 <SD_ioctl+0xa2>

  switch (cmd)
 80064d8:	79bb      	ldrb	r3, [r7, #6]
 80064da:	2b03      	cmp	r3, #3
 80064dc:	d834      	bhi.n	8006548 <SD_ioctl+0x98>
 80064de:	a201      	add	r2, pc, #4	@ (adr r2, 80064e4 <SD_ioctl+0x34>)
 80064e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e4:	080064f5 	.word	0x080064f5
 80064e8:	080064fd 	.word	0x080064fd
 80064ec:	08006515 	.word	0x08006515
 80064f0:	0800652f 	.word	0x0800652f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80064f4:	2300      	movs	r3, #0
 80064f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80064fa:	e028      	b.n	800654e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80064fc:	f107 030c 	add.w	r3, r7, #12
 8006500:	4618      	mov	r0, r3
 8006502:	f7ff fe67 	bl	80061d4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006506:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800650c:	2300      	movs	r3, #0
 800650e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006512:	e01c      	b.n	800654e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006514:	f107 030c 	add.w	r3, r7, #12
 8006518:	4618      	mov	r0, r3
 800651a:	f7ff fe5b 	bl	80061d4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800651e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006520:	b29a      	uxth	r2, r3
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006526:	2300      	movs	r3, #0
 8006528:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800652c:	e00f      	b.n	800654e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800652e:	f107 030c 	add.w	r3, r7, #12
 8006532:	4618      	mov	r0, r3
 8006534:	f7ff fe4e 	bl	80061d4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800653a:	0a5a      	lsrs	r2, r3, #9
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006540:	2300      	movs	r3, #0
 8006542:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006546:	e002      	b.n	800654e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006548:	2304      	movs	r3, #4
 800654a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800654e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8006552:	4618      	mov	r0, r3
 8006554:	3730      	adds	r7, #48	@ 0x30
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	20000009 	.word	0x20000009

08006560 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8006560:	b480      	push	{r7}
 8006562:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8006564:	4b03      	ldr	r3, [pc, #12]	@ (8006574 <BSP_SD_WriteCpltCallback+0x14>)
 8006566:	2201      	movs	r2, #1
 8006568:	601a      	str	r2, [r3, #0]
}
 800656a:	bf00      	nop
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr
 8006574:	200004c8 	.word	0x200004c8

08006578 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8006578:	b480      	push	{r7}
 800657a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800657c:	4b03      	ldr	r3, [pc, #12]	@ (800658c <BSP_SD_ReadCpltCallback+0x14>)
 800657e:	2201      	movs	r2, #1
 8006580:	601a      	str	r2, [r3, #0]
}
 8006582:	bf00      	nop
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr
 800658c:	200004cc 	.word	0x200004cc

08006590 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	4603      	mov	r3, r0
 8006598:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800659a:	79fb      	ldrb	r3, [r7, #7]
 800659c:	4a08      	ldr	r2, [pc, #32]	@ (80065c0 <disk_status+0x30>)
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	4413      	add	r3, r2
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	79fa      	ldrb	r2, [r7, #7]
 80065a8:	4905      	ldr	r1, [pc, #20]	@ (80065c0 <disk_status+0x30>)
 80065aa:	440a      	add	r2, r1
 80065ac:	7a12      	ldrb	r2, [r2, #8]
 80065ae:	4610      	mov	r0, r2
 80065b0:	4798      	blx	r3
 80065b2:	4603      	mov	r3, r0
 80065b4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80065b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3710      	adds	r7, #16
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	200004f8 	.word	0x200004f8

080065c4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	4603      	mov	r3, r0
 80065cc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80065ce:	2300      	movs	r3, #0
 80065d0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80065d2:	79fb      	ldrb	r3, [r7, #7]
 80065d4:	4a0d      	ldr	r2, [pc, #52]	@ (800660c <disk_initialize+0x48>)
 80065d6:	5cd3      	ldrb	r3, [r2, r3]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d111      	bne.n	8006600 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80065dc:	79fb      	ldrb	r3, [r7, #7]
 80065de:	4a0b      	ldr	r2, [pc, #44]	@ (800660c <disk_initialize+0x48>)
 80065e0:	2101      	movs	r1, #1
 80065e2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80065e4:	79fb      	ldrb	r3, [r7, #7]
 80065e6:	4a09      	ldr	r2, [pc, #36]	@ (800660c <disk_initialize+0x48>)
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	4413      	add	r3, r2
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	79fa      	ldrb	r2, [r7, #7]
 80065f2:	4906      	ldr	r1, [pc, #24]	@ (800660c <disk_initialize+0x48>)
 80065f4:	440a      	add	r2, r1
 80065f6:	7a12      	ldrb	r2, [r2, #8]
 80065f8:	4610      	mov	r0, r2
 80065fa:	4798      	blx	r3
 80065fc:	4603      	mov	r3, r0
 80065fe:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006600:	7bfb      	ldrb	r3, [r7, #15]
}
 8006602:	4618      	mov	r0, r3
 8006604:	3710      	adds	r7, #16
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	200004f8 	.word	0x200004f8

08006610 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006610:	b590      	push	{r4, r7, lr}
 8006612:	b087      	sub	sp, #28
 8006614:	af00      	add	r7, sp, #0
 8006616:	60b9      	str	r1, [r7, #8]
 8006618:	607a      	str	r2, [r7, #4]
 800661a:	603b      	str	r3, [r7, #0]
 800661c:	4603      	mov	r3, r0
 800661e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006620:	7bfb      	ldrb	r3, [r7, #15]
 8006622:	4a0a      	ldr	r2, [pc, #40]	@ (800664c <disk_read+0x3c>)
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	4413      	add	r3, r2
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	689c      	ldr	r4, [r3, #8]
 800662c:	7bfb      	ldrb	r3, [r7, #15]
 800662e:	4a07      	ldr	r2, [pc, #28]	@ (800664c <disk_read+0x3c>)
 8006630:	4413      	add	r3, r2
 8006632:	7a18      	ldrb	r0, [r3, #8]
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	68b9      	ldr	r1, [r7, #8]
 800663a:	47a0      	blx	r4
 800663c:	4603      	mov	r3, r0
 800663e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006640:	7dfb      	ldrb	r3, [r7, #23]
}
 8006642:	4618      	mov	r0, r3
 8006644:	371c      	adds	r7, #28
 8006646:	46bd      	mov	sp, r7
 8006648:	bd90      	pop	{r4, r7, pc}
 800664a:	bf00      	nop
 800664c:	200004f8 	.word	0x200004f8

08006650 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006650:	b590      	push	{r4, r7, lr}
 8006652:	b087      	sub	sp, #28
 8006654:	af00      	add	r7, sp, #0
 8006656:	60b9      	str	r1, [r7, #8]
 8006658:	607a      	str	r2, [r7, #4]
 800665a:	603b      	str	r3, [r7, #0]
 800665c:	4603      	mov	r3, r0
 800665e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006660:	7bfb      	ldrb	r3, [r7, #15]
 8006662:	4a0a      	ldr	r2, [pc, #40]	@ (800668c <disk_write+0x3c>)
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	4413      	add	r3, r2
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	68dc      	ldr	r4, [r3, #12]
 800666c:	7bfb      	ldrb	r3, [r7, #15]
 800666e:	4a07      	ldr	r2, [pc, #28]	@ (800668c <disk_write+0x3c>)
 8006670:	4413      	add	r3, r2
 8006672:	7a18      	ldrb	r0, [r3, #8]
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	68b9      	ldr	r1, [r7, #8]
 800667a:	47a0      	blx	r4
 800667c:	4603      	mov	r3, r0
 800667e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006680:	7dfb      	ldrb	r3, [r7, #23]
}
 8006682:	4618      	mov	r0, r3
 8006684:	371c      	adds	r7, #28
 8006686:	46bd      	mov	sp, r7
 8006688:	bd90      	pop	{r4, r7, pc}
 800668a:	bf00      	nop
 800668c:	200004f8 	.word	0x200004f8

08006690 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	3301      	adds	r3, #1
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80066a0:	89fb      	ldrh	r3, [r7, #14]
 80066a2:	021b      	lsls	r3, r3, #8
 80066a4:	b21a      	sxth	r2, r3
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	b21b      	sxth	r3, r3
 80066ac:	4313      	orrs	r3, r2
 80066ae:	b21b      	sxth	r3, r3
 80066b0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80066b2:	89fb      	ldrh	r3, [r7, #14]
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3714      	adds	r7, #20
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	3303      	adds	r3, #3
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	021b      	lsls	r3, r3, #8
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	3202      	adds	r2, #2
 80066d8:	7812      	ldrb	r2, [r2, #0]
 80066da:	4313      	orrs	r3, r2
 80066dc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	021b      	lsls	r3, r3, #8
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	3201      	adds	r2, #1
 80066e6:	7812      	ldrb	r2, [r2, #0]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	021b      	lsls	r3, r3, #8
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	7812      	ldrb	r2, [r2, #0]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	60fb      	str	r3, [r7, #12]
	return rv;
 80066f8:	68fb      	ldr	r3, [r7, #12]
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3714      	adds	r7, #20
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr
	...

08006708 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006710:	2300      	movs	r3, #0
 8006712:	60fb      	str	r3, [r7, #12]
 8006714:	e010      	b.n	8006738 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006716:	4a0d      	ldr	r2, [pc, #52]	@ (800674c <clear_lock+0x44>)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	011b      	lsls	r3, r3, #4
 800671c:	4413      	add	r3, r2
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	429a      	cmp	r2, r3
 8006724:	d105      	bne.n	8006732 <clear_lock+0x2a>
 8006726:	4a09      	ldr	r2, [pc, #36]	@ (800674c <clear_lock+0x44>)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	011b      	lsls	r3, r3, #4
 800672c:	4413      	add	r3, r2
 800672e:	2200      	movs	r2, #0
 8006730:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	3301      	adds	r3, #1
 8006736:	60fb      	str	r3, [r7, #12]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2b01      	cmp	r3, #1
 800673c:	d9eb      	bls.n	8006716 <clear_lock+0xe>
	}
}
 800673e:	bf00      	nop
 8006740:	bf00      	nop
 8006742:	3714      	adds	r7, #20
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr
 800674c:	200004d8 	.word	0x200004d8

08006750 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b086      	sub	sp, #24
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006758:	2300      	movs	r3, #0
 800675a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	78db      	ldrb	r3, [r3, #3]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d034      	beq.n	80067ce <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006768:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	7858      	ldrb	r0, [r3, #1]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006774:	2301      	movs	r3, #1
 8006776:	697a      	ldr	r2, [r7, #20]
 8006778:	f7ff ff6a 	bl	8006650 <disk_write>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d002      	beq.n	8006788 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006782:	2301      	movs	r3, #1
 8006784:	73fb      	strb	r3, [r7, #15]
 8006786:	e022      	b.n	80067ce <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a1b      	ldr	r3, [r3, #32]
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	1ad2      	subs	r2, r2, r3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	699b      	ldr	r3, [r3, #24]
 800679a:	429a      	cmp	r2, r3
 800679c:	d217      	bcs.n	80067ce <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	789b      	ldrb	r3, [r3, #2]
 80067a2:	613b      	str	r3, [r7, #16]
 80067a4:	e010      	b.n	80067c8 <sync_window+0x78>
					wsect += fs->fsize;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	697a      	ldr	r2, [r7, #20]
 80067ac:	4413      	add	r3, r2
 80067ae:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	7858      	ldrb	r0, [r3, #1]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80067ba:	2301      	movs	r3, #1
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	f7ff ff47 	bl	8006650 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	3b01      	subs	r3, #1
 80067c6:	613b      	str	r3, [r7, #16]
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d8eb      	bhi.n	80067a6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80067ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3718      	adds	r7, #24
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80067e2:	2300      	movs	r3, #0
 80067e4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ea:	683a      	ldr	r2, [r7, #0]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d01b      	beq.n	8006828 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f7ff ffad 	bl	8006750 <sync_window>
 80067f6:	4603      	mov	r3, r0
 80067f8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80067fa:	7bfb      	ldrb	r3, [r7, #15]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d113      	bne.n	8006828 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	7858      	ldrb	r0, [r3, #1]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800680a:	2301      	movs	r3, #1
 800680c:	683a      	ldr	r2, [r7, #0]
 800680e:	f7ff feff 	bl	8006610 <disk_read>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d004      	beq.n	8006822 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006818:	f04f 33ff 	mov.w	r3, #4294967295
 800681c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800681e:	2301      	movs	r3, #1
 8006820:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	683a      	ldr	r2, [r7, #0]
 8006826:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8006828:	7bfb      	ldrb	r3, [r7, #15]
}
 800682a:	4618      	mov	r0, r3
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006832:	b480      	push	{r7}
 8006834:	b087      	sub	sp, #28
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800683a:	f04f 33ff 	mov.w	r3, #4294967295
 800683e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d031      	beq.n	80068ac <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	617b      	str	r3, [r7, #20]
 800684e:	e002      	b.n	8006856 <get_ldnumber+0x24>
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	3301      	adds	r3, #1
 8006854:	617b      	str	r3, [r7, #20]
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	2b20      	cmp	r3, #32
 800685c:	d903      	bls.n	8006866 <get_ldnumber+0x34>
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	2b3a      	cmp	r3, #58	@ 0x3a
 8006864:	d1f4      	bne.n	8006850 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	2b3a      	cmp	r3, #58	@ 0x3a
 800686c:	d11c      	bne.n	80068a8 <get_ldnumber+0x76>
			tp = *path;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	1c5a      	adds	r2, r3, #1
 8006878:	60fa      	str	r2, [r7, #12]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	3b30      	subs	r3, #48	@ 0x30
 800687e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	2b09      	cmp	r3, #9
 8006884:	d80e      	bhi.n	80068a4 <get_ldnumber+0x72>
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	429a      	cmp	r2, r3
 800688c:	d10a      	bne.n	80068a4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d107      	bne.n	80068a4 <get_ldnumber+0x72>
					vol = (int)i;
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	3301      	adds	r3, #1
 800689c:	617b      	str	r3, [r7, #20]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	697a      	ldr	r2, [r7, #20]
 80068a2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	e002      	b.n	80068ae <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80068a8:	2300      	movs	r3, #0
 80068aa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80068ac:	693b      	ldr	r3, [r7, #16]
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	371c      	adds	r7, #28
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
	...

080068bc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	70da      	strb	r2, [r3, #3]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f04f 32ff 	mov.w	r2, #4294967295
 80068d2:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80068d4:	6839      	ldr	r1, [r7, #0]
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f7ff ff7e 	bl	80067d8 <move_window>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d001      	beq.n	80068e6 <check_fs+0x2a>
 80068e2:	2304      	movs	r3, #4
 80068e4:	e038      	b.n	8006958 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	3330      	adds	r3, #48	@ 0x30
 80068ea:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7ff fece 	bl	8006690 <ld_word>
 80068f4:	4603      	mov	r3, r0
 80068f6:	461a      	mov	r2, r3
 80068f8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d001      	beq.n	8006904 <check_fs+0x48>
 8006900:	2303      	movs	r3, #3
 8006902:	e029      	b.n	8006958 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800690a:	2be9      	cmp	r3, #233	@ 0xe9
 800690c:	d009      	beq.n	8006922 <check_fs+0x66>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006914:	2beb      	cmp	r3, #235	@ 0xeb
 8006916:	d11e      	bne.n	8006956 <check_fs+0x9a>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800691e:	2b90      	cmp	r3, #144	@ 0x90
 8006920:	d119      	bne.n	8006956 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	3330      	adds	r3, #48	@ 0x30
 8006926:	3336      	adds	r3, #54	@ 0x36
 8006928:	4618      	mov	r0, r3
 800692a:	f7ff fec9 	bl	80066c0 <ld_dword>
 800692e:	4603      	mov	r3, r0
 8006930:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006934:	4a0a      	ldr	r2, [pc, #40]	@ (8006960 <check_fs+0xa4>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d101      	bne.n	800693e <check_fs+0x82>
 800693a:	2300      	movs	r3, #0
 800693c:	e00c      	b.n	8006958 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	3330      	adds	r3, #48	@ 0x30
 8006942:	3352      	adds	r3, #82	@ 0x52
 8006944:	4618      	mov	r0, r3
 8006946:	f7ff febb 	bl	80066c0 <ld_dword>
 800694a:	4603      	mov	r3, r0
 800694c:	4a05      	ldr	r2, [pc, #20]	@ (8006964 <check_fs+0xa8>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d101      	bne.n	8006956 <check_fs+0x9a>
 8006952:	2300      	movs	r3, #0
 8006954:	e000      	b.n	8006958 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006956:	2302      	movs	r3, #2
}
 8006958:	4618      	mov	r0, r3
 800695a:	3708      	adds	r7, #8
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	00544146 	.word	0x00544146
 8006964:	33544146 	.word	0x33544146

08006968 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b096      	sub	sp, #88	@ 0x58
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	4613      	mov	r3, r2
 8006974:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	2200      	movs	r2, #0
 800697a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800697c:	68f8      	ldr	r0, [r7, #12]
 800697e:	f7ff ff58 	bl	8006832 <get_ldnumber>
 8006982:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006984:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006986:	2b00      	cmp	r3, #0
 8006988:	da01      	bge.n	800698e <find_volume+0x26>
 800698a:	230b      	movs	r3, #11
 800698c:	e22d      	b.n	8006dea <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800698e:	4aa1      	ldr	r2, [pc, #644]	@ (8006c14 <find_volume+0x2ac>)
 8006990:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006996:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800699a:	2b00      	cmp	r3, #0
 800699c:	d101      	bne.n	80069a2 <find_volume+0x3a>
 800699e:	230c      	movs	r3, #12
 80069a0:	e223      	b.n	8006dea <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80069a6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80069a8:	79fb      	ldrb	r3, [r7, #7]
 80069aa:	f023 0301 	bic.w	r3, r3, #1
 80069ae:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80069b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d01a      	beq.n	80069ee <find_volume+0x86>
		stat = disk_status(fs->drv);
 80069b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ba:	785b      	ldrb	r3, [r3, #1]
 80069bc:	4618      	mov	r0, r3
 80069be:	f7ff fde7 	bl	8006590 <disk_status>
 80069c2:	4603      	mov	r3, r0
 80069c4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80069c8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80069cc:	f003 0301 	and.w	r3, r3, #1
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d10c      	bne.n	80069ee <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80069d4:	79fb      	ldrb	r3, [r7, #7]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d007      	beq.n	80069ea <find_volume+0x82>
 80069da:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80069de:	f003 0304 	and.w	r3, r3, #4
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d001      	beq.n	80069ea <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80069e6:	230a      	movs	r3, #10
 80069e8:	e1ff      	b.n	8006dea <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80069ea:	2300      	movs	r3, #0
 80069ec:	e1fd      	b.n	8006dea <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80069ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069f0:	2200      	movs	r2, #0
 80069f2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80069f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069f6:	b2da      	uxtb	r2, r3
 80069f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069fa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80069fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069fe:	785b      	ldrb	r3, [r3, #1]
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7ff fddf 	bl	80065c4 <disk_initialize>
 8006a06:	4603      	mov	r3, r0
 8006a08:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006a0c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006a10:	f003 0301 	and.w	r3, r3, #1
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d001      	beq.n	8006a1c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e1e6      	b.n	8006dea <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006a1c:	79fb      	ldrb	r3, [r7, #7]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d007      	beq.n	8006a32 <find_volume+0xca>
 8006a22:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006a26:	f003 0304 	and.w	r3, r3, #4
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d001      	beq.n	8006a32 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006a2e:	230a      	movs	r3, #10
 8006a30:	e1db      	b.n	8006dea <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006a32:	2300      	movs	r3, #0
 8006a34:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006a36:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006a38:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006a3a:	f7ff ff3f 	bl	80068bc <check_fs>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006a44:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d149      	bne.n	8006ae0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a50:	e01e      	b.n	8006a90 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a54:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006a58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a5a:	011b      	lsls	r3, r3, #4
 8006a5c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8006a60:	4413      	add	r3, r2
 8006a62:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a66:	3304      	adds	r3, #4
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d006      	beq.n	8006a7c <find_volume+0x114>
 8006a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a70:	3308      	adds	r3, #8
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7ff fe24 	bl	80066c0 <ld_dword>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	e000      	b.n	8006a7e <find_volume+0x116>
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	3358      	adds	r3, #88	@ 0x58
 8006a84:	443b      	add	r3, r7
 8006a86:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006a8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a92:	2b03      	cmp	r3, #3
 8006a94:	d9dd      	bls.n	8006a52 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006a96:	2300      	movs	r3, #0
 8006a98:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8006a9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d002      	beq.n	8006aa6 <find_volume+0x13e>
 8006aa0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006aa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	3358      	adds	r3, #88	@ 0x58
 8006aac:	443b      	add	r3, r7
 8006aae:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006ab2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006ab4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d005      	beq.n	8006ac6 <find_volume+0x15e>
 8006aba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006abc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006abe:	f7ff fefd 	bl	80068bc <check_fs>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	e000      	b.n	8006ac8 <find_volume+0x160>
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006acc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d905      	bls.n	8006ae0 <find_volume+0x178>
 8006ad4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ada:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006adc:	2b03      	cmp	r3, #3
 8006ade:	d9e2      	bls.n	8006aa6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006ae0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006ae4:	2b04      	cmp	r3, #4
 8006ae6:	d101      	bne.n	8006aec <find_volume+0x184>
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e17e      	b.n	8006dea <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006aec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d901      	bls.n	8006af8 <find_volume+0x190>
 8006af4:	230d      	movs	r3, #13
 8006af6:	e178      	b.n	8006dea <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006afa:	3330      	adds	r3, #48	@ 0x30
 8006afc:	330b      	adds	r3, #11
 8006afe:	4618      	mov	r0, r3
 8006b00:	f7ff fdc6 	bl	8006690 <ld_word>
 8006b04:	4603      	mov	r3, r0
 8006b06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b0a:	d001      	beq.n	8006b10 <find_volume+0x1a8>
 8006b0c:	230d      	movs	r3, #13
 8006b0e:	e16c      	b.n	8006dea <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b12:	3330      	adds	r3, #48	@ 0x30
 8006b14:	3316      	adds	r3, #22
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7ff fdba 	bl	8006690 <ld_word>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006b20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d106      	bne.n	8006b34 <find_volume+0x1cc>
 8006b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b28:	3330      	adds	r3, #48	@ 0x30
 8006b2a:	3324      	adds	r3, #36	@ 0x24
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f7ff fdc7 	bl	80066c0 <ld_dword>
 8006b32:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8006b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b36:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b38:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b3c:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8006b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b42:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b46:	789b      	ldrb	r3, [r3, #2]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d005      	beq.n	8006b58 <find_volume+0x1f0>
 8006b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b4e:	789b      	ldrb	r3, [r3, #2]
 8006b50:	2b02      	cmp	r3, #2
 8006b52:	d001      	beq.n	8006b58 <find_volume+0x1f0>
 8006b54:	230d      	movs	r3, #13
 8006b56:	e148      	b.n	8006dea <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b5a:	789b      	ldrb	r3, [r3, #2]
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b60:	fb02 f303 	mul.w	r3, r2, r3
 8006b64:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b70:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b74:	895b      	ldrh	r3, [r3, #10]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d008      	beq.n	8006b8c <find_volume+0x224>
 8006b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b7c:	895b      	ldrh	r3, [r3, #10]
 8006b7e:	461a      	mov	r2, r3
 8006b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b82:	895b      	ldrh	r3, [r3, #10]
 8006b84:	3b01      	subs	r3, #1
 8006b86:	4013      	ands	r3, r2
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d001      	beq.n	8006b90 <find_volume+0x228>
 8006b8c:	230d      	movs	r3, #13
 8006b8e:	e12c      	b.n	8006dea <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b92:	3330      	adds	r3, #48	@ 0x30
 8006b94:	3311      	adds	r3, #17
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7ff fd7a 	bl	8006690 <ld_word>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba6:	891b      	ldrh	r3, [r3, #8]
 8006ba8:	f003 030f 	and.w	r3, r3, #15
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d001      	beq.n	8006bb6 <find_volume+0x24e>
 8006bb2:	230d      	movs	r3, #13
 8006bb4:	e119      	b.n	8006dea <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb8:	3330      	adds	r3, #48	@ 0x30
 8006bba:	3313      	adds	r3, #19
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f7ff fd67 	bl	8006690 <ld_word>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006bc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d106      	bne.n	8006bda <find_volume+0x272>
 8006bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bce:	3330      	adds	r3, #48	@ 0x30
 8006bd0:	3320      	adds	r3, #32
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7ff fd74 	bl	80066c0 <ld_dword>
 8006bd8:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bdc:	3330      	adds	r3, #48	@ 0x30
 8006bde:	330e      	adds	r3, #14
 8006be0:	4618      	mov	r0, r3
 8006be2:	f7ff fd55 	bl	8006690 <ld_word>
 8006be6:	4603      	mov	r3, r0
 8006be8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006bea:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d101      	bne.n	8006bf4 <find_volume+0x28c>
 8006bf0:	230d      	movs	r3, #13
 8006bf2:	e0fa      	b.n	8006dea <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006bf4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006bf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bf8:	4413      	add	r3, r2
 8006bfa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006bfc:	8912      	ldrh	r2, [r2, #8]
 8006bfe:	0912      	lsrs	r2, r2, #4
 8006c00:	b292      	uxth	r2, r2
 8006c02:	4413      	add	r3, r2
 8006c04:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006c06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d204      	bcs.n	8006c18 <find_volume+0x2b0>
 8006c0e:	230d      	movs	r3, #13
 8006c10:	e0eb      	b.n	8006dea <find_volume+0x482>
 8006c12:	bf00      	nop
 8006c14:	200004d0 	.word	0x200004d0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006c18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c20:	8952      	ldrh	r2, [r2, #10]
 8006c22:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c26:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d101      	bne.n	8006c32 <find_volume+0x2ca>
 8006c2e:	230d      	movs	r3, #13
 8006c30:	e0db      	b.n	8006dea <find_volume+0x482>
		fmt = FS_FAT32;
 8006c32:	2303      	movs	r3, #3
 8006c34:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c3a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d802      	bhi.n	8006c48 <find_volume+0x2e0>
 8006c42:	2302      	movs	r3, #2
 8006c44:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c4a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d802      	bhi.n	8006c58 <find_volume+0x2f0>
 8006c52:	2301      	movs	r3, #1
 8006c54:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c5a:	1c9a      	adds	r2, r3, #2
 8006c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c5e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8006c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c62:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006c64:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006c66:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006c68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c6a:	441a      	add	r2, r3
 8006c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c6e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8006c70:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c74:	441a      	add	r2, r3
 8006c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c78:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8006c7a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006c7e:	2b03      	cmp	r3, #3
 8006c80:	d11e      	bne.n	8006cc0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c84:	3330      	adds	r3, #48	@ 0x30
 8006c86:	332a      	adds	r3, #42	@ 0x2a
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f7ff fd01 	bl	8006690 <ld_word>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d001      	beq.n	8006c98 <find_volume+0x330>
 8006c94:	230d      	movs	r3, #13
 8006c96:	e0a8      	b.n	8006dea <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c9a:	891b      	ldrh	r3, [r3, #8]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d001      	beq.n	8006ca4 <find_volume+0x33c>
 8006ca0:	230d      	movs	r3, #13
 8006ca2:	e0a2      	b.n	8006dea <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ca6:	3330      	adds	r3, #48	@ 0x30
 8006ca8:	332c      	adds	r3, #44	@ 0x2c
 8006caa:	4618      	mov	r0, r3
 8006cac:	f7ff fd08 	bl	80066c0 <ld_dword>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cb4:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cb8:	695b      	ldr	r3, [r3, #20]
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cbe:	e01f      	b.n	8006d00 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cc2:	891b      	ldrh	r3, [r3, #8]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d101      	bne.n	8006ccc <find_volume+0x364>
 8006cc8:	230d      	movs	r3, #13
 8006cca:	e08e      	b.n	8006dea <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cce:	6a1a      	ldr	r2, [r3, #32]
 8006cd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cd2:	441a      	add	r2, r3
 8006cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cd6:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006cd8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d103      	bne.n	8006ce8 <find_volume+0x380>
 8006ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	005b      	lsls	r3, r3, #1
 8006ce6:	e00a      	b.n	8006cfe <find_volume+0x396>
 8006ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cea:	695a      	ldr	r2, [r3, #20]
 8006cec:	4613      	mov	r3, r2
 8006cee:	005b      	lsls	r3, r3, #1
 8006cf0:	4413      	add	r3, r2
 8006cf2:	085a      	lsrs	r2, r3, #1
 8006cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cf6:	695b      	ldr	r3, [r3, #20]
 8006cf8:	f003 0301 	and.w	r3, r3, #1
 8006cfc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006cfe:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d02:	699a      	ldr	r2, [r3, #24]
 8006d04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d06:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8006d0a:	0a5b      	lsrs	r3, r3, #9
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d201      	bcs.n	8006d14 <find_volume+0x3ac>
 8006d10:	230d      	movs	r3, #13
 8006d12:	e06a      	b.n	8006dea <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d16:	f04f 32ff 	mov.w	r2, #4294967295
 8006d1a:	611a      	str	r2, [r3, #16]
 8006d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d1e:	691a      	ldr	r2, [r3, #16]
 8006d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d22:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8006d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d26:	2280      	movs	r2, #128	@ 0x80
 8006d28:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006d2a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006d2e:	2b03      	cmp	r3, #3
 8006d30:	d149      	bne.n	8006dc6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d34:	3330      	adds	r3, #48	@ 0x30
 8006d36:	3330      	adds	r3, #48	@ 0x30
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7ff fca9 	bl	8006690 <ld_word>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d140      	bne.n	8006dc6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006d44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d46:	3301      	adds	r3, #1
 8006d48:	4619      	mov	r1, r3
 8006d4a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006d4c:	f7ff fd44 	bl	80067d8 <move_window>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d137      	bne.n	8006dc6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8006d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d58:	2200      	movs	r2, #0
 8006d5a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d5e:	3330      	adds	r3, #48	@ 0x30
 8006d60:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006d64:	4618      	mov	r0, r3
 8006d66:	f7ff fc93 	bl	8006690 <ld_word>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d127      	bne.n	8006dc6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d78:	3330      	adds	r3, #48	@ 0x30
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7ff fca0 	bl	80066c0 <ld_dword>
 8006d80:	4603      	mov	r3, r0
 8006d82:	4a1c      	ldr	r2, [pc, #112]	@ (8006df4 <find_volume+0x48c>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d11e      	bne.n	8006dc6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d8a:	3330      	adds	r3, #48	@ 0x30
 8006d8c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006d90:	4618      	mov	r0, r3
 8006d92:	f7ff fc95 	bl	80066c0 <ld_dword>
 8006d96:	4603      	mov	r3, r0
 8006d98:	4a17      	ldr	r2, [pc, #92]	@ (8006df8 <find_volume+0x490>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d113      	bne.n	8006dc6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006da0:	3330      	adds	r3, #48	@ 0x30
 8006da2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006da6:	4618      	mov	r0, r3
 8006da8:	f7ff fc8a 	bl	80066c0 <ld_dword>
 8006dac:	4602      	mov	r2, r0
 8006dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006db0:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006db4:	3330      	adds	r3, #48	@ 0x30
 8006db6:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f7ff fc80 	bl	80066c0 <ld_dword>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dc4:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dc8:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006dcc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006dce:	4b0b      	ldr	r3, [pc, #44]	@ (8006dfc <find_volume+0x494>)
 8006dd0:	881b      	ldrh	r3, [r3, #0]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	4b09      	ldr	r3, [pc, #36]	@ (8006dfc <find_volume+0x494>)
 8006dd8:	801a      	strh	r2, [r3, #0]
 8006dda:	4b08      	ldr	r3, [pc, #32]	@ (8006dfc <find_volume+0x494>)
 8006ddc:	881a      	ldrh	r2, [r3, #0]
 8006dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006de0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006de2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006de4:	f7ff fc90 	bl	8006708 <clear_lock>
#endif
	return FR_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3758      	adds	r7, #88	@ 0x58
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	41615252 	.word	0x41615252
 8006df8:	61417272 	.word	0x61417272
 8006dfc:	200004d4 	.word	0x200004d4

08006e00 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b088      	sub	sp, #32
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006e12:	f107 0310 	add.w	r3, r7, #16
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7ff fd0b 	bl	8006832 <get_ldnumber>
 8006e1c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	da01      	bge.n	8006e28 <f_mount+0x28>
 8006e24:	230b      	movs	r3, #11
 8006e26:	e02b      	b.n	8006e80 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006e28:	4a17      	ldr	r2, [pc, #92]	@ (8006e88 <f_mount+0x88>)
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e30:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d005      	beq.n	8006e44 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006e38:	69b8      	ldr	r0, [r7, #24]
 8006e3a:	f7ff fc65 	bl	8006708 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	2200      	movs	r2, #0
 8006e42:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d002      	beq.n	8006e50 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	490d      	ldr	r1, [pc, #52]	@ (8006e88 <f_mount+0x88>)
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d002      	beq.n	8006e66 <f_mount+0x66>
 8006e60:	79fb      	ldrb	r3, [r7, #7]
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d001      	beq.n	8006e6a <f_mount+0x6a>
 8006e66:	2300      	movs	r3, #0
 8006e68:	e00a      	b.n	8006e80 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006e6a:	f107 010c 	add.w	r1, r7, #12
 8006e6e:	f107 0308 	add.w	r3, r7, #8
 8006e72:	2200      	movs	r2, #0
 8006e74:	4618      	mov	r0, r3
 8006e76:	f7ff fd77 	bl	8006968 <find_volume>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3720      	adds	r7, #32
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	200004d0 	.word	0x200004d0

08006e8c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b087      	sub	sp, #28
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	4613      	mov	r3, r2
 8006e98:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006ea2:	4b1f      	ldr	r3, [pc, #124]	@ (8006f20 <FATFS_LinkDriverEx+0x94>)
 8006ea4:	7a5b      	ldrb	r3, [r3, #9]
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d131      	bne.n	8006f10 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006eac:	4b1c      	ldr	r3, [pc, #112]	@ (8006f20 <FATFS_LinkDriverEx+0x94>)
 8006eae:	7a5b      	ldrb	r3, [r3, #9]
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	4b1a      	ldr	r3, [pc, #104]	@ (8006f20 <FATFS_LinkDriverEx+0x94>)
 8006eb6:	2100      	movs	r1, #0
 8006eb8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006eba:	4b19      	ldr	r3, [pc, #100]	@ (8006f20 <FATFS_LinkDriverEx+0x94>)
 8006ebc:	7a5b      	ldrb	r3, [r3, #9]
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	4a17      	ldr	r2, [pc, #92]	@ (8006f20 <FATFS_LinkDriverEx+0x94>)
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4413      	add	r3, r2
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006eca:	4b15      	ldr	r3, [pc, #84]	@ (8006f20 <FATFS_LinkDriverEx+0x94>)
 8006ecc:	7a5b      	ldrb	r3, [r3, #9]
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	4b13      	ldr	r3, [pc, #76]	@ (8006f20 <FATFS_LinkDriverEx+0x94>)
 8006ed4:	4413      	add	r3, r2
 8006ed6:	79fa      	ldrb	r2, [r7, #7]
 8006ed8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006eda:	4b11      	ldr	r3, [pc, #68]	@ (8006f20 <FATFS_LinkDriverEx+0x94>)
 8006edc:	7a5b      	ldrb	r3, [r3, #9]
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	1c5a      	adds	r2, r3, #1
 8006ee2:	b2d1      	uxtb	r1, r2
 8006ee4:	4a0e      	ldr	r2, [pc, #56]	@ (8006f20 <FATFS_LinkDriverEx+0x94>)
 8006ee6:	7251      	strb	r1, [r2, #9]
 8006ee8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006eea:	7dbb      	ldrb	r3, [r7, #22]
 8006eec:	3330      	adds	r3, #48	@ 0x30
 8006eee:	b2da      	uxtb	r2, r3
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	223a      	movs	r2, #58	@ 0x3a
 8006efa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	3302      	adds	r3, #2
 8006f00:	222f      	movs	r2, #47	@ 0x2f
 8006f02:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	3303      	adds	r3, #3
 8006f08:	2200      	movs	r2, #0
 8006f0a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006f10:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	371c      	adds	r7, #28
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	200004f8 	.word	0x200004f8

08006f24 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006f2e:	2200      	movs	r2, #0
 8006f30:	6839      	ldr	r1, [r7, #0]
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f7ff ffaa 	bl	8006e8c <FATFS_LinkDriverEx>
 8006f38:	4603      	mov	r3, r0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3708      	adds	r7, #8
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <memset>:
 8006f42:	4402      	add	r2, r0
 8006f44:	4603      	mov	r3, r0
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d100      	bne.n	8006f4c <memset+0xa>
 8006f4a:	4770      	bx	lr
 8006f4c:	f803 1b01 	strb.w	r1, [r3], #1
 8006f50:	e7f9      	b.n	8006f46 <memset+0x4>
	...

08006f54 <__libc_init_array>:
 8006f54:	b570      	push	{r4, r5, r6, lr}
 8006f56:	4d0d      	ldr	r5, [pc, #52]	@ (8006f8c <__libc_init_array+0x38>)
 8006f58:	4c0d      	ldr	r4, [pc, #52]	@ (8006f90 <__libc_init_array+0x3c>)
 8006f5a:	1b64      	subs	r4, r4, r5
 8006f5c:	10a4      	asrs	r4, r4, #2
 8006f5e:	2600      	movs	r6, #0
 8006f60:	42a6      	cmp	r6, r4
 8006f62:	d109      	bne.n	8006f78 <__libc_init_array+0x24>
 8006f64:	4d0b      	ldr	r5, [pc, #44]	@ (8006f94 <__libc_init_array+0x40>)
 8006f66:	4c0c      	ldr	r4, [pc, #48]	@ (8006f98 <__libc_init_array+0x44>)
 8006f68:	f000 f818 	bl	8006f9c <_init>
 8006f6c:	1b64      	subs	r4, r4, r5
 8006f6e:	10a4      	asrs	r4, r4, #2
 8006f70:	2600      	movs	r6, #0
 8006f72:	42a6      	cmp	r6, r4
 8006f74:	d105      	bne.n	8006f82 <__libc_init_array+0x2e>
 8006f76:	bd70      	pop	{r4, r5, r6, pc}
 8006f78:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f7c:	4798      	blx	r3
 8006f7e:	3601      	adds	r6, #1
 8006f80:	e7ee      	b.n	8006f60 <__libc_init_array+0xc>
 8006f82:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f86:	4798      	blx	r3
 8006f88:	3601      	adds	r6, #1
 8006f8a:	e7f2      	b.n	8006f72 <__libc_init_array+0x1e>
 8006f8c:	08006fe8 	.word	0x08006fe8
 8006f90:	08006fe8 	.word	0x08006fe8
 8006f94:	08006fe8 	.word	0x08006fe8
 8006f98:	08006fec 	.word	0x08006fec

08006f9c <_init>:
 8006f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f9e:	bf00      	nop
 8006fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fa2:	bc08      	pop	{r3}
 8006fa4:	469e      	mov	lr, r3
 8006fa6:	4770      	bx	lr

08006fa8 <_fini>:
 8006fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006faa:	bf00      	nop
 8006fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fae:	bc08      	pop	{r3}
 8006fb0:	469e      	mov	lr, r3
 8006fb2:	4770      	bx	lr
