
SdImageDisplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006444  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800660c  0800660c  0000760c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006638  08006638  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  08006638  08006638  00007638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006640  08006640  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006640  08006640  00007640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006644  08006644  00007644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006648  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  2000000c  08006654  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  200002ac  08006654  000082ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc1a  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c0d  00000000  00000000  00017c56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e10  00000000  00000000  0001a868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a85  00000000  00000000  0001b678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002800c  00000000  00000000  0001c0fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012397  00000000  00000000  00044109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef044  00000000  00000000  000564a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001454e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038d0  00000000  00000000  00145528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  00148df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080065f4 	.word	0x080065f4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080065f4 	.word	0x080065f4

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f001 f91b 	bl	8001736 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f810 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000504:	f000 f9f0 	bl	80008e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000508:	f000 f97a 	bl	8000800 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 800050c:	f000 f956 	bl	80007bc <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000510:	f005 fd8e 	bl	8006030 <MX_FATFS_Init>
  MX_DMA2D_Init();
 8000514:	f000 f86e 	bl	80005f4 <MX_DMA2D_Init>
  MX_LTDC_Init();
 8000518:	f000 f89e 	bl	8000658 <MX_LTDC_Init>
  MX_FMC_Init();
 800051c:	f000 f996 	bl	800084c <MX_FMC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000520:	bf00      	nop
 8000522:	e7fd      	b.n	8000520 <main+0x28>

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b094      	sub	sp, #80	@ 0x50
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0320 	add.w	r3, r7, #32
 800052e:	2230      	movs	r2, #48	@ 0x30
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f006 f831 	bl	800659a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000548:	4b28      	ldr	r3, [pc, #160]	@ (80005ec <SystemClock_Config+0xc8>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800054c:	4a27      	ldr	r2, [pc, #156]	@ (80005ec <SystemClock_Config+0xc8>)
 800054e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000552:	6413      	str	r3, [r2, #64]	@ 0x40
 8000554:	4b25      	ldr	r3, [pc, #148]	@ (80005ec <SystemClock_Config+0xc8>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000558:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000560:	4b23      	ldr	r3, [pc, #140]	@ (80005f0 <SystemClock_Config+0xcc>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000568:	4a21      	ldr	r2, [pc, #132]	@ (80005f0 <SystemClock_Config+0xcc>)
 800056a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4b1f      	ldr	r3, [pc, #124]	@ (80005f0 <SystemClock_Config+0xcc>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800057c:	2302      	movs	r3, #2
 800057e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000580:	2301      	movs	r3, #1
 8000582:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000584:	2310      	movs	r3, #16
 8000586:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000588:	2302      	movs	r3, #2
 800058a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800058c:	2300      	movs	r3, #0
 800058e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000590:	2308      	movs	r3, #8
 8000592:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000594:	2332      	movs	r3, #50	@ 0x32
 8000596:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000598:	2302      	movs	r3, #2
 800059a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800059c:	2302      	movs	r3, #2
 800059e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a0:	f107 0320 	add.w	r3, r7, #32
 80005a4:	4618      	mov	r0, r3
 80005a6:	f002 fb61 	bl	8002c6c <HAL_RCC_OscConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80005b0:	f000 fd50 	bl	8001054 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b4:	230f      	movs	r3, #15
 80005b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b8:	2302      	movs	r3, #2
 80005ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005c0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2101      	movs	r1, #1
 80005d2:	4618      	mov	r0, r3
 80005d4:	f002 fdee 	bl	80031b4 <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80005de:	f000 fd39 	bl	8001054 <Error_Handler>
  }
}
 80005e2:	bf00      	nop
 80005e4:	3750      	adds	r7, #80	@ 0x50
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40007000 	.word	0x40007000

080005f4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80005f8:	4b15      	ldr	r3, [pc, #84]	@ (8000650 <MX_DMA2D_Init+0x5c>)
 80005fa:	4a16      	ldr	r2, [pc, #88]	@ (8000654 <MX_DMA2D_Init+0x60>)
 80005fc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80005fe:	4b14      	ldr	r3, [pc, #80]	@ (8000650 <MX_DMA2D_Init+0x5c>)
 8000600:	2200      	movs	r2, #0
 8000602:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000604:	4b12      	ldr	r3, [pc, #72]	@ (8000650 <MX_DMA2D_Init+0x5c>)
 8000606:	2202      	movs	r2, #2
 8000608:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800060a:	4b11      	ldr	r3, [pc, #68]	@ (8000650 <MX_DMA2D_Init+0x5c>)
 800060c:	2200      	movs	r2, #0
 800060e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000610:	4b0f      	ldr	r3, [pc, #60]	@ (8000650 <MX_DMA2D_Init+0x5c>)
 8000612:	2200      	movs	r2, #0
 8000614:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8000616:	4b0e      	ldr	r3, [pc, #56]	@ (8000650 <MX_DMA2D_Init+0x5c>)
 8000618:	2202      	movs	r2, #2
 800061a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800061c:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <MX_DMA2D_Init+0x5c>)
 800061e:	2200      	movs	r2, #0
 8000620:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000622:	4b0b      	ldr	r3, [pc, #44]	@ (8000650 <MX_DMA2D_Init+0x5c>)
 8000624:	2200      	movs	r2, #0
 8000626:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000628:	4809      	ldr	r0, [pc, #36]	@ (8000650 <MX_DMA2D_Init+0x5c>)
 800062a:	f001 fdbd 	bl	80021a8 <HAL_DMA2D_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000634:	f000 fd0e 	bl	8001054 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000638:	2101      	movs	r1, #1
 800063a:	4805      	ldr	r0, [pc, #20]	@ (8000650 <MX_DMA2D_Init+0x5c>)
 800063c:	f001 fdfe 	bl	800223c <HAL_DMA2D_ConfigLayer>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000646:	f000 fd05 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000028 	.word	0x20000028
 8000654:	4002b000 	.word	0x4002b000

08000658 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b09a      	sub	sp, #104	@ 0x68
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800065e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000662:	2234      	movs	r2, #52	@ 0x34
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f005 ff97 	bl	800659a <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 800066c:	463b      	mov	r3, r7
 800066e:	2234      	movs	r2, #52	@ 0x34
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f005 ff91 	bl	800659a <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000678:	4b4e      	ldr	r3, [pc, #312]	@ (80007b4 <MX_LTDC_Init+0x15c>)
 800067a:	4a4f      	ldr	r2, [pc, #316]	@ (80007b8 <MX_LTDC_Init+0x160>)
 800067c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800067e:	4b4d      	ldr	r3, [pc, #308]	@ (80007b4 <MX_LTDC_Init+0x15c>)
 8000680:	2200      	movs	r2, #0
 8000682:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000684:	4b4b      	ldr	r3, [pc, #300]	@ (80007b4 <MX_LTDC_Init+0x15c>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800068a:	4b4a      	ldr	r3, [pc, #296]	@ (80007b4 <MX_LTDC_Init+0x15c>)
 800068c:	2200      	movs	r2, #0
 800068e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000690:	4b48      	ldr	r3, [pc, #288]	@ (80007b4 <MX_LTDC_Init+0x15c>)
 8000692:	2200      	movs	r2, #0
 8000694:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000696:	4b47      	ldr	r3, [pc, #284]	@ (80007b4 <MX_LTDC_Init+0x15c>)
 8000698:	2207      	movs	r2, #7
 800069a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 800069c:	4b45      	ldr	r3, [pc, #276]	@ (80007b4 <MX_LTDC_Init+0x15c>)
 800069e:	2203      	movs	r2, #3
 80006a0:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80006a2:	4b44      	ldr	r3, [pc, #272]	@ (80007b4 <MX_LTDC_Init+0x15c>)
 80006a4:	220e      	movs	r2, #14
 80006a6:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80006a8:	4b42      	ldr	r3, [pc, #264]	@ (80007b4 <MX_LTDC_Init+0x15c>)
 80006aa:	2205      	movs	r2, #5
 80006ac:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80006ae:	4b41      	ldr	r3, [pc, #260]	@ (80007b4 <MX_LTDC_Init+0x15c>)
 80006b0:	f240 228e 	movw	r2, #654	@ 0x28e
 80006b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80006b6:	4b3f      	ldr	r3, [pc, #252]	@ (80007b4 <MX_LTDC_Init+0x15c>)
 80006b8:	f240 12e5 	movw	r2, #485	@ 0x1e5
 80006bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 80006be:	4b3d      	ldr	r3, [pc, #244]	@ (80007b4 <MX_LTDC_Init+0x15c>)
 80006c0:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80006c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 80006c6:	4b3b      	ldr	r3, [pc, #236]	@ (80007b4 <MX_LTDC_Init+0x15c>)
 80006c8:	f240 12e7 	movw	r2, #487	@ 0x1e7
 80006cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80006ce:	4b39      	ldr	r3, [pc, #228]	@ (80007b4 <MX_LTDC_Init+0x15c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80006d6:	4b37      	ldr	r3, [pc, #220]	@ (80007b4 <MX_LTDC_Init+0x15c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80006de:	4b35      	ldr	r3, [pc, #212]	@ (80007b4 <MX_LTDC_Init+0x15c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80006e6:	4833      	ldr	r0, [pc, #204]	@ (80007b4 <MX_LTDC_Init+0x15c>)
 80006e8:	f002 f818 	bl	800271c <HAL_LTDC_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80006f2:	f000 fcaf 	bl	8001054 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000706:	2300      	movs	r3, #0
 8000708:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 800070e:	2300      	movs	r3, #0
 8000710:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000712:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000716:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000718:	2305      	movs	r3, #5
 800071a:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800073a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800073e:	2200      	movs	r2, #0
 8000740:	4619      	mov	r1, r3
 8000742:	481c      	ldr	r0, [pc, #112]	@ (80007b4 <MX_LTDC_Init+0x15c>)
 8000744:	f002 f8ba 	bl	80028bc <HAL_LTDC_ConfigLayer>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800074e:	f000 fc81 	bl	8001054 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000752:	2300      	movs	r3, #0
 8000754:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800076e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000772:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000774:	2305      	movs	r3, #5
 8000776:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000796:	463b      	mov	r3, r7
 8000798:	2201      	movs	r2, #1
 800079a:	4619      	mov	r1, r3
 800079c:	4805      	ldr	r0, [pc, #20]	@ (80007b4 <MX_LTDC_Init+0x15c>)
 800079e:	f002 f88d 	bl	80028bc <HAL_LTDC_ConfigLayer>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80007a8:	f000 fc54 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	3768      	adds	r7, #104	@ 0x68
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000068 	.word	0x20000068
 80007b8:	40016800 	.word	0x40016800

080007bc <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80007c0:	4b0d      	ldr	r3, [pc, #52]	@ (80007f8 <MX_SDMMC1_SD_Init+0x3c>)
 80007c2:	4a0e      	ldr	r2, [pc, #56]	@ (80007fc <MX_SDMMC1_SD_Init+0x40>)
 80007c4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80007c6:	4b0c      	ldr	r3, [pc, #48]	@ (80007f8 <MX_SDMMC1_SD_Init+0x3c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80007cc:	4b0a      	ldr	r3, [pc, #40]	@ (80007f8 <MX_SDMMC1_SD_Init+0x3c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80007d2:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <MX_SDMMC1_SD_Init+0x3c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80007d8:	4b07      	ldr	r3, [pc, #28]	@ (80007f8 <MX_SDMMC1_SD_Init+0x3c>)
 80007da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80007de:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80007e0:	4b05      	ldr	r3, [pc, #20]	@ (80007f8 <MX_SDMMC1_SD_Init+0x3c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80007e6:	4b04      	ldr	r3, [pc, #16]	@ (80007f8 <MX_SDMMC1_SD_Init+0x3c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	20000110 	.word	0x20000110
 80007fc:	40012c00 	.word	0x40012c00

08000800 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000806:	4b10      	ldr	r3, [pc, #64]	@ (8000848 <MX_DMA_Init+0x48>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a0f      	ldr	r2, [pc, #60]	@ (8000848 <MX_DMA_Init+0x48>)
 800080c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b0d      	ldr	r3, [pc, #52]	@ (8000848 <MX_DMA_Init+0x48>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2100      	movs	r1, #0
 8000822:	203b      	movs	r0, #59	@ 0x3b
 8000824:	f001 f8e3 	bl	80019ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000828:	203b      	movs	r0, #59	@ 0x3b
 800082a:	f001 f8fc 	bl	8001a26 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2100      	movs	r1, #0
 8000832:	2045      	movs	r0, #69	@ 0x45
 8000834:	f001 f8db 	bl	80019ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000838:	2045      	movs	r0, #69	@ 0x45
 800083a:	f001 f8f4 	bl	8001a26 <HAL_NVIC_EnableIRQ>

}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40023800 	.word	0x40023800

0800084c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b088      	sub	sp, #32
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
 8000860:	615a      	str	r2, [r3, #20]
 8000862:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000864:	4b1e      	ldr	r3, [pc, #120]	@ (80008e0 <MX_FMC_Init+0x94>)
 8000866:	4a1f      	ldr	r2, [pc, #124]	@ (80008e4 <MX_FMC_Init+0x98>)
 8000868:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800086a:	4b1d      	ldr	r3, [pc, #116]	@ (80008e0 <MX_FMC_Init+0x94>)
 800086c:	2200      	movs	r2, #0
 800086e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000870:	4b1b      	ldr	r3, [pc, #108]	@ (80008e0 <MX_FMC_Init+0x94>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000876:	4b1a      	ldr	r3, [pc, #104]	@ (80008e0 <MX_FMC_Init+0x94>)
 8000878:	2204      	movs	r2, #4
 800087a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800087c:	4b18      	ldr	r3, [pc, #96]	@ (80008e0 <MX_FMC_Init+0x94>)
 800087e:	2210      	movs	r2, #16
 8000880:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000882:	4b17      	ldr	r3, [pc, #92]	@ (80008e0 <MX_FMC_Init+0x94>)
 8000884:	2240      	movs	r2, #64	@ 0x40
 8000886:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000888:	4b15      	ldr	r3, [pc, #84]	@ (80008e0 <MX_FMC_Init+0x94>)
 800088a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800088e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000890:	4b13      	ldr	r3, [pc, #76]	@ (80008e0 <MX_FMC_Init+0x94>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000896:	4b12      	ldr	r3, [pc, #72]	@ (80008e0 <MX_FMC_Init+0x94>)
 8000898:	2200      	movs	r2, #0
 800089a:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800089c:	4b10      	ldr	r3, [pc, #64]	@ (80008e0 <MX_FMC_Init+0x94>)
 800089e:	2200      	movs	r2, #0
 80008a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80008a2:	4b0f      	ldr	r3, [pc, #60]	@ (80008e0 <MX_FMC_Init+0x94>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80008a8:	2302      	movs	r3, #2
 80008aa:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80008ac:	2307      	movs	r3, #7
 80008ae:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80008b0:	2304      	movs	r3, #4
 80008b2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80008b4:	2307      	movs	r3, #7
 80008b6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80008b8:	2303      	movs	r3, #3
 80008ba:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80008bc:	2302      	movs	r3, #2
 80008be:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80008c0:	2302      	movs	r3, #2
 80008c2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	4619      	mov	r1, r3
 80008c8:	4805      	ldr	r0, [pc, #20]	@ (80008e0 <MX_FMC_Init+0x94>)
 80008ca:	f004 fd40 	bl	800534e <HAL_SDRAM_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_FMC_Init+0x8c>
  {
    Error_Handler( );
 80008d4:	f000 fbbe 	bl	8001054 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80008d8:	bf00      	nop
 80008da:	3720      	adds	r7, #32
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000254 	.word	0x20000254
 80008e4:	a0000140 	.word	0xa0000140

080008e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b090      	sub	sp, #64	@ 0x40
 80008ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008fe:	4bad      	ldr	r3, [pc, #692]	@ (8000bb4 <MX_GPIO_Init+0x2cc>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	4aac      	ldr	r2, [pc, #688]	@ (8000bb4 <MX_GPIO_Init+0x2cc>)
 8000904:	f043 0310 	orr.w	r3, r3, #16
 8000908:	6313      	str	r3, [r2, #48]	@ 0x30
 800090a:	4baa      	ldr	r3, [pc, #680]	@ (8000bb4 <MX_GPIO_Init+0x2cc>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	f003 0310 	and.w	r3, r3, #16
 8000912:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000916:	4ba7      	ldr	r3, [pc, #668]	@ (8000bb4 <MX_GPIO_Init+0x2cc>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	4aa6      	ldr	r2, [pc, #664]	@ (8000bb4 <MX_GPIO_Init+0x2cc>)
 800091c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000920:	6313      	str	r3, [r2, #48]	@ 0x30
 8000922:	4ba4      	ldr	r3, [pc, #656]	@ (8000bb4 <MX_GPIO_Init+0x2cc>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800092a:	627b      	str	r3, [r7, #36]	@ 0x24
 800092c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	4ba1      	ldr	r3, [pc, #644]	@ (8000bb4 <MX_GPIO_Init+0x2cc>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	4aa0      	ldr	r2, [pc, #640]	@ (8000bb4 <MX_GPIO_Init+0x2cc>)
 8000934:	f043 0302 	orr.w	r3, r3, #2
 8000938:	6313      	str	r3, [r2, #48]	@ 0x30
 800093a:	4b9e      	ldr	r3, [pc, #632]	@ (8000bb4 <MX_GPIO_Init+0x2cc>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	623b      	str	r3, [r7, #32]
 8000944:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000946:	4b9b      	ldr	r3, [pc, #620]	@ (8000bb4 <MX_GPIO_Init+0x2cc>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	4a9a      	ldr	r2, [pc, #616]	@ (8000bb4 <MX_GPIO_Init+0x2cc>)
 800094c:	f043 0308 	orr.w	r3, r3, #8
 8000950:	6313      	str	r3, [r2, #48]	@ 0x30
 8000952:	4b98      	ldr	r3, [pc, #608]	@ (8000bb4 <MX_GPIO_Init+0x2cc>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	f003 0308 	and.w	r3, r3, #8
 800095a:	61fb      	str	r3, [r7, #28]
 800095c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095e:	4b95      	ldr	r3, [pc, #596]	@ (8000bb4 <MX_GPIO_Init+0x2cc>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	4a94      	ldr	r2, [pc, #592]	@ (8000bb4 <MX_GPIO_Init+0x2cc>)
 8000964:	f043 0304 	orr.w	r3, r3, #4
 8000968:	6313      	str	r3, [r2, #48]	@ 0x30
 800096a:	4b92      	ldr	r3, [pc, #584]	@ (8000bb4 <MX_GPIO_Init+0x2cc>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	f003 0304 	and.w	r3, r3, #4
 8000972:	61bb      	str	r3, [r7, #24]
 8000974:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	4b8f      	ldr	r3, [pc, #572]	@ (8000bb4 <MX_GPIO_Init+0x2cc>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	4a8e      	ldr	r2, [pc, #568]	@ (8000bb4 <MX_GPIO_Init+0x2cc>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6313      	str	r3, [r2, #48]	@ 0x30
 8000982:	4b8c      	ldr	r3, [pc, #560]	@ (8000bb4 <MX_GPIO_Init+0x2cc>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	617b      	str	r3, [r7, #20]
 800098c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800098e:	4b89      	ldr	r3, [pc, #548]	@ (8000bb4 <MX_GPIO_Init+0x2cc>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	4a88      	ldr	r2, [pc, #544]	@ (8000bb4 <MX_GPIO_Init+0x2cc>)
 8000994:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000998:	6313      	str	r3, [r2, #48]	@ 0x30
 800099a:	4b86      	ldr	r3, [pc, #536]	@ (8000bb4 <MX_GPIO_Init+0x2cc>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80009a6:	4b83      	ldr	r3, [pc, #524]	@ (8000bb4 <MX_GPIO_Init+0x2cc>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	4a82      	ldr	r2, [pc, #520]	@ (8000bb4 <MX_GPIO_Init+0x2cc>)
 80009ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b2:	4b80      	ldr	r3, [pc, #512]	@ (8000bb4 <MX_GPIO_Init+0x2cc>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80009be:	4b7d      	ldr	r3, [pc, #500]	@ (8000bb4 <MX_GPIO_Init+0x2cc>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	4a7c      	ldr	r2, [pc, #496]	@ (8000bb4 <MX_GPIO_Init+0x2cc>)
 80009c4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ca:	4b7a      	ldr	r3, [pc, #488]	@ (8000bb4 <MX_GPIO_Init+0x2cc>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009d6:	4b77      	ldr	r3, [pc, #476]	@ (8000bb4 <MX_GPIO_Init+0x2cc>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	4a76      	ldr	r2, [pc, #472]	@ (8000bb4 <MX_GPIO_Init+0x2cc>)
 80009dc:	f043 0320 	orr.w	r3, r3, #32
 80009e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e2:	4b74      	ldr	r3, [pc, #464]	@ (8000bb4 <MX_GPIO_Init+0x2cc>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	f003 0320 	and.w	r3, r3, #32
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ee:	4b71      	ldr	r3, [pc, #452]	@ (8000bb4 <MX_GPIO_Init+0x2cc>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	4a70      	ldr	r2, [pc, #448]	@ (8000bb4 <MX_GPIO_Init+0x2cc>)
 80009f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fa:	4b6e      	ldr	r3, [pc, #440]	@ (8000bb4 <MX_GPIO_Init+0x2cc>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a06:	2201      	movs	r2, #1
 8000a08:	2120      	movs	r1, #32
 8000a0a:	486b      	ldr	r0, [pc, #428]	@ (8000bb8 <MX_GPIO_Init+0x2d0>)
 8000a0c:	f001 fe6c 	bl	80026e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000a10:	2200      	movs	r2, #0
 8000a12:	f241 010c 	movw	r1, #4108	@ 0x100c
 8000a16:	4869      	ldr	r0, [pc, #420]	@ (8000bbc <MX_GPIO_Init+0x2d4>)
 8000a18:	f001 fe66 	bl	80026e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2108      	movs	r1, #8
 8000a20:	4867      	ldr	r0, [pc, #412]	@ (8000bc0 <MX_GPIO_Init+0x2d8>)
 8000a22:	f001 fe61 	bl	80026e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a2c:	4865      	ldr	r0, [pc, #404]	@ (8000bc4 <MX_GPIO_Init+0x2dc>)
 8000a2e:	f001 fe5b 	bl	80026e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	21c8      	movs	r1, #200	@ 0xc8
 8000a36:	4864      	ldr	r0, [pc, #400]	@ (8000bc8 <MX_GPIO_Init+0x2e0>)
 8000a38:	f001 fe56 	bl	80026e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000a3c:	2308      	movs	r3, #8
 8000a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a40:	2300      	movs	r3, #0
 8000a42:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	485f      	ldr	r0, [pc, #380]	@ (8000bcc <MX_GPIO_Init+0x2e4>)
 8000a50:	f001 fc86 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000a54:	2304      	movs	r3, #4
 8000a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a60:	2303      	movs	r3, #3
 8000a62:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000a64:	2309      	movs	r3, #9
 8000a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000a68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4857      	ldr	r0, [pc, #348]	@ (8000bcc <MX_GPIO_Init+0x2e4>)
 8000a70:	f001 fc76 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000a74:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8000a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a82:	2303      	movs	r3, #3
 8000a84:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a86:	230b      	movs	r3, #11
 8000a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a8e:	4619      	mov	r1, r3
 8000a90:	484d      	ldr	r0, [pc, #308]	@ (8000bc8 <MX_GPIO_Init+0x2e0>)
 8000a92:	f001 fc65 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000a96:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a9c:	2312      	movs	r3, #18
 8000a9e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aa8:	2304      	movs	r3, #4
 8000aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4847      	ldr	r0, [pc, #284]	@ (8000bd0 <MX_GPIO_Init+0x2e8>)
 8000ab4:	f001 fc54 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000ab8:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8000abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000aca:	230a      	movs	r3, #10
 8000acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ace:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	483e      	ldr	r0, [pc, #248]	@ (8000bd0 <MX_GPIO_Init+0x2e8>)
 8000ad6:	f001 fc43 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000ada:	2310      	movs	r3, #16
 8000adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000aea:	2302      	movs	r3, #2
 8000aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000aee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000af2:	4619      	mov	r1, r3
 8000af4:	4836      	ldr	r0, [pc, #216]	@ (8000bd0 <MX_GPIO_Init+0x2e8>)
 8000af6:	f001 fc33 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000afa:	2380      	movs	r3, #128	@ 0x80
 8000afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000b0a:	2308      	movs	r3, #8
 8000b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b12:	4619      	mov	r1, r3
 8000b14:	4828      	ldr	r0, [pc, #160]	@ (8000bb8 <MX_GPIO_Init+0x2d0>)
 8000b16:	f001 fc23 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000b1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b20:	2302      	movs	r3, #2
 8000b22:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000b30:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b34:	4619      	mov	r1, r3
 8000b36:	4827      	ldr	r0, [pc, #156]	@ (8000bd4 <MX_GPIO_Init+0x2ec>)
 8000b38:	f001 fc12 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000b3c:	2360      	movs	r3, #96	@ 0x60
 8000b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b40:	2302      	movs	r3, #2
 8000b42:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b4c:	230d      	movs	r3, #13
 8000b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b54:	4619      	mov	r1, r3
 8000b56:	481d      	ldr	r0, [pc, #116]	@ (8000bcc <MX_GPIO_Init+0x2e4>)
 8000b58:	f001 fc02 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000b5c:	2380      	movs	r3, #128	@ 0x80
 8000b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b6c:	2307      	movs	r3, #7
 8000b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000b70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b74:	4619      	mov	r1, r3
 8000b76:	4816      	ldr	r0, [pc, #88]	@ (8000bd0 <MX_GPIO_Init+0x2e8>)
 8000b78:	f001 fbf2 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000b7c:	2340      	movs	r3, #64	@ 0x40
 8000b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	2302      	movs	r3, #2
 8000b82:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000b8c:	230a      	movs	r3, #10
 8000b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000b90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b94:	4619      	mov	r1, r3
 8000b96:	480e      	ldr	r0, [pc, #56]	@ (8000bd0 <MX_GPIO_Init+0x2e8>)
 8000b98:	f001 fbe2 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000b9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000baa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bae:	4619      	mov	r1, r3
 8000bb0:	e012      	b.n	8000bd8 <MX_GPIO_Init+0x2f0>
 8000bb2:	bf00      	nop
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40020c00 	.word	0x40020c00
 8000bbc:	40022000 	.word	0x40022000
 8000bc0:	40022800 	.word	0x40022800
 8000bc4:	40021c00 	.word	0x40021c00
 8000bc8:	40021800 	.word	0x40021800
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	40020400 	.word	0x40020400
 8000bd4:	40020000 	.word	0x40020000
 8000bd8:	48bc      	ldr	r0, [pc, #752]	@ (8000ecc <MX_GPIO_Init+0x5e4>)
 8000bda:	f001 fbc1 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000bde:	2340      	movs	r3, #64	@ 0x40
 8000be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000be2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000be6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000bec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	48b7      	ldr	r0, [pc, #732]	@ (8000ed0 <MX_GPIO_Init+0x5e8>)
 8000bf4:	f001 fbb4 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000bf8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c06:	2303      	movs	r3, #3
 8000c08:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c0a:	230a      	movs	r3, #10
 8000c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c12:	4619      	mov	r1, r3
 8000c14:	48af      	ldr	r0, [pc, #700]	@ (8000ed4 <MX_GPIO_Init+0x5ec>)
 8000c16:	f001 fba3 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000c1a:	23f0      	movs	r3, #240	@ 0xf0
 8000c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000c2a:	230a      	movs	r3, #10
 8000c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c32:	4619      	mov	r1, r3
 8000c34:	48a8      	ldr	r0, [pc, #672]	@ (8000ed8 <MX_GPIO_Init+0x5f0>)
 8000c36:	f001 fb93 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000c3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000c4c:	230a      	movs	r3, #10
 8000c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000c50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c54:	4619      	mov	r1, r3
 8000c56:	48a1      	ldr	r0, [pc, #644]	@ (8000edc <MX_GPIO_Init+0x5f4>)
 8000c58:	f001 fb82 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000c5c:	2320      	movs	r3, #32
 8000c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c60:	2301      	movs	r3, #1
 8000c62:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c70:	4619      	mov	r1, r3
 8000c72:	4897      	ldr	r0, [pc, #604]	@ (8000ed0 <MX_GPIO_Init+0x5e8>)
 8000c74:	f001 fb74 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000c78:	2308      	movs	r3, #8
 8000c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c84:	2300      	movs	r3, #0
 8000c86:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c88:	230d      	movs	r3, #13
 8000c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000c8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c90:	4619      	mov	r1, r3
 8000c92:	488f      	ldr	r0, [pc, #572]	@ (8000ed0 <MX_GPIO_Init+0x5e8>)
 8000c94:	f001 fb64 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000c98:	f241 030c 	movw	r3, #4108	@ 0x100c
 8000c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000caa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4889      	ldr	r0, [pc, #548]	@ (8000ed8 <MX_GPIO_Init+0x5f0>)
 8000cb2:	f001 fb55 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000cb6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000cc4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4885      	ldr	r0, [pc, #532]	@ (8000ee0 <MX_GPIO_Init+0x5f8>)
 8000ccc:	f001 fb48 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000cd0:	2308      	movs	r3, #8
 8000cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000ce0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	487f      	ldr	r0, [pc, #508]	@ (8000ee4 <MX_GPIO_Init+0x5fc>)
 8000ce8:	f001 fb3a 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000cec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000cfe:	230d      	movs	r3, #13
 8000d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000d02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d06:	4619      	mov	r1, r3
 8000d08:	4874      	ldr	r0, [pc, #464]	@ (8000edc <MX_GPIO_Init+0x5f4>)
 8000d0a:	f001 fb29 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000d0e:	2310      	movs	r3, #16
 8000d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d12:	2300      	movs	r3, #0
 8000d14:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d1e:	4619      	mov	r1, r3
 8000d20:	486b      	ldr	r0, [pc, #428]	@ (8000ed0 <MX_GPIO_Init+0x5e8>)
 8000d22:	f001 fb1d 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000d26:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d38:	4619      	mov	r1, r3
 8000d3a:	486b      	ldr	r0, [pc, #428]	@ (8000ee8 <MX_GPIO_Init+0x600>)
 8000d3c:	f001 fb10 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8000d40:	2302      	movs	r3, #2
 8000d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d50:	2305      	movs	r3, #5
 8000d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8000d54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d58:	4619      	mov	r1, r3
 8000d5a:	485f      	ldr	r0, [pc, #380]	@ (8000ed8 <MX_GPIO_Init+0x5f0>)
 8000d5c:	f001 fb00 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000d60:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d66:	2301      	movs	r3, #1
 8000d68:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d72:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d76:	4619      	mov	r1, r3
 8000d78:	485b      	ldr	r0, [pc, #364]	@ (8000ee8 <MX_GPIO_Init+0x600>)
 8000d7a:	f001 faf1 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000d7e:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8000d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	2302      	movs	r3, #2
 8000d86:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d90:	230d      	movs	r3, #13
 8000d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4853      	ldr	r0, [pc, #332]	@ (8000ee8 <MX_GPIO_Init+0x600>)
 8000d9c:	f001 fae0 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000da0:	2301      	movs	r3, #1
 8000da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da4:	2302      	movs	r3, #2
 8000da6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2300      	movs	r3, #0
 8000dae:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000db0:	2302      	movs	r3, #2
 8000db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000db4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000db8:	4619      	mov	r1, r3
 8000dba:	4847      	ldr	r0, [pc, #284]	@ (8000ed8 <MX_GPIO_Init+0x5f0>)
 8000dbc:	f001 fad0 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000dc0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dd2:	2307      	movs	r3, #7
 8000dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000dd6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dda:	4619      	mov	r1, r3
 8000ddc:	483d      	ldr	r0, [pc, #244]	@ (8000ed4 <MX_GPIO_Init+0x5ec>)
 8000dde:	f001 fabf 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000de2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2300      	movs	r3, #0
 8000df2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000df4:	2301      	movs	r3, #1
 8000df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000df8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4835      	ldr	r0, [pc, #212]	@ (8000ed4 <MX_GPIO_Init+0x5ec>)
 8000e00:	f001 faae 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000e04:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e0a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000e0e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000e14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e18:	4619      	mov	r1, r3
 8000e1a:	482f      	ldr	r0, [pc, #188]	@ (8000ed8 <MX_GPIO_Init+0x5f0>)
 8000e1c:	f001 faa0 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000e20:	23c0      	movs	r3, #192	@ 0xc0
 8000e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e24:	2302      	movs	r3, #2
 8000e26:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000e30:	2308      	movs	r3, #8
 8000e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4829      	ldr	r0, [pc, #164]	@ (8000ee0 <MX_GPIO_Init+0x5f8>)
 8000e3c:	f001 fa90 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000e40:	2310      	movs	r3, #16
 8000e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000e50:	230a      	movs	r3, #10
 8000e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000e54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4823      	ldr	r0, [pc, #140]	@ (8000ee8 <MX_GPIO_Init+0x600>)
 8000e5c:	f001 fa80 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000e60:	23c8      	movs	r3, #200	@ 0xc8
 8000e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e64:	2301      	movs	r3, #1
 8000e66:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e74:	4619      	mov	r1, r3
 8000e76:	4819      	ldr	r0, [pc, #100]	@ (8000edc <MX_GPIO_Init+0x5f4>)
 8000e78:	f001 fa72 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000e7c:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8000e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e82:	2303      	movs	r3, #3
 8000e84:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4816      	ldr	r0, [pc, #88]	@ (8000eec <MX_GPIO_Init+0x604>)
 8000e92:	f001 fa65 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000e96:	2305      	movs	r3, #5
 8000e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000ea6:	230a      	movs	r3, #10
 8000ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eaa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eae:	4619      	mov	r1, r3
 8000eb0:	480b      	ldr	r0, [pc, #44]	@ (8000ee0 <MX_GPIO_Init+0x5f8>)
 8000eb2:	f001 fa55 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000eb6:	2332      	movs	r3, #50	@ 0x32
 8000eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ec6:	230b      	movs	r3, #11
 8000ec8:	e012      	b.n	8000ef0 <MX_GPIO_Init+0x608>
 8000eca:	bf00      	nop
 8000ecc:	40022400 	.word	0x40022400
 8000ed0:	40020c00 	.word	0x40020c00
 8000ed4:	40020000 	.word	0x40020000
 8000ed8:	40022000 	.word	0x40022000
 8000edc:	40021800 	.word	0x40021800
 8000ee0:	40020800 	.word	0x40020800
 8000ee4:	40022800 	.word	0x40022800
 8000ee8:	40021c00 	.word	0x40021c00
 8000eec:	40021400 	.word	0x40021400
 8000ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4850      	ldr	r0, [pc, #320]	@ (800103c <MX_GPIO_Init+0x754>)
 8000efa:	f001 fa31 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000efe:	2304      	movs	r3, #4
 8000f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000f0e:	2309      	movs	r3, #9
 8000f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f12:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f16:	4619      	mov	r1, r3
 8000f18:	4849      	ldr	r0, [pc, #292]	@ (8001040 <MX_GPIO_Init+0x758>)
 8000f1a:	f001 fa21 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000f1e:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f24:	2302      	movs	r3, #2
 8000f26:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000f30:	2309      	movs	r3, #9
 8000f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4842      	ldr	r0, [pc, #264]	@ (8001044 <MX_GPIO_Init+0x75c>)
 8000f3c:	f001 fa10 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000f40:	2304      	movs	r3, #4
 8000f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f44:	2300      	movs	r3, #0
 8000f46:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000f4c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f50:	4619      	mov	r1, r3
 8000f52:	483d      	ldr	r0, [pc, #244]	@ (8001048 <MX_GPIO_Init+0x760>)
 8000f54:	f001 fa04 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000f58:	2386      	movs	r3, #134	@ 0x86
 8000f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f64:	2303      	movs	r3, #3
 8000f66:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f68:	230b      	movs	r3, #11
 8000f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f70:	4619      	mov	r1, r3
 8000f72:	4836      	ldr	r0, [pc, #216]	@ (800104c <MX_GPIO_Init+0x764>)
 8000f74:	f001 f9f4 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000f84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4830      	ldr	r0, [pc, #192]	@ (800104c <MX_GPIO_Init+0x764>)
 8000f8c:	f001 f9e8 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000f90:	2350      	movs	r3, #80	@ 0x50
 8000f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000fa0:	230d      	movs	r3, #13
 8000fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4828      	ldr	r0, [pc, #160]	@ (800104c <MX_GPIO_Init+0x764>)
 8000fac:	f001 f9d8 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000fb0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fb6:	2312      	movs	r3, #18
 8000fb8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000fc6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4820      	ldr	r0, [pc, #128]	@ (8001050 <MX_GPIO_Init+0x768>)
 8000fce:	f001 f9c7 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000fd2:	2328      	movs	r3, #40	@ 0x28
 8000fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000fe2:	230a      	movs	r3, #10
 8000fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fea:	4619      	mov	r1, r3
 8000fec:	4817      	ldr	r0, [pc, #92]	@ (800104c <MX_GPIO_Init+0x764>)
 8000fee:	f001 f9b7 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000ff2:	2340      	movs	r3, #64	@ 0x40
 8000ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	2300      	movs	r3, #0
 8001000:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001002:	2309      	movs	r3, #9
 8001004:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001006:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800100a:	4619      	mov	r1, r3
 800100c:	4810      	ldr	r0, [pc, #64]	@ (8001050 <MX_GPIO_Init+0x768>)
 800100e:	f001 f9a7 	bl	8002360 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001012:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001016:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	2302      	movs	r3, #2
 800101a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	2300      	movs	r3, #0
 8001022:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001024:	2305      	movs	r3, #5
 8001026:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001028:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800102c:	4619      	mov	r1, r3
 800102e:	4804      	ldr	r0, [pc, #16]	@ (8001040 <MX_GPIO_Init+0x758>)
 8001030:	f001 f996 	bl	8002360 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001034:	bf00      	nop
 8001036:	3740      	adds	r7, #64	@ 0x40
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40020800 	.word	0x40020800
 8001040:	40020400 	.word	0x40020400
 8001044:	40020c00 	.word	0x40020c00
 8001048:	40021800 	.word	0x40021800
 800104c:	40020000 	.word	0x40020000
 8001050:	40021c00 	.word	0x40021c00

08001054 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001058:	b672      	cpsid	i
}
 800105a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800105c:	bf00      	nop
 800105e:	e7fd      	b.n	800105c <Error_Handler+0x8>

08001060 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001066:	4b0f      	ldr	r3, [pc, #60]	@ (80010a4 <HAL_MspInit+0x44>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106a:	4a0e      	ldr	r2, [pc, #56]	@ (80010a4 <HAL_MspInit+0x44>)
 800106c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001070:	6413      	str	r3, [r2, #64]	@ 0x40
 8001072:	4b0c      	ldr	r3, [pc, #48]	@ (80010a4 <HAL_MspInit+0x44>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001076:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107e:	4b09      	ldr	r3, [pc, #36]	@ (80010a4 <HAL_MspInit+0x44>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001082:	4a08      	ldr	r2, [pc, #32]	@ (80010a4 <HAL_MspInit+0x44>)
 8001084:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001088:	6453      	str	r3, [r2, #68]	@ 0x44
 800108a:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <HAL_MspInit+0x44>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800108e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001092:	603b      	str	r3, [r7, #0]
 8001094:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	40023800 	.word	0x40023800

080010a8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a0a      	ldr	r2, [pc, #40]	@ (80010e0 <HAL_DMA2D_MspInit+0x38>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d10b      	bne.n	80010d2 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80010ba:	4b0a      	ldr	r3, [pc, #40]	@ (80010e4 <HAL_DMA2D_MspInit+0x3c>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	4a09      	ldr	r2, [pc, #36]	@ (80010e4 <HAL_DMA2D_MspInit+0x3c>)
 80010c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80010c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c6:	4b07      	ldr	r3, [pc, #28]	@ (80010e4 <HAL_DMA2D_MspInit+0x3c>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 80010d2:	bf00      	nop
 80010d4:	3714      	adds	r7, #20
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	4002b000 	.word	0x4002b000
 80010e4:	40023800 	.word	0x40023800

080010e8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b0ae      	sub	sp, #184	@ 0xb8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001100:	f107 0320 	add.w	r3, r7, #32
 8001104:	2284      	movs	r2, #132	@ 0x84
 8001106:	2100      	movs	r1, #0
 8001108:	4618      	mov	r0, r3
 800110a:	f005 fa46 	bl	800659a <memset>
  if(hltdc->Instance==LTDC)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a6a      	ldr	r2, [pc, #424]	@ (80012bc <HAL_LTDC_MspInit+0x1d4>)
 8001114:	4293      	cmp	r3, r2
 8001116:	f040 80cc 	bne.w	80012b2 <HAL_LTDC_MspInit+0x1ca>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800111a:	2308      	movs	r3, #8
 800111c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800111e:	2332      	movs	r3, #50	@ 0x32
 8001120:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001122:	2302      	movs	r3, #2
 8001124:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001126:	2302      	movs	r3, #2
 8001128:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800112a:	2300      	movs	r3, #0
 800112c:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 800112e:	2301      	movs	r3, #1
 8001130:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001132:	2300      	movs	r3, #0
 8001134:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001136:	f107 0320 	add.w	r3, r7, #32
 800113a:	4618      	mov	r0, r3
 800113c:	f002 f9ec 	bl	8003518 <HAL_RCCEx_PeriphCLKConfig>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <HAL_LTDC_MspInit+0x62>
    {
      Error_Handler();
 8001146:	f7ff ff85 	bl	8001054 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800114a:	4b5d      	ldr	r3, [pc, #372]	@ (80012c0 <HAL_LTDC_MspInit+0x1d8>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800114e:	4a5c      	ldr	r2, [pc, #368]	@ (80012c0 <HAL_LTDC_MspInit+0x1d8>)
 8001150:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001154:	6453      	str	r3, [r2, #68]	@ 0x44
 8001156:	4b5a      	ldr	r3, [pc, #360]	@ (80012c0 <HAL_LTDC_MspInit+0x1d8>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800115a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800115e:	61fb      	str	r3, [r7, #28]
 8001160:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001162:	4b57      	ldr	r3, [pc, #348]	@ (80012c0 <HAL_LTDC_MspInit+0x1d8>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	4a56      	ldr	r2, [pc, #344]	@ (80012c0 <HAL_LTDC_MspInit+0x1d8>)
 8001168:	f043 0310 	orr.w	r3, r3, #16
 800116c:	6313      	str	r3, [r2, #48]	@ 0x30
 800116e:	4b54      	ldr	r3, [pc, #336]	@ (80012c0 <HAL_LTDC_MspInit+0x1d8>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	f003 0310 	and.w	r3, r3, #16
 8001176:	61bb      	str	r3, [r7, #24]
 8001178:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800117a:	4b51      	ldr	r3, [pc, #324]	@ (80012c0 <HAL_LTDC_MspInit+0x1d8>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117e:	4a50      	ldr	r2, [pc, #320]	@ (80012c0 <HAL_LTDC_MspInit+0x1d8>)
 8001180:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001184:	6313      	str	r3, [r2, #48]	@ 0x30
 8001186:	4b4e      	ldr	r3, [pc, #312]	@ (80012c0 <HAL_LTDC_MspInit+0x1d8>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800118e:	617b      	str	r3, [r7, #20]
 8001190:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001192:	4b4b      	ldr	r3, [pc, #300]	@ (80012c0 <HAL_LTDC_MspInit+0x1d8>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	4a4a      	ldr	r2, [pc, #296]	@ (80012c0 <HAL_LTDC_MspInit+0x1d8>)
 8001198:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800119c:	6313      	str	r3, [r2, #48]	@ 0x30
 800119e:	4b48      	ldr	r3, [pc, #288]	@ (80012c0 <HAL_LTDC_MspInit+0x1d8>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80011aa:	4b45      	ldr	r3, [pc, #276]	@ (80012c0 <HAL_LTDC_MspInit+0x1d8>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ae:	4a44      	ldr	r2, [pc, #272]	@ (80012c0 <HAL_LTDC_MspInit+0x1d8>)
 80011b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b6:	4b42      	ldr	r3, [pc, #264]	@ (80012c0 <HAL_LTDC_MspInit+0x1d8>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80011c2:	4b3f      	ldr	r3, [pc, #252]	@ (80012c0 <HAL_LTDC_MspInit+0x1d8>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	4a3e      	ldr	r2, [pc, #248]	@ (80012c0 <HAL_LTDC_MspInit+0x1d8>)
 80011c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ce:	4b3c      	ldr	r3, [pc, #240]	@ (80012c0 <HAL_LTDC_MspInit+0x1d8>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80011da:	2310      	movs	r3, #16
 80011dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2300      	movs	r3, #0
 80011ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011f2:	230e      	movs	r3, #14
 80011f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80011f8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80011fc:	4619      	mov	r1, r3
 80011fe:	4831      	ldr	r0, [pc, #196]	@ (80012c4 <HAL_LTDC_MspInit+0x1dc>)
 8001200:	f001 f8ae 	bl	8002360 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001204:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8001208:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120c:	2302      	movs	r3, #2
 800120e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2300      	movs	r3, #0
 800121a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800121e:	230e      	movs	r3, #14
 8001220:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001224:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001228:	4619      	mov	r1, r3
 800122a:	4827      	ldr	r0, [pc, #156]	@ (80012c8 <HAL_LTDC_MspInit+0x1e0>)
 800122c:	f001 f898 	bl	8002360 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001230:	23f7      	movs	r3, #247	@ 0xf7
 8001232:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001242:	2300      	movs	r3, #0
 8001244:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001248:	230e      	movs	r3, #14
 800124a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800124e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001252:	4619      	mov	r1, r3
 8001254:	481d      	ldr	r0, [pc, #116]	@ (80012cc <HAL_LTDC_MspInit+0x1e4>)
 8001256:	f001 f883 	bl	8002360 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800125a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800125e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001262:	2302      	movs	r3, #2
 8001264:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126e:	2300      	movs	r3, #0
 8001270:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001274:	2309      	movs	r3, #9
 8001276:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800127a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800127e:	4619      	mov	r1, r3
 8001280:	4813      	ldr	r0, [pc, #76]	@ (80012d0 <HAL_LTDC_MspInit+0x1e8>)
 8001282:	f001 f86d 	bl	8002360 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001286:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 800128a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128e:	2302      	movs	r3, #2
 8001290:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129a:	2300      	movs	r3, #0
 800129c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012a0:	230e      	movs	r3, #14
 80012a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80012a6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012aa:	4619      	mov	r1, r3
 80012ac:	4809      	ldr	r0, [pc, #36]	@ (80012d4 <HAL_LTDC_MspInit+0x1ec>)
 80012ae:	f001 f857 	bl	8002360 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80012b2:	bf00      	nop
 80012b4:	37b8      	adds	r7, #184	@ 0xb8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40016800 	.word	0x40016800
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40021000 	.word	0x40021000
 80012c8:	40022400 	.word	0x40022400
 80012cc:	40022800 	.word	0x40022800
 80012d0:	40021800 	.word	0x40021800
 80012d4:	40022000 	.word	0x40022000

080012d8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b0ac      	sub	sp, #176	@ 0xb0
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012f0:	f107 0318 	add.w	r3, r7, #24
 80012f4:	2284      	movs	r2, #132	@ 0x84
 80012f6:	2100      	movs	r1, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f005 f94e 	bl	800659a <memset>
  if(hsd->Instance==SDMMC1)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a73      	ldr	r2, [pc, #460]	@ (80014d0 <HAL_SD_MspInit+0x1f8>)
 8001304:	4293      	cmp	r3, r2
 8001306:	f040 80de 	bne.w	80014c6 <HAL_SD_MspInit+0x1ee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 800130a:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800130e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_SYSCLK;
 8001310:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001314:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001318:	f107 0318 	add.w	r3, r7, #24
 800131c:	4618      	mov	r0, r3
 800131e:	f002 f8fb 	bl	8003518 <HAL_RCCEx_PeriphCLKConfig>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001328:	f7ff fe94 	bl	8001054 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800132c:	4b69      	ldr	r3, [pc, #420]	@ (80014d4 <HAL_SD_MspInit+0x1fc>)
 800132e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001330:	4a68      	ldr	r2, [pc, #416]	@ (80014d4 <HAL_SD_MspInit+0x1fc>)
 8001332:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001336:	6453      	str	r3, [r2, #68]	@ 0x44
 8001338:	4b66      	ldr	r3, [pc, #408]	@ (80014d4 <HAL_SD_MspInit+0x1fc>)
 800133a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800133c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001340:	617b      	str	r3, [r7, #20]
 8001342:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001344:	4b63      	ldr	r3, [pc, #396]	@ (80014d4 <HAL_SD_MspInit+0x1fc>)
 8001346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001348:	4a62      	ldr	r2, [pc, #392]	@ (80014d4 <HAL_SD_MspInit+0x1fc>)
 800134a:	f043 0304 	orr.w	r3, r3, #4
 800134e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001350:	4b60      	ldr	r3, [pc, #384]	@ (80014d4 <HAL_SD_MspInit+0x1fc>)
 8001352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001354:	f003 0304 	and.w	r3, r3, #4
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800135c:	4b5d      	ldr	r3, [pc, #372]	@ (80014d4 <HAL_SD_MspInit+0x1fc>)
 800135e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001360:	4a5c      	ldr	r2, [pc, #368]	@ (80014d4 <HAL_SD_MspInit+0x1fc>)
 8001362:	f043 0308 	orr.w	r3, r3, #8
 8001366:	6313      	str	r3, [r2, #48]	@ 0x30
 8001368:	4b5a      	ldr	r3, [pc, #360]	@ (80014d4 <HAL_SD_MspInit+0x1fc>)
 800136a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136c:	f003 0308 	and.w	r3, r3, #8
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001374:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001378:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137c:	2302      	movs	r3, #2
 800137e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001388:	2303      	movs	r3, #3
 800138a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800138e:	230c      	movs	r3, #12
 8001390:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001394:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001398:	4619      	mov	r1, r3
 800139a:	484f      	ldr	r0, [pc, #316]	@ (80014d8 <HAL_SD_MspInit+0x200>)
 800139c:	f000 ffe0 	bl	8002360 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 80013a0:	2304      	movs	r3, #4
 80013a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a6:	2302      	movs	r3, #2
 80013a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b2:	2303      	movs	r3, #3
 80013b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80013b8:	230c      	movs	r3, #12
 80013ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 80013be:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80013c2:	4619      	mov	r1, r3
 80013c4:	4845      	ldr	r0, [pc, #276]	@ (80014dc <HAL_SD_MspInit+0x204>)
 80013c6:	f000 ffcb 	bl	8002360 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 80013ca:	4b45      	ldr	r3, [pc, #276]	@ (80014e0 <HAL_SD_MspInit+0x208>)
 80013cc:	4a45      	ldr	r2, [pc, #276]	@ (80014e4 <HAL_SD_MspInit+0x20c>)
 80013ce:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80013d0:	4b43      	ldr	r3, [pc, #268]	@ (80014e0 <HAL_SD_MspInit+0x208>)
 80013d2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80013d6:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013d8:	4b41      	ldr	r3, [pc, #260]	@ (80014e0 <HAL_SD_MspInit+0x208>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013de:	4b40      	ldr	r3, [pc, #256]	@ (80014e0 <HAL_SD_MspInit+0x208>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013e4:	4b3e      	ldr	r3, [pc, #248]	@ (80014e0 <HAL_SD_MspInit+0x208>)
 80013e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013ea:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013ec:	4b3c      	ldr	r3, [pc, #240]	@ (80014e0 <HAL_SD_MspInit+0x208>)
 80013ee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80013f2:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013f4:	4b3a      	ldr	r3, [pc, #232]	@ (80014e0 <HAL_SD_MspInit+0x208>)
 80013f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013fa:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 80013fc:	4b38      	ldr	r3, [pc, #224]	@ (80014e0 <HAL_SD_MspInit+0x208>)
 80013fe:	2220      	movs	r2, #32
 8001400:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001402:	4b37      	ldr	r3, [pc, #220]	@ (80014e0 <HAL_SD_MspInit+0x208>)
 8001404:	2200      	movs	r2, #0
 8001406:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001408:	4b35      	ldr	r3, [pc, #212]	@ (80014e0 <HAL_SD_MspInit+0x208>)
 800140a:	2204      	movs	r2, #4
 800140c:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800140e:	4b34      	ldr	r3, [pc, #208]	@ (80014e0 <HAL_SD_MspInit+0x208>)
 8001410:	2203      	movs	r2, #3
 8001412:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001414:	4b32      	ldr	r3, [pc, #200]	@ (80014e0 <HAL_SD_MspInit+0x208>)
 8001416:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800141a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800141c:	4b30      	ldr	r3, [pc, #192]	@ (80014e0 <HAL_SD_MspInit+0x208>)
 800141e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001422:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8001424:	482e      	ldr	r0, [pc, #184]	@ (80014e0 <HAL_SD_MspInit+0x208>)
 8001426:	f000 fb19 	bl	8001a5c <HAL_DMA_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <HAL_SD_MspInit+0x15c>
    {
      Error_Handler();
 8001430:	f7ff fe10 	bl	8001054 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a2a      	ldr	r2, [pc, #168]	@ (80014e0 <HAL_SD_MspInit+0x208>)
 8001438:	641a      	str	r2, [r3, #64]	@ 0x40
 800143a:	4a29      	ldr	r2, [pc, #164]	@ (80014e0 <HAL_SD_MspInit+0x208>)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8001440:	4b29      	ldr	r3, [pc, #164]	@ (80014e8 <HAL_SD_MspInit+0x210>)
 8001442:	4a2a      	ldr	r2, [pc, #168]	@ (80014ec <HAL_SD_MspInit+0x214>)
 8001444:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8001446:	4b28      	ldr	r3, [pc, #160]	@ (80014e8 <HAL_SD_MspInit+0x210>)
 8001448:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800144c:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800144e:	4b26      	ldr	r3, [pc, #152]	@ (80014e8 <HAL_SD_MspInit+0x210>)
 8001450:	2240      	movs	r2, #64	@ 0x40
 8001452:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001454:	4b24      	ldr	r3, [pc, #144]	@ (80014e8 <HAL_SD_MspInit+0x210>)
 8001456:	2200      	movs	r2, #0
 8001458:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800145a:	4b23      	ldr	r3, [pc, #140]	@ (80014e8 <HAL_SD_MspInit+0x210>)
 800145c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001460:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001462:	4b21      	ldr	r3, [pc, #132]	@ (80014e8 <HAL_SD_MspInit+0x210>)
 8001464:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001468:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800146a:	4b1f      	ldr	r3, [pc, #124]	@ (80014e8 <HAL_SD_MspInit+0x210>)
 800146c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001470:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8001472:	4b1d      	ldr	r3, [pc, #116]	@ (80014e8 <HAL_SD_MspInit+0x210>)
 8001474:	2220      	movs	r2, #32
 8001476:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001478:	4b1b      	ldr	r3, [pc, #108]	@ (80014e8 <HAL_SD_MspInit+0x210>)
 800147a:	2200      	movs	r2, #0
 800147c:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800147e:	4b1a      	ldr	r3, [pc, #104]	@ (80014e8 <HAL_SD_MspInit+0x210>)
 8001480:	2204      	movs	r2, #4
 8001482:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001484:	4b18      	ldr	r3, [pc, #96]	@ (80014e8 <HAL_SD_MspInit+0x210>)
 8001486:	2203      	movs	r2, #3
 8001488:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 800148a:	4b17      	ldr	r3, [pc, #92]	@ (80014e8 <HAL_SD_MspInit+0x210>)
 800148c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001490:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001492:	4b15      	ldr	r3, [pc, #84]	@ (80014e8 <HAL_SD_MspInit+0x210>)
 8001494:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001498:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 800149a:	4813      	ldr	r0, [pc, #76]	@ (80014e8 <HAL_SD_MspInit+0x210>)
 800149c:	f000 fade 	bl	8001a5c <HAL_DMA_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <HAL_SD_MspInit+0x1d2>
    {
      Error_Handler();
 80014a6:	f7ff fdd5 	bl	8001054 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a0e      	ldr	r2, [pc, #56]	@ (80014e8 <HAL_SD_MspInit+0x210>)
 80014ae:	63da      	str	r2, [r3, #60]	@ 0x3c
 80014b0:	4a0d      	ldr	r2, [pc, #52]	@ (80014e8 <HAL_SD_MspInit+0x210>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2100      	movs	r1, #0
 80014ba:	2031      	movs	r0, #49	@ 0x31
 80014bc:	f000 fa97 	bl	80019ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80014c0:	2031      	movs	r0, #49	@ 0x31
 80014c2:	f000 fab0 	bl	8001a26 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 80014c6:	bf00      	nop
 80014c8:	37b0      	adds	r7, #176	@ 0xb0
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40012c00 	.word	0x40012c00
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40020800 	.word	0x40020800
 80014dc:	40020c00 	.word	0x40020c00
 80014e0:	20000194 	.word	0x20000194
 80014e4:	40026458 	.word	0x40026458
 80014e8:	200001f4 	.word	0x200001f4
 80014ec:	400264a0 	.word	0x400264a0

080014f0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80014f6:	1d3b      	adds	r3, r7, #4
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001504:	4b3a      	ldr	r3, [pc, #232]	@ (80015f0 <HAL_FMC_MspInit+0x100>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d16d      	bne.n	80015e8 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800150c:	4b38      	ldr	r3, [pc, #224]	@ (80015f0 <HAL_FMC_MspInit+0x100>)
 800150e:	2201      	movs	r2, #1
 8001510:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001512:	4b38      	ldr	r3, [pc, #224]	@ (80015f4 <HAL_FMC_MspInit+0x104>)
 8001514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001516:	4a37      	ldr	r2, [pc, #220]	@ (80015f4 <HAL_FMC_MspInit+0x104>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	6393      	str	r3, [r2, #56]	@ 0x38
 800151e:	4b35      	ldr	r3, [pc, #212]	@ (80015f4 <HAL_FMC_MspInit+0x104>)
 8001520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800152a:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800152e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001530:	2302      	movs	r3, #2
 8001532:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001538:	2303      	movs	r3, #3
 800153a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800153c:	230c      	movs	r3, #12
 800153e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001540:	1d3b      	adds	r3, r7, #4
 8001542:	4619      	mov	r1, r3
 8001544:	482c      	ldr	r0, [pc, #176]	@ (80015f8 <HAL_FMC_MspInit+0x108>)
 8001546:	f000 ff0b 	bl	8002360 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800154a:	f248 1333 	movw	r3, #33075	@ 0x8133
 800154e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001550:	2302      	movs	r3, #2
 8001552:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001558:	2303      	movs	r3, #3
 800155a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800155c:	230c      	movs	r3, #12
 800155e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	4619      	mov	r1, r3
 8001564:	4825      	ldr	r0, [pc, #148]	@ (80015fc <HAL_FMC_MspInit+0x10c>)
 8001566:	f000 fefb 	bl	8002360 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800156a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800156e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001570:	2302      	movs	r3, #2
 8001572:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001578:	2303      	movs	r3, #3
 800157a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800157c:	230c      	movs	r3, #12
 800157e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	4619      	mov	r1, r3
 8001584:	481e      	ldr	r0, [pc, #120]	@ (8001600 <HAL_FMC_MspInit+0x110>)
 8001586:	f000 feeb 	bl	8002360 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800158a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800158e:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001598:	2303      	movs	r3, #3
 800159a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800159c:	230c      	movs	r3, #12
 800159e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	4619      	mov	r1, r3
 80015a4:	4817      	ldr	r0, [pc, #92]	@ (8001604 <HAL_FMC_MspInit+0x114>)
 80015a6:	f000 fedb 	bl	8002360 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80015aa:	2328      	movs	r3, #40	@ 0x28
 80015ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ae:	2302      	movs	r3, #2
 80015b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b6:	2303      	movs	r3, #3
 80015b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015ba:	230c      	movs	r3, #12
 80015bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	4619      	mov	r1, r3
 80015c2:	4811      	ldr	r0, [pc, #68]	@ (8001608 <HAL_FMC_MspInit+0x118>)
 80015c4:	f000 fecc 	bl	8002360 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80015c8:	2308      	movs	r3, #8
 80015ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015cc:	2302      	movs	r3, #2
 80015ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d4:	2303      	movs	r3, #3
 80015d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015d8:	230c      	movs	r3, #12
 80015da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80015dc:	1d3b      	adds	r3, r7, #4
 80015de:	4619      	mov	r1, r3
 80015e0:	480a      	ldr	r0, [pc, #40]	@ (800160c <HAL_FMC_MspInit+0x11c>)
 80015e2:	f000 febd 	bl	8002360 <HAL_GPIO_Init>
 80015e6:	e000      	b.n	80015ea <HAL_FMC_MspInit+0xfa>
    return;
 80015e8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000288 	.word	0x20000288
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40021800 	.word	0x40021800
 8001600:	40020c00 	.word	0x40020c00
 8001604:	40021400 	.word	0x40021400
 8001608:	40021c00 	.word	0x40021c00
 800160c:	40020800 	.word	0x40020800

08001610 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001618:	f7ff ff6a 	bl	80014f0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001628:	bf00      	nop
 800162a:	e7fd      	b.n	8001628 <NMI_Handler+0x4>

0800162c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <HardFault_Handler+0x4>

08001634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <MemManage_Handler+0x4>

0800163c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <BusFault_Handler+0x4>

08001644 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <UsageFault_Handler+0x4>

0800164c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800167a:	f000 f899 	bl	80017b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
	...

08001684 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001688:	4802      	ldr	r0, [pc, #8]	@ (8001694 <SDMMC1_IRQHandler+0x10>)
 800168a:	f002 fdb5 	bl	80041f8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000110 	.word	0x20000110

08001698 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 800169c:	4802      	ldr	r0, [pc, #8]	@ (80016a8 <DMA2_Stream3_IRQHandler+0x10>)
 800169e:	f000 fb0d 	bl	8001cbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000194 	.word	0x20000194

080016ac <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 80016b0:	4802      	ldr	r0, [pc, #8]	@ (80016bc <DMA2_Stream6_IRQHandler+0x10>)
 80016b2:	f000 fb03 	bl	8001cbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200001f4 	.word	0x200001f4

080016c0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016c4:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <SystemInit+0x20>)
 80016c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016ca:	4a05      	ldr	r2, [pc, #20]	@ (80016e0 <SystemInit+0x20>)
 80016cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800171c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016e8:	f7ff ffea 	bl	80016c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016ec:	480c      	ldr	r0, [pc, #48]	@ (8001720 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016ee:	490d      	ldr	r1, [pc, #52]	@ (8001724 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001728 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f4:	e002      	b.n	80016fc <LoopCopyDataInit>

080016f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016fa:	3304      	adds	r3, #4

080016fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001700:	d3f9      	bcc.n	80016f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001702:	4a0a      	ldr	r2, [pc, #40]	@ (800172c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001704:	4c0a      	ldr	r4, [pc, #40]	@ (8001730 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001706:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001708:	e001      	b.n	800170e <LoopFillZerobss>

0800170a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800170a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800170c:	3204      	adds	r2, #4

0800170e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800170e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001710:	d3fb      	bcc.n	800170a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001712:	f004 ff4b 	bl	80065ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001716:	f7fe feef 	bl	80004f8 <main>
  bx  lr    
 800171a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800171c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001724:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001728:	08006648 	.word	0x08006648
  ldr r2, =_sbss
 800172c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001730:	200002ac 	.word	0x200002ac

08001734 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001734:	e7fe      	b.n	8001734 <ADC_IRQHandler>

08001736 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800173a:	2003      	movs	r0, #3
 800173c:	f000 f94c 	bl	80019d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001740:	2000      	movs	r0, #0
 8001742:	f000 f805 	bl	8001750 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001746:	f7ff fc8b 	bl	8001060 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800174a:	2300      	movs	r3, #0
}
 800174c:	4618      	mov	r0, r3
 800174e:	bd80      	pop	{r7, pc}

08001750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001758:	4b12      	ldr	r3, [pc, #72]	@ (80017a4 <HAL_InitTick+0x54>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4b12      	ldr	r3, [pc, #72]	@ (80017a8 <HAL_InitTick+0x58>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	4619      	mov	r1, r3
 8001762:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001766:	fbb3 f3f1 	udiv	r3, r3, r1
 800176a:	fbb2 f3f3 	udiv	r3, r2, r3
 800176e:	4618      	mov	r0, r3
 8001770:	f000 f967 	bl	8001a42 <HAL_SYSTICK_Config>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e00e      	b.n	800179c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b0f      	cmp	r3, #15
 8001782:	d80a      	bhi.n	800179a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001784:	2200      	movs	r2, #0
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	f04f 30ff 	mov.w	r0, #4294967295
 800178c:	f000 f92f 	bl	80019ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001790:	4a06      	ldr	r2, [pc, #24]	@ (80017ac <HAL_InitTick+0x5c>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001796:	2300      	movs	r3, #0
 8001798:	e000      	b.n	800179c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
}
 800179c:	4618      	mov	r0, r3
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000000 	.word	0x20000000
 80017a8:	20000008 	.word	0x20000008
 80017ac:	20000004 	.word	0x20000004

080017b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017b4:	4b06      	ldr	r3, [pc, #24]	@ (80017d0 <HAL_IncTick+0x20>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <HAL_IncTick+0x24>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4413      	add	r3, r2
 80017c0:	4a04      	ldr	r2, [pc, #16]	@ (80017d4 <HAL_IncTick+0x24>)
 80017c2:	6013      	str	r3, [r2, #0]
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	20000008 	.word	0x20000008
 80017d4:	2000028c 	.word	0x2000028c

080017d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return uwTick;
 80017dc:	4b03      	ldr	r3, [pc, #12]	@ (80017ec <HAL_GetTick+0x14>)
 80017de:	681b      	ldr	r3, [r3, #0]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	2000028c 	.word	0x2000028c

080017f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017f8:	f7ff ffee 	bl	80017d8 <HAL_GetTick>
 80017fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001808:	d005      	beq.n	8001816 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800180a:	4b0a      	ldr	r3, [pc, #40]	@ (8001834 <HAL_Delay+0x44>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	461a      	mov	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4413      	add	r3, r2
 8001814:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001816:	bf00      	nop
 8001818:	f7ff ffde 	bl	80017d8 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	429a      	cmp	r2, r3
 8001826:	d8f7      	bhi.n	8001818 <HAL_Delay+0x28>
  {
  }
}
 8001828:	bf00      	nop
 800182a:	bf00      	nop
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000008 	.word	0x20000008

08001838 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001848:	4b0b      	ldr	r3, [pc, #44]	@ (8001878 <__NVIC_SetPriorityGrouping+0x40>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001854:	4013      	ands	r3, r2
 8001856:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001860:	4b06      	ldr	r3, [pc, #24]	@ (800187c <__NVIC_SetPriorityGrouping+0x44>)
 8001862:	4313      	orrs	r3, r2
 8001864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001866:	4a04      	ldr	r2, [pc, #16]	@ (8001878 <__NVIC_SetPriorityGrouping+0x40>)
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	60d3      	str	r3, [r2, #12]
}
 800186c:	bf00      	nop
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000ed00 	.word	0xe000ed00
 800187c:	05fa0000 	.word	0x05fa0000

08001880 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001884:	4b04      	ldr	r3, [pc, #16]	@ (8001898 <__NVIC_GetPriorityGrouping+0x18>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	0a1b      	lsrs	r3, r3, #8
 800188a:	f003 0307 	and.w	r3, r3, #7
}
 800188e:	4618      	mov	r0, r3
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	db0b      	blt.n	80018c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	f003 021f 	and.w	r2, r3, #31
 80018b4:	4907      	ldr	r1, [pc, #28]	@ (80018d4 <__NVIC_EnableIRQ+0x38>)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	095b      	lsrs	r3, r3, #5
 80018bc:	2001      	movs	r0, #1
 80018be:	fa00 f202 	lsl.w	r2, r0, r2
 80018c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	e000e100 	.word	0xe000e100

080018d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	6039      	str	r1, [r7, #0]
 80018e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	db0a      	blt.n	8001902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	490c      	ldr	r1, [pc, #48]	@ (8001924 <__NVIC_SetPriority+0x4c>)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	0112      	lsls	r2, r2, #4
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	440b      	add	r3, r1
 80018fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001900:	e00a      	b.n	8001918 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	b2da      	uxtb	r2, r3
 8001906:	4908      	ldr	r1, [pc, #32]	@ (8001928 <__NVIC_SetPriority+0x50>)
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	3b04      	subs	r3, #4
 8001910:	0112      	lsls	r2, r2, #4
 8001912:	b2d2      	uxtb	r2, r2
 8001914:	440b      	add	r3, r1
 8001916:	761a      	strb	r2, [r3, #24]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000e100 	.word	0xe000e100
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800192c:	b480      	push	{r7}
 800192e:	b089      	sub	sp, #36	@ 0x24
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	f1c3 0307 	rsb	r3, r3, #7
 8001946:	2b04      	cmp	r3, #4
 8001948:	bf28      	it	cs
 800194a:	2304      	movcs	r3, #4
 800194c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3304      	adds	r3, #4
 8001952:	2b06      	cmp	r3, #6
 8001954:	d902      	bls.n	800195c <NVIC_EncodePriority+0x30>
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	3b03      	subs	r3, #3
 800195a:	e000      	b.n	800195e <NVIC_EncodePriority+0x32>
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001960:	f04f 32ff 	mov.w	r2, #4294967295
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43da      	mvns	r2, r3
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	401a      	ands	r2, r3
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001974:	f04f 31ff 	mov.w	r1, #4294967295
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	fa01 f303 	lsl.w	r3, r1, r3
 800197e:	43d9      	mvns	r1, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001984:	4313      	orrs	r3, r2
         );
}
 8001986:	4618      	mov	r0, r3
 8001988:	3724      	adds	r7, #36	@ 0x24
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
	...

08001994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3b01      	subs	r3, #1
 80019a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019a4:	d301      	bcc.n	80019aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019a6:	2301      	movs	r3, #1
 80019a8:	e00f      	b.n	80019ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019aa:	4a0a      	ldr	r2, [pc, #40]	@ (80019d4 <SysTick_Config+0x40>)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019b2:	210f      	movs	r1, #15
 80019b4:	f04f 30ff 	mov.w	r0, #4294967295
 80019b8:	f7ff ff8e 	bl	80018d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019bc:	4b05      	ldr	r3, [pc, #20]	@ (80019d4 <SysTick_Config+0x40>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019c2:	4b04      	ldr	r3, [pc, #16]	@ (80019d4 <SysTick_Config+0x40>)
 80019c4:	2207      	movs	r2, #7
 80019c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	e000e010 	.word	0xe000e010

080019d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff ff29 	bl	8001838 <__NVIC_SetPriorityGrouping>
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b086      	sub	sp, #24
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	4603      	mov	r3, r0
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
 80019fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a00:	f7ff ff3e 	bl	8001880 <__NVIC_GetPriorityGrouping>
 8001a04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	68b9      	ldr	r1, [r7, #8]
 8001a0a:	6978      	ldr	r0, [r7, #20]
 8001a0c:	f7ff ff8e 	bl	800192c <NVIC_EncodePriority>
 8001a10:	4602      	mov	r2, r0
 8001a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a16:	4611      	mov	r1, r2
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ff5d 	bl	80018d8 <__NVIC_SetPriority>
}
 8001a1e:	bf00      	nop
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff31 	bl	800189c <__NVIC_EnableIRQ>
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff ffa2 	bl	8001994 <SysTick_Config>
 8001a50:	4603      	mov	r3, r0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
	...

08001a5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a68:	f7ff feb6 	bl	80017d8 <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e099      	b.n	8001bac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f022 0201 	bic.w	r2, r2, #1
 8001a96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a98:	e00f      	b.n	8001aba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a9a:	f7ff fe9d 	bl	80017d8 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b05      	cmp	r3, #5
 8001aa6:	d908      	bls.n	8001aba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2220      	movs	r2, #32
 8001aac:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2203      	movs	r2, #3
 8001ab2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e078      	b.n	8001bac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1e8      	bne.n	8001a9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	4b38      	ldr	r3, [pc, #224]	@ (8001bb4 <HAL_DMA_Init+0x158>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685a      	ldr	r2, [r3, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ae6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001af2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001afe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	d107      	bne.n	8001b24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	f023 0307 	bic.w	r3, r3, #7
 8001b3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	d117      	bne.n	8001b7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00e      	beq.n	8001b7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 faa5 	bl	80020b0 <DMA_CheckFifoParam>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d008      	beq.n	8001b7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2240      	movs	r2, #64	@ 0x40
 8001b70:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e016      	b.n	8001bac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 fa5c 	bl	8002044 <DMA_CalcBaseAndBitshift>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b94:	223f      	movs	r2, #63	@ 0x3f
 8001b96:	409a      	lsls	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	f010803f 	.word	0xf010803f

08001bb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
 8001bc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d101      	bne.n	8001bde <HAL_DMA_Start_IT+0x26>
 8001bda:	2302      	movs	r3, #2
 8001bdc:	e048      	b.n	8001c70 <HAL_DMA_Start_IT+0xb8>
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2201      	movs	r2, #1
 8001be2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d137      	bne.n	8001c62 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	68b9      	ldr	r1, [r7, #8]
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f000 f9ee 	bl	8001fe8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c10:	223f      	movs	r2, #63	@ 0x3f
 8001c12:	409a      	lsls	r2, r3
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f042 0216 	orr.w	r2, r2, #22
 8001c26:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	695a      	ldr	r2, [r3, #20]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001c36:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d007      	beq.n	8001c50 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0208 	orr.w	r2, r2, #8
 8001c4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f042 0201 	orr.w	r2, r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	e005      	b.n	8001c6e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d004      	beq.n	8001c96 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2280      	movs	r2, #128	@ 0x80
 8001c90:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e00c      	b.n	8001cb0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2205      	movs	r2, #5
 8001c9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 0201 	bic.w	r2, r2, #1
 8001cac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001cc8:	4b8e      	ldr	r3, [pc, #568]	@ (8001f04 <HAL_DMA_IRQHandler+0x248>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a8e      	ldr	r2, [pc, #568]	@ (8001f08 <HAL_DMA_IRQHandler+0x24c>)
 8001cce:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd2:	0a9b      	lsrs	r3, r3, #10
 8001cd4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cda:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce6:	2208      	movs	r2, #8
 8001ce8:	409a      	lsls	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	4013      	ands	r3, r2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d01a      	beq.n	8001d28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d013      	beq.n	8001d28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 0204 	bic.w	r2, r2, #4
 8001d0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d14:	2208      	movs	r2, #8
 8001d16:	409a      	lsls	r2, r3
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d20:	f043 0201 	orr.w	r2, r3, #1
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	409a      	lsls	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4013      	ands	r3, r2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d012      	beq.n	8001d5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d00b      	beq.n	8001d5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	409a      	lsls	r2, r3
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d56:	f043 0202 	orr.w	r2, r3, #2
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d62:	2204      	movs	r2, #4
 8001d64:	409a      	lsls	r2, r3
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d012      	beq.n	8001d94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00b      	beq.n	8001d94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d80:	2204      	movs	r2, #4
 8001d82:	409a      	lsls	r2, r3
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d8c:	f043 0204 	orr.w	r2, r3, #4
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d98:	2210      	movs	r2, #16
 8001d9a:	409a      	lsls	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d043      	beq.n	8001e2c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0308 	and.w	r3, r3, #8
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d03c      	beq.n	8001e2c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001db6:	2210      	movs	r2, #16
 8001db8:	409a      	lsls	r2, r3
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d018      	beq.n	8001dfe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d108      	bne.n	8001dec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d024      	beq.n	8001e2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	4798      	blx	r3
 8001dea:	e01f      	b.n	8001e2c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d01b      	beq.n	8001e2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	4798      	blx	r3
 8001dfc:	e016      	b.n	8001e2c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d107      	bne.n	8001e1c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 0208 	bic.w	r2, r2, #8
 8001e1a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d003      	beq.n	8001e2c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e30:	2220      	movs	r2, #32
 8001e32:	409a      	lsls	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4013      	ands	r3, r2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f000 808f 	beq.w	8001f5c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0310 	and.w	r3, r3, #16
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f000 8087 	beq.w	8001f5c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e52:	2220      	movs	r2, #32
 8001e54:	409a      	lsls	r2, r3
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b05      	cmp	r3, #5
 8001e64:	d136      	bne.n	8001ed4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0216 	bic.w	r2, r2, #22
 8001e74:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	695a      	ldr	r2, [r3, #20]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e84:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d103      	bne.n	8001e96 <HAL_DMA_IRQHandler+0x1da>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d007      	beq.n	8001ea6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0208 	bic.w	r2, r2, #8
 8001ea4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eaa:	223f      	movs	r2, #63	@ 0x3f
 8001eac:	409a      	lsls	r2, r3
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d07e      	beq.n	8001fc8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	4798      	blx	r3
        }
        return;
 8001ed2:	e079      	b.n	8001fc8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d01d      	beq.n	8001f1e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d10d      	bne.n	8001f0c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d031      	beq.n	8001f5c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	4798      	blx	r3
 8001f00:	e02c      	b.n	8001f5c <HAL_DMA_IRQHandler+0x2a0>
 8001f02:	bf00      	nop
 8001f04:	20000000 	.word	0x20000000
 8001f08:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d023      	beq.n	8001f5c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	4798      	blx	r3
 8001f1c:	e01e      	b.n	8001f5c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10f      	bne.n	8001f4c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 0210 	bic.w	r2, r2, #16
 8001f3a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d003      	beq.n	8001f5c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d032      	beq.n	8001fca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d022      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2205      	movs	r2, #5
 8001f74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 0201 	bic.w	r2, r2, #1
 8001f86:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	697a      	ldr	r2, [r7, #20]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d307      	bcc.n	8001fa4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f2      	bne.n	8001f88 <HAL_DMA_IRQHandler+0x2cc>
 8001fa2:	e000      	b.n	8001fa6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001fa4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d005      	beq.n	8001fca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	4798      	blx	r3
 8001fc6:	e000      	b.n	8001fca <HAL_DMA_IRQHandler+0x30e>
        return;
 8001fc8:	bf00      	nop
    }
  }
}
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
 8001ff4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002004:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	2b40      	cmp	r3, #64	@ 0x40
 8002014:	d108      	bne.n	8002028 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68ba      	ldr	r2, [r7, #8]
 8002024:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002026:	e007      	b.n	8002038 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68ba      	ldr	r2, [r7, #8]
 800202e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	60da      	str	r2, [r3, #12]
}
 8002038:	bf00      	nop
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	b2db      	uxtb	r3, r3
 8002052:	3b10      	subs	r3, #16
 8002054:	4a13      	ldr	r2, [pc, #76]	@ (80020a4 <DMA_CalcBaseAndBitshift+0x60>)
 8002056:	fba2 2303 	umull	r2, r3, r2, r3
 800205a:	091b      	lsrs	r3, r3, #4
 800205c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800205e:	4a12      	ldr	r2, [pc, #72]	@ (80020a8 <DMA_CalcBaseAndBitshift+0x64>)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4413      	add	r3, r2
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	461a      	mov	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2b03      	cmp	r3, #3
 8002070:	d908      	bls.n	8002084 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	461a      	mov	r2, r3
 8002078:	4b0c      	ldr	r3, [pc, #48]	@ (80020ac <DMA_CalcBaseAndBitshift+0x68>)
 800207a:	4013      	ands	r3, r2
 800207c:	1d1a      	adds	r2, r3, #4
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	659a      	str	r2, [r3, #88]	@ 0x58
 8002082:	e006      	b.n	8002092 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	461a      	mov	r2, r3
 800208a:	4b08      	ldr	r3, [pc, #32]	@ (80020ac <DMA_CalcBaseAndBitshift+0x68>)
 800208c:	4013      	ands	r3, r2
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002096:	4618      	mov	r0, r3
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	aaaaaaab 	.word	0xaaaaaaab
 80020a8:	0800661c 	.word	0x0800661c
 80020ac:	fffffc00 	.word	0xfffffc00

080020b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020b8:	2300      	movs	r3, #0
 80020ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d11f      	bne.n	800210a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	2b03      	cmp	r3, #3
 80020ce:	d856      	bhi.n	800217e <DMA_CheckFifoParam+0xce>
 80020d0:	a201      	add	r2, pc, #4	@ (adr r2, 80020d8 <DMA_CheckFifoParam+0x28>)
 80020d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d6:	bf00      	nop
 80020d8:	080020e9 	.word	0x080020e9
 80020dc:	080020fb 	.word	0x080020fb
 80020e0:	080020e9 	.word	0x080020e9
 80020e4:	0800217f 	.word	0x0800217f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d046      	beq.n	8002182 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020f8:	e043      	b.n	8002182 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020fe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002102:	d140      	bne.n	8002186 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002108:	e03d      	b.n	8002186 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002112:	d121      	bne.n	8002158 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	2b03      	cmp	r3, #3
 8002118:	d837      	bhi.n	800218a <DMA_CheckFifoParam+0xda>
 800211a:	a201      	add	r2, pc, #4	@ (adr r2, 8002120 <DMA_CheckFifoParam+0x70>)
 800211c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002120:	08002131 	.word	0x08002131
 8002124:	08002137 	.word	0x08002137
 8002128:	08002131 	.word	0x08002131
 800212c:	08002149 	.word	0x08002149
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	73fb      	strb	r3, [r7, #15]
      break;
 8002134:	e030      	b.n	8002198 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800213a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d025      	beq.n	800218e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002146:	e022      	b.n	800218e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800214c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002150:	d11f      	bne.n	8002192 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002156:	e01c      	b.n	8002192 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2b02      	cmp	r3, #2
 800215c:	d903      	bls.n	8002166 <DMA_CheckFifoParam+0xb6>
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	2b03      	cmp	r3, #3
 8002162:	d003      	beq.n	800216c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002164:	e018      	b.n	8002198 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	73fb      	strb	r3, [r7, #15]
      break;
 800216a:	e015      	b.n	8002198 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002170:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00e      	beq.n	8002196 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	73fb      	strb	r3, [r7, #15]
      break;
 800217c:	e00b      	b.n	8002196 <DMA_CheckFifoParam+0xe6>
      break;
 800217e:	bf00      	nop
 8002180:	e00a      	b.n	8002198 <DMA_CheckFifoParam+0xe8>
      break;
 8002182:	bf00      	nop
 8002184:	e008      	b.n	8002198 <DMA_CheckFifoParam+0xe8>
      break;
 8002186:	bf00      	nop
 8002188:	e006      	b.n	8002198 <DMA_CheckFifoParam+0xe8>
      break;
 800218a:	bf00      	nop
 800218c:	e004      	b.n	8002198 <DMA_CheckFifoParam+0xe8>
      break;
 800218e:	bf00      	nop
 8002190:	e002      	b.n	8002198 <DMA_CheckFifoParam+0xe8>
      break;   
 8002192:	bf00      	nop
 8002194:	e000      	b.n	8002198 <DMA_CheckFifoParam+0xe8>
      break;
 8002196:	bf00      	nop
    }
  } 
  
  return status; 
 8002198:	7bfb      	ldrb	r3, [r7, #15]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop

080021a8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e039      	b.n	800222e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d106      	bne.n	80021d4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7fe ff6a 	bl	80010a8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2202      	movs	r2, #2
 80021d8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021f8:	f023 0107 	bic.w	r1, r3, #7
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	430a      	orrs	r2, r1
 8002206:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800220e:	4b0a      	ldr	r3, [pc, #40]	@ (8002238 <HAL_DMA2D_Init+0x90>)
 8002210:	4013      	ands	r3, r2
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	68d1      	ldr	r1, [r2, #12]
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6812      	ldr	r2, [r2, #0]
 800221a:	430b      	orrs	r3, r1
 800221c:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	ffffc000 	.word	0xffffc000

0800223c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800223c:	b480      	push	{r7}
 800223e:	b087      	sub	sp, #28
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002254:	2b01      	cmp	r3, #1
 8002256:	d101      	bne.n	800225c <HAL_DMA2D_ConfigLayer+0x20>
 8002258:	2302      	movs	r3, #2
 800225a:	e079      	b.n	8002350 <HAL_DMA2D_ConfigLayer+0x114>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2202      	movs	r2, #2
 8002268:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	011b      	lsls	r3, r3, #4
 8002270:	3318      	adds	r3, #24
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	4413      	add	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	041b      	lsls	r3, r3, #16
 8002282:	4313      	orrs	r3, r2
 8002284:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002286:	4b35      	ldr	r3, [pc, #212]	@ (800235c <HAL_DMA2D_ConfigLayer+0x120>)
 8002288:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b0a      	cmp	r3, #10
 8002290:	d003      	beq.n	800229a <HAL_DMA2D_ConfigLayer+0x5e>
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	2b09      	cmp	r3, #9
 8002298:	d107      	bne.n	80022aa <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	617b      	str	r3, [r7, #20]
 80022a8:	e005      	b.n	80022b6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	061b      	lsls	r3, r3, #24
 80022b0:	697a      	ldr	r2, [r7, #20]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d120      	bne.n	80022fe <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	43db      	mvns	r3, r3
 80022c6:	ea02 0103 	and.w	r1, r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	6812      	ldr	r2, [r2, #0]
 80022dc:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b0a      	cmp	r3, #10
 80022e4:	d003      	beq.n	80022ee <HAL_DMA2D_ConfigLayer+0xb2>
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b09      	cmp	r3, #9
 80022ec:	d127      	bne.n	800233e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	68da      	ldr	r2, [r3, #12]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80022fa:	629a      	str	r2, [r3, #40]	@ 0x28
 80022fc:	e01f      	b.n	800233e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	69da      	ldr	r2, [r3, #28]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	43db      	mvns	r3, r3
 8002308:	ea02 0103 	and.w	r1, r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	430a      	orrs	r2, r1
 8002314:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	6812      	ldr	r2, [r2, #0]
 800231e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	2b0a      	cmp	r3, #10
 8002326:	d003      	beq.n	8002330 <HAL_DMA2D_ConfigLayer+0xf4>
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b09      	cmp	r3, #9
 800232e:	d106      	bne.n	800233e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	68da      	ldr	r2, [r3, #12]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800233c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2201      	movs	r2, #1
 8002342:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	371c      	adds	r7, #28
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	ff03000f 	.word	0xff03000f

08002360 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002360:	b480      	push	{r7}
 8002362:	b089      	sub	sp, #36	@ 0x24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800236a:	2300      	movs	r3, #0
 800236c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002372:	2300      	movs	r3, #0
 8002374:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002376:	2300      	movs	r3, #0
 8002378:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800237a:	2300      	movs	r3, #0
 800237c:	61fb      	str	r3, [r7, #28]
 800237e:	e175      	b.n	800266c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002380:	2201      	movs	r2, #1
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	4013      	ands	r3, r2
 8002392:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	429a      	cmp	r2, r3
 800239a:	f040 8164 	bne.w	8002666 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d005      	beq.n	80023b6 <HAL_GPIO_Init+0x56>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f003 0303 	and.w	r3, r3, #3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d130      	bne.n	8002418 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	2203      	movs	r2, #3
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43db      	mvns	r3, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4013      	ands	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4313      	orrs	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023ec:	2201      	movs	r2, #1
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4013      	ands	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	091b      	lsrs	r3, r3, #4
 8002402:	f003 0201 	and.w	r2, r3, #1
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4313      	orrs	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f003 0303 	and.w	r3, r3, #3
 8002420:	2b03      	cmp	r3, #3
 8002422:	d017      	beq.n	8002454 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	2203      	movs	r2, #3
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4313      	orrs	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 0303 	and.w	r3, r3, #3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d123      	bne.n	80024a8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	08da      	lsrs	r2, r3, #3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3208      	adds	r2, #8
 8002468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800246c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	220f      	movs	r2, #15
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	691a      	ldr	r2, [r3, #16]
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4313      	orrs	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	08da      	lsrs	r2, r3, #3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3208      	adds	r2, #8
 80024a2:	69b9      	ldr	r1, [r7, #24]
 80024a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	2203      	movs	r2, #3
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 0203 	and.w	r2, r3, #3
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 80be 	beq.w	8002666 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ea:	4b66      	ldr	r3, [pc, #408]	@ (8002684 <HAL_GPIO_Init+0x324>)
 80024ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ee:	4a65      	ldr	r2, [pc, #404]	@ (8002684 <HAL_GPIO_Init+0x324>)
 80024f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80024f6:	4b63      	ldr	r3, [pc, #396]	@ (8002684 <HAL_GPIO_Init+0x324>)
 80024f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002502:	4a61      	ldr	r2, [pc, #388]	@ (8002688 <HAL_GPIO_Init+0x328>)
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	089b      	lsrs	r3, r3, #2
 8002508:	3302      	adds	r3, #2
 800250a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800250e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	220f      	movs	r2, #15
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	43db      	mvns	r3, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4013      	ands	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a58      	ldr	r2, [pc, #352]	@ (800268c <HAL_GPIO_Init+0x32c>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d037      	beq.n	800259e <HAL_GPIO_Init+0x23e>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a57      	ldr	r2, [pc, #348]	@ (8002690 <HAL_GPIO_Init+0x330>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d031      	beq.n	800259a <HAL_GPIO_Init+0x23a>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a56      	ldr	r2, [pc, #344]	@ (8002694 <HAL_GPIO_Init+0x334>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d02b      	beq.n	8002596 <HAL_GPIO_Init+0x236>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a55      	ldr	r2, [pc, #340]	@ (8002698 <HAL_GPIO_Init+0x338>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d025      	beq.n	8002592 <HAL_GPIO_Init+0x232>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a54      	ldr	r2, [pc, #336]	@ (800269c <HAL_GPIO_Init+0x33c>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d01f      	beq.n	800258e <HAL_GPIO_Init+0x22e>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a53      	ldr	r2, [pc, #332]	@ (80026a0 <HAL_GPIO_Init+0x340>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d019      	beq.n	800258a <HAL_GPIO_Init+0x22a>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a52      	ldr	r2, [pc, #328]	@ (80026a4 <HAL_GPIO_Init+0x344>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d013      	beq.n	8002586 <HAL_GPIO_Init+0x226>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a51      	ldr	r2, [pc, #324]	@ (80026a8 <HAL_GPIO_Init+0x348>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d00d      	beq.n	8002582 <HAL_GPIO_Init+0x222>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a50      	ldr	r2, [pc, #320]	@ (80026ac <HAL_GPIO_Init+0x34c>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d007      	beq.n	800257e <HAL_GPIO_Init+0x21e>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a4f      	ldr	r2, [pc, #316]	@ (80026b0 <HAL_GPIO_Init+0x350>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d101      	bne.n	800257a <HAL_GPIO_Init+0x21a>
 8002576:	2309      	movs	r3, #9
 8002578:	e012      	b.n	80025a0 <HAL_GPIO_Init+0x240>
 800257a:	230a      	movs	r3, #10
 800257c:	e010      	b.n	80025a0 <HAL_GPIO_Init+0x240>
 800257e:	2308      	movs	r3, #8
 8002580:	e00e      	b.n	80025a0 <HAL_GPIO_Init+0x240>
 8002582:	2307      	movs	r3, #7
 8002584:	e00c      	b.n	80025a0 <HAL_GPIO_Init+0x240>
 8002586:	2306      	movs	r3, #6
 8002588:	e00a      	b.n	80025a0 <HAL_GPIO_Init+0x240>
 800258a:	2305      	movs	r3, #5
 800258c:	e008      	b.n	80025a0 <HAL_GPIO_Init+0x240>
 800258e:	2304      	movs	r3, #4
 8002590:	e006      	b.n	80025a0 <HAL_GPIO_Init+0x240>
 8002592:	2303      	movs	r3, #3
 8002594:	e004      	b.n	80025a0 <HAL_GPIO_Init+0x240>
 8002596:	2302      	movs	r3, #2
 8002598:	e002      	b.n	80025a0 <HAL_GPIO_Init+0x240>
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <HAL_GPIO_Init+0x240>
 800259e:	2300      	movs	r3, #0
 80025a0:	69fa      	ldr	r2, [r7, #28]
 80025a2:	f002 0203 	and.w	r2, r2, #3
 80025a6:	0092      	lsls	r2, r2, #2
 80025a8:	4093      	lsls	r3, r2
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80025b0:	4935      	ldr	r1, [pc, #212]	@ (8002688 <HAL_GPIO_Init+0x328>)
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	089b      	lsrs	r3, r3, #2
 80025b6:	3302      	adds	r3, #2
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025be:	4b3d      	ldr	r3, [pc, #244]	@ (80026b4 <HAL_GPIO_Init+0x354>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	43db      	mvns	r3, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4013      	ands	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	4313      	orrs	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025e2:	4a34      	ldr	r2, [pc, #208]	@ (80026b4 <HAL_GPIO_Init+0x354>)
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025e8:	4b32      	ldr	r3, [pc, #200]	@ (80026b4 <HAL_GPIO_Init+0x354>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	43db      	mvns	r3, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4013      	ands	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	4313      	orrs	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800260c:	4a29      	ldr	r2, [pc, #164]	@ (80026b4 <HAL_GPIO_Init+0x354>)
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002612:	4b28      	ldr	r3, [pc, #160]	@ (80026b4 <HAL_GPIO_Init+0x354>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	43db      	mvns	r3, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4013      	ands	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	4313      	orrs	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002636:	4a1f      	ldr	r2, [pc, #124]	@ (80026b4 <HAL_GPIO_Init+0x354>)
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800263c:	4b1d      	ldr	r3, [pc, #116]	@ (80026b4 <HAL_GPIO_Init+0x354>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	43db      	mvns	r3, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4013      	ands	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	4313      	orrs	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002660:	4a14      	ldr	r2, [pc, #80]	@ (80026b4 <HAL_GPIO_Init+0x354>)
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	3301      	adds	r3, #1
 800266a:	61fb      	str	r3, [r7, #28]
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	2b0f      	cmp	r3, #15
 8002670:	f67f ae86 	bls.w	8002380 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002674:	bf00      	nop
 8002676:	bf00      	nop
 8002678:	3724      	adds	r7, #36	@ 0x24
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	40023800 	.word	0x40023800
 8002688:	40013800 	.word	0x40013800
 800268c:	40020000 	.word	0x40020000
 8002690:	40020400 	.word	0x40020400
 8002694:	40020800 	.word	0x40020800
 8002698:	40020c00 	.word	0x40020c00
 800269c:	40021000 	.word	0x40021000
 80026a0:	40021400 	.word	0x40021400
 80026a4:	40021800 	.word	0x40021800
 80026a8:	40021c00 	.word	0x40021c00
 80026ac:	40022000 	.word	0x40022000
 80026b0:	40022400 	.word	0x40022400
 80026b4:	40013c00 	.word	0x40013c00

080026b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	460b      	mov	r3, r1
 80026c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	691a      	ldr	r2, [r3, #16]
 80026c8:	887b      	ldrh	r3, [r7, #2]
 80026ca:	4013      	ands	r3, r2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d002      	beq.n	80026d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026d0:	2301      	movs	r3, #1
 80026d2:	73fb      	strb	r3, [r7, #15]
 80026d4:	e001      	b.n	80026da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026d6:	2300      	movs	r3, #0
 80026d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026da:	7bfb      	ldrb	r3, [r7, #15]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	460b      	mov	r3, r1
 80026f2:	807b      	strh	r3, [r7, #2]
 80026f4:	4613      	mov	r3, r2
 80026f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026f8:	787b      	ldrb	r3, [r7, #1]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026fe:	887a      	ldrh	r2, [r7, #2]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002704:	e003      	b.n	800270e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002706:	887b      	ldrh	r3, [r7, #2]
 8002708:	041a      	lsls	r2, r3, #16
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	619a      	str	r2, [r3, #24]
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
	...

0800271c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e0bf      	b.n	80028ae <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d106      	bne.n	8002748 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7fe fcd0 	bl	80010e8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2202      	movs	r2, #2
 800274c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	699a      	ldr	r2, [r3, #24]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800275e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6999      	ldr	r1, [r3, #24]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002774:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	430a      	orrs	r2, r1
 8002782:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6899      	ldr	r1, [r3, #8]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	4b4a      	ldr	r3, [pc, #296]	@ (80028b8 <HAL_LTDC_Init+0x19c>)
 8002790:	400b      	ands	r3, r1
 8002792:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	041b      	lsls	r3, r3, #16
 800279a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6899      	ldr	r1, [r3, #8]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	699a      	ldr	r2, [r3, #24]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	431a      	orrs	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68d9      	ldr	r1, [r3, #12]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	4b3e      	ldr	r3, [pc, #248]	@ (80028b8 <HAL_LTDC_Init+0x19c>)
 80027be:	400b      	ands	r3, r1
 80027c0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	041b      	lsls	r3, r3, #16
 80027c8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68d9      	ldr	r1, [r3, #12]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a1a      	ldr	r2, [r3, #32]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	431a      	orrs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6919      	ldr	r1, [r3, #16]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	4b33      	ldr	r3, [pc, #204]	@ (80028b8 <HAL_LTDC_Init+0x19c>)
 80027ec:	400b      	ands	r3, r1
 80027ee:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f4:	041b      	lsls	r3, r3, #16
 80027f6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6919      	ldr	r1, [r3, #16]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	431a      	orrs	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	430a      	orrs	r2, r1
 800280c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6959      	ldr	r1, [r3, #20]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	4b27      	ldr	r3, [pc, #156]	@ (80028b8 <HAL_LTDC_Init+0x19c>)
 800281a:	400b      	ands	r3, r1
 800281c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002822:	041b      	lsls	r3, r3, #16
 8002824:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6959      	ldr	r1, [r3, #20]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	431a      	orrs	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	430a      	orrs	r2, r1
 800283a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002842:	021b      	lsls	r3, r3, #8
 8002844:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800284c:	041b      	lsls	r3, r3, #16
 800284e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800285e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4313      	orrs	r3, r2
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8002872:	431a      	orrs	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	430a      	orrs	r2, r1
 800287a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 0206 	orr.w	r2, r2, #6
 800288a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	699a      	ldr	r2, [r3, #24]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0201 	orr.w	r2, r2, #1
 800289a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	f000f800 	.word	0xf000f800

080028bc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80028bc:	b5b0      	push	{r4, r5, r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d101      	bne.n	80028d6 <HAL_LTDC_ConfigLayer+0x1a>
 80028d2:	2302      	movs	r3, #2
 80028d4:	e02c      	b.n	8002930 <HAL_LTDC_ConfigLayer+0x74>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2202      	movs	r2, #2
 80028e2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2134      	movs	r1, #52	@ 0x34
 80028ec:	fb01 f303 	mul.w	r3, r1, r3
 80028f0:	4413      	add	r3, r2
 80028f2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	4614      	mov	r4, r2
 80028fa:	461d      	mov	r5, r3
 80028fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002900:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002902:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002904:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002906:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002908:	682b      	ldr	r3, [r5, #0]
 800290a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	68b9      	ldr	r1, [r7, #8]
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f000 f811 	bl	8002938 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2201      	movs	r2, #1
 800291c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bdb0      	pop	{r4, r5, r7, pc}

08002938 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002938:	b480      	push	{r7}
 800293a:	b089      	sub	sp, #36	@ 0x24
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	0c1b      	lsrs	r3, r3, #16
 8002950:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002954:	4413      	add	r3, r2
 8002956:	041b      	lsls	r3, r3, #16
 8002958:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	461a      	mov	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	01db      	lsls	r3, r3, #7
 8002964:	4413      	add	r3, r2
 8002966:	3384      	adds	r3, #132	@ 0x84
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	6812      	ldr	r2, [r2, #0]
 800296e:	4611      	mov	r1, r2
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	01d2      	lsls	r2, r2, #7
 8002974:	440a      	add	r2, r1
 8002976:	3284      	adds	r2, #132	@ 0x84
 8002978:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800297c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	0c1b      	lsrs	r3, r3, #16
 800298a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800298e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002990:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4619      	mov	r1, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	01db      	lsls	r3, r3, #7
 800299c:	440b      	add	r3, r1
 800299e:	3384      	adds	r3, #132	@ 0x84
 80029a0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80029a6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	68da      	ldr	r2, [r3, #12]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029b6:	4413      	add	r3, r2
 80029b8:	041b      	lsls	r3, r3, #16
 80029ba:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	461a      	mov	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	01db      	lsls	r3, r3, #7
 80029c6:	4413      	add	r3, r2
 80029c8:	3384      	adds	r3, #132	@ 0x84
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	6812      	ldr	r2, [r2, #0]
 80029d0:	4611      	mov	r1, r2
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	01d2      	lsls	r2, r2, #7
 80029d6:	440a      	add	r2, r1
 80029d8:	3284      	adds	r2, #132	@ 0x84
 80029da:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80029de:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029ee:	4413      	add	r3, r2
 80029f0:	1c5a      	adds	r2, r3, #1
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4619      	mov	r1, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	01db      	lsls	r3, r3, #7
 80029fc:	440b      	add	r3, r1
 80029fe:	3384      	adds	r3, #132	@ 0x84
 8002a00:	4619      	mov	r1, r3
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	01db      	lsls	r3, r3, #7
 8002a12:	4413      	add	r3, r2
 8002a14:	3384      	adds	r3, #132	@ 0x84
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	6812      	ldr	r2, [r2, #0]
 8002a1c:	4611      	mov	r1, r2
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	01d2      	lsls	r2, r2, #7
 8002a22:	440a      	add	r2, r1
 8002a24:	3284      	adds	r2, #132	@ 0x84
 8002a26:	f023 0307 	bic.w	r3, r3, #7
 8002a2a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	461a      	mov	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	01db      	lsls	r3, r3, #7
 8002a36:	4413      	add	r3, r2
 8002a38:	3384      	adds	r3, #132	@ 0x84
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002a48:	021b      	lsls	r3, r3, #8
 8002a4a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002a52:	041b      	lsls	r3, r3, #16
 8002a54:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	061b      	lsls	r3, r3, #24
 8002a5c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	461a      	mov	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	01db      	lsls	r3, r3, #7
 8002a68:	4413      	add	r3, r2
 8002a6a:	3384      	adds	r3, #132	@ 0x84
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	461a      	mov	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	01db      	lsls	r3, r3, #7
 8002a78:	4413      	add	r3, r2
 8002a7a:	3384      	adds	r3, #132	@ 0x84
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	2300      	movs	r3, #0
 8002a80:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002a88:	461a      	mov	r2, r3
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	431a      	orrs	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4619      	mov	r1, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	01db      	lsls	r3, r3, #7
 8002a9c:	440b      	add	r3, r1
 8002a9e:	3384      	adds	r3, #132	@ 0x84
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	461a      	mov	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	01db      	lsls	r3, r3, #7
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3384      	adds	r3, #132	@ 0x84
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	6812      	ldr	r2, [r2, #0]
 8002abc:	4611      	mov	r1, r2
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	01d2      	lsls	r2, r2, #7
 8002ac2:	440a      	add	r2, r1
 8002ac4:	3284      	adds	r2, #132	@ 0x84
 8002ac6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002aca:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	01db      	lsls	r3, r3, #7
 8002ad6:	4413      	add	r3, r2
 8002ad8:	3384      	adds	r3, #132	@ 0x84
 8002ada:	461a      	mov	r2, r3
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	01db      	lsls	r3, r3, #7
 8002aec:	4413      	add	r3, r2
 8002aee:	3384      	adds	r3, #132	@ 0x84
 8002af0:	69da      	ldr	r2, [r3, #28]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4619      	mov	r1, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	01db      	lsls	r3, r3, #7
 8002afc:	440b      	add	r3, r1
 8002afe:	3384      	adds	r3, #132	@ 0x84
 8002b00:	4619      	mov	r1, r3
 8002b02:	4b58      	ldr	r3, [pc, #352]	@ (8002c64 <LTDC_SetConfig+0x32c>)
 8002b04:	4013      	ands	r3, r2
 8002b06:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	69da      	ldr	r2, [r3, #28]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	68f9      	ldr	r1, [r7, #12]
 8002b12:	6809      	ldr	r1, [r1, #0]
 8002b14:	4608      	mov	r0, r1
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	01c9      	lsls	r1, r1, #7
 8002b1a:	4401      	add	r1, r0
 8002b1c:	3184      	adds	r1, #132	@ 0x84
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	461a      	mov	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	01db      	lsls	r3, r3, #7
 8002b2c:	4413      	add	r3, r2
 8002b2e:	3384      	adds	r3, #132	@ 0x84
 8002b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	461a      	mov	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	01db      	lsls	r3, r3, #7
 8002b3c:	4413      	add	r3, r2
 8002b3e:	3384      	adds	r3, #132	@ 0x84
 8002b40:	461a      	mov	r2, r3
 8002b42:	2300      	movs	r3, #0
 8002b44:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	01db      	lsls	r3, r3, #7
 8002b50:	4413      	add	r3, r2
 8002b52:	3384      	adds	r3, #132	@ 0x84
 8002b54:	461a      	mov	r2, r3
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5a:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d102      	bne.n	8002b6a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8002b64:	2304      	movs	r3, #4
 8002b66:	61fb      	str	r3, [r7, #28]
 8002b68:	e01b      	b.n	8002ba2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d102      	bne.n	8002b78 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8002b72:	2303      	movs	r3, #3
 8002b74:	61fb      	str	r3, [r7, #28]
 8002b76:	e014      	b.n	8002ba2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d00b      	beq.n	8002b98 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d007      	beq.n	8002b98 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002b8c:	2b03      	cmp	r3, #3
 8002b8e:	d003      	beq.n	8002b98 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002b94:	2b07      	cmp	r3, #7
 8002b96:	d102      	bne.n	8002b9e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	61fb      	str	r3, [r7, #28]
 8002b9c:	e001      	b.n	8002ba2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	01db      	lsls	r3, r3, #7
 8002bac:	4413      	add	r3, r2
 8002bae:	3384      	adds	r3, #132	@ 0x84
 8002bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	6812      	ldr	r2, [r2, #0]
 8002bb6:	4611      	mov	r1, r2
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	01d2      	lsls	r2, r2, #7
 8002bbc:	440a      	add	r2, r1
 8002bbe:	3284      	adds	r2, #132	@ 0x84
 8002bc0:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8002bc4:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bca:	69fa      	ldr	r2, [r7, #28]
 8002bcc:	fb02 f303 	mul.w	r3, r2, r3
 8002bd0:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	6859      	ldr	r1, [r3, #4]
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	1acb      	subs	r3, r1, r3
 8002bdc:	69f9      	ldr	r1, [r7, #28]
 8002bde:	fb01 f303 	mul.w	r3, r1, r3
 8002be2:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002be4:	68f9      	ldr	r1, [r7, #12]
 8002be6:	6809      	ldr	r1, [r1, #0]
 8002be8:	4608      	mov	r0, r1
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	01c9      	lsls	r1, r1, #7
 8002bee:	4401      	add	r1, r0
 8002bf0:	3184      	adds	r1, #132	@ 0x84
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	01db      	lsls	r3, r3, #7
 8002c00:	4413      	add	r3, r2
 8002c02:	3384      	adds	r3, #132	@ 0x84
 8002c04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	01db      	lsls	r3, r3, #7
 8002c10:	440b      	add	r3, r1
 8002c12:	3384      	adds	r3, #132	@ 0x84
 8002c14:	4619      	mov	r1, r3
 8002c16:	4b14      	ldr	r3, [pc, #80]	@ (8002c68 <LTDC_SetConfig+0x330>)
 8002c18:	4013      	ands	r3, r2
 8002c1a:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	461a      	mov	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	01db      	lsls	r3, r3, #7
 8002c26:	4413      	add	r3, r2
 8002c28:	3384      	adds	r3, #132	@ 0x84
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c30:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	461a      	mov	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	01db      	lsls	r3, r3, #7
 8002c3c:	4413      	add	r3, r2
 8002c3e:	3384      	adds	r3, #132	@ 0x84
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	6812      	ldr	r2, [r2, #0]
 8002c46:	4611      	mov	r1, r2
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	01d2      	lsls	r2, r2, #7
 8002c4c:	440a      	add	r2, r1
 8002c4e:	3284      	adds	r2, #132	@ 0x84
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	6013      	str	r3, [r2, #0]
}
 8002c56:	bf00      	nop
 8002c58:	3724      	adds	r7, #36	@ 0x24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	fffff8f8 	.word	0xfffff8f8
 8002c68:	fffff800 	.word	0xfffff800

08002c6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002c74:	2300      	movs	r3, #0
 8002c76:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e291      	b.n	80031a6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 8087 	beq.w	8002d9e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c90:	4b96      	ldr	r3, [pc, #600]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f003 030c 	and.w	r3, r3, #12
 8002c98:	2b04      	cmp	r3, #4
 8002c9a:	d00c      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c9c:	4b93      	ldr	r3, [pc, #588]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 030c 	and.w	r3, r3, #12
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	d112      	bne.n	8002cce <HAL_RCC_OscConfig+0x62>
 8002ca8:	4b90      	ldr	r3, [pc, #576]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cb4:	d10b      	bne.n	8002cce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb6:	4b8d      	ldr	r3, [pc, #564]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d06c      	beq.n	8002d9c <HAL_RCC_OscConfig+0x130>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d168      	bne.n	8002d9c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e26b      	b.n	80031a6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cd6:	d106      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x7a>
 8002cd8:	4b84      	ldr	r3, [pc, #528]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a83      	ldr	r2, [pc, #524]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002cde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ce2:	6013      	str	r3, [r2, #0]
 8002ce4:	e02e      	b.n	8002d44 <HAL_RCC_OscConfig+0xd8>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10c      	bne.n	8002d08 <HAL_RCC_OscConfig+0x9c>
 8002cee:	4b7f      	ldr	r3, [pc, #508]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a7e      	ldr	r2, [pc, #504]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002cf4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	4b7c      	ldr	r3, [pc, #496]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a7b      	ldr	r2, [pc, #492]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002d00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d04:	6013      	str	r3, [r2, #0]
 8002d06:	e01d      	b.n	8002d44 <HAL_RCC_OscConfig+0xd8>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d10:	d10c      	bne.n	8002d2c <HAL_RCC_OscConfig+0xc0>
 8002d12:	4b76      	ldr	r3, [pc, #472]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a75      	ldr	r2, [pc, #468]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002d18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d1c:	6013      	str	r3, [r2, #0]
 8002d1e:	4b73      	ldr	r3, [pc, #460]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a72      	ldr	r2, [pc, #456]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002d24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	e00b      	b.n	8002d44 <HAL_RCC_OscConfig+0xd8>
 8002d2c:	4b6f      	ldr	r3, [pc, #444]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a6e      	ldr	r2, [pc, #440]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002d32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d36:	6013      	str	r3, [r2, #0]
 8002d38:	4b6c      	ldr	r3, [pc, #432]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a6b      	ldr	r2, [pc, #428]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002d3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d013      	beq.n	8002d74 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4c:	f7fe fd44 	bl	80017d8 <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d54:	f7fe fd40 	bl	80017d8 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b64      	cmp	r3, #100	@ 0x64
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e21f      	b.n	80031a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d66:	4b61      	ldr	r3, [pc, #388]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d0f0      	beq.n	8002d54 <HAL_RCC_OscConfig+0xe8>
 8002d72:	e014      	b.n	8002d9e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d74:	f7fe fd30 	bl	80017d8 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d7c:	f7fe fd2c 	bl	80017d8 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b64      	cmp	r3, #100	@ 0x64
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e20b      	b.n	80031a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d8e:	4b57      	ldr	r3, [pc, #348]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f0      	bne.n	8002d7c <HAL_RCC_OscConfig+0x110>
 8002d9a:	e000      	b.n	8002d9e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d069      	beq.n	8002e7e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002daa:	4b50      	ldr	r3, [pc, #320]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 030c 	and.w	r3, r3, #12
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00b      	beq.n	8002dce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002db6:	4b4d      	ldr	r3, [pc, #308]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 030c 	and.w	r3, r3, #12
 8002dbe:	2b08      	cmp	r3, #8
 8002dc0:	d11c      	bne.n	8002dfc <HAL_RCC_OscConfig+0x190>
 8002dc2:	4b4a      	ldr	r3, [pc, #296]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d116      	bne.n	8002dfc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dce:	4b47      	ldr	r3, [pc, #284]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d005      	beq.n	8002de6 <HAL_RCC_OscConfig+0x17a>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d001      	beq.n	8002de6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e1df      	b.n	80031a6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de6:	4b41      	ldr	r3, [pc, #260]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	493d      	ldr	r1, [pc, #244]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dfa:	e040      	b.n	8002e7e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d023      	beq.n	8002e4c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e04:	4b39      	ldr	r3, [pc, #228]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a38      	ldr	r2, [pc, #224]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002e0a:	f043 0301 	orr.w	r3, r3, #1
 8002e0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e10:	f7fe fce2 	bl	80017d8 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e18:	f7fe fcde 	bl	80017d8 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e1bd      	b.n	80031a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e2a:	4b30      	ldr	r3, [pc, #192]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0f0      	beq.n	8002e18 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e36:	4b2d      	ldr	r3, [pc, #180]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	4929      	ldr	r1, [pc, #164]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	600b      	str	r3, [r1, #0]
 8002e4a:	e018      	b.n	8002e7e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e4c:	4b27      	ldr	r3, [pc, #156]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a26      	ldr	r2, [pc, #152]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002e52:	f023 0301 	bic.w	r3, r3, #1
 8002e56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e58:	f7fe fcbe 	bl	80017d8 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e60:	f7fe fcba 	bl	80017d8 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e199      	b.n	80031a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e72:	4b1e      	ldr	r3, [pc, #120]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d038      	beq.n	8002efc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d019      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e92:	4b16      	ldr	r3, [pc, #88]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002e94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e96:	4a15      	ldr	r2, [pc, #84]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9e:	f7fe fc9b 	bl	80017d8 <HAL_GetTick>
 8002ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ea6:	f7fe fc97 	bl	80017d8 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e176      	b.n	80031a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002eba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d0f0      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x23a>
 8002ec4:	e01a      	b.n	8002efc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ec6:	4b09      	ldr	r3, [pc, #36]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002ec8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eca:	4a08      	ldr	r2, [pc, #32]	@ (8002eec <HAL_RCC_OscConfig+0x280>)
 8002ecc:	f023 0301 	bic.w	r3, r3, #1
 8002ed0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed2:	f7fe fc81 	bl	80017d8 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed8:	e00a      	b.n	8002ef0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eda:	f7fe fc7d 	bl	80017d8 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d903      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e15c      	b.n	80031a6 <HAL_RCC_OscConfig+0x53a>
 8002eec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef0:	4b91      	ldr	r3, [pc, #580]	@ (8003138 <HAL_RCC_OscConfig+0x4cc>)
 8002ef2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1ee      	bne.n	8002eda <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 80a4 	beq.w	8003052 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f0a:	4b8b      	ldr	r3, [pc, #556]	@ (8003138 <HAL_RCC_OscConfig+0x4cc>)
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10d      	bne.n	8002f32 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f16:	4b88      	ldr	r3, [pc, #544]	@ (8003138 <HAL_RCC_OscConfig+0x4cc>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1a:	4a87      	ldr	r2, [pc, #540]	@ (8003138 <HAL_RCC_OscConfig+0x4cc>)
 8002f1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f20:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f22:	4b85      	ldr	r3, [pc, #532]	@ (8003138 <HAL_RCC_OscConfig+0x4cc>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f2a:	60bb      	str	r3, [r7, #8]
 8002f2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f32:	4b82      	ldr	r3, [pc, #520]	@ (800313c <HAL_RCC_OscConfig+0x4d0>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d118      	bne.n	8002f70 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002f3e:	4b7f      	ldr	r3, [pc, #508]	@ (800313c <HAL_RCC_OscConfig+0x4d0>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a7e      	ldr	r2, [pc, #504]	@ (800313c <HAL_RCC_OscConfig+0x4d0>)
 8002f44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f4a:	f7fe fc45 	bl	80017d8 <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f52:	f7fe fc41 	bl	80017d8 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b64      	cmp	r3, #100	@ 0x64
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e120      	b.n	80031a6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f64:	4b75      	ldr	r3, [pc, #468]	@ (800313c <HAL_RCC_OscConfig+0x4d0>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0f0      	beq.n	8002f52 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d106      	bne.n	8002f86 <HAL_RCC_OscConfig+0x31a>
 8002f78:	4b6f      	ldr	r3, [pc, #444]	@ (8003138 <HAL_RCC_OscConfig+0x4cc>)
 8002f7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f7c:	4a6e      	ldr	r2, [pc, #440]	@ (8003138 <HAL_RCC_OscConfig+0x4cc>)
 8002f7e:	f043 0301 	orr.w	r3, r3, #1
 8002f82:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f84:	e02d      	b.n	8002fe2 <HAL_RCC_OscConfig+0x376>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10c      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x33c>
 8002f8e:	4b6a      	ldr	r3, [pc, #424]	@ (8003138 <HAL_RCC_OscConfig+0x4cc>)
 8002f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f92:	4a69      	ldr	r2, [pc, #420]	@ (8003138 <HAL_RCC_OscConfig+0x4cc>)
 8002f94:	f023 0301 	bic.w	r3, r3, #1
 8002f98:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f9a:	4b67      	ldr	r3, [pc, #412]	@ (8003138 <HAL_RCC_OscConfig+0x4cc>)
 8002f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f9e:	4a66      	ldr	r2, [pc, #408]	@ (8003138 <HAL_RCC_OscConfig+0x4cc>)
 8002fa0:	f023 0304 	bic.w	r3, r3, #4
 8002fa4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fa6:	e01c      	b.n	8002fe2 <HAL_RCC_OscConfig+0x376>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	2b05      	cmp	r3, #5
 8002fae:	d10c      	bne.n	8002fca <HAL_RCC_OscConfig+0x35e>
 8002fb0:	4b61      	ldr	r3, [pc, #388]	@ (8003138 <HAL_RCC_OscConfig+0x4cc>)
 8002fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb4:	4a60      	ldr	r2, [pc, #384]	@ (8003138 <HAL_RCC_OscConfig+0x4cc>)
 8002fb6:	f043 0304 	orr.w	r3, r3, #4
 8002fba:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fbc:	4b5e      	ldr	r3, [pc, #376]	@ (8003138 <HAL_RCC_OscConfig+0x4cc>)
 8002fbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc0:	4a5d      	ldr	r2, [pc, #372]	@ (8003138 <HAL_RCC_OscConfig+0x4cc>)
 8002fc2:	f043 0301 	orr.w	r3, r3, #1
 8002fc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fc8:	e00b      	b.n	8002fe2 <HAL_RCC_OscConfig+0x376>
 8002fca:	4b5b      	ldr	r3, [pc, #364]	@ (8003138 <HAL_RCC_OscConfig+0x4cc>)
 8002fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fce:	4a5a      	ldr	r2, [pc, #360]	@ (8003138 <HAL_RCC_OscConfig+0x4cc>)
 8002fd0:	f023 0301 	bic.w	r3, r3, #1
 8002fd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fd6:	4b58      	ldr	r3, [pc, #352]	@ (8003138 <HAL_RCC_OscConfig+0x4cc>)
 8002fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fda:	4a57      	ldr	r2, [pc, #348]	@ (8003138 <HAL_RCC_OscConfig+0x4cc>)
 8002fdc:	f023 0304 	bic.w	r3, r3, #4
 8002fe0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d015      	beq.n	8003016 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fea:	f7fe fbf5 	bl	80017d8 <HAL_GetTick>
 8002fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff0:	e00a      	b.n	8003008 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff2:	f7fe fbf1 	bl	80017d8 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003000:	4293      	cmp	r3, r2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e0ce      	b.n	80031a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003008:	4b4b      	ldr	r3, [pc, #300]	@ (8003138 <HAL_RCC_OscConfig+0x4cc>)
 800300a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0ee      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x386>
 8003014:	e014      	b.n	8003040 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003016:	f7fe fbdf 	bl	80017d8 <HAL_GetTick>
 800301a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800301c:	e00a      	b.n	8003034 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800301e:	f7fe fbdb 	bl	80017d8 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	f241 3288 	movw	r2, #5000	@ 0x1388
 800302c:	4293      	cmp	r3, r2
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e0b8      	b.n	80031a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003034:	4b40      	ldr	r3, [pc, #256]	@ (8003138 <HAL_RCC_OscConfig+0x4cc>)
 8003036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1ee      	bne.n	800301e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003040:	7dfb      	ldrb	r3, [r7, #23]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d105      	bne.n	8003052 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003046:	4b3c      	ldr	r3, [pc, #240]	@ (8003138 <HAL_RCC_OscConfig+0x4cc>)
 8003048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304a:	4a3b      	ldr	r2, [pc, #236]	@ (8003138 <HAL_RCC_OscConfig+0x4cc>)
 800304c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003050:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 80a4 	beq.w	80031a4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800305c:	4b36      	ldr	r3, [pc, #216]	@ (8003138 <HAL_RCC_OscConfig+0x4cc>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f003 030c 	and.w	r3, r3, #12
 8003064:	2b08      	cmp	r3, #8
 8003066:	d06b      	beq.n	8003140 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	2b02      	cmp	r3, #2
 800306e:	d149      	bne.n	8003104 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003070:	4b31      	ldr	r3, [pc, #196]	@ (8003138 <HAL_RCC_OscConfig+0x4cc>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a30      	ldr	r2, [pc, #192]	@ (8003138 <HAL_RCC_OscConfig+0x4cc>)
 8003076:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800307a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307c:	f7fe fbac 	bl	80017d8 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003084:	f7fe fba8 	bl	80017d8 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e087      	b.n	80031a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003096:	4b28      	ldr	r3, [pc, #160]	@ (8003138 <HAL_RCC_OscConfig+0x4cc>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1f0      	bne.n	8003084 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69da      	ldr	r2, [r3, #28]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b0:	019b      	lsls	r3, r3, #6
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b8:	085b      	lsrs	r3, r3, #1
 80030ba:	3b01      	subs	r3, #1
 80030bc:	041b      	lsls	r3, r3, #16
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c4:	061b      	lsls	r3, r3, #24
 80030c6:	4313      	orrs	r3, r2
 80030c8:	4a1b      	ldr	r2, [pc, #108]	@ (8003138 <HAL_RCC_OscConfig+0x4cc>)
 80030ca:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80030ce:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030d0:	4b19      	ldr	r3, [pc, #100]	@ (8003138 <HAL_RCC_OscConfig+0x4cc>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a18      	ldr	r2, [pc, #96]	@ (8003138 <HAL_RCC_OscConfig+0x4cc>)
 80030d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030dc:	f7fe fb7c 	bl	80017d8 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e4:	f7fe fb78 	bl	80017d8 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e057      	b.n	80031a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f6:	4b10      	ldr	r3, [pc, #64]	@ (8003138 <HAL_RCC_OscConfig+0x4cc>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0f0      	beq.n	80030e4 <HAL_RCC_OscConfig+0x478>
 8003102:	e04f      	b.n	80031a4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003104:	4b0c      	ldr	r3, [pc, #48]	@ (8003138 <HAL_RCC_OscConfig+0x4cc>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a0b      	ldr	r2, [pc, #44]	@ (8003138 <HAL_RCC_OscConfig+0x4cc>)
 800310a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800310e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003110:	f7fe fb62 	bl	80017d8 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003118:	f7fe fb5e 	bl	80017d8 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e03d      	b.n	80031a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800312a:	4b03      	ldr	r3, [pc, #12]	@ (8003138 <HAL_RCC_OscConfig+0x4cc>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1f0      	bne.n	8003118 <HAL_RCC_OscConfig+0x4ac>
 8003136:	e035      	b.n	80031a4 <HAL_RCC_OscConfig+0x538>
 8003138:	40023800 	.word	0x40023800
 800313c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003140:	4b1b      	ldr	r3, [pc, #108]	@ (80031b0 <HAL_RCC_OscConfig+0x544>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d028      	beq.n	80031a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003158:	429a      	cmp	r2, r3
 800315a:	d121      	bne.n	80031a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003166:	429a      	cmp	r2, r3
 8003168:	d11a      	bne.n	80031a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003170:	4013      	ands	r3, r2
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003176:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003178:	4293      	cmp	r3, r2
 800317a:	d111      	bne.n	80031a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003186:	085b      	lsrs	r3, r3, #1
 8003188:	3b01      	subs	r3, #1
 800318a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800318c:	429a      	cmp	r2, r3
 800318e:	d107      	bne.n	80031a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800319a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800319c:	429a      	cmp	r2, r3
 800319e:	d001      	beq.n	80031a4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e000      	b.n	80031a6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3718      	adds	r7, #24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	40023800 	.word	0x40023800

080031b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80031be:	2300      	movs	r3, #0
 80031c0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e0d0      	b.n	800336e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031cc:	4b6a      	ldr	r3, [pc, #424]	@ (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 030f 	and.w	r3, r3, #15
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d910      	bls.n	80031fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031da:	4b67      	ldr	r3, [pc, #412]	@ (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f023 020f 	bic.w	r2, r3, #15
 80031e2:	4965      	ldr	r1, [pc, #404]	@ (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ea:	4b63      	ldr	r3, [pc, #396]	@ (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d001      	beq.n	80031fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e0b8      	b.n	800336e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d020      	beq.n	800324a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b00      	cmp	r3, #0
 8003212:	d005      	beq.n	8003220 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003214:	4b59      	ldr	r3, [pc, #356]	@ (800337c <HAL_RCC_ClockConfig+0x1c8>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	4a58      	ldr	r2, [pc, #352]	@ (800337c <HAL_RCC_ClockConfig+0x1c8>)
 800321a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800321e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0308 	and.w	r3, r3, #8
 8003228:	2b00      	cmp	r3, #0
 800322a:	d005      	beq.n	8003238 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800322c:	4b53      	ldr	r3, [pc, #332]	@ (800337c <HAL_RCC_ClockConfig+0x1c8>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	4a52      	ldr	r2, [pc, #328]	@ (800337c <HAL_RCC_ClockConfig+0x1c8>)
 8003232:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003236:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003238:	4b50      	ldr	r3, [pc, #320]	@ (800337c <HAL_RCC_ClockConfig+0x1c8>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	494d      	ldr	r1, [pc, #308]	@ (800337c <HAL_RCC_ClockConfig+0x1c8>)
 8003246:	4313      	orrs	r3, r2
 8003248:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b00      	cmp	r3, #0
 8003254:	d040      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d107      	bne.n	800326e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325e:	4b47      	ldr	r3, [pc, #284]	@ (800337c <HAL_RCC_ClockConfig+0x1c8>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d115      	bne.n	8003296 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e07f      	b.n	800336e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	2b02      	cmp	r3, #2
 8003274:	d107      	bne.n	8003286 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003276:	4b41      	ldr	r3, [pc, #260]	@ (800337c <HAL_RCC_ClockConfig+0x1c8>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d109      	bne.n	8003296 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e073      	b.n	800336e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003286:	4b3d      	ldr	r3, [pc, #244]	@ (800337c <HAL_RCC_ClockConfig+0x1c8>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e06b      	b.n	800336e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003296:	4b39      	ldr	r3, [pc, #228]	@ (800337c <HAL_RCC_ClockConfig+0x1c8>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f023 0203 	bic.w	r2, r3, #3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	4936      	ldr	r1, [pc, #216]	@ (800337c <HAL_RCC_ClockConfig+0x1c8>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032a8:	f7fe fa96 	bl	80017d8 <HAL_GetTick>
 80032ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ae:	e00a      	b.n	80032c6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032b0:	f7fe fa92 	bl	80017d8 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032be:	4293      	cmp	r3, r2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e053      	b.n	800336e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c6:	4b2d      	ldr	r3, [pc, #180]	@ (800337c <HAL_RCC_ClockConfig+0x1c8>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 020c 	and.w	r2, r3, #12
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d1eb      	bne.n	80032b0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032d8:	4b27      	ldr	r3, [pc, #156]	@ (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 030f 	and.w	r3, r3, #15
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d210      	bcs.n	8003308 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e6:	4b24      	ldr	r3, [pc, #144]	@ (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f023 020f 	bic.w	r2, r3, #15
 80032ee:	4922      	ldr	r1, [pc, #136]	@ (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f6:	4b20      	ldr	r3, [pc, #128]	@ (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 030f 	and.w	r3, r3, #15
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	429a      	cmp	r2, r3
 8003302:	d001      	beq.n	8003308 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e032      	b.n	800336e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	2b00      	cmp	r3, #0
 8003312:	d008      	beq.n	8003326 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003314:	4b19      	ldr	r3, [pc, #100]	@ (800337c <HAL_RCC_ClockConfig+0x1c8>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	4916      	ldr	r1, [pc, #88]	@ (800337c <HAL_RCC_ClockConfig+0x1c8>)
 8003322:	4313      	orrs	r3, r2
 8003324:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	2b00      	cmp	r3, #0
 8003330:	d009      	beq.n	8003346 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003332:	4b12      	ldr	r3, [pc, #72]	@ (800337c <HAL_RCC_ClockConfig+0x1c8>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	490e      	ldr	r1, [pc, #56]	@ (800337c <HAL_RCC_ClockConfig+0x1c8>)
 8003342:	4313      	orrs	r3, r2
 8003344:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003346:	f000 f821 	bl	800338c <HAL_RCC_GetSysClockFreq>
 800334a:	4602      	mov	r2, r0
 800334c:	4b0b      	ldr	r3, [pc, #44]	@ (800337c <HAL_RCC_ClockConfig+0x1c8>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	091b      	lsrs	r3, r3, #4
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	490a      	ldr	r1, [pc, #40]	@ (8003380 <HAL_RCC_ClockConfig+0x1cc>)
 8003358:	5ccb      	ldrb	r3, [r1, r3]
 800335a:	fa22 f303 	lsr.w	r3, r2, r3
 800335e:	4a09      	ldr	r2, [pc, #36]	@ (8003384 <HAL_RCC_ClockConfig+0x1d0>)
 8003360:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003362:	4b09      	ldr	r3, [pc, #36]	@ (8003388 <HAL_RCC_ClockConfig+0x1d4>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f7fe f9f2 	bl	8001750 <HAL_InitTick>

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	40023c00 	.word	0x40023c00
 800337c:	40023800 	.word	0x40023800
 8003380:	0800660c 	.word	0x0800660c
 8003384:	20000000 	.word	0x20000000
 8003388:	20000004 	.word	0x20000004

0800338c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800338c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003390:	b090      	sub	sp, #64	@ 0x40
 8003392:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003394:	2300      	movs	r3, #0
 8003396:	637b      	str	r3, [r7, #52]	@ 0x34
 8003398:	2300      	movs	r3, #0
 800339a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800339c:	2300      	movs	r3, #0
 800339e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80033a0:	2300      	movs	r3, #0
 80033a2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033a4:	4b59      	ldr	r3, [pc, #356]	@ (800350c <HAL_RCC_GetSysClockFreq+0x180>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f003 030c 	and.w	r3, r3, #12
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	d00d      	beq.n	80033cc <HAL_RCC_GetSysClockFreq+0x40>
 80033b0:	2b08      	cmp	r3, #8
 80033b2:	f200 80a1 	bhi.w	80034f8 <HAL_RCC_GetSysClockFreq+0x16c>
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d002      	beq.n	80033c0 <HAL_RCC_GetSysClockFreq+0x34>
 80033ba:	2b04      	cmp	r3, #4
 80033bc:	d003      	beq.n	80033c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80033be:	e09b      	b.n	80034f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033c0:	4b53      	ldr	r3, [pc, #332]	@ (8003510 <HAL_RCC_GetSysClockFreq+0x184>)
 80033c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033c4:	e09b      	b.n	80034fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033c6:	4b53      	ldr	r3, [pc, #332]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x188>)
 80033c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033ca:	e098      	b.n	80034fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033cc:	4b4f      	ldr	r3, [pc, #316]	@ (800350c <HAL_RCC_GetSysClockFreq+0x180>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033d4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80033d6:	4b4d      	ldr	r3, [pc, #308]	@ (800350c <HAL_RCC_GetSysClockFreq+0x180>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d028      	beq.n	8003434 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033e2:	4b4a      	ldr	r3, [pc, #296]	@ (800350c <HAL_RCC_GetSysClockFreq+0x180>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	099b      	lsrs	r3, r3, #6
 80033e8:	2200      	movs	r2, #0
 80033ea:	623b      	str	r3, [r7, #32]
 80033ec:	627a      	str	r2, [r7, #36]	@ 0x24
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80033f4:	2100      	movs	r1, #0
 80033f6:	4b47      	ldr	r3, [pc, #284]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x188>)
 80033f8:	fb03 f201 	mul.w	r2, r3, r1
 80033fc:	2300      	movs	r3, #0
 80033fe:	fb00 f303 	mul.w	r3, r0, r3
 8003402:	4413      	add	r3, r2
 8003404:	4a43      	ldr	r2, [pc, #268]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x188>)
 8003406:	fba0 1202 	umull	r1, r2, r0, r2
 800340a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800340c:	460a      	mov	r2, r1
 800340e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003410:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003412:	4413      	add	r3, r2
 8003414:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003418:	2200      	movs	r2, #0
 800341a:	61bb      	str	r3, [r7, #24]
 800341c:	61fa      	str	r2, [r7, #28]
 800341e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003422:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003426:	f7fc feef 	bl	8000208 <__aeabi_uldivmod>
 800342a:	4602      	mov	r2, r0
 800342c:	460b      	mov	r3, r1
 800342e:	4613      	mov	r3, r2
 8003430:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003432:	e053      	b.n	80034dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003434:	4b35      	ldr	r3, [pc, #212]	@ (800350c <HAL_RCC_GetSysClockFreq+0x180>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	099b      	lsrs	r3, r3, #6
 800343a:	2200      	movs	r2, #0
 800343c:	613b      	str	r3, [r7, #16]
 800343e:	617a      	str	r2, [r7, #20]
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003446:	f04f 0b00 	mov.w	fp, #0
 800344a:	4652      	mov	r2, sl
 800344c:	465b      	mov	r3, fp
 800344e:	f04f 0000 	mov.w	r0, #0
 8003452:	f04f 0100 	mov.w	r1, #0
 8003456:	0159      	lsls	r1, r3, #5
 8003458:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800345c:	0150      	lsls	r0, r2, #5
 800345e:	4602      	mov	r2, r0
 8003460:	460b      	mov	r3, r1
 8003462:	ebb2 080a 	subs.w	r8, r2, sl
 8003466:	eb63 090b 	sbc.w	r9, r3, fp
 800346a:	f04f 0200 	mov.w	r2, #0
 800346e:	f04f 0300 	mov.w	r3, #0
 8003472:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003476:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800347a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800347e:	ebb2 0408 	subs.w	r4, r2, r8
 8003482:	eb63 0509 	sbc.w	r5, r3, r9
 8003486:	f04f 0200 	mov.w	r2, #0
 800348a:	f04f 0300 	mov.w	r3, #0
 800348e:	00eb      	lsls	r3, r5, #3
 8003490:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003494:	00e2      	lsls	r2, r4, #3
 8003496:	4614      	mov	r4, r2
 8003498:	461d      	mov	r5, r3
 800349a:	eb14 030a 	adds.w	r3, r4, sl
 800349e:	603b      	str	r3, [r7, #0]
 80034a0:	eb45 030b 	adc.w	r3, r5, fp
 80034a4:	607b      	str	r3, [r7, #4]
 80034a6:	f04f 0200 	mov.w	r2, #0
 80034aa:	f04f 0300 	mov.w	r3, #0
 80034ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034b2:	4629      	mov	r1, r5
 80034b4:	028b      	lsls	r3, r1, #10
 80034b6:	4621      	mov	r1, r4
 80034b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034bc:	4621      	mov	r1, r4
 80034be:	028a      	lsls	r2, r1, #10
 80034c0:	4610      	mov	r0, r2
 80034c2:	4619      	mov	r1, r3
 80034c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034c6:	2200      	movs	r2, #0
 80034c8:	60bb      	str	r3, [r7, #8]
 80034ca:	60fa      	str	r2, [r7, #12]
 80034cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034d0:	f7fc fe9a 	bl	8000208 <__aeabi_uldivmod>
 80034d4:	4602      	mov	r2, r0
 80034d6:	460b      	mov	r3, r1
 80034d8:	4613      	mov	r3, r2
 80034da:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80034dc:	4b0b      	ldr	r3, [pc, #44]	@ (800350c <HAL_RCC_GetSysClockFreq+0x180>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	0c1b      	lsrs	r3, r3, #16
 80034e2:	f003 0303 	and.w	r3, r3, #3
 80034e6:	3301      	adds	r3, #1
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80034ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80034ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034f6:	e002      	b.n	80034fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034f8:	4b05      	ldr	r3, [pc, #20]	@ (8003510 <HAL_RCC_GetSysClockFreq+0x184>)
 80034fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003500:	4618      	mov	r0, r3
 8003502:	3740      	adds	r7, #64	@ 0x40
 8003504:	46bd      	mov	sp, r7
 8003506:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800350a:	bf00      	nop
 800350c:	40023800 	.word	0x40023800
 8003510:	00f42400 	.word	0x00f42400
 8003514:	017d7840 	.word	0x017d7840

08003518 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b088      	sub	sp, #32
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003520:	2300      	movs	r3, #0
 8003522:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003524:	2300      	movs	r3, #0
 8003526:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003528:	2300      	movs	r3, #0
 800352a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800352c:	2300      	movs	r3, #0
 800352e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003530:	2300      	movs	r3, #0
 8003532:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b00      	cmp	r3, #0
 800353e:	d012      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003540:	4b69      	ldr	r3, [pc, #420]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	4a68      	ldr	r2, [pc, #416]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003546:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800354a:	6093      	str	r3, [r2, #8]
 800354c:	4b66      	ldr	r3, [pc, #408]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003554:	4964      	ldr	r1, [pc, #400]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003556:	4313      	orrs	r3, r2
 8003558:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003562:	2301      	movs	r3, #1
 8003564:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d017      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003572:	4b5d      	ldr	r3, [pc, #372]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003574:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003578:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003580:	4959      	ldr	r1, [pc, #356]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003582:	4313      	orrs	r3, r2
 8003584:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800358c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003590:	d101      	bne.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003592:	2301      	movs	r3, #1
 8003594:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800359e:	2301      	movs	r3, #1
 80035a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d017      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035ae:	4b4e      	ldr	r3, [pc, #312]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035b4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035bc:	494a      	ldr	r1, [pc, #296]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035cc:	d101      	bne.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80035ce:	2301      	movs	r3, #1
 80035d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80035da:	2301      	movs	r3, #1
 80035dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80035ea:	2301      	movs	r3, #1
 80035ec:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0320 	and.w	r3, r3, #32
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f000 808b 	beq.w	8003712 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80035fc:	4b3a      	ldr	r3, [pc, #232]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003600:	4a39      	ldr	r2, [pc, #228]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003602:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003606:	6413      	str	r3, [r2, #64]	@ 0x40
 8003608:	4b37      	ldr	r3, [pc, #220]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800360a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003610:	60bb      	str	r3, [r7, #8]
 8003612:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003614:	4b35      	ldr	r3, [pc, #212]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a34      	ldr	r2, [pc, #208]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800361a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800361e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003620:	f7fe f8da 	bl	80017d8 <HAL_GetTick>
 8003624:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003626:	e008      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003628:	f7fe f8d6 	bl	80017d8 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b64      	cmp	r3, #100	@ 0x64
 8003634:	d901      	bls.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e357      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800363a:	4b2c      	ldr	r3, [pc, #176]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003642:	2b00      	cmp	r3, #0
 8003644:	d0f0      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003646:	4b28      	ldr	r3, [pc, #160]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800364a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800364e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d035      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	429a      	cmp	r2, r3
 8003662:	d02e      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003664:	4b20      	ldr	r3, [pc, #128]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003666:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003668:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800366c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800366e:	4b1e      	ldr	r3, [pc, #120]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003672:	4a1d      	ldr	r2, [pc, #116]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003674:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003678:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800367a:	4b1b      	ldr	r3, [pc, #108]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800367c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800367e:	4a1a      	ldr	r2, [pc, #104]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003680:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003684:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003686:	4a18      	ldr	r2, [pc, #96]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800368c:	4b16      	ldr	r3, [pc, #88]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800368e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b01      	cmp	r3, #1
 8003696:	d114      	bne.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003698:	f7fe f89e 	bl	80017d8 <HAL_GetTick>
 800369c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369e:	e00a      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036a0:	f7fe f89a 	bl	80017d8 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e319      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b6:	4b0c      	ldr	r3, [pc, #48]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d0ee      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036ce:	d111      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80036d0:	4b05      	ldr	r3, [pc, #20]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80036dc:	4b04      	ldr	r3, [pc, #16]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80036de:	400b      	ands	r3, r1
 80036e0:	4901      	ldr	r1, [pc, #4]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	608b      	str	r3, [r1, #8]
 80036e6:	e00b      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80036e8:	40023800 	.word	0x40023800
 80036ec:	40007000 	.word	0x40007000
 80036f0:	0ffffcff 	.word	0x0ffffcff
 80036f4:	4baa      	ldr	r3, [pc, #680]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	4aa9      	ldr	r2, [pc, #676]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036fa:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80036fe:	6093      	str	r3, [r2, #8]
 8003700:	4ba7      	ldr	r3, [pc, #668]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003702:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800370c:	49a4      	ldr	r1, [pc, #656]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800370e:	4313      	orrs	r3, r2
 8003710:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0310 	and.w	r3, r3, #16
 800371a:	2b00      	cmp	r3, #0
 800371c:	d010      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800371e:	4ba0      	ldr	r3, [pc, #640]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003720:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003724:	4a9e      	ldr	r2, [pc, #632]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003726:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800372a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800372e:	4b9c      	ldr	r3, [pc, #624]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003730:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003738:	4999      	ldr	r1, [pc, #612]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800373a:	4313      	orrs	r3, r2
 800373c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00a      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800374c:	4b94      	ldr	r3, [pc, #592]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800374e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003752:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800375a:	4991      	ldr	r1, [pc, #580]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800375c:	4313      	orrs	r3, r2
 800375e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00a      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800376e:	4b8c      	ldr	r3, [pc, #560]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003770:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003774:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800377c:	4988      	ldr	r1, [pc, #544]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800377e:	4313      	orrs	r3, r2
 8003780:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00a      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003790:	4b83      	ldr	r3, [pc, #524]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003796:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800379e:	4980      	ldr	r1, [pc, #512]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00a      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80037b2:	4b7b      	ldr	r3, [pc, #492]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037b8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c0:	4977      	ldr	r1, [pc, #476]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00a      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037d4:	4b72      	ldr	r3, [pc, #456]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037da:	f023 0203 	bic.w	r2, r3, #3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e2:	496f      	ldr	r1, [pc, #444]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00a      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037f6:	4b6a      	ldr	r3, [pc, #424]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037fc:	f023 020c 	bic.w	r2, r3, #12
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003804:	4966      	ldr	r1, [pc, #408]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003806:	4313      	orrs	r3, r2
 8003808:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00a      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003818:	4b61      	ldr	r3, [pc, #388]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800381a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800381e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003826:	495e      	ldr	r1, [pc, #376]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003828:	4313      	orrs	r3, r2
 800382a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00a      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800383a:	4b59      	ldr	r3, [pc, #356]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800383c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003840:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003848:	4955      	ldr	r1, [pc, #340]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800384a:	4313      	orrs	r3, r2
 800384c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00a      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800385c:	4b50      	ldr	r3, [pc, #320]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800385e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003862:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800386a:	494d      	ldr	r1, [pc, #308]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800386c:	4313      	orrs	r3, r2
 800386e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00a      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800387e:	4b48      	ldr	r3, [pc, #288]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003880:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003884:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800388c:	4944      	ldr	r1, [pc, #272]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800388e:	4313      	orrs	r3, r2
 8003890:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00a      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80038a0:	4b3f      	ldr	r3, [pc, #252]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038a6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ae:	493c      	ldr	r1, [pc, #240]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00a      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80038c2:	4b37      	ldr	r3, [pc, #220]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038c8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038d0:	4933      	ldr	r1, [pc, #204]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00a      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038e4:	4b2e      	ldr	r3, [pc, #184]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ea:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038f2:	492b      	ldr	r1, [pc, #172]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d011      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003906:	4b26      	ldr	r3, [pc, #152]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003908:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800390c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003914:	4922      	ldr	r1, [pc, #136]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003916:	4313      	orrs	r3, r2
 8003918:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003920:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003924:	d101      	bne.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003926:	2301      	movs	r3, #1
 8003928:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0308 	and.w	r3, r3, #8
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003936:	2301      	movs	r3, #1
 8003938:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00a      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003946:	4b16      	ldr	r3, [pc, #88]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003948:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800394c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003954:	4912      	ldr	r1, [pc, #72]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003956:	4313      	orrs	r3, r2
 8003958:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00b      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003968:	4b0d      	ldr	r3, [pc, #52]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800396a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800396e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003978:	4909      	ldr	r1, [pc, #36]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800397a:	4313      	orrs	r3, r2
 800397c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d006      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 80d9 	beq.w	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003994:	4b02      	ldr	r3, [pc, #8]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a01      	ldr	r2, [pc, #4]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800399a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800399e:	e001      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80039a0:	40023800 	.word	0x40023800
 80039a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039a6:	f7fd ff17 	bl	80017d8 <HAL_GetTick>
 80039aa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039ac:	e008      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039ae:	f7fd ff13 	bl	80017d8 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b64      	cmp	r3, #100	@ 0x64
 80039ba:	d901      	bls.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e194      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039c0:	4b6c      	ldr	r3, [pc, #432]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1f0      	bne.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d021      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d11d      	bne.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80039e0:	4b64      	ldr	r3, [pc, #400]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039e6:	0c1b      	lsrs	r3, r3, #16
 80039e8:	f003 0303 	and.w	r3, r3, #3
 80039ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80039ee:	4b61      	ldr	r3, [pc, #388]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039f4:	0e1b      	lsrs	r3, r3, #24
 80039f6:	f003 030f 	and.w	r3, r3, #15
 80039fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	019a      	lsls	r2, r3, #6
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	041b      	lsls	r3, r3, #16
 8003a06:	431a      	orrs	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	061b      	lsls	r3, r3, #24
 8003a0c:	431a      	orrs	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	071b      	lsls	r3, r3, #28
 8003a14:	4957      	ldr	r1, [pc, #348]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d004      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a30:	d00a      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d02e      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a46:	d129      	bne.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a48:	4b4a      	ldr	r3, [pc, #296]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a4e:	0c1b      	lsrs	r3, r3, #16
 8003a50:	f003 0303 	and.w	r3, r3, #3
 8003a54:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a56:	4b47      	ldr	r3, [pc, #284]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a5c:	0f1b      	lsrs	r3, r3, #28
 8003a5e:	f003 0307 	and.w	r3, r3, #7
 8003a62:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	019a      	lsls	r2, r3, #6
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	041b      	lsls	r3, r3, #16
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	061b      	lsls	r3, r3, #24
 8003a76:	431a      	orrs	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	071b      	lsls	r3, r3, #28
 8003a7c:	493d      	ldr	r1, [pc, #244]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003a84:	4b3b      	ldr	r3, [pc, #236]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a8a:	f023 021f 	bic.w	r2, r3, #31
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a92:	3b01      	subs	r3, #1
 8003a94:	4937      	ldr	r1, [pc, #220]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d01d      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003aa8:	4b32      	ldr	r3, [pc, #200]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003aae:	0e1b      	lsrs	r3, r3, #24
 8003ab0:	f003 030f 	and.w	r3, r3, #15
 8003ab4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ab6:	4b2f      	ldr	r3, [pc, #188]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003abc:	0f1b      	lsrs	r3, r3, #28
 8003abe:	f003 0307 	and.w	r3, r3, #7
 8003ac2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	019a      	lsls	r2, r3, #6
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	041b      	lsls	r3, r3, #16
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	061b      	lsls	r3, r3, #24
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	071b      	lsls	r3, r3, #28
 8003adc:	4925      	ldr	r1, [pc, #148]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d011      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	019a      	lsls	r2, r3, #6
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	041b      	lsls	r3, r3, #16
 8003afc:	431a      	orrs	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	061b      	lsls	r3, r3, #24
 8003b04:	431a      	orrs	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	071b      	lsls	r3, r3, #28
 8003b0c:	4919      	ldr	r1, [pc, #100]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b14:	4b17      	ldr	r3, [pc, #92]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a16      	ldr	r2, [pc, #88]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b1a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003b1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b20:	f7fd fe5a 	bl	80017d8 <HAL_GetTick>
 8003b24:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b26:	e008      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b28:	f7fd fe56 	bl	80017d8 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b64      	cmp	r3, #100	@ 0x64
 8003b34:	d901      	bls.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e0d7      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0f0      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	f040 80cd 	bne.w	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b4e:	4b09      	ldr	r3, [pc, #36]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a08      	ldr	r2, [pc, #32]	@ (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b5a:	f7fd fe3d 	bl	80017d8 <HAL_GetTick>
 8003b5e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b60:	e00a      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b62:	f7fd fe39 	bl	80017d8 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b64      	cmp	r3, #100	@ 0x64
 8003b6e:	d903      	bls.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e0ba      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003b74:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b78:	4b5e      	ldr	r3, [pc, #376]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b84:	d0ed      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d009      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d02e      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d12a      	bne.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003bae:	4b51      	ldr	r3, [pc, #324]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb4:	0c1b      	lsrs	r3, r3, #16
 8003bb6:	f003 0303 	and.w	r3, r3, #3
 8003bba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003bbc:	4b4d      	ldr	r3, [pc, #308]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bc2:	0f1b      	lsrs	r3, r3, #28
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	019a      	lsls	r2, r3, #6
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	041b      	lsls	r3, r3, #16
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	061b      	lsls	r3, r3, #24
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	071b      	lsls	r3, r3, #28
 8003be2:	4944      	ldr	r1, [pc, #272]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003bea:	4b42      	ldr	r3, [pc, #264]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bf0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	021b      	lsls	r3, r3, #8
 8003bfc:	493d      	ldr	r1, [pc, #244]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d022      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c18:	d11d      	bne.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c1a:	4b36      	ldr	r3, [pc, #216]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c20:	0e1b      	lsrs	r3, r3, #24
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c28:	4b32      	ldr	r3, [pc, #200]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c2e:	0f1b      	lsrs	r3, r3, #28
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	019a      	lsls	r2, r3, #6
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	041b      	lsls	r3, r3, #16
 8003c42:	431a      	orrs	r2, r3
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	061b      	lsls	r3, r3, #24
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	071b      	lsls	r3, r3, #28
 8003c4e:	4929      	ldr	r1, [pc, #164]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0308 	and.w	r3, r3, #8
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d028      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c62:	4b24      	ldr	r3, [pc, #144]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c68:	0e1b      	lsrs	r3, r3, #24
 8003c6a:	f003 030f 	and.w	r3, r3, #15
 8003c6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c70:	4b20      	ldr	r3, [pc, #128]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c76:	0c1b      	lsrs	r3, r3, #16
 8003c78:	f003 0303 	and.w	r3, r3, #3
 8003c7c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	019a      	lsls	r2, r3, #6
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	041b      	lsls	r3, r3, #16
 8003c88:	431a      	orrs	r2, r3
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	061b      	lsls	r3, r3, #24
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	69db      	ldr	r3, [r3, #28]
 8003c94:	071b      	lsls	r3, r3, #28
 8003c96:	4917      	ldr	r1, [pc, #92]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003c9e:	4b15      	ldr	r3, [pc, #84]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ca4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cac:	4911      	ldr	r1, [pc, #68]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a0e      	ldr	r2, [pc, #56]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cc0:	f7fd fd8a 	bl	80017d8 <HAL_GetTick>
 8003cc4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cc6:	e008      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003cc8:	f7fd fd86 	bl	80017d8 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b64      	cmp	r3, #100	@ 0x64
 8003cd4:	d901      	bls.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e007      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cda:	4b06      	ldr	r3, [pc, #24]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ce2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ce6:	d1ef      	bne.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3720      	adds	r7, #32
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	40023800 	.word	0x40023800

08003cf8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e022      	b.n	8003d50 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d105      	bne.n	8003d22 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7fd fadb 	bl	80012d8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2203      	movs	r2, #3
 8003d26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f814 	bl	8003d58 <HAL_SD_InitCard>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e00a      	b.n	8003d50 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3708      	adds	r7, #8
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003d58:	b5b0      	push	{r4, r5, r7, lr}
 8003d5a:	b08e      	sub	sp, #56	@ 0x38
 8003d5c:	af04      	add	r7, sp, #16
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003d60:	2300      	movs	r3, #0
 8003d62:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8003d64:	2300      	movs	r3, #0
 8003d66:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003d70:	2300      	movs	r3, #0
 8003d72:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8003d74:	2376      	movs	r3, #118	@ 0x76
 8003d76:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681d      	ldr	r5, [r3, #0]
 8003d7c:	466c      	mov	r4, sp
 8003d7e:	f107 0314 	add.w	r3, r7, #20
 8003d82:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003d86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003d8a:	f107 0308 	add.w	r3, r7, #8
 8003d8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d90:	4628      	mov	r0, r5
 8003d92:	f001 fbd7 	bl	8005544 <SDMMC_Init>
 8003d96:	4603      	mov	r3, r0
 8003d98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8003d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e059      	b.n	8003e5c <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	685a      	ldr	r2, [r3, #4]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003db6:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f001 fc0b 	bl	80055d8 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003dd0:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8003dd2:	2002      	movs	r0, #2
 8003dd4:	f7fd fd0c 	bl	80017f0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 fff3 	bl	8004dc4 <SD_PowerON>
 8003dde:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003de0:	6a3b      	ldr	r3, [r7, #32]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00b      	beq.n	8003dfe <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003df2:	6a3b      	ldr	r3, [r7, #32]
 8003df4:	431a      	orrs	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e02e      	b.n	8003e5c <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 ff12 	bl	8004c28 <SD_InitCard>
 8003e04:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e06:	6a3b      	ldr	r3, [r7, #32]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00b      	beq.n	8003e24 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e01b      	b.n	8003e5c <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f001 fc65 	bl	80056fc <SDMMC_CmdBlockLength>
 8003e32:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e34:	6a3b      	ldr	r3, [r7, #32]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00f      	beq.n	8003e5a <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a09      	ldr	r2, [pc, #36]	@ (8003e64 <HAL_SD_InitCard+0x10c>)
 8003e40:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e46:	6a3b      	ldr	r3, [r7, #32]
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e000      	b.n	8003e5c <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3728      	adds	r7, #40	@ 0x28
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bdb0      	pop	{r4, r5, r7, pc}
 8003e64:	004005ff 	.word	0x004005ff

08003e68 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b08c      	sub	sp, #48	@ 0x30
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
 8003e74:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d107      	bne.n	8003e90 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e84:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e0c3      	b.n	8004018 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	f040 80bc 	bne.w	8004016 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003ea4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	441a      	add	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d907      	bls.n	8003ec2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eb6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e0aa      	b.n	8004018 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2203      	movs	r2, #3
 8003ec6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8003ee0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee6:	4a4e      	ldr	r2, [pc, #312]	@ (8004020 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8003ee8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eee:	4a4d      	ldr	r2, [pc, #308]	@ (8004024 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003ef0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efe:	2200      	movs	r2, #0
 8003f00:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f12:	689a      	ldr	r2, [r3, #8]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	3380      	adds	r3, #128	@ 0x80
 8003f28:	4619      	mov	r1, r3
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	025b      	lsls	r3, r3, #9
 8003f30:	089b      	lsrs	r3, r3, #2
 8003f32:	f7fd fe41 	bl	8001bb8 <HAL_DMA_Start_IT>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d017      	beq.n	8003f6c <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8003f4a:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a35      	ldr	r2, [pc, #212]	@ (8004028 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8003f52:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f58:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e055      	b.n	8004018 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f042 0208 	orr.w	r2, r2, #8
 8003f7a:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d002      	beq.n	8003f8a <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8003f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f86:	025b      	lsls	r3, r3, #9
 8003f88:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f8e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	025b      	lsls	r3, r3, #9
 8003f94:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003f96:	2390      	movs	r3, #144	@ 0x90
 8003f98:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f107 0210 	add.w	r2, r7, #16
 8003fae:	4611      	mov	r1, r2
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f001 fb77 	bl	80056a4 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d90a      	bls.n	8003fd2 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2282      	movs	r2, #130	@ 0x82
 8003fc0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f001 fbdb 	bl	8005784 <SDMMC_CmdReadMultiBlock>
 8003fce:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003fd0:	e009      	b.n	8003fe6 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2281      	movs	r2, #129	@ 0x81
 8003fd6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f001 fbae 	bl	8005740 <SDMMC_CmdReadSingleBlock>
 8003fe4:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d012      	beq.n	8004012 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a0d      	ldr	r2, [pc, #52]	@ (8004028 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8003ff2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e002      	b.n	8004018 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8004012:	2300      	movs	r3, #0
 8004014:	e000      	b.n	8004018 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8004016:	2302      	movs	r3, #2
  }
}
 8004018:	4618      	mov	r0, r3
 800401a:	3730      	adds	r7, #48	@ 0x30
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	08004a37 	.word	0x08004a37
 8004024:	08004aa9 	.word	0x08004aa9
 8004028:	004005ff 	.word	0x004005ff

0800402c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b08c      	sub	sp, #48	@ 0x30
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
 8004038:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d107      	bne.n	8004054 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004048:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e0c6      	b.n	80041e2 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b01      	cmp	r3, #1
 800405e:	f040 80bf 	bne.w	80041e0 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004068:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	441a      	add	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004072:	429a      	cmp	r2, r3
 8004074:	d907      	bls.n	8004086 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800407a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e0ad      	b.n	80041e2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2203      	movs	r2, #3
 800408a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2200      	movs	r2, #0
 8004094:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f042 021a 	orr.w	r2, r2, #26
 80040a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040aa:	4a50      	ldr	r2, [pc, #320]	@ (80041ec <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80040ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040b2:	4a4f      	ldr	r2, [pc, #316]	@ (80041f0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80040b4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ba:	2200      	movs	r2, #0
 80040bc:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d002      	beq.n	80040cc <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80040c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040c8:	025b      	lsls	r3, r3, #9
 80040ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d90a      	bls.n	80040e8 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	22a0      	movs	r2, #160	@ 0xa0
 80040d6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040de:	4618      	mov	r0, r3
 80040e0:	f001 fb94 	bl	800580c <SDMMC_CmdWriteMultiBlock>
 80040e4:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80040e6:	e009      	b.n	80040fc <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2290      	movs	r2, #144	@ 0x90
 80040ec:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040f4:	4618      	mov	r0, r3
 80040f6:	f001 fb67 	bl	80057c8 <SDMMC_CmdWriteSingleBlock>
 80040fa:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80040fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d012      	beq.n	8004128 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a3b      	ldr	r2, [pc, #236]	@ (80041f4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8004108:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800410e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004110:	431a      	orrs	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e05c      	b.n	80041e2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f042 0208 	orr.w	r2, r2, #8
 8004136:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800413c:	2240      	movs	r2, #64	@ 0x40
 800413e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004150:	689a      	ldr	r2, [r3, #8]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	430a      	orrs	r2, r1
 800415a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004160:	68b9      	ldr	r1, [r7, #8]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	3380      	adds	r3, #128	@ 0x80
 8004168:	461a      	mov	r2, r3
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	025b      	lsls	r3, r3, #9
 800416e:	089b      	lsrs	r3, r3, #2
 8004170:	f7fd fd22 	bl	8001bb8 <HAL_DMA_Start_IT>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d01a      	beq.n	80041b0 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 021a 	bic.w	r2, r2, #26
 8004188:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a19      	ldr	r2, [pc, #100]	@ (80041f4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8004190:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004196:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e018      	b.n	80041e2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80041b0:	f04f 33ff 	mov.w	r3, #4294967295
 80041b4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	025b      	lsls	r3, r3, #9
 80041ba:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80041bc:	2390      	movs	r3, #144	@ 0x90
 80041be:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80041c0:	2300      	movs	r3, #0
 80041c2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80041c4:	2300      	movs	r3, #0
 80041c6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80041c8:	2301      	movs	r3, #1
 80041ca:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f107 0210 	add.w	r2, r7, #16
 80041d4:	4611      	mov	r1, r2
 80041d6:	4618      	mov	r0, r3
 80041d8:	f001 fa64 	bl	80056a4 <SDMMC_ConfigData>

      return HAL_OK;
 80041dc:	2300      	movs	r3, #0
 80041de:	e000      	b.n	80041e2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 80041e0:	2302      	movs	r3, #2
  }
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3730      	adds	r7, #48	@ 0x30
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	08004a0d 	.word	0x08004a0d
 80041f0:	08004aa9 	.word	0x08004aa9
 80041f4:	004005ff 	.word	0x004005ff

080041f8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004204:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800420c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d008      	beq.n	8004226 <HAL_SD_IRQHandler+0x2e>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f003 0308 	and.w	r3, r3, #8
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 ffef 	bl	8005202 <SD_Read_IT>
 8004224:	e15a      	b.n	80044dc <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800422c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 808d 	beq.w	8004350 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800423e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	4b9a      	ldr	r3, [pc, #616]	@ (80044b4 <HAL_SD_IRQHandler+0x2bc>)
 800424c:	400b      	ands	r3, r1
 800424e:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 0201 	bic.w	r2, r2, #1
 800425e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f003 0308 	and.w	r3, r3, #8
 8004266:	2b00      	cmp	r3, #0
 8004268:	d039      	beq.n	80042de <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d104      	bne.n	800427e <HAL_SD_IRQHandler+0x86>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f003 0320 	and.w	r3, r3, #32
 800427a:	2b00      	cmp	r3, #0
 800427c:	d011      	beq.n	80042a2 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	f001 fae4 	bl	8005850 <SDMMC_CmdStopTransfer>
 8004288:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d008      	beq.n	80042a2 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	431a      	orrs	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 f921 	bl	80044e4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f240 523a 	movw	r2, #1338	@ 0x53a
 80042aa:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d104      	bne.n	80042ce <HAL_SD_IRQHandler+0xd6>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d003      	beq.n	80042d6 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f001 ff4c 	bl	800616c <HAL_SD_RxCpltCallback>
 80042d4:	e102      	b.n	80044dc <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f001 ff3e 	bl	8006158 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80042dc:	e0fe      	b.n	80044dc <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 80f9 	beq.w	80044dc <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f003 0320 	and.w	r3, r3, #32
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d011      	beq.n	8004318 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f001 faa9 	bl	8005850 <SDMMC_CmdStopTransfer>
 80042fe:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d008      	beq.n	8004318 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	431a      	orrs	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f8e6 	bl	80044e4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	f040 80dc 	bne.w	80044dc <HAL_SD_IRQHandler+0x2e4>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	f040 80d6 	bne.w	80044dc <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 0208 	bic.w	r2, r2, #8
 800433e:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f001 ff05 	bl	8006158 <HAL_SD_TxCpltCallback>
}
 800434e:	e0c5      	b.n	80044dc <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004356:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d008      	beq.n	8004370 <HAL_SD_IRQHandler+0x178>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f003 0308 	and.w	r3, r3, #8
 8004364:	2b00      	cmp	r3, #0
 8004366:	d003      	beq.n	8004370 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 ff9b 	bl	80052a4 <SD_Write_IT>
 800436e:	e0b5      	b.n	80044dc <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004376:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800437a:	2b00      	cmp	r3, #0
 800437c:	f000 80ae 	beq.w	80044dc <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d005      	beq.n	800439a <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004392:	f043 0202 	orr.w	r2, r3, #2
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043a0:	f003 0308 	and.w	r3, r3, #8
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d005      	beq.n	80043b4 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ac:	f043 0208 	orr.w	r2, r3, #8
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043ba:	f003 0320 	and.w	r3, r3, #32
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d005      	beq.n	80043ce <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043c6:	f043 0220 	orr.w	r2, r3, #32
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043d4:	f003 0310 	and.w	r3, r3, #16
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d005      	beq.n	80043e8 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043e0:	f043 0210 	orr.w	r2, r3, #16
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f240 523a 	movw	r2, #1338	@ 0x53a
 80043f0:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8004400:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4618      	mov	r0, r3
 8004408:	f001 fa22 	bl	8005850 <SDMMC_CmdStopTransfer>
 800440c:	4602      	mov	r2, r0
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004412:	431a      	orrs	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f003 0308 	and.w	r3, r3, #8
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00a      	beq.n	8004438 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f857 	bl	80044e4 <HAL_SD_ErrorCallback>
}
 8004436:	e051      	b.n	80044dc <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800443e:	2b00      	cmp	r3, #0
 8004440:	d04c      	beq.n	80044dc <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f003 0310 	and.w	r3, r3, #16
 8004448:	2b00      	cmp	r3, #0
 800444a:	d104      	bne.n	8004456 <HAL_SD_IRQHandler+0x25e>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f003 0320 	and.w	r3, r3, #32
 8004452:	2b00      	cmp	r3, #0
 8004454:	d011      	beq.n	800447a <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800445a:	4a17      	ldr	r2, [pc, #92]	@ (80044b8 <HAL_SD_IRQHandler+0x2c0>)
 800445c:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004462:	4618      	mov	r0, r3
 8004464:	f7fd fc08 	bl	8001c78 <HAL_DMA_Abort_IT>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d036      	beq.n	80044dc <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004472:	4618      	mov	r0, r3
 8004474:	f000 fb6a 	bl	8004b4c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004478:	e030      	b.n	80044dc <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f003 0301 	and.w	r3, r3, #1
 8004480:	2b00      	cmp	r3, #0
 8004482:	d104      	bne.n	800448e <HAL_SD_IRQHandler+0x296>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d018      	beq.n	80044c0 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004492:	4a0a      	ldr	r2, [pc, #40]	@ (80044bc <HAL_SD_IRQHandler+0x2c4>)
 8004494:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800449a:	4618      	mov	r0, r3
 800449c:	f7fd fbec 	bl	8001c78 <HAL_DMA_Abort_IT>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d01a      	beq.n	80044dc <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 fb85 	bl	8004bba <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80044b0:	e014      	b.n	80044dc <HAL_SD_IRQHandler+0x2e4>
 80044b2:	bf00      	nop
 80044b4:	ffff3ec5 	.word	0xffff3ec5
 80044b8:	08004b4d 	.word	0x08004b4d
 80044bc:	08004bbb 	.word	0x08004bbb
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f001 fe35 	bl	8006144 <HAL_SD_AbortCallback>
}
 80044da:	e7ff      	b.n	80044dc <HAL_SD_IRQHandler+0x2e4>
 80044dc:	bf00      	nop
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004506:	0f9b      	lsrs	r3, r3, #30
 8004508:	b2da      	uxtb	r2, r3
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004512:	0e9b      	lsrs	r3, r3, #26
 8004514:	b2db      	uxtb	r3, r3
 8004516:	f003 030f 	and.w	r3, r3, #15
 800451a:	b2da      	uxtb	r2, r3
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004524:	0e1b      	lsrs	r3, r3, #24
 8004526:	b2db      	uxtb	r3, r3
 8004528:	f003 0303 	and.w	r3, r3, #3
 800452c:	b2da      	uxtb	r2, r3
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004536:	0c1b      	lsrs	r3, r3, #16
 8004538:	b2da      	uxtb	r2, r3
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004542:	0a1b      	lsrs	r3, r3, #8
 8004544:	b2da      	uxtb	r2, r3
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800454e:	b2da      	uxtb	r2, r3
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004558:	0d1b      	lsrs	r3, r3, #20
 800455a:	b29a      	uxth	r2, r3
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004564:	0c1b      	lsrs	r3, r3, #16
 8004566:	b2db      	uxtb	r3, r3
 8004568:	f003 030f 	and.w	r3, r3, #15
 800456c:	b2da      	uxtb	r2, r3
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004576:	0bdb      	lsrs	r3, r3, #15
 8004578:	b2db      	uxtb	r3, r3
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	b2da      	uxtb	r2, r3
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004588:	0b9b      	lsrs	r3, r3, #14
 800458a:	b2db      	uxtb	r3, r3
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	b2da      	uxtb	r2, r3
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800459a:	0b5b      	lsrs	r3, r3, #13
 800459c:	b2db      	uxtb	r3, r3
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	b2da      	uxtb	r2, r3
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045ac:	0b1b      	lsrs	r3, r3, #12
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2200      	movs	r2, #0
 80045be:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d163      	bne.n	8004690 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045cc:	009a      	lsls	r2, r3, #2
 80045ce:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80045d2:	4013      	ands	r3, r2
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80045d8:	0f92      	lsrs	r2, r2, #30
 80045da:	431a      	orrs	r2, r3
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045e4:	0edb      	lsrs	r3, r3, #27
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	f003 0307 	and.w	r3, r3, #7
 80045ec:	b2da      	uxtb	r2, r3
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045f6:	0e1b      	lsrs	r3, r3, #24
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	f003 0307 	and.w	r3, r3, #7
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004608:	0d5b      	lsrs	r3, r3, #21
 800460a:	b2db      	uxtb	r3, r3
 800460c:	f003 0307 	and.w	r3, r3, #7
 8004610:	b2da      	uxtb	r2, r3
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800461a:	0c9b      	lsrs	r3, r3, #18
 800461c:	b2db      	uxtb	r3, r3
 800461e:	f003 0307 	and.w	r3, r3, #7
 8004622:	b2da      	uxtb	r2, r3
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800462c:	0bdb      	lsrs	r3, r3, #15
 800462e:	b2db      	uxtb	r3, r3
 8004630:	f003 0307 	and.w	r3, r3, #7
 8004634:	b2da      	uxtb	r2, r3
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	1c5a      	adds	r2, r3, #1
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	7e1b      	ldrb	r3, [r3, #24]
 8004648:	b2db      	uxtb	r3, r3
 800464a:	f003 0307 	and.w	r3, r3, #7
 800464e:	3302      	adds	r3, #2
 8004650:	2201      	movs	r2, #1
 8004652:	fa02 f303 	lsl.w	r3, r2, r3
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800465a:	fb03 f202 	mul.w	r2, r3, r2
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	7a1b      	ldrb	r3, [r3, #8]
 8004666:	b2db      	uxtb	r3, r3
 8004668:	f003 030f 	and.w	r3, r3, #15
 800466c:	2201      	movs	r2, #1
 800466e:	409a      	lsls	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800467c:	0a52      	lsrs	r2, r2, #9
 800467e:	fb03 f202 	mul.w	r2, r3, r2
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800468c:	661a      	str	r2, [r3, #96]	@ 0x60
 800468e:	e031      	b.n	80046f4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004694:	2b01      	cmp	r3, #1
 8004696:	d11d      	bne.n	80046d4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800469c:	041b      	lsls	r3, r3, #16
 800469e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046a6:	0c1b      	lsrs	r3, r3, #16
 80046a8:	431a      	orrs	r2, r3
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	3301      	adds	r3, #1
 80046b4:	029a      	lsls	r2, r3, #10
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046c8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	661a      	str	r2, [r3, #96]	@ 0x60
 80046d2:	e00f      	b.n	80046f4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a58      	ldr	r2, [pc, #352]	@ (800483c <HAL_SD_GetCardCSD+0x344>)
 80046da:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e09d      	b.n	8004830 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046f8:	0b9b      	lsrs	r3, r3, #14
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	b2da      	uxtb	r2, r3
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800470a:	09db      	lsrs	r3, r3, #7
 800470c:	b2db      	uxtb	r3, r3
 800470e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004712:	b2da      	uxtb	r2, r3
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800471c:	b2db      	uxtb	r3, r3
 800471e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004722:	b2da      	uxtb	r2, r3
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800472c:	0fdb      	lsrs	r3, r3, #31
 800472e:	b2da      	uxtb	r2, r3
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004738:	0f5b      	lsrs	r3, r3, #29
 800473a:	b2db      	uxtb	r3, r3
 800473c:	f003 0303 	and.w	r3, r3, #3
 8004740:	b2da      	uxtb	r2, r3
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800474a:	0e9b      	lsrs	r3, r3, #26
 800474c:	b2db      	uxtb	r3, r3
 800474e:	f003 0307 	and.w	r3, r3, #7
 8004752:	b2da      	uxtb	r2, r3
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800475c:	0d9b      	lsrs	r3, r3, #22
 800475e:	b2db      	uxtb	r3, r3
 8004760:	f003 030f 	and.w	r3, r3, #15
 8004764:	b2da      	uxtb	r2, r3
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800476e:	0d5b      	lsrs	r3, r3, #21
 8004770:	b2db      	uxtb	r3, r3
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	b2da      	uxtb	r2, r3
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800478a:	0c1b      	lsrs	r3, r3, #16
 800478c:	b2db      	uxtb	r3, r3
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	b2da      	uxtb	r2, r3
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800479e:	0bdb      	lsrs	r3, r3, #15
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	b2da      	uxtb	r2, r3
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047b2:	0b9b      	lsrs	r3, r3, #14
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	b2da      	uxtb	r2, r3
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047c6:	0b5b      	lsrs	r3, r3, #13
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	b2da      	uxtb	r2, r3
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047da:	0b1b      	lsrs	r3, r3, #12
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ee:	0a9b      	lsrs	r3, r3, #10
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	f003 0303 	and.w	r3, r3, #3
 80047f6:	b2da      	uxtb	r2, r3
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004802:	0a1b      	lsrs	r3, r3, #8
 8004804:	b2db      	uxtb	r3, r3
 8004806:	f003 0303 	and.w	r3, r3, #3
 800480a:	b2da      	uxtb	r2, r3
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004816:	085b      	lsrs	r3, r3, #1
 8004818:	b2db      	uxtb	r3, r3
 800481a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800481e:	b2da      	uxtb	r2, r3
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr
 800483c:	004005ff 	.word	0x004005ff

08004840 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004898:	b5b0      	push	{r4, r5, r7, lr}
 800489a:	b08e      	sub	sp, #56	@ 0x38
 800489c:	af04      	add	r7, sp, #16
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80048a2:	2300      	movs	r3, #0
 80048a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2203      	movs	r2, #3
 80048ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b4:	2b03      	cmp	r3, #3
 80048b6:	d02e      	beq.n	8004916 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048be:	d106      	bne.n	80048ce <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	639a      	str	r2, [r3, #56]	@ 0x38
 80048cc:	e029      	b.n	8004922 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048d4:	d10a      	bne.n	80048ec <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 fb2a 	bl	8004f30 <SD_WideBus_Enable>
 80048dc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048e2:	6a3b      	ldr	r3, [r7, #32]
 80048e4:	431a      	orrs	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	639a      	str	r2, [r3, #56]	@ 0x38
 80048ea:	e01a      	b.n	8004922 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10a      	bne.n	8004908 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 fb67 	bl	8004fc6 <SD_WideBus_Disable>
 80048f8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048fe:	6a3b      	ldr	r3, [r7, #32]
 8004900:	431a      	orrs	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	639a      	str	r2, [r3, #56]	@ 0x38
 8004906:	e00c      	b.n	8004922 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800490c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	639a      	str	r2, [r3, #56]	@ 0x38
 8004914:	e005      	b.n	8004922 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800491a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00b      	beq.n	8004942 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a26      	ldr	r2, [pc, #152]	@ (80049c8 <HAL_SD_ConfigWideBusOperation+0x130>)
 8004930:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004940:	e01f      	b.n	8004982 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681d      	ldr	r5, [r3, #0]
 8004968:	466c      	mov	r4, sp
 800496a:	f107 0314 	add.w	r3, r7, #20
 800496e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004972:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004976:	f107 0308 	add.w	r3, r7, #8
 800497a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800497c:	4628      	mov	r0, r5
 800497e:	f000 fde1 	bl	8005544 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800498a:	4618      	mov	r0, r3
 800498c:	f000 feb6 	bl	80056fc <SDMMC_CmdBlockLength>
 8004990:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004992:	6a3b      	ldr	r3, [r7, #32]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00c      	beq.n	80049b2 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a0a      	ldr	r2, [pc, #40]	@ (80049c8 <HAL_SD_ConfigWideBusOperation+0x130>)
 800499e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049a4:	6a3b      	ldr	r3, [r7, #32]
 80049a6:	431a      	orrs	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 80049ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3728      	adds	r7, #40	@ 0x28
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bdb0      	pop	{r4, r5, r7, pc}
 80049c6:	bf00      	nop
 80049c8:	004005ff 	.word	0x004005ff

080049cc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b086      	sub	sp, #24
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80049d4:	2300      	movs	r3, #0
 80049d6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80049d8:	f107 030c 	add.w	r3, r7, #12
 80049dc:	4619      	mov	r1, r3
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 fa7e 	bl	8004ee0 <SD_SendStatus>
 80049e4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d005      	beq.n	80049f8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	431a      	orrs	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	0a5b      	lsrs	r3, r3, #9
 80049fc:	f003 030f 	and.w	r3, r3, #15
 8004a00:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004a02:	693b      	ldr	r3, [r7, #16]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3718      	adds	r7, #24
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a18:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a28:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004a2a:	bf00      	nop
 8004a2c:	3714      	adds	r7, #20
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr

08004a36 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b084      	sub	sp, #16
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a42:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a48:	2b82      	cmp	r3, #130	@ 0x82
 8004a4a:	d111      	bne.n	8004a70 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4618      	mov	r0, r3
 8004a52:	f000 fefd 	bl	8005850 <SDMMC_CmdStopTransfer>
 8004a56:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d008      	beq.n	8004a70 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	431a      	orrs	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f7ff fd3a 	bl	80044e4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f022 0208 	bic.w	r2, r2, #8
 8004a7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004a88:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f001 fb67 	bl	800616c <HAL_SD_RxCpltCallback>
#endif
}
 8004a9e:	bf00      	nop
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
	...

08004aa8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ab4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7fd fa8a 	bl	8001fd0 <HAL_DMA_GetError>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d03e      	beq.n	8004b40 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ac8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ace:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ad0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d002      	beq.n	8004ade <SD_DMAError+0x36>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d12d      	bne.n	8004b3a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a19      	ldr	r2, [pc, #100]	@ (8004b48 <SD_DMAError+0xa0>)
 8004ae4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8004af4:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004afa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8004b02:	6978      	ldr	r0, [r7, #20]
 8004b04:	f7ff ff62 	bl	80049cc <HAL_SD_GetCardState>
 8004b08:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	2b06      	cmp	r3, #6
 8004b0e:	d002      	beq.n	8004b16 <SD_DMAError+0x6e>
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	2b05      	cmp	r3, #5
 8004b14:	d10a      	bne.n	8004b2c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 fe98 	bl	8005850 <SDMMC_CmdStopTransfer>
 8004b20:	4602      	mov	r2, r0
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b26:	431a      	orrs	r2, r3
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	2200      	movs	r2, #0
 8004b38:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8004b3a:	6978      	ldr	r0, [r7, #20]
 8004b3c:	f7ff fcd2 	bl	80044e4 <HAL_SD_ErrorCallback>
#endif
  }
}
 8004b40:	bf00      	nop
 8004b42:	3718      	adds	r7, #24
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	004005ff 	.word	0x004005ff

08004b4c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b58:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004b62:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f7ff ff31 	bl	80049cc <HAL_SD_GetCardState>
 8004b6a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	2b06      	cmp	r3, #6
 8004b7e:	d002      	beq.n	8004b86 <SD_DMATxAbort+0x3a>
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	2b05      	cmp	r3, #5
 8004b84:	d10a      	bne.n	8004b9c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f000 fe60 	bl	8005850 <SDMMC_CmdStopTransfer>
 8004b90:	4602      	mov	r2, r0
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b96:	431a      	orrs	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d103      	bne.n	8004bac <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f001 facd 	bl	8006144 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004baa:	e002      	b.n	8004bb2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f7ff fc99 	bl	80044e4 <HAL_SD_ErrorCallback>
}
 8004bb2:	bf00      	nop
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b084      	sub	sp, #16
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bc6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004bd0:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f7ff fefa 	bl	80049cc <HAL_SD_GetCardState>
 8004bd8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	2b06      	cmp	r3, #6
 8004bec:	d002      	beq.n	8004bf4 <SD_DMARxAbort+0x3a>
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	2b05      	cmp	r3, #5
 8004bf2:	d10a      	bne.n	8004c0a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f000 fe29 	bl	8005850 <SDMMC_CmdStopTransfer>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c04:	431a      	orrs	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d103      	bne.n	8004c1a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f001 fa96 	bl	8006144 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004c18:	e002      	b.n	8004c20 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f7ff fc62 	bl	80044e4 <HAL_SD_ErrorCallback>
}
 8004c20:	bf00      	nop
 8004c22:	3710      	adds	r7, #16
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004c28:	b5b0      	push	{r4, r5, r7, lr}
 8004c2a:	b094      	sub	sp, #80	@ 0x50
 8004c2c:	af04      	add	r7, sp, #16
 8004c2e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004c30:	2301      	movs	r3, #1
 8004c32:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f000 fcdb 	bl	80055f4 <SDMMC_GetPowerState>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d102      	bne.n	8004c4a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004c44:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004c48:	e0b8      	b.n	8004dbc <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c4e:	2b03      	cmp	r3, #3
 8004c50:	d02f      	beq.n	8004cb2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 ff05 	bl	8005a66 <SDMMC_CmdSendCID>
 8004c5c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <SD_InitCard+0x40>
    {
      return errorstate;
 8004c64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c66:	e0a9      	b.n	8004dbc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 fd05 	bl	800567e <SDMMC_GetResponse>
 8004c74:	4602      	mov	r2, r0
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2104      	movs	r1, #4
 8004c80:	4618      	mov	r0, r3
 8004c82:	f000 fcfc 	bl	800567e <SDMMC_GetResponse>
 8004c86:	4602      	mov	r2, r0
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2108      	movs	r1, #8
 8004c92:	4618      	mov	r0, r3
 8004c94:	f000 fcf3 	bl	800567e <SDMMC_GetResponse>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	210c      	movs	r1, #12
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f000 fcea 	bl	800567e <SDMMC_GetResponse>
 8004caa:	4602      	mov	r2, r0
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cb6:	2b03      	cmp	r3, #3
 8004cb8:	d00d      	beq.n	8004cd6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f107 020e 	add.w	r2, r7, #14
 8004cc2:	4611      	mov	r1, r2
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f000 ff0b 	bl	8005ae0 <SDMMC_CmdSetRelAdd>
 8004cca:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ccc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <SD_InitCard+0xae>
    {
      return errorstate;
 8004cd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cd4:	e072      	b.n	8004dbc <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cda:	2b03      	cmp	r3, #3
 8004cdc:	d036      	beq.n	8004d4c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004cde:	89fb      	ldrh	r3, [r7, #14]
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cee:	041b      	lsls	r3, r3, #16
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4610      	mov	r0, r2
 8004cf4:	f000 fed5 	bl	8005aa2 <SDMMC_CmdSendCSD>
 8004cf8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d001      	beq.n	8004d04 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004d00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d02:	e05b      	b.n	8004dbc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2100      	movs	r1, #0
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f000 fcb7 	bl	800567e <SDMMC_GetResponse>
 8004d10:	4602      	mov	r2, r0
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2104      	movs	r1, #4
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f000 fcae 	bl	800567e <SDMMC_GetResponse>
 8004d22:	4602      	mov	r2, r0
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2108      	movs	r1, #8
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 fca5 	bl	800567e <SDMMC_GetResponse>
 8004d34:	4602      	mov	r2, r0
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	210c      	movs	r1, #12
 8004d40:	4618      	mov	r0, r3
 8004d42:	f000 fc9c 	bl	800567e <SDMMC_GetResponse>
 8004d46:	4602      	mov	r2, r0
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2104      	movs	r1, #4
 8004d52:	4618      	mov	r0, r3
 8004d54:	f000 fc93 	bl	800567e <SDMMC_GetResponse>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	0d1a      	lsrs	r2, r3, #20
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004d60:	f107 0310 	add.w	r3, r7, #16
 8004d64:	4619      	mov	r1, r3
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f7ff fbc6 	bl	80044f8 <HAL_SD_GetCardCSD>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d002      	beq.n	8004d78 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004d72:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004d76:	e021      	b.n	8004dbc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6819      	ldr	r1, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d80:	041b      	lsls	r3, r3, #16
 8004d82:	2200      	movs	r2, #0
 8004d84:	461c      	mov	r4, r3
 8004d86:	4615      	mov	r5, r2
 8004d88:	4622      	mov	r2, r4
 8004d8a:	462b      	mov	r3, r5
 8004d8c:	4608      	mov	r0, r1
 8004d8e:	f000 fd81 	bl	8005894 <SDMMC_CmdSelDesel>
 8004d92:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <SD_InitCard+0x176>
  {
    return errorstate;
 8004d9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d9c:	e00e      	b.n	8004dbc <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681d      	ldr	r5, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	466c      	mov	r4, sp
 8004da6:	f103 0210 	add.w	r2, r3, #16
 8004daa:	ca07      	ldmia	r2, {r0, r1, r2}
 8004dac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004db0:	3304      	adds	r3, #4
 8004db2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004db4:	4628      	mov	r0, r5
 8004db6:	f000 fbc5 	bl	8005544 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3740      	adds	r7, #64	@ 0x40
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bdb0      	pop	{r4, r5, r7, pc}

08004dc4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	617b      	str	r3, [r7, #20]
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f000 fd7c 	bl	80058da <SDMMC_CmdGoIdleState>
 8004de2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <SD_PowerON+0x2a>
  {
    return errorstate;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	e072      	b.n	8004ed4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 fd8f 	bl	8005916 <SDMMC_CmdOperCond>
 8004df8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00d      	beq.n	8004e1c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f000 fd65 	bl	80058da <SDMMC_CmdGoIdleState>
 8004e10:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d004      	beq.n	8004e22 <SD_PowerON+0x5e>
    {
      return errorstate;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	e05b      	b.n	8004ed4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d137      	bne.n	8004e9a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2100      	movs	r1, #0
 8004e30:	4618      	mov	r0, r3
 8004e32:	f000 fd8f 	bl	8005954 <SDMMC_CmdAppCommand>
 8004e36:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d02d      	beq.n	8004e9a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004e3e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004e42:	e047      	b.n	8004ed4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2100      	movs	r1, #0
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f000 fd82 	bl	8005954 <SDMMC_CmdAppCommand>
 8004e50:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d001      	beq.n	8004e5c <SD_PowerON+0x98>
    {
      return errorstate;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	e03b      	b.n	8004ed4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	491e      	ldr	r1, [pc, #120]	@ (8004edc <SD_PowerON+0x118>)
 8004e62:	4618      	mov	r0, r3
 8004e64:	f000 fd98 	bl	8005998 <SDMMC_CmdAppOperCommand>
 8004e68:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d002      	beq.n	8004e76 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004e70:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004e74:	e02e      	b.n	8004ed4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f000 fbfe 	bl	800567e <SDMMC_GetResponse>
 8004e82:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	0fdb      	lsrs	r3, r3, #31
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d101      	bne.n	8004e90 <SD_PowerON+0xcc>
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e000      	b.n	8004e92 <SD_PowerON+0xce>
 8004e90:	2300      	movs	r3, #0
 8004e92:	613b      	str	r3, [r7, #16]

    count++;
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	3301      	adds	r3, #1
 8004e98:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d802      	bhi.n	8004eaa <SD_PowerON+0xe6>
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d0cc      	beq.n	8004e44 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d902      	bls.n	8004eba <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004eb4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004eb8:	e00c      	b.n	8004ed4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d003      	beq.n	8004ecc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	645a      	str	r2, [r3, #68]	@ 0x44
 8004eca:	e002      	b.n	8004ed2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3718      	adds	r7, #24
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	c1100000 	.word	0xc1100000

08004ee0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d102      	bne.n	8004ef6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004ef0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004ef4:	e018      	b.n	8004f28 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004efe:	041b      	lsls	r3, r3, #16
 8004f00:	4619      	mov	r1, r3
 8004f02:	4610      	mov	r0, r2
 8004f04:	f000 fe0d 	bl	8005b22 <SDMMC_CmdSendStatus>
 8004f08:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d001      	beq.n	8004f14 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	e009      	b.n	8004f28 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2100      	movs	r1, #0
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 fbaf 	bl	800567e <SDMMC_GetResponse>
 8004f20:	4602      	mov	r2, r0
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3710      	adds	r7, #16
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004f38:	2300      	movs	r3, #0
 8004f3a:	60fb      	str	r3, [r7, #12]
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2100      	movs	r1, #0
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 fb99 	bl	800567e <SDMMC_GetResponse>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f56:	d102      	bne.n	8004f5e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004f58:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004f5c:	e02f      	b.n	8004fbe <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004f5e:	f107 030c 	add.w	r3, r7, #12
 8004f62:	4619      	mov	r1, r3
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 f879 	bl	800505c <SD_FindSCR>
 8004f6a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d001      	beq.n	8004f76 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	e023      	b.n	8004fbe <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d01c      	beq.n	8004fba <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f88:	041b      	lsls	r3, r3, #16
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	4610      	mov	r0, r2
 8004f8e:	f000 fce1 	bl	8005954 <SDMMC_CmdAppCommand>
 8004f92:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d001      	beq.n	8004f9e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	e00f      	b.n	8004fbe <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2102      	movs	r1, #2
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f000 fd1b 	bl	80059e0 <SDMMC_CmdBusWidth>
 8004faa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d001      	beq.n	8004fb6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	e003      	b.n	8004fbe <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	e001      	b.n	8004fbe <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004fba:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3718      	adds	r7, #24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b086      	sub	sp, #24
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004fce:	2300      	movs	r3, #0
 8004fd0:	60fb      	str	r3, [r7, #12]
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2100      	movs	r1, #0
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f000 fb4e 	bl	800567e <SDMMC_GetResponse>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fe8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004fec:	d102      	bne.n	8004ff4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004fee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004ff2:	e02f      	b.n	8005054 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004ff4:	f107 030c 	add.w	r3, r7, #12
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f82e 	bl	800505c <SD_FindSCR>
 8005000:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d001      	beq.n	800500c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	e023      	b.n	8005054 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d01c      	beq.n	8005050 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800501e:	041b      	lsls	r3, r3, #16
 8005020:	4619      	mov	r1, r3
 8005022:	4610      	mov	r0, r2
 8005024:	f000 fc96 	bl	8005954 <SDMMC_CmdAppCommand>
 8005028:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d001      	beq.n	8005034 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	e00f      	b.n	8005054 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2100      	movs	r1, #0
 800503a:	4618      	mov	r0, r3
 800503c:	f000 fcd0 	bl	80059e0 <SDMMC_CmdBusWidth>
 8005040:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d001      	beq.n	800504c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	e003      	b.n	8005054 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800504c:	2300      	movs	r3, #0
 800504e:	e001      	b.n	8005054 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005050:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8005054:	4618      	mov	r0, r3
 8005056:	3718      	adds	r7, #24
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800505c:	b590      	push	{r4, r7, lr}
 800505e:	b08f      	sub	sp, #60	@ 0x3c
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005066:	f7fc fbb7 	bl	80017d8 <HAL_GetTick>
 800506a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800506c:	2300      	movs	r3, #0
 800506e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005070:	2300      	movs	r3, #0
 8005072:	60bb      	str	r3, [r7, #8]
 8005074:	2300      	movs	r3, #0
 8005076:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2108      	movs	r1, #8
 8005082:	4618      	mov	r0, r3
 8005084:	f000 fb3a 	bl	80056fc <SDMMC_CmdBlockLength>
 8005088:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800508a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800508c:	2b00      	cmp	r3, #0
 800508e:	d001      	beq.n	8005094 <SD_FindSCR+0x38>
  {
    return errorstate;
 8005090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005092:	e0b2      	b.n	80051fa <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800509c:	041b      	lsls	r3, r3, #16
 800509e:	4619      	mov	r1, r3
 80050a0:	4610      	mov	r0, r2
 80050a2:	f000 fc57 	bl	8005954 <SDMMC_CmdAppCommand>
 80050a6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80050a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d001      	beq.n	80050b2 <SD_FindSCR+0x56>
  {
    return errorstate;
 80050ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b0:	e0a3      	b.n	80051fa <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80050b2:	f04f 33ff 	mov.w	r3, #4294967295
 80050b6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80050b8:	2308      	movs	r3, #8
 80050ba:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80050bc:	2330      	movs	r3, #48	@ 0x30
 80050be:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80050c0:	2302      	movs	r3, #2
 80050c2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80050c4:	2300      	movs	r3, #0
 80050c6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80050c8:	2301      	movs	r3, #1
 80050ca:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f107 0210 	add.w	r2, r7, #16
 80050d4:	4611      	mov	r1, r2
 80050d6:	4618      	mov	r0, r3
 80050d8:	f000 fae4 	bl	80056a4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4618      	mov	r0, r3
 80050e2:	f000 fc9f 	bl	8005a24 <SDMMC_CmdSendSCR>
 80050e6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80050e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d02a      	beq.n	8005144 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80050ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050f0:	e083      	b.n	80051fa <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00f      	beq.n	8005120 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6819      	ldr	r1, [r3, #0]
 8005104:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	f107 0208 	add.w	r2, r7, #8
 800510c:	18d4      	adds	r4, r2, r3
 800510e:	4608      	mov	r0, r1
 8005110:	f000 fa44 	bl	800559c <SDMMC_ReadFIFO>
 8005114:	4603      	mov	r3, r0
 8005116:	6023      	str	r3, [r4, #0]
      index++;
 8005118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800511a:	3301      	adds	r3, #1
 800511c:	637b      	str	r3, [r7, #52]	@ 0x34
 800511e:	e006      	b.n	800512e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005126:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d012      	beq.n	8005154 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800512e:	f7fc fb53 	bl	80017d8 <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800513c:	d102      	bne.n	8005144 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800513e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005142:	e05a      	b.n	80051fa <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800514a:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 800514e:	2b00      	cmp	r3, #0
 8005150:	d0cf      	beq.n	80050f2 <SD_FindSCR+0x96>
 8005152:	e000      	b.n	8005156 <SD_FindSCR+0xfa>
      break;
 8005154:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800515c:	f003 0308 	and.w	r3, r3, #8
 8005160:	2b00      	cmp	r3, #0
 8005162:	d005      	beq.n	8005170 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2208      	movs	r2, #8
 800516a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800516c:	2308      	movs	r3, #8
 800516e:	e044      	b.n	80051fa <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005176:	f003 0302 	and.w	r3, r3, #2
 800517a:	2b00      	cmp	r3, #0
 800517c:	d005      	beq.n	800518a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2202      	movs	r2, #2
 8005184:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005186:	2302      	movs	r3, #2
 8005188:	e037      	b.n	80051fa <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005190:	f003 0320 	and.w	r3, r3, #32
 8005194:	2b00      	cmp	r3, #0
 8005196:	d005      	beq.n	80051a4 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2220      	movs	r2, #32
 800519e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80051a0:	2320      	movs	r3, #32
 80051a2:	e02a      	b.n	80051fa <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f240 523a 	movw	r2, #1338	@ 0x53a
 80051ac:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	061a      	lsls	r2, r3, #24
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	021b      	lsls	r3, r3, #8
 80051b6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80051ba:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	0a1b      	lsrs	r3, r3, #8
 80051c0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80051c4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	0e1b      	lsrs	r3, r3, #24
 80051ca:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80051cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ce:	601a      	str	r2, [r3, #0]
    scr++;
 80051d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051d2:	3304      	adds	r3, #4
 80051d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	061a      	lsls	r2, r3, #24
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	021b      	lsls	r3, r3, #8
 80051de:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80051e2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	0a1b      	lsrs	r3, r3, #8
 80051e8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80051ec:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	0e1b      	lsrs	r3, r3, #24
 80051f2:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80051f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051f6:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	373c      	adds	r7, #60	@ 0x3c
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd90      	pop	{r4, r7, pc}

08005202 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8005202:	b580      	push	{r7, lr}
 8005204:	b086      	sub	sp, #24
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800520e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005214:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d03f      	beq.n	800529c <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800521c:	2300      	movs	r3, #0
 800521e:	617b      	str	r3, [r7, #20]
 8005220:	e033      	b.n	800528a <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4618      	mov	r0, r3
 8005228:	f000 f9b8 	bl	800559c <SDMMC_ReadFIFO>
 800522c:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	b2da      	uxtb	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	3301      	adds	r3, #1
 800523a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	3b01      	subs	r3, #1
 8005240:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	0a1b      	lsrs	r3, r3, #8
 8005246:	b2da      	uxtb	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	3301      	adds	r3, #1
 8005250:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	3b01      	subs	r3, #1
 8005256:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	0c1b      	lsrs	r3, r3, #16
 800525c:	b2da      	uxtb	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	3301      	adds	r3, #1
 8005266:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	3b01      	subs	r3, #1
 800526c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	0e1b      	lsrs	r3, r3, #24
 8005272:	b2da      	uxtb	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	3301      	adds	r3, #1
 800527c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	3b01      	subs	r3, #1
 8005282:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	3301      	adds	r3, #1
 8005288:	617b      	str	r3, [r7, #20]
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	2b07      	cmp	r3, #7
 800528e:	d9c8      	bls.n	8005222 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 800529c:	bf00      	nop
 800529e:	3718      	adds	r7, #24
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d043      	beq.n	8005346 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80052be:	2300      	movs	r3, #0
 80052c0:	617b      	str	r3, [r7, #20]
 80052c2:	e037      	b.n	8005334 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	60bb      	str	r3, [r7, #8]
      tmp++;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	3301      	adds	r3, #1
 80052ce:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	3b01      	subs	r3, #1
 80052d4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	021a      	lsls	r2, r3, #8
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	4313      	orrs	r3, r2
 80052e0:	60bb      	str	r3, [r7, #8]
      tmp++;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	3301      	adds	r3, #1
 80052e6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	3b01      	subs	r3, #1
 80052ec:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	041a      	lsls	r2, r3, #16
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	60bb      	str	r3, [r7, #8]
      tmp++;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	3301      	adds	r3, #1
 80052fe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	3b01      	subs	r3, #1
 8005304:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	061a      	lsls	r2, r3, #24
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	4313      	orrs	r3, r2
 8005310:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	3301      	adds	r3, #1
 8005316:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	3b01      	subs	r3, #1
 800531c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f107 0208 	add.w	r2, r7, #8
 8005326:	4611      	mov	r1, r2
 8005328:	4618      	mov	r0, r3
 800532a:	f000 f944 	bl	80055b6 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	3301      	adds	r3, #1
 8005332:	617b      	str	r3, [r7, #20]
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	2b07      	cmp	r3, #7
 8005338:	d9c4      	bls.n	80052c4 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8005346:	bf00      	nop
 8005348:	3718      	adds	r7, #24
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800534e:	b580      	push	{r7, lr}
 8005350:	b082      	sub	sp, #8
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
 8005356:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e025      	b.n	80053ae <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d106      	bne.n	800537c <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7fc f94a 	bl	8001610 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2202      	movs	r2, #2
 8005380:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	3304      	adds	r3, #4
 800538c:	4619      	mov	r1, r3
 800538e:	4610      	mov	r0, r2
 8005390:	f000 f812 	bl	80053b8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6818      	ldr	r0, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	461a      	mov	r2, r3
 800539e:	6839      	ldr	r1, [r7, #0]
 80053a0:	f000 f866 	bl	8005470 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
	...

080053b8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d121      	bne.n	800540e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	4b27      	ldr	r3, [pc, #156]	@ (800546c <FMC_SDRAM_Init+0xb4>)
 80053d0:	4013      	ands	r3, r2
 80053d2:	683a      	ldr	r2, [r7, #0]
 80053d4:	6851      	ldr	r1, [r2, #4]
 80053d6:	683a      	ldr	r2, [r7, #0]
 80053d8:	6892      	ldr	r2, [r2, #8]
 80053da:	4311      	orrs	r1, r2
 80053dc:	683a      	ldr	r2, [r7, #0]
 80053de:	68d2      	ldr	r2, [r2, #12]
 80053e0:	4311      	orrs	r1, r2
 80053e2:	683a      	ldr	r2, [r7, #0]
 80053e4:	6912      	ldr	r2, [r2, #16]
 80053e6:	4311      	orrs	r1, r2
 80053e8:	683a      	ldr	r2, [r7, #0]
 80053ea:	6952      	ldr	r2, [r2, #20]
 80053ec:	4311      	orrs	r1, r2
 80053ee:	683a      	ldr	r2, [r7, #0]
 80053f0:	6992      	ldr	r2, [r2, #24]
 80053f2:	4311      	orrs	r1, r2
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	69d2      	ldr	r2, [r2, #28]
 80053f8:	4311      	orrs	r1, r2
 80053fa:	683a      	ldr	r2, [r7, #0]
 80053fc:	6a12      	ldr	r2, [r2, #32]
 80053fe:	4311      	orrs	r1, r2
 8005400:	683a      	ldr	r2, [r7, #0]
 8005402:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005404:	430a      	orrs	r2, r1
 8005406:	431a      	orrs	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	601a      	str	r2, [r3, #0]
 800540c:	e026      	b.n	800545c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	69d9      	ldr	r1, [r3, #28]
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	4319      	orrs	r1, r3
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005424:	430b      	orrs	r3, r1
 8005426:	431a      	orrs	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	4b0e      	ldr	r3, [pc, #56]	@ (800546c <FMC_SDRAM_Init+0xb4>)
 8005432:	4013      	ands	r3, r2
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	6851      	ldr	r1, [r2, #4]
 8005438:	683a      	ldr	r2, [r7, #0]
 800543a:	6892      	ldr	r2, [r2, #8]
 800543c:	4311      	orrs	r1, r2
 800543e:	683a      	ldr	r2, [r7, #0]
 8005440:	68d2      	ldr	r2, [r2, #12]
 8005442:	4311      	orrs	r1, r2
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	6912      	ldr	r2, [r2, #16]
 8005448:	4311      	orrs	r1, r2
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	6952      	ldr	r2, [r2, #20]
 800544e:	4311      	orrs	r1, r2
 8005450:	683a      	ldr	r2, [r7, #0]
 8005452:	6992      	ldr	r2, [r2, #24]
 8005454:	430a      	orrs	r2, r1
 8005456:	431a      	orrs	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	370c      	adds	r7, #12
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	ffff8000 	.word	0xffff8000

08005470 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d128      	bne.n	80054d4 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	1e59      	subs	r1, r3, #1
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	3b01      	subs	r3, #1
 8005496:	011b      	lsls	r3, r3, #4
 8005498:	4319      	orrs	r1, r3
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	3b01      	subs	r3, #1
 80054a0:	021b      	lsls	r3, r3, #8
 80054a2:	4319      	orrs	r1, r3
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	3b01      	subs	r3, #1
 80054aa:	031b      	lsls	r3, r3, #12
 80054ac:	4319      	orrs	r1, r3
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	3b01      	subs	r3, #1
 80054b4:	041b      	lsls	r3, r3, #16
 80054b6:	4319      	orrs	r1, r3
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	695b      	ldr	r3, [r3, #20]
 80054bc:	3b01      	subs	r3, #1
 80054be:	051b      	lsls	r3, r3, #20
 80054c0:	4319      	orrs	r1, r3
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	3b01      	subs	r3, #1
 80054c8:	061b      	lsls	r3, r3, #24
 80054ca:	430b      	orrs	r3, r1
 80054cc:	431a      	orrs	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	609a      	str	r2, [r3, #8]
 80054d2:	e02d      	b.n	8005530 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	689a      	ldr	r2, [r3, #8]
 80054d8:	4b19      	ldr	r3, [pc, #100]	@ (8005540 <FMC_SDRAM_Timing_Init+0xd0>)
 80054da:	4013      	ands	r3, r2
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	68d2      	ldr	r2, [r2, #12]
 80054e0:	3a01      	subs	r2, #1
 80054e2:	0311      	lsls	r1, r2, #12
 80054e4:	68ba      	ldr	r2, [r7, #8]
 80054e6:	6952      	ldr	r2, [r2, #20]
 80054e8:	3a01      	subs	r2, #1
 80054ea:	0512      	lsls	r2, r2, #20
 80054ec:	430a      	orrs	r2, r1
 80054ee:	431a      	orrs	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	1e59      	subs	r1, r3, #1
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	3b01      	subs	r3, #1
 8005508:	011b      	lsls	r3, r3, #4
 800550a:	4319      	orrs	r1, r3
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	3b01      	subs	r3, #1
 8005512:	021b      	lsls	r3, r3, #8
 8005514:	4319      	orrs	r1, r3
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	3b01      	subs	r3, #1
 800551c:	041b      	lsls	r3, r3, #16
 800551e:	4319      	orrs	r1, r3
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	3b01      	subs	r3, #1
 8005526:	061b      	lsls	r3, r3, #24
 8005528:	430b      	orrs	r3, r1
 800552a:	431a      	orrs	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3714      	adds	r7, #20
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	ff0f0fff 	.word	0xff0f0fff

08005544 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8005544:	b084      	sub	sp, #16
 8005546:	b480      	push	{r7}
 8005548:	b085      	sub	sp, #20
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
 800554e:	f107 001c 	add.w	r0, r7, #28
 8005552:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005556:	2300      	movs	r3, #0
 8005558:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800555a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800555c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800555e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8005562:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8005566:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800556a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800556c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800556e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	4313      	orrs	r3, r2
 8005574:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685a      	ldr	r2, [r3, #4]
 800557a:	4b07      	ldr	r3, [pc, #28]	@ (8005598 <SDMMC_Init+0x54>)
 800557c:	4013      	ands	r3, r2
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	431a      	orrs	r2, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3714      	adds	r7, #20
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	b004      	add	sp, #16
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	ffff8100 	.word	0xffff8100

0800559c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr

080055b6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 80055b6:	b480      	push	{r7}
 80055b8:	b083      	sub	sp, #12
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
 80055be:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2203      	movs	r2, #3
 80055e4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0303 	and.w	r3, r3, #3
}
 8005604:	4618      	mov	r0, r3
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800561a:	2300      	movs	r3, #0
 800561c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800562e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005634:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800563a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	4313      	orrs	r3, r2
 8005640:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68da      	ldr	r2, [r3, #12]
 8005646:	4b06      	ldr	r3, [pc, #24]	@ (8005660 <SDMMC_SendCommand+0x50>)
 8005648:	4013      	ands	r3, r2
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	431a      	orrs	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3714      	adds	r7, #20
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr
 8005660:	fffff000 	.word	0xfffff000

08005664 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	b2db      	uxtb	r3, r3
}
 8005672:	4618      	mov	r0, r3
 8005674:	370c      	adds	r7, #12
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800567e:	b480      	push	{r7}
 8005680:	b085      	sub	sp, #20
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
 8005686:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	3314      	adds	r3, #20
 800568c:	461a      	mov	r2, r3
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	4413      	add	r3, r2
 8005692:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
}  
 8005698:	4618      	mov	r0, r3
 800569a:	3714      	adds	r7, #20
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80056ae:	2300      	movs	r3, #0
 80056b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	685a      	ldr	r2, [r3, #4]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80056ca:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80056d0:	431a      	orrs	r2, r3
                       Data->DPSM);
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80056d6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	4313      	orrs	r3, r2
 80056dc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e2:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	431a      	orrs	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80056ee:	2300      	movs	r3, #0

}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3714      	adds	r7, #20
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b088      	sub	sp, #32
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800570a:	2310      	movs	r3, #16
 800570c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800570e:	2340      	movs	r3, #64	@ 0x40
 8005710:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005712:	2300      	movs	r3, #0
 8005714:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005716:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800571a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800571c:	f107 0308 	add.w	r3, r7, #8
 8005720:	4619      	mov	r1, r3
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7ff ff74 	bl	8005610 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8005728:	f241 3288 	movw	r2, #5000	@ 0x1388
 800572c:	2110      	movs	r1, #16
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 fa1a 	bl	8005b68 <SDMMC_GetCmdResp1>
 8005734:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005736:	69fb      	ldr	r3, [r7, #28]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3720      	adds	r7, #32
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b088      	sub	sp, #32
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800574e:	2311      	movs	r3, #17
 8005750:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005752:	2340      	movs	r3, #64	@ 0x40
 8005754:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005756:	2300      	movs	r3, #0
 8005758:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800575a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800575e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005760:	f107 0308 	add.w	r3, r7, #8
 8005764:	4619      	mov	r1, r3
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f7ff ff52 	bl	8005610 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800576c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005770:	2111      	movs	r1, #17
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f9f8 	bl	8005b68 <SDMMC_GetCmdResp1>
 8005778:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800577a:	69fb      	ldr	r3, [r7, #28]
}
 800577c:	4618      	mov	r0, r3
 800577e:	3720      	adds	r7, #32
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b088      	sub	sp, #32
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005792:	2312      	movs	r3, #18
 8005794:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005796:	2340      	movs	r3, #64	@ 0x40
 8005798:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800579a:	2300      	movs	r3, #0
 800579c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800579e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80057a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80057a4:	f107 0308 	add.w	r3, r7, #8
 80057a8:	4619      	mov	r1, r3
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f7ff ff30 	bl	8005610 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80057b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057b4:	2112      	movs	r1, #18
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f9d6 	bl	8005b68 <SDMMC_GetCmdResp1>
 80057bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057be:	69fb      	ldr	r3, [r7, #28]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3720      	adds	r7, #32
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b088      	sub	sp, #32
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80057d6:	2318      	movs	r3, #24
 80057d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80057da:	2340      	movs	r3, #64	@ 0x40
 80057dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80057de:	2300      	movs	r3, #0
 80057e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80057e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80057e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80057e8:	f107 0308 	add.w	r3, r7, #8
 80057ec:	4619      	mov	r1, r3
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f7ff ff0e 	bl	8005610 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80057f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057f8:	2118      	movs	r1, #24
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f9b4 	bl	8005b68 <SDMMC_GetCmdResp1>
 8005800:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005802:	69fb      	ldr	r3, [r7, #28]
}
 8005804:	4618      	mov	r0, r3
 8005806:	3720      	adds	r7, #32
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b088      	sub	sp, #32
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800581a:	2319      	movs	r3, #25
 800581c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800581e:	2340      	movs	r3, #64	@ 0x40
 8005820:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005822:	2300      	movs	r3, #0
 8005824:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005826:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800582a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800582c:	f107 0308 	add.w	r3, r7, #8
 8005830:	4619      	mov	r1, r3
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f7ff feec 	bl	8005610 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005838:	f241 3288 	movw	r2, #5000	@ 0x1388
 800583c:	2119      	movs	r1, #25
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f992 	bl	8005b68 <SDMMC_GetCmdResp1>
 8005844:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005846:	69fb      	ldr	r3, [r7, #28]
}
 8005848:	4618      	mov	r0, r3
 800584a:	3720      	adds	r7, #32
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b088      	sub	sp, #32
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005858:	2300      	movs	r3, #0
 800585a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800585c:	230c      	movs	r3, #12
 800585e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005860:	2340      	movs	r3, #64	@ 0x40
 8005862:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005864:	2300      	movs	r3, #0
 8005866:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005868:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800586c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800586e:	f107 0308 	add.w	r3, r7, #8
 8005872:	4619      	mov	r1, r3
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f7ff fecb 	bl	8005610 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800587a:	4a05      	ldr	r2, [pc, #20]	@ (8005890 <SDMMC_CmdStopTransfer+0x40>)
 800587c:	210c      	movs	r1, #12
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f972 	bl	8005b68 <SDMMC_GetCmdResp1>
 8005884:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005886:	69fb      	ldr	r3, [r7, #28]
}
 8005888:	4618      	mov	r0, r3
 800588a:	3720      	adds	r7, #32
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	05f5e100 	.word	0x05f5e100

08005894 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b08a      	sub	sp, #40	@ 0x28
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80058a4:	2307      	movs	r3, #7
 80058a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80058a8:	2340      	movs	r3, #64	@ 0x40
 80058aa:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80058ac:	2300      	movs	r3, #0
 80058ae:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80058b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80058b4:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80058b6:	f107 0310 	add.w	r3, r7, #16
 80058ba:	4619      	mov	r1, r3
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f7ff fea7 	bl	8005610 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80058c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058c6:	2107      	movs	r1, #7
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f000 f94d 	bl	8005b68 <SDMMC_GetCmdResp1>
 80058ce:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 80058d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3728      	adds	r7, #40	@ 0x28
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80058da:	b580      	push	{r7, lr}
 80058dc:	b088      	sub	sp, #32
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80058e2:	2300      	movs	r3, #0
 80058e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80058e6:	2300      	movs	r3, #0
 80058e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80058ea:	2300      	movs	r3, #0
 80058ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80058ee:	2300      	movs	r3, #0
 80058f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80058f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80058f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80058f8:	f107 0308 	add.w	r3, r7, #8
 80058fc:	4619      	mov	r1, r3
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7ff fe86 	bl	8005610 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 fb67 	bl	8005fd8 <SDMMC_GetCmdError>
 800590a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800590c:	69fb      	ldr	r3, [r7, #28]
}
 800590e:	4618      	mov	r0, r3
 8005910:	3720      	adds	r7, #32
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8005916:	b580      	push	{r7, lr}
 8005918:	b088      	sub	sp, #32
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800591e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8005922:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005924:	2308      	movs	r3, #8
 8005926:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005928:	2340      	movs	r3, #64	@ 0x40
 800592a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800592c:	2300      	movs	r3, #0
 800592e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005930:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005934:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005936:	f107 0308 	add.w	r3, r7, #8
 800593a:	4619      	mov	r1, r3
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f7ff fe67 	bl	8005610 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 fafa 	bl	8005f3c <SDMMC_GetCmdResp7>
 8005948:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800594a:	69fb      	ldr	r3, [r7, #28]
}
 800594c:	4618      	mov	r0, r3
 800594e:	3720      	adds	r7, #32
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b088      	sub	sp, #32
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005962:	2337      	movs	r3, #55	@ 0x37
 8005964:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005966:	2340      	movs	r3, #64	@ 0x40
 8005968:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800596a:	2300      	movs	r3, #0
 800596c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800596e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005972:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005974:	f107 0308 	add.w	r3, r7, #8
 8005978:	4619      	mov	r1, r3
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f7ff fe48 	bl	8005610 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8005980:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005984:	2137      	movs	r1, #55	@ 0x37
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f8ee 	bl	8005b68 <SDMMC_GetCmdResp1>
 800598c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800598e:	69fb      	ldr	r3, [r7, #28]
}
 8005990:	4618      	mov	r0, r3
 8005992:	3720      	adds	r7, #32
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b088      	sub	sp, #32
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80059a2:	683a      	ldr	r2, [r7, #0]
 80059a4:	4b0d      	ldr	r3, [pc, #52]	@ (80059dc <SDMMC_CmdAppOperCommand+0x44>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80059aa:	2329      	movs	r3, #41	@ 0x29
 80059ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80059ae:	2340      	movs	r3, #64	@ 0x40
 80059b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80059b2:	2300      	movs	r3, #0
 80059b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80059b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80059ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80059bc:	f107 0308 	add.w	r3, r7, #8
 80059c0:	4619      	mov	r1, r3
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f7ff fe24 	bl	8005610 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 fa03 	bl	8005dd4 <SDMMC_GetCmdResp3>
 80059ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80059d0:	69fb      	ldr	r3, [r7, #28]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3720      	adds	r7, #32
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	80100000 	.word	0x80100000

080059e0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b088      	sub	sp, #32
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80059ee:	2306      	movs	r3, #6
 80059f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80059f2:	2340      	movs	r3, #64	@ 0x40
 80059f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80059f6:	2300      	movs	r3, #0
 80059f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80059fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80059fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005a00:	f107 0308 	add.w	r3, r7, #8
 8005a04:	4619      	mov	r1, r3
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7ff fe02 	bl	8005610 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8005a0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a10:	2106      	movs	r1, #6
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f8a8 	bl	8005b68 <SDMMC_GetCmdResp1>
 8005a18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a1a:	69fb      	ldr	r3, [r7, #28]
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3720      	adds	r7, #32
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b088      	sub	sp, #32
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005a30:	2333      	movs	r3, #51	@ 0x33
 8005a32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005a34:	2340      	movs	r3, #64	@ 0x40
 8005a36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005a3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a40:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005a42:	f107 0308 	add.w	r3, r7, #8
 8005a46:	4619      	mov	r1, r3
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f7ff fde1 	bl	8005610 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8005a4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a52:	2133      	movs	r1, #51	@ 0x33
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 f887 	bl	8005b68 <SDMMC_GetCmdResp1>
 8005a5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a5c:	69fb      	ldr	r3, [r7, #28]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3720      	adds	r7, #32
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b088      	sub	sp, #32
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005a72:	2302      	movs	r3, #2
 8005a74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005a76:	23c0      	movs	r3, #192	@ 0xc0
 8005a78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005a7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005a84:	f107 0308 	add.w	r3, r7, #8
 8005a88:	4619      	mov	r1, r3
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7ff fdc0 	bl	8005610 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f957 	bl	8005d44 <SDMMC_GetCmdResp2>
 8005a96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a98:	69fb      	ldr	r3, [r7, #28]
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3720      	adds	r7, #32
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b088      	sub	sp, #32
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
 8005aaa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005ab0:	2309      	movs	r3, #9
 8005ab2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005ab4:	23c0      	movs	r3, #192	@ 0xc0
 8005ab6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005abc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005ac0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005ac2:	f107 0308 	add.w	r3, r7, #8
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f7ff fda1 	bl	8005610 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 f938 	bl	8005d44 <SDMMC_GetCmdResp2>
 8005ad4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ad6:	69fb      	ldr	r3, [r7, #28]
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3720      	adds	r7, #32
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b088      	sub	sp, #32
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005aea:	2300      	movs	r3, #0
 8005aec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005aee:	2303      	movs	r3, #3
 8005af0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005af2:	2340      	movs	r3, #64	@ 0x40
 8005af4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005af6:	2300      	movs	r3, #0
 8005af8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005afa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005afe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005b00:	f107 0308 	add.w	r3, r7, #8
 8005b04:	4619      	mov	r1, r3
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f7ff fd82 	bl	8005610 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005b0c:	683a      	ldr	r2, [r7, #0]
 8005b0e:	2103      	movs	r1, #3
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 f99d 	bl	8005e50 <SDMMC_GetCmdResp6>
 8005b16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b18:	69fb      	ldr	r3, [r7, #28]
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3720      	adds	r7, #32
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b088      	sub	sp, #32
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
 8005b2a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005b30:	230d      	movs	r3, #13
 8005b32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005b34:	2340      	movs	r3, #64	@ 0x40
 8005b36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005b3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b40:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005b42:	f107 0308 	add.w	r3, r7, #8
 8005b46:	4619      	mov	r1, r3
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f7ff fd61 	bl	8005610 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8005b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b52:	210d      	movs	r1, #13
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 f807 	bl	8005b68 <SDMMC_GetCmdResp1>
 8005b5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b5c:	69fb      	ldr	r3, [r7, #28]
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3720      	adds	r7, #32
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
	...

08005b68 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b088      	sub	sp, #32
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	460b      	mov	r3, r1
 8005b72:	607a      	str	r2, [r7, #4]
 8005b74:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005b76:	4b70      	ldr	r3, [pc, #448]	@ (8005d38 <SDMMC_GetCmdResp1+0x1d0>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a70      	ldr	r2, [pc, #448]	@ (8005d3c <SDMMC_GetCmdResp1+0x1d4>)
 8005b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b80:	0a5a      	lsrs	r2, r3, #9
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	fb02 f303 	mul.w	r3, r2, r3
 8005b88:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	1e5a      	subs	r2, r3, #1
 8005b8e:	61fa      	str	r2, [r7, #28]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d102      	bne.n	8005b9a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005b94:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005b98:	e0c9      	b.n	8005d2e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b9e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d0ef      	beq.n	8005b8a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1ea      	bne.n	8005b8a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bb8:	f003 0304 	and.w	r3, r3, #4
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d004      	beq.n	8005bca <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2204      	movs	r2, #4
 8005bc4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005bc6:	2304      	movs	r3, #4
 8005bc8:	e0b1      	b.n	8005d2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d004      	beq.n	8005be0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e0a6      	b.n	8005d2e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	22c5      	movs	r2, #197	@ 0xc5
 8005be4:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	f7ff fd3c 	bl	8005664 <SDMMC_GetCommandResponse>
 8005bec:	4603      	mov	r3, r0
 8005bee:	461a      	mov	r2, r3
 8005bf0:	7afb      	ldrb	r3, [r7, #11]
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d001      	beq.n	8005bfa <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e099      	b.n	8005d2e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005bfa:	2100      	movs	r1, #0
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f7ff fd3e 	bl	800567e <SDMMC_GetResponse>
 8005c02:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005c04:	697a      	ldr	r2, [r7, #20]
 8005c06:	4b4e      	ldr	r3, [pc, #312]	@ (8005d40 <SDMMC_GetCmdResp1+0x1d8>)
 8005c08:	4013      	ands	r3, r2
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d101      	bne.n	8005c12 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	e08d      	b.n	8005d2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	da02      	bge.n	8005c1e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005c18:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005c1c:	e087      	b.n	8005d2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d001      	beq.n	8005c2c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005c28:	2340      	movs	r3, #64	@ 0x40
 8005c2a:	e080      	b.n	8005d2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005c36:	2380      	movs	r3, #128	@ 0x80
 8005c38:	e079      	b.n	8005d2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d002      	beq.n	8005c4a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005c44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005c48:	e071      	b.n	8005d2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d002      	beq.n	8005c5a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005c54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005c58:	e069      	b.n	8005d2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d002      	beq.n	8005c6a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005c64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c68:	e061      	b.n	8005d2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d002      	beq.n	8005c7a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005c74:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005c78:	e059      	b.n	8005d2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d002      	beq.n	8005c8a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005c84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005c88:	e051      	b.n	8005d2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d002      	beq.n	8005c9a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005c94:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005c98:	e049      	b.n	8005d2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d002      	beq.n	8005caa <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005ca4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005ca8:	e041      	b.n	8005d2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d002      	beq.n	8005cba <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005cb4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cb8:	e039      	b.n	8005d2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d002      	beq.n	8005cca <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005cc4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005cc8:	e031      	b.n	8005d2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d002      	beq.n	8005cda <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005cd4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005cd8:	e029      	b.n	8005d2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d002      	beq.n	8005cea <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005ce4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005ce8:	e021      	b.n	8005d2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d002      	beq.n	8005cfa <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005cf4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005cf8:	e019      	b.n	8005d2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d002      	beq.n	8005d0a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005d04:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005d08:	e011      	b.n	8005d2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d002      	beq.n	8005d1a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005d14:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005d18:	e009      	b.n	8005d2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	f003 0308 	and.w	r3, r3, #8
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d002      	beq.n	8005d2a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005d24:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8005d28:	e001      	b.n	8005d2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005d2a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3720      	adds	r7, #32
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	20000000 	.word	0x20000000
 8005d3c:	10624dd3 	.word	0x10624dd3
 8005d40:	fdffe008 	.word	0xfdffe008

08005d44 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005d4c:	4b1f      	ldr	r3, [pc, #124]	@ (8005dcc <SDMMC_GetCmdResp2+0x88>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a1f      	ldr	r2, [pc, #124]	@ (8005dd0 <SDMMC_GetCmdResp2+0x8c>)
 8005d52:	fba2 2303 	umull	r2, r3, r2, r3
 8005d56:	0a5b      	lsrs	r3, r3, #9
 8005d58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d5c:	fb02 f303 	mul.w	r3, r2, r3
 8005d60:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	1e5a      	subs	r2, r3, #1
 8005d66:	60fa      	str	r2, [r7, #12]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d102      	bne.n	8005d72 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005d6c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005d70:	e026      	b.n	8005dc0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d76:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d0ef      	beq.n	8005d62 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1ea      	bne.n	8005d62 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d90:	f003 0304 	and.w	r3, r3, #4
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d004      	beq.n	8005da2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2204      	movs	r2, #4
 8005d9c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005d9e:	2304      	movs	r3, #4
 8005da0:	e00e      	b.n	8005dc0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d004      	beq.n	8005db8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e003      	b.n	8005dc0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	22c5      	movs	r2, #197	@ 0xc5
 8005dbc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3714      	adds	r7, #20
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr
 8005dcc:	20000000 	.word	0x20000000
 8005dd0:	10624dd3 	.word	0x10624dd3

08005dd4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8005e48 <SDMMC_GetCmdResp3+0x74>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a1a      	ldr	r2, [pc, #104]	@ (8005e4c <SDMMC_GetCmdResp3+0x78>)
 8005de2:	fba2 2303 	umull	r2, r3, r2, r3
 8005de6:	0a5b      	lsrs	r3, r3, #9
 8005de8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dec:	fb02 f303 	mul.w	r3, r2, r3
 8005df0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	1e5a      	subs	r2, r3, #1
 8005df6:	60fa      	str	r2, [r7, #12]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d102      	bne.n	8005e02 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005dfc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005e00:	e01b      	b.n	8005e3a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e06:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d0ef      	beq.n	8005df2 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1ea      	bne.n	8005df2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e20:	f003 0304 	and.w	r3, r3, #4
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d004      	beq.n	8005e32 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2204      	movs	r2, #4
 8005e2c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005e2e:	2304      	movs	r3, #4
 8005e30:	e003      	b.n	8005e3a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	22c5      	movs	r2, #197	@ 0xc5
 8005e36:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3714      	adds	r7, #20
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	20000000 	.word	0x20000000
 8005e4c:	10624dd3 	.word	0x10624dd3

08005e50 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b088      	sub	sp, #32
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	460b      	mov	r3, r1
 8005e5a:	607a      	str	r2, [r7, #4]
 8005e5c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005e5e:	4b35      	ldr	r3, [pc, #212]	@ (8005f34 <SDMMC_GetCmdResp6+0xe4>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a35      	ldr	r2, [pc, #212]	@ (8005f38 <SDMMC_GetCmdResp6+0xe8>)
 8005e64:	fba2 2303 	umull	r2, r3, r2, r3
 8005e68:	0a5b      	lsrs	r3, r3, #9
 8005e6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e6e:	fb02 f303 	mul.w	r3, r2, r3
 8005e72:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	1e5a      	subs	r2, r3, #1
 8005e78:	61fa      	str	r2, [r7, #28]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d102      	bne.n	8005e84 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005e7e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005e82:	e052      	b.n	8005f2a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e88:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d0ef      	beq.n	8005e74 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d1ea      	bne.n	8005e74 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ea2:	f003 0304 	and.w	r3, r3, #4
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d004      	beq.n	8005eb4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2204      	movs	r2, #4
 8005eae:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005eb0:	2304      	movs	r3, #4
 8005eb2:	e03a      	b.n	8005f2a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d004      	beq.n	8005eca <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e02f      	b.n	8005f2a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005eca:	68f8      	ldr	r0, [r7, #12]
 8005ecc:	f7ff fbca 	bl	8005664 <SDMMC_GetCommandResponse>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	7afb      	ldrb	r3, [r7, #11]
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d001      	beq.n	8005ede <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e025      	b.n	8005f2a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	22c5      	movs	r2, #197	@ 0xc5
 8005ee2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005ee4:	2100      	movs	r1, #0
 8005ee6:	68f8      	ldr	r0, [r7, #12]
 8005ee8:	f7ff fbc9 	bl	800567e <SDMMC_GetResponse>
 8005eec:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d106      	bne.n	8005f06 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	0c1b      	lsrs	r3, r3, #16
 8005efc:	b29a      	uxth	r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005f02:	2300      	movs	r3, #0
 8005f04:	e011      	b.n	8005f2a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d002      	beq.n	8005f16 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005f10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005f14:	e009      	b.n	8005f2a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d002      	beq.n	8005f26 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005f20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005f24:	e001      	b.n	8005f2a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005f26:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3720      	adds	r7, #32
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	20000000 	.word	0x20000000
 8005f38:	10624dd3 	.word	0x10624dd3

08005f3c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005f44:	4b22      	ldr	r3, [pc, #136]	@ (8005fd0 <SDMMC_GetCmdResp7+0x94>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a22      	ldr	r2, [pc, #136]	@ (8005fd4 <SDMMC_GetCmdResp7+0x98>)
 8005f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f4e:	0a5b      	lsrs	r3, r3, #9
 8005f50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f54:	fb02 f303 	mul.w	r3, r2, r3
 8005f58:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	1e5a      	subs	r2, r3, #1
 8005f5e:	60fa      	str	r2, [r7, #12]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d102      	bne.n	8005f6a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005f64:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005f68:	e02c      	b.n	8005fc4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f6e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d0ef      	beq.n	8005f5a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1ea      	bne.n	8005f5a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f88:	f003 0304 	and.w	r3, r3, #4
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d004      	beq.n	8005f9a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2204      	movs	r2, #4
 8005f94:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005f96:	2304      	movs	r3, #4
 8005f98:	e014      	b.n	8005fc4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f9e:	f003 0301 	and.w	r3, r3, #1
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d004      	beq.n	8005fb0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e009      	b.n	8005fc4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d002      	beq.n	8005fc2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2240      	movs	r2, #64	@ 0x40
 8005fc0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005fc2:	2300      	movs	r3, #0
  
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3714      	adds	r7, #20
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr
 8005fd0:	20000000 	.word	0x20000000
 8005fd4:	10624dd3 	.word	0x10624dd3

08005fd8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005fe0:	4b11      	ldr	r3, [pc, #68]	@ (8006028 <SDMMC_GetCmdError+0x50>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a11      	ldr	r2, [pc, #68]	@ (800602c <SDMMC_GetCmdError+0x54>)
 8005fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fea:	0a5b      	lsrs	r3, r3, #9
 8005fec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ff0:	fb02 f303 	mul.w	r3, r2, r3
 8005ff4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	1e5a      	subs	r2, r3, #1
 8005ffa:	60fa      	str	r2, [r7, #12]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d102      	bne.n	8006006 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006000:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006004:	e009      	b.n	800601a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800600a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800600e:	2b00      	cmp	r3, #0
 8006010:	d0f1      	beq.n	8005ff6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	22c5      	movs	r2, #197	@ 0xc5
 8006016:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3714      	adds	r7, #20
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	20000000 	.word	0x20000000
 800602c:	10624dd3 	.word	0x10624dd3

08006030 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006034:	4904      	ldr	r1, [pc, #16]	@ (8006048 <MX_FATFS_Init+0x18>)
 8006036:	4805      	ldr	r0, [pc, #20]	@ (800604c <MX_FATFS_Init+0x1c>)
 8006038:	f000 faa0 	bl	800657c <FATFS_LinkDriver>
 800603c:	4603      	mov	r3, r0
 800603e:	461a      	mov	r2, r3
 8006040:	4b03      	ldr	r3, [pc, #12]	@ (8006050 <MX_FATFS_Init+0x20>)
 8006042:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006044:	bf00      	nop
 8006046:	bd80      	pop	{r7, pc}
 8006048:	20000294 	.word	0x20000294
 800604c:	08006624 	.word	0x08006624
 8006050:	20000290 	.word	0x20000290

08006054 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800605a:	2300      	movs	r3, #0
 800605c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800605e:	f000 f896 	bl	800618e <BSP_SD_IsDetected>
 8006062:	4603      	mov	r3, r0
 8006064:	2b01      	cmp	r3, #1
 8006066:	d001      	beq.n	800606c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8006068:	2302      	movs	r3, #2
 800606a:	e012      	b.n	8006092 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800606c:	480b      	ldr	r0, [pc, #44]	@ (800609c <BSP_SD_Init+0x48>)
 800606e:	f7fd fe43 	bl	8003cf8 <HAL_SD_Init>
 8006072:	4603      	mov	r3, r0
 8006074:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8006076:	79fb      	ldrb	r3, [r7, #7]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d109      	bne.n	8006090 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800607c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006080:	4806      	ldr	r0, [pc, #24]	@ (800609c <BSP_SD_Init+0x48>)
 8006082:	f7fe fc09 	bl	8004898 <HAL_SD_ConfigWideBusOperation>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d001      	beq.n	8006090 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8006090:	79fb      	ldrb	r3, [r7, #7]
}
 8006092:	4618      	mov	r0, r3
 8006094:	3708      	adds	r7, #8
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	20000110 	.word	0x20000110

080060a0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b086      	sub	sp, #24
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80060ac:	2300      	movs	r3, #0
 80060ae:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	68f9      	ldr	r1, [r7, #12]
 80060b6:	4806      	ldr	r0, [pc, #24]	@ (80060d0 <BSP_SD_ReadBlocks_DMA+0x30>)
 80060b8:	f7fd fed6 	bl	8003e68 <HAL_SD_ReadBlocks_DMA>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80060c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3718      	adds	r7, #24
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	20000110 	.word	0x20000110

080060d4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b086      	sub	sp, #24
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80060e0:	2300      	movs	r3, #0
 80060e2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	68f9      	ldr	r1, [r7, #12]
 80060ea:	4806      	ldr	r0, [pc, #24]	@ (8006104 <BSP_SD_WriteBlocks_DMA+0x30>)
 80060ec:	f7fd ff9e 	bl	800402c <HAL_SD_WriteBlocks_DMA>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d001      	beq.n	80060fa <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80060fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3718      	adds	r7, #24
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}
 8006104:	20000110 	.word	0x20000110

08006108 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800610c:	4805      	ldr	r0, [pc, #20]	@ (8006124 <BSP_SD_GetCardState+0x1c>)
 800610e:	f7fe fc5d 	bl	80049cc <HAL_SD_GetCardState>
 8006112:	4603      	mov	r3, r0
 8006114:	2b04      	cmp	r3, #4
 8006116:	bf14      	ite	ne
 8006118:	2301      	movne	r3, #1
 800611a:	2300      	moveq	r3, #0
 800611c:	b2db      	uxtb	r3, r3
}
 800611e:	4618      	mov	r0, r3
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	20000110 	.word	0x20000110

08006128 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8006130:	6879      	ldr	r1, [r7, #4]
 8006132:	4803      	ldr	r0, [pc, #12]	@ (8006140 <BSP_SD_GetCardInfo+0x18>)
 8006134:	f7fe fb84 	bl	8004840 <HAL_SD_GetCardInfo>
}
 8006138:	bf00      	nop
 800613a:	3708      	adds	r7, #8
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	20000110 	.word	0x20000110

08006144 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800614c:	f000 f818 	bl	8006180 <BSP_SD_AbortCallback>
}
 8006150:	bf00      	nop
 8006152:	3708      	adds	r7, #8
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8006160:	f000 f9a8 	bl	80064b4 <BSP_SD_WriteCpltCallback>
}
 8006164:	bf00      	nop
 8006166:	3708      	adds	r7, #8
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8006174:	f000 f9aa 	bl	80064cc <BSP_SD_ReadCpltCallback>
}
 8006178:	bf00      	nop
 800617a:	3708      	adds	r7, #8
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8006180:	b480      	push	{r7}
 8006182:	af00      	add	r7, sp, #0

}
 8006184:	bf00      	nop
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr

0800618e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800618e:	b580      	push	{r7, lr}
 8006190:	b082      	sub	sp, #8
 8006192:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006194:	2301      	movs	r3, #1
 8006196:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8006198:	f000 f80c 	bl	80061b4 <BSP_PlatformIsDetected>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d101      	bne.n	80061a6 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80061a2:	2300      	movs	r3, #0
 80061a4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80061a6:	79fb      	ldrb	r3, [r7, #7]
 80061a8:	b2db      	uxtb	r3, r3
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3708      	adds	r7, #8
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
	...

080061b4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80061ba:	2301      	movs	r3, #1
 80061bc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80061be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80061c2:	4806      	ldr	r0, [pc, #24]	@ (80061dc <BSP_PlatformIsDetected+0x28>)
 80061c4:	f7fc fa78 	bl	80026b8 <HAL_GPIO_ReadPin>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d001      	beq.n	80061d2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80061ce:	2300      	movs	r3, #0
 80061d0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80061d2:	79fb      	ldrb	r3, [r7, #7]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3708      	adds	r7, #8
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	40020800 	.word	0x40020800

080061e0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80061e8:	f7fb faf6 	bl	80017d8 <HAL_GetTick>
 80061ec:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80061ee:	e006      	b.n	80061fe <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80061f0:	f7ff ff8a 	bl	8006108 <BSP_SD_GetCardState>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d101      	bne.n	80061fe <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80061fa:	2300      	movs	r3, #0
 80061fc:	e009      	b.n	8006212 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80061fe:	f7fb faeb 	bl	80017d8 <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	429a      	cmp	r2, r3
 800620c:	d8f0      	bhi.n	80061f0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800620e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
	...

0800621c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	4603      	mov	r3, r0
 8006224:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006226:	4b0b      	ldr	r3, [pc, #44]	@ (8006254 <SD_CheckStatus+0x38>)
 8006228:	2201      	movs	r2, #1
 800622a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800622c:	f7ff ff6c 	bl	8006108 <BSP_SD_GetCardState>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d107      	bne.n	8006246 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006236:	4b07      	ldr	r3, [pc, #28]	@ (8006254 <SD_CheckStatus+0x38>)
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	b2db      	uxtb	r3, r3
 800623c:	f023 0301 	bic.w	r3, r3, #1
 8006240:	b2da      	uxtb	r2, r3
 8006242:	4b04      	ldr	r3, [pc, #16]	@ (8006254 <SD_CheckStatus+0x38>)
 8006244:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006246:	4b03      	ldr	r3, [pc, #12]	@ (8006254 <SD_CheckStatus+0x38>)
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	b2db      	uxtb	r3, r3
}
 800624c:	4618      	mov	r0, r3
 800624e:	3708      	adds	r7, #8
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	20000009 	.word	0x20000009

08006258 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	4603      	mov	r3, r0
 8006260:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8006262:	f7ff fef7 	bl	8006054 <BSP_SD_Init>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d107      	bne.n	800627c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800626c:	79fb      	ldrb	r3, [r7, #7]
 800626e:	4618      	mov	r0, r3
 8006270:	f7ff ffd4 	bl	800621c <SD_CheckStatus>
 8006274:	4603      	mov	r3, r0
 8006276:	461a      	mov	r2, r3
 8006278:	4b04      	ldr	r3, [pc, #16]	@ (800628c <SD_initialize+0x34>)
 800627a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800627c:	4b03      	ldr	r3, [pc, #12]	@ (800628c <SD_initialize+0x34>)
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	b2db      	uxtb	r3, r3
}
 8006282:	4618      	mov	r0, r3
 8006284:	3708      	adds	r7, #8
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	20000009 	.word	0x20000009

08006290 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	4603      	mov	r3, r0
 8006298:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800629a:	79fb      	ldrb	r3, [r7, #7]
 800629c:	4618      	mov	r0, r3
 800629e:	f7ff ffbd 	bl	800621c <SD_CheckStatus>
 80062a2:	4603      	mov	r3, r0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3708      	adds	r7, #8
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b086      	sub	sp, #24
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60b9      	str	r1, [r7, #8]
 80062b4:	607a      	str	r2, [r7, #4]
 80062b6:	603b      	str	r3, [r7, #0]
 80062b8:	4603      	mov	r3, r0
 80062ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80062c0:	f247 5030 	movw	r0, #30000	@ 0x7530
 80062c4:	f7ff ff8c 	bl	80061e0 <SD_CheckStatusWithTimeout>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	da01      	bge.n	80062d2 <SD_read+0x26>
  {
    return res;
 80062ce:	7dfb      	ldrb	r3, [r7, #23]
 80062d0:	e03b      	b.n	800634a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80062d2:	683a      	ldr	r2, [r7, #0]
 80062d4:	6879      	ldr	r1, [r7, #4]
 80062d6:	68b8      	ldr	r0, [r7, #8]
 80062d8:	f7ff fee2 	bl	80060a0 <BSP_SD_ReadBlocks_DMA>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d132      	bne.n	8006348 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80062e2:	4b1c      	ldr	r3, [pc, #112]	@ (8006354 <SD_read+0xa8>)
 80062e4:	2200      	movs	r2, #0
 80062e6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80062e8:	f7fb fa76 	bl	80017d8 <HAL_GetTick>
 80062ec:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80062ee:	bf00      	nop
 80062f0:	4b18      	ldr	r3, [pc, #96]	@ (8006354 <SD_read+0xa8>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d108      	bne.n	800630a <SD_read+0x5e>
 80062f8:	f7fb fa6e 	bl	80017d8 <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	f247 522f 	movw	r2, #29999	@ 0x752f
 8006306:	4293      	cmp	r3, r2
 8006308:	d9f2      	bls.n	80062f0 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800630a:	4b12      	ldr	r3, [pc, #72]	@ (8006354 <SD_read+0xa8>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d102      	bne.n	8006318 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	75fb      	strb	r3, [r7, #23]
 8006316:	e017      	b.n	8006348 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8006318:	4b0e      	ldr	r3, [pc, #56]	@ (8006354 <SD_read+0xa8>)
 800631a:	2200      	movs	r2, #0
 800631c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800631e:	f7fb fa5b 	bl	80017d8 <HAL_GetTick>
 8006322:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006324:	e007      	b.n	8006336 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006326:	f7ff feef 	bl	8006108 <BSP_SD_GetCardState>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d102      	bne.n	8006336 <SD_read+0x8a>
          {
            res = RES_OK;
 8006330:	2300      	movs	r3, #0
 8006332:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8006334:	e008      	b.n	8006348 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006336:	f7fb fa4f 	bl	80017d8 <HAL_GetTick>
 800633a:	4602      	mov	r2, r0
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	f247 522f 	movw	r2, #29999	@ 0x752f
 8006344:	4293      	cmp	r3, r2
 8006346:	d9ee      	bls.n	8006326 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8006348:	7dfb      	ldrb	r3, [r7, #23]
}
 800634a:	4618      	mov	r0, r3
 800634c:	3718      	adds	r7, #24
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	2000029c 	.word	0x2000029c

08006358 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b086      	sub	sp, #24
 800635c:	af00      	add	r7, sp, #0
 800635e:	60b9      	str	r1, [r7, #8]
 8006360:	607a      	str	r2, [r7, #4]
 8006362:	603b      	str	r3, [r7, #0]
 8006364:	4603      	mov	r3, r0
 8006366:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800636c:	4b24      	ldr	r3, [pc, #144]	@ (8006400 <SD_write+0xa8>)
 800636e:	2200      	movs	r2, #0
 8006370:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006372:	f247 5030 	movw	r0, #30000	@ 0x7530
 8006376:	f7ff ff33 	bl	80061e0 <SD_CheckStatusWithTimeout>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	da01      	bge.n	8006384 <SD_write+0x2c>
  {
    return res;
 8006380:	7dfb      	ldrb	r3, [r7, #23]
 8006382:	e038      	b.n	80063f6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8006384:	683a      	ldr	r2, [r7, #0]
 8006386:	6879      	ldr	r1, [r7, #4]
 8006388:	68b8      	ldr	r0, [r7, #8]
 800638a:	f7ff fea3 	bl	80060d4 <BSP_SD_WriteBlocks_DMA>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d12f      	bne.n	80063f4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8006394:	f7fb fa20 	bl	80017d8 <HAL_GetTick>
 8006398:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800639a:	bf00      	nop
 800639c:	4b18      	ldr	r3, [pc, #96]	@ (8006400 <SD_write+0xa8>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d108      	bne.n	80063b6 <SD_write+0x5e>
 80063a4:	f7fb fa18 	bl	80017d8 <HAL_GetTick>
 80063a8:	4602      	mov	r2, r0
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	f247 522f 	movw	r2, #29999	@ 0x752f
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d9f2      	bls.n	800639c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80063b6:	4b12      	ldr	r3, [pc, #72]	@ (8006400 <SD_write+0xa8>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d102      	bne.n	80063c4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	75fb      	strb	r3, [r7, #23]
 80063c2:	e017      	b.n	80063f4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80063c4:	4b0e      	ldr	r3, [pc, #56]	@ (8006400 <SD_write+0xa8>)
 80063c6:	2200      	movs	r2, #0
 80063c8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80063ca:	f7fb fa05 	bl	80017d8 <HAL_GetTick>
 80063ce:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80063d0:	e007      	b.n	80063e2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80063d2:	f7ff fe99 	bl	8006108 <BSP_SD_GetCardState>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d102      	bne.n	80063e2 <SD_write+0x8a>
          {
            res = RES_OK;
 80063dc:	2300      	movs	r3, #0
 80063de:	75fb      	strb	r3, [r7, #23]
            break;
 80063e0:	e008      	b.n	80063f4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80063e2:	f7fb f9f9 	bl	80017d8 <HAL_GetTick>
 80063e6:	4602      	mov	r2, r0
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	f247 522f 	movw	r2, #29999	@ 0x752f
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d9ee      	bls.n	80063d2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80063f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3718      	adds	r7, #24
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	20000298 	.word	0x20000298

08006404 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b08c      	sub	sp, #48	@ 0x30
 8006408:	af00      	add	r7, sp, #0
 800640a:	4603      	mov	r3, r0
 800640c:	603a      	str	r2, [r7, #0]
 800640e:	71fb      	strb	r3, [r7, #7]
 8006410:	460b      	mov	r3, r1
 8006412:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800641a:	4b25      	ldr	r3, [pc, #148]	@ (80064b0 <SD_ioctl+0xac>)
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	b2db      	uxtb	r3, r3
 8006420:	f003 0301 	and.w	r3, r3, #1
 8006424:	2b00      	cmp	r3, #0
 8006426:	d001      	beq.n	800642c <SD_ioctl+0x28>
 8006428:	2303      	movs	r3, #3
 800642a:	e03c      	b.n	80064a6 <SD_ioctl+0xa2>

  switch (cmd)
 800642c:	79bb      	ldrb	r3, [r7, #6]
 800642e:	2b03      	cmp	r3, #3
 8006430:	d834      	bhi.n	800649c <SD_ioctl+0x98>
 8006432:	a201      	add	r2, pc, #4	@ (adr r2, 8006438 <SD_ioctl+0x34>)
 8006434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006438:	08006449 	.word	0x08006449
 800643c:	08006451 	.word	0x08006451
 8006440:	08006469 	.word	0x08006469
 8006444:	08006483 	.word	0x08006483
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006448:	2300      	movs	r3, #0
 800644a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800644e:	e028      	b.n	80064a2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006450:	f107 030c 	add.w	r3, r7, #12
 8006454:	4618      	mov	r0, r3
 8006456:	f7ff fe67 	bl	8006128 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800645a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006460:	2300      	movs	r3, #0
 8006462:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006466:	e01c      	b.n	80064a2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006468:	f107 030c 	add.w	r3, r7, #12
 800646c:	4618      	mov	r0, r3
 800646e:	f7ff fe5b 	bl	8006128 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006474:	b29a      	uxth	r2, r3
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800647a:	2300      	movs	r3, #0
 800647c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006480:	e00f      	b.n	80064a2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006482:	f107 030c 	add.w	r3, r7, #12
 8006486:	4618      	mov	r0, r3
 8006488:	f7ff fe4e 	bl	8006128 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800648c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800648e:	0a5a      	lsrs	r2, r3, #9
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006494:	2300      	movs	r3, #0
 8006496:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800649a:	e002      	b.n	80064a2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800649c:	2304      	movs	r3, #4
 800649e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80064a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3730      	adds	r7, #48	@ 0x30
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	20000009 	.word	0x20000009

080064b4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80064b4:	b480      	push	{r7}
 80064b6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80064b8:	4b03      	ldr	r3, [pc, #12]	@ (80064c8 <BSP_SD_WriteCpltCallback+0x14>)
 80064ba:	2201      	movs	r2, #1
 80064bc:	601a      	str	r2, [r3, #0]
}
 80064be:	bf00      	nop
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr
 80064c8:	20000298 	.word	0x20000298

080064cc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80064cc:	b480      	push	{r7}
 80064ce:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80064d0:	4b03      	ldr	r3, [pc, #12]	@ (80064e0 <BSP_SD_ReadCpltCallback+0x14>)
 80064d2:	2201      	movs	r2, #1
 80064d4:	601a      	str	r2, [r3, #0]
}
 80064d6:	bf00      	nop
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr
 80064e0:	2000029c 	.word	0x2000029c

080064e4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b087      	sub	sp, #28
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	4613      	mov	r3, r2
 80064f0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80064f2:	2301      	movs	r3, #1
 80064f4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80064f6:	2300      	movs	r3, #0
 80064f8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80064fa:	4b1f      	ldr	r3, [pc, #124]	@ (8006578 <FATFS_LinkDriverEx+0x94>)
 80064fc:	7a5b      	ldrb	r3, [r3, #9]
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b00      	cmp	r3, #0
 8006502:	d131      	bne.n	8006568 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006504:	4b1c      	ldr	r3, [pc, #112]	@ (8006578 <FATFS_LinkDriverEx+0x94>)
 8006506:	7a5b      	ldrb	r3, [r3, #9]
 8006508:	b2db      	uxtb	r3, r3
 800650a:	461a      	mov	r2, r3
 800650c:	4b1a      	ldr	r3, [pc, #104]	@ (8006578 <FATFS_LinkDriverEx+0x94>)
 800650e:	2100      	movs	r1, #0
 8006510:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006512:	4b19      	ldr	r3, [pc, #100]	@ (8006578 <FATFS_LinkDriverEx+0x94>)
 8006514:	7a5b      	ldrb	r3, [r3, #9]
 8006516:	b2db      	uxtb	r3, r3
 8006518:	4a17      	ldr	r2, [pc, #92]	@ (8006578 <FATFS_LinkDriverEx+0x94>)
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	4413      	add	r3, r2
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006522:	4b15      	ldr	r3, [pc, #84]	@ (8006578 <FATFS_LinkDriverEx+0x94>)
 8006524:	7a5b      	ldrb	r3, [r3, #9]
 8006526:	b2db      	uxtb	r3, r3
 8006528:	461a      	mov	r2, r3
 800652a:	4b13      	ldr	r3, [pc, #76]	@ (8006578 <FATFS_LinkDriverEx+0x94>)
 800652c:	4413      	add	r3, r2
 800652e:	79fa      	ldrb	r2, [r7, #7]
 8006530:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006532:	4b11      	ldr	r3, [pc, #68]	@ (8006578 <FATFS_LinkDriverEx+0x94>)
 8006534:	7a5b      	ldrb	r3, [r3, #9]
 8006536:	b2db      	uxtb	r3, r3
 8006538:	1c5a      	adds	r2, r3, #1
 800653a:	b2d1      	uxtb	r1, r2
 800653c:	4a0e      	ldr	r2, [pc, #56]	@ (8006578 <FATFS_LinkDriverEx+0x94>)
 800653e:	7251      	strb	r1, [r2, #9]
 8006540:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006542:	7dbb      	ldrb	r3, [r7, #22]
 8006544:	3330      	adds	r3, #48	@ 0x30
 8006546:	b2da      	uxtb	r2, r3
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	3301      	adds	r3, #1
 8006550:	223a      	movs	r2, #58	@ 0x3a
 8006552:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	3302      	adds	r3, #2
 8006558:	222f      	movs	r2, #47	@ 0x2f
 800655a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	3303      	adds	r3, #3
 8006560:	2200      	movs	r2, #0
 8006562:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006564:	2300      	movs	r3, #0
 8006566:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006568:	7dfb      	ldrb	r3, [r7, #23]
}
 800656a:	4618      	mov	r0, r3
 800656c:	371c      	adds	r7, #28
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr
 8006576:	bf00      	nop
 8006578:	200002a0 	.word	0x200002a0

0800657c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006586:	2200      	movs	r2, #0
 8006588:	6839      	ldr	r1, [r7, #0]
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f7ff ffaa 	bl	80064e4 <FATFS_LinkDriverEx>
 8006590:	4603      	mov	r3, r0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3708      	adds	r7, #8
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}

0800659a <memset>:
 800659a:	4402      	add	r2, r0
 800659c:	4603      	mov	r3, r0
 800659e:	4293      	cmp	r3, r2
 80065a0:	d100      	bne.n	80065a4 <memset+0xa>
 80065a2:	4770      	bx	lr
 80065a4:	f803 1b01 	strb.w	r1, [r3], #1
 80065a8:	e7f9      	b.n	800659e <memset+0x4>
	...

080065ac <__libc_init_array>:
 80065ac:	b570      	push	{r4, r5, r6, lr}
 80065ae:	4d0d      	ldr	r5, [pc, #52]	@ (80065e4 <__libc_init_array+0x38>)
 80065b0:	4c0d      	ldr	r4, [pc, #52]	@ (80065e8 <__libc_init_array+0x3c>)
 80065b2:	1b64      	subs	r4, r4, r5
 80065b4:	10a4      	asrs	r4, r4, #2
 80065b6:	2600      	movs	r6, #0
 80065b8:	42a6      	cmp	r6, r4
 80065ba:	d109      	bne.n	80065d0 <__libc_init_array+0x24>
 80065bc:	4d0b      	ldr	r5, [pc, #44]	@ (80065ec <__libc_init_array+0x40>)
 80065be:	4c0c      	ldr	r4, [pc, #48]	@ (80065f0 <__libc_init_array+0x44>)
 80065c0:	f000 f818 	bl	80065f4 <_init>
 80065c4:	1b64      	subs	r4, r4, r5
 80065c6:	10a4      	asrs	r4, r4, #2
 80065c8:	2600      	movs	r6, #0
 80065ca:	42a6      	cmp	r6, r4
 80065cc:	d105      	bne.n	80065da <__libc_init_array+0x2e>
 80065ce:	bd70      	pop	{r4, r5, r6, pc}
 80065d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80065d4:	4798      	blx	r3
 80065d6:	3601      	adds	r6, #1
 80065d8:	e7ee      	b.n	80065b8 <__libc_init_array+0xc>
 80065da:	f855 3b04 	ldr.w	r3, [r5], #4
 80065de:	4798      	blx	r3
 80065e0:	3601      	adds	r6, #1
 80065e2:	e7f2      	b.n	80065ca <__libc_init_array+0x1e>
 80065e4:	08006640 	.word	0x08006640
 80065e8:	08006640 	.word	0x08006640
 80065ec:	08006640 	.word	0x08006640
 80065f0:	08006644 	.word	0x08006644

080065f4 <_init>:
 80065f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f6:	bf00      	nop
 80065f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065fa:	bc08      	pop	{r3}
 80065fc:	469e      	mov	lr, r3
 80065fe:	4770      	bx	lr

08006600 <_fini>:
 8006600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006602:	bf00      	nop
 8006604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006606:	bc08      	pop	{r3}
 8006608:	469e      	mov	lr, r3
 800660a:	4770      	bx	lr
