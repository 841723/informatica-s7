
slid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8cc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c90  0800ba9c  0800ba9c  0000ca9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d72c  0800d72c  0000f094  2**0
                  CONTENTS
  4 .ARM          00000008  0800d72c  0800d72c  0000e72c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d734  0800d734  0000f094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d734  0800d734  0000e734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d738  0800d738  0000e738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000094  20000000  0800d73c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d50  20000094  0800d7d0  0000f094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000de4  0800d7d0  0000fde4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a30e  00000000  00000000  0000f0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044e9  00000000  00000000  000293d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001820  00000000  00000000  0002d8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001241  00000000  00000000  0002f0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ae3f  00000000  00000000  00030321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f3c0  00000000  00000000  0005b160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9c36  00000000  00000000  0007a520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00174156  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000683c  00000000  00000000  0017419c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  0017a9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000094 	.word	0x20000094
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ba84 	.word	0x0800ba84

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000098 	.word	0x20000098
 800020c:	0800ba84 	.word	0x0800ba84

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <BSP_DisplayImage>:




void BSP_DisplayImage(uint8_t index, char* pDirectoryFiles[25], uint8_t ubNumberOfFiles)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08e      	sub	sp, #56	@ 0x38
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	6039      	str	r1, [r7, #0]
 80005aa:	71fb      	strb	r3, [r7, #7]
 80005ac:	4613      	mov	r3, r2
 80005ae:	71bb      	strb	r3, [r7, #6]
	uint8_t path[30];

	for (int i = 255; i>0; i--)
 80005b0:	23ff      	movs	r3, #255	@ 0xff
 80005b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80005b4:	e009      	b.n	80005ca <BSP_DisplayImage+0x2a>
	{
		BSP_LCD_SetTransparency(IMAGES_LAYER, i);
 80005b6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80005b8:	2000      	movs	r0, #0
 80005ba:	f009 fab7 	bl	8009b2c <BSP_LCD_SetTransparency>
		HAL_Delay(1);
 80005be:	2001      	movs	r0, #1
 80005c0:	f000 fe70 	bl	80012a4 <HAL_Delay>
	for (int i = 255; i>0; i--)
 80005c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005c6:	3b01      	subs	r3, #1
 80005c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80005ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	dcf2      	bgt.n	80005b6 <BSP_DisplayImage+0x16>
	}

	sprintf ((char*)path, "/%-28.28s", pDirectoryFiles[index]);
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	683a      	ldr	r2, [r7, #0]
 80005d6:	4413      	add	r3, r2
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	f107 030c 	add.w	r3, r7, #12
 80005de:	4915      	ldr	r1, [pc, #84]	@ (8000634 <BSP_DisplayImage+0x94>)
 80005e0:	4618      	mov	r0, r3
 80005e2:	f00a fe5d 	bl	800b2a0 <siprintf>
	uint8_t *uwInternelBuffer= (uint8_t *)0xC0260000;
 80005e6:	4b14      	ldr	r3, [pc, #80]	@ (8000638 <BSP_DisplayImage+0x98>)
 80005e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	Storage_OpenReadFile(uwInternelBuffer, (const char*)path);
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	4619      	mov	r1, r3
 80005f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80005f2:	f000 f823 	bl	800063c <Storage_OpenReadFile>

	BSP_LCD_Clear(((uint32_t)0xFF000000));
 80005f6:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80005fa:	f009 faf1 	bl	8009be0 <BSP_LCD_Clear>
	BSP_LCD_DrawBitmap(0, 0, uwInternelBuffer);
 80005fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000600:	2100      	movs	r1, #0
 8000602:	2000      	movs	r0, #0
 8000604:	f009 fc80 	bl	8009f08 <BSP_LCD_DrawBitmap>

	for (int i = 0; i<255; i++)
 8000608:	2300      	movs	r3, #0
 800060a:	633b      	str	r3, [r7, #48]	@ 0x30
 800060c:	e009      	b.n	8000622 <BSP_DisplayImage+0x82>
	{
		BSP_LCD_SetTransparency(IMAGES_LAYER, i);
 800060e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000610:	2000      	movs	r0, #0
 8000612:	f009 fa8b 	bl	8009b2c <BSP_LCD_SetTransparency>
		HAL_Delay(1);
 8000616:	2001      	movs	r0, #1
 8000618:	f000 fe44 	bl	80012a4 <HAL_Delay>
	for (int i = 0; i<255; i++)
 800061c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800061e:	3301      	adds	r3, #1
 8000620:	633b      	str	r3, [r7, #48]	@ 0x30
 8000622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000624:	2bfe      	cmp	r3, #254	@ 0xfe
 8000626:	ddf2      	ble.n	800060e <BSP_DisplayImage+0x6e>
	}
}
 8000628:	bf00      	nop
 800062a:	bf00      	nop
 800062c:	3738      	adds	r7, #56	@ 0x38
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	0800ba9c 	.word	0x0800ba9c
 8000638:	c0260000 	.word	0xc0260000

0800063c <Storage_OpenReadFile>:
  return 0;
}


uint32_t Storage_OpenReadFile(uint8_t *Address, const char* BmpName)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	f5ad 7d12 	sub.w	sp, sp, #584	@ 0x248
 8000642:	af00      	add	r7, sp, #0
 8000644:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8000648:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800064c:	6018      	str	r0, [r3, #0]
 800064e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8000652:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8000656:	6019      	str	r1, [r3, #0]
  uint32_t index = 0, size = 0, i1 = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 800065e:	2300      	movs	r3, #0
 8000660:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 8000664:	2300      	movs	r3, #0
 8000666:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
  uint32_t BmpAddress;
  FIL F1;

  if (f_open(&F1, (TCHAR const*)BmpName, FA_READ) != FR_OK)
 800066a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800066e:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8000672:	f107 0008 	add.w	r0, r7, #8
 8000676:	2201      	movs	r2, #1
 8000678:	6819      	ldr	r1, [r3, #0]
 800067a:	f007 fff1 	bl	8008660 <f_open>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <Storage_OpenReadFile+0x4c>
  {
    while(1)
 8000684:	bf00      	nop
 8000686:	e7fd      	b.n	8000684 <Storage_OpenReadFile+0x48>
    {
    } 
  }
  if (f_read (&F1, sector, 30, (UINT *)&BytesRead) != FR_OK)
 8000688:	f107 0008 	add.w	r0, r7, #8
 800068c:	4b49      	ldr	r3, [pc, #292]	@ (80007b4 <Storage_OpenReadFile+0x178>)
 800068e:	221e      	movs	r2, #30
 8000690:	4949      	ldr	r1, [pc, #292]	@ (80007b8 <Storage_OpenReadFile+0x17c>)
 8000692:	f008 f99f 	bl	80089d4 <f_read>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <Storage_OpenReadFile+0x64>
  {
    while(1)
 800069c:	bf00      	nop
 800069e:	e7fd      	b.n	800069c <Storage_OpenReadFile+0x60>
    {
    } 
  }
  
  BmpAddress = (uint32_t)sector;
 80006a0:	4b45      	ldr	r3, [pc, #276]	@ (80007b8 <Storage_OpenReadFile+0x17c>)
 80006a2:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238

  /* Read bitmap size */
  size = *(uint16_t *) (BmpAddress + 2);
 80006a6:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80006aa:	3302      	adds	r3, #2
 80006ac:	881b      	ldrh	r3, [r3, #0]
 80006ae:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
  size |= (*(uint16_t *) (BmpAddress + 4)) << 16;  
 80006b2:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80006b6:	3304      	adds	r3, #4
 80006b8:	881b      	ldrh	r3, [r3, #0]
 80006ba:	041b      	lsls	r3, r3, #16
 80006bc:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 80006c0:	4313      	orrs	r3, r2
 80006c2:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 
  /* Get bitmap data address offset */
  index = *(uint16_t *) (BmpAddress + 10);
 80006c6:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80006ca:	330a      	adds	r3, #10
 80006cc:	881b      	ldrh	r3, [r3, #0]
 80006ce:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
  index |= (*(uint16_t *) (BmpAddress + 12)) << 16;  
 80006d2:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80006d6:	330c      	adds	r3, #12
 80006d8:	881b      	ldrh	r3, [r3, #0]
 80006da:	041b      	lsls	r3, r3, #16
 80006dc:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 80006e0:	4313      	orrs	r3, r2
 80006e2:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
  
  f_close (&F1);
 80006e6:	f107 0308 	add.w	r3, r7, #8
 80006ea:	4618      	mov	r0, r3
 80006ec:	f008 fb2f 	bl	8008d4e <f_close>
  
  f_open (&F1, (TCHAR const*)BmpName, FA_READ);
 80006f0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80006f4:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80006f8:	f107 0008 	add.w	r0, r7, #8
 80006fc:	2201      	movs	r2, #1
 80006fe:	6819      	ldr	r1, [r3, #0]
 8000700:	f007 ffae 	bl	8008660 <f_open>

  do
  {
    if (size < 256*2)
 8000704:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8000708:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800070c:	d204      	bcs.n	8000718 <Storage_OpenReadFile+0xdc>
    {
      i1 = size;
 800070e:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8000712:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
 8000716:	e003      	b.n	8000720 <Storage_OpenReadFile+0xe4>
    }
    else
    {
      i1 = 256*2;
 8000718:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800071c:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
    }
    size -= i1;
 8000720:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 8000724:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8000728:	1ad3      	subs	r3, r2, r3
 800072a:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
    f_read (&F1, sector, i1, (UINT *)&BytesRead);
 800072e:	f107 0008 	add.w	r0, r7, #8
 8000732:	4b20      	ldr	r3, [pc, #128]	@ (80007b4 <Storage_OpenReadFile+0x178>)
 8000734:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 8000738:	491f      	ldr	r1, [pc, #124]	@ (80007b8 <Storage_OpenReadFile+0x17c>)
 800073a:	f008 f94b 	bl	80089d4 <f_read>

    for (index = 0; index < i1; index++)
 800073e:	2300      	movs	r3, #0
 8000740:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 8000744:	e01e      	b.n	8000784 <Storage_OpenReadFile+0x148>
    {
      *(__IO uint8_t*) (Address) = *(__IO uint8_t *)BmpAddress;
 8000746:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	b2da      	uxtb	r2, r3
 800074e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8000752:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	701a      	strb	r2, [r3, #0]
      
      BmpAddress++;
 800075a:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800075e:	3301      	adds	r3, #1
 8000760:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
      Address++;
 8000764:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8000768:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800076c:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8000770:	f5a2 7211 	sub.w	r2, r2, #580	@ 0x244
 8000774:	6812      	ldr	r2, [r2, #0]
 8000776:	3201      	adds	r2, #1
 8000778:	601a      	str	r2, [r3, #0]
    for (index = 0; index < i1; index++)
 800077a:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 800077e:	3301      	adds	r3, #1
 8000780:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 8000784:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8000788:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 800078c:	429a      	cmp	r2, r3
 800078e:	d3da      	bcc.n	8000746 <Storage_OpenReadFile+0x10a>
    }  
    
    BmpAddress = (uint32_t)sector;
 8000790:	4b09      	ldr	r3, [pc, #36]	@ (80007b8 <Storage_OpenReadFile+0x17c>)
 8000792:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
  }
  while (size > 0);
 8000796:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 800079a:	2b00      	cmp	r3, #0
 800079c:	d1b2      	bne.n	8000704 <Storage_OpenReadFile+0xc8>

  f_close (&F1);
 800079e:	f107 0308 	add.w	r3, r7, #8
 80007a2:	4618      	mov	r0, r3
 80007a4:	f008 fad3 	bl	8008d4e <f_close>
  
  return 1;
 80007a8:	2301      	movs	r3, #1
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	f507 7712 	add.w	r7, r7, #584	@ 0x248
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	2000075c 	.word	0x2000075c
 80007b8:	200000b0 	.word	0x200000b0

080007bc <Storage_CheckBitmapFile>:


uint32_t Storage_CheckBitmapFile(const char* BmpName, uint32_t *FileLen)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	6039      	str	r1, [r7, #0]
  if(f_mount(&fs, (TCHAR const*)"",0))
 80007c6:	2200      	movs	r2, #0
 80007c8:	4913      	ldr	r1, [pc, #76]	@ (8000818 <Storage_CheckBitmapFile+0x5c>)
 80007ca:	4814      	ldr	r0, [pc, #80]	@ (800081c <Storage_CheckBitmapFile+0x60>)
 80007cc:	f007 ff02 	bl	80085d4 <f_mount>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <Storage_CheckBitmapFile+0x1e>
  {
    return 1;
 80007d6:	2301      	movs	r3, #1
 80007d8:	e01a      	b.n	8000810 <Storage_CheckBitmapFile+0x54>
  }
  if(f_open (&F, (TCHAR const*)BmpName, FA_READ))
 80007da:	2201      	movs	r2, #1
 80007dc:	6879      	ldr	r1, [r7, #4]
 80007de:	4810      	ldr	r0, [pc, #64]	@ (8000820 <Storage_CheckBitmapFile+0x64>)
 80007e0:	f007 ff3e 	bl	8008660 <f_open>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <Storage_CheckBitmapFile+0x32>
  {
    return 2;
 80007ea:	2302      	movs	r3, #2
 80007ec:	e010      	b.n	8000810 <Storage_CheckBitmapFile+0x54>
  }
  
  f_read (&F, sector, 6, (UINT *)&BytesRead);
 80007ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000824 <Storage_CheckBitmapFile+0x68>)
 80007f0:	2206      	movs	r2, #6
 80007f2:	490d      	ldr	r1, [pc, #52]	@ (8000828 <Storage_CheckBitmapFile+0x6c>)
 80007f4:	480a      	ldr	r0, [pc, #40]	@ (8000820 <Storage_CheckBitmapFile+0x64>)
 80007f6:	f008 f8ed 	bl	80089d4 <f_read>
  
  if (Buffercmp((uint8_t *)SlidesCheck, (uint8_t *) sector, 2) != 0)
 80007fa:	2202      	movs	r2, #2
 80007fc:	490a      	ldr	r1, [pc, #40]	@ (8000828 <Storage_CheckBitmapFile+0x6c>)
 80007fe:	480b      	ldr	r0, [pc, #44]	@ (800082c <Storage_CheckBitmapFile+0x70>)
 8000800:	f000 f866 	bl	80008d0 <Buffercmp>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <Storage_CheckBitmapFile+0x52>
  {
    return 3;
 800080a:	2303      	movs	r3, #3
 800080c:	e000      	b.n	8000810 <Storage_CheckBitmapFile+0x54>
  }
  return 0;
 800080e:	2300      	movs	r3, #0
}
 8000810:	4618      	mov	r0, r3
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	0800baa8 	.word	0x0800baa8
 800081c:	200002b0 	.word	0x200002b0
 8000820:	2000052c 	.word	0x2000052c
 8000824:	2000075c 	.word	0x2000075c
 8000828:	200000b0 	.word	0x200000b0
 800082c:	0800bb90 	.word	0x0800bb90

08000830 <Storage_GetDirectoryBitmapFiles>:


uint32_t Storage_GetDirectoryBitmapFiles(const char* DirName, char* Files[])
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
  FRESULT res;
  uint32_t index = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]

  /* Open filesystem */
  if(f_mount(&fs, (TCHAR const*)"",0) != FR_OK)
 800083e:	2200      	movs	r2, #0
 8000840:	491c      	ldr	r1, [pc, #112]	@ (80008b4 <Storage_GetDirectoryBitmapFiles+0x84>)
 8000842:	481d      	ldr	r0, [pc, #116]	@ (80008b8 <Storage_GetDirectoryBitmapFiles+0x88>)
 8000844:	f007 fec6 	bl	80085d4 <f_mount>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <Storage_GetDirectoryBitmapFiles+0x22>
  {
    return 0;
 800084e:	2300      	movs	r3, #0
 8000850:	e02c      	b.n	80008ac <Storage_GetDirectoryBitmapFiles+0x7c>
  }

  /* Start to search for wave files */
  res = f_findfirst(&dir, &fno, DirName, "*.bmp");
 8000852:	4b1a      	ldr	r3, [pc, #104]	@ (80008bc <Storage_GetDirectoryBitmapFiles+0x8c>)
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	491a      	ldr	r1, [pc, #104]	@ (80008c0 <Storage_GetDirectoryBitmapFiles+0x90>)
 8000858:	481a      	ldr	r0, [pc, #104]	@ (80008c4 <Storage_GetDirectoryBitmapFiles+0x94>)
 800085a:	f008 fba0 	bl	8008f9e <f_findfirst>
 800085e:	4603      	mov	r3, r0
 8000860:	73fb      	strb	r3, [r7, #15]

  /* Repeat while an item is found */
  while (fno.fname[0])
 8000862:	e01b      	b.n	800089c <Storage_GetDirectoryBitmapFiles+0x6c>
  {
    if(res == FR_OK)
 8000864:	7bfb      	ldrb	r3, [r7, #15]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d115      	bne.n	8000896 <Storage_GetDirectoryBitmapFiles+0x66>
    {
      if(index < MAX_BMP_FILES)
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	2b18      	cmp	r3, #24
 800086e:	d80b      	bhi.n	8000888 <Storage_GetDirectoryBitmapFiles+0x58>
      {
        sprintf (Files[index++], "%s", fno.fname);
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	1c5a      	adds	r2, r3, #1
 8000874:	60ba      	str	r2, [r7, #8]
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	683a      	ldr	r2, [r7, #0]
 800087a:	4413      	add	r3, r2
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a12      	ldr	r2, [pc, #72]	@ (80008c8 <Storage_GetDirectoryBitmapFiles+0x98>)
 8000880:	4912      	ldr	r1, [pc, #72]	@ (80008cc <Storage_GetDirectoryBitmapFiles+0x9c>)
 8000882:	4618      	mov	r0, r3
 8000884:	f00a fd0c 	bl	800b2a0 <siprintf>
      }
      /* Search for next item */
      res = f_findnext(&dir, &fno);
 8000888:	490d      	ldr	r1, [pc, #52]	@ (80008c0 <Storage_GetDirectoryBitmapFiles+0x90>)
 800088a:	480e      	ldr	r0, [pc, #56]	@ (80008c4 <Storage_GetDirectoryBitmapFiles+0x94>)
 800088c:	f008 fb5f 	bl	8008f4e <f_findnext>
 8000890:	4603      	mov	r3, r0
 8000892:	73fb      	strb	r3, [r7, #15]
 8000894:	e002      	b.n	800089c <Storage_GetDirectoryBitmapFiles+0x6c>
    }
    else
    {
      index = 0;
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
      break;
 800089a:	e003      	b.n	80008a4 <Storage_GetDirectoryBitmapFiles+0x74>
  while (fno.fname[0])
 800089c:	4b08      	ldr	r3, [pc, #32]	@ (80008c0 <Storage_GetDirectoryBitmapFiles+0x90>)
 800089e:	7a5b      	ldrb	r3, [r3, #9]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d1df      	bne.n	8000864 <Storage_GetDirectoryBitmapFiles+0x34>
    }
  }

  f_closedir(&dir);
 80008a4:	4807      	ldr	r0, [pc, #28]	@ (80008c4 <Storage_GetDirectoryBitmapFiles+0x94>)
 80008a6:	f008 faef 	bl	8008e88 <f_closedir>

  return index;
 80008aa:	68bb      	ldr	r3, [r7, #8]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3710      	adds	r7, #16
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	0800baa8 	.word	0x0800baa8
 80008b8:	200002b0 	.word	0x200002b0
 80008bc:	0800baac 	.word	0x0800baac
 80008c0:	200004e0 	.word	0x200004e0
 80008c4:	200004f8 	.word	0x200004f8
 80008c8:	200004e9 	.word	0x200004e9
 80008cc:	0800bab4 	.word	0x0800bab4

080008d0 <Buffercmp>:


uint8_t Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	4613      	mov	r3, r2
 80008dc:	80fb      	strh	r3, [r7, #6]
  while (BufferLength--)
 80008de:	e00d      	b.n	80008fc <Buffercmp+0x2c>
  {
    if (*pBuffer1 != *pBuffer2)
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	781a      	ldrb	r2, [r3, #0]
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d001      	beq.n	80008f0 <Buffercmp+0x20>
    {
      return 1;
 80008ec:	2301      	movs	r3, #1
 80008ee:	e00b      	b.n	8000908 <Buffercmp+0x38>
    }

    pBuffer1++;
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	3301      	adds	r3, #1
 80008f4:	60fb      	str	r3, [r7, #12]
    pBuffer2++;
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	3301      	adds	r3, #1
 80008fa:	60bb      	str	r3, [r7, #8]
  while (BufferLength--)
 80008fc:	88fb      	ldrh	r3, [r7, #6]
 80008fe:	1e5a      	subs	r2, r3, #1
 8000900:	80fa      	strh	r2, [r7, #6]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d1ec      	bne.n	80008e0 <Buffercmp+0x10>
  }

  return 0;
 8000906:	2300      	movs	r3, #0
}
 8000908:	4618      	mov	r0, r3
 800090a:	3714      	adds	r7, #20
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000918:	f3bf 8f4f 	dsb	sy
}
 800091c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800091e:	f3bf 8f6f 	isb	sy
}
 8000922:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000924:	4b0d      	ldr	r3, [pc, #52]	@ (800095c <SCB_EnableICache+0x48>)
 8000926:	2200      	movs	r2, #0
 8000928:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800092c:	f3bf 8f4f 	dsb	sy
}
 8000930:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000932:	f3bf 8f6f 	isb	sy
}
 8000936:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000938:	4b08      	ldr	r3, [pc, #32]	@ (800095c <SCB_EnableICache+0x48>)
 800093a:	695b      	ldr	r3, [r3, #20]
 800093c:	4a07      	ldr	r2, [pc, #28]	@ (800095c <SCB_EnableICache+0x48>)
 800093e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000942:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000944:	f3bf 8f4f 	dsb	sy
}
 8000948:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800094a:	f3bf 8f6f 	isb	sy
}
 800094e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000966:	4b1f      	ldr	r3, [pc, #124]	@ (80009e4 <SCB_EnableDCache+0x84>)
 8000968:	2200      	movs	r2, #0
 800096a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800096e:	f3bf 8f4f 	dsb	sy
}
 8000972:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000974:	4b1b      	ldr	r3, [pc, #108]	@ (80009e4 <SCB_EnableDCache+0x84>)
 8000976:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800097a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	0b5b      	lsrs	r3, r3, #13
 8000980:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000984:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	08db      	lsrs	r3, r3, #3
 800098a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800098e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	015a      	lsls	r2, r3, #5
 8000994:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000998:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800099a:	68ba      	ldr	r2, [r7, #8]
 800099c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800099e:	4911      	ldr	r1, [pc, #68]	@ (80009e4 <SCB_EnableDCache+0x84>)
 80009a0:	4313      	orrs	r3, r2
 80009a2:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	1e5a      	subs	r2, r3, #1
 80009aa:	60ba      	str	r2, [r7, #8]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d1ef      	bne.n	8000990 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	1e5a      	subs	r2, r3, #1
 80009b4:	60fa      	str	r2, [r7, #12]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d1e5      	bne.n	8000986 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80009ba:	f3bf 8f4f 	dsb	sy
}
 80009be:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80009c0:	4b08      	ldr	r3, [pc, #32]	@ (80009e4 <SCB_EnableDCache+0x84>)
 80009c2:	695b      	ldr	r3, [r3, #20]
 80009c4:	4a07      	ldr	r2, [pc, #28]	@ (80009e4 <SCB_EnableDCache+0x84>)
 80009c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80009ca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80009cc:	f3bf 8f4f 	dsb	sy
}
 80009d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009d2:	f3bf 8f6f 	isb	sy
}
 80009d6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80009d8:	bf00      	nop
 80009da:	3714      	adds	r7, #20
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	@ 0x28
 80009ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN 1 */
	  uint32_t counter = 0, transparency = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80009f2:	2300      	movs	r3, #0
 80009f4:	623b      	str	r3, [r7, #32]
	  uint8_t str[30];
	  uwInternelBuffer = (uint8_t *)0xC0260000;
 80009f6:	4b72      	ldr	r3, [pc, #456]	@ (8000bc0 <main+0x1d8>)
 80009f8:	4a72      	ldr	r2, [pc, #456]	@ (8000bc4 <main+0x1dc>)
 80009fa:	601a      	str	r2, [r3, #0]
	/* Enable I-Cache */
	SCB_EnableICache();
 80009fc:	f7ff ff8a 	bl	8000914 <SCB_EnableICache>
	/* Enable D-Cache */
	SCB_EnableDCache();
 8000a00:	f7ff ffae 	bl	8000960 <SCB_EnableDCache>
	  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a04:	f000 fbf1 	bl	80011ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a08:	f000 f8f8 	bl	8000bfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a0c:	f000 f9b6 	bl	8000d7c <MX_GPIO_Init>
  MX_CRC_Init();
 8000a10:	f000 f960 	bl	8000cd4 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000a14:	f000 f980 	bl	8000d18 <MX_DMA2D_Init>
  /* USER CODE BEGIN 2 */
    BSP_TS_Init(480,272);
 8000a18:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000a1c:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8000a20:	f00a f902 	bl	800ac28 <BSP_TS_Init>
    BSP_LCD_Init();
 8000a24:	f008 ff7a 	bl	800991c <BSP_LCD_Init>

    /* LCD Initialization */
    BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000a28:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f009 f80d 	bl	8009a4c <BSP_LCD_LayerDefaultInit>

    /* Enable the LCD */
    BSP_LCD_DisplayOn();
 8000a32:	f009 fb1b 	bl	800a06c <BSP_LCD_DisplayOn>

    /* Select the LCD  Layer  */
    BSP_LCD_SelectLayer(0);
 8000a36:	2000      	movs	r0, #0
 8000a38:	f009 f868 	bl	8009b0c <BSP_LCD_SelectLayer>

    /* Clear the Layer */
    BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000a3c:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000a40:	f009 f8ce 	bl	8009be0 <BSP_LCD_Clear>

    /* Configure the transparency for foreground and background :
       Increase the transparency */
    BSP_LCD_SetTransparency(0, 0);
 8000a44:	2100      	movs	r1, #0
 8000a46:	2000      	movs	r0, #0
 8000a48:	f009 f870 	bl	8009b2c <BSP_LCD_SetTransparency>

    BSP_SD_Init();
 8000a4c:	f009 fd6a 	bl	800a524 <BSP_SD_Init>

    while(BSP_SD_IsDetected() != SD_PRESENT)
 8000a50:	e006      	b.n	8000a60 <main+0x78>
    {
          BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000a52:	485d      	ldr	r0, [pc, #372]	@ (8000bc8 <main+0x1e0>)
 8000a54:	f009 f87c 	bl	8009b50 <BSP_LCD_SetTextColor>
          BSP_LCD_DisplayStringAtLine(8, (uint8_t*)"  Please insert SD Card                  ");
 8000a58:	495c      	ldr	r1, [pc, #368]	@ (8000bcc <main+0x1e4>)
 8000a5a:	2008      	movs	r0, #8
 8000a5c:	f009 f9f4 	bl	8009e48 <BSP_LCD_DisplayStringAtLine>
    while(BSP_SD_IsDetected() != SD_PRESENT)
 8000a60:	f009 fdaa 	bl	800a5b8 <BSP_SD_IsDetected>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d1f3      	bne.n	8000a52 <main+0x6a>
    }

    BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000a6a:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000a6e:	f009 f8b7 	bl	8009be0 <BSP_LCD_Clear>

    /*##-2- Link the SD Card disk I/O driver ###################################*/
    if(FATFS_LinkDriver(&SD_Driver, SD_Path) == 0)
 8000a72:	4957      	ldr	r1, [pc, #348]	@ (8000bd0 <main+0x1e8>)
 8000a74:	4857      	ldr	r0, [pc, #348]	@ (8000bd4 <main+0x1ec>)
 8000a76:	f008 fafd 	bl	8009074 <FATFS_LinkDriver>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d142      	bne.n	8000b06 <main+0x11e>
    {
      /*##-3- Initialize the Directory Files pointers (heap) ###################*/
      for (counter = 0; counter < MAX_BMP_FILES; counter++)
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a84:	e01a      	b.n	8000abc <main+0xd4>
      {
        pDirectoryFiles[counter] = malloc(MAX_BMP_FILE_NAME);
 8000a86:	200b      	movs	r0, #11
 8000a88:	f00a fb4c 	bl	800b124 <malloc>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4a51      	ldr	r2, [pc, #324]	@ (8000bd8 <main+0x1f0>)
 8000a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a94:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        if(pDirectoryFiles[counter] == NULL)
 8000a98:	4a4f      	ldr	r2, [pc, #316]	@ (8000bd8 <main+0x1f0>)
 8000a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d108      	bne.n	8000ab6 <main+0xce>
        {
          /* Set the Text Color */
          BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000aa4:	4848      	ldr	r0, [pc, #288]	@ (8000bc8 <main+0x1e0>)
 8000aa6:	f009 f853 	bl	8009b50 <BSP_LCD_SetTextColor>

          BSP_LCD_DisplayStringAtLine(8, (uint8_t*)"  Cannot allocate memory ");
 8000aaa:	494c      	ldr	r1, [pc, #304]	@ (8000bdc <main+0x1f4>)
 8000aac:	2008      	movs	r0, #8
 8000aae:	f009 f9cb 	bl	8009e48 <BSP_LCD_DisplayStringAtLine>

          while(1)
 8000ab2:	bf00      	nop
 8000ab4:	e7fd      	b.n	8000ab2 <main+0xca>
      for (counter = 0; counter < MAX_BMP_FILES; counter++)
 8000ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab8:	3301      	adds	r3, #1
 8000aba:	627b      	str	r3, [r7, #36]	@ 0x24
 8000abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000abe:	2b18      	cmp	r3, #24
 8000ac0:	d9e1      	bls.n	8000a86 <main+0x9e>
          }
        }
      }

      /* Get the BMP file names on root directory */
      ubNumberOfFiles = Storage_GetDirectoryBitmapFiles("/", pDirectoryFiles);
 8000ac2:	4945      	ldr	r1, [pc, #276]	@ (8000bd8 <main+0x1f0>)
 8000ac4:	4846      	ldr	r0, [pc, #280]	@ (8000be0 <main+0x1f8>)
 8000ac6:	f7ff feb3 	bl	8000830 <Storage_GetDirectoryBitmapFiles>
 8000aca:	4603      	mov	r3, r0
 8000acc:	b2da      	uxtb	r2, r3
 8000ace:	4b45      	ldr	r3, [pc, #276]	@ (8000be4 <main+0x1fc>)
 8000ad0:	701a      	strb	r2, [r3, #0]

      if (ubNumberOfFiles == 0)
 8000ad2:	4b44      	ldr	r3, [pc, #272]	@ (8000be4 <main+0x1fc>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d117      	bne.n	8000b0a <main+0x122>
      {
        for (counter = 0; counter < MAX_BMP_FILES; counter++)
 8000ada:	2300      	movs	r3, #0
 8000adc:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ade:	e009      	b.n	8000af4 <main+0x10c>
        {
          free(pDirectoryFiles[counter]);
 8000ae0:	4a3d      	ldr	r2, [pc, #244]	@ (8000bd8 <main+0x1f0>)
 8000ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f00a fb23 	bl	800b134 <free>
        for (counter = 0; counter < MAX_BMP_FILES; counter++)
 8000aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000af0:	3301      	adds	r3, #1
 8000af2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000af6:	2b18      	cmp	r3, #24
 8000af8:	d9f2      	bls.n	8000ae0 <main+0xf8>
        }
        BSP_LCD_DisplayStringAtLine(8, (uint8_t*)"  No Bitmap files...      ");
 8000afa:	493b      	ldr	r1, [pc, #236]	@ (8000be8 <main+0x200>)
 8000afc:	2008      	movs	r0, #8
 8000afe:	f009 f9a3 	bl	8009e48 <BSP_LCD_DisplayStringAtLine>
        while(1)
 8000b02:	bf00      	nop
 8000b04:	e7fd      	b.n	8000b02 <main+0x11a>
      }
    }
    else
    {
      /* FatFs Initialization Error */
      Error_Handler();
 8000b06:	f000 f977 	bl	8000df8 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	    counter = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	@ 0x24

	  	    do
	  	    {
			sprintf ((char*)str, "/%-28.28s", pDirectoryFiles[counter]);
 8000b0e:	4a32      	ldr	r2, [pc, #200]	@ (8000bd8 <main+0x1f0>)
 8000b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b12:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b16:	463b      	mov	r3, r7
 8000b18:	4934      	ldr	r1, [pc, #208]	@ (8000bec <main+0x204>)
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f00a fbc0 	bl	800b2a0 <siprintf>
	  	      if (Storage_CheckBitmapFile((const char*)str, &uwBmplen) == 0)
 8000b20:	463b      	mov	r3, r7
 8000b22:	4933      	ldr	r1, [pc, #204]	@ (8000bf0 <main+0x208>)
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fe49 	bl	80007bc <Storage_CheckBitmapFile>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d134      	bne.n	8000b9a <main+0x1b2>
	  	      {
	  	      BSP_DisplayImage(counter,pDirectoryFiles,ubNumberOfFiles);
 8000b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	4a2b      	ldr	r2, [pc, #172]	@ (8000be4 <main+0x1fc>)
 8000b36:	7812      	ldrb	r2, [r2, #0]
 8000b38:	4927      	ldr	r1, [pc, #156]	@ (8000bd8 <main+0x1f0>)
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff fd30 	bl	80005a0 <BSP_DisplayImage>

	  	        /* Wait for screen touch */
	  	        while (1)
	  	        {
	  	        	if (BSP_TS_GetState(TS_State) != TS_OK)
 8000b40:	4b2c      	ldr	r3, [pc, #176]	@ (8000bf4 <main+0x20c>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f00a f8af 	bl	800aca8 <BSP_TS_GetState>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d002      	beq.n	8000b56 <main+0x16e>
	  	        	{
	  	        		Error_Handler();
 8000b50:	f000 f952 	bl	8000df8 <Error_Handler>
 8000b54:	e7f4      	b.n	8000b40 <main+0x158>
	  	        	}
	  	        	else
	  	        	{
	  	        		if (TS_State->touchDetected == 1)
 8000b56:	4b27      	ldr	r3, [pc, #156]	@ (8000bf4 <main+0x20c>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d1ef      	bne.n	8000b40 <main+0x158>
	  	        		{
	  	        			counter += ubNumberOfFiles;
 8000b60:	4b20      	ldr	r3, [pc, #128]	@ (8000be4 <main+0x1fc>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	461a      	mov	r2, r3
 8000b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b68:	4413      	add	r3, r2
 8000b6a:	627b      	str	r3, [r7, #36]	@ 0x24
	  	        			if (TS_State->touchX[0] > 480/2)
 8000b6c:	4b21      	ldr	r3, [pc, #132]	@ (8000bf4 <main+0x20c>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	885b      	ldrh	r3, [r3, #2]
 8000b72:	2bf0      	cmp	r3, #240	@ 0xf0
 8000b74:	d903      	bls.n	8000b7e <main+0x196>
	  	        			{
	  	        				counter++;
 8000b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b78:	3301      	adds	r3, #1
 8000b7a:	627b      	str	r3, [r7, #36]	@ 0x24
	  	        			}
	  	        			else {
	  	        				counter--;
	  	        			}
	  	        			break;
 8000b7c:	e002      	b.n	8000b84 <main+0x19c>
	  	        				counter--;
 8000b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b80:	3b01      	subs	r3, #1
 8000b82:	627b      	str	r3, [r7, #36]	@ 0x24
	  	        		}
	  	        	}
	  	        }

	  	        counter %= ubNumberOfFiles;
 8000b84:	4b17      	ldr	r3, [pc, #92]	@ (8000be4 <main+0x1fc>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8000b90:	fb01 f202 	mul.w	r2, r1, r2
 8000b94:	1a9b      	subs	r3, r3, r2
 8000b96:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b98:	e7b9      	b.n	8000b0e <main+0x126>

	  	      }
				else
				{
				  BSP_LCD_Clear(((uint32_t)0xFF000000));
 8000b9a:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000b9e:	f009 f81f 	bl	8009be0 <BSP_LCD_Clear>
				  /* Set the Text Color */
				  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000ba2:	4809      	ldr	r0, [pc, #36]	@ (8000bc8 <main+0x1e0>)
 8000ba4:	f008 ffd4 	bl	8009b50 <BSP_LCD_SetTextColor>

				  BSP_LCD_DisplayStringAtLine(7, (uint8_t *) str);
 8000ba8:	463b      	mov	r3, r7
 8000baa:	4619      	mov	r1, r3
 8000bac:	2007      	movs	r0, #7
 8000bae:	f009 f94b 	bl	8009e48 <BSP_LCD_DisplayStringAtLine>
				  BSP_LCD_DisplayStringAtLine(8, (uint8_t*)"    File type not supported. ");
 8000bb2:	4911      	ldr	r1, [pc, #68]	@ (8000bf8 <main+0x210>)
 8000bb4:	2008      	movs	r0, #8
 8000bb6:	f009 f947 	bl	8009e48 <BSP_LCD_DisplayStringAtLine>
				  while(1);
 8000bba:	bf00      	nop
 8000bbc:	e7fd      	b.n	8000bba <main+0x1d2>
 8000bbe:	bf00      	nop
 8000bc0:	200007d0 	.word	0x200007d0
 8000bc4:	c0260000 	.word	0xc0260000
 8000bc8:	ffff0000 	.word	0xffff0000
 8000bcc:	0800bab8 	.word	0x0800bab8
 8000bd0:	20000760 	.word	0x20000760
 8000bd4:	0800bb94 	.word	0x0800bb94
 8000bd8:	20000764 	.word	0x20000764
 8000bdc:	0800bae4 	.word	0x0800bae4
 8000be0:	0800bb00 	.word	0x0800bb00
 8000be4:	200007c8 	.word	0x200007c8
 8000be8:	0800bb04 	.word	0x0800bb04
 8000bec:	0800bb20 	.word	0x0800bb20
 8000bf0:	200007cc 	.word	0x200007cc
 8000bf4:	200007d4 	.word	0x200007d4
 8000bf8:	0800bb2c 	.word	0x0800bb2c

08000bfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b094      	sub	sp, #80	@ 0x50
 8000c00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c02:	f107 0320 	add.w	r3, r7, #32
 8000c06:	2230      	movs	r2, #48	@ 0x30
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f00a fb68 	bl	800b2e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c10:	f107 030c 	add.w	r3, r7, #12
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c20:	4b2a      	ldr	r3, [pc, #168]	@ (8000ccc <SystemClock_Config+0xd0>)
 8000c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c24:	4a29      	ldr	r2, [pc, #164]	@ (8000ccc <SystemClock_Config+0xd0>)
 8000c26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c2c:	4b27      	ldr	r3, [pc, #156]	@ (8000ccc <SystemClock_Config+0xd0>)
 8000c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c34:	60bb      	str	r3, [r7, #8]
 8000c36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c38:	4b25      	ldr	r3, [pc, #148]	@ (8000cd0 <SystemClock_Config+0xd4>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a24      	ldr	r2, [pc, #144]	@ (8000cd0 <SystemClock_Config+0xd4>)
 8000c3e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c42:	6013      	str	r3, [r2, #0]
 8000c44:	4b22      	ldr	r3, [pc, #136]	@ (8000cd0 <SystemClock_Config+0xd4>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c4c:	607b      	str	r3, [r7, #4]
 8000c4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c50:	2302      	movs	r3, #2
 8000c52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c54:	2301      	movs	r3, #1
 8000c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c58:	2310      	movs	r3, #16
 8000c5a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c60:	2300      	movs	r3, #0
 8000c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c64:	2308      	movs	r3, #8
 8000c66:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 8000c68:	23c8      	movs	r3, #200	@ 0xc8
 8000c6a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000c70:	2309      	movs	r3, #9
 8000c72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c74:	f107 0320 	add.w	r3, r7, #32
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f002 fd27 	bl	80036cc <HAL_RCC_OscConfig>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000c84:	f000 f8b8 	bl	8000df8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c88:	f002 fcd0 	bl	800362c <HAL_PWREx_EnableOverDrive>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c92:	f000 f8b1 	bl	8000df8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c96:	230f      	movs	r3, #15
 8000c98:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ca2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ca6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ca8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000cae:	f107 030c 	add.w	r3, r7, #12
 8000cb2:	2106      	movs	r1, #6
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f002 ffad 	bl	8003c14 <HAL_RCC_ClockConfig>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000cc0:	f000 f89a 	bl	8000df8 <Error_Handler>
  }
}
 8000cc4:	bf00      	nop
 8000cc6:	3750      	adds	r7, #80	@ 0x50
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40007000 	.word	0x40007000

08000cd4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000cd8:	4b0d      	ldr	r3, [pc, #52]	@ (8000d10 <MX_CRC_Init+0x3c>)
 8000cda:	4a0e      	ldr	r2, [pc, #56]	@ (8000d14 <MX_CRC_Init+0x40>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000cde:	4b0c      	ldr	r3, [pc, #48]	@ (8000d10 <MX_CRC_Init+0x3c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8000d10 <MX_CRC_Init+0x3c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000cea:	4b09      	ldr	r3, [pc, #36]	@ (8000d10 <MX_CRC_Init+0x3c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000cf0:	4b07      	ldr	r3, [pc, #28]	@ (8000d10 <MX_CRC_Init+0x3c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000cf6:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <MX_CRC_Init+0x3c>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000cfc:	4804      	ldr	r0, [pc, #16]	@ (8000d10 <MX_CRC_Init+0x3c>)
 8000cfe:	f000 fc07 	bl	8001510 <HAL_CRC_Init>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000d08:	f000 f876 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	200007d8 	.word	0x200007d8
 8000d14:	40023000 	.word	0x40023000

08000d18 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000d1c:	4b15      	ldr	r3, [pc, #84]	@ (8000d74 <MX_DMA2D_Init+0x5c>)
 8000d1e:	4a16      	ldr	r2, [pc, #88]	@ (8000d78 <MX_DMA2D_Init+0x60>)
 8000d20:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000d22:	4b14      	ldr	r3, [pc, #80]	@ (8000d74 <MX_DMA2D_Init+0x5c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000d28:	4b12      	ldr	r3, [pc, #72]	@ (8000d74 <MX_DMA2D_Init+0x5c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000d2e:	4b11      	ldr	r3, [pc, #68]	@ (8000d74 <MX_DMA2D_Init+0x5c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000d34:	4b0f      	ldr	r3, [pc, #60]	@ (8000d74 <MX_DMA2D_Init+0x5c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d74 <MX_DMA2D_Init+0x5c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000d40:	4b0c      	ldr	r3, [pc, #48]	@ (8000d74 <MX_DMA2D_Init+0x5c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000d46:	4b0b      	ldr	r3, [pc, #44]	@ (8000d74 <MX_DMA2D_Init+0x5c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000d4c:	4809      	ldr	r0, [pc, #36]	@ (8000d74 <MX_DMA2D_Init+0x5c>)
 8000d4e:	f000 fe87 	bl	8001a60 <HAL_DMA2D_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000d58:	f000 f84e 	bl	8000df8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	4805      	ldr	r0, [pc, #20]	@ (8000d74 <MX_DMA2D_Init+0x5c>)
 8000d60:	f000 ffdc 	bl	8001d1c <HAL_DMA2D_ConfigLayer>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000d6a:	f000 f845 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	200007fc 	.word	0x200007fc
 8000d78:	4002b000 	.word	0x4002b000

08000d7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b088      	sub	sp, #32
 8000d80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d82:	f107 030c 	add.w	r3, r7, #12
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
 8000d8e:	60da      	str	r2, [r3, #12]
 8000d90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000d92:	4b17      	ldr	r3, [pc, #92]	@ (8000df0 <MX_GPIO_Init+0x74>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d96:	4a16      	ldr	r2, [pc, #88]	@ (8000df0 <MX_GPIO_Init+0x74>)
 8000d98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9e:	4b14      	ldr	r3, [pc, #80]	@ (8000df0 <MX_GPIO_Init+0x74>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000da6:	60bb      	str	r3, [r7, #8]
 8000da8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000daa:	4b11      	ldr	r3, [pc, #68]	@ (8000df0 <MX_GPIO_Init+0x74>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	4a10      	ldr	r2, [pc, #64]	@ (8000df0 <MX_GPIO_Init+0x74>)
 8000db0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db6:	4b0e      	ldr	r3, [pc, #56]	@ (8000df0 <MX_GPIO_Init+0x74>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2102      	movs	r1, #2
 8000dc6:	480b      	ldr	r0, [pc, #44]	@ (8000df4 <MX_GPIO_Init+0x78>)
 8000dc8:	f001 fa9a 	bl	8002300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000ddc:	f107 030c 	add.w	r3, r7, #12
 8000de0:	4619      	mov	r1, r3
 8000de2:	4804      	ldr	r0, [pc, #16]	@ (8000df4 <MX_GPIO_Init+0x78>)
 8000de4:	f001 f8c8 	bl	8001f78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000de8:	bf00      	nop
 8000dea:	3720      	adds	r7, #32
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40023800 	.word	0x40023800
 8000df4:	40022000 	.word	0x40022000

08000df8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000dfc:	b672      	cpsid	i
}
 8000dfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <Error_Handler+0x8>

08000e04 <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e3c <SD_CheckStatus+0x38>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8000e14:	f009 fd34 	bl	800a880 <BSP_SD_GetCardState>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d107      	bne.n	8000e2e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8000e1e:	4b07      	ldr	r3, [pc, #28]	@ (8000e3c <SD_CheckStatus+0x38>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	f023 0301 	bic.w	r3, r3, #1
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4b04      	ldr	r3, [pc, #16]	@ (8000e3c <SD_CheckStatus+0x38>)
 8000e2c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8000e2e:	4b03      	ldr	r3, [pc, #12]	@ (8000e3c <SD_CheckStatus+0x38>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	b2db      	uxtb	r3, r3
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20000000 	.word	0x20000000

08000e40 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e78 <SD_initialize+0x38>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	701a      	strb	r2, [r3, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8000e50:	f009 fb68 	bl	800a524 <BSP_SD_Init>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d107      	bne.n	8000e6a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ffd1 	bl	8000e04 <SD_CheckStatus>
 8000e62:	4603      	mov	r3, r0
 8000e64:	461a      	mov	r2, r3
 8000e66:	4b04      	ldr	r3, [pc, #16]	@ (8000e78 <SD_initialize+0x38>)
 8000e68:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8000e6a:	4b03      	ldr	r3, [pc, #12]	@ (8000e78 <SD_initialize+0x38>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	b2db      	uxtb	r3, r3
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000000 	.word	0x20000000

08000e7c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff ffbb 	bl	8000e04 <SD_CheckStatus>
 8000e8e:	4603      	mov	r3, r0
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60b9      	str	r1, [r7, #8]
 8000ea0:	607a      	str	r2, [r7, #4]
 8000ea2:	603b      	str	r3, [r7, #0]
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8000eac:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb0:	683a      	ldr	r2, [r7, #0]
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	68b8      	ldr	r0, [r7, #8]
 8000eb6:	f009 fb97 	bl	800a5e8 <BSP_SD_ReadBlocks>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d107      	bne.n	8000ed0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8000ec0:	bf00      	nop
 8000ec2:	f009 fcdd 	bl	800a880 <BSP_SD_GetCardState>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d1fa      	bne.n	8000ec2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8000ed0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <SD_write>:


#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b086      	sub	sp, #24
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
 8000ee4:	603b      	str	r3, [r7, #0]
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8000eee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef2:	683a      	ldr	r2, [r7, #0]
 8000ef4:	6879      	ldr	r1, [r7, #4]
 8000ef6:	68b8      	ldr	r0, [r7, #8]
 8000ef8:	f009 fb92 	bl	800a620 <BSP_SD_WriteBlocks>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d107      	bne.n	8000f12 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8000f02:	bf00      	nop
 8000f04:	f009 fcbc 	bl	800a880 <BSP_SD_GetCardState>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1fa      	bne.n	8000f04 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8000f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3718      	adds	r7, #24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <SD_ioctl>:
#endif /* _USE_WRITE == 1 */


#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08c      	sub	sp, #48	@ 0x30
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	603a      	str	r2, [r7, #0]
 8000f26:	71fb      	strb	r3, [r7, #7]
 8000f28:	460b      	mov	r3, r1
 8000f2a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000f32:	4b25      	ldr	r3, [pc, #148]	@ (8000fc8 <SD_ioctl+0xac>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	f003 0301 	and.w	r3, r3, #1
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <SD_ioctl+0x28>
 8000f40:	2303      	movs	r3, #3
 8000f42:	e03c      	b.n	8000fbe <SD_ioctl+0xa2>

  switch (cmd)
 8000f44:	79bb      	ldrb	r3, [r7, #6]
 8000f46:	2b03      	cmp	r3, #3
 8000f48:	d834      	bhi.n	8000fb4 <SD_ioctl+0x98>
 8000f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8000f50 <SD_ioctl+0x34>)
 8000f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f50:	08000f61 	.word	0x08000f61
 8000f54:	08000f69 	.word	0x08000f69
 8000f58:	08000f81 	.word	0x08000f81
 8000f5c:	08000f9b 	.word	0x08000f9b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8000f60:	2300      	movs	r3, #0
 8000f62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8000f66:	e028      	b.n	8000fba <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8000f68:	f107 030c 	add.w	r3, r7, #12
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f009 fc97 	bl	800a8a0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8000f72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8000f7e:	e01c      	b.n	8000fba <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	4618      	mov	r0, r3
 8000f86:	f009 fc8b 	bl	800a8a0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8000f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8000f92:	2300      	movs	r3, #0
 8000f94:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8000f98:	e00f      	b.n	8000fba <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8000f9a:	f107 030c 	add.w	r3, r7, #12
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f009 fc7e 	bl	800a8a0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8000fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fa6:	0a5a      	lsrs	r2, r3, #9
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	601a      	str	r2, [r3, #0]
	res = RES_OK;
 8000fac:	2300      	movs	r3, #0
 8000fae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8000fb2:	e002      	b.n	8000fba <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8000fb4:	2304      	movs	r3, #4
 8000fb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8000fba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3730      	adds	r7, #48	@ 0x30
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000000 	.word	0x20000000

08000fcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd2:	4b0f      	ldr	r3, [pc, #60]	@ (8001010 <HAL_MspInit+0x44>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd6:	4a0e      	ldr	r2, [pc, #56]	@ (8001010 <HAL_MspInit+0x44>)
 8000fd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fde:	4b0c      	ldr	r3, [pc, #48]	@ (8001010 <HAL_MspInit+0x44>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fea:	4b09      	ldr	r3, [pc, #36]	@ (8001010 <HAL_MspInit+0x44>)
 8000fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fee:	4a08      	ldr	r2, [pc, #32]	@ (8001010 <HAL_MspInit+0x44>)
 8000ff0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ff4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ff6:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <HAL_MspInit+0x44>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ffa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ffe:	603b      	str	r3, [r7, #0]
 8001000:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40023800 	.word	0x40023800

08001014 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a0a      	ldr	r2, [pc, #40]	@ (800104c <HAL_CRC_MspInit+0x38>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d10b      	bne.n	800103e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001026:	4b0a      	ldr	r3, [pc, #40]	@ (8001050 <HAL_CRC_MspInit+0x3c>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102a:	4a09      	ldr	r2, [pc, #36]	@ (8001050 <HAL_CRC_MspInit+0x3c>)
 800102c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001030:	6313      	str	r3, [r2, #48]	@ 0x30
 8001032:	4b07      	ldr	r3, [pc, #28]	@ (8001050 <HAL_CRC_MspInit+0x3c>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 800103e:	bf00      	nop
 8001040:	3714      	adds	r7, #20
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	40023000 	.word	0x40023000
 8001050:	40023800 	.word	0x40023800

08001054 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a0a      	ldr	r2, [pc, #40]	@ (800108c <HAL_DMA2D_MspInit+0x38>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d10b      	bne.n	800107e <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001066:	4b0a      	ldr	r3, [pc, #40]	@ (8001090 <HAL_DMA2D_MspInit+0x3c>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	4a09      	ldr	r2, [pc, #36]	@ (8001090 <HAL_DMA2D_MspInit+0x3c>)
 800106c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001070:	6313      	str	r3, [r2, #48]	@ 0x30
 8001072:	4b07      	ldr	r3, [pc, #28]	@ (8001090 <HAL_DMA2D_MspInit+0x3c>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001076:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 800107e:	bf00      	nop
 8001080:	3714      	adds	r7, #20
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	4002b000 	.word	0x4002b000
 8001090:	40023800 	.word	0x40023800

08001094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <NMI_Handler+0x4>

0800109c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <HardFault_Handler+0x4>

080010a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a8:	bf00      	nop
 80010aa:	e7fd      	b.n	80010a8 <MemManage_Handler+0x4>

080010ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b0:	bf00      	nop
 80010b2:	e7fd      	b.n	80010b0 <BusFault_Handler+0x4>

080010b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <UsageFault_Handler+0x4>

080010bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ea:	f000 f8bb 	bl	8001264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <LTDC_IRQHandler>:
/* please refer to the startup file (startup_stm32f7xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void LTDC_IRQHandler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  HAL_LTDC_IRQHandler(&hLtdcHandler);
 80010f8:	4802      	ldr	r0, [pc, #8]	@ (8001104 <LTDC_IRQHandler+0x10>)
 80010fa:	f001 ffab 	bl	8003054 <HAL_LTDC_IRQHandler>
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200008dc 	.word	0x200008dc

08001108 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001110:	4a14      	ldr	r2, [pc, #80]	@ (8001164 <_sbrk+0x5c>)
 8001112:	4b15      	ldr	r3, [pc, #84]	@ (8001168 <_sbrk+0x60>)
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800111c:	4b13      	ldr	r3, [pc, #76]	@ (800116c <_sbrk+0x64>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d102      	bne.n	800112a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001124:	4b11      	ldr	r3, [pc, #68]	@ (800116c <_sbrk+0x64>)
 8001126:	4a12      	ldr	r2, [pc, #72]	@ (8001170 <_sbrk+0x68>)
 8001128:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800112a:	4b10      	ldr	r3, [pc, #64]	@ (800116c <_sbrk+0x64>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4413      	add	r3, r2
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	429a      	cmp	r2, r3
 8001136:	d207      	bcs.n	8001148 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001138:	f00a f8ea 	bl	800b310 <__errno>
 800113c:	4603      	mov	r3, r0
 800113e:	220c      	movs	r2, #12
 8001140:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	e009      	b.n	800115c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001148:	4b08      	ldr	r3, [pc, #32]	@ (800116c <_sbrk+0x64>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800114e:	4b07      	ldr	r3, [pc, #28]	@ (800116c <_sbrk+0x64>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4413      	add	r3, r2
 8001156:	4a05      	ldr	r2, [pc, #20]	@ (800116c <_sbrk+0x64>)
 8001158:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800115a:	68fb      	ldr	r3, [r7, #12]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3718      	adds	r7, #24
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20050000 	.word	0x20050000
 8001168:	00000400 	.word	0x00000400
 800116c:	2000083c 	.word	0x2000083c
 8001170:	20000de8 	.word	0x20000de8

08001174 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001178:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <SystemInit+0x20>)
 800117a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800117e:	4a05      	ldr	r2, [pc, #20]	@ (8001194 <SystemInit+0x20>)
 8001180:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001184:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001198:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011d0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 800119c:	f7ff ffea 	bl	8001174 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011a0:	480c      	ldr	r0, [pc, #48]	@ (80011d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011a2:	490d      	ldr	r1, [pc, #52]	@ (80011d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011a4:	4a0d      	ldr	r2, [pc, #52]	@ (80011dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a8:	e002      	b.n	80011b0 <LoopCopyDataInit>

080011aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ae:	3304      	adds	r3, #4

080011b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b4:	d3f9      	bcc.n	80011aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b6:	4a0a      	ldr	r2, [pc, #40]	@ (80011e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011b8:	4c0a      	ldr	r4, [pc, #40]	@ (80011e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011bc:	e001      	b.n	80011c2 <LoopFillZerobss>

080011be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c0:	3204      	adds	r2, #4

080011c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c4:	d3fb      	bcc.n	80011be <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80011c6:	f00a f8a9 	bl	800b31c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ca:	f7ff fc0d 	bl	80009e8 <main>
  bx  lr    
 80011ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011d0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80011d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d8:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80011dc:	0800d73c 	.word	0x0800d73c
  ldr r2, =_sbss
 80011e0:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80011e4:	20000de4 	.word	0x20000de4

080011e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011e8:	e7fe      	b.n	80011e8 <ADC_IRQHandler>

080011ea <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ee:	2003      	movs	r0, #3
 80011f0:	f000 f94c 	bl	800148c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011f4:	200f      	movs	r0, #15
 80011f6:	f000 f805 	bl	8001204 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011fa:	f7ff fee7 	bl	8000fcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011fe:	2300      	movs	r3, #0
}
 8001200:	4618      	mov	r0, r3
 8001202:	bd80      	pop	{r7, pc}

08001204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800120c:	4b12      	ldr	r3, [pc, #72]	@ (8001258 <HAL_InitTick+0x54>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4b12      	ldr	r3, [pc, #72]	@ (800125c <HAL_InitTick+0x58>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	4619      	mov	r1, r3
 8001216:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800121a:	fbb3 f3f1 	udiv	r3, r3, r1
 800121e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f967 	bl	80014f6 <HAL_SYSTICK_Config>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e00e      	b.n	8001250 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b0f      	cmp	r3, #15
 8001236:	d80a      	bhi.n	800124e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001238:	2200      	movs	r2, #0
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	f04f 30ff 	mov.w	r0, #4294967295
 8001240:	f000 f92f 	bl	80014a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001244:	4a06      	ldr	r2, [pc, #24]	@ (8001260 <HAL_InitTick+0x5c>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800124a:	2300      	movs	r3, #0
 800124c:	e000      	b.n	8001250 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
}
 8001250:	4618      	mov	r0, r3
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000004 	.word	0x20000004
 800125c:	2000000c 	.word	0x2000000c
 8001260:	20000008 	.word	0x20000008

08001264 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001268:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <HAL_IncTick+0x20>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <HAL_IncTick+0x24>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4413      	add	r3, r2
 8001274:	4a04      	ldr	r2, [pc, #16]	@ (8001288 <HAL_IncTick+0x24>)
 8001276:	6013      	str	r3, [r2, #0]
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	2000000c 	.word	0x2000000c
 8001288:	20000840 	.word	0x20000840

0800128c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return uwTick;
 8001290:	4b03      	ldr	r3, [pc, #12]	@ (80012a0 <HAL_GetTick+0x14>)
 8001292:	681b      	ldr	r3, [r3, #0]
}
 8001294:	4618      	mov	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	20000840 	.word	0x20000840

080012a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012ac:	f7ff ffee 	bl	800128c <HAL_GetTick>
 80012b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012bc:	d005      	beq.n	80012ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012be:	4b0a      	ldr	r3, [pc, #40]	@ (80012e8 <HAL_Delay+0x44>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	461a      	mov	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4413      	add	r3, r2
 80012c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ca:	bf00      	nop
 80012cc:	f7ff ffde 	bl	800128c <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d8f7      	bhi.n	80012cc <HAL_Delay+0x28>
  {
  }
}
 80012dc:	bf00      	nop
 80012de:	bf00      	nop
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	2000000c 	.word	0x2000000c

080012ec <__NVIC_SetPriorityGrouping>:
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012fc:	4b0b      	ldr	r3, [pc, #44]	@ (800132c <__NVIC_SetPriorityGrouping+0x40>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001302:	68ba      	ldr	r2, [r7, #8]
 8001304:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001308:	4013      	ands	r3, r2
 800130a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001314:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <__NVIC_SetPriorityGrouping+0x44>)
 8001316:	4313      	orrs	r3, r2
 8001318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800131a:	4a04      	ldr	r2, [pc, #16]	@ (800132c <__NVIC_SetPriorityGrouping+0x40>)
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	60d3      	str	r3, [r2, #12]
}
 8001320:	bf00      	nop
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	e000ed00 	.word	0xe000ed00
 8001330:	05fa0000 	.word	0x05fa0000

08001334 <__NVIC_GetPriorityGrouping>:
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001338:	4b04      	ldr	r3, [pc, #16]	@ (800134c <__NVIC_GetPriorityGrouping+0x18>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	0a1b      	lsrs	r3, r3, #8
 800133e:	f003 0307 	and.w	r3, r3, #7
}
 8001342:	4618      	mov	r0, r3
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <__NVIC_EnableIRQ>:
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	2b00      	cmp	r3, #0
 8001360:	db0b      	blt.n	800137a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	f003 021f 	and.w	r2, r3, #31
 8001368:	4907      	ldr	r1, [pc, #28]	@ (8001388 <__NVIC_EnableIRQ+0x38>)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	095b      	lsrs	r3, r3, #5
 8001370:	2001      	movs	r0, #1
 8001372:	fa00 f202 	lsl.w	r2, r0, r2
 8001376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000e100 	.word	0xe000e100

0800138c <__NVIC_SetPriority>:
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	6039      	str	r1, [r7, #0]
 8001396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139c:	2b00      	cmp	r3, #0
 800139e:	db0a      	blt.n	80013b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	490c      	ldr	r1, [pc, #48]	@ (80013d8 <__NVIC_SetPriority+0x4c>)
 80013a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013aa:	0112      	lsls	r2, r2, #4
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	440b      	add	r3, r1
 80013b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80013b4:	e00a      	b.n	80013cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	4908      	ldr	r1, [pc, #32]	@ (80013dc <__NVIC_SetPriority+0x50>)
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	f003 030f 	and.w	r3, r3, #15
 80013c2:	3b04      	subs	r3, #4
 80013c4:	0112      	lsls	r2, r2, #4
 80013c6:	b2d2      	uxtb	r2, r2
 80013c8:	440b      	add	r3, r1
 80013ca:	761a      	strb	r2, [r3, #24]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000e100 	.word	0xe000e100
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <NVIC_EncodePriority>:
{
 80013e0:	b480      	push	{r7}
 80013e2:	b089      	sub	sp, #36	@ 0x24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	f1c3 0307 	rsb	r3, r3, #7
 80013fa:	2b04      	cmp	r3, #4
 80013fc:	bf28      	it	cs
 80013fe:	2304      	movcs	r3, #4
 8001400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3304      	adds	r3, #4
 8001406:	2b06      	cmp	r3, #6
 8001408:	d902      	bls.n	8001410 <NVIC_EncodePriority+0x30>
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3b03      	subs	r3, #3
 800140e:	e000      	b.n	8001412 <NVIC_EncodePriority+0x32>
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001414:	f04f 32ff 	mov.w	r2, #4294967295
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43da      	mvns	r2, r3
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	401a      	ands	r2, r3
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001428:	f04f 31ff 	mov.w	r1, #4294967295
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	fa01 f303 	lsl.w	r3, r1, r3
 8001432:	43d9      	mvns	r1, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001438:	4313      	orrs	r3, r2
}
 800143a:	4618      	mov	r0, r3
 800143c:	3724      	adds	r7, #36	@ 0x24
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
	...

08001448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3b01      	subs	r3, #1
 8001454:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001458:	d301      	bcc.n	800145e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800145a:	2301      	movs	r3, #1
 800145c:	e00f      	b.n	800147e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800145e:	4a0a      	ldr	r2, [pc, #40]	@ (8001488 <SysTick_Config+0x40>)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3b01      	subs	r3, #1
 8001464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001466:	210f      	movs	r1, #15
 8001468:	f04f 30ff 	mov.w	r0, #4294967295
 800146c:	f7ff ff8e 	bl	800138c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001470:	4b05      	ldr	r3, [pc, #20]	@ (8001488 <SysTick_Config+0x40>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001476:	4b04      	ldr	r3, [pc, #16]	@ (8001488 <SysTick_Config+0x40>)
 8001478:	2207      	movs	r2, #7
 800147a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	e000e010 	.word	0xe000e010

0800148c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff ff29 	bl	80012ec <__NVIC_SetPriorityGrouping>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b086      	sub	sp, #24
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	4603      	mov	r3, r0
 80014aa:	60b9      	str	r1, [r7, #8]
 80014ac:	607a      	str	r2, [r7, #4]
 80014ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014b4:	f7ff ff3e 	bl	8001334 <__NVIC_GetPriorityGrouping>
 80014b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	68b9      	ldr	r1, [r7, #8]
 80014be:	6978      	ldr	r0, [r7, #20]
 80014c0:	f7ff ff8e 	bl	80013e0 <NVIC_EncodePriority>
 80014c4:	4602      	mov	r2, r0
 80014c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ca:	4611      	mov	r1, r2
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff5d 	bl	800138c <__NVIC_SetPriority>
}
 80014d2:	bf00      	nop
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	4603      	mov	r3, r0
 80014e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff31 	bl	8001350 <__NVIC_EnableIRQ>
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff ffa2 	bl	8001448 <SysTick_Config>
 8001504:	4603      	mov	r3, r0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e054      	b.n	80015cc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	7f5b      	ldrb	r3, [r3, #29]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b00      	cmp	r3, #0
 800152a:	d105      	bne.n	8001538 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7ff fd6e 	bl	8001014 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2202      	movs	r2, #2
 800153c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	791b      	ldrb	r3, [r3, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10c      	bne.n	8001560 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a22      	ldr	r2, [pc, #136]	@ (80015d4 <HAL_CRC_Init+0xc4>)
 800154c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f022 0218 	bic.w	r2, r2, #24
 800155c:	609a      	str	r2, [r3, #8]
 800155e:	e00c      	b.n	800157a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6899      	ldr	r1, [r3, #8]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	461a      	mov	r2, r3
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 f834 	bl	80015d8 <HAL_CRCEx_Polynomial_Set>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e028      	b.n	80015cc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	795b      	ldrb	r3, [r3, #5]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d105      	bne.n	800158e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f04f 32ff 	mov.w	r2, #4294967295
 800158a:	611a      	str	r2, [r3, #16]
 800158c:	e004      	b.n	8001598 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	6912      	ldr	r2, [r2, #16]
 8001596:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	695a      	ldr	r2, [r3, #20]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	699a      	ldr	r2, [r3, #24]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	430a      	orrs	r2, r1
 80015c2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80015ca:	2300      	movs	r3, #0
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	04c11db7 	.word	0x04c11db7

080015d8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80015d8:	b480      	push	{r7}
 80015da:	b087      	sub	sp, #28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015e4:	2300      	movs	r3, #0
 80015e6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80015e8:	231f      	movs	r3, #31
 80015ea:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80015ec:	bf00      	nop
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1e5a      	subs	r2, r3, #1
 80015f2:	613a      	str	r2, [r7, #16]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d009      	beq.n	800160c <HAL_CRCEx_Polynomial_Set+0x34>
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	f003 031f 	and.w	r3, r3, #31
 80015fe:	68ba      	ldr	r2, [r7, #8]
 8001600:	fa22 f303 	lsr.w	r3, r2, r3
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0f0      	beq.n	80015ee <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b18      	cmp	r3, #24
 8001610:	d846      	bhi.n	80016a0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001612:	a201      	add	r2, pc, #4	@ (adr r2, 8001618 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001618:	080016a7 	.word	0x080016a7
 800161c:	080016a1 	.word	0x080016a1
 8001620:	080016a1 	.word	0x080016a1
 8001624:	080016a1 	.word	0x080016a1
 8001628:	080016a1 	.word	0x080016a1
 800162c:	080016a1 	.word	0x080016a1
 8001630:	080016a1 	.word	0x080016a1
 8001634:	080016a1 	.word	0x080016a1
 8001638:	08001695 	.word	0x08001695
 800163c:	080016a1 	.word	0x080016a1
 8001640:	080016a1 	.word	0x080016a1
 8001644:	080016a1 	.word	0x080016a1
 8001648:	080016a1 	.word	0x080016a1
 800164c:	080016a1 	.word	0x080016a1
 8001650:	080016a1 	.word	0x080016a1
 8001654:	080016a1 	.word	0x080016a1
 8001658:	08001689 	.word	0x08001689
 800165c:	080016a1 	.word	0x080016a1
 8001660:	080016a1 	.word	0x080016a1
 8001664:	080016a1 	.word	0x080016a1
 8001668:	080016a1 	.word	0x080016a1
 800166c:	080016a1 	.word	0x080016a1
 8001670:	080016a1 	.word	0x080016a1
 8001674:	080016a1 	.word	0x080016a1
 8001678:	0800167d 	.word	0x0800167d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	2b06      	cmp	r3, #6
 8001680:	d913      	bls.n	80016aa <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001686:	e010      	b.n	80016aa <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	2b07      	cmp	r3, #7
 800168c:	d90f      	bls.n	80016ae <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001692:	e00c      	b.n	80016ae <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	2b0f      	cmp	r3, #15
 8001698:	d90b      	bls.n	80016b2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800169e:	e008      	b.n	80016b2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	75fb      	strb	r3, [r7, #23]
      break;
 80016a4:	e006      	b.n	80016b4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80016a6:	bf00      	nop
 80016a8:	e004      	b.n	80016b4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80016aa:	bf00      	nop
 80016ac:	e002      	b.n	80016b4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80016ae:	bf00      	nop
 80016b0:	e000      	b.n	80016b4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80016b2:	bf00      	nop
  }
  if (status == HAL_OK)
 80016b4:	7dfb      	ldrb	r3, [r7, #23]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d10d      	bne.n	80016d6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f023 0118 	bic.w	r1, r3, #24
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	430a      	orrs	r2, r1
 80016d4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80016d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	371c      	adds	r7, #28
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80016f0:	f7ff fdcc 	bl	800128c <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d101      	bne.n	8001700 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e099      	b.n	8001834 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2202      	movs	r2, #2
 8001704:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 0201 	bic.w	r2, r2, #1
 800171e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001720:	e00f      	b.n	8001742 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001722:	f7ff fdb3 	bl	800128c <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b05      	cmp	r3, #5
 800172e:	d908      	bls.n	8001742 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2220      	movs	r2, #32
 8001734:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2203      	movs	r2, #3
 800173a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e078      	b.n	8001834 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1e8      	bne.n	8001722 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001758:	697a      	ldr	r2, [r7, #20]
 800175a:	4b38      	ldr	r3, [pc, #224]	@ (800183c <HAL_DMA_Init+0x158>)
 800175c:	4013      	ands	r3, r2
 800175e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800176e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800177a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001786:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a1b      	ldr	r3, [r3, #32]
 800178c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	4313      	orrs	r3, r2
 8001792:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001798:	2b04      	cmp	r3, #4
 800179a:	d107      	bne.n	80017ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a4:	4313      	orrs	r3, r2
 80017a6:	697a      	ldr	r2, [r7, #20]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	697a      	ldr	r2, [r7, #20]
 80017b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	f023 0307 	bic.w	r3, r3, #7
 80017c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c8:	697a      	ldr	r2, [r7, #20]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	d117      	bne.n	8001806 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	4313      	orrs	r3, r2
 80017de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d00e      	beq.n	8001806 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f000 f8bd 	bl	8001968 <DMA_CheckFifoParam>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d008      	beq.n	8001806 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2240      	movs	r2, #64	@ 0x40
 80017f8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001802:	2301      	movs	r3, #1
 8001804:	e016      	b.n	8001834 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 f874 	bl	80018fc <DMA_CalcBaseAndBitshift>
 8001814:	4603      	mov	r3, r0
 8001816:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800181c:	223f      	movs	r2, #63	@ 0x3f
 800181e:	409a      	lsls	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	3718      	adds	r7, #24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	f010803f 	.word	0xf010803f

08001840 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e050      	b.n	80018f4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d101      	bne.n	8001862 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800185e:	2302      	movs	r3, #2
 8001860:	e048      	b.n	80018f4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f022 0201 	bic.w	r2, r2, #1
 8001870:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2200      	movs	r2, #0
 8001880:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2200      	movs	r2, #0
 8001890:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2200      	movs	r2, #0
 8001898:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2221      	movs	r2, #33	@ 0x21
 80018a0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 f82a 	bl	80018fc <DMA_CalcBaseAndBitshift>
 80018a8:	4603      	mov	r3, r0
 80018aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018b0:	223f      	movs	r2, #63	@ 0x3f
 80018b2:	409a      	lsls	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	b2db      	uxtb	r3, r3
 800190a:	3b10      	subs	r3, #16
 800190c:	4a13      	ldr	r2, [pc, #76]	@ (800195c <DMA_CalcBaseAndBitshift+0x60>)
 800190e:	fba2 2303 	umull	r2, r3, r2, r3
 8001912:	091b      	lsrs	r3, r3, #4
 8001914:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001916:	4a12      	ldr	r2, [pc, #72]	@ (8001960 <DMA_CalcBaseAndBitshift+0x64>)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4413      	add	r3, r2
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	461a      	mov	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2b03      	cmp	r3, #3
 8001928:	d908      	bls.n	800193c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	461a      	mov	r2, r3
 8001930:	4b0c      	ldr	r3, [pc, #48]	@ (8001964 <DMA_CalcBaseAndBitshift+0x68>)
 8001932:	4013      	ands	r3, r2
 8001934:	1d1a      	adds	r2, r3, #4
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	659a      	str	r2, [r3, #88]	@ 0x58
 800193a:	e006      	b.n	800194a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	461a      	mov	r2, r3
 8001942:	4b08      	ldr	r3, [pc, #32]	@ (8001964 <DMA_CalcBaseAndBitshift+0x68>)
 8001944:	4013      	ands	r3, r2
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800194e:	4618      	mov	r0, r3
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	aaaaaaab 	.word	0xaaaaaaab
 8001960:	0800bbb8 	.word	0x0800bbb8
 8001964:	fffffc00 	.word	0xfffffc00

08001968 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001970:	2300      	movs	r3, #0
 8001972:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001978:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d11f      	bne.n	80019c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	2b03      	cmp	r3, #3
 8001986:	d856      	bhi.n	8001a36 <DMA_CheckFifoParam+0xce>
 8001988:	a201      	add	r2, pc, #4	@ (adr r2, 8001990 <DMA_CheckFifoParam+0x28>)
 800198a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800198e:	bf00      	nop
 8001990:	080019a1 	.word	0x080019a1
 8001994:	080019b3 	.word	0x080019b3
 8001998:	080019a1 	.word	0x080019a1
 800199c:	08001a37 	.word	0x08001a37
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d046      	beq.n	8001a3a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019b0:	e043      	b.n	8001a3a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80019ba:	d140      	bne.n	8001a3e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019c0:	e03d      	b.n	8001a3e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019ca:	d121      	bne.n	8001a10 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	2b03      	cmp	r3, #3
 80019d0:	d837      	bhi.n	8001a42 <DMA_CheckFifoParam+0xda>
 80019d2:	a201      	add	r2, pc, #4	@ (adr r2, 80019d8 <DMA_CheckFifoParam+0x70>)
 80019d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d8:	080019e9 	.word	0x080019e9
 80019dc:	080019ef 	.word	0x080019ef
 80019e0:	080019e9 	.word	0x080019e9
 80019e4:	08001a01 	.word	0x08001a01
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	73fb      	strb	r3, [r7, #15]
      break;
 80019ec:	e030      	b.n	8001a50 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d025      	beq.n	8001a46 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019fe:	e022      	b.n	8001a46 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a04:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001a08:	d11f      	bne.n	8001a4a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a0e:	e01c      	b.n	8001a4a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d903      	bls.n	8001a1e <DMA_CheckFifoParam+0xb6>
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	2b03      	cmp	r3, #3
 8001a1a:	d003      	beq.n	8001a24 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a1c:	e018      	b.n	8001a50 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	73fb      	strb	r3, [r7, #15]
      break;
 8001a22:	e015      	b.n	8001a50 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d00e      	beq.n	8001a4e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	73fb      	strb	r3, [r7, #15]
      break;
 8001a34:	e00b      	b.n	8001a4e <DMA_CheckFifoParam+0xe6>
      break;
 8001a36:	bf00      	nop
 8001a38:	e00a      	b.n	8001a50 <DMA_CheckFifoParam+0xe8>
      break;
 8001a3a:	bf00      	nop
 8001a3c:	e008      	b.n	8001a50 <DMA_CheckFifoParam+0xe8>
      break;
 8001a3e:	bf00      	nop
 8001a40:	e006      	b.n	8001a50 <DMA_CheckFifoParam+0xe8>
      break;
 8001a42:	bf00      	nop
 8001a44:	e004      	b.n	8001a50 <DMA_CheckFifoParam+0xe8>
      break;
 8001a46:	bf00      	nop
 8001a48:	e002      	b.n	8001a50 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a4a:	bf00      	nop
 8001a4c:	e000      	b.n	8001a50 <DMA_CheckFifoParam+0xe8>
      break;
 8001a4e:	bf00      	nop
    }
  } 
  
  return status; 
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3714      	adds	r7, #20
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop

08001a60 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e039      	b.n	8001ae6 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d106      	bne.n	8001a8c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff fae4 	bl	8001054 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2202      	movs	r2, #2
 8001a90:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685a      	ldr	r2, [r3, #4]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ab0:	f023 0107 	bic.w	r1, r3, #7
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	430a      	orrs	r2, r1
 8001abe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8001af0 <HAL_DMA2D_Init+0x90>)
 8001ac8:	4013      	ands	r3, r2
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	68d1      	ldr	r1, [r2, #12]
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	6812      	ldr	r2, [r2, #0]
 8001ad2:	430b      	orrs	r3, r1
 8001ad4:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	ffffc000 	.word	0xffffc000

08001af4 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af02      	add	r7, sp, #8
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
 8001b00:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d101      	bne.n	8001b10 <HAL_DMA2D_Start+0x1c>
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	e018      	b.n	8001b42 <HAL_DMA2D_Start+0x4e>
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	68b9      	ldr	r1, [r7, #8]
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f000 f988 	bl	8001e40 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f042 0201 	orr.w	r2, r2, #1
 8001b3e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b086      	sub	sp, #24
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
 8001b52:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8001b54:	2300      	movs	r3, #0
 8001b56:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d056      	beq.n	8001c14 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b66:	f7ff fb91 	bl	800128c <HAL_GetTick>
 8001b6a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001b6c:	e04b      	b.n	8001c06 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d023      	beq.n	8001bc8 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f003 0320 	and.w	r3, r3, #32
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d005      	beq.n	8001b96 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b8e:	f043 0202 	orr.w	r2, r3, #2
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d005      	beq.n	8001bac <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ba4:	f043 0201 	orr.w	r2, r3, #1
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2221      	movs	r2, #33	@ 0x21
 8001bb2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2204      	movs	r2, #4
 8001bb8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e0a5      	b.n	8001d14 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bce:	d01a      	beq.n	8001c06 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001bd0:	f7ff fb5c 	bl	800128c <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d302      	bcc.n	8001be6 <HAL_DMA2D_PollForTransfer+0x9c>
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d10f      	bne.n	8001c06 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bea:	f043 0220 	orr.w	r2, r3, #32
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e086      	b.n	8001d14 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0ac      	beq.n	8001b6e <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	f003 0320 	and.w	r3, r3, #32
 8001c1e:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c26:	f003 0320 	and.w	r3, r3, #32
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d061      	beq.n	8001cfa <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c36:	f7ff fb29 	bl	800128c <HAL_GetTick>
 8001c3a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001c3c:	e056      	b.n	8001cec <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d02e      	beq.n	8001cae <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f003 0308 	and.w	r3, r3, #8
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d005      	beq.n	8001c66 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c5e:	f043 0204 	orr.w	r2, r3, #4
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f003 0320 	and.w	r3, r3, #32
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d005      	beq.n	8001c7c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c74:	f043 0202 	orr.w	r2, r3, #2
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d005      	beq.n	8001c92 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c8a:	f043 0201 	orr.w	r2, r3, #1
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2229      	movs	r2, #41	@ 0x29
 8001c98:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2204      	movs	r2, #4
 8001c9e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e032      	b.n	8001d14 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb4:	d01a      	beq.n	8001cec <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001cb6:	f7ff fae9 	bl	800128c <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d302      	bcc.n	8001ccc <HAL_DMA2D_PollForTransfer+0x182>
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d10f      	bne.n	8001cec <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cd0:	f043 0220 	orr.w	r2, r3, #32
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2203      	movs	r2, #3
 8001cdc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e013      	b.n	8001d14 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f003 0310 	and.w	r3, r3, #16
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0a1      	beq.n	8001c3e <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2212      	movs	r2, #18
 8001d00:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b087      	sub	sp, #28
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d101      	bne.n	8001d3c <HAL_DMA2D_ConfigLayer+0x20>
 8001d38:	2302      	movs	r3, #2
 8001d3a:	e079      	b.n	8001e30 <HAL_DMA2D_ConfigLayer+0x114>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2202      	movs	r2, #2
 8001d48:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	011b      	lsls	r3, r3, #4
 8001d50:	3318      	adds	r3, #24
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	4413      	add	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	041b      	lsls	r3, r3, #16
 8001d62:	4313      	orrs	r3, r2
 8001d64:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001d66:	4b35      	ldr	r3, [pc, #212]	@ (8001e3c <HAL_DMA2D_ConfigLayer+0x120>)
 8001d68:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b0a      	cmp	r3, #10
 8001d70:	d003      	beq.n	8001d7a <HAL_DMA2D_ConfigLayer+0x5e>
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	2b09      	cmp	r3, #9
 8001d78:	d107      	bne.n	8001d8a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	617b      	str	r3, [r7, #20]
 8001d88:	e005      	b.n	8001d96 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	061b      	lsls	r3, r3, #24
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d120      	bne.n	8001dde <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	43db      	mvns	r3, r3
 8001da6:	ea02 0103 	and.w	r1, r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	430a      	orrs	r2, r1
 8001db2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	6812      	ldr	r2, [r2, #0]
 8001dbc:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b0a      	cmp	r3, #10
 8001dc4:	d003      	beq.n	8001dce <HAL_DMA2D_ConfigLayer+0xb2>
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b09      	cmp	r3, #9
 8001dcc:	d127      	bne.n	8001e1e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	68da      	ldr	r2, [r3, #12]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001dda:	629a      	str	r2, [r3, #40]	@ 0x28
 8001ddc:	e01f      	b.n	8001e1e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	69da      	ldr	r2, [r3, #28]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	43db      	mvns	r3, r3
 8001de8:	ea02 0103 	and.w	r1, r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	6812      	ldr	r2, [r2, #0]
 8001dfe:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b0a      	cmp	r3, #10
 8001e06:	d003      	beq.n	8001e10 <HAL_DMA2D_ConfigLayer+0xf4>
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b09      	cmp	r3, #9
 8001e0e:	d106      	bne.n	8001e1e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001e1c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	371c      	adds	r7, #28
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	ff03000f 	.word	0xff03000f

08001e40 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b08b      	sub	sp, #44	@ 0x2c
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
 8001e4c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e54:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	041a      	lsls	r2, r3, #16
 8001e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001e78:	d174      	bne.n	8001f64 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001e80:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001e88:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8001e90:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d108      	bne.n	8001eb2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	6a3b      	ldr	r3, [r7, #32]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eb0:	e053      	b.n	8001f5a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d106      	bne.n	8001ec8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	697a      	ldr	r2, [r7, #20]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ec6:	e048      	b.n	8001f5a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d111      	bne.n	8001ef4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	0cdb      	lsrs	r3, r3, #19
 8001ed4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	0a9b      	lsrs	r3, r3, #10
 8001eda:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	08db      	lsrs	r3, r3, #3
 8001ee0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	015a      	lsls	r2, r3, #5
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	02db      	lsls	r3, r3, #11
 8001eea:	4313      	orrs	r3, r2
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ef2:	e032      	b.n	8001f5a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	2b03      	cmp	r3, #3
 8001efa:	d117      	bne.n	8001f2c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8001efc:	6a3b      	ldr	r3, [r7, #32]
 8001efe:	0fdb      	lsrs	r3, r3, #31
 8001f00:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	0cdb      	lsrs	r3, r3, #19
 8001f06:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	0adb      	lsrs	r3, r3, #11
 8001f0c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	08db      	lsrs	r3, r3, #3
 8001f12:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	015a      	lsls	r2, r3, #5
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	029b      	lsls	r3, r3, #10
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	6a3b      	ldr	r3, [r7, #32]
 8001f20:	03db      	lsls	r3, r3, #15
 8001f22:	4313      	orrs	r3, r2
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f2a:	e016      	b.n	8001f5a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8001f2c:	6a3b      	ldr	r3, [r7, #32]
 8001f2e:	0f1b      	lsrs	r3, r3, #28
 8001f30:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	0d1b      	lsrs	r3, r3, #20
 8001f36:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	0b1b      	lsrs	r3, r3, #12
 8001f3c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	091b      	lsrs	r3, r3, #4
 8001f42:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	011a      	lsls	r2, r3, #4
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	021b      	lsls	r3, r3, #8
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	6a3b      	ldr	r3, [r7, #32]
 8001f50:	031b      	lsls	r3, r3, #12
 8001f52:	4313      	orrs	r3, r2
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f60:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8001f62:	e003      	b.n	8001f6c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68ba      	ldr	r2, [r7, #8]
 8001f6a:	60da      	str	r2, [r3, #12]
}
 8001f6c:	bf00      	nop
 8001f6e:	372c      	adds	r7, #44	@ 0x2c
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b089      	sub	sp, #36	@ 0x24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]
 8001f96:	e175      	b.n	8002284 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001f98:	2201      	movs	r2, #1
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	f040 8164 	bne.w	800227e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f003 0303 	and.w	r3, r3, #3
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d005      	beq.n	8001fce <HAL_GPIO_Init+0x56>
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f003 0303 	and.w	r3, r3, #3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d130      	bne.n	8002030 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	2203      	movs	r2, #3
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002004:	2201      	movs	r2, #1
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4013      	ands	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	091b      	lsrs	r3, r3, #4
 800201a:	f003 0201 	and.w	r2, r3, #1
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4313      	orrs	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 0303 	and.w	r3, r3, #3
 8002038:	2b03      	cmp	r3, #3
 800203a:	d017      	beq.n	800206c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	2203      	movs	r2, #3
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4013      	ands	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4313      	orrs	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 0303 	and.w	r3, r3, #3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d123      	bne.n	80020c0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	08da      	lsrs	r2, r3, #3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3208      	adds	r2, #8
 8002080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	220f      	movs	r2, #15
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	43db      	mvns	r3, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4013      	ands	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	691a      	ldr	r2, [r3, #16]
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	08da      	lsrs	r2, r3, #3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3208      	adds	r2, #8
 80020ba:	69b9      	ldr	r1, [r7, #24]
 80020bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	2203      	movs	r2, #3
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 0203 	and.w	r2, r3, #3
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 80be 	beq.w	800227e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002102:	4b66      	ldr	r3, [pc, #408]	@ (800229c <HAL_GPIO_Init+0x324>)
 8002104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002106:	4a65      	ldr	r2, [pc, #404]	@ (800229c <HAL_GPIO_Init+0x324>)
 8002108:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800210c:	6453      	str	r3, [r2, #68]	@ 0x44
 800210e:	4b63      	ldr	r3, [pc, #396]	@ (800229c <HAL_GPIO_Init+0x324>)
 8002110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002112:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800211a:	4a61      	ldr	r2, [pc, #388]	@ (80022a0 <HAL_GPIO_Init+0x328>)
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	089b      	lsrs	r3, r3, #2
 8002120:	3302      	adds	r3, #2
 8002122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002126:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	f003 0303 	and.w	r3, r3, #3
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	220f      	movs	r2, #15
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43db      	mvns	r3, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4013      	ands	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a58      	ldr	r2, [pc, #352]	@ (80022a4 <HAL_GPIO_Init+0x32c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d037      	beq.n	80021b6 <HAL_GPIO_Init+0x23e>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a57      	ldr	r2, [pc, #348]	@ (80022a8 <HAL_GPIO_Init+0x330>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d031      	beq.n	80021b2 <HAL_GPIO_Init+0x23a>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a56      	ldr	r2, [pc, #344]	@ (80022ac <HAL_GPIO_Init+0x334>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d02b      	beq.n	80021ae <HAL_GPIO_Init+0x236>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a55      	ldr	r2, [pc, #340]	@ (80022b0 <HAL_GPIO_Init+0x338>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d025      	beq.n	80021aa <HAL_GPIO_Init+0x232>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a54      	ldr	r2, [pc, #336]	@ (80022b4 <HAL_GPIO_Init+0x33c>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d01f      	beq.n	80021a6 <HAL_GPIO_Init+0x22e>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a53      	ldr	r2, [pc, #332]	@ (80022b8 <HAL_GPIO_Init+0x340>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d019      	beq.n	80021a2 <HAL_GPIO_Init+0x22a>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a52      	ldr	r2, [pc, #328]	@ (80022bc <HAL_GPIO_Init+0x344>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d013      	beq.n	800219e <HAL_GPIO_Init+0x226>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a51      	ldr	r2, [pc, #324]	@ (80022c0 <HAL_GPIO_Init+0x348>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d00d      	beq.n	800219a <HAL_GPIO_Init+0x222>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a50      	ldr	r2, [pc, #320]	@ (80022c4 <HAL_GPIO_Init+0x34c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d007      	beq.n	8002196 <HAL_GPIO_Init+0x21e>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a4f      	ldr	r2, [pc, #316]	@ (80022c8 <HAL_GPIO_Init+0x350>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d101      	bne.n	8002192 <HAL_GPIO_Init+0x21a>
 800218e:	2309      	movs	r3, #9
 8002190:	e012      	b.n	80021b8 <HAL_GPIO_Init+0x240>
 8002192:	230a      	movs	r3, #10
 8002194:	e010      	b.n	80021b8 <HAL_GPIO_Init+0x240>
 8002196:	2308      	movs	r3, #8
 8002198:	e00e      	b.n	80021b8 <HAL_GPIO_Init+0x240>
 800219a:	2307      	movs	r3, #7
 800219c:	e00c      	b.n	80021b8 <HAL_GPIO_Init+0x240>
 800219e:	2306      	movs	r3, #6
 80021a0:	e00a      	b.n	80021b8 <HAL_GPIO_Init+0x240>
 80021a2:	2305      	movs	r3, #5
 80021a4:	e008      	b.n	80021b8 <HAL_GPIO_Init+0x240>
 80021a6:	2304      	movs	r3, #4
 80021a8:	e006      	b.n	80021b8 <HAL_GPIO_Init+0x240>
 80021aa:	2303      	movs	r3, #3
 80021ac:	e004      	b.n	80021b8 <HAL_GPIO_Init+0x240>
 80021ae:	2302      	movs	r3, #2
 80021b0:	e002      	b.n	80021b8 <HAL_GPIO_Init+0x240>
 80021b2:	2301      	movs	r3, #1
 80021b4:	e000      	b.n	80021b8 <HAL_GPIO_Init+0x240>
 80021b6:	2300      	movs	r3, #0
 80021b8:	69fa      	ldr	r2, [r7, #28]
 80021ba:	f002 0203 	and.w	r2, r2, #3
 80021be:	0092      	lsls	r2, r2, #2
 80021c0:	4093      	lsls	r3, r2
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80021c8:	4935      	ldr	r1, [pc, #212]	@ (80022a0 <HAL_GPIO_Init+0x328>)
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	089b      	lsrs	r3, r3, #2
 80021ce:	3302      	adds	r3, #2
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021d6:	4b3d      	ldr	r3, [pc, #244]	@ (80022cc <HAL_GPIO_Init+0x354>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	43db      	mvns	r3, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4013      	ands	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021fa:	4a34      	ldr	r2, [pc, #208]	@ (80022cc <HAL_GPIO_Init+0x354>)
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002200:	4b32      	ldr	r3, [pc, #200]	@ (80022cc <HAL_GPIO_Init+0x354>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d003      	beq.n	8002224 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	4313      	orrs	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002224:	4a29      	ldr	r2, [pc, #164]	@ (80022cc <HAL_GPIO_Init+0x354>)
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800222a:	4b28      	ldr	r3, [pc, #160]	@ (80022cc <HAL_GPIO_Init+0x354>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	43db      	mvns	r3, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4013      	ands	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800224e:	4a1f      	ldr	r2, [pc, #124]	@ (80022cc <HAL_GPIO_Init+0x354>)
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002254:	4b1d      	ldr	r3, [pc, #116]	@ (80022cc <HAL_GPIO_Init+0x354>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	43db      	mvns	r3, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4013      	ands	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d003      	beq.n	8002278 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	4313      	orrs	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002278:	4a14      	ldr	r2, [pc, #80]	@ (80022cc <HAL_GPIO_Init+0x354>)
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	3301      	adds	r3, #1
 8002282:	61fb      	str	r3, [r7, #28]
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	2b0f      	cmp	r3, #15
 8002288:	f67f ae86 	bls.w	8001f98 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800228c:	bf00      	nop
 800228e:	bf00      	nop
 8002290:	3724      	adds	r7, #36	@ 0x24
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	40023800 	.word	0x40023800
 80022a0:	40013800 	.word	0x40013800
 80022a4:	40020000 	.word	0x40020000
 80022a8:	40020400 	.word	0x40020400
 80022ac:	40020800 	.word	0x40020800
 80022b0:	40020c00 	.word	0x40020c00
 80022b4:	40021000 	.word	0x40021000
 80022b8:	40021400 	.word	0x40021400
 80022bc:	40021800 	.word	0x40021800
 80022c0:	40021c00 	.word	0x40021c00
 80022c4:	40022000 	.word	0x40022000
 80022c8:	40022400 	.word	0x40022400
 80022cc:	40013c00 	.word	0x40013c00

080022d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	460b      	mov	r3, r1
 80022da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	691a      	ldr	r2, [r3, #16]
 80022e0:	887b      	ldrh	r3, [r7, #2]
 80022e2:	4013      	ands	r3, r2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d002      	beq.n	80022ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022e8:	2301      	movs	r3, #1
 80022ea:	73fb      	strb	r3, [r7, #15]
 80022ec:	e001      	b.n	80022f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022ee:	2300      	movs	r3, #0
 80022f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	460b      	mov	r3, r1
 800230a:	807b      	strh	r3, [r7, #2]
 800230c:	4613      	mov	r3, r2
 800230e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002310:	787b      	ldrb	r3, [r7, #1]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002316:	887a      	ldrh	r2, [r7, #2]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800231c:	e003      	b.n	8002326 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800231e:	887b      	ldrh	r3, [r7, #2]
 8002320:	041a      	lsls	r2, r3, #16
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	619a      	str	r2, [r3, #24]
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
	...

08002334 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e07f      	b.n	8002446 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d106      	bne.n	8002360 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f8a9 	bl	80024b2 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2224      	movs	r2, #36	@ 0x24
 8002364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0201 	bic.w	r2, r2, #1
 8002376:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002384:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002394:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d107      	bne.n	80023ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	e006      	b.n	80023bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689a      	ldr	r2, [r3, #8]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80023ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d104      	bne.n	80023ce <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80023cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6859      	ldr	r1, [r3, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002450 <HAL_I2C_Init+0x11c>)
 80023da:	430b      	orrs	r3, r1
 80023dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68da      	ldr	r2, [r3, #12]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	691a      	ldr	r2, [r3, #16]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	430a      	orrs	r2, r1
 8002406:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	69d9      	ldr	r1, [r3, #28]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a1a      	ldr	r2, [r3, #32]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	430a      	orrs	r2, r1
 8002416:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 0201 	orr.w	r2, r2, #1
 8002426:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2220      	movs	r2, #32
 8002432:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	02008000 	.word	0x02008000

08002454 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e021      	b.n	80024aa <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2224      	movs	r2, #36	@ 0x24
 800246a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0201 	bic.w	r2, r2, #1
 800247c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f821 	bl	80024c6 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
	...

080024dc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b088      	sub	sp, #32
 80024e0:	af02      	add	r7, sp, #8
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	4608      	mov	r0, r1
 80024e6:	4611      	mov	r1, r2
 80024e8:	461a      	mov	r2, r3
 80024ea:	4603      	mov	r3, r0
 80024ec:	817b      	strh	r3, [r7, #10]
 80024ee:	460b      	mov	r3, r1
 80024f0:	813b      	strh	r3, [r7, #8]
 80024f2:	4613      	mov	r3, r2
 80024f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b20      	cmp	r3, #32
 8002500:	f040 80f9 	bne.w	80026f6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002504:	6a3b      	ldr	r3, [r7, #32]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d002      	beq.n	8002510 <HAL_I2C_Mem_Write+0x34>
 800250a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800250c:	2b00      	cmp	r3, #0
 800250e:	d105      	bne.n	800251c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002516:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e0ed      	b.n	80026f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002522:	2b01      	cmp	r3, #1
 8002524:	d101      	bne.n	800252a <HAL_I2C_Mem_Write+0x4e>
 8002526:	2302      	movs	r3, #2
 8002528:	e0e6      	b.n	80026f8 <HAL_I2C_Mem_Write+0x21c>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002532:	f7fe feab 	bl	800128c <HAL_GetTick>
 8002536:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	2319      	movs	r3, #25
 800253e:	2201      	movs	r2, #1
 8002540:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f000 fad1 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e0d1      	b.n	80026f8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2221      	movs	r2, #33	@ 0x21
 8002558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2240      	movs	r2, #64	@ 0x40
 8002560:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6a3a      	ldr	r2, [r7, #32]
 800256e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002574:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800257c:	88f8      	ldrh	r0, [r7, #6]
 800257e:	893a      	ldrh	r2, [r7, #8]
 8002580:	8979      	ldrh	r1, [r7, #10]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	9301      	str	r3, [sp, #4]
 8002586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	4603      	mov	r3, r0
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f000 f9e1 	bl	8002954 <I2C_RequestMemoryWrite>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d005      	beq.n	80025a4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e0a9      	b.n	80026f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	2bff      	cmp	r3, #255	@ 0xff
 80025ac:	d90e      	bls.n	80025cc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	22ff      	movs	r2, #255	@ 0xff
 80025b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	8979      	ldrh	r1, [r7, #10]
 80025bc:	2300      	movs	r3, #0
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f000 fc2d 	bl	8002e24 <I2C_TransferConfig>
 80025ca:	e00f      	b.n	80025ec <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025da:	b2da      	uxtb	r2, r3
 80025dc:	8979      	ldrh	r1, [r7, #10]
 80025de:	2300      	movs	r3, #0
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f000 fc1c 	bl	8002e24 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025f0:	68f8      	ldr	r0, [r7, #12]
 80025f2:	f000 fabb 	bl	8002b6c <I2C_WaitOnTXISFlagUntilTimeout>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e07b      	b.n	80026f8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002604:	781a      	ldrb	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002610:	1c5a      	adds	r2, r3, #1
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800261a:	b29b      	uxth	r3, r3
 800261c:	3b01      	subs	r3, #1
 800261e:	b29a      	uxth	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002628:	3b01      	subs	r3, #1
 800262a:	b29a      	uxth	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002634:	b29b      	uxth	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d034      	beq.n	80026a4 <HAL_I2C_Mem_Write+0x1c8>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800263e:	2b00      	cmp	r3, #0
 8002640:	d130      	bne.n	80026a4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002648:	2200      	movs	r2, #0
 800264a:	2180      	movs	r1, #128	@ 0x80
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 fa4d 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e04d      	b.n	80026f8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002660:	b29b      	uxth	r3, r3
 8002662:	2bff      	cmp	r3, #255	@ 0xff
 8002664:	d90e      	bls.n	8002684 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	22ff      	movs	r2, #255	@ 0xff
 800266a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002670:	b2da      	uxtb	r2, r3
 8002672:	8979      	ldrh	r1, [r7, #10]
 8002674:	2300      	movs	r3, #0
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f000 fbd1 	bl	8002e24 <I2C_TransferConfig>
 8002682:	e00f      	b.n	80026a4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002688:	b29a      	uxth	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002692:	b2da      	uxtb	r2, r3
 8002694:	8979      	ldrh	r1, [r7, #10]
 8002696:	2300      	movs	r3, #0
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f000 fbc0 	bl	8002e24 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d19e      	bne.n	80025ec <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 fa9a 	bl	8002bec <I2C_WaitOnSTOPFlagUntilTimeout>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e01a      	b.n	80026f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2220      	movs	r2, #32
 80026c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6859      	ldr	r1, [r3, #4]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002700 <HAL_I2C_Mem_Write+0x224>)
 80026d6:	400b      	ands	r3, r1
 80026d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2220      	movs	r2, #32
 80026de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	e000      	b.n	80026f8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80026f6:	2302      	movs	r3, #2
  }
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3718      	adds	r7, #24
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	fe00e800 	.word	0xfe00e800

08002704 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b088      	sub	sp, #32
 8002708:	af02      	add	r7, sp, #8
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	4608      	mov	r0, r1
 800270e:	4611      	mov	r1, r2
 8002710:	461a      	mov	r2, r3
 8002712:	4603      	mov	r3, r0
 8002714:	817b      	strh	r3, [r7, #10]
 8002716:	460b      	mov	r3, r1
 8002718:	813b      	strh	r3, [r7, #8]
 800271a:	4613      	mov	r3, r2
 800271c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b20      	cmp	r3, #32
 8002728:	f040 80fd 	bne.w	8002926 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800272c:	6a3b      	ldr	r3, [r7, #32]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d002      	beq.n	8002738 <HAL_I2C_Mem_Read+0x34>
 8002732:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002734:	2b00      	cmp	r3, #0
 8002736:	d105      	bne.n	8002744 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800273e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e0f1      	b.n	8002928 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800274a:	2b01      	cmp	r3, #1
 800274c:	d101      	bne.n	8002752 <HAL_I2C_Mem_Read+0x4e>
 800274e:	2302      	movs	r3, #2
 8002750:	e0ea      	b.n	8002928 <HAL_I2C_Mem_Read+0x224>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800275a:	f7fe fd97 	bl	800128c <HAL_GetTick>
 800275e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	2319      	movs	r3, #25
 8002766:	2201      	movs	r2, #1
 8002768:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f000 f9bd 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e0d5      	b.n	8002928 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2222      	movs	r2, #34	@ 0x22
 8002780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2240      	movs	r2, #64	@ 0x40
 8002788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6a3a      	ldr	r2, [r7, #32]
 8002796:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800279c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027a4:	88f8      	ldrh	r0, [r7, #6]
 80027a6:	893a      	ldrh	r2, [r7, #8]
 80027a8:	8979      	ldrh	r1, [r7, #10]
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	9301      	str	r3, [sp, #4]
 80027ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	4603      	mov	r3, r0
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f000 f921 	bl	80029fc <I2C_RequestMemoryRead>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d005      	beq.n	80027cc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e0ad      	b.n	8002928 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	2bff      	cmp	r3, #255	@ 0xff
 80027d4:	d90e      	bls.n	80027f4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	22ff      	movs	r2, #255	@ 0xff
 80027da:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	8979      	ldrh	r1, [r7, #10]
 80027e4:	4b52      	ldr	r3, [pc, #328]	@ (8002930 <HAL_I2C_Mem_Read+0x22c>)
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f000 fb19 	bl	8002e24 <I2C_TransferConfig>
 80027f2:	e00f      	b.n	8002814 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002802:	b2da      	uxtb	r2, r3
 8002804:	8979      	ldrh	r1, [r7, #10]
 8002806:	4b4a      	ldr	r3, [pc, #296]	@ (8002930 <HAL_I2C_Mem_Read+0x22c>)
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 fb08 	bl	8002e24 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800281a:	2200      	movs	r2, #0
 800281c:	2104      	movs	r1, #4
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 f964 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e07c      	b.n	8002928 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002840:	1c5a      	adds	r2, r3, #1
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800284a:	3b01      	subs	r3, #1
 800284c:	b29a      	uxth	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002856:	b29b      	uxth	r3, r3
 8002858:	3b01      	subs	r3, #1
 800285a:	b29a      	uxth	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002864:	b29b      	uxth	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d034      	beq.n	80028d4 <HAL_I2C_Mem_Read+0x1d0>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800286e:	2b00      	cmp	r3, #0
 8002870:	d130      	bne.n	80028d4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002878:	2200      	movs	r2, #0
 800287a:	2180      	movs	r1, #128	@ 0x80
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f000 f935 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e04d      	b.n	8002928 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002890:	b29b      	uxth	r3, r3
 8002892:	2bff      	cmp	r3, #255	@ 0xff
 8002894:	d90e      	bls.n	80028b4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	22ff      	movs	r2, #255	@ 0xff
 800289a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	8979      	ldrh	r1, [r7, #10]
 80028a4:	2300      	movs	r3, #0
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f000 fab9 	bl	8002e24 <I2C_TransferConfig>
 80028b2:	e00f      	b.n	80028d4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	8979      	ldrh	r1, [r7, #10]
 80028c6:	2300      	movs	r3, #0
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 faa8 	bl	8002e24 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d19a      	bne.n	8002814 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 f982 	bl	8002bec <I2C_WaitOnSTOPFlagUntilTimeout>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e01a      	b.n	8002928 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2220      	movs	r2, #32
 80028f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6859      	ldr	r1, [r3, #4]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	4b0b      	ldr	r3, [pc, #44]	@ (8002934 <HAL_I2C_Mem_Read+0x230>)
 8002906:	400b      	ands	r3, r1
 8002908:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2220      	movs	r2, #32
 800290e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002922:	2300      	movs	r3, #0
 8002924:	e000      	b.n	8002928 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002926:	2302      	movs	r3, #2
  }
}
 8002928:	4618      	mov	r0, r3
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	80002400 	.word	0x80002400
 8002934:	fe00e800 	.word	0xfe00e800

08002938 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002946:	b2db      	uxtb	r3, r3
}
 8002948:	4618      	mov	r0, r3
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af02      	add	r7, sp, #8
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	4608      	mov	r0, r1
 800295e:	4611      	mov	r1, r2
 8002960:	461a      	mov	r2, r3
 8002962:	4603      	mov	r3, r0
 8002964:	817b      	strh	r3, [r7, #10]
 8002966:	460b      	mov	r3, r1
 8002968:	813b      	strh	r3, [r7, #8]
 800296a:	4613      	mov	r3, r2
 800296c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800296e:	88fb      	ldrh	r3, [r7, #6]
 8002970:	b2da      	uxtb	r2, r3
 8002972:	8979      	ldrh	r1, [r7, #10]
 8002974:	4b20      	ldr	r3, [pc, #128]	@ (80029f8 <I2C_RequestMemoryWrite+0xa4>)
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f000 fa51 	bl	8002e24 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002982:	69fa      	ldr	r2, [r7, #28]
 8002984:	69b9      	ldr	r1, [r7, #24]
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f000 f8f0 	bl	8002b6c <I2C_WaitOnTXISFlagUntilTimeout>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e02c      	b.n	80029f0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002996:	88fb      	ldrh	r3, [r7, #6]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d105      	bne.n	80029a8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800299c:	893b      	ldrh	r3, [r7, #8]
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80029a6:	e015      	b.n	80029d4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80029a8:	893b      	ldrh	r3, [r7, #8]
 80029aa:	0a1b      	lsrs	r3, r3, #8
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	b2da      	uxtb	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029b6:	69fa      	ldr	r2, [r7, #28]
 80029b8:	69b9      	ldr	r1, [r7, #24]
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 f8d6 	bl	8002b6c <I2C_WaitOnTXISFlagUntilTimeout>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e012      	b.n	80029f0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029ca:	893b      	ldrh	r3, [r7, #8]
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	2200      	movs	r2, #0
 80029dc:	2180      	movs	r1, #128	@ 0x80
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f000 f884 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	80002000 	.word	0x80002000

080029fc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af02      	add	r7, sp, #8
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	4608      	mov	r0, r1
 8002a06:	4611      	mov	r1, r2
 8002a08:	461a      	mov	r2, r3
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	817b      	strh	r3, [r7, #10]
 8002a0e:	460b      	mov	r3, r1
 8002a10:	813b      	strh	r3, [r7, #8]
 8002a12:	4613      	mov	r3, r2
 8002a14:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002a16:	88fb      	ldrh	r3, [r7, #6]
 8002a18:	b2da      	uxtb	r2, r3
 8002a1a:	8979      	ldrh	r1, [r7, #10]
 8002a1c:	4b20      	ldr	r3, [pc, #128]	@ (8002aa0 <I2C_RequestMemoryRead+0xa4>)
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	2300      	movs	r3, #0
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 f9fe 	bl	8002e24 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a28:	69fa      	ldr	r2, [r7, #28]
 8002a2a:	69b9      	ldr	r1, [r7, #24]
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f000 f89d 	bl	8002b6c <I2C_WaitOnTXISFlagUntilTimeout>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e02c      	b.n	8002a96 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a3c:	88fb      	ldrh	r3, [r7, #6]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d105      	bne.n	8002a4e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a42:	893b      	ldrh	r3, [r7, #8]
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a4c:	e015      	b.n	8002a7a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a4e:	893b      	ldrh	r3, [r7, #8]
 8002a50:	0a1b      	lsrs	r3, r3, #8
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a5c:	69fa      	ldr	r2, [r7, #28]
 8002a5e:	69b9      	ldr	r1, [r7, #24]
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f000 f883 	bl	8002b6c <I2C_WaitOnTXISFlagUntilTimeout>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e012      	b.n	8002a96 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a70:	893b      	ldrh	r3, [r7, #8]
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	9300      	str	r3, [sp, #0]
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	2200      	movs	r2, #0
 8002a82:	2140      	movs	r1, #64	@ 0x40
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 f831 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e000      	b.n	8002a96 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	80002000 	.word	0x80002000

08002aa4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d103      	bne.n	8002ac2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d007      	beq.n	8002ae0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	699a      	ldr	r2, [r3, #24]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f042 0201 	orr.w	r2, r2, #1
 8002ade:	619a      	str	r2, [r3, #24]
  }
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	603b      	str	r3, [r7, #0]
 8002af8:	4613      	mov	r3, r2
 8002afa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002afc:	e022      	b.n	8002b44 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b04:	d01e      	beq.n	8002b44 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b06:	f7fe fbc1 	bl	800128c <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d302      	bcc.n	8002b1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d113      	bne.n	8002b44 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b20:	f043 0220 	orr.w	r2, r3, #32
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2220      	movs	r2, #32
 8002b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e00f      	b.n	8002b64 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	699a      	ldr	r2, [r3, #24]
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	bf0c      	ite	eq
 8002b54:	2301      	moveq	r3, #1
 8002b56:	2300      	movne	r3, #0
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	79fb      	ldrb	r3, [r7, #7]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d0cd      	beq.n	8002afe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b78:	e02c      	b.n	8002bd4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	68b9      	ldr	r1, [r7, #8]
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 f870 	bl	8002c64 <I2C_IsErrorOccurred>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e02a      	b.n	8002be4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b94:	d01e      	beq.n	8002bd4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b96:	f7fe fb79 	bl	800128c <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	68ba      	ldr	r2, [r7, #8]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d302      	bcc.n	8002bac <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d113      	bne.n	8002bd4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb0:	f043 0220 	orr.w	r2, r3, #32
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e007      	b.n	8002be4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d1cb      	bne.n	8002b7a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bf8:	e028      	b.n	8002c4c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	68b9      	ldr	r1, [r7, #8]
 8002bfe:	68f8      	ldr	r0, [r7, #12]
 8002c00:	f000 f830 	bl	8002c64 <I2C_IsErrorOccurred>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e026      	b.n	8002c5c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c0e:	f7fe fb3d 	bl	800128c <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d302      	bcc.n	8002c24 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d113      	bne.n	8002c4c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c28:	f043 0220 	orr.w	r2, r3, #32
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e007      	b.n	8002c5c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	f003 0320 	and.w	r3, r3, #32
 8002c56:	2b20      	cmp	r3, #32
 8002c58:	d1cf      	bne.n	8002bfa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08a      	sub	sp, #40	@ 0x28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c70:	2300      	movs	r3, #0
 8002c72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	f003 0310 	and.w	r3, r3, #16
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d068      	beq.n	8002d62 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2210      	movs	r2, #16
 8002c96:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c98:	e049      	b.n	8002d2e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca0:	d045      	beq.n	8002d2e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ca2:	f7fe faf3 	bl	800128c <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d302      	bcc.n	8002cb8 <I2C_IsErrorOccurred+0x54>
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d13a      	bne.n	8002d2e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cc2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002cca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002cd6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cda:	d121      	bne.n	8002d20 <I2C_IsErrorOccurred+0xbc>
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ce2:	d01d      	beq.n	8002d20 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002ce4:	7cfb      	ldrb	r3, [r7, #19]
 8002ce6:	2b20      	cmp	r3, #32
 8002ce8:	d01a      	beq.n	8002d20 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002cf8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002cfa:	f7fe fac7 	bl	800128c <HAL_GetTick>
 8002cfe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d00:	e00e      	b.n	8002d20 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002d02:	f7fe fac3 	bl	800128c <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b19      	cmp	r3, #25
 8002d0e:	d907      	bls.n	8002d20 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002d10:	6a3b      	ldr	r3, [r7, #32]
 8002d12:	f043 0320 	orr.w	r3, r3, #32
 8002d16:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002d1e:	e006      	b.n	8002d2e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	f003 0320 	and.w	r3, r3, #32
 8002d2a:	2b20      	cmp	r3, #32
 8002d2c:	d1e9      	bne.n	8002d02 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	f003 0320 	and.w	r3, r3, #32
 8002d38:	2b20      	cmp	r3, #32
 8002d3a:	d003      	beq.n	8002d44 <I2C_IsErrorOccurred+0xe0>
 8002d3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0aa      	beq.n	8002c9a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002d44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d103      	bne.n	8002d54 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2220      	movs	r2, #32
 8002d52:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002d54:	6a3b      	ldr	r3, [r7, #32]
 8002d56:	f043 0304 	orr.w	r3, r3, #4
 8002d5a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00b      	beq.n	8002d8c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002d74:	6a3b      	ldr	r3, [r7, #32]
 8002d76:	f043 0301 	orr.w	r3, r3, #1
 8002d7a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d84:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00b      	beq.n	8002dae <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002d96:	6a3b      	ldr	r3, [r7, #32]
 8002d98:	f043 0308 	orr.w	r3, r3, #8
 8002d9c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002da6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00b      	beq.n	8002dd0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002db8:	6a3b      	ldr	r3, [r7, #32]
 8002dba:	f043 0302 	orr.w	r3, r3, #2
 8002dbe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dc8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002dd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d01c      	beq.n	8002e12 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f7ff fe63 	bl	8002aa4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6859      	ldr	r1, [r3, #4]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	4b0d      	ldr	r3, [pc, #52]	@ (8002e20 <I2C_IsErrorOccurred+0x1bc>)
 8002dea:	400b      	ands	r3, r1
 8002dec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002df2:	6a3b      	ldr	r3, [r7, #32]
 8002df4:	431a      	orrs	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002e12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3728      	adds	r7, #40	@ 0x28
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	fe00e800 	.word	0xfe00e800

08002e24 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b087      	sub	sp, #28
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	607b      	str	r3, [r7, #4]
 8002e2e:	460b      	mov	r3, r1
 8002e30:	817b      	strh	r3, [r7, #10]
 8002e32:	4613      	mov	r3, r2
 8002e34:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e36:	897b      	ldrh	r3, [r7, #10]
 8002e38:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e3c:	7a7b      	ldrb	r3, [r7, #9]
 8002e3e:	041b      	lsls	r3, r3, #16
 8002e40:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e44:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e4a:	6a3b      	ldr	r3, [r7, #32]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e52:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	0d5b      	lsrs	r3, r3, #21
 8002e5e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002e62:	4b08      	ldr	r3, [pc, #32]	@ (8002e84 <I2C_TransferConfig+0x60>)
 8002e64:	430b      	orrs	r3, r1
 8002e66:	43db      	mvns	r3, r3
 8002e68:	ea02 0103 	and.w	r1, r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002e76:	bf00      	nop
 8002e78:	371c      	adds	r7, #28
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	03ff63ff 	.word	0x03ff63ff

08002e88 <HAL_LTDC_Init>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, tmp1 = 0;
 8002e90:	2300      	movs	r3, #0
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	2300      	movs	r3, #0
 8002e96:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e0c7      	b.n	8003032 <HAL_LTDC_Init+0x1aa>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d106      	bne.n	8002ebc <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f8c2 	bl	8003040 <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configures the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	699a      	ldr	r2, [r3, #24]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8002ed2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6999      	ldr	r1, [r3, #24]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002ee8:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	619a      	str	r2, [r3, #24]

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6899      	ldr	r1, [r3, #8]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	4b4e      	ldr	r3, [pc, #312]	@ (800303c <HAL_LTDC_Init+0x1b4>)
 8002f04:	400b      	ands	r3, r1
 8002f06:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	041b      	lsls	r3, r3, #16
 8002f0e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6899      	ldr	r1, [r3, #8]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	699a      	ldr	r2, [r3, #24]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68d9      	ldr	r1, [r3, #12]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	4b42      	ldr	r3, [pc, #264]	@ (800303c <HAL_LTDC_Init+0x1b4>)
 8002f32:	400b      	ands	r3, r1
 8002f34:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	041b      	lsls	r3, r3, #16
 8002f3c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68d9      	ldr	r1, [r3, #12]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a1a      	ldr	r2, [r3, #32]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6919      	ldr	r1, [r3, #16]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	4b37      	ldr	r3, [pc, #220]	@ (800303c <HAL_LTDC_Init+0x1b4>)
 8002f60:	400b      	ands	r3, r1
 8002f62:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f68:	041b      	lsls	r3, r3, #16
 8002f6a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6919      	ldr	r1, [r3, #16]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6959      	ldr	r1, [r3, #20]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	4b2b      	ldr	r3, [pc, #172]	@ (800303c <HAL_LTDC_Init+0x1b4>)
 8002f8e:	400b      	ands	r3, r1
 8002f90:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f96:	041b      	lsls	r3, r3, #16
 8002f98:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6959      	ldr	r1, [r3, #20]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	615a      	str	r2, [r3, #20]

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fb6:	021b      	lsls	r3, r3, #8
 8002fb8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8002fc0:	041b      	lsls	r3, r3, #16
 8002fc2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8002fd2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the transfer Error interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0204 	orr.w	r2, r2, #4
 8002ffe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the FIFO underrun interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f042 0202 	orr.w	r2, r2, #2
 800300e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	699a      	ldr	r2, [r3, #24]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 0201 	orr.w	r2, r2, #1
 800301e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	f000f800 	.word	0xf000f800

08003040 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */ 
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <HAL_LTDC_IRQHandler>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.  
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_TE) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003062:	f003 0304 	and.w	r3, r3, #4
 8003066:	2b00      	cmp	r3, #0
 8003068:	d025      	beq.n	80030b6 <HAL_LTDC_IRQHandler+0x62>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_TE) != RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	2b00      	cmp	r3, #0
 8003076:	d01e      	beq.n	80030b6 <HAL_LTDC_IRQHandler+0x62>
    {
      /* Disable the transfer Error interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 0204 	bic.w	r2, r2, #4
 8003086:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Clear the transfer error flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2204      	movs	r2, #4
 800308e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Update error code */
      hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003096:	f043 0201 	orr.w	r2, r3, #1
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_ERROR;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2204      	movs	r2, #4
 80030a4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

      /* Transfer error Callback */
      HAL_LTDC_ErrorCallback(hltdc);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 f87b 	bl	80031ac <HAL_LTDC_ErrorCallback>
    }
  }
  /* FIFO underrun Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_FU) != RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d025      	beq.n	8003110 <HAL_LTDC_IRQHandler+0xbc>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_FU) != RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d01e      	beq.n	8003110 <HAL_LTDC_IRQHandler+0xbc>
    {
      /* Disable the FIFO underrun interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 0202 	bic.w	r2, r2, #2
 80030e0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Clear the FIFO underrun flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2202      	movs	r2, #2
 80030e8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Update error code */
      hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80030f0:	f043 0202 	orr.w	r2, r3, #2
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_ERROR;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2204      	movs	r2, #4
 80030fe:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
      
      /* Transfer error Callback */
      HAL_LTDC_ErrorCallback(hltdc);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f84e 	bl	80031ac <HAL_LTDC_ErrorCallback>
    }
  }
  /* Line Interrupt management ************************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_LI) != RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b00      	cmp	r3, #0
 800311c:	d01d      	beq.n	800315a <HAL_LTDC_IRQHandler+0x106>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_LI) != RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b00      	cmp	r3, #0
 800312a:	d016      	beq.n	800315a <HAL_LTDC_IRQHandler+0x106>
    {
      /* Disable the Line interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 0201 	bic.w	r2, r2, #1
 800313a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Clear the Line interrupt flag */  
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2201      	movs	r2, #1
 8003142:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

      /* Line interrupt Callback */
      HAL_LTDC_LineEventCallback(hltdc);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 f833 	bl	80031c0 <HAL_LTDC_LineEventCallback>
    }
  }
  /* Register reload Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_RR) != RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003160:	f003 0308 	and.w	r3, r3, #8
 8003164:	2b00      	cmp	r3, #0
 8003166:	d01d      	beq.n	80031a4 <HAL_LTDC_IRQHandler+0x150>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_RR) != RESET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800316e:	f003 0308 	and.w	r3, r3, #8
 8003172:	2b00      	cmp	r3, #0
 8003174:	d016      	beq.n	80031a4 <HAL_LTDC_IRQHandler+0x150>
    {
      /* Disable the register reload interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 0208 	bic.w	r2, r2, #8
 8003184:	635a      	str	r2, [r3, #52]	@ 0x34
      
      /* Clear the register reload flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2208      	movs	r2, #8
 800318c:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_READY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
      
      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
      
      /* Register reload interrupt Callback */
      HAL_LTDC_ReloadEventCallback(hltdc);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f818 	bl	80031d4 <HAL_LTDC_ReloadEventCallback>
    }
  }  
}
 80031a4:	bf00      	nop
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HAL_LTDC_ErrorCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 80031e8:	b5b0      	push	{r4, r5, r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d101      	bne.n	8003202 <HAL_LTDC_ConfigLayer+0x1a>
 80031fe:	2302      	movs	r3, #2
 8003200:	e02c      	b.n	800325c <HAL_LTDC_ConfigLayer+0x74>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2202      	movs	r2, #2
 800320e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2134      	movs	r1, #52	@ 0x34
 8003218:	fb01 f303 	mul.w	r3, r1, r3
 800321c:	4413      	add	r3, r2
 800321e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	4614      	mov	r4, r2
 8003226:	461d      	mov	r5, r3
 8003228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800322a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800322c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800322e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003230:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003232:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003234:	682b      	ldr	r3, [r5, #0]
 8003236:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	68b9      	ldr	r1, [r7, #8]
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 f855 	bl	80032ec <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2201      	movs	r2, #1
 8003248:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bdb0      	pop	{r4, r5, r7, pc}

08003264 <HAL_LTDC_SetAlpha>:
  *                   This parameter can be one of the following values:
  *                   0 or 1
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef *pLayerCfg;

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8003276:	2b01      	cmp	r3, #1
 8003278:	d101      	bne.n	800327e <HAL_LTDC_SetAlpha+0x1a>
 800327a:	2302      	movs	r3, #2
 800327c:	e024      	b.n	80032c8 <HAL_LTDC_SetAlpha+0x64>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2202      	movs	r2, #2
 800328a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
  /* Check the parameters */
  assert_param(IS_LTDC_ALPHA(Alpha));
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2234      	movs	r2, #52	@ 0x34
 8003292:	fb02 f303 	mul.w	r3, r2, r3
 8003296:	3338      	adds	r3, #56	@ 0x38
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	4413      	add	r3, r2
 800329c:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	615a      	str	r2, [r3, #20]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6979      	ldr	r1, [r7, #20]
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f000 f81f 	bl	80032ec <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2201      	movs	r2, #1
 80032b4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3718      	adds	r7, #24
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <HAL_LTDC_GetState>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80032de:	b2db      	uxtb	r3, r3
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                    This parameter can be one of the following values: 0 or 1
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b089      	sub	sp, #36	@ 0x24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 80032f8:	2300      	movs	r3, #0
 80032fa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0;
 80032fc:	2300      	movs	r3, #0
 80032fe:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0;
 8003300:	2300      	movs	r3, #0
 8003302:	617b      	str	r3, [r7, #20]

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	0c1b      	lsrs	r3, r3, #16
 8003310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003314:	4413      	add	r3, r2
 8003316:	041b      	lsls	r3, r3, #16
 8003318:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	461a      	mov	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	01db      	lsls	r3, r3, #7
 8003324:	4413      	add	r3, r2
 8003326:	3384      	adds	r3, #132	@ 0x84
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	6812      	ldr	r2, [r2, #0]
 800332e:	4611      	mov	r1, r2
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	01d2      	lsls	r2, r2, #7
 8003334:	440a      	add	r2, r1
 8003336:	3284      	adds	r2, #132	@ 0x84
 8003338:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800333c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	0c1b      	lsrs	r3, r3, #16
 800334a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800334e:	4413      	add	r3, r2
 8003350:	1c5a      	adds	r2, r3, #1
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4619      	mov	r1, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	01db      	lsls	r3, r3, #7
 800335c:	440b      	add	r3, r1
 800335e:	3384      	adds	r3, #132	@ 0x84
 8003360:	4619      	mov	r1, r3
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	4313      	orrs	r3, r2
 8003366:	604b      	str	r3, [r1, #4]

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	68da      	ldr	r2, [r3, #12]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003376:	4413      	add	r3, r2
 8003378:	041b      	lsls	r3, r3, #16
 800337a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	461a      	mov	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	01db      	lsls	r3, r3, #7
 8003386:	4413      	add	r3, r2
 8003388:	3384      	adds	r3, #132	@ 0x84
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	6812      	ldr	r2, [r2, #0]
 8003390:	4611      	mov	r1, r2
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	01d2      	lsls	r2, r2, #7
 8003396:	440a      	add	r2, r1
 8003398:	3284      	adds	r2, #132	@ 0x84
 800339a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800339e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033ae:	4413      	add	r3, r2
 80033b0:	1c5a      	adds	r2, r3, #1
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4619      	mov	r1, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	01db      	lsls	r3, r3, #7
 80033bc:	440b      	add	r3, r1
 80033be:	3384      	adds	r3, #132	@ 0x84
 80033c0:	4619      	mov	r1, r3
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	461a      	mov	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	01db      	lsls	r3, r3, #7
 80033d2:	4413      	add	r3, r2
 80033d4:	3384      	adds	r3, #132	@ 0x84
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	6812      	ldr	r2, [r2, #0]
 80033dc:	4611      	mov	r1, r2
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	01d2      	lsls	r2, r2, #7
 80033e2:	440a      	add	r2, r1
 80033e4:	3284      	adds	r2, #132	@ 0x84
 80033e6:	f023 0307 	bic.w	r3, r3, #7
 80033ea:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	461a      	mov	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	01db      	lsls	r3, r3, #7
 80033f6:	4413      	add	r3, r2
 80033f8:	3384      	adds	r3, #132	@ 0x84
 80033fa:	461a      	mov	r2, r3
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	6113      	str	r3, [r2, #16]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003408:	021b      	lsls	r3, r3, #8
 800340a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003412:	041b      	lsls	r3, r3, #16
 8003414:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	061b      	lsls	r3, r3, #24
 800341c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	461a      	mov	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	01db      	lsls	r3, r3, #7
 8003428:	4413      	add	r3, r2
 800342a:	3384      	adds	r3, #132	@ 0x84
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	461a      	mov	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	01db      	lsls	r3, r3, #7
 8003438:	4413      	add	r3, r2
 800343a:	3384      	adds	r3, #132	@ 0x84
 800343c:	461a      	mov	r2, r3
 800343e:	2300      	movs	r3, #0
 8003440:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003448:	461a      	mov	r2, r3
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	431a      	orrs	r2, r3
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	431a      	orrs	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4619      	mov	r1, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	01db      	lsls	r3, r3, #7
 800345c:	440b      	add	r3, r1
 800345e:	3384      	adds	r3, #132	@ 0x84
 8003460:	4619      	mov	r1, r3
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	4313      	orrs	r3, r2
 8003466:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	461a      	mov	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	01db      	lsls	r3, r3, #7
 8003472:	4413      	add	r3, r2
 8003474:	3384      	adds	r3, #132	@ 0x84
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	6812      	ldr	r2, [r2, #0]
 800347c:	4611      	mov	r1, r2
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	01d2      	lsls	r2, r2, #7
 8003482:	440a      	add	r2, r1
 8003484:	3284      	adds	r2, #132	@ 0x84
 8003486:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800348a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	461a      	mov	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	01db      	lsls	r3, r3, #7
 8003496:	4413      	add	r3, r2
 8003498:	3384      	adds	r3, #132	@ 0x84
 800349a:	461a      	mov	r2, r3
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	461a      	mov	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	01db      	lsls	r3, r3, #7
 80034ac:	4413      	add	r3, r2
 80034ae:	3384      	adds	r3, #132	@ 0x84
 80034b0:	69da      	ldr	r2, [r3, #28]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4619      	mov	r1, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	01db      	lsls	r3, r3, #7
 80034bc:	440b      	add	r3, r1
 80034be:	3384      	adds	r3, #132	@ 0x84
 80034c0:	4619      	mov	r1, r3
 80034c2:	4b58      	ldr	r3, [pc, #352]	@ (8003624 <LTDC_SetConfig+0x338>)
 80034c4:	4013      	ands	r3, r2
 80034c6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	69da      	ldr	r2, [r3, #28]
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	68f9      	ldr	r1, [r7, #12]
 80034d2:	6809      	ldr	r1, [r1, #0]
 80034d4:	4608      	mov	r0, r1
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	01c9      	lsls	r1, r1, #7
 80034da:	4401      	add	r1, r0
 80034dc:	3184      	adds	r1, #132	@ 0x84
 80034de:	4313      	orrs	r3, r2
 80034e0:	61cb      	str	r3, [r1, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	461a      	mov	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	01db      	lsls	r3, r3, #7
 80034ec:	4413      	add	r3, r2
 80034ee:	3384      	adds	r3, #132	@ 0x84
 80034f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	461a      	mov	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	01db      	lsls	r3, r3, #7
 80034fc:	4413      	add	r3, r2
 80034fe:	3384      	adds	r3, #132	@ 0x84
 8003500:	461a      	mov	r2, r3
 8003502:	2300      	movs	r3, #0
 8003504:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	461a      	mov	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	01db      	lsls	r3, r3, #7
 8003510:	4413      	add	r3, r2
 8003512:	3384      	adds	r3, #132	@ 0x84
 8003514:	461a      	mov	r2, r3
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351a:	6293      	str	r3, [r2, #40]	@ 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d102      	bne.n	800352a <LTDC_SetConfig+0x23e>
  {
    tmp = 4;
 8003524:	2304      	movs	r3, #4
 8003526:	61fb      	str	r3, [r7, #28]
 8003528:	e01b      	b.n	8003562 <LTDC_SetConfig+0x276>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d102      	bne.n	8003538 <LTDC_SetConfig+0x24c>
  {
    tmp = 3;
 8003532:	2303      	movs	r3, #3
 8003534:	61fb      	str	r3, [r7, #28]
 8003536:	e014      	b.n	8003562 <LTDC_SetConfig+0x276>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	2b04      	cmp	r3, #4
 800353e:	d00b      	beq.n	8003558 <LTDC_SetConfig+0x26c>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003544:	2b02      	cmp	r3, #2
 8003546:	d007      	beq.n	8003558 <LTDC_SetConfig+0x26c>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800354c:	2b03      	cmp	r3, #3
 800354e:	d003      	beq.n	8003558 <LTDC_SetConfig+0x26c>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003554:	2b07      	cmp	r3, #7
 8003556:	d102      	bne.n	800355e <LTDC_SetConfig+0x272>
  {
    tmp = 2;
 8003558:	2302      	movs	r3, #2
 800355a:	61fb      	str	r3, [r7, #28]
 800355c:	e001      	b.n	8003562 <LTDC_SetConfig+0x276>
  }
  else
  {
    tmp = 1;
 800355e:	2301      	movs	r3, #1
 8003560:	61fb      	str	r3, [r7, #28]
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	461a      	mov	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	01db      	lsls	r3, r3, #7
 800356c:	4413      	add	r3, r2
 800356e:	3384      	adds	r3, #132	@ 0x84
 8003570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	6812      	ldr	r2, [r2, #0]
 8003576:	4611      	mov	r1, r2
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	01d2      	lsls	r2, r2, #7
 800357c:	440a      	add	r2, r1
 800357e:	3284      	adds	r2, #132	@ 0x84
 8003580:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8003584:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800358a:	69fa      	ldr	r2, [r7, #28]
 800358c:	fb02 f303 	mul.w	r3, r2, r3
 8003590:	041a      	lsls	r2, r3, #16
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	6859      	ldr	r1, [r3, #4]
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	1acb      	subs	r3, r1, r3
 800359c:	69f9      	ldr	r1, [r7, #28]
 800359e:	fb01 f303 	mul.w	r3, r1, r3
 80035a2:	3303      	adds	r3, #3
 80035a4:	68f9      	ldr	r1, [r7, #12]
 80035a6:	6809      	ldr	r1, [r1, #0]
 80035a8:	4608      	mov	r0, r1
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	01c9      	lsls	r1, r1, #7
 80035ae:	4401      	add	r1, r0
 80035b0:	3184      	adds	r1, #132	@ 0x84
 80035b2:	4313      	orrs	r3, r2
 80035b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	461a      	mov	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	01db      	lsls	r3, r3, #7
 80035c0:	4413      	add	r3, r2
 80035c2:	3384      	adds	r3, #132	@ 0x84
 80035c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4619      	mov	r1, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	01db      	lsls	r3, r3, #7
 80035d0:	440b      	add	r3, r1
 80035d2:	3384      	adds	r3, #132	@ 0x84
 80035d4:	4619      	mov	r1, r3
 80035d6:	4b14      	ldr	r3, [pc, #80]	@ (8003628 <LTDC_SetConfig+0x33c>)
 80035d8:	4013      	ands	r3, r2
 80035da:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	461a      	mov	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	01db      	lsls	r3, r3, #7
 80035e6:	4413      	add	r3, r2
 80035e8:	3384      	adds	r3, #132	@ 0x84
 80035ea:	461a      	mov	r2, r3
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	461a      	mov	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	01db      	lsls	r3, r3, #7
 80035fc:	4413      	add	r3, r2
 80035fe:	3384      	adds	r3, #132	@ 0x84
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	6812      	ldr	r2, [r2, #0]
 8003606:	4611      	mov	r1, r2
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	01d2      	lsls	r2, r2, #7
 800360c:	440a      	add	r2, r1
 800360e:	3284      	adds	r2, #132	@ 0x84
 8003610:	f043 0301 	orr.w	r3, r3, #1
 8003614:	6013      	str	r3, [r2, #0]
}
 8003616:	bf00      	nop
 8003618:	3724      	adds	r7, #36	@ 0x24
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	fffff8f8 	.word	0xfffff8f8
 8003628:	fffff800 	.word	0xfffff800

0800362c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003632:	2300      	movs	r3, #0
 8003634:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003636:	4b23      	ldr	r3, [pc, #140]	@ (80036c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363a:	4a22      	ldr	r2, [pc, #136]	@ (80036c4 <HAL_PWREx_EnableOverDrive+0x98>)
 800363c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003640:	6413      	str	r3, [r2, #64]	@ 0x40
 8003642:	4b20      	ldr	r3, [pc, #128]	@ (80036c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003646:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800364a:	603b      	str	r3, [r7, #0]
 800364c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800364e:	4b1e      	ldr	r3, [pc, #120]	@ (80036c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a1d      	ldr	r2, [pc, #116]	@ (80036c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003654:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003658:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800365a:	f7fd fe17 	bl	800128c <HAL_GetTick>
 800365e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003660:	e009      	b.n	8003676 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003662:	f7fd fe13 	bl	800128c <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003670:	d901      	bls.n	8003676 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e022      	b.n	80036bc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003676:	4b14      	ldr	r3, [pc, #80]	@ (80036c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800367e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003682:	d1ee      	bne.n	8003662 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003684:	4b10      	ldr	r3, [pc, #64]	@ (80036c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a0f      	ldr	r2, [pc, #60]	@ (80036c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800368a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800368e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003690:	f7fd fdfc 	bl	800128c <HAL_GetTick>
 8003694:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003696:	e009      	b.n	80036ac <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003698:	f7fd fdf8 	bl	800128c <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80036a6:	d901      	bls.n	80036ac <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e007      	b.n	80036bc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036ac:	4b06      	ldr	r3, [pc, #24]	@ (80036c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80036b8:	d1ee      	bne.n	8003698 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40023800 	.word	0x40023800
 80036c8:	40007000 	.word	0x40007000

080036cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80036d4:	2300      	movs	r3, #0
 80036d6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e291      	b.n	8003c06 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 8087 	beq.w	80037fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036f0:	4b96      	ldr	r3, [pc, #600]	@ (800394c <HAL_RCC_OscConfig+0x280>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f003 030c 	and.w	r3, r3, #12
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d00c      	beq.n	8003716 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036fc:	4b93      	ldr	r3, [pc, #588]	@ (800394c <HAL_RCC_OscConfig+0x280>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f003 030c 	and.w	r3, r3, #12
 8003704:	2b08      	cmp	r3, #8
 8003706:	d112      	bne.n	800372e <HAL_RCC_OscConfig+0x62>
 8003708:	4b90      	ldr	r3, [pc, #576]	@ (800394c <HAL_RCC_OscConfig+0x280>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003710:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003714:	d10b      	bne.n	800372e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003716:	4b8d      	ldr	r3, [pc, #564]	@ (800394c <HAL_RCC_OscConfig+0x280>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d06c      	beq.n	80037fc <HAL_RCC_OscConfig+0x130>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d168      	bne.n	80037fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e26b      	b.n	8003c06 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003736:	d106      	bne.n	8003746 <HAL_RCC_OscConfig+0x7a>
 8003738:	4b84      	ldr	r3, [pc, #528]	@ (800394c <HAL_RCC_OscConfig+0x280>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a83      	ldr	r2, [pc, #524]	@ (800394c <HAL_RCC_OscConfig+0x280>)
 800373e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003742:	6013      	str	r3, [r2, #0]
 8003744:	e02e      	b.n	80037a4 <HAL_RCC_OscConfig+0xd8>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10c      	bne.n	8003768 <HAL_RCC_OscConfig+0x9c>
 800374e:	4b7f      	ldr	r3, [pc, #508]	@ (800394c <HAL_RCC_OscConfig+0x280>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a7e      	ldr	r2, [pc, #504]	@ (800394c <HAL_RCC_OscConfig+0x280>)
 8003754:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	4b7c      	ldr	r3, [pc, #496]	@ (800394c <HAL_RCC_OscConfig+0x280>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a7b      	ldr	r2, [pc, #492]	@ (800394c <HAL_RCC_OscConfig+0x280>)
 8003760:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003764:	6013      	str	r3, [r2, #0]
 8003766:	e01d      	b.n	80037a4 <HAL_RCC_OscConfig+0xd8>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003770:	d10c      	bne.n	800378c <HAL_RCC_OscConfig+0xc0>
 8003772:	4b76      	ldr	r3, [pc, #472]	@ (800394c <HAL_RCC_OscConfig+0x280>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a75      	ldr	r2, [pc, #468]	@ (800394c <HAL_RCC_OscConfig+0x280>)
 8003778:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800377c:	6013      	str	r3, [r2, #0]
 800377e:	4b73      	ldr	r3, [pc, #460]	@ (800394c <HAL_RCC_OscConfig+0x280>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a72      	ldr	r2, [pc, #456]	@ (800394c <HAL_RCC_OscConfig+0x280>)
 8003784:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003788:	6013      	str	r3, [r2, #0]
 800378a:	e00b      	b.n	80037a4 <HAL_RCC_OscConfig+0xd8>
 800378c:	4b6f      	ldr	r3, [pc, #444]	@ (800394c <HAL_RCC_OscConfig+0x280>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a6e      	ldr	r2, [pc, #440]	@ (800394c <HAL_RCC_OscConfig+0x280>)
 8003792:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003796:	6013      	str	r3, [r2, #0]
 8003798:	4b6c      	ldr	r3, [pc, #432]	@ (800394c <HAL_RCC_OscConfig+0x280>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a6b      	ldr	r2, [pc, #428]	@ (800394c <HAL_RCC_OscConfig+0x280>)
 800379e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d013      	beq.n	80037d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ac:	f7fd fd6e 	bl	800128c <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037b4:	f7fd fd6a 	bl	800128c <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b64      	cmp	r3, #100	@ 0x64
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e21f      	b.n	8003c06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037c6:	4b61      	ldr	r3, [pc, #388]	@ (800394c <HAL_RCC_OscConfig+0x280>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d0f0      	beq.n	80037b4 <HAL_RCC_OscConfig+0xe8>
 80037d2:	e014      	b.n	80037fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d4:	f7fd fd5a 	bl	800128c <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037dc:	f7fd fd56 	bl	800128c <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b64      	cmp	r3, #100	@ 0x64
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e20b      	b.n	8003c06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ee:	4b57      	ldr	r3, [pc, #348]	@ (800394c <HAL_RCC_OscConfig+0x280>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1f0      	bne.n	80037dc <HAL_RCC_OscConfig+0x110>
 80037fa:	e000      	b.n	80037fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d069      	beq.n	80038de <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800380a:	4b50      	ldr	r3, [pc, #320]	@ (800394c <HAL_RCC_OscConfig+0x280>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 030c 	and.w	r3, r3, #12
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00b      	beq.n	800382e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003816:	4b4d      	ldr	r3, [pc, #308]	@ (800394c <HAL_RCC_OscConfig+0x280>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 030c 	and.w	r3, r3, #12
 800381e:	2b08      	cmp	r3, #8
 8003820:	d11c      	bne.n	800385c <HAL_RCC_OscConfig+0x190>
 8003822:	4b4a      	ldr	r3, [pc, #296]	@ (800394c <HAL_RCC_OscConfig+0x280>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d116      	bne.n	800385c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800382e:	4b47      	ldr	r3, [pc, #284]	@ (800394c <HAL_RCC_OscConfig+0x280>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d005      	beq.n	8003846 <HAL_RCC_OscConfig+0x17a>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d001      	beq.n	8003846 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e1df      	b.n	8003c06 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003846:	4b41      	ldr	r3, [pc, #260]	@ (800394c <HAL_RCC_OscConfig+0x280>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	493d      	ldr	r1, [pc, #244]	@ (800394c <HAL_RCC_OscConfig+0x280>)
 8003856:	4313      	orrs	r3, r2
 8003858:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800385a:	e040      	b.n	80038de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d023      	beq.n	80038ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003864:	4b39      	ldr	r3, [pc, #228]	@ (800394c <HAL_RCC_OscConfig+0x280>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a38      	ldr	r2, [pc, #224]	@ (800394c <HAL_RCC_OscConfig+0x280>)
 800386a:	f043 0301 	orr.w	r3, r3, #1
 800386e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003870:	f7fd fd0c 	bl	800128c <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003878:	f7fd fd08 	bl	800128c <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e1bd      	b.n	8003c06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800388a:	4b30      	ldr	r3, [pc, #192]	@ (800394c <HAL_RCC_OscConfig+0x280>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0f0      	beq.n	8003878 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003896:	4b2d      	ldr	r3, [pc, #180]	@ (800394c <HAL_RCC_OscConfig+0x280>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	4929      	ldr	r1, [pc, #164]	@ (800394c <HAL_RCC_OscConfig+0x280>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	600b      	str	r3, [r1, #0]
 80038aa:	e018      	b.n	80038de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ac:	4b27      	ldr	r3, [pc, #156]	@ (800394c <HAL_RCC_OscConfig+0x280>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a26      	ldr	r2, [pc, #152]	@ (800394c <HAL_RCC_OscConfig+0x280>)
 80038b2:	f023 0301 	bic.w	r3, r3, #1
 80038b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b8:	f7fd fce8 	bl	800128c <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038c0:	f7fd fce4 	bl	800128c <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e199      	b.n	8003c06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038d2:	4b1e      	ldr	r3, [pc, #120]	@ (800394c <HAL_RCC_OscConfig+0x280>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f0      	bne.n	80038c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d038      	beq.n	800395c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d019      	beq.n	8003926 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038f2:	4b16      	ldr	r3, [pc, #88]	@ (800394c <HAL_RCC_OscConfig+0x280>)
 80038f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038f6:	4a15      	ldr	r2, [pc, #84]	@ (800394c <HAL_RCC_OscConfig+0x280>)
 80038f8:	f043 0301 	orr.w	r3, r3, #1
 80038fc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038fe:	f7fd fcc5 	bl	800128c <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003906:	f7fd fcc1 	bl	800128c <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e176      	b.n	8003c06 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003918:	4b0c      	ldr	r3, [pc, #48]	@ (800394c <HAL_RCC_OscConfig+0x280>)
 800391a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0f0      	beq.n	8003906 <HAL_RCC_OscConfig+0x23a>
 8003924:	e01a      	b.n	800395c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003926:	4b09      	ldr	r3, [pc, #36]	@ (800394c <HAL_RCC_OscConfig+0x280>)
 8003928:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800392a:	4a08      	ldr	r2, [pc, #32]	@ (800394c <HAL_RCC_OscConfig+0x280>)
 800392c:	f023 0301 	bic.w	r3, r3, #1
 8003930:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003932:	f7fd fcab 	bl	800128c <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003938:	e00a      	b.n	8003950 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800393a:	f7fd fca7 	bl	800128c <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d903      	bls.n	8003950 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e15c      	b.n	8003c06 <HAL_RCC_OscConfig+0x53a>
 800394c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003950:	4b91      	ldr	r3, [pc, #580]	@ (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003952:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1ee      	bne.n	800393a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 80a4 	beq.w	8003ab2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800396a:	4b8b      	ldr	r3, [pc, #556]	@ (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 800396c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10d      	bne.n	8003992 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003976:	4b88      	ldr	r3, [pc, #544]	@ (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397a:	4a87      	ldr	r2, [pc, #540]	@ (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 800397c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003980:	6413      	str	r3, [r2, #64]	@ 0x40
 8003982:	4b85      	ldr	r3, [pc, #532]	@ (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003986:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800398a:	60bb      	str	r3, [r7, #8]
 800398c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800398e:	2301      	movs	r3, #1
 8003990:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003992:	4b82      	ldr	r3, [pc, #520]	@ (8003b9c <HAL_RCC_OscConfig+0x4d0>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800399a:	2b00      	cmp	r3, #0
 800399c:	d118      	bne.n	80039d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800399e:	4b7f      	ldr	r3, [pc, #508]	@ (8003b9c <HAL_RCC_OscConfig+0x4d0>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a7e      	ldr	r2, [pc, #504]	@ (8003b9c <HAL_RCC_OscConfig+0x4d0>)
 80039a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039aa:	f7fd fc6f 	bl	800128c <HAL_GetTick>
 80039ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039b0:	e008      	b.n	80039c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039b2:	f7fd fc6b 	bl	800128c <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	2b64      	cmp	r3, #100	@ 0x64
 80039be:	d901      	bls.n	80039c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e120      	b.n	8003c06 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039c4:	4b75      	ldr	r3, [pc, #468]	@ (8003b9c <HAL_RCC_OscConfig+0x4d0>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d0f0      	beq.n	80039b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d106      	bne.n	80039e6 <HAL_RCC_OscConfig+0x31a>
 80039d8:	4b6f      	ldr	r3, [pc, #444]	@ (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 80039da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039dc:	4a6e      	ldr	r2, [pc, #440]	@ (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 80039de:	f043 0301 	orr.w	r3, r3, #1
 80039e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80039e4:	e02d      	b.n	8003a42 <HAL_RCC_OscConfig+0x376>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10c      	bne.n	8003a08 <HAL_RCC_OscConfig+0x33c>
 80039ee:	4b6a      	ldr	r3, [pc, #424]	@ (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 80039f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039f2:	4a69      	ldr	r2, [pc, #420]	@ (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 80039f4:	f023 0301 	bic.w	r3, r3, #1
 80039f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80039fa:	4b67      	ldr	r3, [pc, #412]	@ (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 80039fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039fe:	4a66      	ldr	r2, [pc, #408]	@ (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003a00:	f023 0304 	bic.w	r3, r3, #4
 8003a04:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a06:	e01c      	b.n	8003a42 <HAL_RCC_OscConfig+0x376>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	2b05      	cmp	r3, #5
 8003a0e:	d10c      	bne.n	8003a2a <HAL_RCC_OscConfig+0x35e>
 8003a10:	4b61      	ldr	r3, [pc, #388]	@ (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003a12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a14:	4a60      	ldr	r2, [pc, #384]	@ (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003a16:	f043 0304 	orr.w	r3, r3, #4
 8003a1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a1c:	4b5e      	ldr	r3, [pc, #376]	@ (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a20:	4a5d      	ldr	r2, [pc, #372]	@ (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003a22:	f043 0301 	orr.w	r3, r3, #1
 8003a26:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a28:	e00b      	b.n	8003a42 <HAL_RCC_OscConfig+0x376>
 8003a2a:	4b5b      	ldr	r3, [pc, #364]	@ (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a2e:	4a5a      	ldr	r2, [pc, #360]	@ (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003a30:	f023 0301 	bic.w	r3, r3, #1
 8003a34:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a36:	4b58      	ldr	r3, [pc, #352]	@ (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a3a:	4a57      	ldr	r2, [pc, #348]	@ (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003a3c:	f023 0304 	bic.w	r3, r3, #4
 8003a40:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d015      	beq.n	8003a76 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a4a:	f7fd fc1f 	bl	800128c <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a50:	e00a      	b.n	8003a68 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a52:	f7fd fc1b 	bl	800128c <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e0ce      	b.n	8003c06 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a68:	4b4b      	ldr	r3, [pc, #300]	@ (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003a6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d0ee      	beq.n	8003a52 <HAL_RCC_OscConfig+0x386>
 8003a74:	e014      	b.n	8003aa0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a76:	f7fd fc09 	bl	800128c <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a7c:	e00a      	b.n	8003a94 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a7e:	f7fd fc05 	bl	800128c <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e0b8      	b.n	8003c06 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a94:	4b40      	ldr	r3, [pc, #256]	@ (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003a96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1ee      	bne.n	8003a7e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003aa0:	7dfb      	ldrb	r3, [r7, #23]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d105      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aa6:	4b3c      	ldr	r3, [pc, #240]	@ (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aaa:	4a3b      	ldr	r2, [pc, #236]	@ (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003aac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ab0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	f000 80a4 	beq.w	8003c04 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003abc:	4b36      	ldr	r3, [pc, #216]	@ (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f003 030c 	and.w	r3, r3, #12
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d06b      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d149      	bne.n	8003b64 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ad0:	4b31      	ldr	r3, [pc, #196]	@ (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a30      	ldr	r2, [pc, #192]	@ (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003ad6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003adc:	f7fd fbd6 	bl	800128c <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ae4:	f7fd fbd2 	bl	800128c <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e087      	b.n	8003c06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003af6:	4b28      	ldr	r3, [pc, #160]	@ (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1f0      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	69da      	ldr	r2, [r3, #28]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b10:	019b      	lsls	r3, r3, #6
 8003b12:	431a      	orrs	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b18:	085b      	lsrs	r3, r3, #1
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	041b      	lsls	r3, r3, #16
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b24:	061b      	lsls	r3, r3, #24
 8003b26:	4313      	orrs	r3, r2
 8003b28:	4a1b      	ldr	r2, [pc, #108]	@ (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003b2a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003b2e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b30:	4b19      	ldr	r3, [pc, #100]	@ (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a18      	ldr	r2, [pc, #96]	@ (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003b36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3c:	f7fd fba6 	bl	800128c <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b44:	f7fd fba2 	bl	800128c <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e057      	b.n	8003c06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b56:	4b10      	ldr	r3, [pc, #64]	@ (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0f0      	beq.n	8003b44 <HAL_RCC_OscConfig+0x478>
 8003b62:	e04f      	b.n	8003c04 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b64:	4b0c      	ldr	r3, [pc, #48]	@ (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a0b      	ldr	r2, [pc, #44]	@ (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003b6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b70:	f7fd fb8c 	bl	800128c <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b78:	f7fd fb88 	bl	800128c <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e03d      	b.n	8003c06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b8a:	4b03      	ldr	r3, [pc, #12]	@ (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1f0      	bne.n	8003b78 <HAL_RCC_OscConfig+0x4ac>
 8003b96:	e035      	b.n	8003c04 <HAL_RCC_OscConfig+0x538>
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003ba0:	4b1b      	ldr	r3, [pc, #108]	@ (8003c10 <HAL_RCC_OscConfig+0x544>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d028      	beq.n	8003c00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d121      	bne.n	8003c00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d11a      	bne.n	8003c00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003bd6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d111      	bne.n	8003c00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be6:	085b      	lsrs	r3, r3, #1
 8003be8:	3b01      	subs	r3, #1
 8003bea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d107      	bne.n	8003c00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bfa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d001      	beq.n	8003c04 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e000      	b.n	8003c06 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3718      	adds	r7, #24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	40023800 	.word	0x40023800

08003c14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d101      	bne.n	8003c2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e0d0      	b.n	8003dce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c2c:	4b6a      	ldr	r3, [pc, #424]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 030f 	and.w	r3, r3, #15
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d910      	bls.n	8003c5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c3a:	4b67      	ldr	r3, [pc, #412]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f023 020f 	bic.w	r2, r3, #15
 8003c42:	4965      	ldr	r1, [pc, #404]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c4a:	4b63      	ldr	r3, [pc, #396]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 030f 	and.w	r3, r3, #15
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d001      	beq.n	8003c5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e0b8      	b.n	8003dce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d020      	beq.n	8003caa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0304 	and.w	r3, r3, #4
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d005      	beq.n	8003c80 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c74:	4b59      	ldr	r3, [pc, #356]	@ (8003ddc <HAL_RCC_ClockConfig+0x1c8>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	4a58      	ldr	r2, [pc, #352]	@ (8003ddc <HAL_RCC_ClockConfig+0x1c8>)
 8003c7a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003c7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0308 	and.w	r3, r3, #8
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d005      	beq.n	8003c98 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c8c:	4b53      	ldr	r3, [pc, #332]	@ (8003ddc <HAL_RCC_ClockConfig+0x1c8>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	4a52      	ldr	r2, [pc, #328]	@ (8003ddc <HAL_RCC_ClockConfig+0x1c8>)
 8003c92:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003c96:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c98:	4b50      	ldr	r3, [pc, #320]	@ (8003ddc <HAL_RCC_ClockConfig+0x1c8>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	494d      	ldr	r1, [pc, #308]	@ (8003ddc <HAL_RCC_ClockConfig+0x1c8>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d040      	beq.n	8003d38 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d107      	bne.n	8003cce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cbe:	4b47      	ldr	r3, [pc, #284]	@ (8003ddc <HAL_RCC_ClockConfig+0x1c8>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d115      	bne.n	8003cf6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e07f      	b.n	8003dce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d107      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cd6:	4b41      	ldr	r3, [pc, #260]	@ (8003ddc <HAL_RCC_ClockConfig+0x1c8>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d109      	bne.n	8003cf6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e073      	b.n	8003dce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ce6:	4b3d      	ldr	r3, [pc, #244]	@ (8003ddc <HAL_RCC_ClockConfig+0x1c8>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e06b      	b.n	8003dce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cf6:	4b39      	ldr	r3, [pc, #228]	@ (8003ddc <HAL_RCC_ClockConfig+0x1c8>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f023 0203 	bic.w	r2, r3, #3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	4936      	ldr	r1, [pc, #216]	@ (8003ddc <HAL_RCC_ClockConfig+0x1c8>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d08:	f7fd fac0 	bl	800128c <HAL_GetTick>
 8003d0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d0e:	e00a      	b.n	8003d26 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d10:	f7fd fabc 	bl	800128c <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e053      	b.n	8003dce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d26:	4b2d      	ldr	r3, [pc, #180]	@ (8003ddc <HAL_RCC_ClockConfig+0x1c8>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 020c 	and.w	r2, r3, #12
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d1eb      	bne.n	8003d10 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d38:	4b27      	ldr	r3, [pc, #156]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 030f 	and.w	r3, r3, #15
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d210      	bcs.n	8003d68 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d46:	4b24      	ldr	r3, [pc, #144]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f023 020f 	bic.w	r2, r3, #15
 8003d4e:	4922      	ldr	r1, [pc, #136]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d56:	4b20      	ldr	r3, [pc, #128]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 030f 	and.w	r3, r3, #15
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d001      	beq.n	8003d68 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e032      	b.n	8003dce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d008      	beq.n	8003d86 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d74:	4b19      	ldr	r3, [pc, #100]	@ (8003ddc <HAL_RCC_ClockConfig+0x1c8>)
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	4916      	ldr	r1, [pc, #88]	@ (8003ddc <HAL_RCC_ClockConfig+0x1c8>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0308 	and.w	r3, r3, #8
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d009      	beq.n	8003da6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d92:	4b12      	ldr	r3, [pc, #72]	@ (8003ddc <HAL_RCC_ClockConfig+0x1c8>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	490e      	ldr	r1, [pc, #56]	@ (8003ddc <HAL_RCC_ClockConfig+0x1c8>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003da6:	f000 f821 	bl	8003dec <HAL_RCC_GetSysClockFreq>
 8003daa:	4602      	mov	r2, r0
 8003dac:	4b0b      	ldr	r3, [pc, #44]	@ (8003ddc <HAL_RCC_ClockConfig+0x1c8>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	091b      	lsrs	r3, r3, #4
 8003db2:	f003 030f 	and.w	r3, r3, #15
 8003db6:	490a      	ldr	r1, [pc, #40]	@ (8003de0 <HAL_RCC_ClockConfig+0x1cc>)
 8003db8:	5ccb      	ldrb	r3, [r1, r3]
 8003dba:	fa22 f303 	lsr.w	r3, r2, r3
 8003dbe:	4a09      	ldr	r2, [pc, #36]	@ (8003de4 <HAL_RCC_ClockConfig+0x1d0>)
 8003dc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003dc2:	4b09      	ldr	r3, [pc, #36]	@ (8003de8 <HAL_RCC_ClockConfig+0x1d4>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7fd fa1c 	bl	8001204 <HAL_InitTick>

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	40023c00 	.word	0x40023c00
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	0800bba8 	.word	0x0800bba8
 8003de4:	20000004 	.word	0x20000004
 8003de8:	20000008 	.word	0x20000008

08003dec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003df0:	b090      	sub	sp, #64	@ 0x40
 8003df2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003df4:	2300      	movs	r3, #0
 8003df6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003df8:	2300      	movs	r3, #0
 8003dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003e00:	2300      	movs	r3, #0
 8003e02:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e04:	4b59      	ldr	r3, [pc, #356]	@ (8003f6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f003 030c 	and.w	r3, r3, #12
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	d00d      	beq.n	8003e2c <HAL_RCC_GetSysClockFreq+0x40>
 8003e10:	2b08      	cmp	r3, #8
 8003e12:	f200 80a1 	bhi.w	8003f58 <HAL_RCC_GetSysClockFreq+0x16c>
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d002      	beq.n	8003e20 <HAL_RCC_GetSysClockFreq+0x34>
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	d003      	beq.n	8003e26 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e1e:	e09b      	b.n	8003f58 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e20:	4b53      	ldr	r3, [pc, #332]	@ (8003f70 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e22:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e24:	e09b      	b.n	8003f5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e26:	4b53      	ldr	r3, [pc, #332]	@ (8003f74 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e28:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e2a:	e098      	b.n	8003f5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e2c:	4b4f      	ldr	r3, [pc, #316]	@ (8003f6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e34:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003e36:	4b4d      	ldr	r3, [pc, #308]	@ (8003f6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d028      	beq.n	8003e94 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e42:	4b4a      	ldr	r3, [pc, #296]	@ (8003f6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	099b      	lsrs	r3, r3, #6
 8003e48:	2200      	movs	r2, #0
 8003e4a:	623b      	str	r3, [r7, #32]
 8003e4c:	627a      	str	r2, [r7, #36]	@ 0x24
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003e54:	2100      	movs	r1, #0
 8003e56:	4b47      	ldr	r3, [pc, #284]	@ (8003f74 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e58:	fb03 f201 	mul.w	r2, r3, r1
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	fb00 f303 	mul.w	r3, r0, r3
 8003e62:	4413      	add	r3, r2
 8003e64:	4a43      	ldr	r2, [pc, #268]	@ (8003f74 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e66:	fba0 1202 	umull	r1, r2, r0, r2
 8003e6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e6c:	460a      	mov	r2, r1
 8003e6e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003e70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e72:	4413      	add	r3, r2
 8003e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e78:	2200      	movs	r2, #0
 8003e7a:	61bb      	str	r3, [r7, #24]
 8003e7c:	61fa      	str	r2, [r7, #28]
 8003e7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e82:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003e86:	f7fc fa13 	bl	80002b0 <__aeabi_uldivmod>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	4613      	mov	r3, r2
 8003e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e92:	e053      	b.n	8003f3c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e94:	4b35      	ldr	r3, [pc, #212]	@ (8003f6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	099b      	lsrs	r3, r3, #6
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	613b      	str	r3, [r7, #16]
 8003e9e:	617a      	str	r2, [r7, #20]
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003ea6:	f04f 0b00 	mov.w	fp, #0
 8003eaa:	4652      	mov	r2, sl
 8003eac:	465b      	mov	r3, fp
 8003eae:	f04f 0000 	mov.w	r0, #0
 8003eb2:	f04f 0100 	mov.w	r1, #0
 8003eb6:	0159      	lsls	r1, r3, #5
 8003eb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ebc:	0150      	lsls	r0, r2, #5
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	ebb2 080a 	subs.w	r8, r2, sl
 8003ec6:	eb63 090b 	sbc.w	r9, r3, fp
 8003eca:	f04f 0200 	mov.w	r2, #0
 8003ece:	f04f 0300 	mov.w	r3, #0
 8003ed2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003ed6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003eda:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003ede:	ebb2 0408 	subs.w	r4, r2, r8
 8003ee2:	eb63 0509 	sbc.w	r5, r3, r9
 8003ee6:	f04f 0200 	mov.w	r2, #0
 8003eea:	f04f 0300 	mov.w	r3, #0
 8003eee:	00eb      	lsls	r3, r5, #3
 8003ef0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ef4:	00e2      	lsls	r2, r4, #3
 8003ef6:	4614      	mov	r4, r2
 8003ef8:	461d      	mov	r5, r3
 8003efa:	eb14 030a 	adds.w	r3, r4, sl
 8003efe:	603b      	str	r3, [r7, #0]
 8003f00:	eb45 030b 	adc.w	r3, r5, fp
 8003f04:	607b      	str	r3, [r7, #4]
 8003f06:	f04f 0200 	mov.w	r2, #0
 8003f0a:	f04f 0300 	mov.w	r3, #0
 8003f0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f12:	4629      	mov	r1, r5
 8003f14:	028b      	lsls	r3, r1, #10
 8003f16:	4621      	mov	r1, r4
 8003f18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f1c:	4621      	mov	r1, r4
 8003f1e:	028a      	lsls	r2, r1, #10
 8003f20:	4610      	mov	r0, r2
 8003f22:	4619      	mov	r1, r3
 8003f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f26:	2200      	movs	r2, #0
 8003f28:	60bb      	str	r3, [r7, #8]
 8003f2a:	60fa      	str	r2, [r7, #12]
 8003f2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f30:	f7fc f9be 	bl	80002b0 <__aeabi_uldivmod>
 8003f34:	4602      	mov	r2, r0
 8003f36:	460b      	mov	r3, r1
 8003f38:	4613      	mov	r3, r2
 8003f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003f6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	0c1b      	lsrs	r3, r3, #16
 8003f42:	f003 0303 	and.w	r3, r3, #3
 8003f46:	3301      	adds	r3, #1
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003f4c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f54:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f56:	e002      	b.n	8003f5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f58:	4b05      	ldr	r3, [pc, #20]	@ (8003f70 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f5a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3740      	adds	r7, #64	@ 0x40
 8003f64:	46bd      	mov	sp, r7
 8003f66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f6a:	bf00      	nop
 8003f6c:	40023800 	.word	0x40023800
 8003f70:	00f42400 	.word	0x00f42400
 8003f74:	017d7840 	.word	0x017d7840

08003f78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b088      	sub	sp, #32
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003f80:	2300      	movs	r3, #0
 8003f82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003f84:	2300      	movs	r3, #0
 8003f86:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003f90:	2300      	movs	r3, #0
 8003f92:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d012      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003fa0:	4b69      	ldr	r3, [pc, #420]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	4a68      	ldr	r2, [pc, #416]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fa6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003faa:	6093      	str	r3, [r2, #8]
 8003fac:	4b66      	ldr	r3, [pc, #408]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fae:	689a      	ldr	r2, [r3, #8]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fb4:	4964      	ldr	r1, [pc, #400]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d017      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fd2:	4b5d      	ldr	r3, [pc, #372]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fd8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe0:	4959      	ldr	r1, [pc, #356]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ff0:	d101      	bne.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003ffe:	2301      	movs	r3, #1
 8004000:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d017      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800400e:	4b4e      	ldr	r3, [pc, #312]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004010:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004014:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401c:	494a      	ldr	r1, [pc, #296]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800401e:	4313      	orrs	r3, r2
 8004020:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004028:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800402c:	d101      	bne.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800402e:	2301      	movs	r3, #1
 8004030:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800403a:	2301      	movs	r3, #1
 800403c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800404a:	2301      	movs	r3, #1
 800404c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0320 	and.w	r3, r3, #32
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 808b 	beq.w	8004172 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800405c:	4b3a      	ldr	r3, [pc, #232]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800405e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004060:	4a39      	ldr	r2, [pc, #228]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004062:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004066:	6413      	str	r3, [r2, #64]	@ 0x40
 8004068:	4b37      	ldr	r3, [pc, #220]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800406a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004070:	60bb      	str	r3, [r7, #8]
 8004072:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004074:	4b35      	ldr	r3, [pc, #212]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a34      	ldr	r2, [pc, #208]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800407a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800407e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004080:	f7fd f904 	bl	800128c <HAL_GetTick>
 8004084:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004086:	e008      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004088:	f7fd f900 	bl	800128c <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b64      	cmp	r3, #100	@ 0x64
 8004094:	d901      	bls.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e357      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800409a:	4b2c      	ldr	r3, [pc, #176]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d0f0      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040a6:	4b28      	ldr	r3, [pc, #160]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040ae:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d035      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d02e      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040c4:	4b20      	ldr	r3, [pc, #128]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040cc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040ce:	4b1e      	ldr	r3, [pc, #120]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040d2:	4a1d      	ldr	r2, [pc, #116]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040d8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040da:	4b1b      	ldr	r3, [pc, #108]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040de:	4a1a      	ldr	r2, [pc, #104]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040e4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80040e6:	4a18      	ldr	r2, [pc, #96]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80040ec:	4b16      	ldr	r3, [pc, #88]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d114      	bne.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f8:	f7fd f8c8 	bl	800128c <HAL_GetTick>
 80040fc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040fe:	e00a      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004100:	f7fd f8c4 	bl	800128c <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800410e:	4293      	cmp	r3, r2
 8004110:	d901      	bls.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e319      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004116:	4b0c      	ldr	r3, [pc, #48]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d0ee      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004126:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800412a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800412e:	d111      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004130:	4b05      	ldr	r3, [pc, #20]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800413c:	4b04      	ldr	r3, [pc, #16]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800413e:	400b      	ands	r3, r1
 8004140:	4901      	ldr	r1, [pc, #4]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004142:	4313      	orrs	r3, r2
 8004144:	608b      	str	r3, [r1, #8]
 8004146:	e00b      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004148:	40023800 	.word	0x40023800
 800414c:	40007000 	.word	0x40007000
 8004150:	0ffffcff 	.word	0x0ffffcff
 8004154:	4baa      	ldr	r3, [pc, #680]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	4aa9      	ldr	r2, [pc, #676]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800415a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800415e:	6093      	str	r3, [r2, #8]
 8004160:	4ba7      	ldr	r3, [pc, #668]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004162:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800416c:	49a4      	ldr	r1, [pc, #656]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800416e:	4313      	orrs	r3, r2
 8004170:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0310 	and.w	r3, r3, #16
 800417a:	2b00      	cmp	r3, #0
 800417c:	d010      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800417e:	4ba0      	ldr	r3, [pc, #640]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004180:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004184:	4a9e      	ldr	r2, [pc, #632]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004186:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800418a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800418e:	4b9c      	ldr	r3, [pc, #624]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004190:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004198:	4999      	ldr	r1, [pc, #612]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800419a:	4313      	orrs	r3, r2
 800419c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00a      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041ac:	4b94      	ldr	r3, [pc, #592]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041b2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041ba:	4991      	ldr	r1, [pc, #580]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00a      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041ce:	4b8c      	ldr	r3, [pc, #560]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041d4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041dc:	4988      	ldr	r1, [pc, #544]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00a      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041f0:	4b83      	ldr	r3, [pc, #524]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041fe:	4980      	ldr	r1, [pc, #512]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004200:	4313      	orrs	r3, r2
 8004202:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00a      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004212:	4b7b      	ldr	r3, [pc, #492]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004214:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004218:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004220:	4977      	ldr	r1, [pc, #476]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004222:	4313      	orrs	r3, r2
 8004224:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00a      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004234:	4b72      	ldr	r3, [pc, #456]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800423a:	f023 0203 	bic.w	r2, r3, #3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004242:	496f      	ldr	r1, [pc, #444]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004244:	4313      	orrs	r3, r2
 8004246:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00a      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004256:	4b6a      	ldr	r3, [pc, #424]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004258:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800425c:	f023 020c 	bic.w	r2, r3, #12
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004264:	4966      	ldr	r1, [pc, #408]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004266:	4313      	orrs	r3, r2
 8004268:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00a      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004278:	4b61      	ldr	r3, [pc, #388]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800427a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800427e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004286:	495e      	ldr	r1, [pc, #376]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004288:	4313      	orrs	r3, r2
 800428a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00a      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800429a:	4b59      	ldr	r3, [pc, #356]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800429c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042a0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042a8:	4955      	ldr	r1, [pc, #340]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00a      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80042bc:	4b50      	ldr	r3, [pc, #320]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042c2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ca:	494d      	ldr	r1, [pc, #308]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00a      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80042de:	4b48      	ldr	r3, [pc, #288]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042e4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ec:	4944      	ldr	r1, [pc, #272]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00a      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004300:	4b3f      	ldr	r3, [pc, #252]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004306:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800430e:	493c      	ldr	r1, [pc, #240]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004310:	4313      	orrs	r3, r2
 8004312:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00a      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004322:	4b37      	ldr	r3, [pc, #220]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004324:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004328:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004330:	4933      	ldr	r1, [pc, #204]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004332:	4313      	orrs	r3, r2
 8004334:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00a      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004344:	4b2e      	ldr	r3, [pc, #184]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800434a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004352:	492b      	ldr	r1, [pc, #172]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004354:	4313      	orrs	r3, r2
 8004356:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d011      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004366:	4b26      	ldr	r3, [pc, #152]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004368:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800436c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004374:	4922      	ldr	r1, [pc, #136]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004376:	4313      	orrs	r3, r2
 8004378:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004380:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004384:	d101      	bne.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004386:	2301      	movs	r3, #1
 8004388:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0308 	and.w	r3, r3, #8
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004396:	2301      	movs	r3, #1
 8004398:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00a      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043a6:	4b16      	ldr	r3, [pc, #88]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ac:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043b4:	4912      	ldr	r1, [pc, #72]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00b      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80043c8:	4b0d      	ldr	r3, [pc, #52]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ce:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043d8:	4909      	ldr	r1, [pc, #36]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d006      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f000 80d9 	beq.w	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80043f4:	4b02      	ldr	r3, [pc, #8]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a01      	ldr	r2, [pc, #4]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80043fe:	e001      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004400:	40023800 	.word	0x40023800
 8004404:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004406:	f7fc ff41 	bl	800128c <HAL_GetTick>
 800440a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800440c:	e008      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800440e:	f7fc ff3d 	bl	800128c <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b64      	cmp	r3, #100	@ 0x64
 800441a:	d901      	bls.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e194      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004420:	4b6c      	ldr	r3, [pc, #432]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1f0      	bne.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	2b00      	cmp	r3, #0
 8004436:	d021      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800443c:	2b00      	cmp	r3, #0
 800443e:	d11d      	bne.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004440:	4b64      	ldr	r3, [pc, #400]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004442:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004446:	0c1b      	lsrs	r3, r3, #16
 8004448:	f003 0303 	and.w	r3, r3, #3
 800444c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800444e:	4b61      	ldr	r3, [pc, #388]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004450:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004454:	0e1b      	lsrs	r3, r3, #24
 8004456:	f003 030f 	and.w	r3, r3, #15
 800445a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	019a      	lsls	r2, r3, #6
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	041b      	lsls	r3, r3, #16
 8004466:	431a      	orrs	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	061b      	lsls	r3, r3, #24
 800446c:	431a      	orrs	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	071b      	lsls	r3, r3, #28
 8004474:	4957      	ldr	r1, [pc, #348]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004476:	4313      	orrs	r3, r2
 8004478:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d004      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800448c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004490:	d00a      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800449a:	2b00      	cmp	r3, #0
 800449c:	d02e      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044a6:	d129      	bne.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80044a8:	4b4a      	ldr	r3, [pc, #296]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044ae:	0c1b      	lsrs	r3, r3, #16
 80044b0:	f003 0303 	and.w	r3, r3, #3
 80044b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80044b6:	4b47      	ldr	r3, [pc, #284]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044bc:	0f1b      	lsrs	r3, r3, #28
 80044be:	f003 0307 	and.w	r3, r3, #7
 80044c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	019a      	lsls	r2, r3, #6
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	041b      	lsls	r3, r3, #16
 80044ce:	431a      	orrs	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	061b      	lsls	r3, r3, #24
 80044d6:	431a      	orrs	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	071b      	lsls	r3, r3, #28
 80044dc:	493d      	ldr	r1, [pc, #244]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80044e4:	4b3b      	ldr	r3, [pc, #236]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044ea:	f023 021f 	bic.w	r2, r3, #31
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f2:	3b01      	subs	r3, #1
 80044f4:	4937      	ldr	r1, [pc, #220]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d01d      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004508:	4b32      	ldr	r3, [pc, #200]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800450a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800450e:	0e1b      	lsrs	r3, r3, #24
 8004510:	f003 030f 	and.w	r3, r3, #15
 8004514:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004516:	4b2f      	ldr	r3, [pc, #188]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004518:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800451c:	0f1b      	lsrs	r3, r3, #28
 800451e:	f003 0307 	and.w	r3, r3, #7
 8004522:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	019a      	lsls	r2, r3, #6
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	041b      	lsls	r3, r3, #16
 8004530:	431a      	orrs	r2, r3
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	061b      	lsls	r3, r3, #24
 8004536:	431a      	orrs	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	071b      	lsls	r3, r3, #28
 800453c:	4925      	ldr	r1, [pc, #148]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800453e:	4313      	orrs	r3, r2
 8004540:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d011      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	019a      	lsls	r2, r3, #6
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	041b      	lsls	r3, r3, #16
 800455c:	431a      	orrs	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	061b      	lsls	r3, r3, #24
 8004564:	431a      	orrs	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	071b      	lsls	r3, r3, #28
 800456c:	4919      	ldr	r1, [pc, #100]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800456e:	4313      	orrs	r3, r2
 8004570:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004574:	4b17      	ldr	r3, [pc, #92]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a16      	ldr	r2, [pc, #88]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800457a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800457e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004580:	f7fc fe84 	bl	800128c <HAL_GetTick>
 8004584:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004586:	e008      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004588:	f7fc fe80 	bl	800128c <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b64      	cmp	r3, #100	@ 0x64
 8004594:	d901      	bls.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e0d7      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800459a:	4b0e      	ldr	r3, [pc, #56]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d0f0      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	f040 80cd 	bne.w	8004748 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80045ae:	4b09      	ldr	r3, [pc, #36]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a08      	ldr	r2, [pc, #32]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045ba:	f7fc fe67 	bl	800128c <HAL_GetTick>
 80045be:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80045c0:	e00a      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80045c2:	f7fc fe63 	bl	800128c <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b64      	cmp	r3, #100	@ 0x64
 80045ce:	d903      	bls.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e0ba      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80045d4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80045d8:	4b5e      	ldr	r3, [pc, #376]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80045e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045e4:	d0ed      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d003      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x682>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d009      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004602:	2b00      	cmp	r3, #0
 8004604:	d02e      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460a:	2b00      	cmp	r3, #0
 800460c:	d12a      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800460e:	4b51      	ldr	r3, [pc, #324]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004610:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004614:	0c1b      	lsrs	r3, r3, #16
 8004616:	f003 0303 	and.w	r3, r3, #3
 800461a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800461c:	4b4d      	ldr	r3, [pc, #308]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800461e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004622:	0f1b      	lsrs	r3, r3, #28
 8004624:	f003 0307 	and.w	r3, r3, #7
 8004628:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	019a      	lsls	r2, r3, #6
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	041b      	lsls	r3, r3, #16
 8004634:	431a      	orrs	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	061b      	lsls	r3, r3, #24
 800463c:	431a      	orrs	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	071b      	lsls	r3, r3, #28
 8004642:	4944      	ldr	r1, [pc, #272]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004644:	4313      	orrs	r3, r2
 8004646:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800464a:	4b42      	ldr	r3, [pc, #264]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800464c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004650:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004658:	3b01      	subs	r3, #1
 800465a:	021b      	lsls	r3, r3, #8
 800465c:	493d      	ldr	r1, [pc, #244]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800465e:	4313      	orrs	r3, r2
 8004660:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d022      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004674:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004678:	d11d      	bne.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800467a:	4b36      	ldr	r3, [pc, #216]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800467c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004680:	0e1b      	lsrs	r3, r3, #24
 8004682:	f003 030f 	and.w	r3, r3, #15
 8004686:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004688:	4b32      	ldr	r3, [pc, #200]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800468a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800468e:	0f1b      	lsrs	r3, r3, #28
 8004690:	f003 0307 	and.w	r3, r3, #7
 8004694:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	019a      	lsls	r2, r3, #6
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	041b      	lsls	r3, r3, #16
 80046a2:	431a      	orrs	r2, r3
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	061b      	lsls	r3, r3, #24
 80046a8:	431a      	orrs	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	071b      	lsls	r3, r3, #28
 80046ae:	4929      	ldr	r1, [pc, #164]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0308 	and.w	r3, r3, #8
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d028      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80046c2:	4b24      	ldr	r3, [pc, #144]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046c8:	0e1b      	lsrs	r3, r3, #24
 80046ca:	f003 030f 	and.w	r3, r3, #15
 80046ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80046d0:	4b20      	ldr	r3, [pc, #128]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046d6:	0c1b      	lsrs	r3, r3, #16
 80046d8:	f003 0303 	and.w	r3, r3, #3
 80046dc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	019a      	lsls	r2, r3, #6
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	041b      	lsls	r3, r3, #16
 80046e8:	431a      	orrs	r2, r3
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	061b      	lsls	r3, r3, #24
 80046ee:	431a      	orrs	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	69db      	ldr	r3, [r3, #28]
 80046f4:	071b      	lsls	r3, r3, #28
 80046f6:	4917      	ldr	r1, [pc, #92]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80046fe:	4b15      	ldr	r3, [pc, #84]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004700:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004704:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800470c:	4911      	ldr	r1, [pc, #68]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800470e:	4313      	orrs	r3, r2
 8004710:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004714:	4b0f      	ldr	r3, [pc, #60]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a0e      	ldr	r2, [pc, #56]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800471a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800471e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004720:	f7fc fdb4 	bl	800128c <HAL_GetTick>
 8004724:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004726:	e008      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004728:	f7fc fdb0 	bl	800128c <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b64      	cmp	r3, #100	@ 0x64
 8004734:	d901      	bls.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e007      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800473a:	4b06      	ldr	r3, [pc, #24]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004742:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004746:	d1ef      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3720      	adds	r7, #32
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	40023800 	.word	0x40023800

08004758 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e01d      	b.n	80047a6 <HAL_SD_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d105      	bne.n	8004782 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f87a 	bl	8004876 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2203      	movs	r2, #3
 8004786:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f80f 	bl	80047ae <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	631a      	str	r2, [r3, #48]	@ 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3708      	adds	r7, #8
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80047ae:	b5b0      	push	{r4, r5, r7, lr}
 80047b0:	b08e      	sub	sp, #56	@ 0x38
 80047b2:	af04      	add	r7, sp, #16
 80047b4:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80047b6:	2300      	movs	r3, #0
 80047b8:	627b      	str	r3, [r7, #36]	@ 0x24
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80047ba:	2300      	movs	r3, #0
 80047bc:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80047be:	2300      	movs	r3, #0
 80047c0:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80047c2:	2300      	movs	r3, #0
 80047c4:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80047c6:	2300      	movs	r3, #0
 80047c8:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80047ca:	2300      	movs	r3, #0
 80047cc:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80047ce:	2376      	movs	r3, #118	@ 0x76
 80047d0:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681d      	ldr	r5, [r3, #0]
 80047d6:	466c      	mov	r4, sp
 80047d8:	f107 0318 	add.w	r3, r7, #24
 80047dc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80047e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80047e4:	f107 030c 	add.w	r3, r7, #12
 80047e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047ea:	4628      	mov	r0, r5
 80047ec:	f001 faee 	bl	8005dcc <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd); 
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685a      	ldr	r2, [r3, #4]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047fe:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hsd->Instance);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4618      	mov	r0, r3
 8004806:	f001 fb2b 	bl	8005e60 <SDMMC_PowerState_ON>
  
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004818:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 800481a:	2002      	movs	r0, #2
 800481c:	f7fc fd42 	bl	80012a4 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 feee 	bl	8005602 <SD_PowerON>
 8004826:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8004828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00b      	beq.n	8004846 <HAL_SD_InitCard+0x98>
  {
    hsd->State = HAL_SD_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800483a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483c:	431a      	orrs	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e013      	b.n	800486e <HAL_SD_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 fe11 	bl	800546e <SD_InitCard>
 800484c:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800484e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00b      	beq.n	800486c <HAL_SD_InitCard+0xbe>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004862:	431a      	orrs	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e000      	b.n	800486e <HAL_SD_InitCard+0xc0>
  }

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3728      	adds	r7, #40	@ 0x28
 8004872:	46bd      	mov	sp, r7
 8004874:	bdb0      	pop	{r4, r5, r7, pc}

08004876 <HAL_SD_MspInit>:
  * @brief  Initializes the SD MSP.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_MspInit(SD_HandleTypeDef *hsd)
{
 8004876:	b480      	push	{r7}
 8004878:	b083      	sub	sp, #12
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_MspInit could be implemented in the user file
   */
}
 800487e:	bf00      	nop
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800488a:	b590      	push	{r4, r7, lr}
 800488c:	b08f      	sub	sp, #60	@ 0x3c
 800488e:	af00      	add	r7, sp, #0
 8004890:	60f8      	str	r0, [r7, #12]
 8004892:	60b9      	str	r1, [r7, #8]
 8004894:	607a      	str	r2, [r7, #4]
 8004896:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004898:	2300      	movs	r3, #0
 800489a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart = HAL_GetTick();
 800489c:	f7fc fcf6 	bl	800128c <HAL_GetTick>
 80048a0:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t count = 0, *tempbuff = (uint32_t *)pData;
 80048a2:	2300      	movs	r3, #0
 80048a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  if(NULL == pData)
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d107      	bne.n	80048c0 <HAL_SD_ReadBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e176      	b.n	8004bae <HAL_SD_ReadBlocks+0x324>
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	f040 8169 	bne.w	8004ba0 <HAL_SD_ReadBlocks+0x316>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	441a      	add	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048de:	429a      	cmp	r2, r3
 80048e0:	d907      	bls.n	80048f2 <HAL_SD_ReadBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e15d      	b.n	8004bae <HAL_SD_ReadBlocks+0x324>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2203      	movs	r2, #3
 80048f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2200      	movs	r2, #0
 8004900:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004906:	2b01      	cmp	r3, #1
 8004908:	d002      	beq.n	8004910 <HAL_SD_ReadBlocks+0x86>
    {
      BlockAdd *= 512;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	025b      	lsls	r3, r3, #9
 800490e:	607b      	str	r3, [r7, #4]
    }
      
    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004918:	4618      	mov	r0, r3
 800491a:	f001 fb35 	bl	8005f88 <SDMMC_CmdBlockLength>
 800491e:	6378      	str	r0, [r7, #52]	@ 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8004920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004922:	2b00      	cmp	r3, #0
 8004924:	d010      	beq.n	8004948 <HAL_SD_ReadBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);      
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 800492e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004936:	431a      	orrs	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e132      	b.n	8004bae <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004948:	f04f 33ff 	mov.w	r3, #4294967295
 800494c:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	025b      	lsls	r3, r3, #9
 8004952:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004954:	2390      	movs	r3, #144	@ 0x90
 8004956:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004958:	2302      	movs	r3, #2
 800495a:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800495c:	2300      	movs	r3, #0
 800495e:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8004960:	2301      	movs	r3, #1
 8004962:	627b      	str	r3, [r7, #36]	@ 0x24
    SDMMC_ConfigData(hsd->Instance, &config);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f107 0210 	add.w	r2, r7, #16
 800496c:	4611      	mov	r1, r2
 800496e:	4618      	mov	r0, r3
 8004970:	f001 fade 	bl	8005f30 <SDMMC_ConfigData>
    
    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d90a      	bls.n	8004990 <HAL_SD_ReadBlocks+0x106>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2202      	movs	r2, #2
 800497e:	631a      	str	r2, [r3, #48]	@ 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	6879      	ldr	r1, [r7, #4]
 8004986:	4618      	mov	r0, r3
 8004988:	f001 fb46 	bl	8006018 <SDMMC_CmdReadMultiBlock>
 800498c:	6378      	str	r0, [r7, #52]	@ 0x34
 800498e:	e009      	b.n	80049a4 <HAL_SD_ReadBlocks+0x11a>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2201      	movs	r2, #1
 8004994:	631a      	str	r2, [r3, #48]	@ 0x30
      
      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6879      	ldr	r1, [r7, #4]
 800499c:	4618      	mov	r0, r3
 800499e:	f001 fb17 	bl	8005fd0 <SDMMC_CmdReadSingleBlock>
 80049a2:	6378      	str	r0, [r7, #52]	@ 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80049a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d04a      	beq.n	8004a40 <HAL_SD_ReadBlocks+0x1b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 80049b2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049ba:	431a      	orrs	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e0f0      	b.n	8004bae <HAL_SD_ReadBlocks+0x324>
    }
      
    /* Poll on SDMMC flags */
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d016      	beq.n	8004a08 <HAL_SD_ReadBlocks+0x17e>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80049da:	2300      	movs	r3, #0
 80049dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80049de:	e00d      	b.n	80049fc <HAL_SD_ReadBlocks+0x172>
        {
          *(tempbuff + count) = SDMMC_ReadFIFO(hsd->Instance);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6819      	ldr	r1, [r3, #0]
 80049e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049ea:	18d4      	adds	r4, r2, r3
 80049ec:	4608      	mov	r0, r1
 80049ee:	f001 fa19 	bl	8005e24 <SDMMC_ReadFIFO>
 80049f2:	4603      	mov	r3, r0
 80049f4:	6023      	str	r3, [r4, #0]
        for(count = 0U; count < 8U; count++)
 80049f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f8:	3301      	adds	r3, #1
 80049fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80049fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049fe:	2b07      	cmp	r3, #7
 8004a00:	d9ee      	bls.n	80049e0 <HAL_SD_ReadBlocks+0x156>
        }
        tempbuff += 8U;
 8004a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a04:	3320      	adds	r3, #32
 8004a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8004a08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d007      	beq.n	8004a1e <HAL_SD_ReadBlocks+0x194>
 8004a0e:	f7fc fc3d 	bl	800128c <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d810      	bhi.n	8004a40 <HAL_SD_ReadBlocks+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8004a26:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a2c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e0b6      	b.n	8004bae <HAL_SD_ReadBlocks+0x324>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a46:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d0be      	beq.n	80049cc <HAL_SD_ReadBlocks+0x142>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d020      	beq.n	8004a9e <HAL_SD_ReadBlocks+0x214>
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d91d      	bls.n	8004a9e <HAL_SD_ReadBlocks+0x214>
    {    
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a66:	2b03      	cmp	r3, #3
 8004a68:	d019      	beq.n	8004a9e <HAL_SD_ReadBlocks+0x214>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f001 fb3e 	bl	80060f0 <SDMMC_CmdStopTransfer>
 8004a74:	6378      	str	r0, [r7, #52]	@ 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8004a76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d010      	beq.n	8004a9e <HAL_SD_ReadBlocks+0x214>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8004a84:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e087      	b.n	8004bae <HAL_SD_ReadBlocks+0x324>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aa4:	f003 0308 	and.w	r3, r3, #8
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d010      	beq.n	8004ace <HAL_SD_ReadBlocks+0x244>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8004ab4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aba:	f043 0208 	orr.w	r2, r3, #8
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e06f      	b.n	8004bae <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d010      	beq.n	8004afe <HAL_SD_ReadBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8004ae4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aea:	f043 0202 	orr.w	r2, r3, #2
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e057      	b.n	8004bae <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b04:	f003 0320 	and.w	r3, r3, #32
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d037      	beq.n	8004b7c <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8004b14:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b1a:	f043 0220 	orr.w	r2, r3, #32
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e03f      	b.n	8004bae <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
    {
      *tempbuff = SDMMC_ReadFIFO(hsd->Instance);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f001 f976 	bl	8005e24 <SDMMC_ReadFIFO>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b3c:	601a      	str	r2, [r3, #0]
      tempbuff++;
 8004b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b40:	3304      	adds	r3, #4
 8004b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8004b44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d007      	beq.n	8004b5a <HAL_SD_ReadBlocks+0x2d0>
 8004b4a:	f7fc fb9f 	bl	800128c <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d810      	bhi.n	8004b7c <HAL_SD_ReadBlocks+0x2f2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);        
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8004b62:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b68:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e018      	b.n	8004bae <HAL_SD_ReadBlocks+0x324>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1d1      	bne.n	8004b2e <HAL_SD_ReadBlocks+0x2a4>
      }
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8004b92:	639a      	str	r2, [r3, #56]	@ 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	e006      	b.n	8004bae <HAL_SD_ReadBlocks+0x324>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
  }
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	373c      	adds	r7, #60	@ 0x3c
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd90      	pop	{r4, r7, pc}

08004bb6 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b08e      	sub	sp, #56	@ 0x38
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	60f8      	str	r0, [r7, #12]
 8004bbe:	60b9      	str	r1, [r7, #8]
 8004bc0:	607a      	str	r2, [r7, #4]
 8004bc2:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart = HAL_GetTick();
 8004bc8:	f7fc fb60 	bl	800128c <HAL_GetTick>
 8004bcc:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t count = 0;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t *tempbuff = (uint32_t *)pData;
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  if(NULL == pData)
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d107      	bne.n	8004bec <HAL_SD_WriteBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e147      	b.n	8004e7c <HAL_SD_WriteBlocks+0x2c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	f040 813a 	bne.w	8004e6e <HAL_SD_WriteBlocks+0x2b8>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	441a      	add	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d907      	bls.n	8004c1e <HAL_SD_WriteBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c12:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e12e      	b.n	8004e7c <HAL_SD_WriteBlocks+0x2c6>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2203      	movs	r2, #3
 8004c22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	62da      	str	r2, [r3, #44]	@ 0x2c
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d002      	beq.n	8004c3c <HAL_SD_WriteBlocks+0x86>
    {
      BlockAdd *= 512;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	025b      	lsls	r3, r3, #9
 8004c3a:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004c44:	4618      	mov	r0, r3
 8004c46:	f001 f99f 	bl	8005f88 <SDMMC_CmdBlockLength>
 8004c4a:	6378      	str	r0, [r7, #52]	@ 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d010      	beq.n	8004c74 <HAL_SD_WriteBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8004c5a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c62:	431a      	orrs	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e103      	b.n	8004e7c <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d90a      	bls.n	8004c90 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2220      	movs	r2, #32
 8004c7e:	631a      	str	r2, [r3, #48]	@ 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6879      	ldr	r1, [r7, #4]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f001 fa0e 	bl	80060a8 <SDMMC_CmdWriteMultiBlock>
 8004c8c:	6378      	str	r0, [r7, #52]	@ 0x34
 8004c8e:	e009      	b.n	8004ca4 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2210      	movs	r2, #16
 8004c94:	631a      	str	r2, [r3, #48]	@ 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	6879      	ldr	r1, [r7, #4]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f001 f9df 	bl	8006060 <SDMMC_CmdWriteSingleBlock>
 8004ca2:	6378      	str	r0, [r7, #52]	@ 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d010      	beq.n	8004ccc <HAL_SD_WriteBlocks+0x116>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8004cb2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e0d7      	b.n	8004e7c <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8004cd0:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	025b      	lsls	r3, r3, #9
 8004cd6:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004cd8:	2390      	movs	r3, #144	@ 0x90
 8004cda:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	627b      	str	r3, [r7, #36]	@ 0x24
    SDMMC_ConfigData(hsd->Instance, &config);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f107 0210 	add.w	r2, r7, #16
 8004cf0:	4611      	mov	r1, r2
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f001 f91c 	bl	8005f30 <SDMMC_ConfigData>
    
    /* Write block(s) in polling mode */
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004cf8:	e037      	b.n	8004d6a <HAL_SD_WriteBlocks+0x1b4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE))
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d014      	beq.n	8004d32 <HAL_SD_WriteBlocks+0x17c>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8004d08:	2300      	movs	r3, #0
 8004d0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d0c:	e00b      	b.n	8004d26 <HAL_SD_WriteBlocks+0x170>
        {
          SDMMC_WriteFIFO(hsd->Instance, (tempbuff + count));
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6818      	ldr	r0, [r3, #0]
 8004d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d18:	4413      	add	r3, r2
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	f001 f88f 	bl	8005e3e <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8004d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d22:	3301      	adds	r3, #1
 8004d24:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d28:	2b07      	cmp	r3, #7
 8004d2a:	d9f0      	bls.n	8004d0e <HAL_SD_WriteBlocks+0x158>
        }
        tempbuff += 8U;
 8004d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d2e:	3320      	adds	r3, #32
 8004d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8004d32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d007      	beq.n	8004d48 <HAL_SD_WriteBlocks+0x192>
 8004d38:	f7fc faa8 	bl	800128c <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d810      	bhi.n	8004d6a <HAL_SD_WriteBlocks+0x1b4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8004d50:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d58:	431a      	orrs	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e088      	b.n	8004e7c <HAL_SD_WriteBlocks+0x2c6>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d70:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d0c0      	beq.n	8004cfa <HAL_SD_WriteBlocks+0x144>
      }
    }
    
    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d020      	beq.n	8004dc8 <HAL_SD_WriteBlocks+0x212>
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d91d      	bls.n	8004dc8 <HAL_SD_WriteBlocks+0x212>
    { 
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d90:	2b03      	cmp	r3, #3
 8004d92:	d019      	beq.n	8004dc8 <HAL_SD_WriteBlocks+0x212>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f001 f9a9 	bl	80060f0 <SDMMC_CmdStopTransfer>
 8004d9e:	6378      	str	r0, [r7, #52]	@ 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8004da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d010      	beq.n	8004dc8 <HAL_SD_WriteBlocks+0x212>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8004dae:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004db4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004db6:	431a      	orrs	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e059      	b.n	8004e7c <HAL_SD_WriteBlocks+0x2c6>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dce:	f003 0308 	and.w	r3, r3, #8
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d010      	beq.n	8004df8 <HAL_SD_WriteBlocks+0x242>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8004dde:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004de4:	f043 0208 	orr.w	r2, r3, #8
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e041      	b.n	8004e7c <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d010      	beq.n	8004e28 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8004e0e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e14:	f043 0202 	orr.w	r2, r3, #2
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e029      	b.n	8004e7c <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e2e:	f003 0310 	and.w	r3, r3, #16
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d010      	beq.n	8004e58 <HAL_SD_WriteBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8004e3e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e44:	f043 0210 	orr.w	r2, r3, #16
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e011      	b.n	8004e7c <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8004e60:	639a      	str	r2, [r3, #56]	@ 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	e006      	b.n	8004e7c <HAL_SD_WriteBlocks+0x2c6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e72:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
  }
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3738      	adds	r7, #56	@ 0x38
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e96:	0e1b      	lsrs	r3, r3, #24
 8004e98:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	099b      	lsrs	r3, r3, #6
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	f003 0303 	and.w	r3, r3, #3
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	089b      	lsrs	r3, r3, #2
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	f003 030f 	and.w	r3, r3, #15
 8004eb4:	b2da      	uxtb	r2, r3
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	f003 0303 	and.w	r3, r3, #3
 8004ec2:	b2da      	uxtb	r2, r3
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ecc:	0c1b      	lsrs	r3, r3, #16
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	b2da      	uxtb	r2, r3
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ede:	0a1b      	lsrs	r3, r3, #8
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	b2da      	uxtb	r2, r3
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	b2da      	uxtb	r2, r3
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f00:	0e1b      	lsrs	r3, r3, #24
 8004f02:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	011b      	lsls	r3, r3, #4
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f14:	0c1b      	lsrs	r3, r3, #16
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	88db      	ldrh	r3, [r3, #6]
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	091b      	lsrs	r3, r3, #4
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	f003 030f 	and.w	r3, r3, #15
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	f003 030f 	and.w	r3, r3, #15
 8004f3c:	b2da      	uxtb	r2, r3
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f46:	0a1b      	lsrs	r3, r3, #8
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	09db      	lsrs	r3, r3, #7
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	b2da      	uxtb	r2, r3
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	099b      	lsrs	r3, r3, #6
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	b2da      	uxtb	r2, r3
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	095b      	lsrs	r3, r3, #5
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	b2da      	uxtb	r2, r3
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	091b      	lsrs	r3, r3, #4
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	b2da      	uxtb	r2, r3
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f040 8086 	bne.w	80050a8 <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	029b      	lsls	r3, r3, #10
 8004fa0:	f403 6240 	and.w	r2, r3, #3072	@ 0xc00
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	691a      	ldr	r2, [r3, #16]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fc2:	0e1b      	lsrs	r3, r3, #24
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	691a      	ldr	r2, [r3, #16]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	099b      	lsrs	r3, r3, #6
 8004fd0:	f003 0303 	and.w	r3, r3, #3
 8004fd4:	431a      	orrs	r2, r3
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	08db      	lsrs	r3, r3, #3
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	f003 0307 	and.w	r3, r3, #7
 8004fe4:	b2da      	uxtb	r2, r3
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	f003 0307 	and.w	r3, r3, #7
 8004ff2:	b2da      	uxtb	r2, r3
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ffc:	0c1b      	lsrs	r3, r3, #16
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	095b      	lsrs	r3, r3, #5
 8005006:	b2db      	uxtb	r3, r3
 8005008:	f003 0307 	and.w	r3, r3, #7
 800500c:	b2da      	uxtb	r2, r3
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	089b      	lsrs	r3, r3, #2
 8005016:	b2db      	uxtb	r3, r3
 8005018:	f003 0307 	and.w	r3, r3, #7
 800501c:	b2da      	uxtb	r2, r3
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	b2db      	uxtb	r3, r3
 8005026:	005b      	lsls	r3, r3, #1
 8005028:	b2db      	uxtb	r3, r3
 800502a:	f003 0306 	and.w	r3, r3, #6
 800502e:	b2da      	uxtb	r2, r3
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005038:	0a1b      	lsrs	r3, r3, #8
 800503a:	b2db      	uxtb	r3, r3
 800503c:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	7e1b      	ldrb	r3, [r3, #24]
 8005042:	b2da      	uxtb	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	09db      	lsrs	r3, r3, #7
 8005048:	b2db      	uxtb	r3, r3
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	b2db      	uxtb	r3, r3
 8005050:	4313      	orrs	r3, r2
 8005052:	b2da      	uxtb	r2, r3
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	1c5a      	adds	r2, r3, #1
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	7e1b      	ldrb	r3, [r3, #24]
 8005066:	b2db      	uxtb	r3, r3
 8005068:	3302      	adds	r3, #2
 800506a:	2201      	movs	r2, #1
 800506c:	409a      	lsls	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005072:	fb03 f202 	mul.w	r2, r3, r2
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	7a1b      	ldrb	r3, [r3, #8]
 800507e:	b2db      	uxtb	r3, r3
 8005080:	461a      	mov	r2, r3
 8005082:	2301      	movs	r3, #1
 8005084:	4093      	lsls	r3, r2
 8005086:	461a      	mov	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8005094:	0a52      	lsrs	r2, r2, #9
 8005096:	fb03 f202 	mul.w	r2, r3, r2
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050a4:	661a      	str	r2, [r3, #96]	@ 0x60
 80050a6:	e04d      	b.n	8005144 <HAL_SD_GetCardCSD+0x2c0>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d138      	bne.n	8005122 <HAL_SD_GetCardCSD+0x29e>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	041b      	lsls	r3, r3, #16
 80050bc:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050c8:	0e1b      	lsrs	r3, r3, #24
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8);
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	691a      	ldr	r2, [r3, #16]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	021b      	lsls	r3, r3, #8
 80050d6:	431a      	orrs	r2, r3
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050e0:	0c1b      	lsrs	r3, r3, #16
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	691a      	ldr	r2, [r3, #16]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	431a      	orrs	r2, r3
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050f6:	0a1b      	lsrs	r3, r3, #8
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	3301      	adds	r3, #1
 8005102:	029a      	lsls	r2, r3, #10
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	655a      	str	r2, [r3, #84]	@ 0x54
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005116:	659a      	str	r2, [r3, #88]	@ 0x58
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	661a      	str	r2, [r3, #96]	@ 0x60
 8005120:	e010      	b.n	8005144 <HAL_SD_GetCardCSD+0x2c0>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 800512a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005130:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e0c1      	b.n	80052c8 <HAL_SD_GetCardCSD+0x444>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	099b      	lsrs	r3, r3, #6
 8005148:	b2db      	uxtb	r3, r3
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	b2da      	uxtb	r2, r3
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	b2db      	uxtb	r3, r3
 8005158:	005b      	lsls	r3, r3, #1
 800515a:	b2db      	uxtb	r3, r3
 800515c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8005160:	b2da      	uxtb	r2, r3
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800516a:	b2db      	uxtb	r3, r3
 800516c:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	7e9b      	ldrb	r3, [r3, #26]
 8005172:	b2da      	uxtb	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	09db      	lsrs	r3, r3, #7
 8005178:	b2db      	uxtb	r3, r3
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	b2db      	uxtb	r3, r3
 8005180:	4313      	orrs	r3, r2
 8005182:	b2da      	uxtb	r2, r3
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	b2db      	uxtb	r3, r3
 800518c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005190:	b2da      	uxtb	r2, r3
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800519a:	0e1b      	lsrs	r3, r3, #24
 800519c:	b2db      	uxtb	r3, r3
 800519e:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	09db      	lsrs	r3, r3, #7
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	b2da      	uxtb	r2, r3
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	095b      	lsrs	r3, r3, #5
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	f003 0303 	and.w	r3, r3, #3
 80051ba:	b2da      	uxtb	r2, r3
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	089b      	lsrs	r3, r3, #2
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	f003 0307 	and.w	r3, r3, #7
 80051ca:	b2da      	uxtb	r2, r3
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	f003 030c 	and.w	r3, r3, #12
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051e6:	0c1b      	lsrs	r3, r3, #16
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	7fdb      	ldrb	r3, [r3, #31]
 80051f0:	b2da      	uxtb	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	099b      	lsrs	r3, r3, #6
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	f003 0303 	and.w	r3, r3, #3
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	4313      	orrs	r3, r2
 8005200:	b2da      	uxtb	r2, r3
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	095b      	lsrs	r3, r3, #5
 800520a:	b2db      	uxtb	r3, r3
 800520c:	f003 0301 	and.w	r3, r3, #1
 8005210:	b2da      	uxtb	r2, r3
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	b2db      	uxtb	r3, r3
 8005224:	f003 0301 	and.w	r3, r3, #1
 8005228:	b2da      	uxtb	r2, r3
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005234:	0a1b      	lsrs	r3, r3, #8
 8005236:	b2db      	uxtb	r3, r3
 8005238:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	09db      	lsrs	r3, r3, #7
 800523e:	b2db      	uxtb	r3, r3
 8005240:	f003 0301 	and.w	r3, r3, #1
 8005244:	b2da      	uxtb	r2, r3
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	099b      	lsrs	r3, r3, #6
 8005250:	b2db      	uxtb	r3, r3
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	b2da      	uxtb	r2, r3
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	095b      	lsrs	r3, r3, #5
 8005262:	b2db      	uxtb	r3, r3
 8005264:	f003 0301 	and.w	r3, r3, #1
 8005268:	b2da      	uxtb	r2, r3
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	091b      	lsrs	r3, r3, #4
 8005274:	b2db      	uxtb	r3, r3
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	b2da      	uxtb	r2, r3
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	089b      	lsrs	r3, r3, #2
 8005286:	b2db      	uxtb	r3, r3
 8005288:	f003 0303 	and.w	r3, r3, #3
 800528c:	b2da      	uxtb	r2, r3
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  pCSD->ECC              = (tmp & 0x03);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	b2db      	uxtb	r3, r3
 8005298:	f003 0303 	and.w	r3, r3, #3
 800529c:	b2da      	uxtb	r2, r3
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	085b      	lsrs	r3, r3, #1
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  pCSD->Reserved4 = 1;
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  
  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800532c:	b5b0      	push	{r4, r5, r7, lr}
 800532e:	b08e      	sub	sp, #56	@ 0x38
 8005330:	af04      	add	r7, sp, #16
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8005336:	2300      	movs	r3, #0
 8005338:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2203      	movs	r2, #3
 800533e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005346:	2b03      	cmp	r3, #3
 8005348:	d02e      	beq.n	80053a8 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005350:	d106      	bne.n	8005360 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005356:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	639a      	str	r2, [r3, #56]	@ 0x38
 800535e:	e029      	b.n	80053b4 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005366:	d10a      	bne.n	800537e <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 fa1c 	bl	80057a6 <SD_WideBus_Enable>
 800536e:	6278      	str	r0, [r7, #36]	@ 0x24
      
      hsd->ErrorCode |= errorstate;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005376:	431a      	orrs	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	639a      	str	r2, [r3, #56]	@ 0x38
 800537c:	e01a      	b.n	80053b4 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d10a      	bne.n	800539a <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 fa5b 	bl	8005840 <SD_WideBus_Disable>
 800538a:	6278      	str	r0, [r7, #36]	@ 0x24
      
      hsd->ErrorCode |= errorstate;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005392:	431a      	orrs	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	639a      	str	r2, [r3, #56]	@ 0x38
 8005398:	e00c      	b.n	80053b4 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800539e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	639a      	str	r2, [r3, #56]	@ 0x38
 80053a6:	e005      	b.n	80053b4 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ac:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00a      	beq.n	80053d2 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 80053c4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e024      	b.n	800541c <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	623b      	str	r3, [r7, #32]
    SDMMC_Init(hsd->Instance, Init);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681d      	ldr	r5, [r3, #0]
 80053f8:	466c      	mov	r4, sp
 80053fa:	f107 0318 	add.w	r3, r7, #24
 80053fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005402:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005406:	f107 030c 	add.w	r3, r7, #12
 800540a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800540c:	4628      	mov	r0, r5
 800540e:	f000 fcdd 	bl	8005dcc <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3728      	adds	r7, #40	@ 0x28
 8005420:	46bd      	mov	sp, r7
 8005422:	bdb0      	pop	{r4, r5, r7, pc}

08005424 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 800542c:	2304      	movs	r3, #4
 800542e:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8005430:	2300      	movs	r3, #0
 8005432:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 8005434:	2300      	movs	r3, #0
 8005436:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 8005438:	f107 030c 	add.w	r3, r7, #12
 800543c:	4619      	mov	r1, r3
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 f987 	bl	8005752 <SD_SendStatus>
 8005444:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d005      	beq.n	8005458 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	431a      	orrs	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9) & 0x0F);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	0a5b      	lsrs	r3, r3, #9
 800545c:	b2db      	uxtb	r3, r3
 800545e:	f003 030f 	and.w	r3, r3, #15
 8005462:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8005464:	7dfb      	ldrb	r3, [r7, #23]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3718      	adds	r7, #24
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800546e:	b5b0      	push	{r4, r5, r7, lr}
 8005470:	b094      	sub	sp, #80	@ 0x50
 8005472:	af04      	add	r7, sp, #16
 8005474:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8005476:	2300      	movs	r3, #0
 8005478:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint16_t sd_rca = 1;
 800547a:	2301      	movs	r3, #1
 800547c:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4618      	mov	r0, r3
 8005484:	f000 fcfa 	bl	8005e7c <SDMMC_GetPowerState>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d102      	bne.n	8005494 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800548e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8005492:	e0b2      	b.n	80055fa <SD_InitCard+0x18c>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005498:	2b03      	cmp	r3, #3
 800549a:	d02f      	beq.n	80054fc <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4618      	mov	r0, r3
 80054a2:	f000 ff40 	bl	8006326 <SDMMC_CmdSendCID>
 80054a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80054a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d001      	beq.n	80054b2 <SD_InitCard+0x44>
    {
      return errorstate;
 80054ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054b0:	e0a3      	b.n	80055fa <SD_InitCard+0x18c>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2100      	movs	r1, #0
 80054b8:	4618      	mov	r0, r3
 80054ba:	f000 fd24 	bl	8005f06 <SDMMC_GetResponse>
 80054be:	4602      	mov	r2, r0
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2104      	movs	r1, #4
 80054ca:	4618      	mov	r0, r3
 80054cc:	f000 fd1b 	bl	8005f06 <SDMMC_GetResponse>
 80054d0:	4602      	mov	r2, r0
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2108      	movs	r1, #8
 80054dc:	4618      	mov	r0, r3
 80054de:	f000 fd12 	bl	8005f06 <SDMMC_GetResponse>
 80054e2:	4602      	mov	r2, r0
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	210c      	movs	r1, #12
 80054ee:	4618      	mov	r0, r3
 80054f0:	f000 fd09 	bl	8005f06 <SDMMC_GetResponse>
 80054f4:	4602      	mov	r2, r0
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005500:	2b03      	cmp	r3, #3
 8005502:	d00d      	beq.n	8005520 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f107 020e 	add.w	r2, r7, #14
 800550c:	4611      	mov	r1, r2
 800550e:	4618      	mov	r0, r3
 8005510:	f000 ff4a 	bl	80063a8 <SDMMC_CmdSetRelAdd>
 8005514:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005516:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005518:	2b00      	cmp	r3, #0
 800551a:	d001      	beq.n	8005520 <SD_InitCard+0xb2>
    {
      return errorstate;
 800551c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800551e:	e06c      	b.n	80055fa <SD_InitCard+0x18c>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005524:	2b03      	cmp	r3, #3
 8005526:	d036      	beq.n	8005596 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005528:	89fb      	ldrh	r3, [r7, #14]
 800552a:	461a      	mov	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	651a      	str	r2, [r3, #80]	@ 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005538:	041b      	lsls	r3, r3, #16
 800553a:	4619      	mov	r1, r3
 800553c:	4610      	mov	r0, r2
 800553e:	f000 ff12 	bl	8006366 <SDMMC_CmdSendCSD>
 8005542:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005546:	2b00      	cmp	r3, #0
 8005548:	d001      	beq.n	800554e <SD_InitCard+0xe0>
    {
      return errorstate;
 800554a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800554c:	e055      	b.n	80055fa <SD_InitCard+0x18c>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2100      	movs	r1, #0
 8005554:	4618      	mov	r0, r3
 8005556:	f000 fcd6 	bl	8005f06 <SDMMC_GetResponse>
 800555a:	4602      	mov	r2, r0
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2104      	movs	r1, #4
 8005566:	4618      	mov	r0, r3
 8005568:	f000 fccd 	bl	8005f06 <SDMMC_GetResponse>
 800556c:	4602      	mov	r2, r0
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2108      	movs	r1, #8
 8005578:	4618      	mov	r0, r3
 800557a:	f000 fcc4 	bl	8005f06 <SDMMC_GetResponse>
 800557e:	4602      	mov	r2, r0
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	210c      	movs	r1, #12
 800558a:	4618      	mov	r0, r3
 800558c:	f000 fcbb 	bl	8005f06 <SDMMC_GetResponse>
 8005590:	4602      	mov	r2, r0
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2104      	movs	r1, #4
 800559c:	4618      	mov	r0, r3
 800559e:	f000 fcb2 	bl	8005f06 <SDMMC_GetResponse>
 80055a2:	4603      	mov	r3, r0
 80055a4:	0d1a      	lsrs	r2, r3, #20
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	64da      	str	r2, [r3, #76]	@ 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 80055aa:	f107 0310 	add.w	r3, r7, #16
 80055ae:	4619      	mov	r1, r3
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f7ff fc67 	bl	8004e84 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6819      	ldr	r1, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055be:	041b      	lsls	r3, r3, #16
 80055c0:	2200      	movs	r2, #0
 80055c2:	461c      	mov	r4, r3
 80055c4:	4615      	mov	r5, r2
 80055c6:	4622      	mov	r2, r4
 80055c8:	462b      	mov	r3, r5
 80055ca:	4608      	mov	r0, r1
 80055cc:	f000 fdb4 	bl	8006138 <SDMMC_CmdSelDesel>
 80055d0:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80055d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d001      	beq.n	80055dc <SD_InitCard+0x16e>
  {
    return errorstate;
 80055d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055da:	e00e      	b.n	80055fa <SD_InitCard+0x18c>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hsd->Instance, hsd->Init);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681d      	ldr	r5, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	466c      	mov	r4, sp
 80055e4:	f103 0210 	add.w	r2, r3, #16
 80055e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80055ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80055ee:	3304      	adds	r3, #4
 80055f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055f2:	4628      	mov	r0, r5
 80055f4:	f000 fbea 	bl	8005dcc <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3740      	adds	r7, #64	@ 0x40
 80055fe:	46bd      	mov	sp, r7
 8005600:	bdb0      	pop	{r4, r5, r7, pc}

08005602 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b086      	sub	sp, #24
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 800560a:	2300      	movs	r3, #0
 800560c:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 800560e:	2300      	movs	r3, #0
 8005610:	617b      	str	r3, [r7, #20]
 8005612:	2300      	movs	r3, #0
 8005614:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8005616:	2300      	movs	r3, #0
 8005618:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4618      	mov	r0, r3
 8005620:	f000 fdaf 	bl	8006182 <SDMMC_CmdGoIdleState>
 8005624:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d001      	beq.n	8005630 <SD_PowerON+0x2e>
  {
    return errorstate;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	e08c      	b.n	800574a <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4618      	mov	r0, r3
 8005636:	f000 fdc4 	bl	80061c2 <SDMMC_CmdOperCond>
 800563a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d03d      	beq.n	80056be <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	649a      	str	r2, [r3, #72]	@ 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 8005648:	e032      	b.n	80056b0 <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	1c5a      	adds	r2, r3, #1
 800564e:	60ba      	str	r2, [r7, #8]
 8005650:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005654:	4293      	cmp	r3, r2
 8005656:	d102      	bne.n	800565e <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005658:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800565c:	e075      	b.n	800574a <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2100      	movs	r1, #0
 8005664:	4618      	mov	r0, r3
 8005666:	f000 fdcd 	bl	8006204 <SDMMC_CmdAppCommand>
 800566a:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d002      	beq.n	8005678 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005672:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005676:	e068      	b.n	800574a <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2100      	movs	r1, #0
 800567e:	4618      	mov	r0, r3
 8005680:	f000 fde4 	bl	800624c <SDMMC_CmdAppOperCommand>
 8005684:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d002      	beq.n	8005692 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800568c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005690:	e05b      	b.n	800574a <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2100      	movs	r1, #0
 8005698:	4618      	mov	r0, r3
 800569a:	f000 fc34 	bl	8005f06 <SDMMC_GetResponse>
 800569e:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	0fdb      	lsrs	r3, r3, #31
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	bf0c      	ite	eq
 80056a8:	2301      	moveq	r3, #1
 80056aa:	2300      	movne	r3, #0
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d0c9      	beq.n	800564a <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	645a      	str	r2, [r3, #68]	@ 0x44
 80056bc:	e044      	b.n	8005748 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	649a      	str	r2, [r3, #72]	@ 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 80056c4:	e031      	b.n	800572a <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	1c5a      	adds	r2, r3, #1
 80056ca:	60ba      	str	r2, [r7, #8]
 80056cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d102      	bne.n	80056da <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80056d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80056d8:	e037      	b.n	800574a <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2100      	movs	r1, #0
 80056e0:	4618      	mov	r0, r3
 80056e2:	f000 fd8f 	bl	8006204 <SDMMC_CmdAppCommand>
 80056e6:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d001      	beq.n	80056f2 <SD_PowerON+0xf0>
      {
        return errorstate;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	e02b      	b.n	800574a <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80056fa:	4618      	mov	r0, r3
 80056fc:	f000 fda6 	bl	800624c <SDMMC_CmdAppOperCommand>
 8005700:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d001      	beq.n	800570c <SD_PowerON+0x10a>
      {
        return errorstate;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	e01e      	b.n	800574a <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2100      	movs	r1, #0
 8005712:	4618      	mov	r0, r3
 8005714:	f000 fbf7 	bl	8005f06 <SDMMC_GetResponse>
 8005718:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	0fdb      	lsrs	r3, r3, #31
 800571e:	2b01      	cmp	r3, #1
 8005720:	bf0c      	ite	eq
 8005722:	2301      	moveq	r3, #1
 8005724:	2300      	movne	r3, #0
 8005726:	b2db      	uxtb	r3, r3
 8005728:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d0ca      	beq.n	80056c6 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d003      	beq.n	8005742 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2201      	movs	r2, #1
 800573e:	645a      	str	r2, [r3, #68]	@ 0x44
 8005740:	e002      	b.n	8005748 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3718      	adds	r7, #24
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b084      	sub	sp, #16
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
 800575a:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800575c:	2300      	movs	r3, #0
 800575e:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d102      	bne.n	800576c <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 8005766:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800576a:	e018      	b.n	800579e <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005774:	041b      	lsls	r3, r3, #16
 8005776:	4619      	mov	r1, r3
 8005778:	4610      	mov	r0, r2
 800577a:	f000 fe38 	bl	80063ee <SDMMC_CmdSendStatus>
 800577e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d001      	beq.n	800578a <SD_SendStatus+0x38>
  {
    return errorstate;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	e009      	b.n	800579e <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2100      	movs	r1, #0
 8005790:	4618      	mov	r0, r3
 8005792:	f000 fbb8 	bl	8005f06 <SDMMC_GetResponse>
 8005796:	4602      	mov	r2, r0
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b086      	sub	sp, #24
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 80057ae:	2300      	movs	r3, #0
 80057b0:	60fb      	str	r3, [r7, #12]
 80057b2:	2300      	movs	r3, #0
 80057b4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80057b6:	2300      	movs	r3, #0
 80057b8:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2100      	movs	r1, #0
 80057c0:	4618      	mov	r0, r3
 80057c2:	f000 fba0 	bl	8005f06 <SDMMC_GetResponse>
 80057c6:	4603      	mov	r3, r0
 80057c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057d0:	d102      	bne.n	80057d8 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80057d2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80057d6:	e02f      	b.n	8005838 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80057d8:	f107 030c 	add.w	r3, r7, #12
 80057dc:	4619      	mov	r1, r3
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f87b 	bl	80058da <SD_FindSCR>
 80057e4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d001      	beq.n	80057f0 <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	e023      	b.n	8005838 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d01c      	beq.n	8005834 <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005802:	041b      	lsls	r3, r3, #16
 8005804:	4619      	mov	r1, r3
 8005806:	4610      	mov	r0, r2
 8005808:	f000 fcfc 	bl	8006204 <SDMMC_CmdAppCommand>
 800580c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d001      	beq.n	8005818 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	e00f      	b.n	8005838 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2102      	movs	r1, #2
 800581e:	4618      	mov	r0, r3
 8005820:	f000 fd3a 	bl	8006298 <SDMMC_CmdBusWidth>
 8005824:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d001      	beq.n	8005830 <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	e003      	b.n	8005838 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 8005830:	2300      	movs	r3, #0
 8005832:	e001      	b.n	8005838 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005834:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8005838:	4618      	mov	r0, r3
 800583a:	3718      	adds	r7, #24
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b086      	sub	sp, #24
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 8005848:	2300      	movs	r3, #0
 800584a:	60fb      	str	r3, [r7, #12]
 800584c:	2300      	movs	r3, #0
 800584e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8005850:	2300      	movs	r3, #0
 8005852:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2100      	movs	r1, #0
 800585a:	4618      	mov	r0, r3
 800585c:	f000 fb53 	bl	8005f06 <SDMMC_GetResponse>
 8005860:	4603      	mov	r3, r0
 8005862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005866:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800586a:	d102      	bne.n	8005872 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800586c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005870:	e02f      	b.n	80058d2 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005872:	f107 030c 	add.w	r3, r7, #12
 8005876:	4619      	mov	r1, r3
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 f82e 	bl	80058da <SD_FindSCR>
 800587e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d001      	beq.n	800588a <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	e023      	b.n	80058d2 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d01c      	beq.n	80058ce <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800589c:	041b      	lsls	r3, r3, #16
 800589e:	4619      	mov	r1, r3
 80058a0:	4610      	mov	r0, r2
 80058a2:	f000 fcaf 	bl	8006204 <SDMMC_CmdAppCommand>
 80058a6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d001      	beq.n	80058b2 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	e00f      	b.n	80058d2 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2100      	movs	r1, #0
 80058b8:	4618      	mov	r0, r3
 80058ba:	f000 fced 	bl	8006298 <SDMMC_CmdBusWidth>
 80058be:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d001      	beq.n	80058ca <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	e003      	b.n	80058d2 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 80058ca:	2300      	movs	r3, #0
 80058cc:	e001      	b.n	80058d2 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80058ce:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3718      	adds	r7, #24
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80058da:	b590      	push	{r4, r7, lr}
 80058dc:	b08f      	sub	sp, #60	@ 0x3c
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
 80058e2:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80058e4:	2300      	movs	r3, #0
 80058e6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 80058e8:	f7fb fcd0 	bl	800128c <HAL_GetTick>
 80058ec:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t index = 0;
 80058ee:	2300      	movs	r3, #0
 80058f0:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2] = {0, 0};
 80058f2:	2300      	movs	r3, #0
 80058f4:	60fb      	str	r3, [r7, #12]
 80058f6:	2300      	movs	r3, #0
 80058f8:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2108      	movs	r1, #8
 8005900:	4618      	mov	r0, r3
 8005902:	f000 fb41 	bl	8005f88 <SDMMC_CmdBlockLength>
 8005906:	6338      	str	r0, [r7, #48]	@ 0x30
  if(errorstate != HAL_OK)
 8005908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800590a:	2b00      	cmp	r3, #0
 800590c:	d001      	beq.n	8005912 <SD_FindSCR+0x38>
  {
    return errorstate;
 800590e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005910:	e0a8      	b.n	8005a64 <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800591a:	041b      	lsls	r3, r3, #16
 800591c:	4619      	mov	r1, r3
 800591e:	4610      	mov	r0, r2
 8005920:	f000 fc70 	bl	8006204 <SDMMC_CmdAppCommand>
 8005924:	6338      	str	r0, [r7, #48]	@ 0x30
  if(errorstate != HAL_OK)
 8005926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005928:	2b00      	cmp	r3, #0
 800592a:	d001      	beq.n	8005930 <SD_FindSCR+0x56>
  {
    return errorstate;
 800592c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800592e:	e099      	b.n	8005a64 <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005930:	f04f 33ff 	mov.w	r3, #4294967295
 8005934:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8;
 8005936:	2308      	movs	r3, #8
 8005938:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800593a:	2330      	movs	r3, #48	@ 0x30
 800593c:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800593e:	2302      	movs	r3, #2
 8005940:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005942:	2300      	movs	r3, #0
 8005944:	627b      	str	r3, [r7, #36]	@ 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005946:	2301      	movs	r3, #1
 8005948:	62bb      	str	r3, [r7, #40]	@ 0x28
  SDMMC_ConfigData(hsd->Instance, &config);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f107 0214 	add.w	r2, r7, #20
 8005952:	4611      	mov	r1, r2
 8005954:	4618      	mov	r0, r3
 8005956:	f000 faeb 	bl	8005f30 <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4618      	mov	r0, r3
 8005960:	f000 fcbe 	bl	80062e0 <SDMMC_CmdSendSCR>
 8005964:	6338      	str	r0, [r7, #48]	@ 0x30
  if(errorstate != HAL_OK)
 8005966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005968:	2b00      	cmp	r3, #0
 800596a:	d022      	beq.n	80059b2 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800596c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800596e:	e079      	b.n	8005a64 <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005976:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00e      	beq.n	800599c <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6819      	ldr	r1, [r3, #0]
 8005982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	f107 020c 	add.w	r2, r7, #12
 800598a:	18d4      	adds	r4, r2, r3
 800598c:	4608      	mov	r0, r1
 800598e:	f000 fa49 	bl	8005e24 <SDMMC_ReadFIFO>
 8005992:	4603      	mov	r3, r0
 8005994:	6023      	str	r3, [r4, #0]
      index++;
 8005996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005998:	3301      	adds	r3, #1
 800599a:	637b      	str	r3, [r7, #52]	@ 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800599c:	f7fb fc76 	bl	800128c <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059aa:	d102      	bne.n	80059b2 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80059ac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80059b0:	e058      	b.n	8005a64 <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059b8:	f240 432a 	movw	r3, #1066	@ 0x42a
 80059bc:	4013      	ands	r3, r2
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d0d6      	beq.n	8005970 <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059c8:	f003 0308 	and.w	r3, r3, #8
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d005      	beq.n	80059dc <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2208      	movs	r2, #8
 80059d6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80059d8:	2308      	movs	r3, #8
 80059da:	e043      	b.n	8005a64 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059e2:	f003 0302 	and.w	r3, r3, #2
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d005      	beq.n	80059f6 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2202      	movs	r2, #2
 80059f0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80059f2:	2302      	movs	r3, #2
 80059f4:	e036      	b.n	8005a64 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059fc:	f003 0320 	and.w	r3, r3, #32
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d005      	beq.n	8005a10 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2220      	movs	r2, #32
 8005a0a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 8005a0c:	2320      	movs	r3, #32
 8005a0e:	e029      	b.n	8005a64 <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8005a18:	639a      	str	r2, [r3, #56]	@ 0x38
    
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	061a      	lsls	r2, r3, #24
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	021b      	lsls	r3, r3, #8
 8005a22:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005a26:	431a      	orrs	r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	0a1b      	lsrs	r3, r3, #8
 8005a2c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005a30:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	3304      	adds	r3, #4
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8005a3c:	430a      	orrs	r2, r1
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005a3e:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	061a      	lsls	r2, r3, #24
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	021b      	lsls	r3, r3, #8
 8005a48:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005a4c:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	0a1b      	lsrs	r3, r3, #8
 8005a52:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005a56:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	0e1b      	lsrs	r3, r3, #24
 8005a5c:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	373c      	adds	r7, #60	@ 0x3c
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd90      	pop	{r4, r7, pc}

08005a6c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e025      	b.n	8005acc <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d106      	bne.n	8005a9a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 f81d 	bl	8005ad4 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2202      	movs	r2, #2
 8005a9e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	3304      	adds	r3, #4
 8005aaa:	4619      	mov	r1, r3
 8005aac:	4610      	mov	r0, r2
 8005aae:	f000 f867 	bl	8005b80 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6818      	ldr	r0, [r3, #0]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	461a      	mov	r2, r3
 8005abc:	6839      	ldr	r1, [r7, #0]
 8005abe:	f000 f8d1 	bl	8005c64 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3708      	adds	r7, #8
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8005adc:	bf00      	nop
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d101      	bne.n	8005b04 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8005b00:	2302      	movs	r3, #2
 8005b02:	e018      	b.n	8005b36 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2202      	movs	r2, #2
 8005b08:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	68b9      	ldr	r1, [r7, #8]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f000 f925 	bl	8005d64 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d104      	bne.n	8005b2c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2205      	movs	r2, #5
 8005b26:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8005b2a:	e003      	b.n	8005b34 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  }
  
  return HAL_OK;  
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3710      	adds	r7, #16
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b082      	sub	sp, #8
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
 8005b46:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d101      	bne.n	8005b58 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005b54:	2302      	movs	r3, #2
 8005b56:	e00e      	b.n	8005b76 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2202      	movs	r2, #2
 8005b5c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6839      	ldr	r1, [r7, #0]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f000 f91d 	bl	8005da6 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  return HAL_OK;   
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3708      	adds	r7, #8
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
	...

08005b80 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d027      	beq.n	8005bea <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	4b2f      	ldr	r3, [pc, #188]	@ (8005c60 <FMC_SDRAM_Init+0xe0>)
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005bb0:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8005bb6:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8005bbc:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8005bc2:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8005bc8:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8005bce:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8005bd4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        Init->ReadBurst          |\
 8005bda:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	601a      	str	r2, [r3, #0]
 8005be8:	e032      	b.n	8005c50 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8005bf6:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005c00:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        Init->ReadBurst          |\
 8005c06:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005c14:	68ba      	ldr	r2, [r7, #8]
 8005c16:	4b12      	ldr	r3, [pc, #72]	@ (8005c60 <FMC_SDRAM_Init+0xe0>)
 8005c18:	4013      	ands	r3, r2
 8005c1a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005c24:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8005c2a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8005c30:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8005c36:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8005c3c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005c3e:	68ba      	ldr	r2, [r7, #8]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3714      	adds	r7, #20
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	ffff8000 	.word	0xffff8000

08005c64 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b087      	sub	sp, #28
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8005c70:	2300      	movs	r3, #0
 8005c72:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8005c74:	2300      	movs	r3, #0
 8005c76:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d02e      	beq.n	8005cdc <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005c8a:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	3b01      	subs	r3, #1
 8005c98:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005c9a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8005ca4:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	3b01      	subs	r3, #1
 8005cac:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8005cae:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8005cb8:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	695b      	ldr	r3, [r3, #20]
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8005cc2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	609a      	str	r2, [r3, #8]
 8005cda:	e039      	b.n	8005d50 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	4b1e      	ldr	r3, [pc, #120]	@ (8005d60 <FMC_SDRAM_Timing_Init+0xfc>)
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005d0e:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005d1e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	3b01      	subs	r3, #1
 8005d26:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8005d28:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8005d32:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	699b      	ldr	r3, [r3, #24]
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	371c      	adds	r7, #28
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	ff0f0fff 	.word	0xff0f0fff

08005d64 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b087      	sub	sp, #28
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8005d70:	2300      	movs	r3, #0
 8005d72:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005d7c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	3b01      	subs	r3, #1
 8005d84:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8005d86:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	371c      	adds	r7, #28
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr

08005da6 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8005da6:	b480      	push	{r7}
 8005da8:	b083      	sub	sp, #12
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
 8005dae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	695a      	ldr	r2, [r3, #20]
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	005b      	lsls	r3, r3, #1
 8005db8:	431a      	orrs	r2, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8005dcc:	b084      	sub	sp, #16
 8005dce:	b480      	push	{r7}
 8005dd0:	b085      	sub	sp, #20
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
 8005dd6:	f107 001c 	add.w	r0, r7, #28
 8005dda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005dde:	2300      	movs	r3, #0
 8005de0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005de2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005de4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005de6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8005dea:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8005dee:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8005df2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8005df6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685a      	ldr	r2, [r3, #4]
 8005e02:	4b07      	ldr	r3, [pc, #28]	@ (8005e20 <SDMMC_Init+0x54>)
 8005e04:	4013      	ands	r3, r2
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	431a      	orrs	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3714      	adds	r7, #20
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	b004      	add	sp, #16
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	ffff8100 	.word	0xffff8100

08005e24 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8005e3e:	b480      	push	{r7}
 8005e40:	b083      	sub	sp, #12
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
 8005e46:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2203      	movs	r2, #3
 8005e6c:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0303 	and.w	r3, r3, #3
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005eb6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005ebc:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005ec2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	68da      	ldr	r2, [r3, #12]
 8005ece:	4b06      	ldr	r3, [pc, #24]	@ (8005ee8 <SDMMC_SendCommand+0x50>)
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	431a      	orrs	r2, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3714      	adds	r7, #20
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr
 8005ee8:	fffff000 	.word	0xfffff000

08005eec <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	b2db      	uxtb	r3, r3
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	370c      	adds	r7, #12
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr

08005f06 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8005f06:	b480      	push	{r7}
 8005f08:	b085      	sub	sp, #20
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
 8005f0e:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 8005f10:	2300      	movs	r3, #0
 8005f12:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	3314      	adds	r3, #20
 8005f18:	461a      	mov	r2, r3
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
}  
 8005f24:	4618      	mov	r0, r3
 8005f26:	3714      	adds	r7, #20
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <SDMMC_ConfigData>:
  * @param  Data  pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	685a      	ldr	r2, [r3, #4]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005f56:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005f5c:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005f62:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f6e:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	431a      	orrs	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0

}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3714      	adds	r7, #20
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b088      	sub	sp, #32
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005f92:	2300      	movs	r3, #0
 8005f94:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005f9a:	2310      	movs	r3, #16
 8005f9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005f9e:	2340      	movs	r3, #64	@ 0x40
 8005fa0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005fa6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005faa:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005fac:	f107 0308 	add.w	r3, r7, #8
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f7ff ff70 	bl	8005e98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8005fb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fbc:	2110      	movs	r1, #16
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 fa64 	bl	800648c <SDMMC_GetCmdResp1>
 8005fc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005fc6:	69fb      	ldr	r3, [r7, #28]
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3720      	adds	r7, #32
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b088      	sub	sp, #32
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005fe2:	2311      	movs	r3, #17
 8005fe4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005fe6:	2340      	movs	r3, #64	@ 0x40
 8005fe8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005fea:	2300      	movs	r3, #0
 8005fec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005fee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005ff2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005ff4:	f107 0308 	add.w	r3, r7, #8
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f7ff ff4c 	bl	8005e98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8006000:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006004:	2111      	movs	r1, #17
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 fa40 	bl	800648c <SDMMC_GetCmdResp1>
 800600c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800600e:	69fb      	ldr	r3, [r7, #28]
}
 8006010:	4618      	mov	r0, r3
 8006012:	3720      	adds	r7, #32
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b088      	sub	sp, #32
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006022:	2300      	movs	r3, #0
 8006024:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800602a:	2312      	movs	r3, #18
 800602c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800602e:	2340      	movs	r3, #64	@ 0x40
 8006030:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006032:	2300      	movs	r3, #0
 8006034:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006036:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800603a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800603c:	f107 0308 	add.w	r3, r7, #8
 8006040:	4619      	mov	r1, r3
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f7ff ff28 	bl	8005e98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8006048:	f241 3288 	movw	r2, #5000	@ 0x1388
 800604c:	2112      	movs	r1, #18
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 fa1c 	bl	800648c <SDMMC_GetCmdResp1>
 8006054:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006056:	69fb      	ldr	r3, [r7, #28]
}
 8006058:	4618      	mov	r0, r3
 800605a:	3720      	adds	r7, #32
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b088      	sub	sp, #32
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800606a:	2300      	movs	r3, #0
 800606c:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006072:	2318      	movs	r3, #24
 8006074:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006076:	2340      	movs	r3, #64	@ 0x40
 8006078:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800607a:	2300      	movs	r3, #0
 800607c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800607e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006082:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006084:	f107 0308 	add.w	r3, r7, #8
 8006088:	4619      	mov	r1, r3
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f7ff ff04 	bl	8005e98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8006090:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006094:	2118      	movs	r1, #24
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f9f8 	bl	800648c <SDMMC_GetCmdResp1>
 800609c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800609e:	69fb      	ldr	r3, [r7, #28]
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3720      	adds	r7, #32
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b088      	sub	sp, #32
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80060b2:	2300      	movs	r3, #0
 80060b4:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80060ba:	2319      	movs	r3, #25
 80060bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80060be:	2340      	movs	r3, #64	@ 0x40
 80060c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80060c2:	2300      	movs	r3, #0
 80060c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80060c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80060ca:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80060cc:	f107 0308 	add.w	r3, r7, #8
 80060d0:	4619      	mov	r1, r3
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f7ff fee0 	bl	8005e98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80060d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060dc:	2119      	movs	r1, #25
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 f9d4 	bl	800648c <SDMMC_GetCmdResp1>
 80060e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060e6:	69fb      	ldr	r3, [r7, #28]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3720      	adds	r7, #32
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b088      	sub	sp, #32
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80060f8:	2300      	movs	r3, #0
 80060fa:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0;
 80060fc:	2300      	movs	r3, #0
 80060fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006100:	230c      	movs	r3, #12
 8006102:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006104:	2340      	movs	r3, #64	@ 0x40
 8006106:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006108:	2300      	movs	r3, #0
 800610a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800610c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006110:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006112:	f107 0308 	add.w	r3, r7, #8
 8006116:	4619      	mov	r1, r3
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f7ff febd 	bl	8005e98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 800611e:	4a05      	ldr	r2, [pc, #20]	@ (8006134 <SDMMC_CmdStopTransfer+0x44>)
 8006120:	210c      	movs	r1, #12
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 f9b2 	bl	800648c <SDMMC_GetCmdResp1>
 8006128:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800612a:	69fb      	ldr	r3, [r7, #28]
}
 800612c:	4618      	mov	r0, r3
 800612e:	3720      	adds	r7, #32
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	05f5e100 	.word	0x05f5e100

08006138 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b08a      	sub	sp, #40	@ 0x28
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006144:	2300      	movs	r3, #0
 8006146:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800614c:	2307      	movs	r3, #7
 800614e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006150:	2340      	movs	r3, #64	@ 0x40
 8006152:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006154:	2300      	movs	r3, #0
 8006156:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006158:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800615c:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800615e:	f107 0310 	add.w	r3, r7, #16
 8006162:	4619      	mov	r1, r3
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	f7ff fe97 	bl	8005e98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800616a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800616e:	2107      	movs	r1, #7
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f000 f98b 	bl	800648c <SDMMC_GetCmdResp1>
 8006176:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8006178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800617a:	4618      	mov	r0, r3
 800617c:	3728      	adds	r7, #40	@ 0x28
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b088      	sub	sp, #32
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800618a:	2300      	movs	r3, #0
 800618c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 800618e:	2300      	movs	r3, #0
 8006190:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006192:	2300      	movs	r3, #0
 8006194:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8006196:	2300      	movs	r3, #0
 8006198:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800619a:	2300      	movs	r3, #0
 800619c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800619e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80061a2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80061a4:	f107 0308 	add.w	r3, r7, #8
 80061a8:	4619      	mov	r1, r3
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7ff fe74 	bl	8005e98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 f941 	bl	8006438 <SDMMC_GetCmdError>
 80061b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061b8:	69fb      	ldr	r3, [r7, #28]
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3720      	adds	r7, #32
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b088      	sub	sp, #32
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80061ca:	2300      	movs	r3, #0
 80061cc:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80061ce:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80061d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80061d4:	2308      	movs	r3, #8
 80061d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80061d8:	2340      	movs	r3, #64	@ 0x40
 80061da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80061dc:	2300      	movs	r3, #0
 80061de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80061e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80061e4:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80061e6:	f107 0308 	add.w	r3, r7, #8
 80061ea:	4619      	mov	r1, r3
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f7ff fe53 	bl	8005e98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 fb12 	bl	800681c <SDMMC_GetCmdResp7>
 80061f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061fa:	69fb      	ldr	r3, [r7, #28]
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3720      	adds	r7, #32
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b088      	sub	sp, #32
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800620e:	2300      	movs	r3, #0
 8006210:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006216:	2337      	movs	r3, #55	@ 0x37
 8006218:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800621a:	2340      	movs	r3, #64	@ 0x40
 800621c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800621e:	2300      	movs	r3, #0
 8006220:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006222:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006226:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006228:	f107 0308 	add.w	r3, r7, #8
 800622c:	4619      	mov	r1, r3
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f7ff fe32 	bl	8005e98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8006234:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006238:	2137      	movs	r1, #55	@ 0x37
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 f926 	bl	800648c <SDMMC_GetCmdResp1>
 8006240:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006242:	69fb      	ldr	r3, [r7, #28]
}
 8006244:	4618      	mov	r0, r3
 8006246:	3720      	adds	r7, #32
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t SdType)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b088      	sub	sp, #32
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006256:	2300      	movs	r3, #0
 8006258:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800625a:	683a      	ldr	r2, [r7, #0]
 800625c:	4b0d      	ldr	r3, [pc, #52]	@ (8006294 <SDMMC_CmdAppOperCommand+0x48>)
 800625e:	4313      	orrs	r3, r2
 8006260:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006262:	2329      	movs	r3, #41	@ 0x29
 8006264:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006266:	2340      	movs	r3, #64	@ 0x40
 8006268:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800626a:	2300      	movs	r3, #0
 800626c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800626e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006272:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006274:	f107 0308 	add.w	r3, r7, #8
 8006278:	4619      	mov	r1, r3
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f7ff fe0c 	bl	8005e98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 fa29 	bl	80066d8 <SDMMC_GetCmdResp3>
 8006286:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006288:	69fb      	ldr	r3, [r7, #28]
}
 800628a:	4618      	mov	r0, r3
 800628c:	3720      	adds	r7, #32
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	80100000 	.word	0x80100000

08006298 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b088      	sub	sp, #32
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80062a2:	2300      	movs	r3, #0
 80062a4:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80062aa:	2306      	movs	r3, #6
 80062ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80062ae:	2340      	movs	r3, #64	@ 0x40
 80062b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80062b2:	2300      	movs	r3, #0
 80062b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80062b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80062ba:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80062bc:	f107 0308 	add.w	r3, r7, #8
 80062c0:	4619      	mov	r1, r3
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f7ff fde8 	bl	8005e98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80062c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062cc:	2106      	movs	r1, #6
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 f8dc 	bl	800648c <SDMMC_GetCmdResp1>
 80062d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062d6:	69fb      	ldr	r3, [r7, #28]
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3720      	adds	r7, #32
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b088      	sub	sp, #32
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80062e8:	2300      	movs	r3, #0
 80062ea:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0;
 80062ec:	2300      	movs	r3, #0
 80062ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80062f0:	2333      	movs	r3, #51	@ 0x33
 80062f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80062f4:	2340      	movs	r3, #64	@ 0x40
 80062f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80062f8:	2300      	movs	r3, #0
 80062fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80062fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006300:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006302:	f107 0308 	add.w	r3, r7, #8
 8006306:	4619      	mov	r1, r3
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f7ff fdc5 	bl	8005e98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800630e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006312:	2133      	movs	r1, #51	@ 0x33
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 f8b9 	bl	800648c <SDMMC_GetCmdResp1>
 800631a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800631c:	69fb      	ldr	r3, [r7, #28]
}
 800631e:	4618      	mov	r0, r3
 8006320:	3720      	adds	r7, #32
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8006326:	b580      	push	{r7, lr}
 8006328:	b088      	sub	sp, #32
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800632e:	2300      	movs	r3, #0
 8006330:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 8006332:	2300      	movs	r3, #0
 8006334:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006336:	2302      	movs	r3, #2
 8006338:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800633a:	23c0      	movs	r3, #192	@ 0xc0
 800633c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800633e:	2300      	movs	r3, #0
 8006340:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006342:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006346:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006348:	f107 0308 	add.w	r3, r7, #8
 800634c:	4619      	mov	r1, r3
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f7ff fda2 	bl	8005e98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 f97f 	bl	8006658 <SDMMC_GetCmdResp2>
 800635a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800635c:	69fb      	ldr	r3, [r7, #28]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3720      	adds	r7, #32
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b088      	sub	sp, #32
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
 800636e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006370:	2300      	movs	r3, #0
 8006372:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006378:	2309      	movs	r3, #9
 800637a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800637c:	23c0      	movs	r3, #192	@ 0xc0
 800637e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006380:	2300      	movs	r3, #0
 8006382:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006384:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006388:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800638a:	f107 0308 	add.w	r3, r7, #8
 800638e:	4619      	mov	r1, r3
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f7ff fd81 	bl	8005e98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f95e 	bl	8006658 <SDMMC_GetCmdResp2>
 800639c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800639e:	69fb      	ldr	r3, [r7, #28]
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3720      	adds	r7, #32
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b088      	sub	sp, #32
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80063b2:	2300      	movs	r3, #0
 80063b4:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 80063b6:	2300      	movs	r3, #0
 80063b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80063ba:	2303      	movs	r3, #3
 80063bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80063be:	2340      	movs	r3, #64	@ 0x40
 80063c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80063c2:	2300      	movs	r3, #0
 80063c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80063c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80063ca:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80063cc:	f107 0308 	add.w	r3, r7, #8
 80063d0:	4619      	mov	r1, r3
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f7ff fd60 	bl	8005e98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80063d8:	683a      	ldr	r2, [r7, #0]
 80063da:	2103      	movs	r1, #3
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 f9af 	bl	8006740 <SDMMC_GetCmdResp6>
 80063e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80063e4:	69fb      	ldr	r3, [r7, #28]
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3720      	adds	r7, #32
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b088      	sub	sp, #32
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
 80063f6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80063f8:	2300      	movs	r3, #0
 80063fa:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006400:	230d      	movs	r3, #13
 8006402:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006404:	2340      	movs	r3, #64	@ 0x40
 8006406:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006408:	2300      	movs	r3, #0
 800640a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800640c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006410:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006412:	f107 0308 	add.w	r3, r7, #8
 8006416:	4619      	mov	r1, r3
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f7ff fd3d 	bl	8005e98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800641e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006422:	210d      	movs	r1, #13
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 f831 	bl	800648c <SDMMC_GetCmdResp1>
 800642a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800642c:	69fb      	ldr	r3, [r7, #28]
}
 800642e:	4618      	mov	r0, r3
 8006430:	3720      	adds	r7, #32
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
	...

08006438 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8006438:	b490      	push	{r4, r7}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8006440:	4b10      	ldr	r3, [pc, #64]	@ (8006484 <SDMMC_GetCmdError+0x4c>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a10      	ldr	r2, [pc, #64]	@ (8006488 <SDMMC_GetCmdError+0x50>)
 8006446:	fba2 2303 	umull	r2, r3, r2, r3
 800644a:	0a5b      	lsrs	r3, r3, #9
 800644c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006450:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8006454:	4623      	mov	r3, r4
 8006456:	1e5c      	subs	r4, r3, #1
 8006458:	2b00      	cmp	r3, #0
 800645a:	d102      	bne.n	8006462 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800645c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006460:	e00a      	b.n	8006478 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800646a:	2b00      	cmp	r3, #0
 800646c:	d0f2      	beq.n	8006454 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8006474:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3708      	adds	r7, #8
 800647c:	46bd      	mov	sp, r7
 800647e:	bc90      	pop	{r4, r7}
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	20000004 	.word	0x20000004
 8006488:	10624dd3 	.word	0x10624dd3

0800648c <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800648c:	b590      	push	{r4, r7, lr}
 800648e:	b087      	sub	sp, #28
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	460b      	mov	r3, r1
 8006496:	607a      	str	r2, [r7, #4]
 8006498:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800649a:	4b6c      	ldr	r3, [pc, #432]	@ (800664c <SDMMC_GetCmdResp1+0x1c0>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a6c      	ldr	r2, [pc, #432]	@ (8006650 <SDMMC_GetCmdResp1+0x1c4>)
 80064a0:	fba2 2303 	umull	r2, r3, r2, r3
 80064a4:	0a5b      	lsrs	r3, r3, #9
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 80064ac:	4623      	mov	r3, r4
 80064ae:	1e5c      	subs	r4, r3, #1
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d102      	bne.n	80064ba <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80064b4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80064b8:	e0c3      	b.n	8006642 <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064be:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d0f2      	beq.n	80064ac <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064ca:	f003 0304 	and.w	r3, r3, #4
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d004      	beq.n	80064dc <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2204      	movs	r2, #4
 80064d6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80064d8:	2304      	movs	r3, #4
 80064da:	e0b2      	b.n	8006642 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064e0:	f003 0301 	and.w	r3, r3, #1
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d004      	beq.n	80064f2 <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2201      	movs	r2, #1
 80064ec:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e0a7      	b.n	8006642 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80064f2:	68f8      	ldr	r0, [r7, #12]
 80064f4:	f7ff fcfa 	bl	8005eec <SDMMC_GetCommandResponse>
 80064f8:	4603      	mov	r3, r0
 80064fa:	461a      	mov	r2, r3
 80064fc:	7afb      	ldrb	r3, [r7, #11]
 80064fe:	4293      	cmp	r3, r2
 8006500:	d001      	beq.n	8006506 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006502:	2301      	movs	r3, #1
 8006504:	e09d      	b.n	8006642 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 800650c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800650e:	2100      	movs	r1, #0
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f7ff fcf8 	bl	8005f06 <SDMMC_GetResponse>
 8006516:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006518:	697a      	ldr	r2, [r7, #20]
 800651a:	4b4e      	ldr	r3, [pc, #312]	@ (8006654 <SDMMC_GetCmdResp1+0x1c8>)
 800651c:	4013      	ands	r3, r2
 800651e:	2b00      	cmp	r3, #0
 8006520:	d101      	bne.n	8006526 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 8006522:	2300      	movs	r3, #0
 8006524:	e08d      	b.n	8006642 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	2b00      	cmp	r3, #0
 800652a:	da02      	bge.n	8006532 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800652c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006530:	e087      	b.n	8006642 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d001      	beq.n	8006540 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800653c:	2340      	movs	r3, #64	@ 0x40
 800653e:	e080      	b.n	8006642 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d001      	beq.n	800654e <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800654a:	2380      	movs	r3, #128	@ 0x80
 800654c:	e079      	b.n	8006642 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006554:	2b00      	cmp	r3, #0
 8006556:	d002      	beq.n	800655e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006558:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800655c:	e071      	b.n	8006642 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006564:	2b00      	cmp	r3, #0
 8006566:	d002      	beq.n	800656e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006568:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800656c:	e069      	b.n	8006642 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006574:	2b00      	cmp	r3, #0
 8006576:	d002      	beq.n	800657e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006578:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800657c:	e061      	b.n	8006642 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006584:	2b00      	cmp	r3, #0
 8006586:	d002      	beq.n	800658e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006588:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800658c:	e059      	b.n	8006642 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d002      	beq.n	800659e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006598:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800659c:	e051      	b.n	8006642 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d002      	beq.n	80065ae <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80065a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80065ac:	e049      	b.n	8006642 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d002      	beq.n	80065be <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80065b8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80065bc:	e041      	b.n	8006642 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d002      	beq.n	80065ce <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 80065c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065cc:	e039      	b.n	8006642 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d002      	beq.n	80065de <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80065d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80065dc:	e031      	b.n	8006642 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d002      	beq.n	80065ee <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80065e8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80065ec:	e029      	b.n	8006642 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d002      	beq.n	80065fe <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80065f8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80065fc:	e021      	b.n	8006642 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006604:	2b00      	cmp	r3, #0
 8006606:	d002      	beq.n	800660e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006608:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800660c:	e019      	b.n	8006642 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006614:	2b00      	cmp	r3, #0
 8006616:	d002      	beq.n	800661e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006618:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800661c:	e011      	b.n	8006642 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006624:	2b00      	cmp	r3, #0
 8006626:	d002      	beq.n	800662e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006628:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800662c:	e009      	b.n	8006642 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	f003 0308 	and.w	r3, r3, #8
 8006634:	2b00      	cmp	r3, #0
 8006636:	d002      	beq.n	800663e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006638:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800663c:	e001      	b.n	8006642 <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800663e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8006642:	4618      	mov	r0, r3
 8006644:	371c      	adds	r7, #28
 8006646:	46bd      	mov	sp, r7
 8006648:	bd90      	pop	{r4, r7, pc}
 800664a:	bf00      	nop
 800664c:	20000004 	.word	0x20000004
 8006650:	10624dd3 	.word	0x10624dd3
 8006654:	fdffe008 	.word	0xfdffe008

08006658 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8006658:	b490      	push	{r4, r7}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8006660:	4b1b      	ldr	r3, [pc, #108]	@ (80066d0 <SDMMC_GetCmdResp2+0x78>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a1b      	ldr	r2, [pc, #108]	@ (80066d4 <SDMMC_GetCmdResp2+0x7c>)
 8006666:	fba2 2303 	umull	r2, r3, r2, r3
 800666a:	0a5b      	lsrs	r3, r3, #9
 800666c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006670:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8006674:	4623      	mov	r3, r4
 8006676:	1e5c      	subs	r4, r3, #1
 8006678:	2b00      	cmp	r3, #0
 800667a:	d102      	bne.n	8006682 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800667c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006680:	e020      	b.n	80066c4 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006686:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800668a:	2b00      	cmp	r3, #0
 800668c:	d0f2      	beq.n	8006674 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006692:	f003 0304 	and.w	r3, r3, #4
 8006696:	2b00      	cmp	r3, #0
 8006698:	d004      	beq.n	80066a4 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2204      	movs	r2, #4
 800669e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80066a0:	2304      	movs	r3, #4
 80066a2:	e00f      	b.n	80066c4 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066a8:	f003 0301 	and.w	r3, r3, #1
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d004      	beq.n	80066ba <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e004      	b.n	80066c4 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 80066c0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3708      	adds	r7, #8
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bc90      	pop	{r4, r7}
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	20000004 	.word	0x20000004
 80066d4:	10624dd3 	.word	0x10624dd3

080066d8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80066d8:	b490      	push	{r4, r7}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80066e0:	4b15      	ldr	r3, [pc, #84]	@ (8006738 <SDMMC_GetCmdResp3+0x60>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a15      	ldr	r2, [pc, #84]	@ (800673c <SDMMC_GetCmdResp3+0x64>)
 80066e6:	fba2 2303 	umull	r2, r3, r2, r3
 80066ea:	0a5b      	lsrs	r3, r3, #9
 80066ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066f0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 80066f4:	4623      	mov	r3, r4
 80066f6:	1e5c      	subs	r4, r3, #1
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d102      	bne.n	8006702 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80066fc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006700:	e015      	b.n	800672e <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006706:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800670a:	2b00      	cmp	r3, #0
 800670c:	d0f2      	beq.n	80066f4 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006712:	f003 0304 	and.w	r3, r3, #4
 8006716:	2b00      	cmp	r3, #0
 8006718:	d004      	beq.n	8006724 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2204      	movs	r2, #4
 800671e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006720:	2304      	movs	r3, #4
 8006722:	e004      	b.n	800672e <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 800672a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3708      	adds	r7, #8
 8006732:	46bd      	mov	sp, r7
 8006734:	bc90      	pop	{r4, r7}
 8006736:	4770      	bx	lr
 8006738:	20000004 	.word	0x20000004
 800673c:	10624dd3 	.word	0x10624dd3

08006740 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006740:	b590      	push	{r4, r7, lr}
 8006742:	b087      	sub	sp, #28
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	460b      	mov	r3, r1
 800674a:	607a      	str	r2, [r7, #4]
 800674c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800674e:	4b31      	ldr	r3, [pc, #196]	@ (8006814 <SDMMC_GetCmdResp6+0xd4>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a31      	ldr	r2, [pc, #196]	@ (8006818 <SDMMC_GetCmdResp6+0xd8>)
 8006754:	fba2 2303 	umull	r2, r3, r2, r3
 8006758:	0a5b      	lsrs	r3, r3, #9
 800675a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800675e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8006762:	4623      	mov	r3, r4
 8006764:	1e5c      	subs	r4, r3, #1
 8006766:	2b00      	cmp	r3, #0
 8006768:	d102      	bne.n	8006770 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800676a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800676e:	e04c      	b.n	800680a <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006774:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006778:	2b00      	cmp	r3, #0
 800677a:	d0f2      	beq.n	8006762 <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006780:	f003 0304 	and.w	r3, r3, #4
 8006784:	2b00      	cmp	r3, #0
 8006786:	d004      	beq.n	8006792 <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2204      	movs	r2, #4
 800678c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800678e:	2304      	movs	r3, #4
 8006790:	e03b      	b.n	800680a <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006796:	f003 0301 	and.w	r3, r3, #1
 800679a:	2b00      	cmp	r3, #0
 800679c:	d004      	beq.n	80067a8 <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2201      	movs	r2, #1
 80067a2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80067a4:	2301      	movs	r3, #1
 80067a6:	e030      	b.n	800680a <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f7ff fb9f 	bl	8005eec <SDMMC_GetCommandResponse>
 80067ae:	4603      	mov	r3, r0
 80067b0:	461a      	mov	r2, r3
 80067b2:	7afb      	ldrb	r3, [r7, #11]
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d001      	beq.n	80067bc <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e026      	b.n	800680a <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 80067c2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80067c4:	2100      	movs	r1, #0
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f7ff fb9d 	bl	8005f06 <SDMMC_GetResponse>
 80067cc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d106      	bne.n	80067e6 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	0c1b      	lsrs	r3, r3, #16
 80067dc:	b29a      	uxth	r2, r3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80067e2:	2300      	movs	r3, #0
 80067e4:	e011      	b.n	800680a <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d002      	beq.n	80067f6 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80067f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80067f4:	e009      	b.n	800680a <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d002      	beq.n	8006806 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006800:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006804:	e001      	b.n	800680a <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006806:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800680a:	4618      	mov	r0, r3
 800680c:	371c      	adds	r7, #28
 800680e:	46bd      	mov	sp, r7
 8006810:	bd90      	pop	{r4, r7, pc}
 8006812:	bf00      	nop
 8006814:	20000004 	.word	0x20000004
 8006818:	10624dd3 	.word	0x10624dd3

0800681c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800681c:	b490      	push	{r4, r7}
 800681e:	b082      	sub	sp, #8
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8006824:	4b18      	ldr	r3, [pc, #96]	@ (8006888 <SDMMC_GetCmdResp7+0x6c>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a18      	ldr	r2, [pc, #96]	@ (800688c <SDMMC_GetCmdResp7+0x70>)
 800682a:	fba2 2303 	umull	r2, r3, r2, r3
 800682e:	0a5b      	lsrs	r3, r3, #9
 8006830:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006834:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8006838:	4623      	mov	r3, r4
 800683a:	1e5c      	subs	r4, r3, #1
 800683c:	2b00      	cmp	r3, #0
 800683e:	d102      	bne.n	8006846 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006840:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006844:	e01a      	b.n	800687c <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800684a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800684e:	2b00      	cmp	r3, #0
 8006850:	d0f2      	beq.n	8006838 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006856:	f003 0304 	and.w	r3, r3, #4
 800685a:	2b00      	cmp	r3, #0
 800685c:	d004      	beq.n	8006868 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2240      	movs	r2, #64	@ 0x40
 8006862:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006864:	2304      	movs	r3, #4
 8006866:	e009      	b.n	800687c <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800686c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006870:	2b00      	cmp	r3, #0
 8006872:	d002      	beq.n	800687a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2240      	movs	r2, #64	@ 0x40
 8006878:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800687a:	2300      	movs	r3, #0
  
}
 800687c:	4618      	mov	r0, r3
 800687e:	3708      	adds	r7, #8
 8006880:	46bd      	mov	sp, r7
 8006882:	bc90      	pop	{r4, r7}
 8006884:	4770      	bx	lr
 8006886:	bf00      	nop
 8006888:	20000004 	.word	0x20000004
 800688c:	10624dd3 	.word	0x10624dd3

08006890 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	4603      	mov	r3, r0
 8006898:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800689a:	79fb      	ldrb	r3, [r7, #7]
 800689c:	4a08      	ldr	r2, [pc, #32]	@ (80068c0 <disk_status+0x30>)
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	4413      	add	r3, r2
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	79fa      	ldrb	r2, [r7, #7]
 80068a8:	4905      	ldr	r1, [pc, #20]	@ (80068c0 <disk_status+0x30>)
 80068aa:	440a      	add	r2, r1
 80068ac:	7b12      	ldrb	r2, [r2, #12]
 80068ae:	4610      	mov	r0, r2
 80068b0:	4798      	blx	r3
 80068b2:	4603      	mov	r3, r0
 80068b4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80068b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	20000870 	.word	0x20000870

080068c4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	4603      	mov	r3, r0
 80068cc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80068ce:	2300      	movs	r3, #0
 80068d0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80068d2:	79fb      	ldrb	r3, [r7, #7]
 80068d4:	4a0d      	ldr	r2, [pc, #52]	@ (800690c <disk_initialize+0x48>)
 80068d6:	5cd3      	ldrb	r3, [r2, r3]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d111      	bne.n	8006900 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80068dc:	79fb      	ldrb	r3, [r7, #7]
 80068de:	4a0b      	ldr	r2, [pc, #44]	@ (800690c <disk_initialize+0x48>)
 80068e0:	2101      	movs	r1, #1
 80068e2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80068e4:	79fb      	ldrb	r3, [r7, #7]
 80068e6:	4a09      	ldr	r2, [pc, #36]	@ (800690c <disk_initialize+0x48>)
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	4413      	add	r3, r2
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	79fa      	ldrb	r2, [r7, #7]
 80068f2:	4906      	ldr	r1, [pc, #24]	@ (800690c <disk_initialize+0x48>)
 80068f4:	440a      	add	r2, r1
 80068f6:	7b12      	ldrb	r2, [r2, #12]
 80068f8:	4610      	mov	r0, r2
 80068fa:	4798      	blx	r3
 80068fc:	4603      	mov	r3, r0
 80068fe:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006900:	7bfb      	ldrb	r3, [r7, #15]
}
 8006902:	4618      	mov	r0, r3
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	20000870 	.word	0x20000870

08006910 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006910:	b590      	push	{r4, r7, lr}
 8006912:	b087      	sub	sp, #28
 8006914:	af00      	add	r7, sp, #0
 8006916:	60b9      	str	r1, [r7, #8]
 8006918:	607a      	str	r2, [r7, #4]
 800691a:	603b      	str	r3, [r7, #0]
 800691c:	4603      	mov	r3, r0
 800691e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006920:	7bfb      	ldrb	r3, [r7, #15]
 8006922:	4a0a      	ldr	r2, [pc, #40]	@ (800694c <disk_read+0x3c>)
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4413      	add	r3, r2
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	689c      	ldr	r4, [r3, #8]
 800692c:	7bfb      	ldrb	r3, [r7, #15]
 800692e:	4a07      	ldr	r2, [pc, #28]	@ (800694c <disk_read+0x3c>)
 8006930:	4413      	add	r3, r2
 8006932:	7b18      	ldrb	r0, [r3, #12]
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	68b9      	ldr	r1, [r7, #8]
 800693a:	47a0      	blx	r4
 800693c:	4603      	mov	r3, r0
 800693e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006940:	7dfb      	ldrb	r3, [r7, #23]
}
 8006942:	4618      	mov	r0, r3
 8006944:	371c      	adds	r7, #28
 8006946:	46bd      	mov	sp, r7
 8006948:	bd90      	pop	{r4, r7, pc}
 800694a:	bf00      	nop
 800694c:	20000870 	.word	0x20000870

08006950 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006950:	b590      	push	{r4, r7, lr}
 8006952:	b087      	sub	sp, #28
 8006954:	af00      	add	r7, sp, #0
 8006956:	60b9      	str	r1, [r7, #8]
 8006958:	607a      	str	r2, [r7, #4]
 800695a:	603b      	str	r3, [r7, #0]
 800695c:	4603      	mov	r3, r0
 800695e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006960:	7bfb      	ldrb	r3, [r7, #15]
 8006962:	4a0a      	ldr	r2, [pc, #40]	@ (800698c <disk_write+0x3c>)
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4413      	add	r3, r2
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	68dc      	ldr	r4, [r3, #12]
 800696c:	7bfb      	ldrb	r3, [r7, #15]
 800696e:	4a07      	ldr	r2, [pc, #28]	@ (800698c <disk_write+0x3c>)
 8006970:	4413      	add	r3, r2
 8006972:	7b18      	ldrb	r0, [r3, #12]
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	68b9      	ldr	r1, [r7, #8]
 800697a:	47a0      	blx	r4
 800697c:	4603      	mov	r3, r0
 800697e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006980:	7dfb      	ldrb	r3, [r7, #23]
}
 8006982:	4618      	mov	r0, r3
 8006984:	371c      	adds	r7, #28
 8006986:	46bd      	mov	sp, r7
 8006988:	bd90      	pop	{r4, r7, pc}
 800698a:	bf00      	nop
 800698c:	20000870 	.word	0x20000870

08006990 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	4603      	mov	r3, r0
 8006998:	603a      	str	r2, [r7, #0]
 800699a:	71fb      	strb	r3, [r7, #7]
 800699c:	460b      	mov	r3, r1
 800699e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80069a0:	79fb      	ldrb	r3, [r7, #7]
 80069a2:	4a09      	ldr	r2, [pc, #36]	@ (80069c8 <disk_ioctl+0x38>)
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	4413      	add	r3, r2
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	79fa      	ldrb	r2, [r7, #7]
 80069ae:	4906      	ldr	r1, [pc, #24]	@ (80069c8 <disk_ioctl+0x38>)
 80069b0:	440a      	add	r2, r1
 80069b2:	7b10      	ldrb	r0, [r2, #12]
 80069b4:	79b9      	ldrb	r1, [r7, #6]
 80069b6:	683a      	ldr	r2, [r7, #0]
 80069b8:	4798      	blx	r3
 80069ba:	4603      	mov	r3, r0
 80069bc:	73fb      	strb	r3, [r7, #15]
  return res;
 80069be:	7bfb      	ldrb	r3, [r7, #15]
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3710      	adds	r7, #16
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	20000870 	.word	0x20000870

080069cc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 80069cc:	b480      	push	{r7}
 80069ce:	af00      	add	r7, sp, #0
  return 0;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80069dc:	b480      	push	{r7}
 80069de:	b085      	sub	sp, #20
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	3301      	adds	r3, #1
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80069ec:	89fb      	ldrh	r3, [r7, #14]
 80069ee:	021b      	lsls	r3, r3, #8
 80069f0:	b21a      	sxth	r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	b21b      	sxth	r3, r3
 80069f8:	4313      	orrs	r3, r2
 80069fa:	b21b      	sxth	r3, r3
 80069fc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80069fe:	89fb      	ldrh	r3, [r7, #14]
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3714      	adds	r7, #20
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b085      	sub	sp, #20
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	3303      	adds	r3, #3
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	021b      	lsls	r3, r3, #8
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	3202      	adds	r2, #2
 8006a24:	7812      	ldrb	r2, [r2, #0]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	021b      	lsls	r3, r3, #8
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	3201      	adds	r2, #1
 8006a32:	7812      	ldrb	r2, [r2, #0]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	021b      	lsls	r3, r3, #8
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	7812      	ldrb	r2, [r2, #0]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	60fb      	str	r3, [r7, #12]
	return rv;
 8006a44:	68fb      	ldr	r3, [r7, #12]
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3714      	adds	r7, #20
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr

08006a52 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006a52:	b480      	push	{r7}
 8006a54:	b083      	sub	sp, #12
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	1c5a      	adds	r2, r3, #1
 8006a62:	607a      	str	r2, [r7, #4]
 8006a64:	887a      	ldrh	r2, [r7, #2]
 8006a66:	b2d2      	uxtb	r2, r2
 8006a68:	701a      	strb	r2, [r3, #0]
 8006a6a:	887b      	ldrh	r3, [r7, #2]
 8006a6c:	0a1b      	lsrs	r3, r3, #8
 8006a6e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	1c5a      	adds	r2, r3, #1
 8006a74:	607a      	str	r2, [r7, #4]
 8006a76:	887a      	ldrh	r2, [r7, #2]
 8006a78:	b2d2      	uxtb	r2, r2
 8006a7a:	701a      	strb	r2, [r3, #0]
}
 8006a7c:	bf00      	nop
 8006a7e:	370c      	adds	r7, #12
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	1c5a      	adds	r2, r3, #1
 8006a96:	607a      	str	r2, [r7, #4]
 8006a98:	683a      	ldr	r2, [r7, #0]
 8006a9a:	b2d2      	uxtb	r2, r2
 8006a9c:	701a      	strb	r2, [r3, #0]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	0a1b      	lsrs	r3, r3, #8
 8006aa2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	1c5a      	adds	r2, r3, #1
 8006aa8:	607a      	str	r2, [r7, #4]
 8006aaa:	683a      	ldr	r2, [r7, #0]
 8006aac:	b2d2      	uxtb	r2, r2
 8006aae:	701a      	strb	r2, [r3, #0]
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	0a1b      	lsrs	r3, r3, #8
 8006ab4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	1c5a      	adds	r2, r3, #1
 8006aba:	607a      	str	r2, [r7, #4]
 8006abc:	683a      	ldr	r2, [r7, #0]
 8006abe:	b2d2      	uxtb	r2, r2
 8006ac0:	701a      	strb	r2, [r3, #0]
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	0a1b      	lsrs	r3, r3, #8
 8006ac6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	1c5a      	adds	r2, r3, #1
 8006acc:	607a      	str	r2, [r7, #4]
 8006ace:	683a      	ldr	r2, [r7, #0]
 8006ad0:	b2d2      	uxtb	r2, r2
 8006ad2:	701a      	strb	r2, [r3, #0]
}
 8006ad4:	bf00      	nop
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006ae0:	b480      	push	{r7}
 8006ae2:	b087      	sub	sp, #28
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00d      	beq.n	8006b16 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006afa:	693a      	ldr	r2, [r7, #16]
 8006afc:	1c53      	adds	r3, r2, #1
 8006afe:	613b      	str	r3, [r7, #16]
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	1c59      	adds	r1, r3, #1
 8006b04:	6179      	str	r1, [r7, #20]
 8006b06:	7812      	ldrb	r2, [r2, #0]
 8006b08:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	607b      	str	r3, [r7, #4]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1f1      	bne.n	8006afa <mem_cpy+0x1a>
	}
}
 8006b16:	bf00      	nop
 8006b18:	371c      	adds	r7, #28
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006b22:	b480      	push	{r7}
 8006b24:	b087      	sub	sp, #28
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	60f8      	str	r0, [r7, #12]
 8006b2a:	60b9      	str	r1, [r7, #8]
 8006b2c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	1c5a      	adds	r2, r3, #1
 8006b36:	617a      	str	r2, [r7, #20]
 8006b38:	68ba      	ldr	r2, [r7, #8]
 8006b3a:	b2d2      	uxtb	r2, r2
 8006b3c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	3b01      	subs	r3, #1
 8006b42:	607b      	str	r3, [r7, #4]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1f3      	bne.n	8006b32 <mem_set+0x10>
}
 8006b4a:	bf00      	nop
 8006b4c:	bf00      	nop
 8006b4e:	371c      	adds	r7, #28
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006b58:	b480      	push	{r7}
 8006b5a:	b089      	sub	sp, #36	@ 0x24
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	61fb      	str	r3, [r7, #28]
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	1c5a      	adds	r2, r3, #1
 8006b74:	61fa      	str	r2, [r7, #28]
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	4619      	mov	r1, r3
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	1c5a      	adds	r2, r3, #1
 8006b7e:	61ba      	str	r2, [r7, #24]
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	1acb      	subs	r3, r1, r3
 8006b84:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	607b      	str	r3, [r7, #4]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d002      	beq.n	8006b98 <mem_cmp+0x40>
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d0eb      	beq.n	8006b70 <mem_cmp+0x18>

	return r;
 8006b98:	697b      	ldr	r3, [r7, #20]
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3724      	adds	r7, #36	@ 0x24
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr

08006ba6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006ba6:	b480      	push	{r7}
 8006ba8:	b083      	sub	sp, #12
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
 8006bae:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006bb0:	e002      	b.n	8006bb8 <chk_chr+0x12>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	607b      	str	r3, [r7, #4]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d005      	beq.n	8006bcc <chk_chr+0x26>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d1f2      	bne.n	8006bb2 <chk_chr+0xc>
	return *str;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	781b      	ldrb	r3, [r3, #0]
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b085      	sub	sp, #20
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006be6:	2300      	movs	r3, #0
 8006be8:	60bb      	str	r3, [r7, #8]
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	60fb      	str	r3, [r7, #12]
 8006bee:	e029      	b.n	8006c44 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006bf0:	4a27      	ldr	r2, [pc, #156]	@ (8006c90 <chk_lock+0xb4>)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	011b      	lsls	r3, r3, #4
 8006bf6:	4413      	add	r3, r2
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d01d      	beq.n	8006c3a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006bfe:	4a24      	ldr	r2, [pc, #144]	@ (8006c90 <chk_lock+0xb4>)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	011b      	lsls	r3, r3, #4
 8006c04:	4413      	add	r3, r2
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d116      	bne.n	8006c3e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006c10:	4a1f      	ldr	r2, [pc, #124]	@ (8006c90 <chk_lock+0xb4>)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	011b      	lsls	r3, r3, #4
 8006c16:	4413      	add	r3, r2
 8006c18:	3304      	adds	r3, #4
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d10c      	bne.n	8006c3e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006c24:	4a1a      	ldr	r2, [pc, #104]	@ (8006c90 <chk_lock+0xb4>)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	011b      	lsls	r3, r3, #4
 8006c2a:	4413      	add	r3, r2
 8006c2c:	3308      	adds	r3, #8
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d102      	bne.n	8006c3e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006c38:	e007      	b.n	8006c4a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	3301      	adds	r3, #1
 8006c42:	60fb      	str	r3, [r7, #12]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d9d2      	bls.n	8006bf0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2b02      	cmp	r3, #2
 8006c4e:	d109      	bne.n	8006c64 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d102      	bne.n	8006c5c <chk_lock+0x80>
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d101      	bne.n	8006c60 <chk_lock+0x84>
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	e010      	b.n	8006c82 <chk_lock+0xa6>
 8006c60:	2312      	movs	r3, #18
 8006c62:	e00e      	b.n	8006c82 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d108      	bne.n	8006c7c <chk_lock+0xa0>
 8006c6a:	4a09      	ldr	r2, [pc, #36]	@ (8006c90 <chk_lock+0xb4>)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	011b      	lsls	r3, r3, #4
 8006c70:	4413      	add	r3, r2
 8006c72:	330c      	adds	r3, #12
 8006c74:	881b      	ldrh	r3, [r3, #0]
 8006c76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c7a:	d101      	bne.n	8006c80 <chk_lock+0xa4>
 8006c7c:	2310      	movs	r3, #16
 8006c7e:	e000      	b.n	8006c82 <chk_lock+0xa6>
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3714      	adds	r7, #20
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	20000850 	.word	0x20000850

08006c94 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	607b      	str	r3, [r7, #4]
 8006c9e:	e002      	b.n	8006ca6 <enq_lock+0x12>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	607b      	str	r3, [r7, #4]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d806      	bhi.n	8006cba <enq_lock+0x26>
 8006cac:	4a09      	ldr	r2, [pc, #36]	@ (8006cd4 <enq_lock+0x40>)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	011b      	lsls	r3, r3, #4
 8006cb2:	4413      	add	r3, r2
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1f2      	bne.n	8006ca0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2b02      	cmp	r3, #2
 8006cbe:	bf14      	ite	ne
 8006cc0:	2301      	movne	r3, #1
 8006cc2:	2300      	moveq	r3, #0
 8006cc4:	b2db      	uxtb	r3, r3
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	370c      	adds	r7, #12
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	20000850 	.word	0x20000850

08006cd8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	60fb      	str	r3, [r7, #12]
 8006ce6:	e01f      	b.n	8006d28 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006ce8:	4a41      	ldr	r2, [pc, #260]	@ (8006df0 <inc_lock+0x118>)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	011b      	lsls	r3, r3, #4
 8006cee:	4413      	add	r3, r2
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d113      	bne.n	8006d22 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006cfa:	4a3d      	ldr	r2, [pc, #244]	@ (8006df0 <inc_lock+0x118>)
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	011b      	lsls	r3, r3, #4
 8006d00:	4413      	add	r3, r2
 8006d02:	3304      	adds	r3, #4
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d109      	bne.n	8006d22 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006d0e:	4a38      	ldr	r2, [pc, #224]	@ (8006df0 <inc_lock+0x118>)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	011b      	lsls	r3, r3, #4
 8006d14:	4413      	add	r3, r2
 8006d16:	3308      	adds	r3, #8
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d006      	beq.n	8006d30 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	3301      	adds	r3, #1
 8006d26:	60fb      	str	r3, [r7, #12]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d9dc      	bls.n	8006ce8 <inc_lock+0x10>
 8006d2e:	e000      	b.n	8006d32 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006d30:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	d132      	bne.n	8006d9e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	60fb      	str	r3, [r7, #12]
 8006d3c:	e002      	b.n	8006d44 <inc_lock+0x6c>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	3301      	adds	r3, #1
 8006d42:	60fb      	str	r3, [r7, #12]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d806      	bhi.n	8006d58 <inc_lock+0x80>
 8006d4a:	4a29      	ldr	r2, [pc, #164]	@ (8006df0 <inc_lock+0x118>)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	011b      	lsls	r3, r3, #4
 8006d50:	4413      	add	r3, r2
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d1f2      	bne.n	8006d3e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2b02      	cmp	r3, #2
 8006d5c:	d101      	bne.n	8006d62 <inc_lock+0x8a>
 8006d5e:	2300      	movs	r3, #0
 8006d60:	e040      	b.n	8006de4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	4922      	ldr	r1, [pc, #136]	@ (8006df0 <inc_lock+0x118>)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	011b      	lsls	r3, r3, #4
 8006d6c:	440b      	add	r3, r1
 8006d6e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	689a      	ldr	r2, [r3, #8]
 8006d74:	491e      	ldr	r1, [pc, #120]	@ (8006df0 <inc_lock+0x118>)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	011b      	lsls	r3, r3, #4
 8006d7a:	440b      	add	r3, r1
 8006d7c:	3304      	adds	r3, #4
 8006d7e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	695a      	ldr	r2, [r3, #20]
 8006d84:	491a      	ldr	r1, [pc, #104]	@ (8006df0 <inc_lock+0x118>)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	011b      	lsls	r3, r3, #4
 8006d8a:	440b      	add	r3, r1
 8006d8c:	3308      	adds	r3, #8
 8006d8e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006d90:	4a17      	ldr	r2, [pc, #92]	@ (8006df0 <inc_lock+0x118>)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	011b      	lsls	r3, r3, #4
 8006d96:	4413      	add	r3, r2
 8006d98:	330c      	adds	r3, #12
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d009      	beq.n	8006db8 <inc_lock+0xe0>
 8006da4:	4a12      	ldr	r2, [pc, #72]	@ (8006df0 <inc_lock+0x118>)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	011b      	lsls	r3, r3, #4
 8006daa:	4413      	add	r3, r2
 8006dac:	330c      	adds	r3, #12
 8006dae:	881b      	ldrh	r3, [r3, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d001      	beq.n	8006db8 <inc_lock+0xe0>
 8006db4:	2300      	movs	r3, #0
 8006db6:	e015      	b.n	8006de4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d108      	bne.n	8006dd0 <inc_lock+0xf8>
 8006dbe:	4a0c      	ldr	r2, [pc, #48]	@ (8006df0 <inc_lock+0x118>)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	011b      	lsls	r3, r3, #4
 8006dc4:	4413      	add	r3, r2
 8006dc6:	330c      	adds	r3, #12
 8006dc8:	881b      	ldrh	r3, [r3, #0]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	e001      	b.n	8006dd4 <inc_lock+0xfc>
 8006dd0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006dd4:	4906      	ldr	r1, [pc, #24]	@ (8006df0 <inc_lock+0x118>)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	011b      	lsls	r3, r3, #4
 8006dda:	440b      	add	r3, r1
 8006ddc:	330c      	adds	r3, #12
 8006dde:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	3301      	adds	r3, #1
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3714      	adds	r7, #20
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr
 8006df0:	20000850 	.word	0x20000850

08006df4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b085      	sub	sp, #20
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	3b01      	subs	r3, #1
 8006e00:	607b      	str	r3, [r7, #4]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d825      	bhi.n	8006e54 <dec_lock+0x60>
		n = Files[i].ctr;
 8006e08:	4a17      	ldr	r2, [pc, #92]	@ (8006e68 <dec_lock+0x74>)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	011b      	lsls	r3, r3, #4
 8006e0e:	4413      	add	r3, r2
 8006e10:	330c      	adds	r3, #12
 8006e12:	881b      	ldrh	r3, [r3, #0]
 8006e14:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006e16:	89fb      	ldrh	r3, [r7, #14]
 8006e18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e1c:	d101      	bne.n	8006e22 <dec_lock+0x2e>
 8006e1e:	2300      	movs	r3, #0
 8006e20:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006e22:	89fb      	ldrh	r3, [r7, #14]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d002      	beq.n	8006e2e <dec_lock+0x3a>
 8006e28:	89fb      	ldrh	r3, [r7, #14]
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006e2e:	4a0e      	ldr	r2, [pc, #56]	@ (8006e68 <dec_lock+0x74>)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	011b      	lsls	r3, r3, #4
 8006e34:	4413      	add	r3, r2
 8006e36:	330c      	adds	r3, #12
 8006e38:	89fa      	ldrh	r2, [r7, #14]
 8006e3a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006e3c:	89fb      	ldrh	r3, [r7, #14]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d105      	bne.n	8006e4e <dec_lock+0x5a>
 8006e42:	4a09      	ldr	r2, [pc, #36]	@ (8006e68 <dec_lock+0x74>)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	011b      	lsls	r3, r3, #4
 8006e48:	4413      	add	r3, r2
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	737b      	strb	r3, [r7, #13]
 8006e52:	e001      	b.n	8006e58 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006e54:	2302      	movs	r3, #2
 8006e56:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006e58:	7b7b      	ldrb	r3, [r7, #13]
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3714      	adds	r7, #20
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	20000850 	.word	0x20000850

08006e6c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006e74:	2300      	movs	r3, #0
 8006e76:	60fb      	str	r3, [r7, #12]
 8006e78:	e010      	b.n	8006e9c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006e7a:	4a0d      	ldr	r2, [pc, #52]	@ (8006eb0 <clear_lock+0x44>)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	011b      	lsls	r3, r3, #4
 8006e80:	4413      	add	r3, r2
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d105      	bne.n	8006e96 <clear_lock+0x2a>
 8006e8a:	4a09      	ldr	r2, [pc, #36]	@ (8006eb0 <clear_lock+0x44>)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	011b      	lsls	r3, r3, #4
 8006e90:	4413      	add	r3, r2
 8006e92:	2200      	movs	r2, #0
 8006e94:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	3301      	adds	r3, #1
 8006e9a:	60fb      	str	r3, [r7, #12]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d9eb      	bls.n	8006e7a <clear_lock+0xe>
	}
}
 8006ea2:	bf00      	nop
 8006ea4:	bf00      	nop
 8006ea6:	3714      	adds	r7, #20
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr
 8006eb0:	20000850 	.word	0x20000850

08006eb4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b086      	sub	sp, #24
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	78db      	ldrb	r3, [r3, #3]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d034      	beq.n	8006f32 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ecc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	7858      	ldrb	r0, [r3, #1]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006ed8:	2301      	movs	r3, #1
 8006eda:	697a      	ldr	r2, [r7, #20]
 8006edc:	f7ff fd38 	bl	8006950 <disk_write>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d002      	beq.n	8006eec <sync_window+0x38>
			res = FR_DISK_ERR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	73fb      	strb	r3, [r7, #15]
 8006eea:	e022      	b.n	8006f32 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a1b      	ldr	r3, [r3, #32]
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	1ad2      	subs	r2, r2, r3
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	699b      	ldr	r3, [r3, #24]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d217      	bcs.n	8006f32 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	789b      	ldrb	r3, [r3, #2]
 8006f06:	613b      	str	r3, [r7, #16]
 8006f08:	e010      	b.n	8006f2c <sync_window+0x78>
					wsect += fs->fsize;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	697a      	ldr	r2, [r7, #20]
 8006f10:	4413      	add	r3, r2
 8006f12:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	7858      	ldrb	r0, [r3, #1]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006f1e:	2301      	movs	r3, #1
 8006f20:	697a      	ldr	r2, [r7, #20]
 8006f22:	f7ff fd15 	bl	8006950 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	3b01      	subs	r3, #1
 8006f2a:	613b      	str	r3, [r7, #16]
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d8eb      	bhi.n	8006f0a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3718      	adds	r7, #24
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006f46:	2300      	movs	r3, #0
 8006f48:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f4e:	683a      	ldr	r2, [r7, #0]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d01b      	beq.n	8006f8c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f7ff ffad 	bl	8006eb4 <sync_window>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006f5e:	7bfb      	ldrb	r3, [r7, #15]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d113      	bne.n	8006f8c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	7858      	ldrb	r0, [r3, #1]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006f6e:	2301      	movs	r3, #1
 8006f70:	683a      	ldr	r2, [r7, #0]
 8006f72:	f7ff fccd 	bl	8006910 <disk_read>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d004      	beq.n	8006f86 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8006f80:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	683a      	ldr	r2, [r7, #0]
 8006f8a:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8006f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
	...

08006f98 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f7ff ff87 	bl	8006eb4 <sync_window>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006faa:	7bfb      	ldrb	r3, [r7, #15]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d158      	bne.n	8007062 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	2b03      	cmp	r3, #3
 8006fb6:	d148      	bne.n	800704a <sync_fs+0xb2>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	791b      	ldrb	r3, [r3, #4]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d144      	bne.n	800704a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	3330      	adds	r3, #48	@ 0x30
 8006fc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006fc8:	2100      	movs	r1, #0
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7ff fda9 	bl	8006b22 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	3330      	adds	r3, #48	@ 0x30
 8006fd4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006fd8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f7ff fd38 	bl	8006a52 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	3330      	adds	r3, #48	@ 0x30
 8006fe6:	4921      	ldr	r1, [pc, #132]	@ (800706c <sync_fs+0xd4>)
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f7ff fd4d 	bl	8006a88 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	3330      	adds	r3, #48	@ 0x30
 8006ff2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006ff6:	491e      	ldr	r1, [pc, #120]	@ (8007070 <sync_fs+0xd8>)
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f7ff fd45 	bl	8006a88 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	3330      	adds	r3, #48	@ 0x30
 8007002:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	4619      	mov	r1, r3
 800700c:	4610      	mov	r0, r2
 800700e:	f7ff fd3b 	bl	8006a88 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	3330      	adds	r3, #48	@ 0x30
 8007016:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	4619      	mov	r1, r3
 8007020:	4610      	mov	r0, r2
 8007022:	f7ff fd31 	bl	8006a88 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	69db      	ldr	r3, [r3, #28]
 800702a:	1c5a      	adds	r2, r3, #1
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	7858      	ldrb	r0, [r3, #1]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800703e:	2301      	movs	r3, #1
 8007040:	f7ff fc86 	bl	8006950 <disk_write>
			fs->fsi_flag = 0;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	785b      	ldrb	r3, [r3, #1]
 800704e:	2200      	movs	r2, #0
 8007050:	2100      	movs	r1, #0
 8007052:	4618      	mov	r0, r3
 8007054:	f7ff fc9c 	bl	8006990 <disk_ioctl>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d001      	beq.n	8007062 <sync_fs+0xca>
 800705e:	2301      	movs	r3, #1
 8007060:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007062:	7bfb      	ldrb	r3, [r7, #15]
}
 8007064:	4618      	mov	r0, r3
 8007066:	3710      	adds	r7, #16
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	41615252 	.word	0x41615252
 8007070:	61417272 	.word	0x61417272

08007074 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	3b02      	subs	r3, #2
 8007082:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	695b      	ldr	r3, [r3, #20]
 8007088:	3b02      	subs	r3, #2
 800708a:	683a      	ldr	r2, [r7, #0]
 800708c:	429a      	cmp	r2, r3
 800708e:	d301      	bcc.n	8007094 <clust2sect+0x20>
 8007090:	2300      	movs	r3, #0
 8007092:	e008      	b.n	80070a6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	895b      	ldrh	r3, [r3, #10]
 8007098:	461a      	mov	r2, r3
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	fb03 f202 	mul.w	r2, r3, r2
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070a4:	4413      	add	r3, r2
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	370c      	adds	r7, #12
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr

080070b2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b086      	sub	sp, #24
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
 80070ba:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d904      	bls.n	80070d2 <get_fat+0x20>
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	695b      	ldr	r3, [r3, #20]
 80070cc:	683a      	ldr	r2, [r7, #0]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d302      	bcc.n	80070d8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80070d2:	2301      	movs	r3, #1
 80070d4:	617b      	str	r3, [r7, #20]
 80070d6:	e08e      	b.n	80071f6 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80070d8:	f04f 33ff 	mov.w	r3, #4294967295
 80070dc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	2b03      	cmp	r3, #3
 80070e4:	d061      	beq.n	80071aa <get_fat+0xf8>
 80070e6:	2b03      	cmp	r3, #3
 80070e8:	dc7b      	bgt.n	80071e2 <get_fat+0x130>
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d002      	beq.n	80070f4 <get_fat+0x42>
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d041      	beq.n	8007176 <get_fat+0xc4>
 80070f2:	e076      	b.n	80071e2 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	60fb      	str	r3, [r7, #12]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	085b      	lsrs	r3, r3, #1
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	4413      	add	r3, r2
 8007100:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	6a1a      	ldr	r2, [r3, #32]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	0a5b      	lsrs	r3, r3, #9
 800710a:	4413      	add	r3, r2
 800710c:	4619      	mov	r1, r3
 800710e:	6938      	ldr	r0, [r7, #16]
 8007110:	f7ff ff14 	bl	8006f3c <move_window>
 8007114:	4603      	mov	r3, r0
 8007116:	2b00      	cmp	r3, #0
 8007118:	d166      	bne.n	80071e8 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	1c5a      	adds	r2, r3, #1
 800711e:	60fa      	str	r2, [r7, #12]
 8007120:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007124:	693a      	ldr	r2, [r7, #16]
 8007126:	4413      	add	r3, r2
 8007128:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800712c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	6a1a      	ldr	r2, [r3, #32]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	0a5b      	lsrs	r3, r3, #9
 8007136:	4413      	add	r3, r2
 8007138:	4619      	mov	r1, r3
 800713a:	6938      	ldr	r0, [r7, #16]
 800713c:	f7ff fefe 	bl	8006f3c <move_window>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d152      	bne.n	80071ec <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800714c:	693a      	ldr	r2, [r7, #16]
 800714e:	4413      	add	r3, r2
 8007150:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007154:	021b      	lsls	r3, r3, #8
 8007156:	68ba      	ldr	r2, [r7, #8]
 8007158:	4313      	orrs	r3, r2
 800715a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	f003 0301 	and.w	r3, r3, #1
 8007162:	2b00      	cmp	r3, #0
 8007164:	d002      	beq.n	800716c <get_fat+0xba>
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	091b      	lsrs	r3, r3, #4
 800716a:	e002      	b.n	8007172 <get_fat+0xc0>
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007172:	617b      	str	r3, [r7, #20]
			break;
 8007174:	e03f      	b.n	80071f6 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	6a1a      	ldr	r2, [r3, #32]
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	0a1b      	lsrs	r3, r3, #8
 800717e:	4413      	add	r3, r2
 8007180:	4619      	mov	r1, r3
 8007182:	6938      	ldr	r0, [r7, #16]
 8007184:	f7ff feda 	bl	8006f3c <move_window>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d130      	bne.n	80071f0 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	005b      	lsls	r3, r3, #1
 8007198:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800719c:	4413      	add	r3, r2
 800719e:	4618      	mov	r0, r3
 80071a0:	f7ff fc1c 	bl	80069dc <ld_word>
 80071a4:	4603      	mov	r3, r0
 80071a6:	617b      	str	r3, [r7, #20]
			break;
 80071a8:	e025      	b.n	80071f6 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	6a1a      	ldr	r2, [r3, #32]
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	09db      	lsrs	r3, r3, #7
 80071b2:	4413      	add	r3, r2
 80071b4:	4619      	mov	r1, r3
 80071b6:	6938      	ldr	r0, [r7, #16]
 80071b8:	f7ff fec0 	bl	8006f3c <move_window>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d118      	bne.n	80071f4 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80071d0:	4413      	add	r3, r2
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7ff fc1a 	bl	8006a0c <ld_dword>
 80071d8:	4603      	mov	r3, r0
 80071da:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80071de:	617b      	str	r3, [r7, #20]
			break;
 80071e0:	e009      	b.n	80071f6 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80071e2:	2301      	movs	r3, #1
 80071e4:	617b      	str	r3, [r7, #20]
 80071e6:	e006      	b.n	80071f6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80071e8:	bf00      	nop
 80071ea:	e004      	b.n	80071f6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80071ec:	bf00      	nop
 80071ee:	e002      	b.n	80071f6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80071f0:	bf00      	nop
 80071f2:	e000      	b.n	80071f6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80071f4:	bf00      	nop
		}
	}

	return val;
 80071f6:	697b      	ldr	r3, [r7, #20]
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3718      	adds	r7, #24
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007200:	b590      	push	{r4, r7, lr}
 8007202:	b089      	sub	sp, #36	@ 0x24
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800720c:	2302      	movs	r3, #2
 800720e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	2b01      	cmp	r3, #1
 8007214:	f240 80d9 	bls.w	80073ca <put_fat+0x1ca>
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	695b      	ldr	r3, [r3, #20]
 800721c:	68ba      	ldr	r2, [r7, #8]
 800721e:	429a      	cmp	r2, r3
 8007220:	f080 80d3 	bcs.w	80073ca <put_fat+0x1ca>
		switch (fs->fs_type) {
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	2b03      	cmp	r3, #3
 800722a:	f000 8096 	beq.w	800735a <put_fat+0x15a>
 800722e:	2b03      	cmp	r3, #3
 8007230:	f300 80cb 	bgt.w	80073ca <put_fat+0x1ca>
 8007234:	2b01      	cmp	r3, #1
 8007236:	d002      	beq.n	800723e <put_fat+0x3e>
 8007238:	2b02      	cmp	r3, #2
 800723a:	d06e      	beq.n	800731a <put_fat+0x11a>
 800723c:	e0c5      	b.n	80073ca <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	61bb      	str	r3, [r7, #24]
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	085b      	lsrs	r3, r3, #1
 8007246:	69ba      	ldr	r2, [r7, #24]
 8007248:	4413      	add	r3, r2
 800724a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6a1a      	ldr	r2, [r3, #32]
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	0a5b      	lsrs	r3, r3, #9
 8007254:	4413      	add	r3, r2
 8007256:	4619      	mov	r1, r3
 8007258:	68f8      	ldr	r0, [r7, #12]
 800725a:	f7ff fe6f 	bl	8006f3c <move_window>
 800725e:	4603      	mov	r3, r0
 8007260:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007262:	7ffb      	ldrb	r3, [r7, #31]
 8007264:	2b00      	cmp	r3, #0
 8007266:	f040 80a9 	bne.w	80073bc <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	1c59      	adds	r1, r3, #1
 8007274:	61b9      	str	r1, [r7, #24]
 8007276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800727a:	4413      	add	r3, r2
 800727c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	f003 0301 	and.w	r3, r3, #1
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00d      	beq.n	80072a4 <put_fat+0xa4>
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	b25b      	sxtb	r3, r3
 800728e:	f003 030f 	and.w	r3, r3, #15
 8007292:	b25a      	sxtb	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	b2db      	uxtb	r3, r3
 8007298:	011b      	lsls	r3, r3, #4
 800729a:	b25b      	sxtb	r3, r3
 800729c:	4313      	orrs	r3, r2
 800729e:	b25b      	sxtb	r3, r3
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	e001      	b.n	80072a8 <put_fat+0xa8>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	697a      	ldr	r2, [r7, #20]
 80072aa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2201      	movs	r2, #1
 80072b0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6a1a      	ldr	r2, [r3, #32]
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	0a5b      	lsrs	r3, r3, #9
 80072ba:	4413      	add	r3, r2
 80072bc:	4619      	mov	r1, r3
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	f7ff fe3c 	bl	8006f3c <move_window>
 80072c4:	4603      	mov	r3, r0
 80072c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80072c8:	7ffb      	ldrb	r3, [r7, #31]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d178      	bne.n	80073c0 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072da:	4413      	add	r3, r2
 80072dc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	f003 0301 	and.w	r3, r3, #1
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d003      	beq.n	80072f0 <put_fat+0xf0>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	091b      	lsrs	r3, r3, #4
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	e00e      	b.n	800730e <put_fat+0x10e>
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	b25b      	sxtb	r3, r3
 80072f6:	f023 030f 	bic.w	r3, r3, #15
 80072fa:	b25a      	sxtb	r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	0a1b      	lsrs	r3, r3, #8
 8007300:	b25b      	sxtb	r3, r3
 8007302:	f003 030f 	and.w	r3, r3, #15
 8007306:	b25b      	sxtb	r3, r3
 8007308:	4313      	orrs	r3, r2
 800730a:	b25b      	sxtb	r3, r3
 800730c:	b2db      	uxtb	r3, r3
 800730e:	697a      	ldr	r2, [r7, #20]
 8007310:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2201      	movs	r2, #1
 8007316:	70da      	strb	r2, [r3, #3]
			break;
 8007318:	e057      	b.n	80073ca <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6a1a      	ldr	r2, [r3, #32]
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	0a1b      	lsrs	r3, r3, #8
 8007322:	4413      	add	r3, r2
 8007324:	4619      	mov	r1, r3
 8007326:	68f8      	ldr	r0, [r7, #12]
 8007328:	f7ff fe08 	bl	8006f3c <move_window>
 800732c:	4603      	mov	r3, r0
 800732e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007330:	7ffb      	ldrb	r3, [r7, #31]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d146      	bne.n	80073c4 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	005b      	lsls	r3, r3, #1
 8007340:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8007344:	4413      	add	r3, r2
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	b292      	uxth	r2, r2
 800734a:	4611      	mov	r1, r2
 800734c:	4618      	mov	r0, r3
 800734e:	f7ff fb80 	bl	8006a52 <st_word>
			fs->wflag = 1;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2201      	movs	r2, #1
 8007356:	70da      	strb	r2, [r3, #3]
			break;
 8007358:	e037      	b.n	80073ca <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6a1a      	ldr	r2, [r3, #32]
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	09db      	lsrs	r3, r3, #7
 8007362:	4413      	add	r3, r2
 8007364:	4619      	mov	r1, r3
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	f7ff fde8 	bl	8006f3c <move_window>
 800736c:	4603      	mov	r3, r0
 800736e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007370:	7ffb      	ldrb	r3, [r7, #31]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d128      	bne.n	80073c8 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800738a:	4413      	add	r3, r2
 800738c:	4618      	mov	r0, r3
 800738e:	f7ff fb3d 	bl	8006a0c <ld_dword>
 8007392:	4603      	mov	r3, r0
 8007394:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007398:	4323      	orrs	r3, r4
 800739a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80073aa:	4413      	add	r3, r2
 80073ac:	6879      	ldr	r1, [r7, #4]
 80073ae:	4618      	mov	r0, r3
 80073b0:	f7ff fb6a 	bl	8006a88 <st_dword>
			fs->wflag = 1;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2201      	movs	r2, #1
 80073b8:	70da      	strb	r2, [r3, #3]
			break;
 80073ba:	e006      	b.n	80073ca <put_fat+0x1ca>
			if (res != FR_OK) break;
 80073bc:	bf00      	nop
 80073be:	e004      	b.n	80073ca <put_fat+0x1ca>
			if (res != FR_OK) break;
 80073c0:	bf00      	nop
 80073c2:	e002      	b.n	80073ca <put_fat+0x1ca>
			if (res != FR_OK) break;
 80073c4:	bf00      	nop
 80073c6:	e000      	b.n	80073ca <put_fat+0x1ca>
			if (res != FR_OK) break;
 80073c8:	bf00      	nop
		}
	}
	return res;
 80073ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3724      	adds	r7, #36	@ 0x24
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd90      	pop	{r4, r7, pc}

080073d4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b088      	sub	sp, #32
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80073e0:	2300      	movs	r3, #0
 80073e2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d904      	bls.n	80073fa <remove_chain+0x26>
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	695b      	ldr	r3, [r3, #20]
 80073f4:	68ba      	ldr	r2, [r7, #8]
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d301      	bcc.n	80073fe <remove_chain+0x2a>
 80073fa:	2302      	movs	r3, #2
 80073fc:	e04b      	b.n	8007496 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00c      	beq.n	800741e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007404:	f04f 32ff 	mov.w	r2, #4294967295
 8007408:	6879      	ldr	r1, [r7, #4]
 800740a:	69b8      	ldr	r0, [r7, #24]
 800740c:	f7ff fef8 	bl	8007200 <put_fat>
 8007410:	4603      	mov	r3, r0
 8007412:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007414:	7ffb      	ldrb	r3, [r7, #31]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d001      	beq.n	800741e <remove_chain+0x4a>
 800741a:	7ffb      	ldrb	r3, [r7, #31]
 800741c:	e03b      	b.n	8007496 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800741e:	68b9      	ldr	r1, [r7, #8]
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f7ff fe46 	bl	80070b2 <get_fat>
 8007426:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d031      	beq.n	8007492 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	2b01      	cmp	r3, #1
 8007432:	d101      	bne.n	8007438 <remove_chain+0x64>
 8007434:	2302      	movs	r3, #2
 8007436:	e02e      	b.n	8007496 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800743e:	d101      	bne.n	8007444 <remove_chain+0x70>
 8007440:	2301      	movs	r3, #1
 8007442:	e028      	b.n	8007496 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007444:	2200      	movs	r2, #0
 8007446:	68b9      	ldr	r1, [r7, #8]
 8007448:	69b8      	ldr	r0, [r7, #24]
 800744a:	f7ff fed9 	bl	8007200 <put_fat>
 800744e:	4603      	mov	r3, r0
 8007450:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007452:	7ffb      	ldrb	r3, [r7, #31]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d001      	beq.n	800745c <remove_chain+0x88>
 8007458:	7ffb      	ldrb	r3, [r7, #31]
 800745a:	e01c      	b.n	8007496 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	691a      	ldr	r2, [r3, #16]
 8007460:	69bb      	ldr	r3, [r7, #24]
 8007462:	695b      	ldr	r3, [r3, #20]
 8007464:	3b02      	subs	r3, #2
 8007466:	429a      	cmp	r2, r3
 8007468:	d20b      	bcs.n	8007482 <remove_chain+0xae>
			fs->free_clst++;
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	1c5a      	adds	r2, r3, #1
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	791b      	ldrb	r3, [r3, #4]
 8007478:	f043 0301 	orr.w	r3, r3, #1
 800747c:	b2da      	uxtb	r2, r3
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	695b      	ldr	r3, [r3, #20]
 800748a:	68ba      	ldr	r2, [r7, #8]
 800748c:	429a      	cmp	r2, r3
 800748e:	d3c6      	bcc.n	800741e <remove_chain+0x4a>
 8007490:	e000      	b.n	8007494 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007492:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	3720      	adds	r7, #32
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}

0800749e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800749e:	b580      	push	{r7, lr}
 80074a0:	b088      	sub	sp, #32
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
 80074a6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d10d      	bne.n	80074d0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d004      	beq.n	80074ca <create_chain+0x2c>
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	695b      	ldr	r3, [r3, #20]
 80074c4:	69ba      	ldr	r2, [r7, #24]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d31b      	bcc.n	8007502 <create_chain+0x64>
 80074ca:	2301      	movs	r3, #1
 80074cc:	61bb      	str	r3, [r7, #24]
 80074ce:	e018      	b.n	8007502 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80074d0:	6839      	ldr	r1, [r7, #0]
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f7ff fded 	bl	80070b2 <get_fat>
 80074d8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d801      	bhi.n	80074e4 <create_chain+0x46>
 80074e0:	2301      	movs	r3, #1
 80074e2:	e070      	b.n	80075c6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ea:	d101      	bne.n	80074f0 <create_chain+0x52>
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	e06a      	b.n	80075c6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	695b      	ldr	r3, [r3, #20]
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d201      	bcs.n	80074fe <create_chain+0x60>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	e063      	b.n	80075c6 <create_chain+0x128>
		scl = clst;
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007502:	69bb      	ldr	r3, [r7, #24]
 8007504:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	3301      	adds	r3, #1
 800750a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	695b      	ldr	r3, [r3, #20]
 8007510:	69fa      	ldr	r2, [r7, #28]
 8007512:	429a      	cmp	r2, r3
 8007514:	d307      	bcc.n	8007526 <create_chain+0x88>
				ncl = 2;
 8007516:	2302      	movs	r3, #2
 8007518:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800751a:	69fa      	ldr	r2, [r7, #28]
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	429a      	cmp	r2, r3
 8007520:	d901      	bls.n	8007526 <create_chain+0x88>
 8007522:	2300      	movs	r3, #0
 8007524:	e04f      	b.n	80075c6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007526:	69f9      	ldr	r1, [r7, #28]
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f7ff fdc2 	bl	80070b2 <get_fat>
 800752e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00e      	beq.n	8007554 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2b01      	cmp	r3, #1
 800753a:	d003      	beq.n	8007544 <create_chain+0xa6>
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007542:	d101      	bne.n	8007548 <create_chain+0xaa>
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	e03e      	b.n	80075c6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007548:	69fa      	ldr	r2, [r7, #28]
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	429a      	cmp	r2, r3
 800754e:	d1da      	bne.n	8007506 <create_chain+0x68>
 8007550:	2300      	movs	r3, #0
 8007552:	e038      	b.n	80075c6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007554:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007556:	f04f 32ff 	mov.w	r2, #4294967295
 800755a:	69f9      	ldr	r1, [r7, #28]
 800755c:	6938      	ldr	r0, [r7, #16]
 800755e:	f7ff fe4f 	bl	8007200 <put_fat>
 8007562:	4603      	mov	r3, r0
 8007564:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007566:	7dfb      	ldrb	r3, [r7, #23]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d109      	bne.n	8007580 <create_chain+0xe2>
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d006      	beq.n	8007580 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007572:	69fa      	ldr	r2, [r7, #28]
 8007574:	6839      	ldr	r1, [r7, #0]
 8007576:	6938      	ldr	r0, [r7, #16]
 8007578:	f7ff fe42 	bl	8007200 <put_fat>
 800757c:	4603      	mov	r3, r0
 800757e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007580:	7dfb      	ldrb	r3, [r7, #23]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d116      	bne.n	80075b4 <create_chain+0x116>
		fs->last_clst = ncl;
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	69fa      	ldr	r2, [r7, #28]
 800758a:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	691a      	ldr	r2, [r3, #16]
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	695b      	ldr	r3, [r3, #20]
 8007594:	3b02      	subs	r3, #2
 8007596:	429a      	cmp	r2, r3
 8007598:	d804      	bhi.n	80075a4 <create_chain+0x106>
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	1e5a      	subs	r2, r3, #1
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	791b      	ldrb	r3, [r3, #4]
 80075a8:	f043 0301 	orr.w	r3, r3, #1
 80075ac:	b2da      	uxtb	r2, r3
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	711a      	strb	r2, [r3, #4]
 80075b2:	e007      	b.n	80075c4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80075b4:	7dfb      	ldrb	r3, [r7, #23]
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d102      	bne.n	80075c0 <create_chain+0x122>
 80075ba:	f04f 33ff 	mov.w	r3, #4294967295
 80075be:	e000      	b.n	80075c2 <create_chain+0x124>
 80075c0:	2301      	movs	r3, #1
 80075c2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80075c4:	69fb      	ldr	r3, [r7, #28]
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3720      	adds	r7, #32
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80075ce:	b480      	push	{r7}
 80075d0:	b087      	sub	sp, #28
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
 80075d6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e2:	3304      	adds	r3, #4
 80075e4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	0a5b      	lsrs	r3, r3, #9
 80075ea:	68fa      	ldr	r2, [r7, #12]
 80075ec:	8952      	ldrh	r2, [r2, #10]
 80075ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80075f2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	1d1a      	adds	r2, r3, #4
 80075f8:	613a      	str	r2, [r7, #16]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d101      	bne.n	8007608 <clmt_clust+0x3a>
 8007604:	2300      	movs	r3, #0
 8007606:	e010      	b.n	800762a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007608:	697a      	ldr	r2, [r7, #20]
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	429a      	cmp	r2, r3
 800760e:	d307      	bcc.n	8007620 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007610:	697a      	ldr	r2, [r7, #20]
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	1ad3      	subs	r3, r2, r3
 8007616:	617b      	str	r3, [r7, #20]
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	3304      	adds	r3, #4
 800761c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800761e:	e7e9      	b.n	80075f4 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007620:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	4413      	add	r3, r2
}
 800762a:	4618      	mov	r0, r3
 800762c:	371c      	adds	r7, #28
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr

08007636 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b086      	sub	sp, #24
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
 800763e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800764c:	d204      	bcs.n	8007658 <dir_sdi+0x22>
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	f003 031f 	and.w	r3, r3, #31
 8007654:	2b00      	cmp	r3, #0
 8007656:	d001      	beq.n	800765c <dir_sdi+0x26>
		return FR_INT_ERR;
 8007658:	2302      	movs	r3, #2
 800765a:	e063      	b.n	8007724 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	683a      	ldr	r2, [r7, #0]
 8007660:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d106      	bne.n	800767c <dir_sdi+0x46>
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	2b02      	cmp	r3, #2
 8007674:	d902      	bls.n	800767c <dir_sdi+0x46>
		clst = fs->dirbase;
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800767a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d10c      	bne.n	800769c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	095b      	lsrs	r3, r3, #5
 8007686:	693a      	ldr	r2, [r7, #16]
 8007688:	8912      	ldrh	r2, [r2, #8]
 800768a:	4293      	cmp	r3, r2
 800768c:	d301      	bcc.n	8007692 <dir_sdi+0x5c>
 800768e:	2302      	movs	r3, #2
 8007690:	e048      	b.n	8007724 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	61da      	str	r2, [r3, #28]
 800769a:	e029      	b.n	80076f0 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	895b      	ldrh	r3, [r3, #10]
 80076a0:	025b      	lsls	r3, r3, #9
 80076a2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80076a4:	e019      	b.n	80076da <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6979      	ldr	r1, [r7, #20]
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7ff fd01 	bl	80070b2 <get_fat>
 80076b0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b8:	d101      	bne.n	80076be <dir_sdi+0x88>
 80076ba:	2301      	movs	r3, #1
 80076bc:	e032      	b.n	8007724 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d904      	bls.n	80076ce <dir_sdi+0x98>
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	695b      	ldr	r3, [r3, #20]
 80076c8:	697a      	ldr	r2, [r7, #20]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d301      	bcc.n	80076d2 <dir_sdi+0x9c>
 80076ce:	2302      	movs	r3, #2
 80076d0:	e028      	b.n	8007724 <dir_sdi+0xee>
			ofs -= csz;
 80076d2:	683a      	ldr	r2, [r7, #0]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	1ad3      	subs	r3, r2, r3
 80076d8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80076da:	683a      	ldr	r2, [r7, #0]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	429a      	cmp	r2, r3
 80076e0:	d2e1      	bcs.n	80076a6 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80076e2:	6979      	ldr	r1, [r7, #20]
 80076e4:	6938      	ldr	r0, [r7, #16]
 80076e6:	f7ff fcc5 	bl	8007074 <clust2sect>
 80076ea:	4602      	mov	r2, r0
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	697a      	ldr	r2, [r7, #20]
 80076f4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	69db      	ldr	r3, [r3, #28]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d101      	bne.n	8007702 <dir_sdi+0xcc>
 80076fe:	2302      	movs	r3, #2
 8007700:	e010      	b.n	8007724 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	69da      	ldr	r2, [r3, #28]
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	0a5b      	lsrs	r3, r3, #9
 800770a:	441a      	add	r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800771c:	441a      	add	r2, r3
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	3718      	adds	r7, #24
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b086      	sub	sp, #24
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	695b      	ldr	r3, [r3, #20]
 8007740:	3320      	adds	r3, #32
 8007742:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	69db      	ldr	r3, [r3, #28]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d003      	beq.n	8007754 <dir_next+0x28>
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007752:	d301      	bcc.n	8007758 <dir_next+0x2c>
 8007754:	2304      	movs	r3, #4
 8007756:	e0aa      	b.n	80078ae <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800775e:	2b00      	cmp	r3, #0
 8007760:	f040 8098 	bne.w	8007894 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	69db      	ldr	r3, [r3, #28]
 8007768:	1c5a      	adds	r2, r3, #1
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	699b      	ldr	r3, [r3, #24]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d10b      	bne.n	800778e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	095b      	lsrs	r3, r3, #5
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	8912      	ldrh	r2, [r2, #8]
 800777e:	4293      	cmp	r3, r2
 8007780:	f0c0 8088 	bcc.w	8007894 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	61da      	str	r2, [r3, #28]
 800778a:	2304      	movs	r3, #4
 800778c:	e08f      	b.n	80078ae <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	0a5b      	lsrs	r3, r3, #9
 8007792:	68fa      	ldr	r2, [r7, #12]
 8007794:	8952      	ldrh	r2, [r2, #10]
 8007796:	3a01      	subs	r2, #1
 8007798:	4013      	ands	r3, r2
 800779a:	2b00      	cmp	r3, #0
 800779c:	d17a      	bne.n	8007894 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	699b      	ldr	r3, [r3, #24]
 80077a4:	4619      	mov	r1, r3
 80077a6:	4610      	mov	r0, r2
 80077a8:	f7ff fc83 	bl	80070b2 <get_fat>
 80077ac:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d801      	bhi.n	80077b8 <dir_next+0x8c>
 80077b4:	2302      	movs	r3, #2
 80077b6:	e07a      	b.n	80078ae <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077be:	d101      	bne.n	80077c4 <dir_next+0x98>
 80077c0:	2301      	movs	r3, #1
 80077c2:	e074      	b.n	80078ae <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	695b      	ldr	r3, [r3, #20]
 80077c8:	697a      	ldr	r2, [r7, #20]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d358      	bcc.n	8007880 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d104      	bne.n	80077de <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	61da      	str	r2, [r3, #28]
 80077da:	2304      	movs	r3, #4
 80077dc:	e067      	b.n	80078ae <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	699b      	ldr	r3, [r3, #24]
 80077e4:	4619      	mov	r1, r3
 80077e6:	4610      	mov	r0, r2
 80077e8:	f7ff fe59 	bl	800749e <create_chain>
 80077ec:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d101      	bne.n	80077f8 <dir_next+0xcc>
 80077f4:	2307      	movs	r3, #7
 80077f6:	e05a      	b.n	80078ae <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d101      	bne.n	8007802 <dir_next+0xd6>
 80077fe:	2302      	movs	r3, #2
 8007800:	e055      	b.n	80078ae <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007808:	d101      	bne.n	800780e <dir_next+0xe2>
 800780a:	2301      	movs	r3, #1
 800780c:	e04f      	b.n	80078ae <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800780e:	68f8      	ldr	r0, [r7, #12]
 8007810:	f7ff fb50 	bl	8006eb4 <sync_window>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d001      	beq.n	800781e <dir_next+0xf2>
 800781a:	2301      	movs	r3, #1
 800781c:	e047      	b.n	80078ae <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	3330      	adds	r3, #48	@ 0x30
 8007822:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007826:	2100      	movs	r1, #0
 8007828:	4618      	mov	r0, r3
 800782a:	f7ff f97a 	bl	8006b22 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800782e:	2300      	movs	r3, #0
 8007830:	613b      	str	r3, [r7, #16]
 8007832:	6979      	ldr	r1, [r7, #20]
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	f7ff fc1d 	bl	8007074 <clust2sect>
 800783a:	4602      	mov	r2, r0
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007840:	e012      	b.n	8007868 <dir_next+0x13c>
						fs->wflag = 1;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2201      	movs	r2, #1
 8007846:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007848:	68f8      	ldr	r0, [r7, #12]
 800784a:	f7ff fb33 	bl	8006eb4 <sync_window>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d001      	beq.n	8007858 <dir_next+0x12c>
 8007854:	2301      	movs	r3, #1
 8007856:	e02a      	b.n	80078ae <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	3301      	adds	r3, #1
 800785c:	613b      	str	r3, [r7, #16]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007862:	1c5a      	adds	r2, r3, #1
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	895b      	ldrh	r3, [r3, #10]
 800786c:	461a      	mov	r2, r3
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	4293      	cmp	r3, r2
 8007872:	d3e6      	bcc.n	8007842 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	1ad2      	subs	r2, r2, r3
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	697a      	ldr	r2, [r7, #20]
 8007884:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007886:	6979      	ldr	r1, [r7, #20]
 8007888:	68f8      	ldr	r0, [r7, #12]
 800788a:	f7ff fbf3 	bl	8007074 <clust2sect>
 800788e:	4602      	mov	r2, r0
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	68ba      	ldr	r2, [r7, #8]
 8007898:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078a6:	441a      	add	r2, r3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3718      	adds	r7, #24
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b086      	sub	sp, #24
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
 80078be:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80078c6:	2100      	movs	r1, #0
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f7ff feb4 	bl	8007636 <dir_sdi>
 80078ce:	4603      	mov	r3, r0
 80078d0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80078d2:	7dfb      	ldrb	r3, [r7, #23]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d12b      	bne.n	8007930 <dir_alloc+0x7a>
		n = 0;
 80078d8:	2300      	movs	r3, #0
 80078da:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	69db      	ldr	r3, [r3, #28]
 80078e0:	4619      	mov	r1, r3
 80078e2:	68f8      	ldr	r0, [r7, #12]
 80078e4:	f7ff fb2a 	bl	8006f3c <move_window>
 80078e8:	4603      	mov	r3, r0
 80078ea:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80078ec:	7dfb      	ldrb	r3, [r7, #23]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d11d      	bne.n	800792e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a1b      	ldr	r3, [r3, #32]
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	2be5      	cmp	r3, #229	@ 0xe5
 80078fa:	d004      	beq.n	8007906 <dir_alloc+0x50>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6a1b      	ldr	r3, [r3, #32]
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d107      	bne.n	8007916 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	3301      	adds	r3, #1
 800790a:	613b      	str	r3, [r7, #16]
 800790c:	693a      	ldr	r2, [r7, #16]
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	429a      	cmp	r2, r3
 8007912:	d102      	bne.n	800791a <dir_alloc+0x64>
 8007914:	e00c      	b.n	8007930 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007916:	2300      	movs	r3, #0
 8007918:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800791a:	2101      	movs	r1, #1
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f7ff ff05 	bl	800772c <dir_next>
 8007922:	4603      	mov	r3, r0
 8007924:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007926:	7dfb      	ldrb	r3, [r7, #23]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d0d7      	beq.n	80078dc <dir_alloc+0x26>
 800792c:	e000      	b.n	8007930 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800792e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007930:	7dfb      	ldrb	r3, [r7, #23]
 8007932:	2b04      	cmp	r3, #4
 8007934:	d101      	bne.n	800793a <dir_alloc+0x84>
 8007936:	2307      	movs	r3, #7
 8007938:	75fb      	strb	r3, [r7, #23]
	return res;
 800793a:	7dfb      	ldrb	r3, [r7, #23]
}
 800793c:	4618      	mov	r0, r3
 800793e:	3718      	adds	r7, #24
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	331a      	adds	r3, #26
 8007952:	4618      	mov	r0, r3
 8007954:	f7ff f842 	bl	80069dc <ld_word>
 8007958:	4603      	mov	r3, r0
 800795a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	2b03      	cmp	r3, #3
 8007962:	d109      	bne.n	8007978 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	3314      	adds	r3, #20
 8007968:	4618      	mov	r0, r3
 800796a:	f7ff f837 	bl	80069dc <ld_word>
 800796e:	4603      	mov	r3, r0
 8007970:	041b      	lsls	r3, r3, #16
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	4313      	orrs	r3, r2
 8007976:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007978:	68fb      	ldr	r3, [r7, #12]
}
 800797a:	4618      	mov	r0, r3
 800797c:	3710      	adds	r7, #16
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}

08007982 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007982:	b580      	push	{r7, lr}
 8007984:	b084      	sub	sp, #16
 8007986:	af00      	add	r7, sp, #0
 8007988:	60f8      	str	r0, [r7, #12]
 800798a:	60b9      	str	r1, [r7, #8]
 800798c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	331a      	adds	r3, #26
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	b292      	uxth	r2, r2
 8007996:	4611      	mov	r1, r2
 8007998:	4618      	mov	r0, r3
 800799a:	f7ff f85a 	bl	8006a52 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	2b03      	cmp	r3, #3
 80079a4:	d109      	bne.n	80079ba <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	f103 0214 	add.w	r2, r3, #20
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	0c1b      	lsrs	r3, r3, #16
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	4619      	mov	r1, r3
 80079b4:	4610      	mov	r0, r2
 80079b6:	f7ff f84c 	bl	8006a52 <st_word>
	}
}
 80079ba:	bf00      	nop
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b086      	sub	sp, #24
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
 80079ca:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80079cc:	2304      	movs	r3, #4
 80079ce:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80079d6:	e03c      	b.n	8007a52 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	69db      	ldr	r3, [r3, #28]
 80079dc:	4619      	mov	r1, r3
 80079de:	6938      	ldr	r0, [r7, #16]
 80079e0:	f7ff faac 	bl	8006f3c <move_window>
 80079e4:	4603      	mov	r3, r0
 80079e6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80079e8:	7dfb      	ldrb	r3, [r7, #23]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d136      	bne.n	8007a5c <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a1b      	ldr	r3, [r3, #32]
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80079f6:	7bfb      	ldrb	r3, [r7, #15]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d102      	bne.n	8007a02 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80079fc:	2304      	movs	r3, #4
 80079fe:	75fb      	strb	r3, [r7, #23]
 8007a00:	e031      	b.n	8007a66 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6a1b      	ldr	r3, [r3, #32]
 8007a06:	330b      	adds	r3, #11
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a0e:	73bb      	strb	r3, [r7, #14]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	7bba      	ldrb	r2, [r7, #14]
 8007a14:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8007a16:	7bfb      	ldrb	r3, [r7, #15]
 8007a18:	2be5      	cmp	r3, #229	@ 0xe5
 8007a1a:	d011      	beq.n	8007a40 <dir_read+0x7e>
 8007a1c:	7bfb      	ldrb	r3, [r7, #15]
 8007a1e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a20:	d00e      	beq.n	8007a40 <dir_read+0x7e>
 8007a22:	7bbb      	ldrb	r3, [r7, #14]
 8007a24:	2b0f      	cmp	r3, #15
 8007a26:	d00b      	beq.n	8007a40 <dir_read+0x7e>
 8007a28:	7bbb      	ldrb	r3, [r7, #14]
 8007a2a:	f023 0320 	bic.w	r3, r3, #32
 8007a2e:	2b08      	cmp	r3, #8
 8007a30:	bf0c      	ite	eq
 8007a32:	2301      	moveq	r3, #1
 8007a34:	2300      	movne	r3, #0
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	461a      	mov	r2, r3
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d00f      	beq.n	8007a60 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8007a40:	2100      	movs	r1, #0
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f7ff fe72 	bl	800772c <dir_next>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007a4c:	7dfb      	ldrb	r3, [r7, #23]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d108      	bne.n	8007a64 <dir_read+0xa2>
	while (dp->sect) {
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	69db      	ldr	r3, [r3, #28]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d1be      	bne.n	80079d8 <dir_read+0x16>
 8007a5a:	e004      	b.n	8007a66 <dir_read+0xa4>
		if (res != FR_OK) break;
 8007a5c:	bf00      	nop
 8007a5e:	e002      	b.n	8007a66 <dir_read+0xa4>
				break;
 8007a60:	bf00      	nop
 8007a62:	e000      	b.n	8007a66 <dir_read+0xa4>
		if (res != FR_OK) break;
 8007a64:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8007a66:	7dfb      	ldrb	r3, [r7, #23]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d002      	beq.n	8007a72 <dir_read+0xb0>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	61da      	str	r2, [r3, #28]
	return res;
 8007a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3718      	adds	r7, #24
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b086      	sub	sp, #24
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f7ff fdd2 	bl	8007636 <dir_sdi>
 8007a92:	4603      	mov	r3, r0
 8007a94:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007a96:	7dfb      	ldrb	r3, [r7, #23]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d001      	beq.n	8007aa0 <dir_find+0x24>
 8007a9c:	7dfb      	ldrb	r3, [r7, #23]
 8007a9e:	e03e      	b.n	8007b1e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	69db      	ldr	r3, [r3, #28]
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	6938      	ldr	r0, [r7, #16]
 8007aa8:	f7ff fa48 	bl	8006f3c <move_window>
 8007aac:	4603      	mov	r3, r0
 8007aae:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007ab0:	7dfb      	ldrb	r3, [r7, #23]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d12f      	bne.n	8007b16 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a1b      	ldr	r3, [r3, #32]
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007abe:	7bfb      	ldrb	r3, [r7, #15]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d102      	bne.n	8007aca <dir_find+0x4e>
 8007ac4:	2304      	movs	r3, #4
 8007ac6:	75fb      	strb	r3, [r7, #23]
 8007ac8:	e028      	b.n	8007b1c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a1b      	ldr	r3, [r3, #32]
 8007ace:	330b      	adds	r3, #11
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ad6:	b2da      	uxtb	r2, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6a1b      	ldr	r3, [r3, #32]
 8007ae0:	330b      	adds	r3, #11
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	f003 0308 	and.w	r3, r3, #8
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d10a      	bne.n	8007b02 <dir_find+0x86>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6a18      	ldr	r0, [r3, #32]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	3324      	adds	r3, #36	@ 0x24
 8007af4:	220b      	movs	r2, #11
 8007af6:	4619      	mov	r1, r3
 8007af8:	f7ff f82e 	bl	8006b58 <mem_cmp>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00b      	beq.n	8007b1a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007b02:	2100      	movs	r1, #0
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f7ff fe11 	bl	800772c <dir_next>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007b0e:	7dfb      	ldrb	r3, [r7, #23]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d0c5      	beq.n	8007aa0 <dir_find+0x24>
 8007b14:	e002      	b.n	8007b1c <dir_find+0xa0>
		if (res != FR_OK) break;
 8007b16:	bf00      	nop
 8007b18:	e000      	b.n	8007b1c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007b1a:	bf00      	nop

	return res;
 8007b1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3718      	adds	r7, #24
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}

08007b26 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007b26:	b580      	push	{r7, lr}
 8007b28:	b084      	sub	sp, #16
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007b34:	2101      	movs	r1, #1
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f7ff febd 	bl	80078b6 <dir_alloc>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007b40:	7bfb      	ldrb	r3, [r7, #15]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d11c      	bne.n	8007b80 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	69db      	ldr	r3, [r3, #28]
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	68b8      	ldr	r0, [r7, #8]
 8007b4e:	f7ff f9f5 	bl	8006f3c <move_window>
 8007b52:	4603      	mov	r3, r0
 8007b54:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007b56:	7bfb      	ldrb	r3, [r7, #15]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d111      	bne.n	8007b80 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6a1b      	ldr	r3, [r3, #32]
 8007b60:	2220      	movs	r2, #32
 8007b62:	2100      	movs	r1, #0
 8007b64:	4618      	mov	r0, r3
 8007b66:	f7fe ffdc 	bl	8006b22 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a18      	ldr	r0, [r3, #32]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	3324      	adds	r3, #36	@ 0x24
 8007b72:	220b      	movs	r2, #11
 8007b74:	4619      	mov	r1, r3
 8007b76:	f7fe ffb3 	bl	8006ae0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3710      	adds	r7, #16
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b086      	sub	sp, #24
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
 8007b92:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	2200      	movs	r2, #0
 8007b98:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	69db      	ldr	r3, [r3, #28]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d04f      	beq.n	8007c42 <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	613b      	str	r3, [r7, #16]
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8007baa:	e022      	b.n	8007bf2 <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6a1a      	ldr	r2, [r3, #32]
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	1c59      	adds	r1, r3, #1
 8007bb4:	6179      	str	r1, [r7, #20]
 8007bb6:	4413      	add	r3, r2
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8007bbc:	7bfb      	ldrb	r3, [r7, #15]
 8007bbe:	2b20      	cmp	r3, #32
 8007bc0:	d016      	beq.n	8007bf0 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8007bc2:	7bfb      	ldrb	r3, [r7, #15]
 8007bc4:	2b05      	cmp	r3, #5
 8007bc6:	d101      	bne.n	8007bcc <get_fileinfo+0x42>
 8007bc8:	23e5      	movs	r3, #229	@ 0xe5
 8007bca:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	2b09      	cmp	r3, #9
 8007bd0:	d106      	bne.n	8007be0 <get_fileinfo+0x56>
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	1c5a      	adds	r2, r3, #1
 8007bd6:	613a      	str	r2, [r7, #16]
 8007bd8:	683a      	ldr	r2, [r7, #0]
 8007bda:	4413      	add	r3, r2
 8007bdc:	222e      	movs	r2, #46	@ 0x2e
 8007bde:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	1c5a      	adds	r2, r3, #1
 8007be4:	613a      	str	r2, [r7, #16]
 8007be6:	683a      	ldr	r2, [r7, #0]
 8007be8:	4413      	add	r3, r2
 8007bea:	7bfa      	ldrb	r2, [r7, #15]
 8007bec:	725a      	strb	r2, [r3, #9]
 8007bee:	e000      	b.n	8007bf2 <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 8007bf0:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	2b0a      	cmp	r3, #10
 8007bf6:	d9d9      	bls.n	8007bac <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8007bf8:	683a      	ldr	r2, [r7, #0]
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	3309      	adds	r3, #9
 8007c00:	2200      	movs	r2, #0
 8007c02:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6a1b      	ldr	r3, [r3, #32]
 8007c08:	7ada      	ldrb	r2, [r3, #11]
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6a1b      	ldr	r3, [r3, #32]
 8007c12:	331c      	adds	r3, #28
 8007c14:	4618      	mov	r0, r3
 8007c16:	f7fe fef9 	bl	8006a0c <ld_dword>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6a1b      	ldr	r3, [r3, #32]
 8007c24:	3316      	adds	r3, #22
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7fe fef0 	bl	8006a0c <ld_dword>
 8007c2c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	b29a      	uxth	r2, r3
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	80da      	strh	r2, [r3, #6]
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	0c1b      	lsrs	r3, r3, #16
 8007c3a:	b29a      	uxth	r2, r3
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	809a      	strh	r2, [r3, #4]
 8007c40:	e000      	b.n	8007c44 <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007c42:	bf00      	nop
}
 8007c44:	3718      	adds	r7, #24
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
	...

08007c4c <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b085      	sub	sp, #20
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	1c59      	adds	r1, r3, #1
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	6011      	str	r1, [r2, #0]
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8007c62:	89fb      	ldrh	r3, [r7, #14]
 8007c64:	2b60      	cmp	r3, #96	@ 0x60
 8007c66:	d905      	bls.n	8007c74 <get_achar+0x28>
 8007c68:	89fb      	ldrh	r3, [r7, #14]
 8007c6a:	2b7a      	cmp	r3, #122	@ 0x7a
 8007c6c:	d802      	bhi.n	8007c74 <get_achar+0x28>
 8007c6e:	89fb      	ldrh	r3, [r7, #14]
 8007c70:	3b20      	subs	r3, #32
 8007c72:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8007c74:	89fb      	ldrh	r3, [r7, #14]
 8007c76:	2b7f      	cmp	r3, #127	@ 0x7f
 8007c78:	d904      	bls.n	8007c84 <get_achar+0x38>
 8007c7a:	89fb      	ldrh	r3, [r7, #14]
 8007c7c:	3b80      	subs	r3, #128	@ 0x80
 8007c7e:	4a05      	ldr	r2, [pc, #20]	@ (8007c94 <get_achar+0x48>)
 8007c80:	5cd3      	ldrb	r3, [r2, r3]
 8007c82:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 8007c84:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3714      	adds	r7, #20
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr
 8007c92:	bf00      	nop
 8007c94:	0800bbc0 	.word	0x0800bbc0

08007c98 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b08a      	sub	sp, #40	@ 0x28
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	607a      	str	r2, [r7, #4]
 8007ca4:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 8007ca6:	e009      	b.n	8007cbc <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 8007ca8:	f107 0308 	add.w	r3, r7, #8
 8007cac:	4618      	mov	r0, r3
 8007cae:	f7ff ffcd 	bl	8007c4c <get_achar>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d101      	bne.n	8007cbc <pattern_matching+0x24>
 8007cb8:	2300      	movs	r3, #0
 8007cba:	e064      	b.n	8007d86 <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	1e5a      	subs	r2, r3, #1
 8007cc0:	607a      	str	r2, [r7, #4]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d1f0      	bne.n	8007ca8 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d104      	bne.n	8007cd8 <pattern_matching+0x40>
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d001      	beq.n	8007cd8 <pattern_matching+0x40>
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e056      	b.n	8007d86 <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	617b      	str	r3, [r7, #20]
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	2b3f      	cmp	r3, #63	@ 0x3f
 8007ce6:	d003      	beq.n	8007cf0 <pattern_matching+0x58>
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cee:	d126      	bne.n	8007d3e <pattern_matching+0xa6>
				nm = nx = 0;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	61fb      	str	r3, [r7, #28]
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	1c5a      	adds	r2, r3, #1
 8007cfc:	617a      	str	r2, [r7, #20]
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	2b3f      	cmp	r3, #63	@ 0x3f
 8007d02:	d103      	bne.n	8007d0c <pattern_matching+0x74>
 8007d04:	6a3b      	ldr	r3, [r7, #32]
 8007d06:	3301      	adds	r3, #1
 8007d08:	623b      	str	r3, [r7, #32]
 8007d0a:	e001      	b.n	8007d10 <pattern_matching+0x78>
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	2b3f      	cmp	r3, #63	@ 0x3f
 8007d16:	d0ef      	beq.n	8007cf8 <pattern_matching+0x60>
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d1e:	d0eb      	beq.n	8007cf8 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 8007d20:	6978      	ldr	r0, [r7, #20]
 8007d22:	6939      	ldr	r1, [r7, #16]
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	6a3a      	ldr	r2, [r7, #32]
 8007d28:	f7ff ffb6 	bl	8007c98 <pattern_matching>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d001      	beq.n	8007d36 <pattern_matching+0x9e>
 8007d32:	2301      	movs	r3, #1
 8007d34:	e027      	b.n	8007d86 <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8007d3c:	e017      	b.n	8007d6e <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 8007d3e:	f107 0314 	add.w	r3, r7, #20
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7ff ff82 	bl	8007c4c <get_achar>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 8007d4c:	f107 0310 	add.w	r3, r7, #16
 8007d50:	4618      	mov	r0, r3
 8007d52:	f7ff ff7b 	bl	8007c4c <get_achar>
 8007d56:	4603      	mov	r3, r0
 8007d58:	84fb      	strh	r3, [r7, #38]	@ 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 8007d5a:	8b7a      	ldrh	r2, [r7, #26]
 8007d5c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d104      	bne.n	8007d6c <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 8007d62:	8b7b      	ldrh	r3, [r7, #26]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d1bb      	bne.n	8007ce0 <pattern_matching+0x48>
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e00c      	b.n	8007d86 <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 8007d6c:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 8007d6e:	f107 0308 	add.w	r3, r7, #8
 8007d72:	4618      	mov	r0, r3
 8007d74:	f7ff ff6a 	bl	8007c4c <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d002      	beq.n	8007d84 <pattern_matching+0xec>
 8007d7e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d1a9      	bne.n	8007cd8 <pattern_matching+0x40>

	return 0;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3728      	adds	r7, #40	@ 0x28
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
	...

08007d90 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b088      	sub	sp, #32
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	60fb      	str	r3, [r7, #12]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	3324      	adds	r3, #36	@ 0x24
 8007da4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007da6:	220b      	movs	r2, #11
 8007da8:	2120      	movs	r1, #32
 8007daa:	68b8      	ldr	r0, [r7, #8]
 8007dac:	f7fe feb9 	bl	8006b22 <mem_set>
	si = i = 0; ni = 8;
 8007db0:	2300      	movs	r3, #0
 8007db2:	613b      	str	r3, [r7, #16]
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	61fb      	str	r3, [r7, #28]
 8007db8:	2308      	movs	r3, #8
 8007dba:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	1c5a      	adds	r2, r3, #1
 8007dc0:	61fa      	str	r2, [r7, #28]
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	4413      	add	r3, r2
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007dca:	7efb      	ldrb	r3, [r7, #27]
 8007dcc:	2b20      	cmp	r3, #32
 8007dce:	d94e      	bls.n	8007e6e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007dd0:	7efb      	ldrb	r3, [r7, #27]
 8007dd2:	2b2f      	cmp	r3, #47	@ 0x2f
 8007dd4:	d006      	beq.n	8007de4 <create_name+0x54>
 8007dd6:	7efb      	ldrb	r3, [r7, #27]
 8007dd8:	2b5c      	cmp	r3, #92	@ 0x5c
 8007dda:	d110      	bne.n	8007dfe <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007ddc:	e002      	b.n	8007de4 <create_name+0x54>
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	3301      	adds	r3, #1
 8007de2:	61fb      	str	r3, [r7, #28]
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	69fb      	ldr	r3, [r7, #28]
 8007de8:	4413      	add	r3, r2
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	2b2f      	cmp	r3, #47	@ 0x2f
 8007dee:	d0f6      	beq.n	8007dde <create_name+0x4e>
 8007df0:	68fa      	ldr	r2, [r7, #12]
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	4413      	add	r3, r2
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	2b5c      	cmp	r3, #92	@ 0x5c
 8007dfa:	d0f0      	beq.n	8007dde <create_name+0x4e>
			break;
 8007dfc:	e038      	b.n	8007e70 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007dfe:	7efb      	ldrb	r3, [r7, #27]
 8007e00:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e02:	d003      	beq.n	8007e0c <create_name+0x7c>
 8007e04:	693a      	ldr	r2, [r7, #16]
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d30c      	bcc.n	8007e26 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	2b0b      	cmp	r3, #11
 8007e10:	d002      	beq.n	8007e18 <create_name+0x88>
 8007e12:	7efb      	ldrb	r3, [r7, #27]
 8007e14:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e16:	d001      	beq.n	8007e1c <create_name+0x8c>
 8007e18:	2306      	movs	r3, #6
 8007e1a:	e044      	b.n	8007ea6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007e1c:	2308      	movs	r3, #8
 8007e1e:	613b      	str	r3, [r7, #16]
 8007e20:	230b      	movs	r3, #11
 8007e22:	617b      	str	r3, [r7, #20]
			continue;
 8007e24:	e022      	b.n	8007e6c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007e26:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	da04      	bge.n	8007e38 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007e2e:	7efb      	ldrb	r3, [r7, #27]
 8007e30:	3b80      	subs	r3, #128	@ 0x80
 8007e32:	4a1f      	ldr	r2, [pc, #124]	@ (8007eb0 <create_name+0x120>)
 8007e34:	5cd3      	ldrb	r3, [r2, r3]
 8007e36:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007e38:	7efb      	ldrb	r3, [r7, #27]
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	481d      	ldr	r0, [pc, #116]	@ (8007eb4 <create_name+0x124>)
 8007e3e:	f7fe feb2 	bl	8006ba6 <chk_chr>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d001      	beq.n	8007e4c <create_name+0xbc>
 8007e48:	2306      	movs	r3, #6
 8007e4a:	e02c      	b.n	8007ea6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007e4c:	7efb      	ldrb	r3, [r7, #27]
 8007e4e:	2b60      	cmp	r3, #96	@ 0x60
 8007e50:	d905      	bls.n	8007e5e <create_name+0xce>
 8007e52:	7efb      	ldrb	r3, [r7, #27]
 8007e54:	2b7a      	cmp	r3, #122	@ 0x7a
 8007e56:	d802      	bhi.n	8007e5e <create_name+0xce>
 8007e58:	7efb      	ldrb	r3, [r7, #27]
 8007e5a:	3b20      	subs	r3, #32
 8007e5c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	1c5a      	adds	r2, r3, #1
 8007e62:	613a      	str	r2, [r7, #16]
 8007e64:	68ba      	ldr	r2, [r7, #8]
 8007e66:	4413      	add	r3, r2
 8007e68:	7efa      	ldrb	r2, [r7, #27]
 8007e6a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007e6c:	e7a6      	b.n	8007dbc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007e6e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	441a      	add	r2, r3
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d101      	bne.n	8007e84 <create_name+0xf4>
 8007e80:	2306      	movs	r3, #6
 8007e82:	e010      	b.n	8007ea6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	2be5      	cmp	r3, #229	@ 0xe5
 8007e8a:	d102      	bne.n	8007e92 <create_name+0x102>
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	2205      	movs	r2, #5
 8007e90:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007e92:	7efb      	ldrb	r3, [r7, #27]
 8007e94:	2b20      	cmp	r3, #32
 8007e96:	d801      	bhi.n	8007e9c <create_name+0x10c>
 8007e98:	2204      	movs	r2, #4
 8007e9a:	e000      	b.n	8007e9e <create_name+0x10e>
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	330b      	adds	r3, #11
 8007ea2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007ea4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3720      	adds	r7, #32
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	0800bbc0 	.word	0x0800bbc0
 8007eb4:	0800bb4c 	.word	0x0800bb4c

08007eb8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b086      	sub	sp, #24
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007ecc:	e002      	b.n	8007ed4 <follow_path+0x1c>
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	603b      	str	r3, [r7, #0]
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	2b2f      	cmp	r3, #47	@ 0x2f
 8007eda:	d0f8      	beq.n	8007ece <follow_path+0x16>
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	2b5c      	cmp	r3, #92	@ 0x5c
 8007ee2:	d0f4      	beq.n	8007ece <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	2b1f      	cmp	r3, #31
 8007ef0:	d80a      	bhi.n	8007f08 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2280      	movs	r2, #128	@ 0x80
 8007ef6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8007efa:	2100      	movs	r1, #0
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f7ff fb9a 	bl	8007636 <dir_sdi>
 8007f02:	4603      	mov	r3, r0
 8007f04:	75fb      	strb	r3, [r7, #23]
 8007f06:	e043      	b.n	8007f90 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007f08:	463b      	mov	r3, r7
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f7ff ff3f 	bl	8007d90 <create_name>
 8007f12:	4603      	mov	r3, r0
 8007f14:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007f16:	7dfb      	ldrb	r3, [r7, #23]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d134      	bne.n	8007f86 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f7ff fdad 	bl	8007a7c <dir_find>
 8007f22:	4603      	mov	r3, r0
 8007f24:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007f2c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007f2e:	7dfb      	ldrb	r3, [r7, #23]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d00a      	beq.n	8007f4a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007f34:	7dfb      	ldrb	r3, [r7, #23]
 8007f36:	2b04      	cmp	r3, #4
 8007f38:	d127      	bne.n	8007f8a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007f3a:	7afb      	ldrb	r3, [r7, #11]
 8007f3c:	f003 0304 	and.w	r3, r3, #4
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d122      	bne.n	8007f8a <follow_path+0xd2>
 8007f44:	2305      	movs	r3, #5
 8007f46:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007f48:	e01f      	b.n	8007f8a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007f4a:	7afb      	ldrb	r3, [r7, #11]
 8007f4c:	f003 0304 	and.w	r3, r3, #4
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d11c      	bne.n	8007f8e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	799b      	ldrb	r3, [r3, #6]
 8007f58:	f003 0310 	and.w	r3, r3, #16
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d102      	bne.n	8007f66 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007f60:	2305      	movs	r3, #5
 8007f62:	75fb      	strb	r3, [r7, #23]
 8007f64:	e014      	b.n	8007f90 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	695b      	ldr	r3, [r3, #20]
 8007f70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f74:	4413      	add	r3, r2
 8007f76:	4619      	mov	r1, r3
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f7ff fce3 	bl	8007944 <ld_clust>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007f84:	e7c0      	b.n	8007f08 <follow_path+0x50>
			if (res != FR_OK) break;
 8007f86:	bf00      	nop
 8007f88:	e002      	b.n	8007f90 <follow_path+0xd8>
				break;
 8007f8a:	bf00      	nop
 8007f8c:	e000      	b.n	8007f90 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007f8e:	bf00      	nop
			}
		}
	}

	return res;
 8007f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3718      	adds	r7, #24
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007f9a:	b480      	push	{r7}
 8007f9c:	b087      	sub	sp, #28
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8007fa6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d031      	beq.n	8008014 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	617b      	str	r3, [r7, #20]
 8007fb6:	e002      	b.n	8007fbe <get_ldnumber+0x24>
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	617b      	str	r3, [r7, #20]
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	2b20      	cmp	r3, #32
 8007fc4:	d903      	bls.n	8007fce <get_ldnumber+0x34>
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	2b3a      	cmp	r3, #58	@ 0x3a
 8007fcc:	d1f4      	bne.n	8007fb8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	2b3a      	cmp	r3, #58	@ 0x3a
 8007fd4:	d11c      	bne.n	8008010 <get_ldnumber+0x76>
			tp = *path;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	1c5a      	adds	r2, r3, #1
 8007fe0:	60fa      	str	r2, [r7, #12]
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	3b30      	subs	r3, #48	@ 0x30
 8007fe6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	2b09      	cmp	r3, #9
 8007fec:	d80e      	bhi.n	800800c <get_ldnumber+0x72>
 8007fee:	68fa      	ldr	r2, [r7, #12]
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d10a      	bne.n	800800c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d807      	bhi.n	800800c <get_ldnumber+0x72>
					vol = (int)i;
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	3301      	adds	r3, #1
 8008004:	617b      	str	r3, [r7, #20]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	697a      	ldr	r2, [r7, #20]
 800800a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	e002      	b.n	8008016 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008010:	2300      	movs	r3, #0
 8008012:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008014:	693b      	ldr	r3, [r7, #16]
}
 8008016:	4618      	mov	r0, r3
 8008018:	371c      	adds	r7, #28
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr
	...

08008024 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	70da      	strb	r2, [r3, #3]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f04f 32ff 	mov.w	r2, #4294967295
 800803a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800803c:	6839      	ldr	r1, [r7, #0]
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f7fe ff7c 	bl	8006f3c <move_window>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d001      	beq.n	800804e <check_fs+0x2a>
 800804a:	2304      	movs	r3, #4
 800804c:	e038      	b.n	80080c0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	3330      	adds	r3, #48	@ 0x30
 8008052:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008056:	4618      	mov	r0, r3
 8008058:	f7fe fcc0 	bl	80069dc <ld_word>
 800805c:	4603      	mov	r3, r0
 800805e:	461a      	mov	r2, r3
 8008060:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008064:	429a      	cmp	r2, r3
 8008066:	d001      	beq.n	800806c <check_fs+0x48>
 8008068:	2303      	movs	r3, #3
 800806a:	e029      	b.n	80080c0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008072:	2be9      	cmp	r3, #233	@ 0xe9
 8008074:	d009      	beq.n	800808a <check_fs+0x66>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800807c:	2beb      	cmp	r3, #235	@ 0xeb
 800807e:	d11e      	bne.n	80080be <check_fs+0x9a>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008086:	2b90      	cmp	r3, #144	@ 0x90
 8008088:	d119      	bne.n	80080be <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	3330      	adds	r3, #48	@ 0x30
 800808e:	3336      	adds	r3, #54	@ 0x36
 8008090:	4618      	mov	r0, r3
 8008092:	f7fe fcbb 	bl	8006a0c <ld_dword>
 8008096:	4603      	mov	r3, r0
 8008098:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800809c:	4a0a      	ldr	r2, [pc, #40]	@ (80080c8 <check_fs+0xa4>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d101      	bne.n	80080a6 <check_fs+0x82>
 80080a2:	2300      	movs	r3, #0
 80080a4:	e00c      	b.n	80080c0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	3330      	adds	r3, #48	@ 0x30
 80080aa:	3352      	adds	r3, #82	@ 0x52
 80080ac:	4618      	mov	r0, r3
 80080ae:	f7fe fcad 	bl	8006a0c <ld_dword>
 80080b2:	4603      	mov	r3, r0
 80080b4:	4a05      	ldr	r2, [pc, #20]	@ (80080cc <check_fs+0xa8>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d101      	bne.n	80080be <check_fs+0x9a>
 80080ba:	2300      	movs	r3, #0
 80080bc:	e000      	b.n	80080c0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80080be:	2302      	movs	r3, #2
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3708      	adds	r7, #8
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	00544146 	.word	0x00544146
 80080cc:	33544146 	.word	0x33544146

080080d0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b096      	sub	sp, #88	@ 0x58
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	4613      	mov	r3, r2
 80080dc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	2200      	movs	r2, #0
 80080e2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f7ff ff58 	bl	8007f9a <get_ldnumber>
 80080ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80080ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	da01      	bge.n	80080f6 <find_volume+0x26>
 80080f2:	230b      	movs	r3, #11
 80080f4:	e22d      	b.n	8008552 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80080f6:	4aa1      	ldr	r2, [pc, #644]	@ (800837c <find_volume+0x2ac>)
 80080f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080fe:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008102:	2b00      	cmp	r3, #0
 8008104:	d101      	bne.n	800810a <find_volume+0x3a>
 8008106:	230c      	movs	r3, #12
 8008108:	e223      	b.n	8008552 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800810e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008110:	79fb      	ldrb	r3, [r7, #7]
 8008112:	f023 0301 	bic.w	r3, r3, #1
 8008116:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d01a      	beq.n	8008156 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008122:	785b      	ldrb	r3, [r3, #1]
 8008124:	4618      	mov	r0, r3
 8008126:	f7fe fbb3 	bl	8006890 <disk_status>
 800812a:	4603      	mov	r3, r0
 800812c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008130:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008134:	f003 0301 	and.w	r3, r3, #1
 8008138:	2b00      	cmp	r3, #0
 800813a:	d10c      	bne.n	8008156 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800813c:	79fb      	ldrb	r3, [r7, #7]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d007      	beq.n	8008152 <find_volume+0x82>
 8008142:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008146:	f003 0304 	and.w	r3, r3, #4
 800814a:	2b00      	cmp	r3, #0
 800814c:	d001      	beq.n	8008152 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800814e:	230a      	movs	r3, #10
 8008150:	e1ff      	b.n	8008552 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8008152:	2300      	movs	r3, #0
 8008154:	e1fd      	b.n	8008552 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008158:	2200      	movs	r2, #0
 800815a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800815c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800815e:	b2da      	uxtb	r2, r3
 8008160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008162:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008166:	785b      	ldrb	r3, [r3, #1]
 8008168:	4618      	mov	r0, r3
 800816a:	f7fe fbab 	bl	80068c4 <disk_initialize>
 800816e:	4603      	mov	r3, r0
 8008170:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008174:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008178:	f003 0301 	and.w	r3, r3, #1
 800817c:	2b00      	cmp	r3, #0
 800817e:	d001      	beq.n	8008184 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008180:	2303      	movs	r3, #3
 8008182:	e1e6      	b.n	8008552 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008184:	79fb      	ldrb	r3, [r7, #7]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d007      	beq.n	800819a <find_volume+0xca>
 800818a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800818e:	f003 0304 	and.w	r3, r3, #4
 8008192:	2b00      	cmp	r3, #0
 8008194:	d001      	beq.n	800819a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008196:	230a      	movs	r3, #10
 8008198:	e1db      	b.n	8008552 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800819a:	2300      	movs	r3, #0
 800819c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800819e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80081a0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80081a2:	f7ff ff3f 	bl	8008024 <check_fs>
 80081a6:	4603      	mov	r3, r0
 80081a8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80081ac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80081b0:	2b02      	cmp	r3, #2
 80081b2:	d149      	bne.n	8008248 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80081b4:	2300      	movs	r3, #0
 80081b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80081b8:	e01e      	b.n	80081f8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80081ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081bc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80081c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80081c2:	011b      	lsls	r3, r3, #4
 80081c4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80081c8:	4413      	add	r3, r2
 80081ca:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80081cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ce:	3304      	adds	r3, #4
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d006      	beq.n	80081e4 <find_volume+0x114>
 80081d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d8:	3308      	adds	r3, #8
 80081da:	4618      	mov	r0, r3
 80081dc:	f7fe fc16 	bl	8006a0c <ld_dword>
 80081e0:	4602      	mov	r2, r0
 80081e2:	e000      	b.n	80081e6 <find_volume+0x116>
 80081e4:	2200      	movs	r2, #0
 80081e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	3358      	adds	r3, #88	@ 0x58
 80081ec:	443b      	add	r3, r7
 80081ee:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80081f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80081f4:	3301      	adds	r3, #1
 80081f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80081f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80081fa:	2b03      	cmp	r3, #3
 80081fc:	d9dd      	bls.n	80081ba <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80081fe:	2300      	movs	r3, #0
 8008200:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8008202:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008204:	2b00      	cmp	r3, #0
 8008206:	d002      	beq.n	800820e <find_volume+0x13e>
 8008208:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800820a:	3b01      	subs	r3, #1
 800820c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800820e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	3358      	adds	r3, #88	@ 0x58
 8008214:	443b      	add	r3, r7
 8008216:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800821a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800821c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800821e:	2b00      	cmp	r3, #0
 8008220:	d005      	beq.n	800822e <find_volume+0x15e>
 8008222:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008224:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008226:	f7ff fefd 	bl	8008024 <check_fs>
 800822a:	4603      	mov	r3, r0
 800822c:	e000      	b.n	8008230 <find_volume+0x160>
 800822e:	2303      	movs	r3, #3
 8008230:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008234:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008238:	2b01      	cmp	r3, #1
 800823a:	d905      	bls.n	8008248 <find_volume+0x178>
 800823c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800823e:	3301      	adds	r3, #1
 8008240:	643b      	str	r3, [r7, #64]	@ 0x40
 8008242:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008244:	2b03      	cmp	r3, #3
 8008246:	d9e2      	bls.n	800820e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008248:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800824c:	2b04      	cmp	r3, #4
 800824e:	d101      	bne.n	8008254 <find_volume+0x184>
 8008250:	2301      	movs	r3, #1
 8008252:	e17e      	b.n	8008552 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008254:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008258:	2b01      	cmp	r3, #1
 800825a:	d901      	bls.n	8008260 <find_volume+0x190>
 800825c:	230d      	movs	r3, #13
 800825e:	e178      	b.n	8008552 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008262:	3330      	adds	r3, #48	@ 0x30
 8008264:	330b      	adds	r3, #11
 8008266:	4618      	mov	r0, r3
 8008268:	f7fe fbb8 	bl	80069dc <ld_word>
 800826c:	4603      	mov	r3, r0
 800826e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008272:	d001      	beq.n	8008278 <find_volume+0x1a8>
 8008274:	230d      	movs	r3, #13
 8008276:	e16c      	b.n	8008552 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800827a:	3330      	adds	r3, #48	@ 0x30
 800827c:	3316      	adds	r3, #22
 800827e:	4618      	mov	r0, r3
 8008280:	f7fe fbac 	bl	80069dc <ld_word>
 8008284:	4603      	mov	r3, r0
 8008286:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008288:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800828a:	2b00      	cmp	r3, #0
 800828c:	d106      	bne.n	800829c <find_volume+0x1cc>
 800828e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008290:	3330      	adds	r3, #48	@ 0x30
 8008292:	3324      	adds	r3, #36	@ 0x24
 8008294:	4618      	mov	r0, r3
 8008296:	f7fe fbb9 	bl	8006a0c <ld_dword>
 800829a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800829c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800829e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80082a0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80082a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082a4:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80082a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082aa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80082ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ae:	789b      	ldrb	r3, [r3, #2]
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d005      	beq.n	80082c0 <find_volume+0x1f0>
 80082b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082b6:	789b      	ldrb	r3, [r3, #2]
 80082b8:	2b02      	cmp	r3, #2
 80082ba:	d001      	beq.n	80082c0 <find_volume+0x1f0>
 80082bc:	230d      	movs	r3, #13
 80082be:	e148      	b.n	8008552 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80082c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082c2:	789b      	ldrb	r3, [r3, #2]
 80082c4:	461a      	mov	r2, r3
 80082c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082c8:	fb02 f303 	mul.w	r3, r2, r3
 80082cc:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80082ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082d4:	461a      	mov	r2, r3
 80082d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082d8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80082da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082dc:	895b      	ldrh	r3, [r3, #10]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d008      	beq.n	80082f4 <find_volume+0x224>
 80082e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082e4:	895b      	ldrh	r3, [r3, #10]
 80082e6:	461a      	mov	r2, r3
 80082e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ea:	895b      	ldrh	r3, [r3, #10]
 80082ec:	3b01      	subs	r3, #1
 80082ee:	4013      	ands	r3, r2
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d001      	beq.n	80082f8 <find_volume+0x228>
 80082f4:	230d      	movs	r3, #13
 80082f6:	e12c      	b.n	8008552 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80082f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082fa:	3330      	adds	r3, #48	@ 0x30
 80082fc:	3311      	adds	r3, #17
 80082fe:	4618      	mov	r0, r3
 8008300:	f7fe fb6c 	bl	80069dc <ld_word>
 8008304:	4603      	mov	r3, r0
 8008306:	461a      	mov	r2, r3
 8008308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800830a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800830c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800830e:	891b      	ldrh	r3, [r3, #8]
 8008310:	f003 030f 	and.w	r3, r3, #15
 8008314:	b29b      	uxth	r3, r3
 8008316:	2b00      	cmp	r3, #0
 8008318:	d001      	beq.n	800831e <find_volume+0x24e>
 800831a:	230d      	movs	r3, #13
 800831c:	e119      	b.n	8008552 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800831e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008320:	3330      	adds	r3, #48	@ 0x30
 8008322:	3313      	adds	r3, #19
 8008324:	4618      	mov	r0, r3
 8008326:	f7fe fb59 	bl	80069dc <ld_word>
 800832a:	4603      	mov	r3, r0
 800832c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800832e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008330:	2b00      	cmp	r3, #0
 8008332:	d106      	bne.n	8008342 <find_volume+0x272>
 8008334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008336:	3330      	adds	r3, #48	@ 0x30
 8008338:	3320      	adds	r3, #32
 800833a:	4618      	mov	r0, r3
 800833c:	f7fe fb66 	bl	8006a0c <ld_dword>
 8008340:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008344:	3330      	adds	r3, #48	@ 0x30
 8008346:	330e      	adds	r3, #14
 8008348:	4618      	mov	r0, r3
 800834a:	f7fe fb47 	bl	80069dc <ld_word>
 800834e:	4603      	mov	r3, r0
 8008350:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008352:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008354:	2b00      	cmp	r3, #0
 8008356:	d101      	bne.n	800835c <find_volume+0x28c>
 8008358:	230d      	movs	r3, #13
 800835a:	e0fa      	b.n	8008552 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800835c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800835e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008360:	4413      	add	r3, r2
 8008362:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008364:	8912      	ldrh	r2, [r2, #8]
 8008366:	0912      	lsrs	r2, r2, #4
 8008368:	b292      	uxth	r2, r2
 800836a:	4413      	add	r3, r2
 800836c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800836e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008372:	429a      	cmp	r2, r3
 8008374:	d204      	bcs.n	8008380 <find_volume+0x2b0>
 8008376:	230d      	movs	r3, #13
 8008378:	e0eb      	b.n	8008552 <find_volume+0x482>
 800837a:	bf00      	nop
 800837c:	20000844 	.word	0x20000844
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008380:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008384:	1ad3      	subs	r3, r2, r3
 8008386:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008388:	8952      	ldrh	r2, [r2, #10]
 800838a:	fbb3 f3f2 	udiv	r3, r3, r2
 800838e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008392:	2b00      	cmp	r3, #0
 8008394:	d101      	bne.n	800839a <find_volume+0x2ca>
 8008396:	230d      	movs	r3, #13
 8008398:	e0db      	b.n	8008552 <find_volume+0x482>
		fmt = FS_FAT32;
 800839a:	2303      	movs	r3, #3
 800839c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80083a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a2:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d802      	bhi.n	80083b0 <find_volume+0x2e0>
 80083aa:	2302      	movs	r3, #2
 80083ac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80083b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b2:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d802      	bhi.n	80083c0 <find_volume+0x2f0>
 80083ba:	2301      	movs	r3, #1
 80083bc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80083c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c2:	1c9a      	adds	r2, r3, #2
 80083c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083c6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80083c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80083cc:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80083ce:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80083d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083d2:	441a      	add	r2, r3
 80083d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083d6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80083d8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80083da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083dc:	441a      	add	r2, r3
 80083de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083e0:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 80083e2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80083e6:	2b03      	cmp	r3, #3
 80083e8:	d11e      	bne.n	8008428 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80083ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ec:	3330      	adds	r3, #48	@ 0x30
 80083ee:	332a      	adds	r3, #42	@ 0x2a
 80083f0:	4618      	mov	r0, r3
 80083f2:	f7fe faf3 	bl	80069dc <ld_word>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d001      	beq.n	8008400 <find_volume+0x330>
 80083fc:	230d      	movs	r3, #13
 80083fe:	e0a8      	b.n	8008552 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008402:	891b      	ldrh	r3, [r3, #8]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d001      	beq.n	800840c <find_volume+0x33c>
 8008408:	230d      	movs	r3, #13
 800840a:	e0a2      	b.n	8008552 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800840c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800840e:	3330      	adds	r3, #48	@ 0x30
 8008410:	332c      	adds	r3, #44	@ 0x2c
 8008412:	4618      	mov	r0, r3
 8008414:	f7fe fafa 	bl	8006a0c <ld_dword>
 8008418:	4602      	mov	r2, r0
 800841a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800841c:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800841e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008420:	695b      	ldr	r3, [r3, #20]
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	647b      	str	r3, [r7, #68]	@ 0x44
 8008426:	e01f      	b.n	8008468 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800842a:	891b      	ldrh	r3, [r3, #8]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d101      	bne.n	8008434 <find_volume+0x364>
 8008430:	230d      	movs	r3, #13
 8008432:	e08e      	b.n	8008552 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008436:	6a1a      	ldr	r2, [r3, #32]
 8008438:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800843a:	441a      	add	r2, r3
 800843c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800843e:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008440:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008444:	2b02      	cmp	r3, #2
 8008446:	d103      	bne.n	8008450 <find_volume+0x380>
 8008448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800844a:	695b      	ldr	r3, [r3, #20]
 800844c:	005b      	lsls	r3, r3, #1
 800844e:	e00a      	b.n	8008466 <find_volume+0x396>
 8008450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008452:	695a      	ldr	r2, [r3, #20]
 8008454:	4613      	mov	r3, r2
 8008456:	005b      	lsls	r3, r3, #1
 8008458:	4413      	add	r3, r2
 800845a:	085a      	lsrs	r2, r3, #1
 800845c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800845e:	695b      	ldr	r3, [r3, #20]
 8008460:	f003 0301 	and.w	r3, r3, #1
 8008464:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008466:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800846a:	699a      	ldr	r2, [r3, #24]
 800846c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800846e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8008472:	0a5b      	lsrs	r3, r3, #9
 8008474:	429a      	cmp	r2, r3
 8008476:	d201      	bcs.n	800847c <find_volume+0x3ac>
 8008478:	230d      	movs	r3, #13
 800847a:	e06a      	b.n	8008552 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800847c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800847e:	f04f 32ff 	mov.w	r2, #4294967295
 8008482:	611a      	str	r2, [r3, #16]
 8008484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008486:	691a      	ldr	r2, [r3, #16]
 8008488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800848a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800848c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800848e:	2280      	movs	r2, #128	@ 0x80
 8008490:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008492:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008496:	2b03      	cmp	r3, #3
 8008498:	d149      	bne.n	800852e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800849a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800849c:	3330      	adds	r3, #48	@ 0x30
 800849e:	3330      	adds	r3, #48	@ 0x30
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7fe fa9b 	bl	80069dc <ld_word>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d140      	bne.n	800852e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80084ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80084ae:	3301      	adds	r3, #1
 80084b0:	4619      	mov	r1, r3
 80084b2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80084b4:	f7fe fd42 	bl	8006f3c <move_window>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d137      	bne.n	800852e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80084be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084c0:	2200      	movs	r2, #0
 80084c2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80084c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084c6:	3330      	adds	r3, #48	@ 0x30
 80084c8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80084cc:	4618      	mov	r0, r3
 80084ce:	f7fe fa85 	bl	80069dc <ld_word>
 80084d2:	4603      	mov	r3, r0
 80084d4:	461a      	mov	r2, r3
 80084d6:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80084da:	429a      	cmp	r2, r3
 80084dc:	d127      	bne.n	800852e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80084de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084e0:	3330      	adds	r3, #48	@ 0x30
 80084e2:	4618      	mov	r0, r3
 80084e4:	f7fe fa92 	bl	8006a0c <ld_dword>
 80084e8:	4603      	mov	r3, r0
 80084ea:	4a1c      	ldr	r2, [pc, #112]	@ (800855c <find_volume+0x48c>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d11e      	bne.n	800852e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80084f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084f2:	3330      	adds	r3, #48	@ 0x30
 80084f4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80084f8:	4618      	mov	r0, r3
 80084fa:	f7fe fa87 	bl	8006a0c <ld_dword>
 80084fe:	4603      	mov	r3, r0
 8008500:	4a17      	ldr	r2, [pc, #92]	@ (8008560 <find_volume+0x490>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d113      	bne.n	800852e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008508:	3330      	adds	r3, #48	@ 0x30
 800850a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800850e:	4618      	mov	r0, r3
 8008510:	f7fe fa7c 	bl	8006a0c <ld_dword>
 8008514:	4602      	mov	r2, r0
 8008516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008518:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800851a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800851c:	3330      	adds	r3, #48	@ 0x30
 800851e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8008522:	4618      	mov	r0, r3
 8008524:	f7fe fa72 	bl	8006a0c <ld_dword>
 8008528:	4602      	mov	r2, r0
 800852a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800852c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800852e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008530:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8008534:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008536:	4b0b      	ldr	r3, [pc, #44]	@ (8008564 <find_volume+0x494>)
 8008538:	881b      	ldrh	r3, [r3, #0]
 800853a:	3301      	adds	r3, #1
 800853c:	b29a      	uxth	r2, r3
 800853e:	4b09      	ldr	r3, [pc, #36]	@ (8008564 <find_volume+0x494>)
 8008540:	801a      	strh	r2, [r3, #0]
 8008542:	4b08      	ldr	r3, [pc, #32]	@ (8008564 <find_volume+0x494>)
 8008544:	881a      	ldrh	r2, [r3, #0]
 8008546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008548:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800854a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800854c:	f7fe fc8e 	bl	8006e6c <clear_lock>
#endif
	return FR_OK;
 8008550:	2300      	movs	r3, #0
}
 8008552:	4618      	mov	r0, r3
 8008554:	3758      	adds	r7, #88	@ 0x58
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	41615252 	.word	0x41615252
 8008560:	61417272 	.word	0x61417272
 8008564:	2000084c 	.word	0x2000084c

08008568 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008572:	2309      	movs	r3, #9
 8008574:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d01c      	beq.n	80085b6 <validate+0x4e>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d018      	beq.n	80085b6 <validate+0x4e>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d013      	beq.n	80085b6 <validate+0x4e>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	889a      	ldrh	r2, [r3, #4]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	88db      	ldrh	r3, [r3, #6]
 8008598:	429a      	cmp	r2, r3
 800859a:	d10c      	bne.n	80085b6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	785b      	ldrb	r3, [r3, #1]
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7fe f974 	bl	8006890 <disk_status>
 80085a8:	4603      	mov	r3, r0
 80085aa:	f003 0301 	and.w	r3, r3, #1
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d101      	bne.n	80085b6 <validate+0x4e>
			res = FR_OK;
 80085b2:	2300      	movs	r3, #0
 80085b4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80085b6:	7bfb      	ldrb	r3, [r7, #15]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d102      	bne.n	80085c2 <validate+0x5a>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	e000      	b.n	80085c4 <validate+0x5c>
 80085c2:	2300      	movs	r3, #0
 80085c4:	683a      	ldr	r2, [r7, #0]
 80085c6:	6013      	str	r3, [r2, #0]
	return res;
 80085c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3710      	adds	r7, #16
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
	...

080085d4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b088      	sub	sp, #32
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	4613      	mov	r3, r2
 80085e0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80085e6:	f107 0310 	add.w	r3, r7, #16
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7ff fcd5 	bl	8007f9a <get_ldnumber>
 80085f0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80085f2:	69fb      	ldr	r3, [r7, #28]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	da01      	bge.n	80085fc <f_mount+0x28>
 80085f8:	230b      	movs	r3, #11
 80085fa:	e02b      	b.n	8008654 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80085fc:	4a17      	ldr	r2, [pc, #92]	@ (800865c <f_mount+0x88>)
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008604:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d005      	beq.n	8008618 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800860c:	69b8      	ldr	r0, [r7, #24]
 800860e:	f7fe fc2d 	bl	8006e6c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	2200      	movs	r2, #0
 8008616:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d002      	beq.n	8008624 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2200      	movs	r2, #0
 8008622:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008624:	68fa      	ldr	r2, [r7, #12]
 8008626:	490d      	ldr	r1, [pc, #52]	@ (800865c <f_mount+0x88>)
 8008628:	69fb      	ldr	r3, [r7, #28]
 800862a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d002      	beq.n	800863a <f_mount+0x66>
 8008634:	79fb      	ldrb	r3, [r7, #7]
 8008636:	2b01      	cmp	r3, #1
 8008638:	d001      	beq.n	800863e <f_mount+0x6a>
 800863a:	2300      	movs	r3, #0
 800863c:	e00a      	b.n	8008654 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800863e:	f107 010c 	add.w	r1, r7, #12
 8008642:	f107 0308 	add.w	r3, r7, #8
 8008646:	2200      	movs	r2, #0
 8008648:	4618      	mov	r0, r3
 800864a:	f7ff fd41 	bl	80080d0 <find_volume>
 800864e:	4603      	mov	r3, r0
 8008650:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008652:	7dfb      	ldrb	r3, [r7, #23]
}
 8008654:	4618      	mov	r0, r3
 8008656:	3720      	adds	r7, #32
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}
 800865c:	20000844 	.word	0x20000844

08008660 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b09a      	sub	sp, #104	@ 0x68
 8008664:	af00      	add	r7, sp, #0
 8008666:	60f8      	str	r0, [r7, #12]
 8008668:	60b9      	str	r1, [r7, #8]
 800866a:	4613      	mov	r3, r2
 800866c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d101      	bne.n	8008678 <f_open+0x18>
 8008674:	2309      	movs	r3, #9
 8008676:	e1a9      	b.n	80089cc <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008678:	79fb      	ldrb	r3, [r7, #7]
 800867a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800867e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008680:	79fa      	ldrb	r2, [r7, #7]
 8008682:	f107 0114 	add.w	r1, r7, #20
 8008686:	f107 0308 	add.w	r3, r7, #8
 800868a:	4618      	mov	r0, r3
 800868c:	f7ff fd20 	bl	80080d0 <find_volume>
 8008690:	4603      	mov	r3, r0
 8008692:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8008696:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800869a:	2b00      	cmp	r3, #0
 800869c:	f040 818d 	bne.w	80089ba <f_open+0x35a>
		dj.obj.fs = fs;
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80086a4:	68ba      	ldr	r2, [r7, #8]
 80086a6:	f107 0318 	add.w	r3, r7, #24
 80086aa:	4611      	mov	r1, r2
 80086ac:	4618      	mov	r0, r3
 80086ae:	f7ff fc03 	bl	8007eb8 <follow_path>
 80086b2:	4603      	mov	r3, r0
 80086b4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80086b8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d118      	bne.n	80086f2 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80086c0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80086c4:	b25b      	sxtb	r3, r3
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	da03      	bge.n	80086d2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80086ca:	2306      	movs	r3, #6
 80086cc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80086d0:	e00f      	b.n	80086f2 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80086d2:	79fb      	ldrb	r3, [r7, #7]
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	bf8c      	ite	hi
 80086d8:	2301      	movhi	r3, #1
 80086da:	2300      	movls	r3, #0
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	461a      	mov	r2, r3
 80086e0:	f107 0318 	add.w	r3, r7, #24
 80086e4:	4611      	mov	r1, r2
 80086e6:	4618      	mov	r0, r3
 80086e8:	f7fe fa78 	bl	8006bdc <chk_lock>
 80086ec:	4603      	mov	r3, r0
 80086ee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80086f2:	79fb      	ldrb	r3, [r7, #7]
 80086f4:	f003 031c 	and.w	r3, r3, #28
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d07f      	beq.n	80087fc <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80086fc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008700:	2b00      	cmp	r3, #0
 8008702:	d017      	beq.n	8008734 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008704:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008708:	2b04      	cmp	r3, #4
 800870a:	d10e      	bne.n	800872a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800870c:	f7fe fac2 	bl	8006c94 <enq_lock>
 8008710:	4603      	mov	r3, r0
 8008712:	2b00      	cmp	r3, #0
 8008714:	d006      	beq.n	8008724 <f_open+0xc4>
 8008716:	f107 0318 	add.w	r3, r7, #24
 800871a:	4618      	mov	r0, r3
 800871c:	f7ff fa03 	bl	8007b26 <dir_register>
 8008720:	4603      	mov	r3, r0
 8008722:	e000      	b.n	8008726 <f_open+0xc6>
 8008724:	2312      	movs	r3, #18
 8008726:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800872a:	79fb      	ldrb	r3, [r7, #7]
 800872c:	f043 0308 	orr.w	r3, r3, #8
 8008730:	71fb      	strb	r3, [r7, #7]
 8008732:	e010      	b.n	8008756 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008734:	7fbb      	ldrb	r3, [r7, #30]
 8008736:	f003 0311 	and.w	r3, r3, #17
 800873a:	2b00      	cmp	r3, #0
 800873c:	d003      	beq.n	8008746 <f_open+0xe6>
					res = FR_DENIED;
 800873e:	2307      	movs	r3, #7
 8008740:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008744:	e007      	b.n	8008756 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008746:	79fb      	ldrb	r3, [r7, #7]
 8008748:	f003 0304 	and.w	r3, r3, #4
 800874c:	2b00      	cmp	r3, #0
 800874e:	d002      	beq.n	8008756 <f_open+0xf6>
 8008750:	2308      	movs	r3, #8
 8008752:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008756:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800875a:	2b00      	cmp	r3, #0
 800875c:	d168      	bne.n	8008830 <f_open+0x1d0>
 800875e:	79fb      	ldrb	r3, [r7, #7]
 8008760:	f003 0308 	and.w	r3, r3, #8
 8008764:	2b00      	cmp	r3, #0
 8008766:	d063      	beq.n	8008830 <f_open+0x1d0>
				dw = GET_FATTIME();
 8008768:	f7fe f930 	bl	80069cc <get_fattime>
 800876c:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800876e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008770:	330e      	adds	r3, #14
 8008772:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008774:	4618      	mov	r0, r3
 8008776:	f7fe f987 	bl	8006a88 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800877a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800877c:	3316      	adds	r3, #22
 800877e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008780:	4618      	mov	r0, r3
 8008782:	f7fe f981 	bl	8006a88 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008788:	330b      	adds	r3, #11
 800878a:	2220      	movs	r2, #32
 800878c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008792:	4611      	mov	r1, r2
 8008794:	4618      	mov	r0, r3
 8008796:	f7ff f8d5 	bl	8007944 <ld_clust>
 800879a:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80087a0:	2200      	movs	r2, #0
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7ff f8ed 	bl	8007982 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80087a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087aa:	331c      	adds	r3, #28
 80087ac:	2100      	movs	r1, #0
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7fe f96a 	bl	8006a88 <st_dword>
					fs->wflag = 1;
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	2201      	movs	r2, #1
 80087b8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80087ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d037      	beq.n	8008830 <f_open+0x1d0>
						dw = fs->winsect;
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087c4:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80087c6:	f107 0318 	add.w	r3, r7, #24
 80087ca:	2200      	movs	r2, #0
 80087cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7fe fe00 	bl	80073d4 <remove_chain>
 80087d4:	4603      	mov	r3, r0
 80087d6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 80087da:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d126      	bne.n	8008830 <f_open+0x1d0>
							res = move_window(fs, dw);
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80087e6:	4618      	mov	r0, r3
 80087e8:	f7fe fba8 	bl	8006f3c <move_window>
 80087ec:	4603      	mov	r3, r0
 80087ee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80087f6:	3a01      	subs	r2, #1
 80087f8:	60da      	str	r2, [r3, #12]
 80087fa:	e019      	b.n	8008830 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80087fc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008800:	2b00      	cmp	r3, #0
 8008802:	d115      	bne.n	8008830 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008804:	7fbb      	ldrb	r3, [r7, #30]
 8008806:	f003 0310 	and.w	r3, r3, #16
 800880a:	2b00      	cmp	r3, #0
 800880c:	d003      	beq.n	8008816 <f_open+0x1b6>
					res = FR_NO_FILE;
 800880e:	2304      	movs	r3, #4
 8008810:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008814:	e00c      	b.n	8008830 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008816:	79fb      	ldrb	r3, [r7, #7]
 8008818:	f003 0302 	and.w	r3, r3, #2
 800881c:	2b00      	cmp	r3, #0
 800881e:	d007      	beq.n	8008830 <f_open+0x1d0>
 8008820:	7fbb      	ldrb	r3, [r7, #30]
 8008822:	f003 0301 	and.w	r3, r3, #1
 8008826:	2b00      	cmp	r3, #0
 8008828:	d002      	beq.n	8008830 <f_open+0x1d0>
						res = FR_DENIED;
 800882a:	2307      	movs	r3, #7
 800882c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8008830:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008834:	2b00      	cmp	r3, #0
 8008836:	d126      	bne.n	8008886 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008838:	79fb      	ldrb	r3, [r7, #7]
 800883a:	f003 0308 	and.w	r3, r3, #8
 800883e:	2b00      	cmp	r3, #0
 8008840:	d003      	beq.n	800884a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8008842:	79fb      	ldrb	r3, [r7, #7]
 8008844:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008848:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8008852:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008858:	79fb      	ldrb	r3, [r7, #7]
 800885a:	2b01      	cmp	r3, #1
 800885c:	bf8c      	ite	hi
 800885e:	2301      	movhi	r3, #1
 8008860:	2300      	movls	r3, #0
 8008862:	b2db      	uxtb	r3, r3
 8008864:	461a      	mov	r2, r3
 8008866:	f107 0318 	add.w	r3, r7, #24
 800886a:	4611      	mov	r1, r2
 800886c:	4618      	mov	r0, r3
 800886e:	f7fe fa33 	bl	8006cd8 <inc_lock>
 8008872:	4602      	mov	r2, r0
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	691b      	ldr	r3, [r3, #16]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d102      	bne.n	8008886 <f_open+0x226>
 8008880:	2302      	movs	r3, #2
 8008882:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008886:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800888a:	2b00      	cmp	r3, #0
 800888c:	f040 8095 	bne.w	80089ba <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008894:	4611      	mov	r1, r2
 8008896:	4618      	mov	r0, r3
 8008898:	f7ff f854 	bl	8007944 <ld_clust>
 800889c:	4602      	mov	r2, r0
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80088a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088a4:	331c      	adds	r3, #28
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7fe f8b0 	bl	8006a0c <ld_dword>
 80088ac:	4602      	mov	r2, r0
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2200      	movs	r2, #0
 80088b6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80088b8:	697a      	ldr	r2, [r7, #20]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	88da      	ldrh	r2, [r3, #6]
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	79fa      	ldrb	r2, [r7, #7]
 80088ca:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2200      	movs	r2, #0
 80088d0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2200      	movs	r2, #0
 80088d6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2200      	movs	r2, #0
 80088dc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	3330      	adds	r3, #48	@ 0x30
 80088e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80088e6:	2100      	movs	r1, #0
 80088e8:	4618      	mov	r0, r3
 80088ea:	f7fe f91a 	bl	8006b22 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80088ee:	79fb      	ldrb	r3, [r7, #7]
 80088f0:	f003 0320 	and.w	r3, r3, #32
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d060      	beq.n	80089ba <f_open+0x35a>
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d05c      	beq.n	80089ba <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	68da      	ldr	r2, [r3, #12]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	895b      	ldrh	r3, [r3, #10]
 800890c:	025b      	lsls	r3, r3, #9
 800890e:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	689b      	ldr	r3, [r3, #8]
 8008914:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	68db      	ldr	r3, [r3, #12]
 800891a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800891c:	e016      	b.n	800894c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008922:	4618      	mov	r0, r3
 8008924:	f7fe fbc5 	bl	80070b2 <get_fat>
 8008928:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800892a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800892c:	2b01      	cmp	r3, #1
 800892e:	d802      	bhi.n	8008936 <f_open+0x2d6>
 8008930:	2302      	movs	r3, #2
 8008932:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008936:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800893c:	d102      	bne.n	8008944 <f_open+0x2e4>
 800893e:	2301      	movs	r3, #1
 8008940:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008944:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008946:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008948:	1ad3      	subs	r3, r2, r3
 800894a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800894c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008950:	2b00      	cmp	r3, #0
 8008952:	d103      	bne.n	800895c <f_open+0x2fc>
 8008954:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008956:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008958:	429a      	cmp	r2, r3
 800895a:	d8e0      	bhi.n	800891e <f_open+0x2be>
				}
				fp->clust = clst;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008960:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008962:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008966:	2b00      	cmp	r3, #0
 8008968:	d127      	bne.n	80089ba <f_open+0x35a>
 800896a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800896c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008970:	2b00      	cmp	r3, #0
 8008972:	d022      	beq.n	80089ba <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008978:	4618      	mov	r0, r3
 800897a:	f7fe fb7b 	bl	8007074 <clust2sect>
 800897e:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8008980:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008982:	2b00      	cmp	r3, #0
 8008984:	d103      	bne.n	800898e <f_open+0x32e>
						res = FR_INT_ERR;
 8008986:	2302      	movs	r3, #2
 8008988:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800898c:	e015      	b.n	80089ba <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800898e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008990:	0a5a      	lsrs	r2, r3, #9
 8008992:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008994:	441a      	add	r2, r3
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	7858      	ldrb	r0, [r3, #1]
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	6a1a      	ldr	r2, [r3, #32]
 80089a8:	2301      	movs	r3, #1
 80089aa:	f7fd ffb1 	bl	8006910 <disk_read>
 80089ae:	4603      	mov	r3, r0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d002      	beq.n	80089ba <f_open+0x35a>
 80089b4:	2301      	movs	r3, #1
 80089b6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80089ba:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d002      	beq.n	80089c8 <f_open+0x368>
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2200      	movs	r2, #0
 80089c6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80089c8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3768      	adds	r7, #104	@ 0x68
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b08e      	sub	sp, #56	@ 0x38
 80089d8:	af00      	add	r7, sp, #0
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	60b9      	str	r1, [r7, #8]
 80089de:	607a      	str	r2, [r7, #4]
 80089e0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	2200      	movs	r2, #0
 80089ea:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f107 0214 	add.w	r2, r7, #20
 80089f2:	4611      	mov	r1, r2
 80089f4:	4618      	mov	r0, r3
 80089f6:	f7ff fdb7 	bl	8008568 <validate>
 80089fa:	4603      	mov	r3, r0
 80089fc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008a00:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d107      	bne.n	8008a18 <f_read+0x44>
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	7d5b      	ldrb	r3, [r3, #21]
 8008a0c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8008a10:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d002      	beq.n	8008a1e <f_read+0x4a>
 8008a18:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008a1c:	e115      	b.n	8008c4a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	7d1b      	ldrb	r3, [r3, #20]
 8008a22:	f003 0301 	and.w	r3, r3, #1
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d101      	bne.n	8008a2e <f_read+0x5a>
 8008a2a:	2307      	movs	r3, #7
 8008a2c:	e10d      	b.n	8008c4a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	68da      	ldr	r2, [r3, #12]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	699b      	ldr	r3, [r3, #24]
 8008a36:	1ad3      	subs	r3, r2, r3
 8008a38:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	6a3b      	ldr	r3, [r7, #32]
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	f240 80fe 	bls.w	8008c40 <f_read+0x26c>
 8008a44:	6a3b      	ldr	r3, [r7, #32]
 8008a46:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008a48:	e0fa      	b.n	8008c40 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	699b      	ldr	r3, [r3, #24]
 8008a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	f040 80c6 	bne.w	8008be4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	699b      	ldr	r3, [r3, #24]
 8008a5c:	0a5b      	lsrs	r3, r3, #9
 8008a5e:	697a      	ldr	r2, [r7, #20]
 8008a60:	8952      	ldrh	r2, [r2, #10]
 8008a62:	3a01      	subs	r2, #1
 8008a64:	4013      	ands	r3, r2
 8008a66:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008a68:	69fb      	ldr	r3, [r7, #28]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d12f      	bne.n	8008ace <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	699b      	ldr	r3, [r3, #24]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d103      	bne.n	8008a7e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a7c:	e013      	b.n	8008aa6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d007      	beq.n	8008a96 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	699b      	ldr	r3, [r3, #24]
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	68f8      	ldr	r0, [r7, #12]
 8008a8e:	f7fe fd9e 	bl	80075ce <clmt_clust>
 8008a92:	6338      	str	r0, [r7, #48]	@ 0x30
 8008a94:	e007      	b.n	8008aa6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008a96:	68fa      	ldr	r2, [r7, #12]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	69db      	ldr	r3, [r3, #28]
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	4610      	mov	r0, r2
 8008aa0:	f7fe fb07 	bl	80070b2 <get_fat>
 8008aa4:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d804      	bhi.n	8008ab6 <f_read+0xe2>
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2202      	movs	r2, #2
 8008ab0:	755a      	strb	r2, [r3, #21]
 8008ab2:	2302      	movs	r3, #2
 8008ab4:	e0c9      	b.n	8008c4a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008abc:	d104      	bne.n	8008ac8 <f_read+0xf4>
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	755a      	strb	r2, [r3, #21]
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	e0c0      	b.n	8008c4a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008acc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008ace:	697a      	ldr	r2, [r7, #20]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	69db      	ldr	r3, [r3, #28]
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	4610      	mov	r0, r2
 8008ad8:	f7fe facc 	bl	8007074 <clust2sect>
 8008adc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d104      	bne.n	8008aee <f_read+0x11a>
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2202      	movs	r2, #2
 8008ae8:	755a      	strb	r2, [r3, #21]
 8008aea:	2302      	movs	r3, #2
 8008aec:	e0ad      	b.n	8008c4a <f_read+0x276>
			sect += csect;
 8008aee:	69ba      	ldr	r2, [r7, #24]
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	4413      	add	r3, r2
 8008af4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	0a5b      	lsrs	r3, r3, #9
 8008afa:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d039      	beq.n	8008b76 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008b02:	69fa      	ldr	r2, [r7, #28]
 8008b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b06:	4413      	add	r3, r2
 8008b08:	697a      	ldr	r2, [r7, #20]
 8008b0a:	8952      	ldrh	r2, [r2, #10]
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d905      	bls.n	8008b1c <f_read+0x148>
					cc = fs->csize - csect;
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	895b      	ldrh	r3, [r3, #10]
 8008b14:	461a      	mov	r2, r3
 8008b16:	69fb      	ldr	r3, [r7, #28]
 8008b18:	1ad3      	subs	r3, r2, r3
 8008b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	7858      	ldrb	r0, [r3, #1]
 8008b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b22:	69ba      	ldr	r2, [r7, #24]
 8008b24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008b26:	f7fd fef3 	bl	8006910 <disk_read>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d004      	beq.n	8008b3a <f_read+0x166>
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2201      	movs	r2, #1
 8008b34:	755a      	strb	r2, [r3, #21]
 8008b36:	2301      	movs	r3, #1
 8008b38:	e087      	b.n	8008c4a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	7d1b      	ldrb	r3, [r3, #20]
 8008b3e:	b25b      	sxtb	r3, r3
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	da14      	bge.n	8008b6e <f_read+0x19a>
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6a1a      	ldr	r2, [r3, #32]
 8008b48:	69bb      	ldr	r3, [r7, #24]
 8008b4a:	1ad3      	subs	r3, r2, r3
 8008b4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d90d      	bls.n	8008b6e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	6a1a      	ldr	r2, [r3, #32]
 8008b56:	69bb      	ldr	r3, [r7, #24]
 8008b58:	1ad3      	subs	r3, r2, r3
 8008b5a:	025b      	lsls	r3, r3, #9
 8008b5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b5e:	18d0      	adds	r0, r2, r3
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	3330      	adds	r3, #48	@ 0x30
 8008b64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008b68:	4619      	mov	r1, r3
 8008b6a:	f7fd ffb9 	bl	8006ae0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b70:	025b      	lsls	r3, r3, #9
 8008b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8008b74:	e050      	b.n	8008c18 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	6a1b      	ldr	r3, [r3, #32]
 8008b7a:	69ba      	ldr	r2, [r7, #24]
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	d02e      	beq.n	8008bde <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	7d1b      	ldrb	r3, [r3, #20]
 8008b84:	b25b      	sxtb	r3, r3
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	da18      	bge.n	8008bbc <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	7858      	ldrb	r0, [r3, #1]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	6a1a      	ldr	r2, [r3, #32]
 8008b98:	2301      	movs	r3, #1
 8008b9a:	f7fd fed9 	bl	8006950 <disk_write>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d004      	beq.n	8008bae <f_read+0x1da>
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	755a      	strb	r2, [r3, #21]
 8008baa:	2301      	movs	r3, #1
 8008bac:	e04d      	b.n	8008c4a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	7d1b      	ldrb	r3, [r3, #20]
 8008bb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bb6:	b2da      	uxtb	r2, r3
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	7858      	ldrb	r0, [r3, #1]
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	69ba      	ldr	r2, [r7, #24]
 8008bca:	f7fd fea1 	bl	8006910 <disk_read>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d004      	beq.n	8008bde <f_read+0x20a>
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	755a      	strb	r2, [r3, #21]
 8008bda:	2301      	movs	r3, #1
 8008bdc:	e035      	b.n	8008c4a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	69ba      	ldr	r2, [r7, #24]
 8008be2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	699b      	ldr	r3, [r3, #24]
 8008be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bec:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8008bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008bf2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d901      	bls.n	8008bfe <f_read+0x22a>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	699b      	ldr	r3, [r3, #24]
 8008c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c0c:	4413      	add	r3, r2
 8008c0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c10:	4619      	mov	r1, r3
 8008c12:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008c14:	f7fd ff64 	bl	8006ae0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008c18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c1c:	4413      	add	r3, r2
 8008c1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	699a      	ldr	r2, [r3, #24]
 8008c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c26:	441a      	add	r2, r3
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	619a      	str	r2, [r3, #24]
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c32:	441a      	add	r2, r3
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	601a      	str	r2, [r3, #0]
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c3c:	1ad3      	subs	r3, r2, r3
 8008c3e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	f47f af01 	bne.w	8008a4a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3738      	adds	r7, #56	@ 0x38
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}

08008c52 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b086      	sub	sp, #24
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f107 0208 	add.w	r2, r7, #8
 8008c60:	4611      	mov	r1, r2
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7ff fc80 	bl	8008568 <validate>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008c6c:	7dfb      	ldrb	r3, [r7, #23]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d168      	bne.n	8008d44 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	7d1b      	ldrb	r3, [r3, #20]
 8008c76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d062      	beq.n	8008d44 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	7d1b      	ldrb	r3, [r3, #20]
 8008c82:	b25b      	sxtb	r3, r3
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	da15      	bge.n	8008cb4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	7858      	ldrb	r0, [r3, #1]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6a1a      	ldr	r2, [r3, #32]
 8008c96:	2301      	movs	r3, #1
 8008c98:	f7fd fe5a 	bl	8006950 <disk_write>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d001      	beq.n	8008ca6 <f_sync+0x54>
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	e04f      	b.n	8008d46 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	7d1b      	ldrb	r3, [r3, #20]
 8008caa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008cae:	b2da      	uxtb	r2, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008cb4:	f7fd fe8a 	bl	80069cc <get_fattime>
 8008cb8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008cba:	68ba      	ldr	r2, [r7, #8]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	4610      	mov	r0, r2
 8008cc4:	f7fe f93a 	bl	8006f3c <move_window>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008ccc:	7dfb      	ldrb	r3, [r7, #23]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d138      	bne.n	8008d44 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cd6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	330b      	adds	r3, #11
 8008cdc:	781a      	ldrb	r2, [r3, #0]
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	330b      	adds	r3, #11
 8008ce2:	f042 0220 	orr.w	r2, r2, #32
 8008ce6:	b2d2      	uxtb	r2, r2
 8008ce8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6818      	ldr	r0, [r3, #0]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	68f9      	ldr	r1, [r7, #12]
 8008cf6:	f7fe fe44 	bl	8007982 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f103 021c 	add.w	r2, r3, #28
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	4619      	mov	r1, r3
 8008d06:	4610      	mov	r0, r2
 8008d08:	f7fd febe 	bl	8006a88 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	3316      	adds	r3, #22
 8008d10:	6939      	ldr	r1, [r7, #16]
 8008d12:	4618      	mov	r0, r3
 8008d14:	f7fd feb8 	bl	8006a88 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	3312      	adds	r3, #18
 8008d1c:	2100      	movs	r1, #0
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f7fd fe97 	bl	8006a52 <st_word>
					fs->wflag = 1;
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	2201      	movs	r2, #1
 8008d28:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f7fe f933 	bl	8006f98 <sync_fs>
 8008d32:	4603      	mov	r3, r0
 8008d34:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	7d1b      	ldrb	r3, [r3, #20]
 8008d3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d3e:	b2da      	uxtb	r2, r3
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008d44:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3718      	adds	r7, #24
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}

08008d4e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008d4e:	b580      	push	{r7, lr}
 8008d50:	b084      	sub	sp, #16
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f7ff ff7b 	bl	8008c52 <f_sync>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008d60:	7bfb      	ldrb	r3, [r7, #15]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d118      	bne.n	8008d98 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f107 0208 	add.w	r2, r7, #8
 8008d6c:	4611      	mov	r1, r2
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7ff fbfa 	bl	8008568 <validate>
 8008d74:	4603      	mov	r3, r0
 8008d76:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008d78:	7bfb      	ldrb	r3, [r7, #15]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d10c      	bne.n	8008d98 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	691b      	ldr	r3, [r3, #16]
 8008d82:	4618      	mov	r0, r3
 8008d84:	f7fe f836 	bl	8006df4 <dec_lock>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008d8c:	7bfb      	ldrb	r3, [r7, #15]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d102      	bne.n	8008d98 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2200      	movs	r2, #0
 8008d96:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3710      	adds	r7, #16
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}

08008da2 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b086      	sub	sp, #24
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
 8008daa:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d101      	bne.n	8008db6 <f_opendir+0x14>
 8008db2:	2309      	movs	r3, #9
 8008db4:	e064      	b.n	8008e80 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8008dba:	f107 010c 	add.w	r1, r7, #12
 8008dbe:	463b      	mov	r3, r7
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7ff f984 	bl	80080d0 <find_volume>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008dcc:	7dfb      	ldrb	r3, [r7, #23]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d14f      	bne.n	8008e72 <f_opendir+0xd0>
		obj->fs = fs;
 8008dd2:	68fa      	ldr	r2, [r7, #12]
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	4619      	mov	r1, r3
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f7ff f86b 	bl	8007eb8 <follow_path>
 8008de2:	4603      	mov	r3, r0
 8008de4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8008de6:	7dfb      	ldrb	r3, [r7, #23]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d13d      	bne.n	8008e68 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008df2:	b25b      	sxtb	r3, r3
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	db12      	blt.n	8008e1e <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	799b      	ldrb	r3, [r3, #6]
 8008dfc:	f003 0310 	and.w	r3, r3, #16
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d00a      	beq.n	8008e1a <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8008e04:	68fa      	ldr	r2, [r7, #12]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6a1b      	ldr	r3, [r3, #32]
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	4610      	mov	r0, r2
 8008e0e:	f7fe fd99 	bl	8007944 <ld_clust>
 8008e12:	4602      	mov	r2, r0
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	609a      	str	r2, [r3, #8]
 8008e18:	e001      	b.n	8008e1e <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8008e1a:	2305      	movs	r3, #5
 8008e1c:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8008e1e:	7dfb      	ldrb	r3, [r7, #23]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d121      	bne.n	8008e68 <f_opendir+0xc6>
				obj->id = fs->id;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	88da      	ldrh	r2, [r3, #6]
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8008e2c:	2100      	movs	r1, #0
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f7fe fc01 	bl	8007636 <dir_sdi>
 8008e34:	4603      	mov	r3, r0
 8008e36:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8008e38:	7dfb      	ldrb	r3, [r7, #23]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d114      	bne.n	8008e68 <f_opendir+0xc6>
					if (obj->sclust) {
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d00d      	beq.n	8008e62 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8008e46:	2100      	movs	r1, #0
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f7fd ff45 	bl	8006cd8 <inc_lock>
 8008e4e:	4602      	mov	r2, r0
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	691b      	ldr	r3, [r3, #16]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d105      	bne.n	8008e68 <f_opendir+0xc6>
 8008e5c:	2312      	movs	r3, #18
 8008e5e:	75fb      	strb	r3, [r7, #23]
 8008e60:	e002      	b.n	8008e68 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	2200      	movs	r2, #0
 8008e66:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8008e68:	7dfb      	ldrb	r3, [r7, #23]
 8008e6a:	2b04      	cmp	r3, #4
 8008e6c:	d101      	bne.n	8008e72 <f_opendir+0xd0>
 8008e6e:	2305      	movs	r3, #5
 8008e70:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8008e72:	7dfb      	ldrb	r3, [r7, #23]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d002      	beq.n	8008e7e <f_opendir+0xdc>
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3718      	adds	r7, #24
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b084      	sub	sp, #16
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f107 0208 	add.w	r2, r7, #8
 8008e96:	4611      	mov	r1, r2
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f7ff fb65 	bl	8008568 <validate>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008ea2:	7bfb      	ldrb	r3, [r7, #15]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d110      	bne.n	8008eca <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	691b      	ldr	r3, [r3, #16]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d006      	beq.n	8008ebe <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	691b      	ldr	r3, [r3, #16]
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7fd ff9d 	bl	8006df4 <dec_lock>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8008ebe:	7bfb      	ldrb	r3, [r7, #15]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d102      	bne.n	8008eca <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8008eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3710      	adds	r7, #16
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f107 0208 	add.w	r2, r7, #8
 8008ee4:	4611      	mov	r1, r2
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7ff fb3e 	bl	8008568 <validate>
 8008eec:	4603      	mov	r3, r0
 8008eee:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008ef0:	7bfb      	ldrb	r3, [r7, #15]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d126      	bne.n	8008f44 <f_readdir+0x70>
		if (!fno) {
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d106      	bne.n	8008f0a <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8008efc:	2100      	movs	r1, #0
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f7fe fb99 	bl	8007636 <dir_sdi>
 8008f04:	4603      	mov	r3, r0
 8008f06:	73fb      	strb	r3, [r7, #15]
 8008f08:	e01c      	b.n	8008f44 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8008f0a:	2100      	movs	r1, #0
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f7fe fd58 	bl	80079c2 <dir_read>
 8008f12:	4603      	mov	r3, r0
 8008f14:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8008f16:	7bfb      	ldrb	r3, [r7, #15]
 8008f18:	2b04      	cmp	r3, #4
 8008f1a:	d101      	bne.n	8008f20 <f_readdir+0x4c>
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8008f20:	7bfb      	ldrb	r3, [r7, #15]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d10e      	bne.n	8008f44 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8008f26:	6839      	ldr	r1, [r7, #0]
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f7fe fe2e 	bl	8007b8a <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8008f2e:	2100      	movs	r1, #0
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f7fe fbfb 	bl	800772c <dir_next>
 8008f36:	4603      	mov	r3, r0
 8008f38:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8008f3a:	7bfb      	ldrb	r3, [r7, #15]
 8008f3c:	2b04      	cmp	r3, #4
 8008f3e:	d101      	bne.n	8008f44 <f_readdir+0x70>
 8008f40:	2300      	movs	r3, #0
 8008f42:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8008f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3710      	adds	r7, #16
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}

08008f4e <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 8008f4e:	b580      	push	{r7, lr}
 8008f50:	b084      	sub	sp, #16
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
 8008f56:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 8008f58:	6839      	ldr	r1, [r7, #0]
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f7ff ffba 	bl	8008ed4 <f_readdir>
 8008f60:	4603      	mov	r3, r0
 8008f62:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 8008f64:	7bfb      	ldrb	r3, [r7, #15]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d114      	bne.n	8008f94 <f_findnext+0x46>
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d011      	beq.n	8008f94 <f_findnext+0x46>
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	7a5b      	ldrb	r3, [r3, #9]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d00d      	beq.n	8008f94 <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	f103 0109 	add.w	r1, r3, #9
 8008f82:	2300      	movs	r3, #0
 8008f84:	2200      	movs	r2, #0
 8008f86:	f7fe fe87 	bl	8007c98 <pattern_matching>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d100      	bne.n	8008f92 <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 8008f90:	e7e2      	b.n	8008f58 <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8008f92:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 8008f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3710      	adds	r7, #16
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}

08008f9e <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 8008f9e:	b580      	push	{r7, lr}
 8008fa0:	b086      	sub	sp, #24
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	60f8      	str	r0, [r7, #12]
 8008fa6:	60b9      	str	r1, [r7, #8]
 8008fa8:	607a      	str	r2, [r7, #4]
 8008faa:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	683a      	ldr	r2, [r7, #0]
 8008fb0:	631a      	str	r2, [r3, #48]	@ 0x30
	res = f_opendir(dp, path);		/* Open the target directory */
 8008fb2:	6879      	ldr	r1, [r7, #4]
 8008fb4:	68f8      	ldr	r0, [r7, #12]
 8008fb6:	f7ff fef4 	bl	8008da2 <f_opendir>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008fbe:	7dfb      	ldrb	r3, [r7, #23]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d105      	bne.n	8008fd0 <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 8008fc4:	68b9      	ldr	r1, [r7, #8]
 8008fc6:	68f8      	ldr	r0, [r7, #12]
 8008fc8:	f7ff ffc1 	bl	8008f4e <f_findnext>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 8008fd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3718      	adds	r7, #24
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
	...

08008fdc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b087      	sub	sp, #28
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	60b9      	str	r1, [r7, #8]
 8008fe6:	4613      	mov	r3, r2
 8008fe8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008fea:	2301      	movs	r3, #1
 8008fec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008ff2:	4b1f      	ldr	r3, [pc, #124]	@ (8009070 <FATFS_LinkDriverEx+0x94>)
 8008ff4:	7b9b      	ldrb	r3, [r3, #14]
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d831      	bhi.n	8009060 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008ffc:	4b1c      	ldr	r3, [pc, #112]	@ (8009070 <FATFS_LinkDriverEx+0x94>)
 8008ffe:	7b9b      	ldrb	r3, [r3, #14]
 8009000:	b2db      	uxtb	r3, r3
 8009002:	461a      	mov	r2, r3
 8009004:	4b1a      	ldr	r3, [pc, #104]	@ (8009070 <FATFS_LinkDriverEx+0x94>)
 8009006:	2100      	movs	r1, #0
 8009008:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800900a:	4b19      	ldr	r3, [pc, #100]	@ (8009070 <FATFS_LinkDriverEx+0x94>)
 800900c:	7b9b      	ldrb	r3, [r3, #14]
 800900e:	b2db      	uxtb	r3, r3
 8009010:	4a17      	ldr	r2, [pc, #92]	@ (8009070 <FATFS_LinkDriverEx+0x94>)
 8009012:	009b      	lsls	r3, r3, #2
 8009014:	4413      	add	r3, r2
 8009016:	68fa      	ldr	r2, [r7, #12]
 8009018:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800901a:	4b15      	ldr	r3, [pc, #84]	@ (8009070 <FATFS_LinkDriverEx+0x94>)
 800901c:	7b9b      	ldrb	r3, [r3, #14]
 800901e:	b2db      	uxtb	r3, r3
 8009020:	461a      	mov	r2, r3
 8009022:	4b13      	ldr	r3, [pc, #76]	@ (8009070 <FATFS_LinkDriverEx+0x94>)
 8009024:	4413      	add	r3, r2
 8009026:	79fa      	ldrb	r2, [r7, #7]
 8009028:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 800902a:	4b11      	ldr	r3, [pc, #68]	@ (8009070 <FATFS_LinkDriverEx+0x94>)
 800902c:	7b9b      	ldrb	r3, [r3, #14]
 800902e:	b2db      	uxtb	r3, r3
 8009030:	1c5a      	adds	r2, r3, #1
 8009032:	b2d1      	uxtb	r1, r2
 8009034:	4a0e      	ldr	r2, [pc, #56]	@ (8009070 <FATFS_LinkDriverEx+0x94>)
 8009036:	7391      	strb	r1, [r2, #14]
 8009038:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800903a:	7dbb      	ldrb	r3, [r7, #22]
 800903c:	3330      	adds	r3, #48	@ 0x30
 800903e:	b2da      	uxtb	r2, r3
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	3301      	adds	r3, #1
 8009048:	223a      	movs	r2, #58	@ 0x3a
 800904a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	3302      	adds	r3, #2
 8009050:	222f      	movs	r2, #47	@ 0x2f
 8009052:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	3303      	adds	r3, #3
 8009058:	2200      	movs	r2, #0
 800905a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800905c:	2300      	movs	r3, #0
 800905e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009060:	7dfb      	ldrb	r3, [r7, #23]
}
 8009062:	4618      	mov	r0, r3
 8009064:	371c      	adds	r7, #28
 8009066:	46bd      	mov	sp, r7
 8009068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906c:	4770      	bx	lr
 800906e:	bf00      	nop
 8009070:	20000870 	.word	0x20000870

08009074 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800907e:	2200      	movs	r2, #0
 8009080:	6839      	ldr	r1, [r7, #0]
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f7ff ffaa 	bl	8008fdc <FATFS_LinkDriverEx>
 8009088:	4603      	mov	r3, r0
}
 800908a:	4618      	mov	r0, r3
 800908c:	3708      	adds	r7, #8
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}

08009092 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8009092:	b580      	push	{r7, lr}
 8009094:	b082      	sub	sp, #8
 8009096:	af00      	add	r7, sp, #0
 8009098:	4603      	mov	r3, r0
 800909a:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 800909c:	20c8      	movs	r0, #200	@ 0xc8
 800909e:	f000 fc31 	bl	8009904 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80090a2:	f000 fa79 	bl	8009598 <ft5336_I2C_InitializeIfRequired>
}
 80090a6:	bf00      	nop
 80090a8:	3708      	adds	r7, #8
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}

080090ae <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 80090ae:	b480      	push	{r7}
 80090b0:	b083      	sub	sp, #12
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	4603      	mov	r3, r0
 80090b6:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80090b8:	bf00      	nop
 80090ba:	370c      	adds	r7, #12
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr

080090c4 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	4603      	mov	r3, r0
 80090cc:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 80090ce:	2300      	movs	r3, #0
 80090d0:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 80090d2:	2300      	movs	r3, #0
 80090d4:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 80090d6:	2300      	movs	r3, #0
 80090d8:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80090da:	f000 fa5d 	bl	8009598 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80090de:	2300      	movs	r3, #0
 80090e0:	73fb      	strb	r3, [r7, #15]
 80090e2:	e010      	b.n	8009106 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80090e4:	88fb      	ldrh	r3, [r7, #6]
 80090e6:	b2db      	uxtb	r3, r3
 80090e8:	21a8      	movs	r1, #168	@ 0xa8
 80090ea:	4618      	mov	r0, r3
 80090ec:	f000 fbec 	bl	80098c8 <TS_IO_Read>
 80090f0:	4603      	mov	r3, r0
 80090f2:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 80090f4:	7b7b      	ldrb	r3, [r7, #13]
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	2b51      	cmp	r3, #81	@ 0x51
 80090fa:	d101      	bne.n	8009100 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 80090fc:	2301      	movs	r3, #1
 80090fe:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8009100:	7bfb      	ldrb	r3, [r7, #15]
 8009102:	3301      	adds	r3, #1
 8009104:	73fb      	strb	r3, [r7, #15]
 8009106:	7bfb      	ldrb	r3, [r7, #15]
 8009108:	2b02      	cmp	r3, #2
 800910a:	d802      	bhi.n	8009112 <ft5336_ReadID+0x4e>
 800910c:	7bbb      	ldrb	r3, [r7, #14]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d0e8      	beq.n	80090e4 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8009112:	7b7b      	ldrb	r3, [r7, #13]
 8009114:	b2db      	uxtb	r3, r3
}
 8009116:	4618      	mov	r0, r3
 8009118:	3710      	adds	r7, #16
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}

0800911e <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 800911e:	b580      	push	{r7, lr}
 8009120:	b082      	sub	sp, #8
 8009122:	af00      	add	r7, sp, #0
 8009124:	4603      	mov	r3, r0
 8009126:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8009128:	88fb      	ldrh	r3, [r7, #6]
 800912a:	4618      	mov	r0, r3
 800912c:	f000 fa44 	bl	80095b8 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8009130:	88fb      	ldrh	r3, [r7, #6]
 8009132:	4618      	mov	r0, r3
 8009134:	f000 f932 	bl	800939c <ft5336_TS_DisableIT>
}
 8009138:	bf00      	nop
 800913a:	3708      	adds	r7, #8
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	4603      	mov	r3, r0
 8009148:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800914a:	2300      	movs	r3, #0
 800914c:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800914e:	88fb      	ldrh	r3, [r7, #6]
 8009150:	b2db      	uxtb	r3, r3
 8009152:	2102      	movs	r1, #2
 8009154:	4618      	mov	r0, r3
 8009156:	f000 fbb7 	bl	80098c8 <TS_IO_Read>
 800915a:	4603      	mov	r3, r0
 800915c:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800915e:	7bfb      	ldrb	r3, [r7, #15]
 8009160:	b2db      	uxtb	r3, r3
 8009162:	f003 030f 	and.w	r3, r3, #15
 8009166:	b2db      	uxtb	r3, r3
 8009168:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800916a:	7bfb      	ldrb	r3, [r7, #15]
 800916c:	b2db      	uxtb	r3, r3
 800916e:	2b05      	cmp	r3, #5
 8009170:	d901      	bls.n	8009176 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8009172:	2300      	movs	r3, #0
 8009174:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8009176:	7bfb      	ldrb	r3, [r7, #15]
 8009178:	b2da      	uxtb	r2, r3
 800917a:	4b05      	ldr	r3, [pc, #20]	@ (8009190 <ft5336_TS_DetectTouch+0x50>)
 800917c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800917e:	4b04      	ldr	r3, [pc, #16]	@ (8009190 <ft5336_TS_DetectTouch+0x50>)
 8009180:	2200      	movs	r2, #0
 8009182:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8009184:	7bfb      	ldrb	r3, [r7, #15]
 8009186:	b2db      	uxtb	r3, r3
}
 8009188:	4618      	mov	r0, r3
 800918a:	3710      	adds	r7, #16
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}
 8009190:	20000880 	.word	0x20000880

08009194 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b086      	sub	sp, #24
 8009198:	af00      	add	r7, sp, #0
 800919a:	4603      	mov	r3, r0
 800919c:	60b9      	str	r1, [r7, #8]
 800919e:	607a      	str	r2, [r7, #4]
 80091a0:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80091a2:	2300      	movs	r3, #0
 80091a4:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80091a6:	2300      	movs	r3, #0
 80091a8:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 80091aa:	2300      	movs	r3, #0
 80091ac:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 80091ae:	2300      	movs	r3, #0
 80091b0:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 80091b2:	2300      	movs	r3, #0
 80091b4:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80091b6:	4b6d      	ldr	r3, [pc, #436]	@ (800936c <ft5336_TS_GetXY+0x1d8>)
 80091b8:	789a      	ldrb	r2, [r3, #2]
 80091ba:	4b6c      	ldr	r3, [pc, #432]	@ (800936c <ft5336_TS_GetXY+0x1d8>)
 80091bc:	785b      	ldrb	r3, [r3, #1]
 80091be:	429a      	cmp	r2, r3
 80091c0:	f080 80cf 	bcs.w	8009362 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 80091c4:	4b69      	ldr	r3, [pc, #420]	@ (800936c <ft5336_TS_GetXY+0x1d8>)
 80091c6:	789b      	ldrb	r3, [r3, #2]
 80091c8:	2b09      	cmp	r3, #9
 80091ca:	d871      	bhi.n	80092b0 <ft5336_TS_GetXY+0x11c>
 80091cc:	a201      	add	r2, pc, #4	@ (adr r2, 80091d4 <ft5336_TS_GetXY+0x40>)
 80091ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091d2:	bf00      	nop
 80091d4:	080091fd 	.word	0x080091fd
 80091d8:	0800920f 	.word	0x0800920f
 80091dc:	08009221 	.word	0x08009221
 80091e0:	08009233 	.word	0x08009233
 80091e4:	08009245 	.word	0x08009245
 80091e8:	08009257 	.word	0x08009257
 80091ec:	08009269 	.word	0x08009269
 80091f0:	0800927b 	.word	0x0800927b
 80091f4:	0800928d 	.word	0x0800928d
 80091f8:	0800929f 	.word	0x0800929f
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 80091fc:	2304      	movs	r3, #4
 80091fe:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8009200:	2303      	movs	r3, #3
 8009202:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8009204:	2306      	movs	r3, #6
 8009206:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8009208:	2305      	movs	r3, #5
 800920a:	753b      	strb	r3, [r7, #20]
      break;
 800920c:	e051      	b.n	80092b2 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800920e:	230a      	movs	r3, #10
 8009210:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8009212:	2309      	movs	r3, #9
 8009214:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8009216:	230c      	movs	r3, #12
 8009218:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800921a:	230b      	movs	r3, #11
 800921c:	753b      	strb	r3, [r7, #20]
      break;
 800921e:	e048      	b.n	80092b2 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8009220:	2310      	movs	r3, #16
 8009222:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8009224:	230f      	movs	r3, #15
 8009226:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8009228:	2312      	movs	r3, #18
 800922a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 800922c:	2311      	movs	r3, #17
 800922e:	753b      	strb	r3, [r7, #20]
      break;
 8009230:	e03f      	b.n	80092b2 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8009232:	2316      	movs	r3, #22
 8009234:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8009236:	2315      	movs	r3, #21
 8009238:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800923a:	2318      	movs	r3, #24
 800923c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800923e:	2317      	movs	r3, #23
 8009240:	753b      	strb	r3, [r7, #20]
      break;
 8009242:	e036      	b.n	80092b2 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8009244:	231c      	movs	r3, #28
 8009246:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8009248:	231b      	movs	r3, #27
 800924a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 800924c:	231e      	movs	r3, #30
 800924e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8009250:	231d      	movs	r3, #29
 8009252:	753b      	strb	r3, [r7, #20]
      break;
 8009254:	e02d      	b.n	80092b2 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8009256:	2322      	movs	r3, #34	@ 0x22
 8009258:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800925a:	2321      	movs	r3, #33	@ 0x21
 800925c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800925e:	2324      	movs	r3, #36	@ 0x24
 8009260:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8009262:	2323      	movs	r3, #35	@ 0x23
 8009264:	753b      	strb	r3, [r7, #20]
      break;
 8009266:	e024      	b.n	80092b2 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8009268:	2328      	movs	r3, #40	@ 0x28
 800926a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 800926c:	2327      	movs	r3, #39	@ 0x27
 800926e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8009270:	232a      	movs	r3, #42	@ 0x2a
 8009272:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8009274:	2329      	movs	r3, #41	@ 0x29
 8009276:	753b      	strb	r3, [r7, #20]
      break;
 8009278:	e01b      	b.n	80092b2 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800927a:	232e      	movs	r3, #46	@ 0x2e
 800927c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800927e:	232d      	movs	r3, #45	@ 0x2d
 8009280:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8009282:	2330      	movs	r3, #48	@ 0x30
 8009284:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8009286:	232f      	movs	r3, #47	@ 0x2f
 8009288:	753b      	strb	r3, [r7, #20]
      break;
 800928a:	e012      	b.n	80092b2 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 800928c:	2334      	movs	r3, #52	@ 0x34
 800928e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8009290:	2333      	movs	r3, #51	@ 0x33
 8009292:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8009294:	2336      	movs	r3, #54	@ 0x36
 8009296:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8009298:	2335      	movs	r3, #53	@ 0x35
 800929a:	753b      	strb	r3, [r7, #20]
      break;
 800929c:	e009      	b.n	80092b2 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 800929e:	233a      	movs	r3, #58	@ 0x3a
 80092a0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80092a2:	2339      	movs	r3, #57	@ 0x39
 80092a4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80092a6:	233c      	movs	r3, #60	@ 0x3c
 80092a8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 80092aa:	233b      	movs	r3, #59	@ 0x3b
 80092ac:	753b      	strb	r3, [r7, #20]
      break;
 80092ae:	e000      	b.n	80092b2 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 80092b0:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80092b2:	89fb      	ldrh	r3, [r7, #14]
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	7dfa      	ldrb	r2, [r7, #23]
 80092b8:	4611      	mov	r1, r2
 80092ba:	4618      	mov	r0, r3
 80092bc:	f000 fb04 	bl	80098c8 <TS_IO_Read>
 80092c0:	4603      	mov	r3, r0
 80092c2:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80092c4:	7cfb      	ldrb	r3, [r7, #19]
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	461a      	mov	r2, r3
 80092ca:	4b29      	ldr	r3, [pc, #164]	@ (8009370 <ft5336_TS_GetXY+0x1dc>)
 80092cc:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80092ce:	89fb      	ldrh	r3, [r7, #14]
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	7dba      	ldrb	r2, [r7, #22]
 80092d4:	4611      	mov	r1, r2
 80092d6:	4618      	mov	r0, r3
 80092d8:	f000 faf6 	bl	80098c8 <TS_IO_Read>
 80092dc:	4603      	mov	r3, r0
 80092de:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80092e0:	7cfb      	ldrb	r3, [r7, #19]
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	021b      	lsls	r3, r3, #8
 80092e6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80092ea:	b21a      	sxth	r2, r3
 80092ec:	4b20      	ldr	r3, [pc, #128]	@ (8009370 <ft5336_TS_GetXY+0x1dc>)
 80092ee:	881b      	ldrh	r3, [r3, #0]
 80092f0:	b21b      	sxth	r3, r3
 80092f2:	4313      	orrs	r3, r2
 80092f4:	b21b      	sxth	r3, r3
 80092f6:	b29a      	uxth	r2, r3
 80092f8:	4b1d      	ldr	r3, [pc, #116]	@ (8009370 <ft5336_TS_GetXY+0x1dc>)
 80092fa:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 80092fc:	4b1c      	ldr	r3, [pc, #112]	@ (8009370 <ft5336_TS_GetXY+0x1dc>)
 80092fe:	881a      	ldrh	r2, [r3, #0]
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8009304:	89fb      	ldrh	r3, [r7, #14]
 8009306:	b2db      	uxtb	r3, r3
 8009308:	7d7a      	ldrb	r2, [r7, #21]
 800930a:	4611      	mov	r1, r2
 800930c:	4618      	mov	r0, r3
 800930e:	f000 fadb 	bl	80098c8 <TS_IO_Read>
 8009312:	4603      	mov	r3, r0
 8009314:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8009316:	7cfb      	ldrb	r3, [r7, #19]
 8009318:	b2db      	uxtb	r3, r3
 800931a:	461a      	mov	r2, r3
 800931c:	4b14      	ldr	r3, [pc, #80]	@ (8009370 <ft5336_TS_GetXY+0x1dc>)
 800931e:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8009320:	89fb      	ldrh	r3, [r7, #14]
 8009322:	b2db      	uxtb	r3, r3
 8009324:	7d3a      	ldrb	r2, [r7, #20]
 8009326:	4611      	mov	r1, r2
 8009328:	4618      	mov	r0, r3
 800932a:	f000 facd 	bl	80098c8 <TS_IO_Read>
 800932e:	4603      	mov	r3, r0
 8009330:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8009332:	7cfb      	ldrb	r3, [r7, #19]
 8009334:	b2db      	uxtb	r3, r3
 8009336:	021b      	lsls	r3, r3, #8
 8009338:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800933c:	b21a      	sxth	r2, r3
 800933e:	4b0c      	ldr	r3, [pc, #48]	@ (8009370 <ft5336_TS_GetXY+0x1dc>)
 8009340:	881b      	ldrh	r3, [r3, #0]
 8009342:	b21b      	sxth	r3, r3
 8009344:	4313      	orrs	r3, r2
 8009346:	b21b      	sxth	r3, r3
 8009348:	b29a      	uxth	r2, r3
 800934a:	4b09      	ldr	r3, [pc, #36]	@ (8009370 <ft5336_TS_GetXY+0x1dc>)
 800934c:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800934e:	4b08      	ldr	r3, [pc, #32]	@ (8009370 <ft5336_TS_GetXY+0x1dc>)
 8009350:	881a      	ldrh	r2, [r3, #0]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8009356:	4b05      	ldr	r3, [pc, #20]	@ (800936c <ft5336_TS_GetXY+0x1d8>)
 8009358:	789b      	ldrb	r3, [r3, #2]
 800935a:	3301      	adds	r3, #1
 800935c:	b2da      	uxtb	r2, r3
 800935e:	4b03      	ldr	r3, [pc, #12]	@ (800936c <ft5336_TS_GetXY+0x1d8>)
 8009360:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8009362:	bf00      	nop
 8009364:	3718      	adds	r7, #24
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	20000880 	.word	0x20000880
 8009370:	20000884 	.word	0x20000884

08009374 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	4603      	mov	r3, r0
 800937c:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800937e:	2300      	movs	r3, #0
 8009380:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8009382:	2301      	movs	r3, #1
 8009384:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8009386:	88fb      	ldrh	r3, [r7, #6]
 8009388:	b2db      	uxtb	r3, r3
 800938a:	7bfa      	ldrb	r2, [r7, #15]
 800938c:	21a4      	movs	r1, #164	@ 0xa4
 800938e:	4618      	mov	r0, r3
 8009390:	f000 fa80 	bl	8009894 <TS_IO_Write>
}
 8009394:	bf00      	nop
 8009396:	3710      	adds	r7, #16
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	4603      	mov	r3, r0
 80093a4:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80093a6:	2300      	movs	r3, #0
 80093a8:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80093aa:	2300      	movs	r3, #0
 80093ac:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80093ae:	88fb      	ldrh	r3, [r7, #6]
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	7bfa      	ldrb	r2, [r7, #15]
 80093b4:	21a4      	movs	r1, #164	@ 0xa4
 80093b6:	4618      	mov	r0, r3
 80093b8:	f000 fa6c 	bl	8009894 <TS_IO_Write>
}
 80093bc:	bf00      	nop
 80093be:	3710      	adds	r7, #16
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b083      	sub	sp, #12
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	4603      	mov	r3, r0
 80093cc:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80093ce:	2300      	movs	r3, #0
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	370c      	adds	r7, #12
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr

080093dc <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80093dc:	b480      	push	{r7}
 80093de:	b083      	sub	sp, #12
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	4603      	mov	r3, r0
 80093e4:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 80093e6:	bf00      	nop
 80093e8:	370c      	adds	r7, #12
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr

080093f2 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b084      	sub	sp, #16
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	4603      	mov	r3, r0
 80093fa:	6039      	str	r1, [r7, #0]
 80093fc:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 80093fe:	2300      	movs	r3, #0
 8009400:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8009402:	88fb      	ldrh	r3, [r7, #6]
 8009404:	b2db      	uxtb	r3, r3
 8009406:	2101      	movs	r1, #1
 8009408:	4618      	mov	r0, r3
 800940a:	f000 fa5d 	bl	80098c8 <TS_IO_Read>
 800940e:	4603      	mov	r3, r0
 8009410:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8009412:	7bfb      	ldrb	r3, [r7, #15]
 8009414:	b2db      	uxtb	r3, r3
 8009416:	461a      	mov	r2, r3
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	601a      	str	r2, [r3, #0]
}
 800941c:	bf00      	nop
 800941e:	3710      	adds	r7, #16
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b086      	sub	sp, #24
 8009428:	af00      	add	r7, sp, #0
 800942a:	60b9      	str	r1, [r7, #8]
 800942c:	607a      	str	r2, [r7, #4]
 800942e:	603b      	str	r3, [r7, #0]
 8009430:	4603      	mov	r3, r0
 8009432:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8009434:	2300      	movs	r3, #0
 8009436:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8009438:	2300      	movs	r3, #0
 800943a:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 800943c:	2300      	movs	r3, #0
 800943e:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8009440:	2300      	movs	r3, #0
 8009442:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8009444:	4b4d      	ldr	r3, [pc, #308]	@ (800957c <ft5336_TS_GetTouchInfo+0x158>)
 8009446:	785b      	ldrb	r3, [r3, #1]
 8009448:	461a      	mov	r2, r3
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	4293      	cmp	r3, r2
 800944e:	f080 8090 	bcs.w	8009572 <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	2b09      	cmp	r3, #9
 8009456:	d85d      	bhi.n	8009514 <ft5336_TS_GetTouchInfo+0xf0>
 8009458:	a201      	add	r2, pc, #4	@ (adr r2, 8009460 <ft5336_TS_GetTouchInfo+0x3c>)
 800945a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800945e:	bf00      	nop
 8009460:	08009489 	.word	0x08009489
 8009464:	08009497 	.word	0x08009497
 8009468:	080094a5 	.word	0x080094a5
 800946c:	080094b3 	.word	0x080094b3
 8009470:	080094c1 	.word	0x080094c1
 8009474:	080094cf 	.word	0x080094cf
 8009478:	080094dd 	.word	0x080094dd
 800947c:	080094eb 	.word	0x080094eb
 8009480:	080094f9 	.word	0x080094f9
 8009484:	08009507 	.word	0x08009507
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8009488:	2303      	movs	r3, #3
 800948a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 800948c:	2307      	movs	r3, #7
 800948e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8009490:	2308      	movs	r3, #8
 8009492:	757b      	strb	r3, [r7, #21]
      break;
 8009494:	e03f      	b.n	8009516 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8009496:	2309      	movs	r3, #9
 8009498:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 800949a:	230d      	movs	r3, #13
 800949c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 800949e:	230e      	movs	r3, #14
 80094a0:	757b      	strb	r3, [r7, #21]
      break;
 80094a2:	e038      	b.n	8009516 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 80094a4:	230f      	movs	r3, #15
 80094a6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 80094a8:	2313      	movs	r3, #19
 80094aa:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 80094ac:	2314      	movs	r3, #20
 80094ae:	757b      	strb	r3, [r7, #21]
      break;
 80094b0:	e031      	b.n	8009516 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 80094b2:	2315      	movs	r3, #21
 80094b4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 80094b6:	2319      	movs	r3, #25
 80094b8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 80094ba:	231a      	movs	r3, #26
 80094bc:	757b      	strb	r3, [r7, #21]
      break;
 80094be:	e02a      	b.n	8009516 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 80094c0:	231b      	movs	r3, #27
 80094c2:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 80094c4:	231f      	movs	r3, #31
 80094c6:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 80094c8:	2320      	movs	r3, #32
 80094ca:	757b      	strb	r3, [r7, #21]
      break;
 80094cc:	e023      	b.n	8009516 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 80094ce:	2321      	movs	r3, #33	@ 0x21
 80094d0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 80094d2:	2325      	movs	r3, #37	@ 0x25
 80094d4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 80094d6:	2326      	movs	r3, #38	@ 0x26
 80094d8:	757b      	strb	r3, [r7, #21]
      break;
 80094da:	e01c      	b.n	8009516 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 80094dc:	2327      	movs	r3, #39	@ 0x27
 80094de:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 80094e0:	232b      	movs	r3, #43	@ 0x2b
 80094e2:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 80094e4:	232c      	movs	r3, #44	@ 0x2c
 80094e6:	757b      	strb	r3, [r7, #21]
      break;
 80094e8:	e015      	b.n	8009516 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 80094ea:	232d      	movs	r3, #45	@ 0x2d
 80094ec:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 80094ee:	2331      	movs	r3, #49	@ 0x31
 80094f0:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 80094f2:	2332      	movs	r3, #50	@ 0x32
 80094f4:	757b      	strb	r3, [r7, #21]
      break;
 80094f6:	e00e      	b.n	8009516 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 80094f8:	2333      	movs	r3, #51	@ 0x33
 80094fa:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 80094fc:	2337      	movs	r3, #55	@ 0x37
 80094fe:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8009500:	2338      	movs	r3, #56	@ 0x38
 8009502:	757b      	strb	r3, [r7, #21]
      break;
 8009504:	e007      	b.n	8009516 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8009506:	2339      	movs	r3, #57	@ 0x39
 8009508:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 800950a:	233d      	movs	r3, #61	@ 0x3d
 800950c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 800950e:	233e      	movs	r3, #62	@ 0x3e
 8009510:	757b      	strb	r3, [r7, #21]
      break;
 8009512:	e000      	b.n	8009516 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8009514:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8009516:	89fb      	ldrh	r3, [r7, #14]
 8009518:	b2db      	uxtb	r3, r3
 800951a:	7dfa      	ldrb	r2, [r7, #23]
 800951c:	4611      	mov	r1, r2
 800951e:	4618      	mov	r0, r3
 8009520:	f000 f9d2 	bl	80098c8 <TS_IO_Read>
 8009524:	4603      	mov	r3, r0
 8009526:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8009528:	7d3b      	ldrb	r3, [r7, #20]
 800952a:	b2db      	uxtb	r3, r3
 800952c:	119b      	asrs	r3, r3, #6
 800952e:	f003 0203 	and.w	r2, r3, #3
 8009532:	6a3b      	ldr	r3, [r7, #32]
 8009534:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8009536:	89fb      	ldrh	r3, [r7, #14]
 8009538:	b2db      	uxtb	r3, r3
 800953a:	7dba      	ldrb	r2, [r7, #22]
 800953c:	4611      	mov	r1, r2
 800953e:	4618      	mov	r0, r3
 8009540:	f000 f9c2 	bl	80098c8 <TS_IO_Read>
 8009544:	4603      	mov	r3, r0
 8009546:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8009548:	7d3b      	ldrb	r3, [r7, #20]
 800954a:	b2db      	uxtb	r3, r3
 800954c:	461a      	mov	r2, r3
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8009552:	89fb      	ldrh	r3, [r7, #14]
 8009554:	b2db      	uxtb	r3, r3
 8009556:	7d7a      	ldrb	r2, [r7, #21]
 8009558:	4611      	mov	r1, r2
 800955a:	4618      	mov	r0, r3
 800955c:	f000 f9b4 	bl	80098c8 <TS_IO_Read>
 8009560:	4603      	mov	r3, r0
 8009562:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8009564:	7d3b      	ldrb	r3, [r7, #20]
 8009566:	b2db      	uxtb	r3, r3
 8009568:	111b      	asrs	r3, r3, #4
 800956a:	f003 0204 	and.w	r2, r3, #4
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8009572:	bf00      	nop
 8009574:	3718      	adds	r7, #24
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}
 800957a:	bf00      	nop
 800957c:	20000880 	.word	0x20000880

08009580 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8009580:	b480      	push	{r7}
 8009582:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8009584:	4b03      	ldr	r3, [pc, #12]	@ (8009594 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8009586:	781b      	ldrb	r3, [r3, #0]
}
 8009588:	4618      	mov	r0, r3
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr
 8009592:	bf00      	nop
 8009594:	20000880 	.word	0x20000880

08009598 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 800959c:	f7ff fff0 	bl	8009580 <ft5336_Get_I2C_InitializedStatus>
 80095a0:	4603      	mov	r3, r0
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d104      	bne.n	80095b0 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 80095a6:	f000 f96b 	bl	8009880 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80095aa:	4b02      	ldr	r3, [pc, #8]	@ (80095b4 <ft5336_I2C_InitializeIfRequired+0x1c>)
 80095ac:	2201      	movs	r2, #1
 80095ae:	701a      	strb	r2, [r3, #0]
  }
}
 80095b0:	bf00      	nop
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	20000880 	.word	0x20000880

080095b8 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b085      	sub	sp, #20
 80095bc:	af00      	add	r7, sp, #0
 80095be:	4603      	mov	r3, r0
 80095c0:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 80095c2:	2300      	movs	r3, #0
 80095c4:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 80095c6:	68fb      	ldr	r3, [r7, #12]
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3714      	adds	r7, #20
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b08c      	sub	sp, #48	@ 0x30
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	4a51      	ldr	r2, [pc, #324]	@ (8009724 <I2Cx_MspInit+0x150>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d14d      	bne.n	8009680 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80095e4:	4b50      	ldr	r3, [pc, #320]	@ (8009728 <I2Cx_MspInit+0x154>)
 80095e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095e8:	4a4f      	ldr	r2, [pc, #316]	@ (8009728 <I2Cx_MspInit+0x154>)
 80095ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80095f0:	4b4d      	ldr	r3, [pc, #308]	@ (8009728 <I2Cx_MspInit+0x154>)
 80095f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095f8:	61bb      	str	r3, [r7, #24]
 80095fa:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80095fc:	2380      	movs	r3, #128	@ 0x80
 80095fe:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8009600:	2312      	movs	r3, #18
 8009602:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8009604:	2300      	movs	r3, #0
 8009606:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8009608:	2302      	movs	r3, #2
 800960a:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800960c:	2304      	movs	r3, #4
 800960e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8009610:	f107 031c 	add.w	r3, r7, #28
 8009614:	4619      	mov	r1, r3
 8009616:	4845      	ldr	r0, [pc, #276]	@ (800972c <I2Cx_MspInit+0x158>)
 8009618:	f7f8 fcae 	bl	8001f78 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800961c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009620:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8009622:	f107 031c 	add.w	r3, r7, #28
 8009626:	4619      	mov	r1, r3
 8009628:	4840      	ldr	r0, [pc, #256]	@ (800972c <I2Cx_MspInit+0x158>)
 800962a:	f7f8 fca5 	bl	8001f78 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800962e:	4b3e      	ldr	r3, [pc, #248]	@ (8009728 <I2Cx_MspInit+0x154>)
 8009630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009632:	4a3d      	ldr	r2, [pc, #244]	@ (8009728 <I2Cx_MspInit+0x154>)
 8009634:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009638:	6413      	str	r3, [r2, #64]	@ 0x40
 800963a:	4b3b      	ldr	r3, [pc, #236]	@ (8009728 <I2Cx_MspInit+0x154>)
 800963c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800963e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009642:	617b      	str	r3, [r7, #20]
 8009644:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8009646:	4b38      	ldr	r3, [pc, #224]	@ (8009728 <I2Cx_MspInit+0x154>)
 8009648:	6a1b      	ldr	r3, [r3, #32]
 800964a:	4a37      	ldr	r2, [pc, #220]	@ (8009728 <I2Cx_MspInit+0x154>)
 800964c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009650:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8009652:	4b35      	ldr	r3, [pc, #212]	@ (8009728 <I2Cx_MspInit+0x154>)
 8009654:	6a1b      	ldr	r3, [r3, #32]
 8009656:	4a34      	ldr	r2, [pc, #208]	@ (8009728 <I2Cx_MspInit+0x154>)
 8009658:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800965c:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800965e:	2200      	movs	r2, #0
 8009660:	210f      	movs	r1, #15
 8009662:	2048      	movs	r0, #72	@ 0x48
 8009664:	f7f7 ff1d 	bl	80014a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8009668:	2048      	movs	r0, #72	@ 0x48
 800966a:	f7f7 ff36 	bl	80014da <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800966e:	2200      	movs	r2, #0
 8009670:	210f      	movs	r1, #15
 8009672:	2049      	movs	r0, #73	@ 0x49
 8009674:	f7f7 ff15 	bl	80014a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8009678:	2049      	movs	r0, #73	@ 0x49
 800967a:	f7f7 ff2e 	bl	80014da <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800967e:	e04d      	b.n	800971c <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8009680:	4b29      	ldr	r3, [pc, #164]	@ (8009728 <I2Cx_MspInit+0x154>)
 8009682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009684:	4a28      	ldr	r2, [pc, #160]	@ (8009728 <I2Cx_MspInit+0x154>)
 8009686:	f043 0302 	orr.w	r3, r3, #2
 800968a:	6313      	str	r3, [r2, #48]	@ 0x30
 800968c:	4b26      	ldr	r3, [pc, #152]	@ (8009728 <I2Cx_MspInit+0x154>)
 800968e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009690:	f003 0302 	and.w	r3, r3, #2
 8009694:	613b      	str	r3, [r7, #16]
 8009696:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8009698:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800969c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800969e:	2312      	movs	r3, #18
 80096a0:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80096a2:	2300      	movs	r3, #0
 80096a4:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80096a6:	2302      	movs	r3, #2
 80096a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80096aa:	2304      	movs	r3, #4
 80096ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80096ae:	f107 031c 	add.w	r3, r7, #28
 80096b2:	4619      	mov	r1, r3
 80096b4:	481e      	ldr	r0, [pc, #120]	@ (8009730 <I2Cx_MspInit+0x15c>)
 80096b6:	f7f8 fc5f 	bl	8001f78 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80096ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80096be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80096c0:	f107 031c 	add.w	r3, r7, #28
 80096c4:	4619      	mov	r1, r3
 80096c6:	481a      	ldr	r0, [pc, #104]	@ (8009730 <I2Cx_MspInit+0x15c>)
 80096c8:	f7f8 fc56 	bl	8001f78 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80096cc:	4b16      	ldr	r3, [pc, #88]	@ (8009728 <I2Cx_MspInit+0x154>)
 80096ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096d0:	4a15      	ldr	r2, [pc, #84]	@ (8009728 <I2Cx_MspInit+0x154>)
 80096d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80096d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80096d8:	4b13      	ldr	r3, [pc, #76]	@ (8009728 <I2Cx_MspInit+0x154>)
 80096da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80096e0:	60fb      	str	r3, [r7, #12]
 80096e2:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80096e4:	4b10      	ldr	r3, [pc, #64]	@ (8009728 <I2Cx_MspInit+0x154>)
 80096e6:	6a1b      	ldr	r3, [r3, #32]
 80096e8:	4a0f      	ldr	r2, [pc, #60]	@ (8009728 <I2Cx_MspInit+0x154>)
 80096ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80096ee:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80096f0:	4b0d      	ldr	r3, [pc, #52]	@ (8009728 <I2Cx_MspInit+0x154>)
 80096f2:	6a1b      	ldr	r3, [r3, #32]
 80096f4:	4a0c      	ldr	r2, [pc, #48]	@ (8009728 <I2Cx_MspInit+0x154>)
 80096f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80096fa:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80096fc:	2200      	movs	r2, #0
 80096fe:	210f      	movs	r1, #15
 8009700:	201f      	movs	r0, #31
 8009702:	f7f7 fece 	bl	80014a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8009706:	201f      	movs	r0, #31
 8009708:	f7f7 fee7 	bl	80014da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800970c:	2200      	movs	r2, #0
 800970e:	210f      	movs	r1, #15
 8009710:	2020      	movs	r0, #32
 8009712:	f7f7 fec6 	bl	80014a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8009716:	2020      	movs	r0, #32
 8009718:	f7f7 fedf 	bl	80014da <HAL_NVIC_EnableIRQ>
}
 800971c:	bf00      	nop
 800971e:	3730      	adds	r7, #48	@ 0x30
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}
 8009724:	20000888 	.word	0x20000888
 8009728:	40023800 	.word	0x40023800
 800972c:	40021c00 	.word	0x40021c00
 8009730:	40020400 	.word	0x40020400

08009734 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f7f9 f8fb 	bl	8002938 <HAL_I2C_GetState>
 8009742:	4603      	mov	r3, r0
 8009744:	2b00      	cmp	r3, #0
 8009746:	d125      	bne.n	8009794 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	4a14      	ldr	r2, [pc, #80]	@ (800979c <I2Cx_Init+0x68>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d103      	bne.n	8009758 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	4a13      	ldr	r2, [pc, #76]	@ (80097a0 <I2Cx_Init+0x6c>)
 8009754:	601a      	str	r2, [r3, #0]
 8009756:	e002      	b.n	800975e <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	4a12      	ldr	r2, [pc, #72]	@ (80097a4 <I2Cx_Init+0x70>)
 800975c:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	4a11      	ldr	r2, [pc, #68]	@ (80097a8 <I2Cx_Init+0x74>)
 8009762:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2200      	movs	r2, #0
 8009768:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2201      	movs	r2, #1
 800976e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2200      	movs	r2, #0
 800977a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2200      	movs	r2, #0
 8009786:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f7ff ff23 	bl	80095d4 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f7f8 fdd0 	bl	8002334 <HAL_I2C_Init>
  }
}
 8009794:	bf00      	nop
 8009796:	3708      	adds	r7, #8
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}
 800979c:	20000888 	.word	0x20000888
 80097a0:	40005c00 	.word	0x40005c00
 80097a4:	40005400 	.word	0x40005400
 80097a8:	40912732 	.word	0x40912732

080097ac <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b08a      	sub	sp, #40	@ 0x28
 80097b0:	af04      	add	r7, sp, #16
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	4608      	mov	r0, r1
 80097b6:	4611      	mov	r1, r2
 80097b8:	461a      	mov	r2, r3
 80097ba:	4603      	mov	r3, r0
 80097bc:	72fb      	strb	r3, [r7, #11]
 80097be:	460b      	mov	r3, r1
 80097c0:	813b      	strh	r3, [r7, #8]
 80097c2:	4613      	mov	r3, r2
 80097c4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80097c6:	2300      	movs	r3, #0
 80097c8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80097ca:	7afb      	ldrb	r3, [r7, #11]
 80097cc:	b299      	uxth	r1, r3
 80097ce:	88f8      	ldrh	r0, [r7, #6]
 80097d0:	893a      	ldrh	r2, [r7, #8]
 80097d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80097d6:	9302      	str	r3, [sp, #8]
 80097d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80097da:	9301      	str	r3, [sp, #4]
 80097dc:	6a3b      	ldr	r3, [r7, #32]
 80097de:	9300      	str	r3, [sp, #0]
 80097e0:	4603      	mov	r3, r0
 80097e2:	68f8      	ldr	r0, [r7, #12]
 80097e4:	f7f8 ff8e 	bl	8002704 <HAL_I2C_Mem_Read>
 80097e8:	4603      	mov	r3, r0
 80097ea:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80097ec:	7dfb      	ldrb	r3, [r7, #23]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d004      	beq.n	80097fc <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80097f2:	7afb      	ldrb	r3, [r7, #11]
 80097f4:	4619      	mov	r1, r3
 80097f6:	68f8      	ldr	r0, [r7, #12]
 80097f8:	f000 f832 	bl	8009860 <I2Cx_Error>
  }
  return status;    
 80097fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3718      	adds	r7, #24
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}

08009806 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8009806:	b580      	push	{r7, lr}
 8009808:	b08a      	sub	sp, #40	@ 0x28
 800980a:	af04      	add	r7, sp, #16
 800980c:	60f8      	str	r0, [r7, #12]
 800980e:	4608      	mov	r0, r1
 8009810:	4611      	mov	r1, r2
 8009812:	461a      	mov	r2, r3
 8009814:	4603      	mov	r3, r0
 8009816:	72fb      	strb	r3, [r7, #11]
 8009818:	460b      	mov	r3, r1
 800981a:	813b      	strh	r3, [r7, #8]
 800981c:	4613      	mov	r3, r2
 800981e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8009820:	2300      	movs	r3, #0
 8009822:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8009824:	7afb      	ldrb	r3, [r7, #11]
 8009826:	b299      	uxth	r1, r3
 8009828:	88f8      	ldrh	r0, [r7, #6]
 800982a:	893a      	ldrh	r2, [r7, #8]
 800982c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009830:	9302      	str	r3, [sp, #8]
 8009832:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009834:	9301      	str	r3, [sp, #4]
 8009836:	6a3b      	ldr	r3, [r7, #32]
 8009838:	9300      	str	r3, [sp, #0]
 800983a:	4603      	mov	r3, r0
 800983c:	68f8      	ldr	r0, [r7, #12]
 800983e:	f7f8 fe4d 	bl	80024dc <HAL_I2C_Mem_Write>
 8009842:	4603      	mov	r3, r0
 8009844:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8009846:	7dfb      	ldrb	r3, [r7, #23]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d004      	beq.n	8009856 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800984c:	7afb      	ldrb	r3, [r7, #11]
 800984e:	4619      	mov	r1, r3
 8009850:	68f8      	ldr	r0, [r7, #12]
 8009852:	f000 f805 	bl	8009860 <I2Cx_Error>
  }
  return status;
 8009856:	7dfb      	ldrb	r3, [r7, #23]
}
 8009858:	4618      	mov	r0, r3
 800985a:	3718      	adds	r7, #24
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b082      	sub	sp, #8
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	460b      	mov	r3, r1
 800986a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f7f8 fdf1 	bl	8002454 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f7ff ff5e 	bl	8009734 <I2Cx_Init>
}
 8009878:	bf00      	nop
 800987a:	3708      	adds	r7, #8
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8009884:	4802      	ldr	r0, [pc, #8]	@ (8009890 <TS_IO_Init+0x10>)
 8009886:	f7ff ff55 	bl	8009734 <I2Cx_Init>
}
 800988a:	bf00      	nop
 800988c:	bd80      	pop	{r7, pc}
 800988e:	bf00      	nop
 8009890:	20000888 	.word	0x20000888

08009894 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af02      	add	r7, sp, #8
 800989a:	4603      	mov	r3, r0
 800989c:	71fb      	strb	r3, [r7, #7]
 800989e:	460b      	mov	r3, r1
 80098a0:	71bb      	strb	r3, [r7, #6]
 80098a2:	4613      	mov	r3, r2
 80098a4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80098a6:	79bb      	ldrb	r3, [r7, #6]
 80098a8:	b29a      	uxth	r2, r3
 80098aa:	79f9      	ldrb	r1, [r7, #7]
 80098ac:	2301      	movs	r3, #1
 80098ae:	9301      	str	r3, [sp, #4]
 80098b0:	1d7b      	adds	r3, r7, #5
 80098b2:	9300      	str	r3, [sp, #0]
 80098b4:	2301      	movs	r3, #1
 80098b6:	4803      	ldr	r0, [pc, #12]	@ (80098c4 <TS_IO_Write+0x30>)
 80098b8:	f7ff ffa5 	bl	8009806 <I2Cx_WriteMultiple>
}
 80098bc:	bf00      	nop
 80098be:	3708      	adds	r7, #8
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	20000888 	.word	0x20000888

080098c8 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b086      	sub	sp, #24
 80098cc:	af02      	add	r7, sp, #8
 80098ce:	4603      	mov	r3, r0
 80098d0:	460a      	mov	r2, r1
 80098d2:	71fb      	strb	r3, [r7, #7]
 80098d4:	4613      	mov	r3, r2
 80098d6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80098d8:	2300      	movs	r3, #0
 80098da:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80098dc:	79bb      	ldrb	r3, [r7, #6]
 80098de:	b29a      	uxth	r2, r3
 80098e0:	79f9      	ldrb	r1, [r7, #7]
 80098e2:	2301      	movs	r3, #1
 80098e4:	9301      	str	r3, [sp, #4]
 80098e6:	f107 030f 	add.w	r3, r7, #15
 80098ea:	9300      	str	r3, [sp, #0]
 80098ec:	2301      	movs	r3, #1
 80098ee:	4804      	ldr	r0, [pc, #16]	@ (8009900 <TS_IO_Read+0x38>)
 80098f0:	f7ff ff5c 	bl	80097ac <I2Cx_ReadMultiple>

  return read_value;
 80098f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3710      	adds	r7, #16
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop
 8009900:	20000888 	.word	0x20000888

08009904 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b082      	sub	sp, #8
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f7f7 fcc9 	bl	80012a4 <HAL_Delay>
}
 8009912:	bf00      	nop
 8009914:	3708      	adds	r7, #8
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
	...

0800991c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 800991c:	b580      	push	{r7, lr}
 800991e:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8009920:	4b31      	ldr	r3, [pc, #196]	@ (80099e8 <BSP_LCD_Init+0xcc>)
 8009922:	2228      	movs	r2, #40	@ 0x28
 8009924:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8009926:	4b30      	ldr	r3, [pc, #192]	@ (80099e8 <BSP_LCD_Init+0xcc>)
 8009928:	2209      	movs	r2, #9
 800992a:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800992c:	4b2e      	ldr	r3, [pc, #184]	@ (80099e8 <BSP_LCD_Init+0xcc>)
 800992e:	2235      	movs	r2, #53	@ 0x35
 8009930:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8009932:	4b2d      	ldr	r3, [pc, #180]	@ (80099e8 <BSP_LCD_Init+0xcc>)
 8009934:	220b      	movs	r2, #11
 8009936:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8009938:	4b2b      	ldr	r3, [pc, #172]	@ (80099e8 <BSP_LCD_Init+0xcc>)
 800993a:	f240 121b 	movw	r2, #283	@ 0x11b
 800993e:	629a      	str	r2, [r3, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8009940:	4b29      	ldr	r3, [pc, #164]	@ (80099e8 <BSP_LCD_Init+0xcc>)
 8009942:	f240 2215 	movw	r2, #533	@ 0x215
 8009946:	625a      	str	r2, [r3, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8009948:	4b27      	ldr	r3, [pc, #156]	@ (80099e8 <BSP_LCD_Init+0xcc>)
 800994a:	f240 121d 	movw	r2, #285	@ 0x11d
 800994e:	631a      	str	r2, [r3, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8009950:	4b25      	ldr	r3, [pc, #148]	@ (80099e8 <BSP_LCD_Init+0xcc>)
 8009952:	f240 2235 	movw	r2, #565	@ 0x235
 8009956:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8009958:	2100      	movs	r1, #0
 800995a:	4823      	ldr	r0, [pc, #140]	@ (80099e8 <BSP_LCD_Init+0xcc>)
 800995c:	f000 fc7e 	bl	800a25c <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8009960:	4b21      	ldr	r3, [pc, #132]	@ (80099e8 <BSP_LCD_Init+0xcc>)
 8009962:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8009966:	661a      	str	r2, [r3, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8009968:	4b1f      	ldr	r3, [pc, #124]	@ (80099e8 <BSP_LCD_Init+0xcc>)
 800996a:	f44f 7288 	mov.w	r2, #272	@ 0x110
 800996e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8009970:	4b1d      	ldr	r3, [pc, #116]	@ (80099e8 <BSP_LCD_Init+0xcc>)
 8009972:	2200      	movs	r2, #0
 8009974:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8009978:	4b1b      	ldr	r3, [pc, #108]	@ (80099e8 <BSP_LCD_Init+0xcc>)
 800997a:	2200      	movs	r2, #0
 800997c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8009980:	4b19      	ldr	r3, [pc, #100]	@ (80099e8 <BSP_LCD_Init+0xcc>)
 8009982:	2200      	movs	r2, #0
 8009984:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8009988:	4b17      	ldr	r3, [pc, #92]	@ (80099e8 <BSP_LCD_Init+0xcc>)
 800998a:	2200      	movs	r2, #0
 800998c:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 800998e:	4b16      	ldr	r3, [pc, #88]	@ (80099e8 <BSP_LCD_Init+0xcc>)
 8009990:	2200      	movs	r2, #0
 8009992:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8009994:	4b14      	ldr	r3, [pc, #80]	@ (80099e8 <BSP_LCD_Init+0xcc>)
 8009996:	2200      	movs	r2, #0
 8009998:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800999a:	4b13      	ldr	r3, [pc, #76]	@ (80099e8 <BSP_LCD_Init+0xcc>)
 800999c:	2200      	movs	r2, #0
 800999e:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 80099a0:	4b11      	ldr	r3, [pc, #68]	@ (80099e8 <BSP_LCD_Init+0xcc>)
 80099a2:	4a12      	ldr	r2, [pc, #72]	@ (80099ec <BSP_LCD_Init+0xd0>)
 80099a4:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80099a6:	4810      	ldr	r0, [pc, #64]	@ (80099e8 <BSP_LCD_Init+0xcc>)
 80099a8:	f7f9 fc92 	bl	80032d0 <HAL_LTDC_GetState>
 80099ac:	4603      	mov	r3, r0
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d103      	bne.n	80099ba <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80099b2:	2100      	movs	r1, #0
 80099b4:	480c      	ldr	r0, [pc, #48]	@ (80099e8 <BSP_LCD_Init+0xcc>)
 80099b6:	f000 fb77 	bl	800a0a8 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80099ba:	480b      	ldr	r0, [pc, #44]	@ (80099e8 <BSP_LCD_Init+0xcc>)
 80099bc:	f7f9 fa64 	bl	8002e88 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80099c0:	2201      	movs	r2, #1
 80099c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80099c6:	480a      	ldr	r0, [pc, #40]	@ (80099f0 <BSP_LCD_Init+0xd4>)
 80099c8:	f7f8 fc9a 	bl	8002300 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80099cc:	2201      	movs	r2, #1
 80099ce:	2108      	movs	r1, #8
 80099d0:	4808      	ldr	r0, [pc, #32]	@ (80099f4 <BSP_LCD_Init+0xd8>)
 80099d2:	f7f8 fc95 	bl	8002300 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80099d6:	f000 ff71 	bl	800a8bc <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80099da:	4807      	ldr	r0, [pc, #28]	@ (80099f8 <BSP_LCD_Init+0xdc>)
 80099dc:	f000 f8d0 	bl	8009b80 <BSP_LCD_SetFont>
  
  return LCD_OK;
 80099e0:	2300      	movs	r3, #0
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop
 80099e8:	200008dc 	.word	0x200008dc
 80099ec:	40016800 	.word	0x40016800
 80099f0:	40022000 	.word	0x40022000
 80099f4:	40022800 	.word	0x40022800
 80099f8:	20000010 	.word	0x20000010

080099fc <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80099fc:	b480      	push	{r7}
 80099fe:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8009a00:	4b06      	ldr	r3, [pc, #24]	@ (8009a1c <BSP_LCD_GetXSize+0x20>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4a06      	ldr	r2, [pc, #24]	@ (8009a20 <BSP_LCD_GetXSize+0x24>)
 8009a06:	2134      	movs	r1, #52	@ 0x34
 8009a08:	fb01 f303 	mul.w	r3, r1, r3
 8009a0c:	4413      	add	r3, r2
 8009a0e:	3360      	adds	r3, #96	@ 0x60
 8009a10:	681b      	ldr	r3, [r3, #0]
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr
 8009a1c:	200009c4 	.word	0x200009c4
 8009a20:	200008dc 	.word	0x200008dc

08009a24 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8009a24:	b480      	push	{r7}
 8009a26:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8009a28:	4b06      	ldr	r3, [pc, #24]	@ (8009a44 <BSP_LCD_GetYSize+0x20>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a06      	ldr	r2, [pc, #24]	@ (8009a48 <BSP_LCD_GetYSize+0x24>)
 8009a2e:	2134      	movs	r1, #52	@ 0x34
 8009a30:	fb01 f303 	mul.w	r3, r1, r3
 8009a34:	4413      	add	r3, r2
 8009a36:	3364      	adds	r3, #100	@ 0x64
 8009a38:	681b      	ldr	r3, [r3, #0]
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr
 8009a44:	200009c4 	.word	0x200009c4
 8009a48:	200008dc 	.word	0x200008dc

08009a4c <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b090      	sub	sp, #64	@ 0x40
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	4603      	mov	r3, r0
 8009a54:	6039      	str	r1, [r7, #0]
 8009a56:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8009a5c:	f7ff ffce 	bl	80099fc <BSP_LCD_GetXSize>
 8009a60:	4603      	mov	r3, r0
 8009a62:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8009a64:	2300      	movs	r3, #0
 8009a66:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8009a68:	f7ff ffdc 	bl	8009a24 <BSP_LCD_GetYSize>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8009a70:	2300      	movs	r3, #0
 8009a72:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	633b      	str	r3, [r7, #48]	@ 0x30
  layer_cfg.Alpha = 255;
 8009a78:	23ff      	movs	r3, #255	@ 0xff
 8009a7a:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	627b      	str	r3, [r7, #36]	@ 0x24
  layer_cfg.Backcolor.Blue = 0;
 8009a80:	2300      	movs	r3, #0
 8009a82:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  layer_cfg.Backcolor.Green = 0;
 8009a86:	2300      	movs	r3, #0
 8009a88:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  layer_cfg.Backcolor.Red = 0;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8009a92:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8009a96:	62bb      	str	r3, [r7, #40]	@ 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8009a98:	2307      	movs	r3, #7
 8009a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8009a9c:	f7ff ffae 	bl	80099fc <BSP_LCD_GetXSize>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	637b      	str	r3, [r7, #52]	@ 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8009aa4:	f7ff ffbe 	bl	8009a24 <BSP_LCD_GetYSize>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8009aac:	88fa      	ldrh	r2, [r7, #6]
 8009aae:	f107 030c 	add.w	r3, r7, #12
 8009ab2:	4619      	mov	r1, r3
 8009ab4:	4812      	ldr	r0, [pc, #72]	@ (8009b00 <BSP_LCD_LayerDefaultInit+0xb4>)
 8009ab6:	f7f9 fb97 	bl	80031e8 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8009aba:	88fa      	ldrh	r2, [r7, #6]
 8009abc:	4911      	ldr	r1, [pc, #68]	@ (8009b04 <BSP_LCD_LayerDefaultInit+0xb8>)
 8009abe:	4613      	mov	r3, r2
 8009ac0:	005b      	lsls	r3, r3, #1
 8009ac2:	4413      	add	r3, r2
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	440b      	add	r3, r1
 8009ac8:	3304      	adds	r3, #4
 8009aca:	f04f 32ff 	mov.w	r2, #4294967295
 8009ace:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8009ad0:	88fa      	ldrh	r2, [r7, #6]
 8009ad2:	490c      	ldr	r1, [pc, #48]	@ (8009b04 <BSP_LCD_LayerDefaultInit+0xb8>)
 8009ad4:	4613      	mov	r3, r2
 8009ad6:	005b      	lsls	r3, r3, #1
 8009ad8:	4413      	add	r3, r2
 8009ada:	009b      	lsls	r3, r3, #2
 8009adc:	440b      	add	r3, r1
 8009ade:	3308      	adds	r3, #8
 8009ae0:	4a09      	ldr	r2, [pc, #36]	@ (8009b08 <BSP_LCD_LayerDefaultInit+0xbc>)
 8009ae2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8009ae4:	88fa      	ldrh	r2, [r7, #6]
 8009ae6:	4907      	ldr	r1, [pc, #28]	@ (8009b04 <BSP_LCD_LayerDefaultInit+0xb8>)
 8009ae8:	4613      	mov	r3, r2
 8009aea:	005b      	lsls	r3, r3, #1
 8009aec:	4413      	add	r3, r2
 8009aee:	009b      	lsls	r3, r3, #2
 8009af0:	440b      	add	r3, r1
 8009af2:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8009af6:	601a      	str	r2, [r3, #0]
}
 8009af8:	bf00      	nop
 8009afa:	3740      	adds	r7, #64	@ 0x40
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}
 8009b00:	200008dc 	.word	0x200008dc
 8009b04:	200009c8 	.word	0x200009c8
 8009b08:	20000010 	.word	0x20000010

08009b0c <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b083      	sub	sp, #12
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8009b14:	4a04      	ldr	r2, [pc, #16]	@ (8009b28 <BSP_LCD_SelectLayer+0x1c>)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6013      	str	r3, [r2, #0]
} 
 8009b1a:	bf00      	nop
 8009b1c:	370c      	adds	r7, #12
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b24:	4770      	bx	lr
 8009b26:	bf00      	nop
 8009b28:	200009c4 	.word	0x200009c4

08009b2c <BSP_LCD_SetTransparency>:
  * @param  Transparency: Transparency
  *           This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFF 
  * @retval None
  */
void BSP_LCD_SetTransparency(uint32_t LayerIndex, uint8_t Transparency)
{    
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b082      	sub	sp, #8
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	460b      	mov	r3, r1
 8009b36:	70fb      	strb	r3, [r7, #3]
  HAL_LTDC_SetAlpha(&hLtdcHandler, Transparency, LayerIndex);
 8009b38:	78fb      	ldrb	r3, [r7, #3]
 8009b3a:	687a      	ldr	r2, [r7, #4]
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	4803      	ldr	r0, [pc, #12]	@ (8009b4c <BSP_LCD_SetTransparency+0x20>)
 8009b40:	f7f9 fb90 	bl	8003264 <HAL_LTDC_SetAlpha>
}
 8009b44:	bf00      	nop
 8009b46:	3708      	adds	r7, #8
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}
 8009b4c:	200008dc 	.word	0x200008dc

08009b50 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b083      	sub	sp, #12
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8009b58:	4b07      	ldr	r3, [pc, #28]	@ (8009b78 <BSP_LCD_SetTextColor+0x28>)
 8009b5a:	681a      	ldr	r2, [r3, #0]
 8009b5c:	4907      	ldr	r1, [pc, #28]	@ (8009b7c <BSP_LCD_SetTextColor+0x2c>)
 8009b5e:	4613      	mov	r3, r2
 8009b60:	005b      	lsls	r3, r3, #1
 8009b62:	4413      	add	r3, r2
 8009b64:	009b      	lsls	r3, r3, #2
 8009b66:	440b      	add	r3, r1
 8009b68:	687a      	ldr	r2, [r7, #4]
 8009b6a:	601a      	str	r2, [r3, #0]
}
 8009b6c:	bf00      	nop
 8009b6e:	370c      	adds	r7, #12
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr
 8009b78:	200009c4 	.word	0x200009c4
 8009b7c:	200009c8 	.word	0x200009c8

08009b80 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b083      	sub	sp, #12
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8009b88:	4b08      	ldr	r3, [pc, #32]	@ (8009bac <BSP_LCD_SetFont+0x2c>)
 8009b8a:	681a      	ldr	r2, [r3, #0]
 8009b8c:	4908      	ldr	r1, [pc, #32]	@ (8009bb0 <BSP_LCD_SetFont+0x30>)
 8009b8e:	4613      	mov	r3, r2
 8009b90:	005b      	lsls	r3, r3, #1
 8009b92:	4413      	add	r3, r2
 8009b94:	009b      	lsls	r3, r3, #2
 8009b96:	440b      	add	r3, r1
 8009b98:	3308      	adds	r3, #8
 8009b9a:	687a      	ldr	r2, [r7, #4]
 8009b9c:	601a      	str	r2, [r3, #0]
}
 8009b9e:	bf00      	nop
 8009ba0:	370c      	adds	r7, #12
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr
 8009baa:	bf00      	nop
 8009bac:	200009c4 	.word	0x200009c4
 8009bb0:	200009c8 	.word	0x200009c8

08009bb4 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8009bb8:	4b07      	ldr	r3, [pc, #28]	@ (8009bd8 <BSP_LCD_GetFont+0x24>)
 8009bba:	681a      	ldr	r2, [r3, #0]
 8009bbc:	4907      	ldr	r1, [pc, #28]	@ (8009bdc <BSP_LCD_GetFont+0x28>)
 8009bbe:	4613      	mov	r3, r2
 8009bc0:	005b      	lsls	r3, r3, #1
 8009bc2:	4413      	add	r3, r2
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	440b      	add	r3, r1
 8009bc8:	3308      	adds	r3, #8
 8009bca:	681b      	ldr	r3, [r3, #0]
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd4:	4770      	bx	lr
 8009bd6:	bf00      	nop
 8009bd8:	200009c4 	.word	0x200009c4
 8009bdc:	200009c8 	.word	0x200009c8

08009be0 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8009be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009be2:	b085      	sub	sp, #20
 8009be4:	af02      	add	r7, sp, #8
 8009be6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8009be8:	4b0f      	ldr	r3, [pc, #60]	@ (8009c28 <BSP_LCD_Clear+0x48>)
 8009bea:	681c      	ldr	r4, [r3, #0]
 8009bec:	4b0e      	ldr	r3, [pc, #56]	@ (8009c28 <BSP_LCD_Clear+0x48>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a0e      	ldr	r2, [pc, #56]	@ (8009c2c <BSP_LCD_Clear+0x4c>)
 8009bf2:	2134      	movs	r1, #52	@ 0x34
 8009bf4:	fb01 f303 	mul.w	r3, r1, r3
 8009bf8:	4413      	add	r3, r2
 8009bfa:	335c      	adds	r3, #92	@ 0x5c
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	461e      	mov	r6, r3
 8009c00:	f7ff fefc 	bl	80099fc <BSP_LCD_GetXSize>
 8009c04:	4605      	mov	r5, r0
 8009c06:	f7ff ff0d 	bl	8009a24 <BSP_LCD_GetYSize>
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	9301      	str	r3, [sp, #4]
 8009c10:	2300      	movs	r3, #0
 8009c12:	9300      	str	r3, [sp, #0]
 8009c14:	4613      	mov	r3, r2
 8009c16:	462a      	mov	r2, r5
 8009c18:	4631      	mov	r1, r6
 8009c1a:	4620      	mov	r0, r4
 8009c1c:	f000 fbf2 	bl	800a404 <LL_FillBuffer>
}
 8009c20:	bf00      	nop
 8009c22:	370c      	adds	r7, #12
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c28:	200009c4 	.word	0x200009c4
 8009c2c:	200008dc 	.word	0x200008dc

08009c30 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8009c30:	b590      	push	{r4, r7, lr}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	4603      	mov	r3, r0
 8009c38:	80fb      	strh	r3, [r7, #6]
 8009c3a:	460b      	mov	r3, r1
 8009c3c:	80bb      	strh	r3, [r7, #4]
 8009c3e:	4613      	mov	r3, r2
 8009c40:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8009c42:	4b1b      	ldr	r3, [pc, #108]	@ (8009cb0 <BSP_LCD_DisplayChar+0x80>)
 8009c44:	681a      	ldr	r2, [r3, #0]
 8009c46:	491b      	ldr	r1, [pc, #108]	@ (8009cb4 <BSP_LCD_DisplayChar+0x84>)
 8009c48:	4613      	mov	r3, r2
 8009c4a:	005b      	lsls	r3, r3, #1
 8009c4c:	4413      	add	r3, r2
 8009c4e:	009b      	lsls	r3, r3, #2
 8009c50:	440b      	add	r3, r1
 8009c52:	3308      	adds	r3, #8
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	6819      	ldr	r1, [r3, #0]
 8009c58:	78fb      	ldrb	r3, [r7, #3]
 8009c5a:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8009c5e:	4b14      	ldr	r3, [pc, #80]	@ (8009cb0 <BSP_LCD_DisplayChar+0x80>)
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	4c14      	ldr	r4, [pc, #80]	@ (8009cb4 <BSP_LCD_DisplayChar+0x84>)
 8009c64:	4613      	mov	r3, r2
 8009c66:	005b      	lsls	r3, r3, #1
 8009c68:	4413      	add	r3, r2
 8009c6a:	009b      	lsls	r3, r3, #2
 8009c6c:	4423      	add	r3, r4
 8009c6e:	3308      	adds	r3, #8
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8009c74:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8009c78:	4b0d      	ldr	r3, [pc, #52]	@ (8009cb0 <BSP_LCD_DisplayChar+0x80>)
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	4c0d      	ldr	r4, [pc, #52]	@ (8009cb4 <BSP_LCD_DisplayChar+0x84>)
 8009c7e:	4613      	mov	r3, r2
 8009c80:	005b      	lsls	r3, r3, #1
 8009c82:	4413      	add	r3, r2
 8009c84:	009b      	lsls	r3, r3, #2
 8009c86:	4423      	add	r3, r4
 8009c88:	3308      	adds	r3, #8
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	889b      	ldrh	r3, [r3, #4]
 8009c8e:	3307      	adds	r3, #7
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	da00      	bge.n	8009c96 <BSP_LCD_DisplayChar+0x66>
 8009c94:	3307      	adds	r3, #7
 8009c96:	10db      	asrs	r3, r3, #3
 8009c98:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8009c9c:	18ca      	adds	r2, r1, r3
 8009c9e:	88b9      	ldrh	r1, [r7, #4]
 8009ca0:	88fb      	ldrh	r3, [r7, #6]
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f000 faf6 	bl	800a294 <DrawChar>
}
 8009ca8:	bf00      	nop
 8009caa:	370c      	adds	r7, #12
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd90      	pop	{r4, r7, pc}
 8009cb0:	200009c4 	.word	0x200009c4
 8009cb4:	200009c8 	.word	0x200009c8

08009cb8 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8009cb8:	b5b0      	push	{r4, r5, r7, lr}
 8009cba:	b088      	sub	sp, #32
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	60ba      	str	r2, [r7, #8]
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	81fb      	strh	r3, [r7, #14]
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	81bb      	strh	r3, [r7, #12]
 8009cca:	4613      	mov	r3, r2
 8009ccc:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8009cce:	2301      	movs	r3, #1
 8009cd0:	83fb      	strh	r3, [r7, #30]
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	61bb      	str	r3, [r7, #24]
 8009cda:	2300      	movs	r3, #0
 8009cdc:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8009ce2:	e002      	b.n	8009cea <BSP_LCD_DisplayStringAt+0x32>
 8009ce4:	69bb      	ldr	r3, [r7, #24]
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	61bb      	str	r3, [r7, #24]
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	1c5a      	adds	r2, r3, #1
 8009cee:	617a      	str	r2, [r7, #20]
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d1f6      	bne.n	8009ce4 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8009cf6:	f7ff fe81 	bl	80099fc <BSP_LCD_GetXSize>
 8009cfa:	4601      	mov	r1, r0
 8009cfc:	4b50      	ldr	r3, [pc, #320]	@ (8009e40 <BSP_LCD_DisplayStringAt+0x188>)
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	4850      	ldr	r0, [pc, #320]	@ (8009e44 <BSP_LCD_DisplayStringAt+0x18c>)
 8009d02:	4613      	mov	r3, r2
 8009d04:	005b      	lsls	r3, r3, #1
 8009d06:	4413      	add	r3, r2
 8009d08:	009b      	lsls	r3, r3, #2
 8009d0a:	4403      	add	r3, r0
 8009d0c:	3308      	adds	r3, #8
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	889b      	ldrh	r3, [r3, #4]
 8009d12:	fbb1 f3f3 	udiv	r3, r1, r3
 8009d16:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8009d18:	79fb      	ldrb	r3, [r7, #7]
 8009d1a:	2b03      	cmp	r3, #3
 8009d1c:	d01c      	beq.n	8009d58 <BSP_LCD_DisplayStringAt+0xa0>
 8009d1e:	2b03      	cmp	r3, #3
 8009d20:	dc33      	bgt.n	8009d8a <BSP_LCD_DisplayStringAt+0xd2>
 8009d22:	2b01      	cmp	r3, #1
 8009d24:	d002      	beq.n	8009d2c <BSP_LCD_DisplayStringAt+0x74>
 8009d26:	2b02      	cmp	r3, #2
 8009d28:	d019      	beq.n	8009d5e <BSP_LCD_DisplayStringAt+0xa6>
 8009d2a:	e02e      	b.n	8009d8a <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8009d2c:	693a      	ldr	r2, [r7, #16]
 8009d2e:	69bb      	ldr	r3, [r7, #24]
 8009d30:	1ad1      	subs	r1, r2, r3
 8009d32:	4b43      	ldr	r3, [pc, #268]	@ (8009e40 <BSP_LCD_DisplayStringAt+0x188>)
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	4843      	ldr	r0, [pc, #268]	@ (8009e44 <BSP_LCD_DisplayStringAt+0x18c>)
 8009d38:	4613      	mov	r3, r2
 8009d3a:	005b      	lsls	r3, r3, #1
 8009d3c:	4413      	add	r3, r2
 8009d3e:	009b      	lsls	r3, r3, #2
 8009d40:	4403      	add	r3, r0
 8009d42:	3308      	adds	r3, #8
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	889b      	ldrh	r3, [r3, #4]
 8009d48:	fb01 f303 	mul.w	r3, r1, r3
 8009d4c:	085b      	lsrs	r3, r3, #1
 8009d4e:	b29a      	uxth	r2, r3
 8009d50:	89fb      	ldrh	r3, [r7, #14]
 8009d52:	4413      	add	r3, r2
 8009d54:	83fb      	strh	r3, [r7, #30]
      break;
 8009d56:	e01b      	b.n	8009d90 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8009d58:	89fb      	ldrh	r3, [r7, #14]
 8009d5a:	83fb      	strh	r3, [r7, #30]
      break;
 8009d5c:	e018      	b.n	8009d90 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8009d5e:	693a      	ldr	r2, [r7, #16]
 8009d60:	69bb      	ldr	r3, [r7, #24]
 8009d62:	1ad3      	subs	r3, r2, r3
 8009d64:	b299      	uxth	r1, r3
 8009d66:	4b36      	ldr	r3, [pc, #216]	@ (8009e40 <BSP_LCD_DisplayStringAt+0x188>)
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	4836      	ldr	r0, [pc, #216]	@ (8009e44 <BSP_LCD_DisplayStringAt+0x18c>)
 8009d6c:	4613      	mov	r3, r2
 8009d6e:	005b      	lsls	r3, r3, #1
 8009d70:	4413      	add	r3, r2
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	4403      	add	r3, r0
 8009d76:	3308      	adds	r3, #8
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	889b      	ldrh	r3, [r3, #4]
 8009d7c:	fb11 f303 	smulbb	r3, r1, r3
 8009d80:	b29a      	uxth	r2, r3
 8009d82:	89fb      	ldrh	r3, [r7, #14]
 8009d84:	1ad3      	subs	r3, r2, r3
 8009d86:	83fb      	strh	r3, [r7, #30]
      break;
 8009d88:	e002      	b.n	8009d90 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8009d8a:	89fb      	ldrh	r3, [r7, #14]
 8009d8c:	83fb      	strh	r3, [r7, #30]
      break;
 8009d8e:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8009d90:	8bfb      	ldrh	r3, [r7, #30]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d003      	beq.n	8009d9e <BSP_LCD_DisplayStringAt+0xe6>
 8009d96:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	da1d      	bge.n	8009dda <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8009d9e:	2301      	movs	r3, #1
 8009da0:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8009da2:	e01a      	b.n	8009dda <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	781a      	ldrb	r2, [r3, #0]
 8009da8:	89b9      	ldrh	r1, [r7, #12]
 8009daa:	8bfb      	ldrh	r3, [r7, #30]
 8009dac:	4618      	mov	r0, r3
 8009dae:	f7ff ff3f 	bl	8009c30 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8009db2:	4b23      	ldr	r3, [pc, #140]	@ (8009e40 <BSP_LCD_DisplayStringAt+0x188>)
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	4923      	ldr	r1, [pc, #140]	@ (8009e44 <BSP_LCD_DisplayStringAt+0x18c>)
 8009db8:	4613      	mov	r3, r2
 8009dba:	005b      	lsls	r3, r3, #1
 8009dbc:	4413      	add	r3, r2
 8009dbe:	009b      	lsls	r3, r3, #2
 8009dc0:	440b      	add	r3, r1
 8009dc2:	3308      	adds	r3, #8
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	889a      	ldrh	r2, [r3, #4]
 8009dc8:	8bfb      	ldrh	r3, [r7, #30]
 8009dca:	4413      	add	r3, r2
 8009dcc:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	60bb      	str	r3, [r7, #8]
    i++;
 8009dd4:	8bbb      	ldrh	r3, [r7, #28]
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	bf14      	ite	ne
 8009de2:	2301      	movne	r3, #1
 8009de4:	2300      	moveq	r3, #0
 8009de6:	b2dc      	uxtb	r4, r3
 8009de8:	f7ff fe08 	bl	80099fc <BSP_LCD_GetXSize>
 8009dec:	8bb9      	ldrh	r1, [r7, #28]
 8009dee:	4b14      	ldr	r3, [pc, #80]	@ (8009e40 <BSP_LCD_DisplayStringAt+0x188>)
 8009df0:	681a      	ldr	r2, [r3, #0]
 8009df2:	4d14      	ldr	r5, [pc, #80]	@ (8009e44 <BSP_LCD_DisplayStringAt+0x18c>)
 8009df4:	4613      	mov	r3, r2
 8009df6:	005b      	lsls	r3, r3, #1
 8009df8:	4413      	add	r3, r2
 8009dfa:	009b      	lsls	r3, r3, #2
 8009dfc:	442b      	add	r3, r5
 8009dfe:	3308      	adds	r3, #8
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	889b      	ldrh	r3, [r3, #4]
 8009e04:	fb01 f303 	mul.w	r3, r1, r3
 8009e08:	1ac3      	subs	r3, r0, r3
 8009e0a:	b299      	uxth	r1, r3
 8009e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8009e40 <BSP_LCD_DisplayStringAt+0x188>)
 8009e0e:	681a      	ldr	r2, [r3, #0]
 8009e10:	480c      	ldr	r0, [pc, #48]	@ (8009e44 <BSP_LCD_DisplayStringAt+0x18c>)
 8009e12:	4613      	mov	r3, r2
 8009e14:	005b      	lsls	r3, r3, #1
 8009e16:	4413      	add	r3, r2
 8009e18:	009b      	lsls	r3, r3, #2
 8009e1a:	4403      	add	r3, r0
 8009e1c:	3308      	adds	r3, #8
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	889b      	ldrh	r3, [r3, #4]
 8009e22:	4299      	cmp	r1, r3
 8009e24:	bf2c      	ite	cs
 8009e26:	2301      	movcs	r3, #1
 8009e28:	2300      	movcc	r3, #0
 8009e2a:	b2db      	uxtb	r3, r3
 8009e2c:	4023      	ands	r3, r4
 8009e2e:	b2db      	uxtb	r3, r3
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d1b7      	bne.n	8009da4 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8009e34:	bf00      	nop
 8009e36:	bf00      	nop
 8009e38:	3720      	adds	r7, #32
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bdb0      	pop	{r4, r5, r7, pc}
 8009e3e:	bf00      	nop
 8009e40:	200009c4 	.word	0x200009c4
 8009e44:	200009c8 	.word	0x200009c8

08009e48 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	4603      	mov	r3, r0
 8009e50:	6039      	str	r1, [r7, #0]
 8009e52:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8009e54:	f7ff feae 	bl	8009bb4 <BSP_LCD_GetFont>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	88db      	ldrh	r3, [r3, #6]
 8009e5c:	88fa      	ldrh	r2, [r7, #6]
 8009e5e:	fb12 f303 	smulbb	r3, r2, r3
 8009e62:	b299      	uxth	r1, r3
 8009e64:	2303      	movs	r3, #3
 8009e66:	683a      	ldr	r2, [r7, #0]
 8009e68:	2000      	movs	r0, #0
 8009e6a:	f7ff ff25 	bl	8009cb8 <BSP_LCD_DisplayStringAt>
}
 8009e6e:	bf00      	nop
 8009e70:	3708      	adds	r7, #8
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
	...

08009e78 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8009e78:	b5b0      	push	{r4, r5, r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	4603      	mov	r3, r0
 8009e80:	603a      	str	r2, [r7, #0]
 8009e82:	80fb      	strh	r3, [r7, #6]
 8009e84:	460b      	mov	r3, r1
 8009e86:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8009e88:	4b1d      	ldr	r3, [pc, #116]	@ (8009f00 <BSP_LCD_DrawPixel+0x88>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a1d      	ldr	r2, [pc, #116]	@ (8009f04 <BSP_LCD_DrawPixel+0x8c>)
 8009e8e:	2134      	movs	r1, #52	@ 0x34
 8009e90:	fb01 f303 	mul.w	r3, r1, r3
 8009e94:	4413      	add	r3, r2
 8009e96:	3348      	adds	r3, #72	@ 0x48
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	2b02      	cmp	r3, #2
 8009e9c:	d116      	bne.n	8009ecc <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8009e9e:	4b18      	ldr	r3, [pc, #96]	@ (8009f00 <BSP_LCD_DrawPixel+0x88>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	4a18      	ldr	r2, [pc, #96]	@ (8009f04 <BSP_LCD_DrawPixel+0x8c>)
 8009ea4:	2134      	movs	r1, #52	@ 0x34
 8009ea6:	fb01 f303 	mul.w	r3, r1, r3
 8009eaa:	4413      	add	r3, r2
 8009eac:	335c      	adds	r3, #92	@ 0x5c
 8009eae:	681c      	ldr	r4, [r3, #0]
 8009eb0:	88bd      	ldrh	r5, [r7, #4]
 8009eb2:	f7ff fda3 	bl	80099fc <BSP_LCD_GetXSize>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	fb03 f205 	mul.w	r2, r3, r5
 8009ebc:	88fb      	ldrh	r3, [r7, #6]
 8009ebe:	4413      	add	r3, r2
 8009ec0:	005b      	lsls	r3, r3, #1
 8009ec2:	4423      	add	r3, r4
 8009ec4:	683a      	ldr	r2, [r7, #0]
 8009ec6:	b292      	uxth	r2, r2
 8009ec8:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8009eca:	e015      	b.n	8009ef8 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8009ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8009f00 <BSP_LCD_DrawPixel+0x88>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4a0c      	ldr	r2, [pc, #48]	@ (8009f04 <BSP_LCD_DrawPixel+0x8c>)
 8009ed2:	2134      	movs	r1, #52	@ 0x34
 8009ed4:	fb01 f303 	mul.w	r3, r1, r3
 8009ed8:	4413      	add	r3, r2
 8009eda:	335c      	adds	r3, #92	@ 0x5c
 8009edc:	681c      	ldr	r4, [r3, #0]
 8009ede:	88bd      	ldrh	r5, [r7, #4]
 8009ee0:	f7ff fd8c 	bl	80099fc <BSP_LCD_GetXSize>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	fb03 f205 	mul.w	r2, r3, r5
 8009eea:	88fb      	ldrh	r3, [r7, #6]
 8009eec:	4413      	add	r3, r2
 8009eee:	009b      	lsls	r3, r3, #2
 8009ef0:	4423      	add	r3, r4
 8009ef2:	461a      	mov	r2, r3
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	6013      	str	r3, [r2, #0]
}
 8009ef8:	bf00      	nop
 8009efa:	3708      	adds	r7, #8
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bdb0      	pop	{r4, r5, r7, pc}
 8009f00:	200009c4 	.word	0x200009c4
 8009f04:	200008dc 	.word	0x200008dc

08009f08 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8009f08:	b590      	push	{r4, r7, lr}
 8009f0a:	b08b      	sub	sp, #44	@ 0x2c
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	60f8      	str	r0, [r7, #12]
 8009f10:	60b9      	str	r1, [r7, #8]
 8009f12:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8009f14:	2300      	movs	r3, #0
 8009f16:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f18:	2300      	movs	r3, #0
 8009f1a:	61bb      	str	r3, [r7, #24]
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	617b      	str	r3, [r7, #20]
 8009f20:	2300      	movs	r3, #0
 8009f22:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 8009f24:	2300      	movs	r3, #0
 8009f26:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	330a      	adds	r3, #10
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	461a      	mov	r2, r3
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	330b      	adds	r3, #11
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	021b      	lsls	r3, r3, #8
 8009f38:	441a      	add	r2, r3
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	330c      	adds	r3, #12
 8009f3e:	781b      	ldrb	r3, [r3, #0]
 8009f40:	041b      	lsls	r3, r3, #16
 8009f42:	441a      	add	r2, r3
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	330d      	adds	r3, #13
 8009f48:	781b      	ldrb	r3, [r3, #0]
 8009f4a:	061b      	lsls	r3, r3, #24
 8009f4c:	4413      	add	r3, r2
 8009f4e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	3312      	adds	r3, #18
 8009f54:	781b      	ldrb	r3, [r3, #0]
 8009f56:	461a      	mov	r2, r3
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	3313      	adds	r3, #19
 8009f5c:	781b      	ldrb	r3, [r3, #0]
 8009f5e:	021b      	lsls	r3, r3, #8
 8009f60:	441a      	add	r2, r3
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	3314      	adds	r3, #20
 8009f66:	781b      	ldrb	r3, [r3, #0]
 8009f68:	041b      	lsls	r3, r3, #16
 8009f6a:	441a      	add	r2, r3
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	3315      	adds	r3, #21
 8009f70:	781b      	ldrb	r3, [r3, #0]
 8009f72:	061b      	lsls	r3, r3, #24
 8009f74:	4413      	add	r3, r2
 8009f76:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	3316      	adds	r3, #22
 8009f7c:	781b      	ldrb	r3, [r3, #0]
 8009f7e:	461a      	mov	r2, r3
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	3317      	adds	r3, #23
 8009f84:	781b      	ldrb	r3, [r3, #0]
 8009f86:	021b      	lsls	r3, r3, #8
 8009f88:	441a      	add	r2, r3
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	3318      	adds	r3, #24
 8009f8e:	781b      	ldrb	r3, [r3, #0]
 8009f90:	041b      	lsls	r3, r3, #16
 8009f92:	441a      	add	r2, r3
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	3319      	adds	r3, #25
 8009f98:	781b      	ldrb	r3, [r3, #0]
 8009f9a:	061b      	lsls	r3, r3, #24
 8009f9c:	4413      	add	r3, r2
 8009f9e:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	331c      	adds	r3, #28
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	331d      	adds	r3, #29
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	021b      	lsls	r3, r3, #8
 8009fb0:	4413      	add	r3, r2
 8009fb2:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8009fb4:	4b2b      	ldr	r3, [pc, #172]	@ (800a064 <BSP_LCD_DrawBitmap+0x15c>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4a2b      	ldr	r2, [pc, #172]	@ (800a068 <BSP_LCD_DrawBitmap+0x160>)
 8009fba:	2134      	movs	r1, #52	@ 0x34
 8009fbc:	fb01 f303 	mul.w	r3, r1, r3
 8009fc0:	4413      	add	r3, r2
 8009fc2:	335c      	adds	r3, #92	@ 0x5c
 8009fc4:	681c      	ldr	r4, [r3, #0]
 8009fc6:	f7ff fd19 	bl	80099fc <BSP_LCD_GetXSize>
 8009fca:	4602      	mov	r2, r0
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	fb03 f202 	mul.w	r2, r3, r2
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	4413      	add	r3, r2
 8009fd6:	009b      	lsls	r3, r3, #2
 8009fd8:	4423      	add	r3, r4
 8009fda:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	3b20      	subs	r3, #32
 8009fe0:	2b07      	cmp	r3, #7
 8009fe2:	d802      	bhi.n	8009fea <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	61fb      	str	r3, [r7, #28]
 8009fe8:	e008      	b.n	8009ffc <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	3b10      	subs	r3, #16
 8009fee:	2b07      	cmp	r3, #7
 8009ff0:	d802      	bhi.n	8009ff8 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 8009ff2:	2302      	movs	r3, #2
 8009ff4:	61fb      	str	r3, [r7, #28]
 8009ff6:	e001      	b.n	8009ffc <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	3b01      	subs	r3, #1
 800a000:	69ba      	ldr	r2, [r7, #24]
 800a002:	fb02 f303 	mul.w	r3, r2, r3
 800a006:	693a      	ldr	r2, [r7, #16]
 800a008:	08d2      	lsrs	r2, r2, #3
 800a00a:	fb03 f202 	mul.w	r2, r3, r2
 800a00e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a010:	4413      	add	r3, r2
 800a012:	687a      	ldr	r2, [r7, #4]
 800a014:	4413      	add	r3, r2
 800a016:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 800a018:	2300      	movs	r3, #0
 800a01a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a01c:	e018      	b.n	800a050 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 800a01e:	6a39      	ldr	r1, [r7, #32]
 800a020:	69fb      	ldr	r3, [r7, #28]
 800a022:	69ba      	ldr	r2, [r7, #24]
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f000 fa39 	bl	800a49c <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 800a02a:	f7ff fce7 	bl	80099fc <BSP_LCD_GetXSize>
 800a02e:	4603      	mov	r3, r0
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	6a3a      	ldr	r2, [r7, #32]
 800a034:	4413      	add	r3, r2
 800a036:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	08db      	lsrs	r3, r3, #3
 800a03c:	69ba      	ldr	r2, [r7, #24]
 800a03e:	fb02 f303 	mul.w	r3, r2, r3
 800a042:	425b      	negs	r3, r3
 800a044:	687a      	ldr	r2, [r7, #4]
 800a046:	4413      	add	r3, r2
 800a048:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 800a04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a04c:	3301      	adds	r3, #1
 800a04e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a050:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	429a      	cmp	r2, r3
 800a056:	d3e2      	bcc.n	800a01e <BSP_LCD_DrawBitmap+0x116>
  } 
}
 800a058:	bf00      	nop
 800a05a:	bf00      	nop
 800a05c:	372c      	adds	r7, #44	@ 0x2c
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd90      	pop	{r4, r7, pc}
 800a062:	bf00      	nop
 800a064:	200009c4 	.word	0x200009c4
 800a068:	200008dc 	.word	0x200008dc

0800a06c <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 800a070:	4b0a      	ldr	r3, [pc, #40]	@ (800a09c <BSP_LCD_DisplayOn+0x30>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	699a      	ldr	r2, [r3, #24]
 800a076:	4b09      	ldr	r3, [pc, #36]	@ (800a09c <BSP_LCD_DisplayOn+0x30>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f042 0201 	orr.w	r2, r2, #1
 800a07e:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 800a080:	2201      	movs	r2, #1
 800a082:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800a086:	4806      	ldr	r0, [pc, #24]	@ (800a0a0 <BSP_LCD_DisplayOn+0x34>)
 800a088:	f7f8 f93a 	bl	8002300 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 800a08c:	2201      	movs	r2, #1
 800a08e:	2108      	movs	r1, #8
 800a090:	4804      	ldr	r0, [pc, #16]	@ (800a0a4 <BSP_LCD_DisplayOn+0x38>)
 800a092:	f7f8 f935 	bl	8002300 <HAL_GPIO_WritePin>
}
 800a096:	bf00      	nop
 800a098:	bd80      	pop	{r7, pc}
 800a09a:	bf00      	nop
 800a09c:	200008dc 	.word	0x200008dc
 800a0a0:	40022000 	.word	0x40022000
 800a0a4:	40022800 	.word	0x40022800

0800a0a8 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b090      	sub	sp, #64	@ 0x40
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800a0b2:	4b64      	ldr	r3, [pc, #400]	@ (800a244 <BSP_LCD_MspInit+0x19c>)
 800a0b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0b6:	4a63      	ldr	r2, [pc, #396]	@ (800a244 <BSP_LCD_MspInit+0x19c>)
 800a0b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a0bc:	6453      	str	r3, [r2, #68]	@ 0x44
 800a0be:	4b61      	ldr	r3, [pc, #388]	@ (800a244 <BSP_LCD_MspInit+0x19c>)
 800a0c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0c2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a0c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a0c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800a0ca:	4b5e      	ldr	r3, [pc, #376]	@ (800a244 <BSP_LCD_MspInit+0x19c>)
 800a0cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0ce:	4a5d      	ldr	r2, [pc, #372]	@ (800a244 <BSP_LCD_MspInit+0x19c>)
 800a0d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a0d4:	6313      	str	r3, [r2, #48]	@ 0x30
 800a0d6:	4b5b      	ldr	r3, [pc, #364]	@ (800a244 <BSP_LCD_MspInit+0x19c>)
 800a0d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a0de:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a0e2:	4b58      	ldr	r3, [pc, #352]	@ (800a244 <BSP_LCD_MspInit+0x19c>)
 800a0e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0e6:	4a57      	ldr	r2, [pc, #348]	@ (800a244 <BSP_LCD_MspInit+0x19c>)
 800a0e8:	f043 0310 	orr.w	r3, r3, #16
 800a0ec:	6313      	str	r3, [r2, #48]	@ 0x30
 800a0ee:	4b55      	ldr	r3, [pc, #340]	@ (800a244 <BSP_LCD_MspInit+0x19c>)
 800a0f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0f2:	f003 0310 	and.w	r3, r3, #16
 800a0f6:	623b      	str	r3, [r7, #32]
 800a0f8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800a0fa:	4b52      	ldr	r3, [pc, #328]	@ (800a244 <BSP_LCD_MspInit+0x19c>)
 800a0fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0fe:	4a51      	ldr	r2, [pc, #324]	@ (800a244 <BSP_LCD_MspInit+0x19c>)
 800a100:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a104:	6313      	str	r3, [r2, #48]	@ 0x30
 800a106:	4b4f      	ldr	r3, [pc, #316]	@ (800a244 <BSP_LCD_MspInit+0x19c>)
 800a108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a10a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a10e:	61fb      	str	r3, [r7, #28]
 800a110:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800a112:	4b4c      	ldr	r3, [pc, #304]	@ (800a244 <BSP_LCD_MspInit+0x19c>)
 800a114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a116:	4a4b      	ldr	r2, [pc, #300]	@ (800a244 <BSP_LCD_MspInit+0x19c>)
 800a118:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a11c:	6313      	str	r3, [r2, #48]	@ 0x30
 800a11e:	4b49      	ldr	r3, [pc, #292]	@ (800a244 <BSP_LCD_MspInit+0x19c>)
 800a120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a126:	61bb      	str	r3, [r7, #24]
 800a128:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800a12a:	4b46      	ldr	r3, [pc, #280]	@ (800a244 <BSP_LCD_MspInit+0x19c>)
 800a12c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a12e:	4a45      	ldr	r2, [pc, #276]	@ (800a244 <BSP_LCD_MspInit+0x19c>)
 800a130:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a134:	6313      	str	r3, [r2, #48]	@ 0x30
 800a136:	4b43      	ldr	r3, [pc, #268]	@ (800a244 <BSP_LCD_MspInit+0x19c>)
 800a138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a13a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a13e:	617b      	str	r3, [r7, #20]
 800a140:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800a142:	4b40      	ldr	r3, [pc, #256]	@ (800a244 <BSP_LCD_MspInit+0x19c>)
 800a144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a146:	4a3f      	ldr	r2, [pc, #252]	@ (800a244 <BSP_LCD_MspInit+0x19c>)
 800a148:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a14c:	6313      	str	r3, [r2, #48]	@ 0x30
 800a14e:	4b3d      	ldr	r3, [pc, #244]	@ (800a244 <BSP_LCD_MspInit+0x19c>)
 800a150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a152:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a156:	613b      	str	r3, [r7, #16]
 800a158:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800a15a:	4b3a      	ldr	r3, [pc, #232]	@ (800a244 <BSP_LCD_MspInit+0x19c>)
 800a15c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a15e:	4a39      	ldr	r2, [pc, #228]	@ (800a244 <BSP_LCD_MspInit+0x19c>)
 800a160:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a164:	6313      	str	r3, [r2, #48]	@ 0x30
 800a166:	4b37      	ldr	r3, [pc, #220]	@ (800a244 <BSP_LCD_MspInit+0x19c>)
 800a168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a16a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a16e:	60fb      	str	r3, [r7, #12]
 800a170:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800a172:	4b34      	ldr	r3, [pc, #208]	@ (800a244 <BSP_LCD_MspInit+0x19c>)
 800a174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a176:	4a33      	ldr	r2, [pc, #204]	@ (800a244 <BSP_LCD_MspInit+0x19c>)
 800a178:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a17c:	6313      	str	r3, [r2, #48]	@ 0x30
 800a17e:	4b31      	ldr	r3, [pc, #196]	@ (800a244 <BSP_LCD_MspInit+0x19c>)
 800a180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a182:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a186:	60bb      	str	r3, [r7, #8]
 800a188:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 800a18a:	2310      	movs	r3, #16
 800a18c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800a18e:	2302      	movs	r3, #2
 800a190:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800a192:	2300      	movs	r3, #0
 800a194:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800a196:	2302      	movs	r3, #2
 800a198:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800a19a:	230e      	movs	r3, #14
 800a19c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800a19e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	4828      	ldr	r0, [pc, #160]	@ (800a248 <BSP_LCD_MspInit+0x1a0>)
 800a1a6:	f7f7 fee7 	bl	8001f78 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800a1aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a1ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800a1b0:	2302      	movs	r3, #2
 800a1b2:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 800a1b4:	2309      	movs	r3, #9
 800a1b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800a1b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a1bc:	4619      	mov	r1, r3
 800a1be:	4823      	ldr	r0, [pc, #140]	@ (800a24c <BSP_LCD_MspInit+0x1a4>)
 800a1c0:	f7f7 feda 	bl	8001f78 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 800a1c4:	f44f 4366 	mov.w	r3, #58880	@ 0xe600
 800a1c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800a1ca:	2302      	movs	r3, #2
 800a1cc:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800a1ce:	230e      	movs	r3, #14
 800a1d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800a1d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a1d6:	4619      	mov	r1, r3
 800a1d8:	481d      	ldr	r0, [pc, #116]	@ (800a250 <BSP_LCD_MspInit+0x1a8>)
 800a1da:	f7f7 fecd 	bl	8001f78 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800a1de:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 800a1e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800a1e4:	2302      	movs	r3, #2
 800a1e6:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800a1e8:	230e      	movs	r3, #14
 800a1ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 800a1ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	4818      	ldr	r0, [pc, #96]	@ (800a254 <BSP_LCD_MspInit+0x1ac>)
 800a1f4:	f7f7 fec0 	bl	8001f78 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 800a1f8:	23f7      	movs	r3, #247	@ 0xf7
 800a1fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800a1fc:	2302      	movs	r3, #2
 800a1fe:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800a200:	230e      	movs	r3, #14
 800a202:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 800a204:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a208:	4619      	mov	r1, r3
 800a20a:	4813      	ldr	r0, [pc, #76]	@ (800a258 <BSP_LCD_MspInit+0x1b0>)
 800a20c:	f7f7 feb4 	bl	8001f78 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 800a210:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a214:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800a216:	2301      	movs	r3, #1
 800a218:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800a21a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a21e:	4619      	mov	r1, r3
 800a220:	480b      	ldr	r0, [pc, #44]	@ (800a250 <BSP_LCD_MspInit+0x1a8>)
 800a222:	f7f7 fea9 	bl	8001f78 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800a226:	2308      	movs	r3, #8
 800a228:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800a22a:	2301      	movs	r3, #1
 800a22c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800a22e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a232:	4619      	mov	r1, r3
 800a234:	4808      	ldr	r0, [pc, #32]	@ (800a258 <BSP_LCD_MspInit+0x1b0>)
 800a236:	f7f7 fe9f 	bl	8001f78 <HAL_GPIO_Init>
}
 800a23a:	bf00      	nop
 800a23c:	3740      	adds	r7, #64	@ 0x40
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
 800a242:	bf00      	nop
 800a244:	40023800 	.word	0x40023800
 800a248:	40021000 	.word	0x40021000
 800a24c:	40021800 	.word	0x40021800
 800a250:	40022000 	.word	0x40022000
 800a254:	40022400 	.word	0x40022400
 800a258:	40022800 	.word	0x40022800

0800a25c <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800a266:	4b0a      	ldr	r3, [pc, #40]	@ (800a290 <BSP_LCD_ClockConfig+0x34>)
 800a268:	2208      	movs	r2, #8
 800a26a:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 800a26c:	4b08      	ldr	r3, [pc, #32]	@ (800a290 <BSP_LCD_ClockConfig+0x34>)
 800a26e:	22c0      	movs	r2, #192	@ 0xc0
 800a270:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800a272:	4b07      	ldr	r3, [pc, #28]	@ (800a290 <BSP_LCD_ClockConfig+0x34>)
 800a274:	2205      	movs	r2, #5
 800a276:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800a278:	4b05      	ldr	r3, [pc, #20]	@ (800a290 <BSP_LCD_ClockConfig+0x34>)
 800a27a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800a27e:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 800a280:	4803      	ldr	r0, [pc, #12]	@ (800a290 <BSP_LCD_ClockConfig+0x34>)
 800a282:	f7f9 fe79 	bl	8003f78 <HAL_RCCEx_PeriphCLKConfig>
}
 800a286:	bf00      	nop
 800a288:	3708      	adds	r7, #8
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
 800a28e:	bf00      	nop
 800a290:	200009e0 	.word	0x200009e0

0800a294 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b088      	sub	sp, #32
 800a298:	af00      	add	r7, sp, #0
 800a29a:	4603      	mov	r3, r0
 800a29c:	603a      	str	r2, [r7, #0]
 800a29e:	80fb      	strh	r3, [r7, #6]
 800a2a0:	460b      	mov	r3, r1
 800a2a2:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	61fb      	str	r3, [r7, #28]
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 800a2ac:	4b53      	ldr	r3, [pc, #332]	@ (800a3fc <DrawChar+0x168>)
 800a2ae:	681a      	ldr	r2, [r3, #0]
 800a2b0:	4953      	ldr	r1, [pc, #332]	@ (800a400 <DrawChar+0x16c>)
 800a2b2:	4613      	mov	r3, r2
 800a2b4:	005b      	lsls	r3, r3, #1
 800a2b6:	4413      	add	r3, r2
 800a2b8:	009b      	lsls	r3, r3, #2
 800a2ba:	440b      	add	r3, r1
 800a2bc:	3308      	adds	r3, #8
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	88db      	ldrh	r3, [r3, #6]
 800a2c2:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800a2c4:	4b4d      	ldr	r3, [pc, #308]	@ (800a3fc <DrawChar+0x168>)
 800a2c6:	681a      	ldr	r2, [r3, #0]
 800a2c8:	494d      	ldr	r1, [pc, #308]	@ (800a400 <DrawChar+0x16c>)
 800a2ca:	4613      	mov	r3, r2
 800a2cc:	005b      	lsls	r3, r3, #1
 800a2ce:	4413      	add	r3, r2
 800a2d0:	009b      	lsls	r3, r3, #2
 800a2d2:	440b      	add	r3, r1
 800a2d4:	3308      	adds	r3, #8
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	889b      	ldrh	r3, [r3, #4]
 800a2da:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 800a2dc:	8a3b      	ldrh	r3, [r7, #16]
 800a2de:	3307      	adds	r3, #7
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	da00      	bge.n	800a2e6 <DrawChar+0x52>
 800a2e4:	3307      	adds	r3, #7
 800a2e6:	10db      	asrs	r3, r3, #3
 800a2e8:	b2db      	uxtb	r3, r3
 800a2ea:	00db      	lsls	r3, r3, #3
 800a2ec:	b2da      	uxtb	r2, r3
 800a2ee:	8a3b      	ldrh	r3, [r7, #16]
 800a2f0:	b2db      	uxtb	r3, r3
 800a2f2:	1ad3      	subs	r3, r2, r3
 800a2f4:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	61fb      	str	r3, [r7, #28]
 800a2fa:	e076      	b.n	800a3ea <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800a2fc:	8a3b      	ldrh	r3, [r7, #16]
 800a2fe:	3307      	adds	r3, #7
 800a300:	2b00      	cmp	r3, #0
 800a302:	da00      	bge.n	800a306 <DrawChar+0x72>
 800a304:	3307      	adds	r3, #7
 800a306:	10db      	asrs	r3, r3, #3
 800a308:	461a      	mov	r2, r3
 800a30a:	69fb      	ldr	r3, [r7, #28]
 800a30c:	fb02 f303 	mul.w	r3, r2, r3
 800a310:	683a      	ldr	r2, [r7, #0]
 800a312:	4413      	add	r3, r2
 800a314:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 800a316:	8a3b      	ldrh	r3, [r7, #16]
 800a318:	3307      	adds	r3, #7
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	da00      	bge.n	800a320 <DrawChar+0x8c>
 800a31e:	3307      	adds	r3, #7
 800a320:	10db      	asrs	r3, r3, #3
 800a322:	2b01      	cmp	r3, #1
 800a324:	d002      	beq.n	800a32c <DrawChar+0x98>
 800a326:	2b02      	cmp	r3, #2
 800a328:	d004      	beq.n	800a334 <DrawChar+0xa0>
 800a32a:	e00c      	b.n	800a346 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	781b      	ldrb	r3, [r3, #0]
 800a330:	617b      	str	r3, [r7, #20]
      break;
 800a332:	e016      	b.n	800a362 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	781b      	ldrb	r3, [r3, #0]
 800a338:	021b      	lsls	r3, r3, #8
 800a33a:	68ba      	ldr	r2, [r7, #8]
 800a33c:	3201      	adds	r2, #1
 800a33e:	7812      	ldrb	r2, [r2, #0]
 800a340:	4313      	orrs	r3, r2
 800a342:	617b      	str	r3, [r7, #20]
      break;
 800a344:	e00d      	b.n	800a362 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	781b      	ldrb	r3, [r3, #0]
 800a34a:	041a      	lsls	r2, r3, #16
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	3301      	adds	r3, #1
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	021b      	lsls	r3, r3, #8
 800a354:	4313      	orrs	r3, r2
 800a356:	68ba      	ldr	r2, [r7, #8]
 800a358:	3202      	adds	r2, #2
 800a35a:	7812      	ldrb	r2, [r2, #0]
 800a35c:	4313      	orrs	r3, r2
 800a35e:	617b      	str	r3, [r7, #20]
      break;
 800a360:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 800a362:	2300      	movs	r3, #0
 800a364:	61bb      	str	r3, [r7, #24]
 800a366:	e036      	b.n	800a3d6 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 800a368:	8a3a      	ldrh	r2, [r7, #16]
 800a36a:	69bb      	ldr	r3, [r7, #24]
 800a36c:	1ad2      	subs	r2, r2, r3
 800a36e:	7bfb      	ldrb	r3, [r7, #15]
 800a370:	4413      	add	r3, r2
 800a372:	3b01      	subs	r3, #1
 800a374:	2201      	movs	r2, #1
 800a376:	fa02 f303 	lsl.w	r3, r2, r3
 800a37a:	461a      	mov	r2, r3
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	4013      	ands	r3, r2
 800a380:	2b00      	cmp	r3, #0
 800a382:	d012      	beq.n	800a3aa <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800a384:	69bb      	ldr	r3, [r7, #24]
 800a386:	b29a      	uxth	r2, r3
 800a388:	88fb      	ldrh	r3, [r7, #6]
 800a38a:	4413      	add	r3, r2
 800a38c:	b298      	uxth	r0, r3
 800a38e:	4b1b      	ldr	r3, [pc, #108]	@ (800a3fc <DrawChar+0x168>)
 800a390:	681a      	ldr	r2, [r3, #0]
 800a392:	491b      	ldr	r1, [pc, #108]	@ (800a400 <DrawChar+0x16c>)
 800a394:	4613      	mov	r3, r2
 800a396:	005b      	lsls	r3, r3, #1
 800a398:	4413      	add	r3, r2
 800a39a:	009b      	lsls	r3, r3, #2
 800a39c:	440b      	add	r3, r1
 800a39e:	681a      	ldr	r2, [r3, #0]
 800a3a0:	88bb      	ldrh	r3, [r7, #4]
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	f7ff fd68 	bl	8009e78 <BSP_LCD_DrawPixel>
 800a3a8:	e012      	b.n	800a3d0 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800a3aa:	69bb      	ldr	r3, [r7, #24]
 800a3ac:	b29a      	uxth	r2, r3
 800a3ae:	88fb      	ldrh	r3, [r7, #6]
 800a3b0:	4413      	add	r3, r2
 800a3b2:	b298      	uxth	r0, r3
 800a3b4:	4b11      	ldr	r3, [pc, #68]	@ (800a3fc <DrawChar+0x168>)
 800a3b6:	681a      	ldr	r2, [r3, #0]
 800a3b8:	4911      	ldr	r1, [pc, #68]	@ (800a400 <DrawChar+0x16c>)
 800a3ba:	4613      	mov	r3, r2
 800a3bc:	005b      	lsls	r3, r3, #1
 800a3be:	4413      	add	r3, r2
 800a3c0:	009b      	lsls	r3, r3, #2
 800a3c2:	440b      	add	r3, r1
 800a3c4:	3304      	adds	r3, #4
 800a3c6:	681a      	ldr	r2, [r3, #0]
 800a3c8:	88bb      	ldrh	r3, [r7, #4]
 800a3ca:	4619      	mov	r1, r3
 800a3cc:	f7ff fd54 	bl	8009e78 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800a3d0:	69bb      	ldr	r3, [r7, #24]
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	61bb      	str	r3, [r7, #24]
 800a3d6:	8a3b      	ldrh	r3, [r7, #16]
 800a3d8:	69ba      	ldr	r2, [r7, #24]
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d3c4      	bcc.n	800a368 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 800a3de:	88bb      	ldrh	r3, [r7, #4]
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800a3e4:	69fb      	ldr	r3, [r7, #28]
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	61fb      	str	r3, [r7, #28]
 800a3ea:	8a7b      	ldrh	r3, [r7, #18]
 800a3ec:	69fa      	ldr	r2, [r7, #28]
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d384      	bcc.n	800a2fc <DrawChar+0x68>
  }
}
 800a3f2:	bf00      	nop
 800a3f4:	bf00      	nop
 800a3f6:	3720      	adds	r7, #32
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}
 800a3fc:	200009c4 	.word	0x200009c4
 800a400:	200009c8 	.word	0x200009c8

0800a404 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b086      	sub	sp, #24
 800a408:	af02      	add	r7, sp, #8
 800a40a:	60f8      	str	r0, [r7, #12]
 800a40c:	60b9      	str	r1, [r7, #8]
 800a40e:	607a      	str	r2, [r7, #4]
 800a410:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800a412:	4b1e      	ldr	r3, [pc, #120]	@ (800a48c <LL_FillBuffer+0x88>)
 800a414:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800a418:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800a41a:	4b1d      	ldr	r3, [pc, #116]	@ (800a490 <LL_FillBuffer+0x8c>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	4a1d      	ldr	r2, [pc, #116]	@ (800a494 <LL_FillBuffer+0x90>)
 800a420:	2134      	movs	r1, #52	@ 0x34
 800a422:	fb01 f303 	mul.w	r3, r1, r3
 800a426:	4413      	add	r3, r2
 800a428:	3348      	adds	r3, #72	@ 0x48
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	2b02      	cmp	r3, #2
 800a42e:	d103      	bne.n	800a438 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 800a430:	4b16      	ldr	r3, [pc, #88]	@ (800a48c <LL_FillBuffer+0x88>)
 800a432:	2202      	movs	r2, #2
 800a434:	609a      	str	r2, [r3, #8]
 800a436:	e002      	b.n	800a43e <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800a438:	4b14      	ldr	r3, [pc, #80]	@ (800a48c <LL_FillBuffer+0x88>)
 800a43a:	2200      	movs	r2, #0
 800a43c:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800a43e:	4a13      	ldr	r2, [pc, #76]	@ (800a48c <LL_FillBuffer+0x88>)
 800a440:	69bb      	ldr	r3, [r7, #24]
 800a442:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 800a444:	4b11      	ldr	r3, [pc, #68]	@ (800a48c <LL_FillBuffer+0x88>)
 800a446:	4a14      	ldr	r2, [pc, #80]	@ (800a498 <LL_FillBuffer+0x94>)
 800a448:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800a44a:	4810      	ldr	r0, [pc, #64]	@ (800a48c <LL_FillBuffer+0x88>)
 800a44c:	f7f7 fb08 	bl	8001a60 <HAL_DMA2D_Init>
 800a450:	4603      	mov	r3, r0
 800a452:	2b00      	cmp	r3, #0
 800a454:	d115      	bne.n	800a482 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800a456:	68f9      	ldr	r1, [r7, #12]
 800a458:	480c      	ldr	r0, [pc, #48]	@ (800a48c <LL_FillBuffer+0x88>)
 800a45a:	f7f7 fc5f 	bl	8001d1c <HAL_DMA2D_ConfigLayer>
 800a45e:	4603      	mov	r3, r0
 800a460:	2b00      	cmp	r3, #0
 800a462:	d10e      	bne.n	800a482 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800a464:	68ba      	ldr	r2, [r7, #8]
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	9300      	str	r3, [sp, #0]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	69f9      	ldr	r1, [r7, #28]
 800a46e:	4807      	ldr	r0, [pc, #28]	@ (800a48c <LL_FillBuffer+0x88>)
 800a470:	f7f7 fb40 	bl	8001af4 <HAL_DMA2D_Start>
 800a474:	4603      	mov	r3, r0
 800a476:	2b00      	cmp	r3, #0
 800a478:	d103      	bne.n	800a482 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800a47a:	210a      	movs	r1, #10
 800a47c:	4803      	ldr	r0, [pc, #12]	@ (800a48c <LL_FillBuffer+0x88>)
 800a47e:	f7f7 fb64 	bl	8001b4a <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800a482:	bf00      	nop
 800a484:	3710      	adds	r7, #16
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}
 800a48a:	bf00      	nop
 800a48c:	20000984 	.word	0x20000984
 800a490:	200009c4 	.word	0x200009c4
 800a494:	200008dc 	.word	0x200008dc
 800a498:	4002b000 	.word	0x4002b000

0800a49c <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b086      	sub	sp, #24
 800a4a0:	af02      	add	r7, sp, #8
 800a4a2:	60f8      	str	r0, [r7, #12]
 800a4a4:	60b9      	str	r1, [r7, #8]
 800a4a6:	607a      	str	r2, [r7, #4]
 800a4a8:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 800a4aa:	4b1c      	ldr	r3, [pc, #112]	@ (800a51c <LL_ConvertLineToARGB8888+0x80>)
 800a4ac:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800a4b0:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800a4b2:	4b1a      	ldr	r3, [pc, #104]	@ (800a51c <LL_ConvertLineToARGB8888+0x80>)
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 800a4b8:	4b18      	ldr	r3, [pc, #96]	@ (800a51c <LL_ConvertLineToARGB8888+0x80>)
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800a4be:	4b17      	ldr	r3, [pc, #92]	@ (800a51c <LL_ConvertLineToARGB8888+0x80>)
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 800a4c4:	4b15      	ldr	r3, [pc, #84]	@ (800a51c <LL_ConvertLineToARGB8888+0x80>)
 800a4c6:	22ff      	movs	r2, #255	@ 0xff
 800a4c8:	635a      	str	r2, [r3, #52]	@ 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 800a4ca:	4a14      	ldr	r2, [pc, #80]	@ (800a51c <LL_ConvertLineToARGB8888+0x80>)
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 800a4d0:	4b12      	ldr	r3, [pc, #72]	@ (800a51c <LL_ConvertLineToARGB8888+0x80>)
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	629a      	str	r2, [r3, #40]	@ 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 800a4d6:	4b11      	ldr	r3, [pc, #68]	@ (800a51c <LL_ConvertLineToARGB8888+0x80>)
 800a4d8:	4a11      	ldr	r2, [pc, #68]	@ (800a520 <LL_ConvertLineToARGB8888+0x84>)
 800a4da:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800a4dc:	480f      	ldr	r0, [pc, #60]	@ (800a51c <LL_ConvertLineToARGB8888+0x80>)
 800a4de:	f7f7 fabf 	bl	8001a60 <HAL_DMA2D_Init>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d115      	bne.n	800a514 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 800a4e8:	2101      	movs	r1, #1
 800a4ea:	480c      	ldr	r0, [pc, #48]	@ (800a51c <LL_ConvertLineToARGB8888+0x80>)
 800a4ec:	f7f7 fc16 	bl	8001d1c <HAL_DMA2D_ConfigLayer>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d10e      	bne.n	800a514 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 800a4f6:	68f9      	ldr	r1, [r7, #12]
 800a4f8:	68ba      	ldr	r2, [r7, #8]
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	9300      	str	r3, [sp, #0]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	4806      	ldr	r0, [pc, #24]	@ (800a51c <LL_ConvertLineToARGB8888+0x80>)
 800a502:	f7f7 faf7 	bl	8001af4 <HAL_DMA2D_Start>
 800a506:	4603      	mov	r3, r0
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d103      	bne.n	800a514 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800a50c:	210a      	movs	r1, #10
 800a50e:	4803      	ldr	r0, [pc, #12]	@ (800a51c <LL_ConvertLineToARGB8888+0x80>)
 800a510:	f7f7 fb1b 	bl	8001b4a <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800a514:	bf00      	nop
 800a516:	3710      	adds	r7, #16
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}
 800a51c:	20000984 	.word	0x20000984
 800a520:	4002b000 	.word	0x4002b000

0800a524 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{ 
 800a524:	b580      	push	{r7, lr}
 800a526:	b082      	sub	sp, #8
 800a528:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a52a:	2300      	movs	r3, #0
 800a52c:	71fb      	strb	r3, [r7, #7]
  
  /* uSD device interface configuration */
  uSdHandle.Instance = SDMMC1;
 800a52e:	4b20      	ldr	r3, [pc, #128]	@ (800a5b0 <BSP_SD_Init+0x8c>)
 800a530:	4a20      	ldr	r2, [pc, #128]	@ (800a5b4 <BSP_SD_Init+0x90>)
 800a532:	601a      	str	r2, [r3, #0]

  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a534:	4b1e      	ldr	r3, [pc, #120]	@ (800a5b0 <BSP_SD_Init+0x8c>)
 800a536:	2200      	movs	r2, #0
 800a538:	605a      	str	r2, [r3, #4]
  uSdHandle.Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800a53a:	4b1d      	ldr	r3, [pc, #116]	@ (800a5b0 <BSP_SD_Init+0x8c>)
 800a53c:	2200      	movs	r2, #0
 800a53e:	609a      	str	r2, [r3, #8]
  uSdHandle.Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a540:	4b1b      	ldr	r3, [pc, #108]	@ (800a5b0 <BSP_SD_Init+0x8c>)
 800a542:	2200      	movs	r2, #0
 800a544:	60da      	str	r2, [r3, #12]
  uSdHandle.Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800a546:	4b1a      	ldr	r3, [pc, #104]	@ (800a5b0 <BSP_SD_Init+0x8c>)
 800a548:	2200      	movs	r2, #0
 800a54a:	611a      	str	r2, [r3, #16]
  uSdHandle.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a54c:	4b18      	ldr	r3, [pc, #96]	@ (800a5b0 <BSP_SD_Init+0x8c>)
 800a54e:	2200      	movs	r2, #0
 800a550:	615a      	str	r2, [r3, #20]
  uSdHandle.Init.ClockDiv            = SDMMC_TRANSFER_CLK_DIV;
 800a552:	4b17      	ldr	r3, [pc, #92]	@ (800a5b0 <BSP_SD_Init+0x8c>)
 800a554:	2200      	movs	r2, #0
 800a556:	619a      	str	r2, [r3, #24]
  
  /* Msp SD Detect pin initialization */
  BSP_SD_Detect_MspInit(&uSdHandle, NULL);
 800a558:	2100      	movs	r1, #0
 800a55a:	4815      	ldr	r0, [pc, #84]	@ (800a5b0 <BSP_SD_Init+0x8c>)
 800a55c:	f000 f968 	bl	800a830 <BSP_SD_Detect_MspInit>
  if(BSP_SD_IsDetected() != SD_PRESENT)   /* Check if SD card is present */
 800a560:	f000 f82a 	bl	800a5b8 <BSP_SD_IsDetected>
 800a564:	4603      	mov	r3, r0
 800a566:	2b01      	cmp	r3, #1
 800a568:	d001      	beq.n	800a56e <BSP_SD_Init+0x4a>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800a56a:	2302      	movs	r3, #2
 800a56c:	e01c      	b.n	800a5a8 <BSP_SD_Init+0x84>
  }
  
  /* Msp SD initialization */
  BSP_SD_MspInit(&uSdHandle, NULL);
 800a56e:	2100      	movs	r1, #0
 800a570:	480f      	ldr	r0, [pc, #60]	@ (800a5b0 <BSP_SD_Init+0x8c>)
 800a572:	f000 f871 	bl	800a658 <BSP_SD_MspInit>

  /* HAL SD initialization */
  if(HAL_SD_Init(&uSdHandle) != HAL_OK)
 800a576:	480e      	ldr	r0, [pc, #56]	@ (800a5b0 <BSP_SD_Init+0x8c>)
 800a578:	f7fa f8ee 	bl	8004758 <HAL_SD_Init>
 800a57c:	4603      	mov	r3, r0
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d001      	beq.n	800a586 <BSP_SD_Init+0x62>
  {
    sd_state = MSD_ERROR;
 800a582:	2301      	movs	r3, #1
 800a584:	71fb      	strb	r3, [r7, #7]
  }
  
  /* Configure SD Bus width */
  if(sd_state == MSD_OK)
 800a586:	79fb      	ldrb	r3, [r7, #7]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d10c      	bne.n	800a5a6 <BSP_SD_Init+0x82>
  {
    /* Enable wide operation */ 
    if(HAL_SD_ConfigWideBusOperation(&uSdHandle, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800a58c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a590:	4807      	ldr	r0, [pc, #28]	@ (800a5b0 <BSP_SD_Init+0x8c>)
 800a592:	f7fa fecb 	bl	800532c <HAL_SD_ConfigWideBusOperation>
 800a596:	4603      	mov	r3, r0
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d002      	beq.n	800a5a2 <BSP_SD_Init+0x7e>
    {
      sd_state = MSD_ERROR;
 800a59c:	2301      	movs	r3, #1
 800a59e:	71fb      	strb	r3, [r7, #7]
 800a5a0:	e001      	b.n	800a5a6 <BSP_SD_Init+0x82>
    }
    else
    {
      sd_state = MSD_OK;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	71fb      	strb	r3, [r7, #7]
    }
  }
  
  return  sd_state;
 800a5a6:	79fb      	ldrb	r3, [r7, #7]
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3708      	adds	r7, #8
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}
 800a5b0:	20000a64 	.word	0x20000a64
 800a5b4:	40012c00 	.word	0x40012c00

0800a5b8 <BSP_SD_IsDetected>:
/**
  * @brief  Detects if SD card is correctly plugged in the memory slot or not.
  * @retval Returns if SD is detected or not
  */
uint8_t BSP_SD_IsDetected(void)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b082      	sub	sp, #8
 800a5bc:	af00      	add	r7, sp, #0
  __IO uint8_t      status = SD_PRESENT;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	71fb      	strb	r3, [r7, #7]
  
  /* Check SD card detect pin */
  if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET)
 800a5c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800a5c6:	4807      	ldr	r0, [pc, #28]	@ (800a5e4 <BSP_SD_IsDetected+0x2c>)
 800a5c8:	f7f7 fe82 	bl	80022d0 <HAL_GPIO_ReadPin>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	2b01      	cmp	r3, #1
 800a5d0:	d101      	bne.n	800a5d6 <BSP_SD_IsDetected+0x1e>
  {
    status = SD_NOT_PRESENT;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a5d6:	79fb      	ldrb	r3, [r7, #7]
 800a5d8:	b2db      	uxtb	r3, r3
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3708      	adds	r7, #8
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}
 800a5e2:	bf00      	nop
 800a5e4:	40020800 	.word	0x40020800

0800a5e8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b086      	sub	sp, #24
 800a5ec:	af02      	add	r7, sp, #8
 800a5ee:	60f8      	str	r0, [r7, #12]
 800a5f0:	60b9      	str	r1, [r7, #8]
 800a5f2:	607a      	str	r2, [r7, #4]
 800a5f4:	603b      	str	r3, [r7, #0]
  if(HAL_SD_ReadBlocks(&uSdHandle, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	9300      	str	r3, [sp, #0]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	68ba      	ldr	r2, [r7, #8]
 800a5fe:	68f9      	ldr	r1, [r7, #12]
 800a600:	4806      	ldr	r0, [pc, #24]	@ (800a61c <BSP_SD_ReadBlocks+0x34>)
 800a602:	f7fa f942 	bl	800488a <HAL_SD_ReadBlocks>
 800a606:	4603      	mov	r3, r0
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d001      	beq.n	800a610 <BSP_SD_ReadBlocks+0x28>
  {
    return MSD_ERROR;
 800a60c:	2301      	movs	r3, #1
 800a60e:	e000      	b.n	800a612 <BSP_SD_ReadBlocks+0x2a>
  }
  else
  {
    return MSD_OK;
 800a610:	2300      	movs	r3, #0
  }
}
 800a612:	4618      	mov	r0, r3
 800a614:	3710      	adds	r7, #16
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}
 800a61a:	bf00      	nop
 800a61c:	20000a64 	.word	0x20000a64

0800a620 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b086      	sub	sp, #24
 800a624:	af02      	add	r7, sp, #8
 800a626:	60f8      	str	r0, [r7, #12]
 800a628:	60b9      	str	r1, [r7, #8]
 800a62a:	607a      	str	r2, [r7, #4]
 800a62c:	603b      	str	r3, [r7, #0]
  if(HAL_SD_WriteBlocks(&uSdHandle, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	9300      	str	r3, [sp, #0]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	68ba      	ldr	r2, [r7, #8]
 800a636:	68f9      	ldr	r1, [r7, #12]
 800a638:	4806      	ldr	r0, [pc, #24]	@ (800a654 <BSP_SD_WriteBlocks+0x34>)
 800a63a:	f7fa fabc 	bl	8004bb6 <HAL_SD_WriteBlocks>
 800a63e:	4603      	mov	r3, r0
 800a640:	2b00      	cmp	r3, #0
 800a642:	d001      	beq.n	800a648 <BSP_SD_WriteBlocks+0x28>
  {
    return MSD_ERROR;
 800a644:	2301      	movs	r3, #1
 800a646:	e000      	b.n	800a64a <BSP_SD_WriteBlocks+0x2a>
  }
  else
  {
    return MSD_OK;
 800a648:	2300      	movs	r3, #0
  }
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3710      	adds	r7, #16
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
 800a652:	bf00      	nop
 800a654:	20000a64 	.word	0x20000a64

0800a658 <BSP_SD_MspInit>:
  * @param  hsd: SD handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SD_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b08c      	sub	sp, #48	@ 0x30
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_rx_handle;
  static DMA_HandleTypeDef dma_tx_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable SDIO clock */
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 800a662:	4b6c      	ldr	r3, [pc, #432]	@ (800a814 <BSP_SD_MspInit+0x1bc>)
 800a664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a666:	4a6b      	ldr	r2, [pc, #428]	@ (800a814 <BSP_SD_MspInit+0x1bc>)
 800a668:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a66c:	6453      	str	r3, [r2, #68]	@ 0x44
 800a66e:	4b69      	ldr	r3, [pc, #420]	@ (800a814 <BSP_SD_MspInit+0x1bc>)
 800a670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a672:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a676:	61bb      	str	r3, [r7, #24]
 800a678:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable DMA2 clocks */
  __DMAx_TxRx_CLK_ENABLE();
 800a67a:	4b66      	ldr	r3, [pc, #408]	@ (800a814 <BSP_SD_MspInit+0x1bc>)
 800a67c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a67e:	4a65      	ldr	r2, [pc, #404]	@ (800a814 <BSP_SD_MspInit+0x1bc>)
 800a680:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a684:	6313      	str	r3, [r2, #48]	@ 0x30
 800a686:	4b63      	ldr	r3, [pc, #396]	@ (800a814 <BSP_SD_MspInit+0x1bc>)
 800a688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a68a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a68e:	617b      	str	r3, [r7, #20]
 800a690:	697b      	ldr	r3, [r7, #20]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a692:	4b60      	ldr	r3, [pc, #384]	@ (800a814 <BSP_SD_MspInit+0x1bc>)
 800a694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a696:	4a5f      	ldr	r2, [pc, #380]	@ (800a814 <BSP_SD_MspInit+0x1bc>)
 800a698:	f043 0304 	orr.w	r3, r3, #4
 800a69c:	6313      	str	r3, [r2, #48]	@ 0x30
 800a69e:	4b5d      	ldr	r3, [pc, #372]	@ (800a814 <BSP_SD_MspInit+0x1bc>)
 800a6a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6a2:	f003 0304 	and.w	r3, r3, #4
 800a6a6:	613b      	str	r3, [r7, #16]
 800a6a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a6aa:	4b5a      	ldr	r3, [pc, #360]	@ (800a814 <BSP_SD_MspInit+0x1bc>)
 800a6ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6ae:	4a59      	ldr	r2, [pc, #356]	@ (800a814 <BSP_SD_MspInit+0x1bc>)
 800a6b0:	f043 0308 	orr.w	r3, r3, #8
 800a6b4:	6313      	str	r3, [r2, #48]	@ 0x30
 800a6b6:	4b57      	ldr	r3, [pc, #348]	@ (800a814 <BSP_SD_MspInit+0x1bc>)
 800a6b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6ba:	f003 0308 	and.w	r3, r3, #8
 800a6be:	60fb      	str	r3, [r7, #12]
 800a6c0:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800a6c2:	2302      	movs	r3, #2
 800a6c4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 800a6ca:	2303      	movs	r3, #3
 800a6cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = GPIO_AF12_SDMMC1;
 800a6ce:	230c      	movs	r3, #12
 800a6d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 800a6d2:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800a6d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800a6d8:	f107 031c 	add.w	r3, r7, #28
 800a6dc:	4619      	mov	r1, r3
 800a6de:	484e      	ldr	r0, [pc, #312]	@ (800a818 <BSP_SD_MspInit+0x1c0>)
 800a6e0:	f7f7 fc4a 	bl	8001f78 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin = GPIO_PIN_2;
 800a6e4:	2304      	movs	r3, #4
 800a6e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800a6e8:	f107 031c 	add.w	r3, r7, #28
 800a6ec:	4619      	mov	r1, r3
 800a6ee:	484b      	ldr	r0, [pc, #300]	@ (800a81c <BSP_SD_MspInit+0x1c4>)
 800a6f0:	f7f7 fc42 	bl	8001f78 <HAL_GPIO_Init>

  /* NVIC configuration for SDIO interrupts */
  HAL_NVIC_SetPriority(SDMMC1_IRQn, 0x0E, 0);
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	210e      	movs	r1, #14
 800a6f8:	2031      	movs	r0, #49	@ 0x31
 800a6fa:	f7f6 fed2 	bl	80014a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800a6fe:	2031      	movs	r0, #49	@ 0x31
 800a700:	f7f6 feeb 	bl	80014da <HAL_NVIC_EnableIRQ>
    
  /* Configure DMA Rx parameters */
  dma_rx_handle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 800a704:	4b46      	ldr	r3, [pc, #280]	@ (800a820 <BSP_SD_MspInit+0x1c8>)
 800a706:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800a70a:	605a      	str	r2, [r3, #4]
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800a70c:	4b44      	ldr	r3, [pc, #272]	@ (800a820 <BSP_SD_MspInit+0x1c8>)
 800a70e:	2200      	movs	r2, #0
 800a710:	609a      	str	r2, [r3, #8]
  dma_rx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 800a712:	4b43      	ldr	r3, [pc, #268]	@ (800a820 <BSP_SD_MspInit+0x1c8>)
 800a714:	2200      	movs	r2, #0
 800a716:	60da      	str	r2, [r3, #12]
  dma_rx_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800a718:	4b41      	ldr	r3, [pc, #260]	@ (800a820 <BSP_SD_MspInit+0x1c8>)
 800a71a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a71e:	611a      	str	r2, [r3, #16]
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800a720:	4b3f      	ldr	r3, [pc, #252]	@ (800a820 <BSP_SD_MspInit+0x1c8>)
 800a722:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a726:	615a      	str	r2, [r3, #20]
  dma_rx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800a728:	4b3d      	ldr	r3, [pc, #244]	@ (800a820 <BSP_SD_MspInit+0x1c8>)
 800a72a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800a72e:	619a      	str	r2, [r3, #24]
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 800a730:	4b3b      	ldr	r3, [pc, #236]	@ (800a820 <BSP_SD_MspInit+0x1c8>)
 800a732:	2220      	movs	r2, #32
 800a734:	61da      	str	r2, [r3, #28]
  dma_rx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 800a736:	4b3a      	ldr	r3, [pc, #232]	@ (800a820 <BSP_SD_MspInit+0x1c8>)
 800a738:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800a73c:	621a      	str	r2, [r3, #32]
  dma_rx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 800a73e:	4b38      	ldr	r3, [pc, #224]	@ (800a820 <BSP_SD_MspInit+0x1c8>)
 800a740:	2204      	movs	r2, #4
 800a742:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_rx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800a744:	4b36      	ldr	r3, [pc, #216]	@ (800a820 <BSP_SD_MspInit+0x1c8>)
 800a746:	2203      	movs	r2, #3
 800a748:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_rx_handle.Init.MemBurst            = DMA_MBURST_INC4;
 800a74a:	4b35      	ldr	r3, [pc, #212]	@ (800a820 <BSP_SD_MspInit+0x1c8>)
 800a74c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800a750:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 800a752:	4b33      	ldr	r3, [pc, #204]	@ (800a820 <BSP_SD_MspInit+0x1c8>)
 800a754:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800a758:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 800a75a:	4b31      	ldr	r3, [pc, #196]	@ (800a820 <BSP_SD_MspInit+0x1c8>)
 800a75c:	4a31      	ldr	r2, [pc, #196]	@ (800a824 <BSP_SD_MspInit+0x1cc>)
 800a75e:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	4a2f      	ldr	r2, [pc, #188]	@ (800a820 <BSP_SD_MspInit+0x1c8>)
 800a764:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a766:	4a2e      	ldr	r2, [pc, #184]	@ (800a820 <BSP_SD_MspInit+0x1c8>)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_rx_handle);
 800a76c:	482c      	ldr	r0, [pc, #176]	@ (800a820 <BSP_SD_MspInit+0x1c8>)
 800a76e:	f7f7 f867 	bl	8001840 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_rx_handle);
 800a772:	482b      	ldr	r0, [pc, #172]	@ (800a820 <BSP_SD_MspInit+0x1c8>)
 800a774:	f7f6 ffb6 	bl	80016e4 <HAL_DMA_Init>
  
  /* Configure DMA Tx parameters */
  dma_tx_handle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
 800a778:	4b2b      	ldr	r3, [pc, #172]	@ (800a828 <BSP_SD_MspInit+0x1d0>)
 800a77a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800a77e:	605a      	str	r2, [r3, #4]
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800a780:	4b29      	ldr	r3, [pc, #164]	@ (800a828 <BSP_SD_MspInit+0x1d0>)
 800a782:	2240      	movs	r2, #64	@ 0x40
 800a784:	609a      	str	r2, [r3, #8]
  dma_tx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 800a786:	4b28      	ldr	r3, [pc, #160]	@ (800a828 <BSP_SD_MspInit+0x1d0>)
 800a788:	2200      	movs	r2, #0
 800a78a:	60da      	str	r2, [r3, #12]
  dma_tx_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800a78c:	4b26      	ldr	r3, [pc, #152]	@ (800a828 <BSP_SD_MspInit+0x1d0>)
 800a78e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a792:	611a      	str	r2, [r3, #16]
  dma_tx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800a794:	4b24      	ldr	r3, [pc, #144]	@ (800a828 <BSP_SD_MspInit+0x1d0>)
 800a796:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a79a:	615a      	str	r2, [r3, #20]
  dma_tx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800a79c:	4b22      	ldr	r3, [pc, #136]	@ (800a828 <BSP_SD_MspInit+0x1d0>)
 800a79e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800a7a2:	619a      	str	r2, [r3, #24]
  dma_tx_handle.Init.Mode                = DMA_PFCTRL;
 800a7a4:	4b20      	ldr	r3, [pc, #128]	@ (800a828 <BSP_SD_MspInit+0x1d0>)
 800a7a6:	2220      	movs	r2, #32
 800a7a8:	61da      	str	r2, [r3, #28]
  dma_tx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 800a7aa:	4b1f      	ldr	r3, [pc, #124]	@ (800a828 <BSP_SD_MspInit+0x1d0>)
 800a7ac:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800a7b0:	621a      	str	r2, [r3, #32]
  dma_tx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 800a7b2:	4b1d      	ldr	r3, [pc, #116]	@ (800a828 <BSP_SD_MspInit+0x1d0>)
 800a7b4:	2204      	movs	r2, #4
 800a7b6:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_tx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800a7b8:	4b1b      	ldr	r3, [pc, #108]	@ (800a828 <BSP_SD_MspInit+0x1d0>)
 800a7ba:	2203      	movs	r2, #3
 800a7bc:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_tx_handle.Init.MemBurst            = DMA_MBURST_INC4;
 800a7be:	4b1a      	ldr	r3, [pc, #104]	@ (800a828 <BSP_SD_MspInit+0x1d0>)
 800a7c0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800a7c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_tx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 800a7c6:	4b18      	ldr	r3, [pc, #96]	@ (800a828 <BSP_SD_MspInit+0x1d0>)
 800a7c8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800a7cc:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
 800a7ce:	4b16      	ldr	r3, [pc, #88]	@ (800a828 <BSP_SD_MspInit+0x1d0>)
 800a7d0:	4a16      	ldr	r2, [pc, #88]	@ (800a82c <BSP_SD_MspInit+0x1d4>)
 800a7d2:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, dma_tx_handle);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	4a14      	ldr	r2, [pc, #80]	@ (800a828 <BSP_SD_MspInit+0x1d0>)
 800a7d8:	641a      	str	r2, [r3, #64]	@ 0x40
 800a7da:	4a13      	ldr	r2, [pc, #76]	@ (800a828 <BSP_SD_MspInit+0x1d0>)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_tx_handle);
 800a7e0:	4811      	ldr	r0, [pc, #68]	@ (800a828 <BSP_SD_MspInit+0x1d0>)
 800a7e2:	f7f7 f82d 	bl	8001840 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_tx_handle); 
 800a7e6:	4810      	ldr	r0, [pc, #64]	@ (800a828 <BSP_SD_MspInit+0x1d0>)
 800a7e8:	f7f6 ff7c 	bl	80016e4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Rx_IRQn, 0x0F, 0);
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	210f      	movs	r1, #15
 800a7f0:	203b      	movs	r0, #59	@ 0x3b
 800a7f2:	f7f6 fe56 	bl	80014a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Rx_IRQn);
 800a7f6:	203b      	movs	r0, #59	@ 0x3b
 800a7f8:	f7f6 fe6f 	bl	80014da <HAL_NVIC_EnableIRQ>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Tx_IRQn, 0x0F, 0);
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	210f      	movs	r1, #15
 800a800:	2045      	movs	r0, #69	@ 0x45
 800a802:	f7f6 fe4e 	bl	80014a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Tx_IRQn);
 800a806:	2045      	movs	r0, #69	@ 0x45
 800a808:	f7f6 fe67 	bl	80014da <HAL_NVIC_EnableIRQ>
}
 800a80c:	bf00      	nop
 800a80e:	3730      	adds	r7, #48	@ 0x30
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}
 800a814:	40023800 	.word	0x40023800
 800a818:	40020800 	.word	0x40020800
 800a81c:	40020c00 	.word	0x40020c00
 800a820:	20000ae8 	.word	0x20000ae8
 800a824:	40026458 	.word	0x40026458
 800a828:	20000b48 	.word	0x20000b48
 800a82c:	400264a0 	.word	0x400264a0

0800a830 <BSP_SD_Detect_MspInit>:
  * @param  hsd: SD handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SD_Detect_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b088      	sub	sp, #32
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef  gpio_init_structure;

  SD_DETECT_GPIO_CLK_ENABLE();
 800a83a:	4b0f      	ldr	r3, [pc, #60]	@ (800a878 <BSP_SD_Detect_MspInit+0x48>)
 800a83c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a83e:	4a0e      	ldr	r2, [pc, #56]	@ (800a878 <BSP_SD_Detect_MspInit+0x48>)
 800a840:	f043 0304 	orr.w	r3, r3, #4
 800a844:	6313      	str	r3, [r2, #48]	@ 0x30
 800a846:	4b0c      	ldr	r3, [pc, #48]	@ (800a878 <BSP_SD_Detect_MspInit+0x48>)
 800a848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a84a:	f003 0304 	and.w	r3, r3, #4
 800a84e:	60bb      	str	r3, [r7, #8]
 800a850:	68bb      	ldr	r3, [r7, #8]

  /* GPIO configuration in input for uSD_Detect signal */
  gpio_init_structure.Pin       = SD_DETECT_PIN;
 800a852:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a856:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 800a858:	2300      	movs	r3, #0
 800a85a:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800a85c:	2301      	movs	r3, #1
 800a85e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 800a860:	2303      	movs	r3, #3
 800a862:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 800a864:	f107 030c 	add.w	r3, r7, #12
 800a868:	4619      	mov	r1, r3
 800a86a:	4804      	ldr	r0, [pc, #16]	@ (800a87c <BSP_SD_Detect_MspInit+0x4c>)
 800a86c:	f7f7 fb84 	bl	8001f78 <HAL_GPIO_Init>
}
 800a870:	bf00      	nop
 800a872:	3720      	adds	r7, #32
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}
 800a878:	40023800 	.word	0x40023800
 800a87c:	40020800 	.word	0x40020800

0800a880 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	af00      	add	r7, sp, #0
  return((HAL_SD_GetCardState(&uSdHandle) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a884:	4805      	ldr	r0, [pc, #20]	@ (800a89c <BSP_SD_GetCardState+0x1c>)
 800a886:	f7fa fdcd 	bl	8005424 <HAL_SD_GetCardState>
 800a88a:	4603      	mov	r3, r0
 800a88c:	2b04      	cmp	r3, #4
 800a88e:	bf14      	ite	ne
 800a890:	2301      	movne	r3, #1
 800a892:	2300      	moveq	r3, #0
 800a894:	b2db      	uxtb	r3, r3
}
 800a896:	4618      	mov	r0, r3
 800a898:	bd80      	pop	{r7, pc}
 800a89a:	bf00      	nop
 800a89c:	20000a64 	.word	0x20000a64

0800a8a0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b082      	sub	sp, #8
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&uSdHandle, CardInfo);
 800a8a8:	6879      	ldr	r1, [r7, #4]
 800a8aa:	4803      	ldr	r0, [pc, #12]	@ (800a8b8 <BSP_SD_GetCardInfo+0x18>)
 800a8ac:	f7fa fd12 	bl	80052d4 <HAL_SD_GetCardInfo>
}
 800a8b0:	bf00      	nop
 800a8b2:	3708      	adds	r7, #8
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}
 800a8b8:	20000a64 	.word	0x20000a64

0800a8bc <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800a8c0:	4b29      	ldr	r3, [pc, #164]	@ (800a968 <BSP_SDRAM_Init+0xac>)
 800a8c2:	4a2a      	ldr	r2, [pc, #168]	@ (800a96c <BSP_SDRAM_Init+0xb0>)
 800a8c4:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800a8c6:	4b2a      	ldr	r3, [pc, #168]	@ (800a970 <BSP_SDRAM_Init+0xb4>)
 800a8c8:	2202      	movs	r2, #2
 800a8ca:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 800a8cc:	4b28      	ldr	r3, [pc, #160]	@ (800a970 <BSP_SDRAM_Init+0xb4>)
 800a8ce:	2207      	movs	r2, #7
 800a8d0:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 800a8d2:	4b27      	ldr	r3, [pc, #156]	@ (800a970 <BSP_SDRAM_Init+0xb4>)
 800a8d4:	2204      	movs	r2, #4
 800a8d6:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 800a8d8:	4b25      	ldr	r3, [pc, #148]	@ (800a970 <BSP_SDRAM_Init+0xb4>)
 800a8da:	2207      	movs	r2, #7
 800a8dc:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800a8de:	4b24      	ldr	r3, [pc, #144]	@ (800a970 <BSP_SDRAM_Init+0xb4>)
 800a8e0:	2202      	movs	r2, #2
 800a8e2:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 800a8e4:	4b22      	ldr	r3, [pc, #136]	@ (800a970 <BSP_SDRAM_Init+0xb4>)
 800a8e6:	2202      	movs	r2, #2
 800a8e8:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800a8ea:	4b21      	ldr	r3, [pc, #132]	@ (800a970 <BSP_SDRAM_Init+0xb4>)
 800a8ec:	2202      	movs	r2, #2
 800a8ee:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 800a8f0:	4b1d      	ldr	r3, [pc, #116]	@ (800a968 <BSP_SDRAM_Init+0xac>)
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800a8f6:	4b1c      	ldr	r3, [pc, #112]	@ (800a968 <BSP_SDRAM_Init+0xac>)
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800a8fc:	4b1a      	ldr	r3, [pc, #104]	@ (800a968 <BSP_SDRAM_Init+0xac>)
 800a8fe:	2204      	movs	r2, #4
 800a900:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800a902:	4b19      	ldr	r3, [pc, #100]	@ (800a968 <BSP_SDRAM_Init+0xac>)
 800a904:	2210      	movs	r2, #16
 800a906:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800a908:	4b17      	ldr	r3, [pc, #92]	@ (800a968 <BSP_SDRAM_Init+0xac>)
 800a90a:	2240      	movs	r2, #64	@ 0x40
 800a90c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800a90e:	4b16      	ldr	r3, [pc, #88]	@ (800a968 <BSP_SDRAM_Init+0xac>)
 800a910:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a914:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800a916:	4b14      	ldr	r3, [pc, #80]	@ (800a968 <BSP_SDRAM_Init+0xac>)
 800a918:	2200      	movs	r2, #0
 800a91a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800a91c:	4b12      	ldr	r3, [pc, #72]	@ (800a968 <BSP_SDRAM_Init+0xac>)
 800a91e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a922:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800a924:	4b10      	ldr	r3, [pc, #64]	@ (800a968 <BSP_SDRAM_Init+0xac>)
 800a926:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a92a:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800a92c:	4b0e      	ldr	r3, [pc, #56]	@ (800a968 <BSP_SDRAM_Init+0xac>)
 800a92e:	2200      	movs	r2, #0
 800a930:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800a932:	2100      	movs	r1, #0
 800a934:	480c      	ldr	r0, [pc, #48]	@ (800a968 <BSP_SDRAM_Init+0xac>)
 800a936:	f000 f87f 	bl	800aa38 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800a93a:	490d      	ldr	r1, [pc, #52]	@ (800a970 <BSP_SDRAM_Init+0xb4>)
 800a93c:	480a      	ldr	r0, [pc, #40]	@ (800a968 <BSP_SDRAM_Init+0xac>)
 800a93e:	f7fb f895 	bl	8005a6c <HAL_SDRAM_Init>
 800a942:	4603      	mov	r3, r0
 800a944:	2b00      	cmp	r3, #0
 800a946:	d003      	beq.n	800a950 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 800a948:	4b0a      	ldr	r3, [pc, #40]	@ (800a974 <BSP_SDRAM_Init+0xb8>)
 800a94a:	2201      	movs	r2, #1
 800a94c:	701a      	strb	r2, [r3, #0]
 800a94e:	e002      	b.n	800a956 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 800a950:	4b08      	ldr	r3, [pc, #32]	@ (800a974 <BSP_SDRAM_Init+0xb8>)
 800a952:	2200      	movs	r2, #0
 800a954:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800a956:	f240 6003 	movw	r0, #1539	@ 0x603
 800a95a:	f000 f80d 	bl	800a978 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800a95e:	4b05      	ldr	r3, [pc, #20]	@ (800a974 <BSP_SDRAM_Init+0xb8>)
 800a960:	781b      	ldrb	r3, [r3, #0]
}
 800a962:	4618      	mov	r0, r3
 800a964:	bd80      	pop	{r7, pc}
 800a966:	bf00      	nop
 800a968:	20000ba8 	.word	0x20000ba8
 800a96c:	a0000140 	.word	0xa0000140
 800a970:	20000bdc 	.word	0x20000bdc
 800a974:	20000040 	.word	0x20000040

0800a978 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b084      	sub	sp, #16
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 800a980:	2300      	movs	r3, #0
 800a982:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800a984:	4b2a      	ldr	r3, [pc, #168]	@ (800aa30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a986:	2201      	movs	r2, #1
 800a988:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800a98a:	4b29      	ldr	r3, [pc, #164]	@ (800aa30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a98c:	2210      	movs	r2, #16
 800a98e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800a990:	4b27      	ldr	r3, [pc, #156]	@ (800aa30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a992:	2201      	movs	r2, #1
 800a994:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800a996:	4b26      	ldr	r3, [pc, #152]	@ (800aa30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a998:	2200      	movs	r2, #0
 800a99a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800a99c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a9a0:	4923      	ldr	r1, [pc, #140]	@ (800aa30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a9a2:	4824      	ldr	r0, [pc, #144]	@ (800aa34 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800a9a4:	f7fb f8a0 	bl	8005ae8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800a9a8:	2001      	movs	r0, #1
 800a9aa:	f7f6 fc7b 	bl	80012a4 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800a9ae:	4b20      	ldr	r3, [pc, #128]	@ (800aa30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a9b0:	2202      	movs	r2, #2
 800a9b2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800a9b4:	4b1e      	ldr	r3, [pc, #120]	@ (800aa30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a9b6:	2210      	movs	r2, #16
 800a9b8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800a9ba:	4b1d      	ldr	r3, [pc, #116]	@ (800aa30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a9bc:	2201      	movs	r2, #1
 800a9be:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800a9c0:	4b1b      	ldr	r3, [pc, #108]	@ (800aa30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800a9c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a9ca:	4919      	ldr	r1, [pc, #100]	@ (800aa30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a9cc:	4819      	ldr	r0, [pc, #100]	@ (800aa34 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800a9ce:	f7fb f88b 	bl	8005ae8 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800a9d2:	4b17      	ldr	r3, [pc, #92]	@ (800aa30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a9d4:	2203      	movs	r2, #3
 800a9d6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800a9d8:	4b15      	ldr	r3, [pc, #84]	@ (800aa30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a9da:	2210      	movs	r2, #16
 800a9dc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800a9de:	4b14      	ldr	r3, [pc, #80]	@ (800aa30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a9e0:	2208      	movs	r2, #8
 800a9e2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800a9e4:	4b12      	ldr	r3, [pc, #72]	@ (800aa30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800a9ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a9ee:	4910      	ldr	r1, [pc, #64]	@ (800aa30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a9f0:	4810      	ldr	r0, [pc, #64]	@ (800aa34 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800a9f2:	f7fb f879 	bl	8005ae8 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800a9f6:	f44f 7308 	mov.w	r3, #544	@ 0x220
 800a9fa:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800a9fc:	4b0c      	ldr	r3, [pc, #48]	@ (800aa30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a9fe:	2204      	movs	r2, #4
 800aa00:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800aa02:	4b0b      	ldr	r3, [pc, #44]	@ (800aa30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800aa04:	2210      	movs	r2, #16
 800aa06:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800aa08:	4b09      	ldr	r3, [pc, #36]	@ (800aa30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	4a07      	ldr	r2, [pc, #28]	@ (800aa30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800aa12:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800aa14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800aa18:	4905      	ldr	r1, [pc, #20]	@ (800aa30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800aa1a:	4806      	ldr	r0, [pc, #24]	@ (800aa34 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800aa1c:	f7fb f864 	bl	8005ae8 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 800aa20:	6879      	ldr	r1, [r7, #4]
 800aa22:	4804      	ldr	r0, [pc, #16]	@ (800aa34 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800aa24:	f7fb f88b 	bl	8005b3e <HAL_SDRAM_ProgramRefreshRate>
}
 800aa28:	bf00      	nop
 800aa2a:	3710      	adds	r7, #16
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}
 800aa30:	20000bf8 	.word	0x20000bf8
 800aa34:	20000ba8 	.word	0x20000ba8

0800aa38 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b090      	sub	sp, #64	@ 0x40
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800aa42:	4b70      	ldr	r3, [pc, #448]	@ (800ac04 <BSP_SDRAM_MspInit+0x1cc>)
 800aa44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa46:	4a6f      	ldr	r2, [pc, #444]	@ (800ac04 <BSP_SDRAM_MspInit+0x1cc>)
 800aa48:	f043 0301 	orr.w	r3, r3, #1
 800aa4c:	6393      	str	r3, [r2, #56]	@ 0x38
 800aa4e:	4b6d      	ldr	r3, [pc, #436]	@ (800ac04 <BSP_SDRAM_MspInit+0x1cc>)
 800aa50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa52:	f003 0301 	and.w	r3, r3, #1
 800aa56:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aa58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800aa5a:	4b6a      	ldr	r3, [pc, #424]	@ (800ac04 <BSP_SDRAM_MspInit+0x1cc>)
 800aa5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa5e:	4a69      	ldr	r2, [pc, #420]	@ (800ac04 <BSP_SDRAM_MspInit+0x1cc>)
 800aa60:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800aa64:	6313      	str	r3, [r2, #48]	@ 0x30
 800aa66:	4b67      	ldr	r3, [pc, #412]	@ (800ac04 <BSP_SDRAM_MspInit+0x1cc>)
 800aa68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aa6e:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800aa72:	4b64      	ldr	r3, [pc, #400]	@ (800ac04 <BSP_SDRAM_MspInit+0x1cc>)
 800aa74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa76:	4a63      	ldr	r2, [pc, #396]	@ (800ac04 <BSP_SDRAM_MspInit+0x1cc>)
 800aa78:	f043 0304 	orr.w	r3, r3, #4
 800aa7c:	6313      	str	r3, [r2, #48]	@ 0x30
 800aa7e:	4b61      	ldr	r3, [pc, #388]	@ (800ac04 <BSP_SDRAM_MspInit+0x1cc>)
 800aa80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa82:	f003 0304 	and.w	r3, r3, #4
 800aa86:	623b      	str	r3, [r7, #32]
 800aa88:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800aa8a:	4b5e      	ldr	r3, [pc, #376]	@ (800ac04 <BSP_SDRAM_MspInit+0x1cc>)
 800aa8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa8e:	4a5d      	ldr	r2, [pc, #372]	@ (800ac04 <BSP_SDRAM_MspInit+0x1cc>)
 800aa90:	f043 0308 	orr.w	r3, r3, #8
 800aa94:	6313      	str	r3, [r2, #48]	@ 0x30
 800aa96:	4b5b      	ldr	r3, [pc, #364]	@ (800ac04 <BSP_SDRAM_MspInit+0x1cc>)
 800aa98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa9a:	f003 0308 	and.w	r3, r3, #8
 800aa9e:	61fb      	str	r3, [r7, #28]
 800aaa0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800aaa2:	4b58      	ldr	r3, [pc, #352]	@ (800ac04 <BSP_SDRAM_MspInit+0x1cc>)
 800aaa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aaa6:	4a57      	ldr	r2, [pc, #348]	@ (800ac04 <BSP_SDRAM_MspInit+0x1cc>)
 800aaa8:	f043 0310 	orr.w	r3, r3, #16
 800aaac:	6313      	str	r3, [r2, #48]	@ 0x30
 800aaae:	4b55      	ldr	r3, [pc, #340]	@ (800ac04 <BSP_SDRAM_MspInit+0x1cc>)
 800aab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aab2:	f003 0310 	and.w	r3, r3, #16
 800aab6:	61bb      	str	r3, [r7, #24]
 800aab8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800aaba:	4b52      	ldr	r3, [pc, #328]	@ (800ac04 <BSP_SDRAM_MspInit+0x1cc>)
 800aabc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aabe:	4a51      	ldr	r2, [pc, #324]	@ (800ac04 <BSP_SDRAM_MspInit+0x1cc>)
 800aac0:	f043 0320 	orr.w	r3, r3, #32
 800aac4:	6313      	str	r3, [r2, #48]	@ 0x30
 800aac6:	4b4f      	ldr	r3, [pc, #316]	@ (800ac04 <BSP_SDRAM_MspInit+0x1cc>)
 800aac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aaca:	f003 0320 	and.w	r3, r3, #32
 800aace:	617b      	str	r3, [r7, #20]
 800aad0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800aad2:	4b4c      	ldr	r3, [pc, #304]	@ (800ac04 <BSP_SDRAM_MspInit+0x1cc>)
 800aad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aad6:	4a4b      	ldr	r2, [pc, #300]	@ (800ac04 <BSP_SDRAM_MspInit+0x1cc>)
 800aad8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aadc:	6313      	str	r3, [r2, #48]	@ 0x30
 800aade:	4b49      	ldr	r3, [pc, #292]	@ (800ac04 <BSP_SDRAM_MspInit+0x1cc>)
 800aae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aae6:	613b      	str	r3, [r7, #16]
 800aae8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800aaea:	4b46      	ldr	r3, [pc, #280]	@ (800ac04 <BSP_SDRAM_MspInit+0x1cc>)
 800aaec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aaee:	4a45      	ldr	r2, [pc, #276]	@ (800ac04 <BSP_SDRAM_MspInit+0x1cc>)
 800aaf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aaf4:	6313      	str	r3, [r2, #48]	@ 0x30
 800aaf6:	4b43      	ldr	r3, [pc, #268]	@ (800ac04 <BSP_SDRAM_MspInit+0x1cc>)
 800aaf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aafa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aafe:	60fb      	str	r3, [r7, #12]
 800ab00:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800ab02:	2302      	movs	r3, #2
 800ab04:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800ab06:	2301      	movs	r3, #1
 800ab08:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800ab0a:	2302      	movs	r3, #2
 800ab0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800ab0e:	230c      	movs	r3, #12
 800ab10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800ab12:	2308      	movs	r3, #8
 800ab14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800ab16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ab1a:	4619      	mov	r1, r3
 800ab1c:	483a      	ldr	r0, [pc, #232]	@ (800ac08 <BSP_SDRAM_MspInit+0x1d0>)
 800ab1e:	f7f7 fa2b 	bl	8001f78 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800ab22:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800ab26:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800ab28:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ab2c:	4619      	mov	r1, r3
 800ab2e:	4837      	ldr	r0, [pc, #220]	@ (800ac0c <BSP_SDRAM_MspInit+0x1d4>)
 800ab30:	f7f7 fa22 	bl	8001f78 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800ab34:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800ab38:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800ab3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ab3e:	4619      	mov	r1, r3
 800ab40:	4833      	ldr	r0, [pc, #204]	@ (800ac10 <BSP_SDRAM_MspInit+0x1d8>)
 800ab42:	f7f7 fa19 	bl	8001f78 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800ab46:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800ab4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800ab4c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ab50:	4619      	mov	r1, r3
 800ab52:	4830      	ldr	r0, [pc, #192]	@ (800ac14 <BSP_SDRAM_MspInit+0x1dc>)
 800ab54:	f7f7 fa10 	bl	8001f78 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 800ab58:	f248 1333 	movw	r3, #33075	@ 0x8133
 800ab5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800ab5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ab62:	4619      	mov	r1, r3
 800ab64:	482c      	ldr	r0, [pc, #176]	@ (800ac18 <BSP_SDRAM_MspInit+0x1e0>)
 800ab66:	f7f7 fa07 	bl	8001f78 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800ab6a:	2328      	movs	r3, #40	@ 0x28
 800ab6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800ab6e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ab72:	4619      	mov	r1, r3
 800ab74:	4829      	ldr	r0, [pc, #164]	@ (800ac1c <BSP_SDRAM_MspInit+0x1e4>)
 800ab76:	f7f7 f9ff 	bl	8001f78 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800ab7a:	4b29      	ldr	r3, [pc, #164]	@ (800ac20 <BSP_SDRAM_MspInit+0x1e8>)
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800ab80:	4b27      	ldr	r3, [pc, #156]	@ (800ac20 <BSP_SDRAM_MspInit+0x1e8>)
 800ab82:	2280      	movs	r2, #128	@ 0x80
 800ab84:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800ab86:	4b26      	ldr	r3, [pc, #152]	@ (800ac20 <BSP_SDRAM_MspInit+0x1e8>)
 800ab88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ab8c:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800ab8e:	4b24      	ldr	r3, [pc, #144]	@ (800ac20 <BSP_SDRAM_MspInit+0x1e8>)
 800ab90:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ab94:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800ab96:	4b22      	ldr	r3, [pc, #136]	@ (800ac20 <BSP_SDRAM_MspInit+0x1e8>)
 800ab98:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800ab9c:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800ab9e:	4b20      	ldr	r3, [pc, #128]	@ (800ac20 <BSP_SDRAM_MspInit+0x1e8>)
 800aba0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800aba4:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 800aba6:	4b1e      	ldr	r3, [pc, #120]	@ (800ac20 <BSP_SDRAM_MspInit+0x1e8>)
 800aba8:	2200      	movs	r2, #0
 800abaa:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 800abac:	4b1c      	ldr	r3, [pc, #112]	@ (800ac20 <BSP_SDRAM_MspInit+0x1e8>)
 800abae:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800abb2:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 800abb4:	4b1a      	ldr	r3, [pc, #104]	@ (800ac20 <BSP_SDRAM_MspInit+0x1e8>)
 800abb6:	2200      	movs	r2, #0
 800abb8:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800abba:	4b19      	ldr	r3, [pc, #100]	@ (800ac20 <BSP_SDRAM_MspInit+0x1e8>)
 800abbc:	2203      	movs	r2, #3
 800abbe:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800abc0:	4b17      	ldr	r3, [pc, #92]	@ (800ac20 <BSP_SDRAM_MspInit+0x1e8>)
 800abc2:	2200      	movs	r2, #0
 800abc4:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800abc6:	4b16      	ldr	r3, [pc, #88]	@ (800ac20 <BSP_SDRAM_MspInit+0x1e8>)
 800abc8:	2200      	movs	r2, #0
 800abca:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800abcc:	4b14      	ldr	r3, [pc, #80]	@ (800ac20 <BSP_SDRAM_MspInit+0x1e8>)
 800abce:	4a15      	ldr	r2, [pc, #84]	@ (800ac24 <BSP_SDRAM_MspInit+0x1ec>)
 800abd0:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	4a12      	ldr	r2, [pc, #72]	@ (800ac20 <BSP_SDRAM_MspInit+0x1e8>)
 800abd6:	631a      	str	r2, [r3, #48]	@ 0x30
 800abd8:	4a11      	ldr	r2, [pc, #68]	@ (800ac20 <BSP_SDRAM_MspInit+0x1e8>)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800abde:	4810      	ldr	r0, [pc, #64]	@ (800ac20 <BSP_SDRAM_MspInit+0x1e8>)
 800abe0:	f7f6 fe2e 	bl	8001840 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 800abe4:	480e      	ldr	r0, [pc, #56]	@ (800ac20 <BSP_SDRAM_MspInit+0x1e8>)
 800abe6:	f7f6 fd7d 	bl	80016e4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800abea:	2200      	movs	r2, #0
 800abec:	210f      	movs	r1, #15
 800abee:	2038      	movs	r0, #56	@ 0x38
 800abf0:	f7f6 fc57 	bl	80014a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800abf4:	2038      	movs	r0, #56	@ 0x38
 800abf6:	f7f6 fc70 	bl	80014da <HAL_NVIC_EnableIRQ>
}
 800abfa:	bf00      	nop
 800abfc:	3740      	adds	r7, #64	@ 0x40
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}
 800ac02:	bf00      	nop
 800ac04:	40023800 	.word	0x40023800
 800ac08:	40020800 	.word	0x40020800
 800ac0c:	40020c00 	.word	0x40020c00
 800ac10:	40021000 	.word	0x40021000
 800ac14:	40021400 	.word	0x40021400
 800ac18:	40021800 	.word	0x40021800
 800ac1c:	40021c00 	.word	0x40021c00
 800ac20:	20000c08 	.word	0x20000c08
 800ac24:	40026410 	.word	0x40026410

0800ac28 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b084      	sub	sp, #16
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	4603      	mov	r3, r0
 800ac30:	460a      	mov	r2, r1
 800ac32:	80fb      	strh	r3, [r7, #6]
 800ac34:	4613      	mov	r3, r2
 800ac36:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 800ac3c:	4a14      	ldr	r2, [pc, #80]	@ (800ac90 <BSP_TS_Init+0x68>)
 800ac3e:	88fb      	ldrh	r3, [r7, #6]
 800ac40:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 800ac42:	4a14      	ldr	r2, [pc, #80]	@ (800ac94 <BSP_TS_Init+0x6c>)
 800ac44:	88bb      	ldrh	r3, [r7, #4]
 800ac46:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800ac48:	4b13      	ldr	r3, [pc, #76]	@ (800ac98 <BSP_TS_Init+0x70>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	2070      	movs	r0, #112	@ 0x70
 800ac4e:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 800ac50:	4b11      	ldr	r3, [pc, #68]	@ (800ac98 <BSP_TS_Init+0x70>)
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	2070      	movs	r0, #112	@ 0x70
 800ac56:	4798      	blx	r3
 800ac58:	4603      	mov	r3, r0
 800ac5a:	2b51      	cmp	r3, #81	@ 0x51
 800ac5c:	d110      	bne.n	800ac80 <BSP_TS_Init+0x58>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 800ac5e:	4b0f      	ldr	r3, [pc, #60]	@ (800ac9c <BSP_TS_Init+0x74>)
 800ac60:	4a0d      	ldr	r2, [pc, #52]	@ (800ac98 <BSP_TS_Init+0x70>)
 800ac62:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 800ac64:	4b0e      	ldr	r3, [pc, #56]	@ (800aca0 <BSP_TS_Init+0x78>)
 800ac66:	2270      	movs	r2, #112	@ 0x70
 800ac68:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 800ac6a:	4b0e      	ldr	r3, [pc, #56]	@ (800aca4 <BSP_TS_Init+0x7c>)
 800ac6c:	2208      	movs	r2, #8
 800ac6e:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 800ac70:	4b0a      	ldr	r3, [pc, #40]	@ (800ac9c <BSP_TS_Init+0x74>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	68db      	ldr	r3, [r3, #12]
 800ac76:	4a0a      	ldr	r2, [pc, #40]	@ (800aca0 <BSP_TS_Init+0x78>)
 800ac78:	7812      	ldrb	r2, [r2, #0]
 800ac7a:	4610      	mov	r0, r2
 800ac7c:	4798      	blx	r3
 800ac7e:	e001      	b.n	800ac84 <BSP_TS_Init+0x5c>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 800ac80:	2303      	movs	r3, #3
 800ac82:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ac84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3710      	adds	r7, #16
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}
 800ac8e:	bf00      	nop
 800ac90:	20000c6c 	.word	0x20000c6c
 800ac94:	20000c6e 	.word	0x20000c6e
 800ac98:	20000018 	.word	0x20000018
 800ac9c:	20000c68 	.word	0x20000c68
 800aca0:	20000c71 	.word	0x20000c71
 800aca4:	20000c70 	.word	0x20000c70

0800aca8 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 800aca8:	b590      	push	{r4, r7, lr}
 800acaa:	b097      	sub	sp, #92	@ 0x5c
 800acac:	af02      	add	r7, sp, #8
 800acae:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 800acb0:	2300      	movs	r3, #0
 800acb2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 800acb6:	2300      	movs	r3, #0
 800acb8:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 800acba:	2300      	movs	r3, #0
 800acbc:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 800acbe:	2300      	movs	r3, #0
 800acc0:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 800acc2:	4bb8      	ldr	r3, [pc, #736]	@ (800afa4 <BSP_TS_GetState+0x2fc>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	691b      	ldr	r3, [r3, #16]
 800acc8:	4ab7      	ldr	r2, [pc, #732]	@ (800afa8 <BSP_TS_GetState+0x300>)
 800acca:	7812      	ldrb	r2, [r2, #0]
 800accc:	4610      	mov	r0, r2
 800acce:	4798      	blx	r3
 800acd0:	4603      	mov	r3, r0
 800acd2:	461a      	mov	r2, r3
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	f000 8198 	beq.w	800b012 <BSP_TS_GetState+0x36a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 800ace2:	2300      	movs	r3, #0
 800ace4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ace6:	e187      	b.n	800aff8 <BSP_TS_GetState+0x350>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 800ace8:	4bae      	ldr	r3, [pc, #696]	@ (800afa4 <BSP_TS_GetState+0x2fc>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	695b      	ldr	r3, [r3, #20]
 800acee:	4aae      	ldr	r2, [pc, #696]	@ (800afa8 <BSP_TS_GetState+0x300>)
 800acf0:	7812      	ldrb	r2, [r2, #0]
 800acf2:	4614      	mov	r4, r2
 800acf4:	f107 0120 	add.w	r1, r7, #32
 800acf8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800acfa:	0052      	lsls	r2, r2, #1
 800acfc:	1888      	adds	r0, r1, r2
 800acfe:	f107 0114 	add.w	r1, r7, #20
 800ad02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ad04:	0052      	lsls	r2, r2, #1
 800ad06:	440a      	add	r2, r1
 800ad08:	4601      	mov	r1, r0
 800ad0a:	4620      	mov	r0, r4
 800ad0c:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 800ad0e:	4ba7      	ldr	r3, [pc, #668]	@ (800afac <BSP_TS_GetState+0x304>)
 800ad10:	781b      	ldrb	r3, [r3, #0]
 800ad12:	2b01      	cmp	r3, #1
 800ad14:	d117      	bne.n	800ad46 <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 800ad16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad18:	005b      	lsls	r3, r3, #1
 800ad1a:	3350      	adds	r3, #80	@ 0x50
 800ad1c:	443b      	add	r3, r7
 800ad1e:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 800ad22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad24:	005b      	lsls	r3, r3, #1
 800ad26:	3350      	adds	r3, #80	@ 0x50
 800ad28:	443b      	add	r3, r7
 800ad2a:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 800ad2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad30:	005b      	lsls	r3, r3, #1
 800ad32:	3350      	adds	r3, #80	@ 0x50
 800ad34:	443b      	add	r3, r7
 800ad36:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800ad3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad3c:	005b      	lsls	r3, r3, #1
 800ad3e:	3350      	adds	r3, #80	@ 0x50
 800ad40:	443b      	add	r3, r7
 800ad42:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 800ad46:	4b99      	ldr	r3, [pc, #612]	@ (800afac <BSP_TS_GetState+0x304>)
 800ad48:	781b      	ldrb	r3, [r3, #0]
 800ad4a:	f003 0302 	and.w	r3, r3, #2
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d00e      	beq.n	800ad70 <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 800ad52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad54:	005b      	lsls	r3, r3, #1
 800ad56:	3350      	adds	r3, #80	@ 0x50
 800ad58:	443b      	add	r3, r7
 800ad5a:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 800ad5e:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 800ad62:	b29a      	uxth	r2, r3
 800ad64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad66:	005b      	lsls	r3, r3, #1
 800ad68:	3350      	adds	r3, #80	@ 0x50
 800ad6a:	443b      	add	r3, r7
 800ad6c:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 800ad70:	4b8e      	ldr	r3, [pc, #568]	@ (800afac <BSP_TS_GetState+0x304>)
 800ad72:	781b      	ldrb	r3, [r3, #0]
 800ad74:	f003 0304 	and.w	r3, r3, #4
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d00e      	beq.n	800ad9a <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 800ad7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad7e:	005b      	lsls	r3, r3, #1
 800ad80:	3350      	adds	r3, #80	@ 0x50
 800ad82:	443b      	add	r3, r7
 800ad84:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 800ad88:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 800ad8c:	b29a      	uxth	r2, r3
 800ad8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad90:	005b      	lsls	r3, r3, #1
 800ad92:	3350      	adds	r3, #80	@ 0x50
 800ad94:	443b      	add	r3, r7
 800ad96:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 800ad9a:	4b84      	ldr	r3, [pc, #528]	@ (800afac <BSP_TS_GetState+0x304>)
 800ad9c:	781b      	ldrb	r3, [r3, #0]
 800ad9e:	f003 0308 	and.w	r3, r3, #8
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d017      	beq.n	800add6 <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 800ada6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ada8:	005b      	lsls	r3, r3, #1
 800adaa:	3350      	adds	r3, #80	@ 0x50
 800adac:	443b      	add	r3, r7
 800adae:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 800adb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800adb4:	005b      	lsls	r3, r3, #1
 800adb6:	3350      	adds	r3, #80	@ 0x50
 800adb8:	443b      	add	r3, r7
 800adba:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 800adbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800adc0:	005b      	lsls	r3, r3, #1
 800adc2:	3350      	adds	r3, #80	@ 0x50
 800adc4:	443b      	add	r3, r7
 800adc6:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800adca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800adcc:	005b      	lsls	r3, r3, #1
 800adce:	3350      	adds	r3, #80	@ 0x50
 800add0:	443b      	add	r3, r7
 800add2:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 800add6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800add8:	005b      	lsls	r3, r3, #1
 800adda:	3350      	adds	r3, #80	@ 0x50
 800addc:	443b      	add	r3, r7
 800adde:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800ade2:	4619      	mov	r1, r3
 800ade4:	4a72      	ldr	r2, [pc, #456]	@ (800afb0 <BSP_TS_GetState+0x308>)
 800ade6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ade8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800adec:	4299      	cmp	r1, r3
 800adee:	d90d      	bls.n	800ae0c <BSP_TS_GetState+0x164>
 800adf0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800adf2:	005b      	lsls	r3, r3, #1
 800adf4:	3350      	adds	r3, #80	@ 0x50
 800adf6:	443b      	add	r3, r7
 800adf8:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 800adfc:	496c      	ldr	r1, [pc, #432]	@ (800afb0 <BSP_TS_GetState+0x308>)
 800adfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae00:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ae04:	b29b      	uxth	r3, r3
 800ae06:	1ad3      	subs	r3, r2, r3
 800ae08:	b29b      	uxth	r3, r3
 800ae0a:	e00c      	b.n	800ae26 <BSP_TS_GetState+0x17e>
 800ae0c:	4a68      	ldr	r2, [pc, #416]	@ (800afb0 <BSP_TS_GetState+0x308>)
 800ae0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae14:	b29a      	uxth	r2, r3
 800ae16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae18:	005b      	lsls	r3, r3, #1
 800ae1a:	3350      	adds	r3, #80	@ 0x50
 800ae1c:	443b      	add	r3, r7
 800ae1e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800ae22:	1ad3      	subs	r3, r2, r3
 800ae24:	b29b      	uxth	r3, r3
 800ae26:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800ae2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae2c:	005b      	lsls	r3, r3, #1
 800ae2e:	3350      	adds	r3, #80	@ 0x50
 800ae30:	443b      	add	r3, r7
 800ae32:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800ae36:	4619      	mov	r1, r3
 800ae38:	4a5e      	ldr	r2, [pc, #376]	@ (800afb4 <BSP_TS_GetState+0x30c>)
 800ae3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae40:	4299      	cmp	r1, r3
 800ae42:	d90d      	bls.n	800ae60 <BSP_TS_GetState+0x1b8>
 800ae44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae46:	005b      	lsls	r3, r3, #1
 800ae48:	3350      	adds	r3, #80	@ 0x50
 800ae4a:	443b      	add	r3, r7
 800ae4c:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 800ae50:	4958      	ldr	r1, [pc, #352]	@ (800afb4 <BSP_TS_GetState+0x30c>)
 800ae52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae54:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ae58:	b29b      	uxth	r3, r3
 800ae5a:	1ad3      	subs	r3, r2, r3
 800ae5c:	b29b      	uxth	r3, r3
 800ae5e:	e00c      	b.n	800ae7a <BSP_TS_GetState+0x1d2>
 800ae60:	4a54      	ldr	r2, [pc, #336]	@ (800afb4 <BSP_TS_GetState+0x30c>)
 800ae62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae68:	b29a      	uxth	r2, r3
 800ae6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae6c:	005b      	lsls	r3, r3, #1
 800ae6e:	3350      	adds	r3, #80	@ 0x50
 800ae70:	443b      	add	r3, r7
 800ae72:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800ae76:	1ad3      	subs	r3, r2, r3
 800ae78:	b29b      	uxth	r3, r3
 800ae7a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

      if ((x_diff + y_diff) > 5)
 800ae7e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800ae82:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800ae86:	4413      	add	r3, r2
 800ae88:	2b05      	cmp	r3, #5
 800ae8a:	dd15      	ble.n	800aeb8 <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 800ae8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae8e:	005b      	lsls	r3, r3, #1
 800ae90:	3350      	adds	r3, #80	@ 0x50
 800ae92:	443b      	add	r3, r7
 800ae94:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800ae98:	4619      	mov	r1, r3
 800ae9a:	4a45      	ldr	r2, [pc, #276]	@ (800afb0 <BSP_TS_GetState+0x308>)
 800ae9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae9e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 800aea2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aea4:	005b      	lsls	r3, r3, #1
 800aea6:	3350      	adds	r3, #80	@ 0x50
 800aea8:	443b      	add	r3, r7
 800aeaa:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800aeae:	4619      	mov	r1, r3
 800aeb0:	4a40      	ldr	r2, [pc, #256]	@ (800afb4 <BSP_TS_GetState+0x30c>)
 800aeb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aeb4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 800aeb8:	4b3b      	ldr	r3, [pc, #236]	@ (800afa8 <BSP_TS_GetState+0x300>)
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	2b70      	cmp	r3, #112	@ 0x70
 800aebe:	d119      	bne.n	800aef4 <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 800aec0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aec2:	005b      	lsls	r3, r3, #1
 800aec4:	3350      	adds	r3, #80	@ 0x50
 800aec6:	443b      	add	r3, r7
 800aec8:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 800aecc:	687a      	ldr	r2, [r7, #4]
 800aece:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aed0:	005b      	lsls	r3, r3, #1
 800aed2:	4413      	add	r3, r2
 800aed4:	460a      	mov	r2, r1
 800aed6:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 800aed8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aeda:	005b      	lsls	r3, r3, #1
 800aedc:	3350      	adds	r3, #80	@ 0x50
 800aede:	443b      	add	r3, r7
 800aee0:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 800aee4:	687a      	ldr	r2, [r7, #4]
 800aee6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aee8:	3304      	adds	r3, #4
 800aeea:	005b      	lsls	r3, r3, #1
 800aeec:	4413      	add	r3, r2
 800aeee:	460a      	mov	r2, r1
 800aef0:	809a      	strh	r2, [r3, #4]
 800aef2:	e022      	b.n	800af3a <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 800aef4:	4b30      	ldr	r3, [pc, #192]	@ (800afb8 <BSP_TS_GetState+0x310>)
 800aef6:	881b      	ldrh	r3, [r3, #0]
 800aef8:	4619      	mov	r1, r3
 800aefa:	4a2d      	ldr	r2, [pc, #180]	@ (800afb0 <BSP_TS_GetState+0x308>)
 800aefc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aefe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af02:	fb01 f303 	mul.w	r3, r1, r3
 800af06:	0b1b      	lsrs	r3, r3, #12
 800af08:	b299      	uxth	r1, r3
 800af0a:	687a      	ldr	r2, [r7, #4]
 800af0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af0e:	005b      	lsls	r3, r3, #1
 800af10:	4413      	add	r3, r2
 800af12:	460a      	mov	r2, r1
 800af14:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 800af16:	4b29      	ldr	r3, [pc, #164]	@ (800afbc <BSP_TS_GetState+0x314>)
 800af18:	881b      	ldrh	r3, [r3, #0]
 800af1a:	4619      	mov	r1, r3
 800af1c:	4a25      	ldr	r2, [pc, #148]	@ (800afb4 <BSP_TS_GetState+0x30c>)
 800af1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af24:	fb01 f303 	mul.w	r3, r1, r3
 800af28:	0b1b      	lsrs	r3, r3, #12
 800af2a:	b299      	uxth	r1, r3
 800af2c:	687a      	ldr	r2, [r7, #4]
 800af2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af30:	3304      	adds	r3, #4
 800af32:	005b      	lsls	r3, r3, #1
 800af34:	4413      	add	r3, r2
 800af36:	460a      	mov	r2, r1
 800af38:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 800af3a:	4b1b      	ldr	r3, [pc, #108]	@ (800afa8 <BSP_TS_GetState+0x300>)
 800af3c:	781b      	ldrb	r3, [r3, #0]
 800af3e:	4618      	mov	r0, r3
 800af40:	f107 010c 	add.w	r1, r7, #12
 800af44:	f107 0210 	add.w	r2, r7, #16
 800af48:	f107 0308 	add.w	r3, r7, #8
 800af4c:	9300      	str	r3, [sp, #0]
 800af4e:	460b      	mov	r3, r1
 800af50:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800af52:	f7fe fa67 	bl	8009424 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	b2d9      	uxtb	r1, r3
 800af5a:	687a      	ldr	r2, [r7, #4]
 800af5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af5e:	4413      	add	r3, r2
 800af60:	3316      	adds	r3, #22
 800af62:	460a      	mov	r2, r1
 800af64:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	b2d9      	uxtb	r1, r3
 800af6a:	687a      	ldr	r2, [r7, #4]
 800af6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af6e:	4413      	add	r3, r2
 800af70:	3320      	adds	r3, #32
 800af72:	460a      	mov	r2, r1
 800af74:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	2b03      	cmp	r3, #3
 800af7a:	d836      	bhi.n	800afea <BSP_TS_GetState+0x342>
 800af7c:	a201      	add	r2, pc, #4	@ (adr r2, 800af84 <BSP_TS_GetState+0x2dc>)
 800af7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af82:	bf00      	nop
 800af84:	0800af95 	.word	0x0800af95
 800af88:	0800afc1 	.word	0x0800afc1
 800af8c:	0800afcf 	.word	0x0800afcf
 800af90:	0800afdd 	.word	0x0800afdd
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 800af94:	687a      	ldr	r2, [r7, #4]
 800af96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af98:	4413      	add	r3, r2
 800af9a:	331b      	adds	r3, #27
 800af9c:	2201      	movs	r2, #1
 800af9e:	701a      	strb	r2, [r3, #0]
          break;
 800afa0:	e027      	b.n	800aff2 <BSP_TS_GetState+0x34a>
 800afa2:	bf00      	nop
 800afa4:	20000c68 	.word	0x20000c68
 800afa8:	20000c71 	.word	0x20000c71
 800afac:	20000c70 	.word	0x20000c70
 800afb0:	20000c74 	.word	0x20000c74
 800afb4:	20000c88 	.word	0x20000c88
 800afb8:	20000c6c 	.word	0x20000c6c
 800afbc:	20000c6e 	.word	0x20000c6e
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 800afc0:	687a      	ldr	r2, [r7, #4]
 800afc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800afc4:	4413      	add	r3, r2
 800afc6:	331b      	adds	r3, #27
 800afc8:	2202      	movs	r2, #2
 800afca:	701a      	strb	r2, [r3, #0]
          break;
 800afcc:	e011      	b.n	800aff2 <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 800afce:	687a      	ldr	r2, [r7, #4]
 800afd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800afd2:	4413      	add	r3, r2
 800afd4:	331b      	adds	r3, #27
 800afd6:	2203      	movs	r2, #3
 800afd8:	701a      	strb	r2, [r3, #0]
          break;
 800afda:	e00a      	b.n	800aff2 <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 800afdc:	687a      	ldr	r2, [r7, #4]
 800afde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800afe0:	4413      	add	r3, r2
 800afe2:	331b      	adds	r3, #27
 800afe4:	2200      	movs	r2, #0
 800afe6:	701a      	strb	r2, [r3, #0]
          break;
 800afe8:	e003      	b.n	800aff2 <BSP_TS_GetState+0x34a>
        default :
          ts_status = TS_ERROR;
 800afea:	2301      	movs	r3, #1
 800afec:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
          break;
 800aff0:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 800aff2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aff4:	3301      	adds	r3, #1
 800aff6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	781b      	ldrb	r3, [r3, #0]
 800affc:	461a      	mov	r2, r3
 800affe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b000:	4293      	cmp	r3, r2
 800b002:	f4ff ae71 	bcc.w	800ace8 <BSP_TS_GetState+0x40>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f000 f80a 	bl	800b020 <BSP_TS_Get_GestureId>
 800b00c:	4603      	mov	r3, r0
 800b00e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 800b012:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800b016:	4618      	mov	r0, r3
 800b018:	3754      	adds	r7, #84	@ 0x54
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd90      	pop	{r4, r7, pc}
 800b01e:	bf00      	nop

0800b020 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b084      	sub	sp, #16
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 800b028:	2300      	movs	r3, #0
 800b02a:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 800b02c:	2300      	movs	r3, #0
 800b02e:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 800b030:	4b3b      	ldr	r3, [pc, #236]	@ (800b120 <BSP_TS_Get_GestureId+0x100>)
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	461a      	mov	r2, r3
 800b036:	f107 0308 	add.w	r3, r7, #8
 800b03a:	4619      	mov	r1, r3
 800b03c:	4610      	mov	r0, r2
 800b03e:	f7fe f9d8 	bl	80093f2 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	2b49      	cmp	r3, #73	@ 0x49
 800b046:	d05e      	beq.n	800b106 <BSP_TS_Get_GestureId+0xe6>
 800b048:	2b49      	cmp	r3, #73	@ 0x49
 800b04a:	d860      	bhi.n	800b10e <BSP_TS_Get_GestureId+0xee>
 800b04c:	2b1c      	cmp	r3, #28
 800b04e:	d83f      	bhi.n	800b0d0 <BSP_TS_Get_GestureId+0xb0>
 800b050:	2b1c      	cmp	r3, #28
 800b052:	d85c      	bhi.n	800b10e <BSP_TS_Get_GestureId+0xee>
 800b054:	a201      	add	r2, pc, #4	@ (adr r2, 800b05c <BSP_TS_Get_GestureId+0x3c>)
 800b056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b05a:	bf00      	nop
 800b05c:	0800b0d7 	.word	0x0800b0d7
 800b060:	0800b10f 	.word	0x0800b10f
 800b064:	0800b10f 	.word	0x0800b10f
 800b068:	0800b10f 	.word	0x0800b10f
 800b06c:	0800b10f 	.word	0x0800b10f
 800b070:	0800b10f 	.word	0x0800b10f
 800b074:	0800b10f 	.word	0x0800b10f
 800b078:	0800b10f 	.word	0x0800b10f
 800b07c:	0800b10f 	.word	0x0800b10f
 800b080:	0800b10f 	.word	0x0800b10f
 800b084:	0800b10f 	.word	0x0800b10f
 800b088:	0800b10f 	.word	0x0800b10f
 800b08c:	0800b10f 	.word	0x0800b10f
 800b090:	0800b10f 	.word	0x0800b10f
 800b094:	0800b10f 	.word	0x0800b10f
 800b098:	0800b10f 	.word	0x0800b10f
 800b09c:	0800b0df 	.word	0x0800b0df
 800b0a0:	0800b10f 	.word	0x0800b10f
 800b0a4:	0800b10f 	.word	0x0800b10f
 800b0a8:	0800b10f 	.word	0x0800b10f
 800b0ac:	0800b0e7 	.word	0x0800b0e7
 800b0b0:	0800b10f 	.word	0x0800b10f
 800b0b4:	0800b10f 	.word	0x0800b10f
 800b0b8:	0800b10f 	.word	0x0800b10f
 800b0bc:	0800b0ef 	.word	0x0800b0ef
 800b0c0:	0800b10f 	.word	0x0800b10f
 800b0c4:	0800b10f 	.word	0x0800b10f
 800b0c8:	0800b10f 	.word	0x0800b10f
 800b0cc:	0800b0f7 	.word	0x0800b0f7
 800b0d0:	2b40      	cmp	r3, #64	@ 0x40
 800b0d2:	d014      	beq.n	800b0fe <BSP_TS_Get_GestureId+0xde>
 800b0d4:	e01b      	b.n	800b10e <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 800b0dc:	e01a      	b.n	800b114 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2201      	movs	r2, #1
 800b0e2:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 800b0e4:	e016      	b.n	800b114 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2202      	movs	r2, #2
 800b0ea:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 800b0ec:	e012      	b.n	800b114 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2203      	movs	r2, #3
 800b0f2:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 800b0f4:	e00e      	b.n	800b114 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2204      	movs	r2, #4
 800b0fa:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 800b0fc:	e00a      	b.n	800b114 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2205      	movs	r2, #5
 800b102:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 800b104:	e006      	b.n	800b114 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2206      	movs	r2, #6
 800b10a:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 800b10c:	e002      	b.n	800b114 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 800b10e:	2301      	movs	r3, #1
 800b110:	73fb      	strb	r3, [r7, #15]
      break;
 800b112:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 800b114:	7bfb      	ldrb	r3, [r7, #15]
}
 800b116:	4618      	mov	r0, r3
 800b118:	3710      	adds	r7, #16
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
 800b11e:	bf00      	nop
 800b120:	20000c71 	.word	0x20000c71

0800b124 <malloc>:
 800b124:	4b02      	ldr	r3, [pc, #8]	@ (800b130 <malloc+0xc>)
 800b126:	4601      	mov	r1, r0
 800b128:	6818      	ldr	r0, [r3, #0]
 800b12a:	f000 b82d 	b.w	800b188 <_malloc_r>
 800b12e:	bf00      	nop
 800b130:	20000044 	.word	0x20000044

0800b134 <free>:
 800b134:	4b02      	ldr	r3, [pc, #8]	@ (800b140 <free+0xc>)
 800b136:	4601      	mov	r1, r0
 800b138:	6818      	ldr	r0, [r3, #0]
 800b13a:	f000 b915 	b.w	800b368 <_free_r>
 800b13e:	bf00      	nop
 800b140:	20000044 	.word	0x20000044

0800b144 <sbrk_aligned>:
 800b144:	b570      	push	{r4, r5, r6, lr}
 800b146:	4e0f      	ldr	r6, [pc, #60]	@ (800b184 <sbrk_aligned+0x40>)
 800b148:	460c      	mov	r4, r1
 800b14a:	6831      	ldr	r1, [r6, #0]
 800b14c:	4605      	mov	r5, r0
 800b14e:	b911      	cbnz	r1, 800b156 <sbrk_aligned+0x12>
 800b150:	f000 f8ce 	bl	800b2f0 <_sbrk_r>
 800b154:	6030      	str	r0, [r6, #0]
 800b156:	4621      	mov	r1, r4
 800b158:	4628      	mov	r0, r5
 800b15a:	f000 f8c9 	bl	800b2f0 <_sbrk_r>
 800b15e:	1c43      	adds	r3, r0, #1
 800b160:	d103      	bne.n	800b16a <sbrk_aligned+0x26>
 800b162:	f04f 34ff 	mov.w	r4, #4294967295
 800b166:	4620      	mov	r0, r4
 800b168:	bd70      	pop	{r4, r5, r6, pc}
 800b16a:	1cc4      	adds	r4, r0, #3
 800b16c:	f024 0403 	bic.w	r4, r4, #3
 800b170:	42a0      	cmp	r0, r4
 800b172:	d0f8      	beq.n	800b166 <sbrk_aligned+0x22>
 800b174:	1a21      	subs	r1, r4, r0
 800b176:	4628      	mov	r0, r5
 800b178:	f000 f8ba 	bl	800b2f0 <_sbrk_r>
 800b17c:	3001      	adds	r0, #1
 800b17e:	d1f2      	bne.n	800b166 <sbrk_aligned+0x22>
 800b180:	e7ef      	b.n	800b162 <sbrk_aligned+0x1e>
 800b182:	bf00      	nop
 800b184:	20000c9c 	.word	0x20000c9c

0800b188 <_malloc_r>:
 800b188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b18c:	1ccd      	adds	r5, r1, #3
 800b18e:	f025 0503 	bic.w	r5, r5, #3
 800b192:	3508      	adds	r5, #8
 800b194:	2d0c      	cmp	r5, #12
 800b196:	bf38      	it	cc
 800b198:	250c      	movcc	r5, #12
 800b19a:	2d00      	cmp	r5, #0
 800b19c:	4606      	mov	r6, r0
 800b19e:	db01      	blt.n	800b1a4 <_malloc_r+0x1c>
 800b1a0:	42a9      	cmp	r1, r5
 800b1a2:	d904      	bls.n	800b1ae <_malloc_r+0x26>
 800b1a4:	230c      	movs	r3, #12
 800b1a6:	6033      	str	r3, [r6, #0]
 800b1a8:	2000      	movs	r0, #0
 800b1aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b284 <_malloc_r+0xfc>
 800b1b2:	f000 f869 	bl	800b288 <__malloc_lock>
 800b1b6:	f8d8 3000 	ldr.w	r3, [r8]
 800b1ba:	461c      	mov	r4, r3
 800b1bc:	bb44      	cbnz	r4, 800b210 <_malloc_r+0x88>
 800b1be:	4629      	mov	r1, r5
 800b1c0:	4630      	mov	r0, r6
 800b1c2:	f7ff ffbf 	bl	800b144 <sbrk_aligned>
 800b1c6:	1c43      	adds	r3, r0, #1
 800b1c8:	4604      	mov	r4, r0
 800b1ca:	d158      	bne.n	800b27e <_malloc_r+0xf6>
 800b1cc:	f8d8 4000 	ldr.w	r4, [r8]
 800b1d0:	4627      	mov	r7, r4
 800b1d2:	2f00      	cmp	r7, #0
 800b1d4:	d143      	bne.n	800b25e <_malloc_r+0xd6>
 800b1d6:	2c00      	cmp	r4, #0
 800b1d8:	d04b      	beq.n	800b272 <_malloc_r+0xea>
 800b1da:	6823      	ldr	r3, [r4, #0]
 800b1dc:	4639      	mov	r1, r7
 800b1de:	4630      	mov	r0, r6
 800b1e0:	eb04 0903 	add.w	r9, r4, r3
 800b1e4:	f000 f884 	bl	800b2f0 <_sbrk_r>
 800b1e8:	4581      	cmp	r9, r0
 800b1ea:	d142      	bne.n	800b272 <_malloc_r+0xea>
 800b1ec:	6821      	ldr	r1, [r4, #0]
 800b1ee:	1a6d      	subs	r5, r5, r1
 800b1f0:	4629      	mov	r1, r5
 800b1f2:	4630      	mov	r0, r6
 800b1f4:	f7ff ffa6 	bl	800b144 <sbrk_aligned>
 800b1f8:	3001      	adds	r0, #1
 800b1fa:	d03a      	beq.n	800b272 <_malloc_r+0xea>
 800b1fc:	6823      	ldr	r3, [r4, #0]
 800b1fe:	442b      	add	r3, r5
 800b200:	6023      	str	r3, [r4, #0]
 800b202:	f8d8 3000 	ldr.w	r3, [r8]
 800b206:	685a      	ldr	r2, [r3, #4]
 800b208:	bb62      	cbnz	r2, 800b264 <_malloc_r+0xdc>
 800b20a:	f8c8 7000 	str.w	r7, [r8]
 800b20e:	e00f      	b.n	800b230 <_malloc_r+0xa8>
 800b210:	6822      	ldr	r2, [r4, #0]
 800b212:	1b52      	subs	r2, r2, r5
 800b214:	d420      	bmi.n	800b258 <_malloc_r+0xd0>
 800b216:	2a0b      	cmp	r2, #11
 800b218:	d917      	bls.n	800b24a <_malloc_r+0xc2>
 800b21a:	1961      	adds	r1, r4, r5
 800b21c:	42a3      	cmp	r3, r4
 800b21e:	6025      	str	r5, [r4, #0]
 800b220:	bf18      	it	ne
 800b222:	6059      	strne	r1, [r3, #4]
 800b224:	6863      	ldr	r3, [r4, #4]
 800b226:	bf08      	it	eq
 800b228:	f8c8 1000 	streq.w	r1, [r8]
 800b22c:	5162      	str	r2, [r4, r5]
 800b22e:	604b      	str	r3, [r1, #4]
 800b230:	4630      	mov	r0, r6
 800b232:	f000 f82f 	bl	800b294 <__malloc_unlock>
 800b236:	f104 000b 	add.w	r0, r4, #11
 800b23a:	1d23      	adds	r3, r4, #4
 800b23c:	f020 0007 	bic.w	r0, r0, #7
 800b240:	1ac2      	subs	r2, r0, r3
 800b242:	bf1c      	itt	ne
 800b244:	1a1b      	subne	r3, r3, r0
 800b246:	50a3      	strne	r3, [r4, r2]
 800b248:	e7af      	b.n	800b1aa <_malloc_r+0x22>
 800b24a:	6862      	ldr	r2, [r4, #4]
 800b24c:	42a3      	cmp	r3, r4
 800b24e:	bf0c      	ite	eq
 800b250:	f8c8 2000 	streq.w	r2, [r8]
 800b254:	605a      	strne	r2, [r3, #4]
 800b256:	e7eb      	b.n	800b230 <_malloc_r+0xa8>
 800b258:	4623      	mov	r3, r4
 800b25a:	6864      	ldr	r4, [r4, #4]
 800b25c:	e7ae      	b.n	800b1bc <_malloc_r+0x34>
 800b25e:	463c      	mov	r4, r7
 800b260:	687f      	ldr	r7, [r7, #4]
 800b262:	e7b6      	b.n	800b1d2 <_malloc_r+0x4a>
 800b264:	461a      	mov	r2, r3
 800b266:	685b      	ldr	r3, [r3, #4]
 800b268:	42a3      	cmp	r3, r4
 800b26a:	d1fb      	bne.n	800b264 <_malloc_r+0xdc>
 800b26c:	2300      	movs	r3, #0
 800b26e:	6053      	str	r3, [r2, #4]
 800b270:	e7de      	b.n	800b230 <_malloc_r+0xa8>
 800b272:	230c      	movs	r3, #12
 800b274:	6033      	str	r3, [r6, #0]
 800b276:	4630      	mov	r0, r6
 800b278:	f000 f80c 	bl	800b294 <__malloc_unlock>
 800b27c:	e794      	b.n	800b1a8 <_malloc_r+0x20>
 800b27e:	6005      	str	r5, [r0, #0]
 800b280:	e7d6      	b.n	800b230 <_malloc_r+0xa8>
 800b282:	bf00      	nop
 800b284:	20000ca0 	.word	0x20000ca0

0800b288 <__malloc_lock>:
 800b288:	4801      	ldr	r0, [pc, #4]	@ (800b290 <__malloc_lock+0x8>)
 800b28a:	f000 b86b 	b.w	800b364 <__retarget_lock_acquire_recursive>
 800b28e:	bf00      	nop
 800b290:	20000de0 	.word	0x20000de0

0800b294 <__malloc_unlock>:
 800b294:	4801      	ldr	r0, [pc, #4]	@ (800b29c <__malloc_unlock+0x8>)
 800b296:	f000 b866 	b.w	800b366 <__retarget_lock_release_recursive>
 800b29a:	bf00      	nop
 800b29c:	20000de0 	.word	0x20000de0

0800b2a0 <siprintf>:
 800b2a0:	b40e      	push	{r1, r2, r3}
 800b2a2:	b500      	push	{lr}
 800b2a4:	b09c      	sub	sp, #112	@ 0x70
 800b2a6:	ab1d      	add	r3, sp, #116	@ 0x74
 800b2a8:	9002      	str	r0, [sp, #8]
 800b2aa:	9006      	str	r0, [sp, #24]
 800b2ac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b2b0:	4809      	ldr	r0, [pc, #36]	@ (800b2d8 <siprintf+0x38>)
 800b2b2:	9107      	str	r1, [sp, #28]
 800b2b4:	9104      	str	r1, [sp, #16]
 800b2b6:	4909      	ldr	r1, [pc, #36]	@ (800b2dc <siprintf+0x3c>)
 800b2b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2bc:	9105      	str	r1, [sp, #20]
 800b2be:	6800      	ldr	r0, [r0, #0]
 800b2c0:	9301      	str	r3, [sp, #4]
 800b2c2:	a902      	add	r1, sp, #8
 800b2c4:	f000 f8f6 	bl	800b4b4 <_svfiprintf_r>
 800b2c8:	9b02      	ldr	r3, [sp, #8]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	701a      	strb	r2, [r3, #0]
 800b2ce:	b01c      	add	sp, #112	@ 0x70
 800b2d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2d4:	b003      	add	sp, #12
 800b2d6:	4770      	bx	lr
 800b2d8:	20000044 	.word	0x20000044
 800b2dc:	ffff0208 	.word	0xffff0208

0800b2e0 <memset>:
 800b2e0:	4402      	add	r2, r0
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	d100      	bne.n	800b2ea <memset+0xa>
 800b2e8:	4770      	bx	lr
 800b2ea:	f803 1b01 	strb.w	r1, [r3], #1
 800b2ee:	e7f9      	b.n	800b2e4 <memset+0x4>

0800b2f0 <_sbrk_r>:
 800b2f0:	b538      	push	{r3, r4, r5, lr}
 800b2f2:	4d06      	ldr	r5, [pc, #24]	@ (800b30c <_sbrk_r+0x1c>)
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	4604      	mov	r4, r0
 800b2f8:	4608      	mov	r0, r1
 800b2fa:	602b      	str	r3, [r5, #0]
 800b2fc:	f7f5 ff04 	bl	8001108 <_sbrk>
 800b300:	1c43      	adds	r3, r0, #1
 800b302:	d102      	bne.n	800b30a <_sbrk_r+0x1a>
 800b304:	682b      	ldr	r3, [r5, #0]
 800b306:	b103      	cbz	r3, 800b30a <_sbrk_r+0x1a>
 800b308:	6023      	str	r3, [r4, #0]
 800b30a:	bd38      	pop	{r3, r4, r5, pc}
 800b30c:	20000ddc 	.word	0x20000ddc

0800b310 <__errno>:
 800b310:	4b01      	ldr	r3, [pc, #4]	@ (800b318 <__errno+0x8>)
 800b312:	6818      	ldr	r0, [r3, #0]
 800b314:	4770      	bx	lr
 800b316:	bf00      	nop
 800b318:	20000044 	.word	0x20000044

0800b31c <__libc_init_array>:
 800b31c:	b570      	push	{r4, r5, r6, lr}
 800b31e:	4d0d      	ldr	r5, [pc, #52]	@ (800b354 <__libc_init_array+0x38>)
 800b320:	4c0d      	ldr	r4, [pc, #52]	@ (800b358 <__libc_init_array+0x3c>)
 800b322:	1b64      	subs	r4, r4, r5
 800b324:	10a4      	asrs	r4, r4, #2
 800b326:	2600      	movs	r6, #0
 800b328:	42a6      	cmp	r6, r4
 800b32a:	d109      	bne.n	800b340 <__libc_init_array+0x24>
 800b32c:	4d0b      	ldr	r5, [pc, #44]	@ (800b35c <__libc_init_array+0x40>)
 800b32e:	4c0c      	ldr	r4, [pc, #48]	@ (800b360 <__libc_init_array+0x44>)
 800b330:	f000 fba8 	bl	800ba84 <_init>
 800b334:	1b64      	subs	r4, r4, r5
 800b336:	10a4      	asrs	r4, r4, #2
 800b338:	2600      	movs	r6, #0
 800b33a:	42a6      	cmp	r6, r4
 800b33c:	d105      	bne.n	800b34a <__libc_init_array+0x2e>
 800b33e:	bd70      	pop	{r4, r5, r6, pc}
 800b340:	f855 3b04 	ldr.w	r3, [r5], #4
 800b344:	4798      	blx	r3
 800b346:	3601      	adds	r6, #1
 800b348:	e7ee      	b.n	800b328 <__libc_init_array+0xc>
 800b34a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b34e:	4798      	blx	r3
 800b350:	3601      	adds	r6, #1
 800b352:	e7f2      	b.n	800b33a <__libc_init_array+0x1e>
 800b354:	0800d734 	.word	0x0800d734
 800b358:	0800d734 	.word	0x0800d734
 800b35c:	0800d734 	.word	0x0800d734
 800b360:	0800d738 	.word	0x0800d738

0800b364 <__retarget_lock_acquire_recursive>:
 800b364:	4770      	bx	lr

0800b366 <__retarget_lock_release_recursive>:
 800b366:	4770      	bx	lr

0800b368 <_free_r>:
 800b368:	b538      	push	{r3, r4, r5, lr}
 800b36a:	4605      	mov	r5, r0
 800b36c:	2900      	cmp	r1, #0
 800b36e:	d041      	beq.n	800b3f4 <_free_r+0x8c>
 800b370:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b374:	1f0c      	subs	r4, r1, #4
 800b376:	2b00      	cmp	r3, #0
 800b378:	bfb8      	it	lt
 800b37a:	18e4      	addlt	r4, r4, r3
 800b37c:	f7ff ff84 	bl	800b288 <__malloc_lock>
 800b380:	4a1d      	ldr	r2, [pc, #116]	@ (800b3f8 <_free_r+0x90>)
 800b382:	6813      	ldr	r3, [r2, #0]
 800b384:	b933      	cbnz	r3, 800b394 <_free_r+0x2c>
 800b386:	6063      	str	r3, [r4, #4]
 800b388:	6014      	str	r4, [r2, #0]
 800b38a:	4628      	mov	r0, r5
 800b38c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b390:	f7ff bf80 	b.w	800b294 <__malloc_unlock>
 800b394:	42a3      	cmp	r3, r4
 800b396:	d908      	bls.n	800b3aa <_free_r+0x42>
 800b398:	6820      	ldr	r0, [r4, #0]
 800b39a:	1821      	adds	r1, r4, r0
 800b39c:	428b      	cmp	r3, r1
 800b39e:	bf01      	itttt	eq
 800b3a0:	6819      	ldreq	r1, [r3, #0]
 800b3a2:	685b      	ldreq	r3, [r3, #4]
 800b3a4:	1809      	addeq	r1, r1, r0
 800b3a6:	6021      	streq	r1, [r4, #0]
 800b3a8:	e7ed      	b.n	800b386 <_free_r+0x1e>
 800b3aa:	461a      	mov	r2, r3
 800b3ac:	685b      	ldr	r3, [r3, #4]
 800b3ae:	b10b      	cbz	r3, 800b3b4 <_free_r+0x4c>
 800b3b0:	42a3      	cmp	r3, r4
 800b3b2:	d9fa      	bls.n	800b3aa <_free_r+0x42>
 800b3b4:	6811      	ldr	r1, [r2, #0]
 800b3b6:	1850      	adds	r0, r2, r1
 800b3b8:	42a0      	cmp	r0, r4
 800b3ba:	d10b      	bne.n	800b3d4 <_free_r+0x6c>
 800b3bc:	6820      	ldr	r0, [r4, #0]
 800b3be:	4401      	add	r1, r0
 800b3c0:	1850      	adds	r0, r2, r1
 800b3c2:	4283      	cmp	r3, r0
 800b3c4:	6011      	str	r1, [r2, #0]
 800b3c6:	d1e0      	bne.n	800b38a <_free_r+0x22>
 800b3c8:	6818      	ldr	r0, [r3, #0]
 800b3ca:	685b      	ldr	r3, [r3, #4]
 800b3cc:	6053      	str	r3, [r2, #4]
 800b3ce:	4408      	add	r0, r1
 800b3d0:	6010      	str	r0, [r2, #0]
 800b3d2:	e7da      	b.n	800b38a <_free_r+0x22>
 800b3d4:	d902      	bls.n	800b3dc <_free_r+0x74>
 800b3d6:	230c      	movs	r3, #12
 800b3d8:	602b      	str	r3, [r5, #0]
 800b3da:	e7d6      	b.n	800b38a <_free_r+0x22>
 800b3dc:	6820      	ldr	r0, [r4, #0]
 800b3de:	1821      	adds	r1, r4, r0
 800b3e0:	428b      	cmp	r3, r1
 800b3e2:	bf04      	itt	eq
 800b3e4:	6819      	ldreq	r1, [r3, #0]
 800b3e6:	685b      	ldreq	r3, [r3, #4]
 800b3e8:	6063      	str	r3, [r4, #4]
 800b3ea:	bf04      	itt	eq
 800b3ec:	1809      	addeq	r1, r1, r0
 800b3ee:	6021      	streq	r1, [r4, #0]
 800b3f0:	6054      	str	r4, [r2, #4]
 800b3f2:	e7ca      	b.n	800b38a <_free_r+0x22>
 800b3f4:	bd38      	pop	{r3, r4, r5, pc}
 800b3f6:	bf00      	nop
 800b3f8:	20000ca0 	.word	0x20000ca0

0800b3fc <__ssputs_r>:
 800b3fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b400:	688e      	ldr	r6, [r1, #8]
 800b402:	461f      	mov	r7, r3
 800b404:	42be      	cmp	r6, r7
 800b406:	680b      	ldr	r3, [r1, #0]
 800b408:	4682      	mov	sl, r0
 800b40a:	460c      	mov	r4, r1
 800b40c:	4690      	mov	r8, r2
 800b40e:	d82d      	bhi.n	800b46c <__ssputs_r+0x70>
 800b410:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b414:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b418:	d026      	beq.n	800b468 <__ssputs_r+0x6c>
 800b41a:	6965      	ldr	r5, [r4, #20]
 800b41c:	6909      	ldr	r1, [r1, #16]
 800b41e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b422:	eba3 0901 	sub.w	r9, r3, r1
 800b426:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b42a:	1c7b      	adds	r3, r7, #1
 800b42c:	444b      	add	r3, r9
 800b42e:	106d      	asrs	r5, r5, #1
 800b430:	429d      	cmp	r5, r3
 800b432:	bf38      	it	cc
 800b434:	461d      	movcc	r5, r3
 800b436:	0553      	lsls	r3, r2, #21
 800b438:	d527      	bpl.n	800b48a <__ssputs_r+0x8e>
 800b43a:	4629      	mov	r1, r5
 800b43c:	f7ff fea4 	bl	800b188 <_malloc_r>
 800b440:	4606      	mov	r6, r0
 800b442:	b360      	cbz	r0, 800b49e <__ssputs_r+0xa2>
 800b444:	6921      	ldr	r1, [r4, #16]
 800b446:	464a      	mov	r2, r9
 800b448:	f000 fad8 	bl	800b9fc <memcpy>
 800b44c:	89a3      	ldrh	r3, [r4, #12]
 800b44e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b452:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b456:	81a3      	strh	r3, [r4, #12]
 800b458:	6126      	str	r6, [r4, #16]
 800b45a:	6165      	str	r5, [r4, #20]
 800b45c:	444e      	add	r6, r9
 800b45e:	eba5 0509 	sub.w	r5, r5, r9
 800b462:	6026      	str	r6, [r4, #0]
 800b464:	60a5      	str	r5, [r4, #8]
 800b466:	463e      	mov	r6, r7
 800b468:	42be      	cmp	r6, r7
 800b46a:	d900      	bls.n	800b46e <__ssputs_r+0x72>
 800b46c:	463e      	mov	r6, r7
 800b46e:	6820      	ldr	r0, [r4, #0]
 800b470:	4632      	mov	r2, r6
 800b472:	4641      	mov	r1, r8
 800b474:	f000 faa8 	bl	800b9c8 <memmove>
 800b478:	68a3      	ldr	r3, [r4, #8]
 800b47a:	1b9b      	subs	r3, r3, r6
 800b47c:	60a3      	str	r3, [r4, #8]
 800b47e:	6823      	ldr	r3, [r4, #0]
 800b480:	4433      	add	r3, r6
 800b482:	6023      	str	r3, [r4, #0]
 800b484:	2000      	movs	r0, #0
 800b486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b48a:	462a      	mov	r2, r5
 800b48c:	f000 fac4 	bl	800ba18 <_realloc_r>
 800b490:	4606      	mov	r6, r0
 800b492:	2800      	cmp	r0, #0
 800b494:	d1e0      	bne.n	800b458 <__ssputs_r+0x5c>
 800b496:	6921      	ldr	r1, [r4, #16]
 800b498:	4650      	mov	r0, sl
 800b49a:	f7ff ff65 	bl	800b368 <_free_r>
 800b49e:	230c      	movs	r3, #12
 800b4a0:	f8ca 3000 	str.w	r3, [sl]
 800b4a4:	89a3      	ldrh	r3, [r4, #12]
 800b4a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4aa:	81a3      	strh	r3, [r4, #12]
 800b4ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b4b0:	e7e9      	b.n	800b486 <__ssputs_r+0x8a>
	...

0800b4b4 <_svfiprintf_r>:
 800b4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4b8:	4698      	mov	r8, r3
 800b4ba:	898b      	ldrh	r3, [r1, #12]
 800b4bc:	061b      	lsls	r3, r3, #24
 800b4be:	b09d      	sub	sp, #116	@ 0x74
 800b4c0:	4607      	mov	r7, r0
 800b4c2:	460d      	mov	r5, r1
 800b4c4:	4614      	mov	r4, r2
 800b4c6:	d510      	bpl.n	800b4ea <_svfiprintf_r+0x36>
 800b4c8:	690b      	ldr	r3, [r1, #16]
 800b4ca:	b973      	cbnz	r3, 800b4ea <_svfiprintf_r+0x36>
 800b4cc:	2140      	movs	r1, #64	@ 0x40
 800b4ce:	f7ff fe5b 	bl	800b188 <_malloc_r>
 800b4d2:	6028      	str	r0, [r5, #0]
 800b4d4:	6128      	str	r0, [r5, #16]
 800b4d6:	b930      	cbnz	r0, 800b4e6 <_svfiprintf_r+0x32>
 800b4d8:	230c      	movs	r3, #12
 800b4da:	603b      	str	r3, [r7, #0]
 800b4dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b4e0:	b01d      	add	sp, #116	@ 0x74
 800b4e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4e6:	2340      	movs	r3, #64	@ 0x40
 800b4e8:	616b      	str	r3, [r5, #20]
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4ee:	2320      	movs	r3, #32
 800b4f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b4f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4f8:	2330      	movs	r3, #48	@ 0x30
 800b4fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b698 <_svfiprintf_r+0x1e4>
 800b4fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b502:	f04f 0901 	mov.w	r9, #1
 800b506:	4623      	mov	r3, r4
 800b508:	469a      	mov	sl, r3
 800b50a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b50e:	b10a      	cbz	r2, 800b514 <_svfiprintf_r+0x60>
 800b510:	2a25      	cmp	r2, #37	@ 0x25
 800b512:	d1f9      	bne.n	800b508 <_svfiprintf_r+0x54>
 800b514:	ebba 0b04 	subs.w	fp, sl, r4
 800b518:	d00b      	beq.n	800b532 <_svfiprintf_r+0x7e>
 800b51a:	465b      	mov	r3, fp
 800b51c:	4622      	mov	r2, r4
 800b51e:	4629      	mov	r1, r5
 800b520:	4638      	mov	r0, r7
 800b522:	f7ff ff6b 	bl	800b3fc <__ssputs_r>
 800b526:	3001      	adds	r0, #1
 800b528:	f000 80a7 	beq.w	800b67a <_svfiprintf_r+0x1c6>
 800b52c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b52e:	445a      	add	r2, fp
 800b530:	9209      	str	r2, [sp, #36]	@ 0x24
 800b532:	f89a 3000 	ldrb.w	r3, [sl]
 800b536:	2b00      	cmp	r3, #0
 800b538:	f000 809f 	beq.w	800b67a <_svfiprintf_r+0x1c6>
 800b53c:	2300      	movs	r3, #0
 800b53e:	f04f 32ff 	mov.w	r2, #4294967295
 800b542:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b546:	f10a 0a01 	add.w	sl, sl, #1
 800b54a:	9304      	str	r3, [sp, #16]
 800b54c:	9307      	str	r3, [sp, #28]
 800b54e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b552:	931a      	str	r3, [sp, #104]	@ 0x68
 800b554:	4654      	mov	r4, sl
 800b556:	2205      	movs	r2, #5
 800b558:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b55c:	484e      	ldr	r0, [pc, #312]	@ (800b698 <_svfiprintf_r+0x1e4>)
 800b55e:	f7f4 fe57 	bl	8000210 <memchr>
 800b562:	9a04      	ldr	r2, [sp, #16]
 800b564:	b9d8      	cbnz	r0, 800b59e <_svfiprintf_r+0xea>
 800b566:	06d0      	lsls	r0, r2, #27
 800b568:	bf44      	itt	mi
 800b56a:	2320      	movmi	r3, #32
 800b56c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b570:	0711      	lsls	r1, r2, #28
 800b572:	bf44      	itt	mi
 800b574:	232b      	movmi	r3, #43	@ 0x2b
 800b576:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b57a:	f89a 3000 	ldrb.w	r3, [sl]
 800b57e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b580:	d015      	beq.n	800b5ae <_svfiprintf_r+0xfa>
 800b582:	9a07      	ldr	r2, [sp, #28]
 800b584:	4654      	mov	r4, sl
 800b586:	2000      	movs	r0, #0
 800b588:	f04f 0c0a 	mov.w	ip, #10
 800b58c:	4621      	mov	r1, r4
 800b58e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b592:	3b30      	subs	r3, #48	@ 0x30
 800b594:	2b09      	cmp	r3, #9
 800b596:	d94b      	bls.n	800b630 <_svfiprintf_r+0x17c>
 800b598:	b1b0      	cbz	r0, 800b5c8 <_svfiprintf_r+0x114>
 800b59a:	9207      	str	r2, [sp, #28]
 800b59c:	e014      	b.n	800b5c8 <_svfiprintf_r+0x114>
 800b59e:	eba0 0308 	sub.w	r3, r0, r8
 800b5a2:	fa09 f303 	lsl.w	r3, r9, r3
 800b5a6:	4313      	orrs	r3, r2
 800b5a8:	9304      	str	r3, [sp, #16]
 800b5aa:	46a2      	mov	sl, r4
 800b5ac:	e7d2      	b.n	800b554 <_svfiprintf_r+0xa0>
 800b5ae:	9b03      	ldr	r3, [sp, #12]
 800b5b0:	1d19      	adds	r1, r3, #4
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	9103      	str	r1, [sp, #12]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	bfbb      	ittet	lt
 800b5ba:	425b      	neglt	r3, r3
 800b5bc:	f042 0202 	orrlt.w	r2, r2, #2
 800b5c0:	9307      	strge	r3, [sp, #28]
 800b5c2:	9307      	strlt	r3, [sp, #28]
 800b5c4:	bfb8      	it	lt
 800b5c6:	9204      	strlt	r2, [sp, #16]
 800b5c8:	7823      	ldrb	r3, [r4, #0]
 800b5ca:	2b2e      	cmp	r3, #46	@ 0x2e
 800b5cc:	d10a      	bne.n	800b5e4 <_svfiprintf_r+0x130>
 800b5ce:	7863      	ldrb	r3, [r4, #1]
 800b5d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5d2:	d132      	bne.n	800b63a <_svfiprintf_r+0x186>
 800b5d4:	9b03      	ldr	r3, [sp, #12]
 800b5d6:	1d1a      	adds	r2, r3, #4
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	9203      	str	r2, [sp, #12]
 800b5dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b5e0:	3402      	adds	r4, #2
 800b5e2:	9305      	str	r3, [sp, #20]
 800b5e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b6a8 <_svfiprintf_r+0x1f4>
 800b5e8:	7821      	ldrb	r1, [r4, #0]
 800b5ea:	2203      	movs	r2, #3
 800b5ec:	4650      	mov	r0, sl
 800b5ee:	f7f4 fe0f 	bl	8000210 <memchr>
 800b5f2:	b138      	cbz	r0, 800b604 <_svfiprintf_r+0x150>
 800b5f4:	9b04      	ldr	r3, [sp, #16]
 800b5f6:	eba0 000a 	sub.w	r0, r0, sl
 800b5fa:	2240      	movs	r2, #64	@ 0x40
 800b5fc:	4082      	lsls	r2, r0
 800b5fe:	4313      	orrs	r3, r2
 800b600:	3401      	adds	r4, #1
 800b602:	9304      	str	r3, [sp, #16]
 800b604:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b608:	4824      	ldr	r0, [pc, #144]	@ (800b69c <_svfiprintf_r+0x1e8>)
 800b60a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b60e:	2206      	movs	r2, #6
 800b610:	f7f4 fdfe 	bl	8000210 <memchr>
 800b614:	2800      	cmp	r0, #0
 800b616:	d036      	beq.n	800b686 <_svfiprintf_r+0x1d2>
 800b618:	4b21      	ldr	r3, [pc, #132]	@ (800b6a0 <_svfiprintf_r+0x1ec>)
 800b61a:	bb1b      	cbnz	r3, 800b664 <_svfiprintf_r+0x1b0>
 800b61c:	9b03      	ldr	r3, [sp, #12]
 800b61e:	3307      	adds	r3, #7
 800b620:	f023 0307 	bic.w	r3, r3, #7
 800b624:	3308      	adds	r3, #8
 800b626:	9303      	str	r3, [sp, #12]
 800b628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b62a:	4433      	add	r3, r6
 800b62c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b62e:	e76a      	b.n	800b506 <_svfiprintf_r+0x52>
 800b630:	fb0c 3202 	mla	r2, ip, r2, r3
 800b634:	460c      	mov	r4, r1
 800b636:	2001      	movs	r0, #1
 800b638:	e7a8      	b.n	800b58c <_svfiprintf_r+0xd8>
 800b63a:	2300      	movs	r3, #0
 800b63c:	3401      	adds	r4, #1
 800b63e:	9305      	str	r3, [sp, #20]
 800b640:	4619      	mov	r1, r3
 800b642:	f04f 0c0a 	mov.w	ip, #10
 800b646:	4620      	mov	r0, r4
 800b648:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b64c:	3a30      	subs	r2, #48	@ 0x30
 800b64e:	2a09      	cmp	r2, #9
 800b650:	d903      	bls.n	800b65a <_svfiprintf_r+0x1a6>
 800b652:	2b00      	cmp	r3, #0
 800b654:	d0c6      	beq.n	800b5e4 <_svfiprintf_r+0x130>
 800b656:	9105      	str	r1, [sp, #20]
 800b658:	e7c4      	b.n	800b5e4 <_svfiprintf_r+0x130>
 800b65a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b65e:	4604      	mov	r4, r0
 800b660:	2301      	movs	r3, #1
 800b662:	e7f0      	b.n	800b646 <_svfiprintf_r+0x192>
 800b664:	ab03      	add	r3, sp, #12
 800b666:	9300      	str	r3, [sp, #0]
 800b668:	462a      	mov	r2, r5
 800b66a:	4b0e      	ldr	r3, [pc, #56]	@ (800b6a4 <_svfiprintf_r+0x1f0>)
 800b66c:	a904      	add	r1, sp, #16
 800b66e:	4638      	mov	r0, r7
 800b670:	f3af 8000 	nop.w
 800b674:	1c42      	adds	r2, r0, #1
 800b676:	4606      	mov	r6, r0
 800b678:	d1d6      	bne.n	800b628 <_svfiprintf_r+0x174>
 800b67a:	89ab      	ldrh	r3, [r5, #12]
 800b67c:	065b      	lsls	r3, r3, #25
 800b67e:	f53f af2d 	bmi.w	800b4dc <_svfiprintf_r+0x28>
 800b682:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b684:	e72c      	b.n	800b4e0 <_svfiprintf_r+0x2c>
 800b686:	ab03      	add	r3, sp, #12
 800b688:	9300      	str	r3, [sp, #0]
 800b68a:	462a      	mov	r2, r5
 800b68c:	4b05      	ldr	r3, [pc, #20]	@ (800b6a4 <_svfiprintf_r+0x1f0>)
 800b68e:	a904      	add	r1, sp, #16
 800b690:	4638      	mov	r0, r7
 800b692:	f000 f879 	bl	800b788 <_printf_i>
 800b696:	e7ed      	b.n	800b674 <_svfiprintf_r+0x1c0>
 800b698:	0800d6f8 	.word	0x0800d6f8
 800b69c:	0800d702 	.word	0x0800d702
 800b6a0:	00000000 	.word	0x00000000
 800b6a4:	0800b3fd 	.word	0x0800b3fd
 800b6a8:	0800d6fe 	.word	0x0800d6fe

0800b6ac <_printf_common>:
 800b6ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6b0:	4616      	mov	r6, r2
 800b6b2:	4698      	mov	r8, r3
 800b6b4:	688a      	ldr	r2, [r1, #8]
 800b6b6:	690b      	ldr	r3, [r1, #16]
 800b6b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	bfb8      	it	lt
 800b6c0:	4613      	movlt	r3, r2
 800b6c2:	6033      	str	r3, [r6, #0]
 800b6c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b6c8:	4607      	mov	r7, r0
 800b6ca:	460c      	mov	r4, r1
 800b6cc:	b10a      	cbz	r2, 800b6d2 <_printf_common+0x26>
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	6033      	str	r3, [r6, #0]
 800b6d2:	6823      	ldr	r3, [r4, #0]
 800b6d4:	0699      	lsls	r1, r3, #26
 800b6d6:	bf42      	ittt	mi
 800b6d8:	6833      	ldrmi	r3, [r6, #0]
 800b6da:	3302      	addmi	r3, #2
 800b6dc:	6033      	strmi	r3, [r6, #0]
 800b6de:	6825      	ldr	r5, [r4, #0]
 800b6e0:	f015 0506 	ands.w	r5, r5, #6
 800b6e4:	d106      	bne.n	800b6f4 <_printf_common+0x48>
 800b6e6:	f104 0a19 	add.w	sl, r4, #25
 800b6ea:	68e3      	ldr	r3, [r4, #12]
 800b6ec:	6832      	ldr	r2, [r6, #0]
 800b6ee:	1a9b      	subs	r3, r3, r2
 800b6f0:	42ab      	cmp	r3, r5
 800b6f2:	dc26      	bgt.n	800b742 <_printf_common+0x96>
 800b6f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b6f8:	6822      	ldr	r2, [r4, #0]
 800b6fa:	3b00      	subs	r3, #0
 800b6fc:	bf18      	it	ne
 800b6fe:	2301      	movne	r3, #1
 800b700:	0692      	lsls	r2, r2, #26
 800b702:	d42b      	bmi.n	800b75c <_printf_common+0xb0>
 800b704:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b708:	4641      	mov	r1, r8
 800b70a:	4638      	mov	r0, r7
 800b70c:	47c8      	blx	r9
 800b70e:	3001      	adds	r0, #1
 800b710:	d01e      	beq.n	800b750 <_printf_common+0xa4>
 800b712:	6823      	ldr	r3, [r4, #0]
 800b714:	6922      	ldr	r2, [r4, #16]
 800b716:	f003 0306 	and.w	r3, r3, #6
 800b71a:	2b04      	cmp	r3, #4
 800b71c:	bf02      	ittt	eq
 800b71e:	68e5      	ldreq	r5, [r4, #12]
 800b720:	6833      	ldreq	r3, [r6, #0]
 800b722:	1aed      	subeq	r5, r5, r3
 800b724:	68a3      	ldr	r3, [r4, #8]
 800b726:	bf0c      	ite	eq
 800b728:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b72c:	2500      	movne	r5, #0
 800b72e:	4293      	cmp	r3, r2
 800b730:	bfc4      	itt	gt
 800b732:	1a9b      	subgt	r3, r3, r2
 800b734:	18ed      	addgt	r5, r5, r3
 800b736:	2600      	movs	r6, #0
 800b738:	341a      	adds	r4, #26
 800b73a:	42b5      	cmp	r5, r6
 800b73c:	d11a      	bne.n	800b774 <_printf_common+0xc8>
 800b73e:	2000      	movs	r0, #0
 800b740:	e008      	b.n	800b754 <_printf_common+0xa8>
 800b742:	2301      	movs	r3, #1
 800b744:	4652      	mov	r2, sl
 800b746:	4641      	mov	r1, r8
 800b748:	4638      	mov	r0, r7
 800b74a:	47c8      	blx	r9
 800b74c:	3001      	adds	r0, #1
 800b74e:	d103      	bne.n	800b758 <_printf_common+0xac>
 800b750:	f04f 30ff 	mov.w	r0, #4294967295
 800b754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b758:	3501      	adds	r5, #1
 800b75a:	e7c6      	b.n	800b6ea <_printf_common+0x3e>
 800b75c:	18e1      	adds	r1, r4, r3
 800b75e:	1c5a      	adds	r2, r3, #1
 800b760:	2030      	movs	r0, #48	@ 0x30
 800b762:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b766:	4422      	add	r2, r4
 800b768:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b76c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b770:	3302      	adds	r3, #2
 800b772:	e7c7      	b.n	800b704 <_printf_common+0x58>
 800b774:	2301      	movs	r3, #1
 800b776:	4622      	mov	r2, r4
 800b778:	4641      	mov	r1, r8
 800b77a:	4638      	mov	r0, r7
 800b77c:	47c8      	blx	r9
 800b77e:	3001      	adds	r0, #1
 800b780:	d0e6      	beq.n	800b750 <_printf_common+0xa4>
 800b782:	3601      	adds	r6, #1
 800b784:	e7d9      	b.n	800b73a <_printf_common+0x8e>
	...

0800b788 <_printf_i>:
 800b788:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b78c:	7e0f      	ldrb	r7, [r1, #24]
 800b78e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b790:	2f78      	cmp	r7, #120	@ 0x78
 800b792:	4691      	mov	r9, r2
 800b794:	4680      	mov	r8, r0
 800b796:	460c      	mov	r4, r1
 800b798:	469a      	mov	sl, r3
 800b79a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b79e:	d807      	bhi.n	800b7b0 <_printf_i+0x28>
 800b7a0:	2f62      	cmp	r7, #98	@ 0x62
 800b7a2:	d80a      	bhi.n	800b7ba <_printf_i+0x32>
 800b7a4:	2f00      	cmp	r7, #0
 800b7a6:	f000 80d2 	beq.w	800b94e <_printf_i+0x1c6>
 800b7aa:	2f58      	cmp	r7, #88	@ 0x58
 800b7ac:	f000 80b9 	beq.w	800b922 <_printf_i+0x19a>
 800b7b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b7b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b7b8:	e03a      	b.n	800b830 <_printf_i+0xa8>
 800b7ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b7be:	2b15      	cmp	r3, #21
 800b7c0:	d8f6      	bhi.n	800b7b0 <_printf_i+0x28>
 800b7c2:	a101      	add	r1, pc, #4	@ (adr r1, 800b7c8 <_printf_i+0x40>)
 800b7c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b7c8:	0800b821 	.word	0x0800b821
 800b7cc:	0800b835 	.word	0x0800b835
 800b7d0:	0800b7b1 	.word	0x0800b7b1
 800b7d4:	0800b7b1 	.word	0x0800b7b1
 800b7d8:	0800b7b1 	.word	0x0800b7b1
 800b7dc:	0800b7b1 	.word	0x0800b7b1
 800b7e0:	0800b835 	.word	0x0800b835
 800b7e4:	0800b7b1 	.word	0x0800b7b1
 800b7e8:	0800b7b1 	.word	0x0800b7b1
 800b7ec:	0800b7b1 	.word	0x0800b7b1
 800b7f0:	0800b7b1 	.word	0x0800b7b1
 800b7f4:	0800b935 	.word	0x0800b935
 800b7f8:	0800b85f 	.word	0x0800b85f
 800b7fc:	0800b8ef 	.word	0x0800b8ef
 800b800:	0800b7b1 	.word	0x0800b7b1
 800b804:	0800b7b1 	.word	0x0800b7b1
 800b808:	0800b957 	.word	0x0800b957
 800b80c:	0800b7b1 	.word	0x0800b7b1
 800b810:	0800b85f 	.word	0x0800b85f
 800b814:	0800b7b1 	.word	0x0800b7b1
 800b818:	0800b7b1 	.word	0x0800b7b1
 800b81c:	0800b8f7 	.word	0x0800b8f7
 800b820:	6833      	ldr	r3, [r6, #0]
 800b822:	1d1a      	adds	r2, r3, #4
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	6032      	str	r2, [r6, #0]
 800b828:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b82c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b830:	2301      	movs	r3, #1
 800b832:	e09d      	b.n	800b970 <_printf_i+0x1e8>
 800b834:	6833      	ldr	r3, [r6, #0]
 800b836:	6820      	ldr	r0, [r4, #0]
 800b838:	1d19      	adds	r1, r3, #4
 800b83a:	6031      	str	r1, [r6, #0]
 800b83c:	0606      	lsls	r6, r0, #24
 800b83e:	d501      	bpl.n	800b844 <_printf_i+0xbc>
 800b840:	681d      	ldr	r5, [r3, #0]
 800b842:	e003      	b.n	800b84c <_printf_i+0xc4>
 800b844:	0645      	lsls	r5, r0, #25
 800b846:	d5fb      	bpl.n	800b840 <_printf_i+0xb8>
 800b848:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b84c:	2d00      	cmp	r5, #0
 800b84e:	da03      	bge.n	800b858 <_printf_i+0xd0>
 800b850:	232d      	movs	r3, #45	@ 0x2d
 800b852:	426d      	negs	r5, r5
 800b854:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b858:	4859      	ldr	r0, [pc, #356]	@ (800b9c0 <_printf_i+0x238>)
 800b85a:	230a      	movs	r3, #10
 800b85c:	e011      	b.n	800b882 <_printf_i+0xfa>
 800b85e:	6821      	ldr	r1, [r4, #0]
 800b860:	6833      	ldr	r3, [r6, #0]
 800b862:	0608      	lsls	r0, r1, #24
 800b864:	f853 5b04 	ldr.w	r5, [r3], #4
 800b868:	d402      	bmi.n	800b870 <_printf_i+0xe8>
 800b86a:	0649      	lsls	r1, r1, #25
 800b86c:	bf48      	it	mi
 800b86e:	b2ad      	uxthmi	r5, r5
 800b870:	2f6f      	cmp	r7, #111	@ 0x6f
 800b872:	4853      	ldr	r0, [pc, #332]	@ (800b9c0 <_printf_i+0x238>)
 800b874:	6033      	str	r3, [r6, #0]
 800b876:	bf14      	ite	ne
 800b878:	230a      	movne	r3, #10
 800b87a:	2308      	moveq	r3, #8
 800b87c:	2100      	movs	r1, #0
 800b87e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b882:	6866      	ldr	r6, [r4, #4]
 800b884:	60a6      	str	r6, [r4, #8]
 800b886:	2e00      	cmp	r6, #0
 800b888:	bfa2      	ittt	ge
 800b88a:	6821      	ldrge	r1, [r4, #0]
 800b88c:	f021 0104 	bicge.w	r1, r1, #4
 800b890:	6021      	strge	r1, [r4, #0]
 800b892:	b90d      	cbnz	r5, 800b898 <_printf_i+0x110>
 800b894:	2e00      	cmp	r6, #0
 800b896:	d04b      	beq.n	800b930 <_printf_i+0x1a8>
 800b898:	4616      	mov	r6, r2
 800b89a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b89e:	fb03 5711 	mls	r7, r3, r1, r5
 800b8a2:	5dc7      	ldrb	r7, [r0, r7]
 800b8a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b8a8:	462f      	mov	r7, r5
 800b8aa:	42bb      	cmp	r3, r7
 800b8ac:	460d      	mov	r5, r1
 800b8ae:	d9f4      	bls.n	800b89a <_printf_i+0x112>
 800b8b0:	2b08      	cmp	r3, #8
 800b8b2:	d10b      	bne.n	800b8cc <_printf_i+0x144>
 800b8b4:	6823      	ldr	r3, [r4, #0]
 800b8b6:	07df      	lsls	r7, r3, #31
 800b8b8:	d508      	bpl.n	800b8cc <_printf_i+0x144>
 800b8ba:	6923      	ldr	r3, [r4, #16]
 800b8bc:	6861      	ldr	r1, [r4, #4]
 800b8be:	4299      	cmp	r1, r3
 800b8c0:	bfde      	ittt	le
 800b8c2:	2330      	movle	r3, #48	@ 0x30
 800b8c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b8c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b8cc:	1b92      	subs	r2, r2, r6
 800b8ce:	6122      	str	r2, [r4, #16]
 800b8d0:	f8cd a000 	str.w	sl, [sp]
 800b8d4:	464b      	mov	r3, r9
 800b8d6:	aa03      	add	r2, sp, #12
 800b8d8:	4621      	mov	r1, r4
 800b8da:	4640      	mov	r0, r8
 800b8dc:	f7ff fee6 	bl	800b6ac <_printf_common>
 800b8e0:	3001      	adds	r0, #1
 800b8e2:	d14a      	bne.n	800b97a <_printf_i+0x1f2>
 800b8e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b8e8:	b004      	add	sp, #16
 800b8ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8ee:	6823      	ldr	r3, [r4, #0]
 800b8f0:	f043 0320 	orr.w	r3, r3, #32
 800b8f4:	6023      	str	r3, [r4, #0]
 800b8f6:	4833      	ldr	r0, [pc, #204]	@ (800b9c4 <_printf_i+0x23c>)
 800b8f8:	2778      	movs	r7, #120	@ 0x78
 800b8fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b8fe:	6823      	ldr	r3, [r4, #0]
 800b900:	6831      	ldr	r1, [r6, #0]
 800b902:	061f      	lsls	r7, r3, #24
 800b904:	f851 5b04 	ldr.w	r5, [r1], #4
 800b908:	d402      	bmi.n	800b910 <_printf_i+0x188>
 800b90a:	065f      	lsls	r7, r3, #25
 800b90c:	bf48      	it	mi
 800b90e:	b2ad      	uxthmi	r5, r5
 800b910:	6031      	str	r1, [r6, #0]
 800b912:	07d9      	lsls	r1, r3, #31
 800b914:	bf44      	itt	mi
 800b916:	f043 0320 	orrmi.w	r3, r3, #32
 800b91a:	6023      	strmi	r3, [r4, #0]
 800b91c:	b11d      	cbz	r5, 800b926 <_printf_i+0x19e>
 800b91e:	2310      	movs	r3, #16
 800b920:	e7ac      	b.n	800b87c <_printf_i+0xf4>
 800b922:	4827      	ldr	r0, [pc, #156]	@ (800b9c0 <_printf_i+0x238>)
 800b924:	e7e9      	b.n	800b8fa <_printf_i+0x172>
 800b926:	6823      	ldr	r3, [r4, #0]
 800b928:	f023 0320 	bic.w	r3, r3, #32
 800b92c:	6023      	str	r3, [r4, #0]
 800b92e:	e7f6      	b.n	800b91e <_printf_i+0x196>
 800b930:	4616      	mov	r6, r2
 800b932:	e7bd      	b.n	800b8b0 <_printf_i+0x128>
 800b934:	6833      	ldr	r3, [r6, #0]
 800b936:	6825      	ldr	r5, [r4, #0]
 800b938:	6961      	ldr	r1, [r4, #20]
 800b93a:	1d18      	adds	r0, r3, #4
 800b93c:	6030      	str	r0, [r6, #0]
 800b93e:	062e      	lsls	r6, r5, #24
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	d501      	bpl.n	800b948 <_printf_i+0x1c0>
 800b944:	6019      	str	r1, [r3, #0]
 800b946:	e002      	b.n	800b94e <_printf_i+0x1c6>
 800b948:	0668      	lsls	r0, r5, #25
 800b94a:	d5fb      	bpl.n	800b944 <_printf_i+0x1bc>
 800b94c:	8019      	strh	r1, [r3, #0]
 800b94e:	2300      	movs	r3, #0
 800b950:	6123      	str	r3, [r4, #16]
 800b952:	4616      	mov	r6, r2
 800b954:	e7bc      	b.n	800b8d0 <_printf_i+0x148>
 800b956:	6833      	ldr	r3, [r6, #0]
 800b958:	1d1a      	adds	r2, r3, #4
 800b95a:	6032      	str	r2, [r6, #0]
 800b95c:	681e      	ldr	r6, [r3, #0]
 800b95e:	6862      	ldr	r2, [r4, #4]
 800b960:	2100      	movs	r1, #0
 800b962:	4630      	mov	r0, r6
 800b964:	f7f4 fc54 	bl	8000210 <memchr>
 800b968:	b108      	cbz	r0, 800b96e <_printf_i+0x1e6>
 800b96a:	1b80      	subs	r0, r0, r6
 800b96c:	6060      	str	r0, [r4, #4]
 800b96e:	6863      	ldr	r3, [r4, #4]
 800b970:	6123      	str	r3, [r4, #16]
 800b972:	2300      	movs	r3, #0
 800b974:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b978:	e7aa      	b.n	800b8d0 <_printf_i+0x148>
 800b97a:	6923      	ldr	r3, [r4, #16]
 800b97c:	4632      	mov	r2, r6
 800b97e:	4649      	mov	r1, r9
 800b980:	4640      	mov	r0, r8
 800b982:	47d0      	blx	sl
 800b984:	3001      	adds	r0, #1
 800b986:	d0ad      	beq.n	800b8e4 <_printf_i+0x15c>
 800b988:	6823      	ldr	r3, [r4, #0]
 800b98a:	079b      	lsls	r3, r3, #30
 800b98c:	d413      	bmi.n	800b9b6 <_printf_i+0x22e>
 800b98e:	68e0      	ldr	r0, [r4, #12]
 800b990:	9b03      	ldr	r3, [sp, #12]
 800b992:	4298      	cmp	r0, r3
 800b994:	bfb8      	it	lt
 800b996:	4618      	movlt	r0, r3
 800b998:	e7a6      	b.n	800b8e8 <_printf_i+0x160>
 800b99a:	2301      	movs	r3, #1
 800b99c:	4632      	mov	r2, r6
 800b99e:	4649      	mov	r1, r9
 800b9a0:	4640      	mov	r0, r8
 800b9a2:	47d0      	blx	sl
 800b9a4:	3001      	adds	r0, #1
 800b9a6:	d09d      	beq.n	800b8e4 <_printf_i+0x15c>
 800b9a8:	3501      	adds	r5, #1
 800b9aa:	68e3      	ldr	r3, [r4, #12]
 800b9ac:	9903      	ldr	r1, [sp, #12]
 800b9ae:	1a5b      	subs	r3, r3, r1
 800b9b0:	42ab      	cmp	r3, r5
 800b9b2:	dcf2      	bgt.n	800b99a <_printf_i+0x212>
 800b9b4:	e7eb      	b.n	800b98e <_printf_i+0x206>
 800b9b6:	2500      	movs	r5, #0
 800b9b8:	f104 0619 	add.w	r6, r4, #25
 800b9bc:	e7f5      	b.n	800b9aa <_printf_i+0x222>
 800b9be:	bf00      	nop
 800b9c0:	0800d709 	.word	0x0800d709
 800b9c4:	0800d71a 	.word	0x0800d71a

0800b9c8 <memmove>:
 800b9c8:	4288      	cmp	r0, r1
 800b9ca:	b510      	push	{r4, lr}
 800b9cc:	eb01 0402 	add.w	r4, r1, r2
 800b9d0:	d902      	bls.n	800b9d8 <memmove+0x10>
 800b9d2:	4284      	cmp	r4, r0
 800b9d4:	4623      	mov	r3, r4
 800b9d6:	d807      	bhi.n	800b9e8 <memmove+0x20>
 800b9d8:	1e43      	subs	r3, r0, #1
 800b9da:	42a1      	cmp	r1, r4
 800b9dc:	d008      	beq.n	800b9f0 <memmove+0x28>
 800b9de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b9e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b9e6:	e7f8      	b.n	800b9da <memmove+0x12>
 800b9e8:	4402      	add	r2, r0
 800b9ea:	4601      	mov	r1, r0
 800b9ec:	428a      	cmp	r2, r1
 800b9ee:	d100      	bne.n	800b9f2 <memmove+0x2a>
 800b9f0:	bd10      	pop	{r4, pc}
 800b9f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b9f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b9fa:	e7f7      	b.n	800b9ec <memmove+0x24>

0800b9fc <memcpy>:
 800b9fc:	440a      	add	r2, r1
 800b9fe:	4291      	cmp	r1, r2
 800ba00:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba04:	d100      	bne.n	800ba08 <memcpy+0xc>
 800ba06:	4770      	bx	lr
 800ba08:	b510      	push	{r4, lr}
 800ba0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba12:	4291      	cmp	r1, r2
 800ba14:	d1f9      	bne.n	800ba0a <memcpy+0xe>
 800ba16:	bd10      	pop	{r4, pc}

0800ba18 <_realloc_r>:
 800ba18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba1c:	4680      	mov	r8, r0
 800ba1e:	4615      	mov	r5, r2
 800ba20:	460c      	mov	r4, r1
 800ba22:	b921      	cbnz	r1, 800ba2e <_realloc_r+0x16>
 800ba24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba28:	4611      	mov	r1, r2
 800ba2a:	f7ff bbad 	b.w	800b188 <_malloc_r>
 800ba2e:	b92a      	cbnz	r2, 800ba3c <_realloc_r+0x24>
 800ba30:	f7ff fc9a 	bl	800b368 <_free_r>
 800ba34:	2400      	movs	r4, #0
 800ba36:	4620      	mov	r0, r4
 800ba38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba3c:	f000 f81a 	bl	800ba74 <_malloc_usable_size_r>
 800ba40:	4285      	cmp	r5, r0
 800ba42:	4606      	mov	r6, r0
 800ba44:	d802      	bhi.n	800ba4c <_realloc_r+0x34>
 800ba46:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ba4a:	d8f4      	bhi.n	800ba36 <_realloc_r+0x1e>
 800ba4c:	4629      	mov	r1, r5
 800ba4e:	4640      	mov	r0, r8
 800ba50:	f7ff fb9a 	bl	800b188 <_malloc_r>
 800ba54:	4607      	mov	r7, r0
 800ba56:	2800      	cmp	r0, #0
 800ba58:	d0ec      	beq.n	800ba34 <_realloc_r+0x1c>
 800ba5a:	42b5      	cmp	r5, r6
 800ba5c:	462a      	mov	r2, r5
 800ba5e:	4621      	mov	r1, r4
 800ba60:	bf28      	it	cs
 800ba62:	4632      	movcs	r2, r6
 800ba64:	f7ff ffca 	bl	800b9fc <memcpy>
 800ba68:	4621      	mov	r1, r4
 800ba6a:	4640      	mov	r0, r8
 800ba6c:	f7ff fc7c 	bl	800b368 <_free_r>
 800ba70:	463c      	mov	r4, r7
 800ba72:	e7e0      	b.n	800ba36 <_realloc_r+0x1e>

0800ba74 <_malloc_usable_size_r>:
 800ba74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba78:	1f18      	subs	r0, r3, #4
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	bfbc      	itt	lt
 800ba7e:	580b      	ldrlt	r3, [r1, r0]
 800ba80:	18c0      	addlt	r0, r0, r3
 800ba82:	4770      	bx	lr

0800ba84 <_init>:
 800ba84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba86:	bf00      	nop
 800ba88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba8a:	bc08      	pop	{r3}
 800ba8c:	469e      	mov	lr, r3
 800ba8e:	4770      	bx	lr

0800ba90 <_fini>:
 800ba90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba92:	bf00      	nop
 800ba94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba96:	bc08      	pop	{r3}
 800ba98:	469e      	mov	lr, r3
 800ba9a:	4770      	bx	lr
