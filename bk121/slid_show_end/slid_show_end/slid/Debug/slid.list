
slid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a03c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c98  0800a20c  0800a20c  0000b20c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bea4  0800bea4  0000d078  2**0
                  CONTENTS
  4 .ARM          00000008  0800bea4  0800bea4  0000cea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800beac  0800beac  0000d078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800beac  0800beac  0000ceac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800beb0  0800beb0  0000ceb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0800beb4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cc0  20000078  0800bf2c  0000d078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d38  0800bf2c  0000dd38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001726f  00000000  00000000  0000d0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dc8  00000000  00000000  00024317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001498  00000000  00000000  000280e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f70  00000000  00000000  00029578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a868  00000000  00000000  0002a4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a8c5  00000000  00000000  00054d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8b18  00000000  00000000  0006f615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016812d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058b4  00000000  00000000  00168170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  0016da24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a1f4 	.word	0x0800a1f4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	0800a1f4 	.word	0x0800a1f4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <BSP_DisplayImage>:
#include <stdio.h>

uint8_t actualLayer = 0;

void BSP_DisplayImage(uint8_t index, char* pDirectoryFiles[25], uint8_t ubNumberOfFiles)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08c      	sub	sp, #48	@ 0x30
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	6039      	str	r1, [r7, #0]
 80005aa:	71fb      	strb	r3, [r7, #7]
 80005ac:	4613      	mov	r3, r2
 80005ae:	71bb      	strb	r3, [r7, #6]
	uint8_t path[30];
	// lastLayer->layer in which is displayed the image we don't want to see
	uint8_t lastLayer = (actualLayer + 1) & 1;
 80005b0:	4b22      	ldr	r3, [pc, #136]	@ (800063c <BSP_DisplayImage+0x9c>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	3301      	adds	r3, #1
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	f003 0301 	and.w	r3, r3, #1
 80005bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	// actualLayer -> layer in which we want to display image

	BSP_LCD_SetTransparency(lastLayer,0);
 80005c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f008 f8e6 	bl	8008798 <BSP_LCD_SetTransparency>
	BSP_LCD_SetTransparency(actualLayer, 255);
 80005cc:	4b1b      	ldr	r3, [pc, #108]	@ (800063c <BSP_DisplayImage+0x9c>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	21ff      	movs	r1, #255	@ 0xff
 80005d2:	4618      	mov	r0, r3
 80005d4:	f008 f8e0 	bl	8008798 <BSP_LCD_SetTransparency>


	sprintf ((char*)path, "%-11.11s", pDirectoryFiles[++index]);
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	3301      	adds	r3, #1
 80005dc:	71fb      	strb	r3, [r7, #7]
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	009b      	lsls	r3, r3, #2
 80005e2:	683a      	ldr	r2, [r7, #0]
 80005e4:	4413      	add	r3, r2
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	f107 0308 	add.w	r3, r7, #8
 80005ec:	4914      	ldr	r1, [pc, #80]	@ (8000640 <BSP_DisplayImage+0xa0>)
 80005ee:	4618      	mov	r0, r3
 80005f0:	f009 fa0e 	bl	8009a10 <siprintf>
	uint8_t *uwInternelBuffer= (uint8_t *)0xC0260000;
 80005f4:	4b13      	ldr	r3, [pc, #76]	@ (8000644 <BSP_DisplayImage+0xa4>)
 80005f6:	62bb      	str	r3, [r7, #40]	@ 0x28
	Storage_OpenReadFile(uwInternelBuffer, (const char*)path);
 80005f8:	f107 0308 	add.w	r3, r7, #8
 80005fc:	4619      	mov	r1, r3
 80005fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000600:	f000 f822 	bl	8000648 <Storage_OpenReadFile>

	BSP_LCD_SelectLayer(lastLayer);
 8000604:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000608:	4618      	mov	r0, r3
 800060a:	f008 f8b5 	bl	8008778 <BSP_LCD_SelectLayer>
	BSP_LCD_DrawBitmap(0, 0, uwInternelBuffer);
 800060e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000610:	2100      	movs	r1, #0
 8000612:	2000      	movs	r0, #0
 8000614:	f008 faae 	bl	8008b74 <BSP_LCD_DrawBitmap>


	actualLayer ++;
 8000618:	4b08      	ldr	r3, [pc, #32]	@ (800063c <BSP_DisplayImage+0x9c>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	3301      	adds	r3, #1
 800061e:	b2da      	uxtb	r2, r3
 8000620:	4b06      	ldr	r3, [pc, #24]	@ (800063c <BSP_DisplayImage+0x9c>)
 8000622:	701a      	strb	r2, [r3, #0]
	actualLayer %=2;
 8000624:	4b05      	ldr	r3, [pc, #20]	@ (800063c <BSP_DisplayImage+0x9c>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	f003 0301 	and.w	r3, r3, #1
 800062c:	b2da      	uxtb	r2, r3
 800062e:	4b03      	ldr	r3, [pc, #12]	@ (800063c <BSP_DisplayImage+0x9c>)
 8000630:	701a      	strb	r2, [r3, #0]
}
 8000632:	bf00      	nop
 8000634:	3730      	adds	r7, #48	@ 0x30
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000094 	.word	0x20000094
 8000640:	0800a20c 	.word	0x0800a20c
 8000644:	c0260000 	.word	0xc0260000

08000648 <Storage_OpenReadFile>:
  return 0;
}


uint32_t Storage_OpenReadFile(uint8_t *Address, const char* BmpName)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	f5ad 7d12 	sub.w	sp, sp, #584	@ 0x248
 800064e:	af00      	add	r7, sp, #0
 8000650:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8000654:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8000658:	6018      	str	r0, [r3, #0]
 800065a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800065e:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8000662:	6019      	str	r1, [r3, #0]
  uint32_t index = 0, size = 0, i1 = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 800066a:	2300      	movs	r3, #0
 800066c:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 8000670:	2300      	movs	r3, #0
 8000672:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
  uint32_t BmpAddress;
  FIL F1;

  if (f_open(&F1, (TCHAR const*)BmpName, FA_READ) != FR_OK)
 8000676:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800067a:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800067e:	f107 0008 	add.w	r0, r7, #8
 8000682:	2201      	movs	r2, #1
 8000684:	6819      	ldr	r1, [r3, #0]
 8000686:	f007 fa4b 	bl	8007b20 <f_open>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <Storage_OpenReadFile+0x4c>
  {
    while(1)
 8000690:	bf00      	nop
 8000692:	e7fd      	b.n	8000690 <Storage_OpenReadFile+0x48>
    {
    } 
  }
  if (f_read (&F1, sector, 30, (UINT *)&BytesRead) != FR_OK)
 8000694:	f107 0008 	add.w	r0, r7, #8
 8000698:	4b49      	ldr	r3, [pc, #292]	@ (80007c0 <Storage_OpenReadFile+0x178>)
 800069a:	221e      	movs	r2, #30
 800069c:	4949      	ldr	r1, [pc, #292]	@ (80007c4 <Storage_OpenReadFile+0x17c>)
 800069e:	f007 fbf9 	bl	8007e94 <f_read>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <Storage_OpenReadFile+0x64>
  {
    while(1)
 80006a8:	bf00      	nop
 80006aa:	e7fd      	b.n	80006a8 <Storage_OpenReadFile+0x60>
    {
    } 
  }
  
  BmpAddress = (uint32_t)sector;
 80006ac:	4b45      	ldr	r3, [pc, #276]	@ (80007c4 <Storage_OpenReadFile+0x17c>)
 80006ae:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238

  /* Read bitmap size */
  size = *(uint16_t *) (BmpAddress + 2);
 80006b2:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80006b6:	3302      	adds	r3, #2
 80006b8:	881b      	ldrh	r3, [r3, #0]
 80006ba:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
  size |= (*(uint16_t *) (BmpAddress + 4)) << 16;  
 80006be:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80006c2:	3304      	adds	r3, #4
 80006c4:	881b      	ldrh	r3, [r3, #0]
 80006c6:	041b      	lsls	r3, r3, #16
 80006c8:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 80006cc:	4313      	orrs	r3, r2
 80006ce:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 
  /* Get bitmap data address offset */
  index = *(uint16_t *) (BmpAddress + 10);
 80006d2:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80006d6:	330a      	adds	r3, #10
 80006d8:	881b      	ldrh	r3, [r3, #0]
 80006da:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
  index |= (*(uint16_t *) (BmpAddress + 12)) << 16;  
 80006de:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80006e2:	330c      	adds	r3, #12
 80006e4:	881b      	ldrh	r3, [r3, #0]
 80006e6:	041b      	lsls	r3, r3, #16
 80006e8:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 80006ec:	4313      	orrs	r3, r2
 80006ee:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
  
  f_close (&F1);
 80006f2:	f107 0308 	add.w	r3, r7, #8
 80006f6:	4618      	mov	r0, r3
 80006f8:	f007 fd89 	bl	800820e <f_close>
  
  f_open (&F1, (TCHAR const*)BmpName, FA_READ);
 80006fc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8000700:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8000704:	f107 0008 	add.w	r0, r7, #8
 8000708:	2201      	movs	r2, #1
 800070a:	6819      	ldr	r1, [r3, #0]
 800070c:	f007 fa08 	bl	8007b20 <f_open>

  do
  {
    if (size < 256*2)
 8000710:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8000714:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000718:	d204      	bcs.n	8000724 <Storage_OpenReadFile+0xdc>
    {
      i1 = size;
 800071a:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 800071e:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
 8000722:	e003      	b.n	800072c <Storage_OpenReadFile+0xe4>
    }
    else
    {
      i1 = 256*2;
 8000724:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000728:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
    }
    size -= i1;
 800072c:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 8000730:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8000734:	1ad3      	subs	r3, r2, r3
 8000736:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
    f_read (&F1, sector, i1, (UINT *)&BytesRead);
 800073a:	f107 0008 	add.w	r0, r7, #8
 800073e:	4b20      	ldr	r3, [pc, #128]	@ (80007c0 <Storage_OpenReadFile+0x178>)
 8000740:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 8000744:	491f      	ldr	r1, [pc, #124]	@ (80007c4 <Storage_OpenReadFile+0x17c>)
 8000746:	f007 fba5 	bl	8007e94 <f_read>

    for (index = 0; index < i1; index++)
 800074a:	2300      	movs	r3, #0
 800074c:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 8000750:	e01e      	b.n	8000790 <Storage_OpenReadFile+0x148>
    {
      *(__IO uint8_t*) (Address) = *(__IO uint8_t *)BmpAddress;
 8000752:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	b2da      	uxtb	r2, r3
 800075a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800075e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	701a      	strb	r2, [r3, #0]
      
      BmpAddress++;
 8000766:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800076a:	3301      	adds	r3, #1
 800076c:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
      Address++;
 8000770:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8000774:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8000778:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 800077c:	f5a2 7211 	sub.w	r2, r2, #580	@ 0x244
 8000780:	6812      	ldr	r2, [r2, #0]
 8000782:	3201      	adds	r2, #1
 8000784:	601a      	str	r2, [r3, #0]
    for (index = 0; index < i1; index++)
 8000786:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 800078a:	3301      	adds	r3, #1
 800078c:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 8000790:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 8000794:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8000798:	429a      	cmp	r2, r3
 800079a:	d3da      	bcc.n	8000752 <Storage_OpenReadFile+0x10a>
    }  
    
    BmpAddress = (uint32_t)sector;
 800079c:	4b09      	ldr	r3, [pc, #36]	@ (80007c4 <Storage_OpenReadFile+0x17c>)
 800079e:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
  }
  while (size > 0);
 80007a2:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d1b2      	bne.n	8000710 <Storage_OpenReadFile+0xc8>

  f_close (&F1);
 80007aa:	f107 0308 	add.w	r3, r7, #8
 80007ae:	4618      	mov	r0, r3
 80007b0:	f007 fd2d 	bl	800820e <f_close>
  
  return 1;
 80007b4:	2301      	movs	r3, #1
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	f507 7712 	add.w	r7, r7, #584	@ 0x248
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000744 	.word	0x20000744
 80007c4:	20000098 	.word	0x20000098

080007c8 <Storage_CheckBitmapFile>:


uint32_t Storage_CheckBitmapFile(const char* BmpName, uint32_t *FileLen)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
  if(f_mount(&fs, (TCHAR const*)"",0))
 80007d2:	2200      	movs	r2, #0
 80007d4:	4913      	ldr	r1, [pc, #76]	@ (8000824 <Storage_CheckBitmapFile+0x5c>)
 80007d6:	4814      	ldr	r0, [pc, #80]	@ (8000828 <Storage_CheckBitmapFile+0x60>)
 80007d8:	f007 f95c 	bl	8007a94 <f_mount>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <Storage_CheckBitmapFile+0x1e>
  {
    return 1;
 80007e2:	2301      	movs	r3, #1
 80007e4:	e01a      	b.n	800081c <Storage_CheckBitmapFile+0x54>
  }
  if(f_open (&F, (TCHAR const*)BmpName, FA_READ))
 80007e6:	2201      	movs	r2, #1
 80007e8:	6879      	ldr	r1, [r7, #4]
 80007ea:	4810      	ldr	r0, [pc, #64]	@ (800082c <Storage_CheckBitmapFile+0x64>)
 80007ec:	f007 f998 	bl	8007b20 <f_open>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <Storage_CheckBitmapFile+0x32>
  {
    return 2;
 80007f6:	2302      	movs	r3, #2
 80007f8:	e010      	b.n	800081c <Storage_CheckBitmapFile+0x54>
  }
  
  f_read (&F, sector, 6, (UINT *)&BytesRead);
 80007fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000830 <Storage_CheckBitmapFile+0x68>)
 80007fc:	2206      	movs	r2, #6
 80007fe:	490d      	ldr	r1, [pc, #52]	@ (8000834 <Storage_CheckBitmapFile+0x6c>)
 8000800:	480a      	ldr	r0, [pc, #40]	@ (800082c <Storage_CheckBitmapFile+0x64>)
 8000802:	f007 fb47 	bl	8007e94 <f_read>
  
  if (Buffercmp((uint8_t *)SlidesCheck, (uint8_t *) sector, 2) != 0)
 8000806:	2202      	movs	r2, #2
 8000808:	490a      	ldr	r1, [pc, #40]	@ (8000834 <Storage_CheckBitmapFile+0x6c>)
 800080a:	480b      	ldr	r0, [pc, #44]	@ (8000838 <Storage_CheckBitmapFile+0x70>)
 800080c:	f000 f866 	bl	80008dc <Buffercmp>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <Storage_CheckBitmapFile+0x52>
  {
    return 3;
 8000816:	2303      	movs	r3, #3
 8000818:	e000      	b.n	800081c <Storage_CheckBitmapFile+0x54>
  }
  return 0;
 800081a:	2300      	movs	r3, #0
}
 800081c:	4618      	mov	r0, r3
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	0800a218 	.word	0x0800a218
 8000828:	20000298 	.word	0x20000298
 800082c:	20000514 	.word	0x20000514
 8000830:	20000744 	.word	0x20000744
 8000834:	20000098 	.word	0x20000098
 8000838:	0800a300 	.word	0x0800a300

0800083c <Storage_GetDirectoryBitmapFiles>:


uint32_t Storage_GetDirectoryBitmapFiles(const char* DirName, char* Files[])
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	6039      	str	r1, [r7, #0]
  FRESULT res;
  uint32_t index = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]

  /* Open filesystem */
  if(f_mount(&fs, (TCHAR const*)"",0) != FR_OK)
 800084a:	2200      	movs	r2, #0
 800084c:	491c      	ldr	r1, [pc, #112]	@ (80008c0 <Storage_GetDirectoryBitmapFiles+0x84>)
 800084e:	481d      	ldr	r0, [pc, #116]	@ (80008c4 <Storage_GetDirectoryBitmapFiles+0x88>)
 8000850:	f007 f920 	bl	8007a94 <f_mount>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <Storage_GetDirectoryBitmapFiles+0x22>
  {
    return 0;
 800085a:	2300      	movs	r3, #0
 800085c:	e02c      	b.n	80008b8 <Storage_GetDirectoryBitmapFiles+0x7c>
  }

  /* Start to search for wave files */
  res = f_findfirst(&dir, &fno, DirName, "*.bmp");
 800085e:	4b1a      	ldr	r3, [pc, #104]	@ (80008c8 <Storage_GetDirectoryBitmapFiles+0x8c>)
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	491a      	ldr	r1, [pc, #104]	@ (80008cc <Storage_GetDirectoryBitmapFiles+0x90>)
 8000864:	481a      	ldr	r0, [pc, #104]	@ (80008d0 <Storage_GetDirectoryBitmapFiles+0x94>)
 8000866:	f007 fdfa 	bl	800845e <f_findfirst>
 800086a:	4603      	mov	r3, r0
 800086c:	73fb      	strb	r3, [r7, #15]

  /* Repeat while an item is found */
  while (fno.fname[0])
 800086e:	e01b      	b.n	80008a8 <Storage_GetDirectoryBitmapFiles+0x6c>
  {
    if(res == FR_OK)
 8000870:	7bfb      	ldrb	r3, [r7, #15]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d115      	bne.n	80008a2 <Storage_GetDirectoryBitmapFiles+0x66>
    {
      if(index < MAX_BMP_FILES)
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	2b18      	cmp	r3, #24
 800087a:	d80b      	bhi.n	8000894 <Storage_GetDirectoryBitmapFiles+0x58>
      {
        sprintf (Files[index++], "%s", fno.fname);
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	1c5a      	adds	r2, r3, #1
 8000880:	60ba      	str	r2, [r7, #8]
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	683a      	ldr	r2, [r7, #0]
 8000886:	4413      	add	r3, r2
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a12      	ldr	r2, [pc, #72]	@ (80008d4 <Storage_GetDirectoryBitmapFiles+0x98>)
 800088c:	4912      	ldr	r1, [pc, #72]	@ (80008d8 <Storage_GetDirectoryBitmapFiles+0x9c>)
 800088e:	4618      	mov	r0, r3
 8000890:	f009 f8be 	bl	8009a10 <siprintf>
      }
      /* Search for next item */
      res = f_findnext(&dir, &fno);
 8000894:	490d      	ldr	r1, [pc, #52]	@ (80008cc <Storage_GetDirectoryBitmapFiles+0x90>)
 8000896:	480e      	ldr	r0, [pc, #56]	@ (80008d0 <Storage_GetDirectoryBitmapFiles+0x94>)
 8000898:	f007 fdb9 	bl	800840e <f_findnext>
 800089c:	4603      	mov	r3, r0
 800089e:	73fb      	strb	r3, [r7, #15]
 80008a0:	e002      	b.n	80008a8 <Storage_GetDirectoryBitmapFiles+0x6c>
    }
    else
    {
      index = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	60bb      	str	r3, [r7, #8]
      break;
 80008a6:	e003      	b.n	80008b0 <Storage_GetDirectoryBitmapFiles+0x74>
  while (fno.fname[0])
 80008a8:	4b08      	ldr	r3, [pc, #32]	@ (80008cc <Storage_GetDirectoryBitmapFiles+0x90>)
 80008aa:	7a5b      	ldrb	r3, [r3, #9]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d1df      	bne.n	8000870 <Storage_GetDirectoryBitmapFiles+0x34>
    }
  }

  f_closedir(&dir);
 80008b0:	4807      	ldr	r0, [pc, #28]	@ (80008d0 <Storage_GetDirectoryBitmapFiles+0x94>)
 80008b2:	f007 fd49 	bl	8008348 <f_closedir>

  return index;
 80008b6:	68bb      	ldr	r3, [r7, #8]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3710      	adds	r7, #16
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	0800a218 	.word	0x0800a218
 80008c4:	20000298 	.word	0x20000298
 80008c8:	0800a21c 	.word	0x0800a21c
 80008cc:	200004c8 	.word	0x200004c8
 80008d0:	200004e0 	.word	0x200004e0
 80008d4:	200004d1 	.word	0x200004d1
 80008d8:	0800a224 	.word	0x0800a224

080008dc <Buffercmp>:


uint8_t Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	4613      	mov	r3, r2
 80008e8:	80fb      	strh	r3, [r7, #6]
  while (BufferLength--)
 80008ea:	e00d      	b.n	8000908 <Buffercmp+0x2c>
  {
    if (*pBuffer1 != *pBuffer2)
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	781a      	ldrb	r2, [r3, #0]
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d001      	beq.n	80008fc <Buffercmp+0x20>
    {
      return 1;
 80008f8:	2301      	movs	r3, #1
 80008fa:	e00b      	b.n	8000914 <Buffercmp+0x38>
    }

    pBuffer1++;
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	3301      	adds	r3, #1
 8000900:	60fb      	str	r3, [r7, #12]
    pBuffer2++;
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	3301      	adds	r3, #1
 8000906:	60bb      	str	r3, [r7, #8]
  while (BufferLength--)
 8000908:	88fb      	ldrh	r3, [r7, #6]
 800090a:	1e5a      	subs	r2, r3, #1
 800090c:	80fa      	strh	r2, [r7, #6]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d1ec      	bne.n	80008ec <Buffercmp+0x10>
  }

  return 0;
 8000912:	2300      	movs	r3, #0
}
 8000914:	4618      	mov	r0, r3
 8000916:	3714      	adds	r7, #20
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000924:	f3bf 8f4f 	dsb	sy
}
 8000928:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800092a:	f3bf 8f6f 	isb	sy
}
 800092e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000930:	4b0d      	ldr	r3, [pc, #52]	@ (8000968 <SCB_EnableICache+0x48>)
 8000932:	2200      	movs	r2, #0
 8000934:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000938:	f3bf 8f4f 	dsb	sy
}
 800093c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800093e:	f3bf 8f6f 	isb	sy
}
 8000942:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000944:	4b08      	ldr	r3, [pc, #32]	@ (8000968 <SCB_EnableICache+0x48>)
 8000946:	695b      	ldr	r3, [r3, #20]
 8000948:	4a07      	ldr	r2, [pc, #28]	@ (8000968 <SCB_EnableICache+0x48>)
 800094a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800094e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000950:	f3bf 8f4f 	dsb	sy
}
 8000954:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000956:	f3bf 8f6f 	isb	sy
}
 800095a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	e000ed00 	.word	0xe000ed00

0800096c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 800096c:	b480      	push	{r7}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000972:	4b1f      	ldr	r3, [pc, #124]	@ (80009f0 <SCB_EnableDCache+0x84>)
 8000974:	2200      	movs	r2, #0
 8000976:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800097a:	f3bf 8f4f 	dsb	sy
}
 800097e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000980:	4b1b      	ldr	r3, [pc, #108]	@ (80009f0 <SCB_EnableDCache+0x84>)
 8000982:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000986:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	0b5b      	lsrs	r3, r3, #13
 800098c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000990:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	08db      	lsrs	r3, r3, #3
 8000996:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800099a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	015a      	lsls	r2, r3, #5
 80009a0:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80009a4:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80009a6:	68ba      	ldr	r2, [r7, #8]
 80009a8:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80009aa:	4911      	ldr	r1, [pc, #68]	@ (80009f0 <SCB_EnableDCache+0x84>)
 80009ac:	4313      	orrs	r3, r2
 80009ae:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	1e5a      	subs	r2, r3, #1
 80009b6:	60ba      	str	r2, [r7, #8]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d1ef      	bne.n	800099c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	1e5a      	subs	r2, r3, #1
 80009c0:	60fa      	str	r2, [r7, #12]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d1e5      	bne.n	8000992 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80009c6:	f3bf 8f4f 	dsb	sy
}
 80009ca:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80009cc:	4b08      	ldr	r3, [pc, #32]	@ (80009f0 <SCB_EnableDCache+0x84>)
 80009ce:	695b      	ldr	r3, [r3, #20]
 80009d0:	4a07      	ldr	r2, [pc, #28]	@ (80009f0 <SCB_EnableDCache+0x84>)
 80009d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80009d6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80009d8:	f3bf 8f4f 	dsb	sy
}
 80009dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009de:	f3bf 8f6f 	isb	sy
}
 80009e2:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80009e4:	bf00      	nop
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f4:	b590      	push	{r4, r7, lr}
 80009f6:	b08b      	sub	sp, #44	@ 0x2c
 80009f8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN 1 */
	  uint32_t counter = 0, transparency = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80009fe:	2300      	movs	r3, #0
 8000a00:	623b      	str	r3, [r7, #32]
	  uint8_t str[30];
	  uwInternelBuffer = (uint8_t *)0xC0260000;
 8000a02:	4b75      	ldr	r3, [pc, #468]	@ (8000bd8 <main+0x1e4>)
 8000a04:	4a75      	ldr	r2, [pc, #468]	@ (8000bdc <main+0x1e8>)
 8000a06:	601a      	str	r2, [r3, #0]
	/* Enable I-Cache */
	SCB_EnableICache();
 8000a08:	f7ff ff8a 	bl	8000920 <SCB_EnableICache>
	/* Enable D-Cache */
	SCB_EnableDCache();
 8000a0c:	f7ff ffae 	bl	800096c <SCB_EnableDCache>
	  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a10:	f000 fbf5 	bl	80011fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a14:	f000 f8fc 	bl	8000c10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a18:	f000 f9ba 	bl	8000d90 <MX_GPIO_Init>
  MX_CRC_Init();
 8000a1c:	f000 f964 	bl	8000ce8 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000a20:	f000 f984 	bl	8000d2c <MX_DMA2D_Init>
  /* USER CODE BEGIN 2 */
    BSP_LCD_Init();
 8000a24:	f007 fdb0 	bl	8008588 <BSP_LCD_Init>

    /* LCD Initialization */
    BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000a28:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f007 fe43 	bl	80086b8 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+(BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4));
 8000a32:	f007 fe19 	bl	8008668 <BSP_LCD_GetXSize>
 8000a36:	4604      	mov	r4, r0
 8000a38:	f007 fe2a 	bl	8008690 <BSP_LCD_GetYSize>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	fb04 f303 	mul.w	r3, r4, r3
 8000a42:	f103 5340 	add.w	r3, r3, #805306368	@ 0x30000000
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	f007 fe34 	bl	80086b8 <BSP_LCD_LayerDefaultInit>

    /* Enable the LCD */
    BSP_LCD_DisplayOn();
 8000a50:	f008 f942 	bl	8008cd8 <BSP_LCD_DisplayOn>

    /* Select the LCD Background Layer  */
    BSP_LCD_SelectLayer(0);
 8000a54:	2000      	movs	r0, #0
 8000a56:	f007 fe8f 	bl	8008778 <BSP_LCD_SelectLayer>

    /* Clear the Background Layer */
    BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000a5a:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000a5e:	f007 fef5 	bl	800884c <BSP_LCD_Clear>

    /* Select the LCD Foreground Layer  */
    BSP_LCD_SelectLayer(1);
 8000a62:	2001      	movs	r0, #1
 8000a64:	f007 fe88 	bl	8008778 <BSP_LCD_SelectLayer>

    /* Clear the Foreground Layer */
    BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000a68:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000a6c:	f007 feee 	bl	800884c <BSP_LCD_Clear>

    /* Configure the transparency for foreground and background :
       Increase the transparency */
    BSP_LCD_SetTransparency(0, 0);
 8000a70:	2100      	movs	r1, #0
 8000a72:	2000      	movs	r0, #0
 8000a74:	f007 fe90 	bl	8008798 <BSP_LCD_SetTransparency>
    BSP_LCD_SetTransparency(1, 100);
 8000a78:	2164      	movs	r1, #100	@ 0x64
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	f007 fe8c 	bl	8008798 <BSP_LCD_SetTransparency>

    BSP_SD_Init();
 8000a80:	f008 fb86 	bl	8009190 <BSP_SD_Init>

    while(BSP_SD_IsDetected() != SD_PRESENT)
 8000a84:	e006      	b.n	8000a94 <main+0xa0>
    {
          BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000a86:	4856      	ldr	r0, [pc, #344]	@ (8000be0 <main+0x1ec>)
 8000a88:	f007 fe98 	bl	80087bc <BSP_LCD_SetTextColor>
          BSP_LCD_DisplayStringAtLine(8, (uint8_t*)"  Please insert SD Card                  ");
 8000a8c:	4955      	ldr	r1, [pc, #340]	@ (8000be4 <main+0x1f0>)
 8000a8e:	2008      	movs	r0, #8
 8000a90:	f008 f810 	bl	8008ab4 <BSP_LCD_DisplayStringAtLine>
    while(BSP_SD_IsDetected() != SD_PRESENT)
 8000a94:	f008 fbc6 	bl	8009224 <BSP_SD_IsDetected>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d1f3      	bne.n	8000a86 <main+0x92>
    }

    BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000a9e:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000aa2:	f007 fed3 	bl	800884c <BSP_LCD_Clear>

    /*##-2- Link the SD Card disk I/O driver ###################################*/
    if(FATFS_LinkDriver(&SD_Driver, SD_Path) == 0)
 8000aa6:	4950      	ldr	r1, [pc, #320]	@ (8000be8 <main+0x1f4>)
 8000aa8:	4850      	ldr	r0, [pc, #320]	@ (8000bec <main+0x1f8>)
 8000aaa:	f007 fd43 	bl	8008534 <FATFS_LinkDriver>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d142      	bne.n	8000b3a <main+0x146>
    {
      /*##-3- Initialize the Directory Files pointers (heap) ###################*/
      for (counter = 0; counter < MAX_BMP_FILES; counter++)
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ab8:	e01a      	b.n	8000af0 <main+0xfc>
      {
        pDirectoryFiles[counter] = malloc(MAX_BMP_FILE_NAME);
 8000aba:	200b      	movs	r0, #11
 8000abc:	f008 feea 	bl	8009894 <malloc>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4a4a      	ldr	r2, [pc, #296]	@ (8000bf0 <main+0x1fc>)
 8000ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        if(pDirectoryFiles[counter] == NULL)
 8000acc:	4a48      	ldr	r2, [pc, #288]	@ (8000bf0 <main+0x1fc>)
 8000ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d108      	bne.n	8000aea <main+0xf6>
        {
          /* Set the Text Color */
          BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000ad8:	4841      	ldr	r0, [pc, #260]	@ (8000be0 <main+0x1ec>)
 8000ada:	f007 fe6f 	bl	80087bc <BSP_LCD_SetTextColor>

          BSP_LCD_DisplayStringAtLine(8, (uint8_t*)"  Cannot allocate memory ");
 8000ade:	4945      	ldr	r1, [pc, #276]	@ (8000bf4 <main+0x200>)
 8000ae0:	2008      	movs	r0, #8
 8000ae2:	f007 ffe7 	bl	8008ab4 <BSP_LCD_DisplayStringAtLine>

          while(1)
 8000ae6:	bf00      	nop
 8000ae8:	e7fd      	b.n	8000ae6 <main+0xf2>
      for (counter = 0; counter < MAX_BMP_FILES; counter++)
 8000aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aec:	3301      	adds	r3, #1
 8000aee:	627b      	str	r3, [r7, #36]	@ 0x24
 8000af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000af2:	2b18      	cmp	r3, #24
 8000af4:	d9e1      	bls.n	8000aba <main+0xc6>
          }
        }
      }

      /* Get the BMP file names on root directory */
      ubNumberOfFiles = Storage_GetDirectoryBitmapFiles("/", pDirectoryFiles);
 8000af6:	493e      	ldr	r1, [pc, #248]	@ (8000bf0 <main+0x1fc>)
 8000af8:	483f      	ldr	r0, [pc, #252]	@ (8000bf8 <main+0x204>)
 8000afa:	f7ff fe9f 	bl	800083c <Storage_GetDirectoryBitmapFiles>
 8000afe:	4603      	mov	r3, r0
 8000b00:	b2da      	uxtb	r2, r3
 8000b02:	4b3e      	ldr	r3, [pc, #248]	@ (8000bfc <main+0x208>)
 8000b04:	701a      	strb	r2, [r3, #0]

      if (ubNumberOfFiles == 0)
 8000b06:	4b3d      	ldr	r3, [pc, #244]	@ (8000bfc <main+0x208>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d117      	bne.n	8000b3e <main+0x14a>
      {
        for (counter = 0; counter < MAX_BMP_FILES; counter++)
 8000b0e:	2300      	movs	r3, #0
 8000b10:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b12:	e009      	b.n	8000b28 <main+0x134>
        {
          free(pDirectoryFiles[counter]);
 8000b14:	4a36      	ldr	r2, [pc, #216]	@ (8000bf0 <main+0x1fc>)
 8000b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f008 fec1 	bl	80098a4 <free>
        for (counter = 0; counter < MAX_BMP_FILES; counter++)
 8000b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b24:	3301      	adds	r3, #1
 8000b26:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b2a:	2b18      	cmp	r3, #24
 8000b2c:	d9f2      	bls.n	8000b14 <main+0x120>
        }
        BSP_LCD_DisplayStringAtLine(8, (uint8_t*)"  No Bitmap files...      ");
 8000b2e:	4934      	ldr	r1, [pc, #208]	@ (8000c00 <main+0x20c>)
 8000b30:	2008      	movs	r0, #8
 8000b32:	f007 ffbf 	bl	8008ab4 <BSP_LCD_DisplayStringAtLine>
        while(1)
 8000b36:	bf00      	nop
 8000b38:	e7fd      	b.n	8000b36 <main+0x142>
      }
    }
    else
    {
      /* FatFs Initialization Error */
      Error_Handler();
 8000b3a:	f000 f967 	bl	8000e0c <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	    counter = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	627b      	str	r3, [r7, #36]	@ 0x24

	  	    do
	  	    {
	  	      /* Step1 : Display on Foreground layer -------------------------------*/
	  	      /* Format the string */
	  	      sprintf ((char*)str, "/%-11.11s", pDirectoryFiles[counter]);
 8000b42:	4a2b      	ldr	r2, [pc, #172]	@ (8000bf0 <main+0x1fc>)
 8000b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b46:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b4a:	463b      	mov	r3, r7
 8000b4c:	492d      	ldr	r1, [pc, #180]	@ (8000c04 <main+0x210>)
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f008 ff5e 	bl	8009a10 <siprintf>

	  	      if (Storage_CheckBitmapFile((const char*)str, &uwBmplen) == 0)
 8000b54:	463b      	mov	r3, r7
 8000b56:	492c      	ldr	r1, [pc, #176]	@ (8000c08 <main+0x214>)
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff fe35 	bl	80007c8 <Storage_CheckBitmapFile>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d123      	bne.n	8000bac <main+0x1b8>
	  	      {
	  	        /* Format the string */
	  	        sprintf ((char*)str, "/%-11.11s", pDirectoryFiles[counter]);
 8000b64:	4a22      	ldr	r2, [pc, #136]	@ (8000bf0 <main+0x1fc>)
 8000b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b68:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b6c:	463b      	mov	r3, r7
 8000b6e:	4925      	ldr	r1, [pc, #148]	@ (8000c04 <main+0x210>)
 8000b70:	4618      	mov	r0, r3
 8000b72:	f008 ff4d 	bl	8009a10 <siprintf>

	  	        /* Set LCD foreground Layer */


	  	      BSP_DisplayImage(counter,pDirectoryFiles,ubNumberOfFiles);
 8000b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	4a20      	ldr	r2, [pc, #128]	@ (8000bfc <main+0x208>)
 8000b7c:	7812      	ldrb	r2, [r2, #0]
 8000b7e:	491c      	ldr	r1, [pc, #112]	@ (8000bf0 <main+0x1fc>)
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff fd0d 	bl	80005a0 <BSP_DisplayImage>
//	  	          HAL_Delay(2);
//	  	        }


	  	        /* Wait for tamper button pressed */
	  	        while (BSP_PB_GetState(BUTTON_TAMPER) == RESET)
 8000b86:	bf00      	nop
 8000b88:	2001      	movs	r0, #1
 8000b8a:	f007 fce3 	bl	8008554 <BSP_PB_GetState>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d0f9      	beq.n	8000b88 <main+0x194>
//	  	          BSP_LCD_SetTransparency(1, transparency);
//
//	  	          /* Insert a delay of display */
//	  	          HAL_Delay(2);
//	  	        }
	  	        BSP_LCD_SetTransparency(1, 0);
 8000b94:	2100      	movs	r1, #0
 8000b96:	2001      	movs	r0, #1
 8000b98:	f007 fdfe 	bl	8008798 <BSP_LCD_SetTransparency>

	  	        /* Clear the Foreground Layer */
	  	        BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000b9c:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000ba0:	f007 fe54 	bl	800884c <BSP_LCD_Clear>

	  	        /* Jump to the next image */
	  	        counter++;
 8000ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000baa:	e00d      	b.n	8000bc8 <main+0x1d4>

	  	      }
				else
				{
				  /* Set the Text Color */
				  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000bac:	480c      	ldr	r0, [pc, #48]	@ (8000be0 <main+0x1ec>)
 8000bae:	f007 fe05 	bl	80087bc <BSP_LCD_SetTextColor>

				  BSP_LCD_DisplayStringAtLine(7, (uint8_t *) str);
 8000bb2:	463b      	mov	r3, r7
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	2007      	movs	r0, #7
 8000bb8:	f007 ff7c 	bl	8008ab4 <BSP_LCD_DisplayStringAtLine>
				  BSP_LCD_DisplayStringAtLine(8, (uint8_t*)"    File type not supported. ");
 8000bbc:	4913      	ldr	r1, [pc, #76]	@ (8000c0c <main+0x218>)
 8000bbe:	2008      	movs	r0, #8
 8000bc0:	f007 ff78 	bl	8008ab4 <BSP_LCD_DisplayStringAtLine>
				  while(1);
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <main+0x1d0>
				}
	  	    } while (counter < ubNumberOfFiles);
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bfc <main+0x208>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	461a      	mov	r2, r3
 8000bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d3b6      	bcc.n	8000b42 <main+0x14e>
	  	    counter = 0;
 8000bd4:	e7b3      	b.n	8000b3e <main+0x14a>
 8000bd6:	bf00      	nop
 8000bd8:	200007b8 	.word	0x200007b8
 8000bdc:	c0260000 	.word	0xc0260000
 8000be0:	ffff0000 	.word	0xffff0000
 8000be4:	0800a228 	.word	0x0800a228
 8000be8:	20000748 	.word	0x20000748
 8000bec:	0800a304 	.word	0x0800a304
 8000bf0:	2000074c 	.word	0x2000074c
 8000bf4:	0800a254 	.word	0x0800a254
 8000bf8:	0800a270 	.word	0x0800a270
 8000bfc:	200007b0 	.word	0x200007b0
 8000c00:	0800a274 	.word	0x0800a274
 8000c04:	0800a290 	.word	0x0800a290
 8000c08:	200007b4 	.word	0x200007b4
 8000c0c:	0800a29c 	.word	0x0800a29c

08000c10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b094      	sub	sp, #80	@ 0x50
 8000c14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c16:	f107 0320 	add.w	r3, r7, #32
 8000c1a:	2230      	movs	r2, #48	@ 0x30
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f008 ff16 	bl	8009a50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c24:	f107 030c 	add.w	r3, r7, #12
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c34:	4b2a      	ldr	r3, [pc, #168]	@ (8000ce0 <SystemClock_Config+0xd0>)
 8000c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c38:	4a29      	ldr	r2, [pc, #164]	@ (8000ce0 <SystemClock_Config+0xd0>)
 8000c3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c40:	4b27      	ldr	r3, [pc, #156]	@ (8000ce0 <SystemClock_Config+0xd0>)
 8000c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c4c:	4b25      	ldr	r3, [pc, #148]	@ (8000ce4 <SystemClock_Config+0xd4>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a24      	ldr	r2, [pc, #144]	@ (8000ce4 <SystemClock_Config+0xd4>)
 8000c52:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c56:	6013      	str	r3, [r2, #0]
 8000c58:	4b22      	ldr	r3, [pc, #136]	@ (8000ce4 <SystemClock_Config+0xd4>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c64:	2302      	movs	r3, #2
 8000c66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c6c:	2310      	movs	r3, #16
 8000c6e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c70:	2302      	movs	r3, #2
 8000c72:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c74:	2300      	movs	r3, #0
 8000c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c78:	2308      	movs	r3, #8
 8000c7a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 8000c7c:	23c8      	movs	r3, #200	@ 0xc8
 8000c7e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c80:	2302      	movs	r3, #2
 8000c82:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000c84:	2309      	movs	r3, #9
 8000c86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c88:	f107 0320 	add.w	r3, r7, #32
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f001 ff7d 	bl	8002b8c <HAL_RCC_OscConfig>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000c98:	f000 f8b8 	bl	8000e0c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c9c:	f001 ff26 	bl	8002aec <HAL_PWREx_EnableOverDrive>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ca6:	f000 f8b1 	bl	8000e0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000caa:	230f      	movs	r3, #15
 8000cac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cb6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000cba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cc0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000cc2:	f107 030c 	add.w	r3, r7, #12
 8000cc6:	2106      	movs	r1, #6
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f002 fa03 	bl	80030d4 <HAL_RCC_ClockConfig>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000cd4:	f000 f89a 	bl	8000e0c <Error_Handler>
  }
}
 8000cd8:	bf00      	nop
 8000cda:	3750      	adds	r7, #80	@ 0x50
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40007000 	.word	0x40007000

08000ce8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000cec:	4b0d      	ldr	r3, [pc, #52]	@ (8000d24 <MX_CRC_Init+0x3c>)
 8000cee:	4a0e      	ldr	r2, [pc, #56]	@ (8000d28 <MX_CRC_Init+0x40>)
 8000cf0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8000d24 <MX_CRC_Init+0x3c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8000d24 <MX_CRC_Init+0x3c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000cfe:	4b09      	ldr	r3, [pc, #36]	@ (8000d24 <MX_CRC_Init+0x3c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000d04:	4b07      	ldr	r3, [pc, #28]	@ (8000d24 <MX_CRC_Init+0x3c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000d0a:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <MX_CRC_Init+0x3c>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d10:	4804      	ldr	r0, [pc, #16]	@ (8000d24 <MX_CRC_Init+0x3c>)
 8000d12:	f000 fc07 	bl	8001524 <HAL_CRC_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000d1c:	f000 f876 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	200007bc 	.word	0x200007bc
 8000d28:	40023000 	.word	0x40023000

08000d2c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000d30:	4b15      	ldr	r3, [pc, #84]	@ (8000d88 <MX_DMA2D_Init+0x5c>)
 8000d32:	4a16      	ldr	r2, [pc, #88]	@ (8000d8c <MX_DMA2D_Init+0x60>)
 8000d34:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000d36:	4b14      	ldr	r3, [pc, #80]	@ (8000d88 <MX_DMA2D_Init+0x5c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000d3c:	4b12      	ldr	r3, [pc, #72]	@ (8000d88 <MX_DMA2D_Init+0x5c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000d42:	4b11      	ldr	r3, [pc, #68]	@ (8000d88 <MX_DMA2D_Init+0x5c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000d48:	4b0f      	ldr	r3, [pc, #60]	@ (8000d88 <MX_DMA2D_Init+0x5c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d88 <MX_DMA2D_Init+0x5c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000d54:	4b0c      	ldr	r3, [pc, #48]	@ (8000d88 <MX_DMA2D_Init+0x5c>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d88 <MX_DMA2D_Init+0x5c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000d60:	4809      	ldr	r0, [pc, #36]	@ (8000d88 <MX_DMA2D_Init+0x5c>)
 8000d62:	f000 fe87 	bl	8001a74 <HAL_DMA2D_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000d6c:	f000 f84e 	bl	8000e0c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000d70:	2101      	movs	r1, #1
 8000d72:	4805      	ldr	r0, [pc, #20]	@ (8000d88 <MX_DMA2D_Init+0x5c>)
 8000d74:	f000 ffdc 	bl	8001d30 <HAL_DMA2D_ConfigLayer>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000d7e:	f000 f845 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	200007e0 	.word	0x200007e0
 8000d8c:	4002b000 	.word	0x4002b000

08000d90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d96:	f107 030c 	add.w	r3, r7, #12
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
 8000da4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000da6:	4b17      	ldr	r3, [pc, #92]	@ (8000e04 <MX_GPIO_Init+0x74>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	4a16      	ldr	r2, [pc, #88]	@ (8000e04 <MX_GPIO_Init+0x74>)
 8000dac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db2:	4b14      	ldr	r3, [pc, #80]	@ (8000e04 <MX_GPIO_Init+0x74>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dbe:	4b11      	ldr	r3, [pc, #68]	@ (8000e04 <MX_GPIO_Init+0x74>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	4a10      	ldr	r2, [pc, #64]	@ (8000e04 <MX_GPIO_Init+0x74>)
 8000dc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dca:	4b0e      	ldr	r3, [pc, #56]	@ (8000e04 <MX_GPIO_Init+0x74>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2102      	movs	r1, #2
 8000dda:	480b      	ldr	r0, [pc, #44]	@ (8000e08 <MX_GPIO_Init+0x78>)
 8000ddc:	f001 fa9a 	bl	8002314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000de0:	2302      	movs	r3, #2
 8000de2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de4:	2301      	movs	r3, #1
 8000de6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	2300      	movs	r3, #0
 8000dee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000df0:	f107 030c 	add.w	r3, r7, #12
 8000df4:	4619      	mov	r1, r3
 8000df6:	4804      	ldr	r0, [pc, #16]	@ (8000e08 <MX_GPIO_Init+0x78>)
 8000df8:	f001 f8c8 	bl	8001f8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dfc:	bf00      	nop
 8000dfe:	3720      	adds	r7, #32
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40022000 	.word	0x40022000

08000e0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e10:	b672      	cpsid	i
}
 8000e12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <Error_Handler+0x8>

08000e18 <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8000e22:	4b0b      	ldr	r3, [pc, #44]	@ (8000e50 <SD_CheckStatus+0x38>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8000e28:	f008 fb60 	bl	80094ec <BSP_SD_GetCardState>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d107      	bne.n	8000e42 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8000e32:	4b07      	ldr	r3, [pc, #28]	@ (8000e50 <SD_CheckStatus+0x38>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	f023 0301 	bic.w	r3, r3, #1
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4b04      	ldr	r3, [pc, #16]	@ (8000e50 <SD_CheckStatus+0x38>)
 8000e40:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8000e42:	4b03      	ldr	r3, [pc, #12]	@ (8000e50 <SD_CheckStatus+0x38>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	b2db      	uxtb	r3, r3
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000000 	.word	0x20000000

08000e54 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e8c <SD_initialize+0x38>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	701a      	strb	r2, [r3, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8000e64:	f008 f994 	bl	8009190 <BSP_SD_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d107      	bne.n	8000e7e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff ffd1 	bl	8000e18 <SD_CheckStatus>
 8000e76:	4603      	mov	r3, r0
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b04      	ldr	r3, [pc, #16]	@ (8000e8c <SD_initialize+0x38>)
 8000e7c:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8000e7e:	4b03      	ldr	r3, [pc, #12]	@ (8000e8c <SD_initialize+0x38>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	b2db      	uxtb	r3, r3
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000000 	.word	0x20000000

08000e90 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ffbb 	bl	8000e18 <SD_CheckStatus>
 8000ea2:	4603      	mov	r3, r0
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60b9      	str	r1, [r7, #8]
 8000eb4:	607a      	str	r2, [r7, #4]
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	4603      	mov	r3, r0
 8000eba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8000ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec4:	683a      	ldr	r2, [r7, #0]
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	68b8      	ldr	r0, [r7, #8]
 8000eca:	f008 f9c3 	bl	8009254 <BSP_SD_ReadBlocks>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d107      	bne.n	8000ee4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8000ed4:	bf00      	nop
 8000ed6:	f008 fb09 	bl	80094ec <BSP_SD_GetCardState>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d1fa      	bne.n	8000ed6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8000ee4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3718      	adds	r7, #24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <SD_write>:


#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b086      	sub	sp, #24
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
 8000ef8:	603b      	str	r3, [r7, #0]
 8000efa:	4603      	mov	r3, r0
 8000efc:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8000f02:	f04f 33ff 	mov.w	r3, #4294967295
 8000f06:	683a      	ldr	r2, [r7, #0]
 8000f08:	6879      	ldr	r1, [r7, #4]
 8000f0a:	68b8      	ldr	r0, [r7, #8]
 8000f0c:	f008 f9be 	bl	800928c <BSP_SD_WriteBlocks>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d107      	bne.n	8000f26 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8000f16:	bf00      	nop
 8000f18:	f008 fae8 	bl	80094ec <BSP_SD_GetCardState>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d1fa      	bne.n	8000f18 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8000f22:	2300      	movs	r3, #0
 8000f24:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8000f26:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3718      	adds	r7, #24
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <SD_ioctl>:
#endif /* _USE_WRITE == 1 */


#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08c      	sub	sp, #48	@ 0x30
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	603a      	str	r2, [r7, #0]
 8000f3a:	71fb      	strb	r3, [r7, #7]
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000f46:	4b25      	ldr	r3, [pc, #148]	@ (8000fdc <SD_ioctl+0xac>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <SD_ioctl+0x28>
 8000f54:	2303      	movs	r3, #3
 8000f56:	e03c      	b.n	8000fd2 <SD_ioctl+0xa2>

  switch (cmd)
 8000f58:	79bb      	ldrb	r3, [r7, #6]
 8000f5a:	2b03      	cmp	r3, #3
 8000f5c:	d834      	bhi.n	8000fc8 <SD_ioctl+0x98>
 8000f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8000f64 <SD_ioctl+0x34>)
 8000f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f64:	08000f75 	.word	0x08000f75
 8000f68:	08000f7d 	.word	0x08000f7d
 8000f6c:	08000f95 	.word	0x08000f95
 8000f70:	08000faf 	.word	0x08000faf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8000f7a:	e028      	b.n	8000fce <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	4618      	mov	r0, r3
 8000f82:	f008 fac3 	bl	800950c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8000f86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8000f92:	e01c      	b.n	8000fce <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8000f94:	f107 030c 	add.w	r3, r7, #12
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f008 fab7 	bl	800950c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8000f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8000fac:	e00f      	b.n	8000fce <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8000fae:	f107 030c 	add.w	r3, r7, #12
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f008 faaa 	bl	800950c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8000fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fba:	0a5a      	lsrs	r2, r3, #9
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	601a      	str	r2, [r3, #0]
	res = RES_OK;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8000fc6:	e002      	b.n	8000fce <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8000fc8:	2304      	movs	r3, #4
 8000fca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8000fce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3730      	adds	r7, #48	@ 0x30
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000000 	.word	0x20000000

08000fe0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8001024 <HAL_MspInit+0x44>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fea:	4a0e      	ldr	r2, [pc, #56]	@ (8001024 <HAL_MspInit+0x44>)
 8000fec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ff0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8001024 <HAL_MspInit+0x44>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffe:	4b09      	ldr	r3, [pc, #36]	@ (8001024 <HAL_MspInit+0x44>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001002:	4a08      	ldr	r2, [pc, #32]	@ (8001024 <HAL_MspInit+0x44>)
 8001004:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001008:	6453      	str	r3, [r2, #68]	@ 0x44
 800100a:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <HAL_MspInit+0x44>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800100e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	40023800 	.word	0x40023800

08001028 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a0a      	ldr	r2, [pc, #40]	@ (8001060 <HAL_CRC_MspInit+0x38>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d10b      	bne.n	8001052 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800103a:	4b0a      	ldr	r3, [pc, #40]	@ (8001064 <HAL_CRC_MspInit+0x3c>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	4a09      	ldr	r2, [pc, #36]	@ (8001064 <HAL_CRC_MspInit+0x3c>)
 8001040:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001044:	6313      	str	r3, [r2, #48]	@ 0x30
 8001046:	4b07      	ldr	r3, [pc, #28]	@ (8001064 <HAL_CRC_MspInit+0x3c>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8001052:	bf00      	nop
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40023000 	.word	0x40023000
 8001064:	40023800 	.word	0x40023800

08001068 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a0a      	ldr	r2, [pc, #40]	@ (80010a0 <HAL_DMA2D_MspInit+0x38>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d10b      	bne.n	8001092 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800107a:	4b0a      	ldr	r3, [pc, #40]	@ (80010a4 <HAL_DMA2D_MspInit+0x3c>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	4a09      	ldr	r2, [pc, #36]	@ (80010a4 <HAL_DMA2D_MspInit+0x3c>)
 8001080:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001084:	6313      	str	r3, [r2, #48]	@ 0x30
 8001086:	4b07      	ldr	r3, [pc, #28]	@ (80010a4 <HAL_DMA2D_MspInit+0x3c>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001092:	bf00      	nop
 8001094:	3714      	adds	r7, #20
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	4002b000 	.word	0x4002b000
 80010a4:	40023800 	.word	0x40023800

080010a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <NMI_Handler+0x4>

080010b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <HardFault_Handler+0x4>

080010b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010bc:	bf00      	nop
 80010be:	e7fd      	b.n	80010bc <MemManage_Handler+0x4>

080010c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c4:	bf00      	nop
 80010c6:	e7fd      	b.n	80010c4 <BusFault_Handler+0x4>

080010c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010cc:	bf00      	nop
 80010ce:	e7fd      	b.n	80010cc <UsageFault_Handler+0x4>

080010d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010fe:	f000 f8bb 	bl	8001278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <LTDC_IRQHandler>:
/* please refer to the startup file (startup_stm32f7xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void LTDC_IRQHandler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  HAL_LTDC_IRQHandler(&hLtdcHandler);
 800110c:	4802      	ldr	r0, [pc, #8]	@ (8001118 <LTDC_IRQHandler+0x10>)
 800110e:	f001 fa01 	bl	8002514 <HAL_LTDC_IRQHandler>
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000864 	.word	0x20000864

0800111c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001124:	4a14      	ldr	r2, [pc, #80]	@ (8001178 <_sbrk+0x5c>)
 8001126:	4b15      	ldr	r3, [pc, #84]	@ (800117c <_sbrk+0x60>)
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001130:	4b13      	ldr	r3, [pc, #76]	@ (8001180 <_sbrk+0x64>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d102      	bne.n	800113e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001138:	4b11      	ldr	r3, [pc, #68]	@ (8001180 <_sbrk+0x64>)
 800113a:	4a12      	ldr	r2, [pc, #72]	@ (8001184 <_sbrk+0x68>)
 800113c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800113e:	4b10      	ldr	r3, [pc, #64]	@ (8001180 <_sbrk+0x64>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4413      	add	r3, r2
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	429a      	cmp	r2, r3
 800114a:	d207      	bcs.n	800115c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800114c:	f008 fc98 	bl	8009a80 <__errno>
 8001150:	4603      	mov	r3, r0
 8001152:	220c      	movs	r2, #12
 8001154:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001156:	f04f 33ff 	mov.w	r3, #4294967295
 800115a:	e009      	b.n	8001170 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800115c:	4b08      	ldr	r3, [pc, #32]	@ (8001180 <_sbrk+0x64>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001162:	4b07      	ldr	r3, [pc, #28]	@ (8001180 <_sbrk+0x64>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4413      	add	r3, r2
 800116a:	4a05      	ldr	r2, [pc, #20]	@ (8001180 <_sbrk+0x64>)
 800116c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800116e:	68fb      	ldr	r3, [r7, #12]
}
 8001170:	4618      	mov	r0, r3
 8001172:	3718      	adds	r7, #24
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20050000 	.word	0x20050000
 800117c:	00000400 	.word	0x00000400
 8001180:	20000820 	.word	0x20000820
 8001184:	20000d38 	.word	0x20000d38

08001188 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800118c:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <SystemInit+0x20>)
 800118e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001192:	4a05      	ldr	r2, [pc, #20]	@ (80011a8 <SystemInit+0x20>)
 8001194:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001198:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011e4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011b0:	f7ff ffea 	bl	8001188 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011b4:	480c      	ldr	r0, [pc, #48]	@ (80011e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011b6:	490d      	ldr	r1, [pc, #52]	@ (80011ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011b8:	4a0d      	ldr	r2, [pc, #52]	@ (80011f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011bc:	e002      	b.n	80011c4 <LoopCopyDataInit>

080011be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011c2:	3304      	adds	r3, #4

080011c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c8:	d3f9      	bcc.n	80011be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ca:	4a0a      	ldr	r2, [pc, #40]	@ (80011f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011cc:	4c0a      	ldr	r4, [pc, #40]	@ (80011f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d0:	e001      	b.n	80011d6 <LoopFillZerobss>

080011d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d4:	3204      	adds	r2, #4

080011d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d8:	d3fb      	bcc.n	80011d2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80011da:	f008 fc57 	bl	8009a8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011de:	f7ff fc09 	bl	80009f4 <main>
  bx  lr    
 80011e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011e4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80011e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011ec:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80011f0:	0800beb4 	.word	0x0800beb4
  ldr r2, =_sbss
 80011f4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80011f8:	20000d38 	.word	0x20000d38

080011fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011fc:	e7fe      	b.n	80011fc <ADC_IRQHandler>

080011fe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001202:	2003      	movs	r0, #3
 8001204:	f000 f94c 	bl	80014a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001208:	200f      	movs	r0, #15
 800120a:	f000 f805 	bl	8001218 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800120e:	f7ff fee7 	bl	8000fe0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001212:	2300      	movs	r3, #0
}
 8001214:	4618      	mov	r0, r3
 8001216:	bd80      	pop	{r7, pc}

08001218 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001220:	4b12      	ldr	r3, [pc, #72]	@ (800126c <HAL_InitTick+0x54>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	4b12      	ldr	r3, [pc, #72]	@ (8001270 <HAL_InitTick+0x58>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	4619      	mov	r1, r3
 800122a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800122e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001232:	fbb2 f3f3 	udiv	r3, r2, r3
 8001236:	4618      	mov	r0, r3
 8001238:	f000 f967 	bl	800150a <HAL_SYSTICK_Config>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e00e      	b.n	8001264 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2b0f      	cmp	r3, #15
 800124a:	d80a      	bhi.n	8001262 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800124c:	2200      	movs	r2, #0
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	f04f 30ff 	mov.w	r0, #4294967295
 8001254:	f000 f92f 	bl	80014b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001258:	4a06      	ldr	r2, [pc, #24]	@ (8001274 <HAL_InitTick+0x5c>)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800125e:	2300      	movs	r3, #0
 8001260:	e000      	b.n	8001264 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
}
 8001264:	4618      	mov	r0, r3
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000004 	.word	0x20000004
 8001270:	2000000c 	.word	0x2000000c
 8001274:	20000008 	.word	0x20000008

08001278 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800127c:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <HAL_IncTick+0x20>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	461a      	mov	r2, r3
 8001282:	4b06      	ldr	r3, [pc, #24]	@ (800129c <HAL_IncTick+0x24>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4413      	add	r3, r2
 8001288:	4a04      	ldr	r2, [pc, #16]	@ (800129c <HAL_IncTick+0x24>)
 800128a:	6013      	str	r3, [r2, #0]
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	2000000c 	.word	0x2000000c
 800129c:	20000824 	.word	0x20000824

080012a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return uwTick;
 80012a4:	4b03      	ldr	r3, [pc, #12]	@ (80012b4 <HAL_GetTick+0x14>)
 80012a6:	681b      	ldr	r3, [r3, #0]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20000824 	.word	0x20000824

080012b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c0:	f7ff ffee 	bl	80012a0 <HAL_GetTick>
 80012c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d0:	d005      	beq.n	80012de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012d2:	4b0a      	ldr	r3, [pc, #40]	@ (80012fc <HAL_Delay+0x44>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	461a      	mov	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4413      	add	r3, r2
 80012dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012de:	bf00      	nop
 80012e0:	f7ff ffde 	bl	80012a0 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d8f7      	bhi.n	80012e0 <HAL_Delay+0x28>
  {
  }
}
 80012f0:	bf00      	nop
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	2000000c 	.word	0x2000000c

08001300 <__NVIC_SetPriorityGrouping>:
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001310:	4b0b      	ldr	r3, [pc, #44]	@ (8001340 <__NVIC_SetPriorityGrouping+0x40>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001316:	68ba      	ldr	r2, [r7, #8]
 8001318:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800131c:	4013      	ands	r3, r2
 800131e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001328:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <__NVIC_SetPriorityGrouping+0x44>)
 800132a:	4313      	orrs	r3, r2
 800132c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800132e:	4a04      	ldr	r2, [pc, #16]	@ (8001340 <__NVIC_SetPriorityGrouping+0x40>)
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	60d3      	str	r3, [r2, #12]
}
 8001334:	bf00      	nop
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	e000ed00 	.word	0xe000ed00
 8001344:	05fa0000 	.word	0x05fa0000

08001348 <__NVIC_GetPriorityGrouping>:
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800134c:	4b04      	ldr	r3, [pc, #16]	@ (8001360 <__NVIC_GetPriorityGrouping+0x18>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	0a1b      	lsrs	r3, r3, #8
 8001352:	f003 0307 	and.w	r3, r3, #7
}
 8001356:	4618      	mov	r0, r3
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <__NVIC_EnableIRQ>:
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800136e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001372:	2b00      	cmp	r3, #0
 8001374:	db0b      	blt.n	800138e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	f003 021f 	and.w	r2, r3, #31
 800137c:	4907      	ldr	r1, [pc, #28]	@ (800139c <__NVIC_EnableIRQ+0x38>)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	095b      	lsrs	r3, r3, #5
 8001384:	2001      	movs	r0, #1
 8001386:	fa00 f202 	lsl.w	r2, r0, r2
 800138a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000e100 	.word	0xe000e100

080013a0 <__NVIC_SetPriority>:
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	6039      	str	r1, [r7, #0]
 80013aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	db0a      	blt.n	80013ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	490c      	ldr	r1, [pc, #48]	@ (80013ec <__NVIC_SetPriority+0x4c>)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	0112      	lsls	r2, r2, #4
 80013c0:	b2d2      	uxtb	r2, r2
 80013c2:	440b      	add	r3, r1
 80013c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80013c8:	e00a      	b.n	80013e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	4908      	ldr	r1, [pc, #32]	@ (80013f0 <__NVIC_SetPriority+0x50>)
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	f003 030f 	and.w	r3, r3, #15
 80013d6:	3b04      	subs	r3, #4
 80013d8:	0112      	lsls	r2, r2, #4
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	440b      	add	r3, r1
 80013de:	761a      	strb	r2, [r3, #24]
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000e100 	.word	0xe000e100
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <NVIC_EncodePriority>:
{
 80013f4:	b480      	push	{r7}
 80013f6:	b089      	sub	sp, #36	@ 0x24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f1c3 0307 	rsb	r3, r3, #7
 800140e:	2b04      	cmp	r3, #4
 8001410:	bf28      	it	cs
 8001412:	2304      	movcs	r3, #4
 8001414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3304      	adds	r3, #4
 800141a:	2b06      	cmp	r3, #6
 800141c:	d902      	bls.n	8001424 <NVIC_EncodePriority+0x30>
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3b03      	subs	r3, #3
 8001422:	e000      	b.n	8001426 <NVIC_EncodePriority+0x32>
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001428:	f04f 32ff 	mov.w	r2, #4294967295
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43da      	mvns	r2, r3
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	401a      	ands	r2, r3
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800143c:	f04f 31ff 	mov.w	r1, #4294967295
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	fa01 f303 	lsl.w	r3, r1, r3
 8001446:	43d9      	mvns	r1, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800144c:	4313      	orrs	r3, r2
}
 800144e:	4618      	mov	r0, r3
 8001450:	3724      	adds	r7, #36	@ 0x24
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
	...

0800145c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3b01      	subs	r3, #1
 8001468:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800146c:	d301      	bcc.n	8001472 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800146e:	2301      	movs	r3, #1
 8001470:	e00f      	b.n	8001492 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001472:	4a0a      	ldr	r2, [pc, #40]	@ (800149c <SysTick_Config+0x40>)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3b01      	subs	r3, #1
 8001478:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800147a:	210f      	movs	r1, #15
 800147c:	f04f 30ff 	mov.w	r0, #4294967295
 8001480:	f7ff ff8e 	bl	80013a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001484:	4b05      	ldr	r3, [pc, #20]	@ (800149c <SysTick_Config+0x40>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800148a:	4b04      	ldr	r3, [pc, #16]	@ (800149c <SysTick_Config+0x40>)
 800148c:	2207      	movs	r2, #7
 800148e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	e000e010 	.word	0xe000e010

080014a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff ff29 	bl	8001300 <__NVIC_SetPriorityGrouping>
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b086      	sub	sp, #24
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	4603      	mov	r3, r0
 80014be:	60b9      	str	r1, [r7, #8]
 80014c0:	607a      	str	r2, [r7, #4]
 80014c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014c8:	f7ff ff3e 	bl	8001348 <__NVIC_GetPriorityGrouping>
 80014cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	68b9      	ldr	r1, [r7, #8]
 80014d2:	6978      	ldr	r0, [r7, #20]
 80014d4:	f7ff ff8e 	bl	80013f4 <NVIC_EncodePriority>
 80014d8:	4602      	mov	r2, r0
 80014da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014de:	4611      	mov	r1, r2
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ff5d 	bl	80013a0 <__NVIC_SetPriority>
}
 80014e6:	bf00      	nop
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	4603      	mov	r3, r0
 80014f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff31 	bl	8001364 <__NVIC_EnableIRQ>
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff ffa2 	bl	800145c <SysTick_Config>
 8001518:	4603      	mov	r3, r0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e054      	b.n	80015e0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	7f5b      	ldrb	r3, [r3, #29]
 800153a:	b2db      	uxtb	r3, r3
 800153c:	2b00      	cmp	r3, #0
 800153e:	d105      	bne.n	800154c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff fd6e 	bl	8001028 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2202      	movs	r2, #2
 8001550:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	791b      	ldrb	r3, [r3, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d10c      	bne.n	8001574 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a22      	ldr	r2, [pc, #136]	@ (80015e8 <HAL_CRC_Init+0xc4>)
 8001560:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	689a      	ldr	r2, [r3, #8]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f022 0218 	bic.w	r2, r2, #24
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	e00c      	b.n	800158e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6899      	ldr	r1, [r3, #8]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	461a      	mov	r2, r3
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f000 f834 	bl	80015ec <HAL_CRCEx_Polynomial_Set>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e028      	b.n	80015e0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	795b      	ldrb	r3, [r3, #5]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d105      	bne.n	80015a2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f04f 32ff 	mov.w	r2, #4294967295
 800159e:	611a      	str	r2, [r3, #16]
 80015a0:	e004      	b.n	80015ac <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	6912      	ldr	r2, [r2, #16]
 80015aa:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	695a      	ldr	r2, [r3, #20]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	430a      	orrs	r2, r1
 80015c0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	699a      	ldr	r2, [r3, #24]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	430a      	orrs	r2, r1
 80015d6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2201      	movs	r2, #1
 80015dc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	04c11db7 	.word	0x04c11db7

080015ec <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b087      	sub	sp, #28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015f8:	2300      	movs	r3, #0
 80015fa:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80015fc:	231f      	movs	r3, #31
 80015fe:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001600:	bf00      	nop
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1e5a      	subs	r2, r3, #1
 8001606:	613a      	str	r2, [r7, #16]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d009      	beq.n	8001620 <HAL_CRCEx_Polynomial_Set+0x34>
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	f003 031f 	and.w	r3, r3, #31
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	fa22 f303 	lsr.w	r3, r2, r3
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0f0      	beq.n	8001602 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b18      	cmp	r3, #24
 8001624:	d846      	bhi.n	80016b4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001626:	a201      	add	r2, pc, #4	@ (adr r2, 800162c <HAL_CRCEx_Polynomial_Set+0x40>)
 8001628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800162c:	080016bb 	.word	0x080016bb
 8001630:	080016b5 	.word	0x080016b5
 8001634:	080016b5 	.word	0x080016b5
 8001638:	080016b5 	.word	0x080016b5
 800163c:	080016b5 	.word	0x080016b5
 8001640:	080016b5 	.word	0x080016b5
 8001644:	080016b5 	.word	0x080016b5
 8001648:	080016b5 	.word	0x080016b5
 800164c:	080016a9 	.word	0x080016a9
 8001650:	080016b5 	.word	0x080016b5
 8001654:	080016b5 	.word	0x080016b5
 8001658:	080016b5 	.word	0x080016b5
 800165c:	080016b5 	.word	0x080016b5
 8001660:	080016b5 	.word	0x080016b5
 8001664:	080016b5 	.word	0x080016b5
 8001668:	080016b5 	.word	0x080016b5
 800166c:	0800169d 	.word	0x0800169d
 8001670:	080016b5 	.word	0x080016b5
 8001674:	080016b5 	.word	0x080016b5
 8001678:	080016b5 	.word	0x080016b5
 800167c:	080016b5 	.word	0x080016b5
 8001680:	080016b5 	.word	0x080016b5
 8001684:	080016b5 	.word	0x080016b5
 8001688:	080016b5 	.word	0x080016b5
 800168c:	08001691 	.word	0x08001691
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	2b06      	cmp	r3, #6
 8001694:	d913      	bls.n	80016be <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800169a:	e010      	b.n	80016be <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	2b07      	cmp	r3, #7
 80016a0:	d90f      	bls.n	80016c2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80016a6:	e00c      	b.n	80016c2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	2b0f      	cmp	r3, #15
 80016ac:	d90b      	bls.n	80016c6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80016b2:	e008      	b.n	80016c6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	75fb      	strb	r3, [r7, #23]
      break;
 80016b8:	e006      	b.n	80016c8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80016ba:	bf00      	nop
 80016bc:	e004      	b.n	80016c8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80016be:	bf00      	nop
 80016c0:	e002      	b.n	80016c8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80016c2:	bf00      	nop
 80016c4:	e000      	b.n	80016c8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80016c6:	bf00      	nop
  }
  if (status == HAL_OK)
 80016c8:	7dfb      	ldrb	r3, [r7, #23]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d10d      	bne.n	80016ea <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	68ba      	ldr	r2, [r7, #8]
 80016d4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f023 0118 	bic.w	r1, r3, #24
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	430a      	orrs	r2, r1
 80016e8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80016ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	371c      	adds	r7, #28
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001704:	f7ff fdcc 	bl	80012a0 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e099      	b.n	8001848 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2202      	movs	r2, #2
 8001718:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 0201 	bic.w	r2, r2, #1
 8001732:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001734:	e00f      	b.n	8001756 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001736:	f7ff fdb3 	bl	80012a0 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b05      	cmp	r3, #5
 8001742:	d908      	bls.n	8001756 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2220      	movs	r2, #32
 8001748:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2203      	movs	r2, #3
 800174e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e078      	b.n	8001848 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1e8      	bne.n	8001736 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	4b38      	ldr	r3, [pc, #224]	@ (8001850 <HAL_DMA_Init+0x158>)
 8001770:	4013      	ands	r3, r2
 8001772:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001782:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800178e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800179a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a1b      	ldr	r3, [r3, #32]
 80017a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017a2:	697a      	ldr	r2, [r7, #20]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ac:	2b04      	cmp	r3, #4
 80017ae:	d107      	bne.n	80017c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b8:	4313      	orrs	r3, r2
 80017ba:	697a      	ldr	r2, [r7, #20]
 80017bc:	4313      	orrs	r3, r2
 80017be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	f023 0307 	bic.w	r3, r3, #7
 80017d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	4313      	orrs	r3, r2
 80017e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	d117      	bne.n	800181a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d00e      	beq.n	800181a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f000 f8bd 	bl	800197c <DMA_CheckFifoParam>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d008      	beq.n	800181a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2240      	movs	r2, #64	@ 0x40
 800180c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2201      	movs	r2, #1
 8001812:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001816:	2301      	movs	r3, #1
 8001818:	e016      	b.n	8001848 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	697a      	ldr	r2, [r7, #20]
 8001820:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f874 	bl	8001910 <DMA_CalcBaseAndBitshift>
 8001828:	4603      	mov	r3, r0
 800182a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001830:	223f      	movs	r2, #63	@ 0x3f
 8001832:	409a      	lsls	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2201      	movs	r2, #1
 8001842:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	f010803f 	.word	0xf010803f

08001854 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e050      	b.n	8001908 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d101      	bne.n	8001876 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001872:	2302      	movs	r3, #2
 8001874:	e048      	b.n	8001908 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 0201 	bic.w	r2, r2, #1
 8001884:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2200      	movs	r2, #0
 8001894:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2200      	movs	r2, #0
 800189c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2200      	movs	r2, #0
 80018a4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2200      	movs	r2, #0
 80018ac:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2221      	movs	r2, #33	@ 0x21
 80018b4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 f82a 	bl	8001910 <DMA_CalcBaseAndBitshift>
 80018bc:	4603      	mov	r3, r0
 80018be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018c4:	223f      	movs	r2, #63	@ 0x3f
 80018c6:	409a      	lsls	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	b2db      	uxtb	r3, r3
 800191e:	3b10      	subs	r3, #16
 8001920:	4a13      	ldr	r2, [pc, #76]	@ (8001970 <DMA_CalcBaseAndBitshift+0x60>)
 8001922:	fba2 2303 	umull	r2, r3, r2, r3
 8001926:	091b      	lsrs	r3, r3, #4
 8001928:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800192a:	4a12      	ldr	r2, [pc, #72]	@ (8001974 <DMA_CalcBaseAndBitshift+0x64>)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	4413      	add	r3, r2
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	461a      	mov	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2b03      	cmp	r3, #3
 800193c:	d908      	bls.n	8001950 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	461a      	mov	r2, r3
 8001944:	4b0c      	ldr	r3, [pc, #48]	@ (8001978 <DMA_CalcBaseAndBitshift+0x68>)
 8001946:	4013      	ands	r3, r2
 8001948:	1d1a      	adds	r2, r3, #4
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	659a      	str	r2, [r3, #88]	@ 0x58
 800194e:	e006      	b.n	800195e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	461a      	mov	r2, r3
 8001956:	4b08      	ldr	r3, [pc, #32]	@ (8001978 <DMA_CalcBaseAndBitshift+0x68>)
 8001958:	4013      	ands	r3, r2
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001962:	4618      	mov	r0, r3
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	aaaaaaab 	.word	0xaaaaaaab
 8001974:	0800a328 	.word	0x0800a328
 8001978:	fffffc00 	.word	0xfffffc00

0800197c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001984:	2300      	movs	r3, #0
 8001986:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800198c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d11f      	bne.n	80019d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	2b03      	cmp	r3, #3
 800199a:	d856      	bhi.n	8001a4a <DMA_CheckFifoParam+0xce>
 800199c:	a201      	add	r2, pc, #4	@ (adr r2, 80019a4 <DMA_CheckFifoParam+0x28>)
 800199e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a2:	bf00      	nop
 80019a4:	080019b5 	.word	0x080019b5
 80019a8:	080019c7 	.word	0x080019c7
 80019ac:	080019b5 	.word	0x080019b5
 80019b0:	08001a4b 	.word	0x08001a4b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d046      	beq.n	8001a4e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019c4:	e043      	b.n	8001a4e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80019ce:	d140      	bne.n	8001a52 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019d4:	e03d      	b.n	8001a52 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019de:	d121      	bne.n	8001a24 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	2b03      	cmp	r3, #3
 80019e4:	d837      	bhi.n	8001a56 <DMA_CheckFifoParam+0xda>
 80019e6:	a201      	add	r2, pc, #4	@ (adr r2, 80019ec <DMA_CheckFifoParam+0x70>)
 80019e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ec:	080019fd 	.word	0x080019fd
 80019f0:	08001a03 	.word	0x08001a03
 80019f4:	080019fd 	.word	0x080019fd
 80019f8:	08001a15 	.word	0x08001a15
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	73fb      	strb	r3, [r7, #15]
      break;
 8001a00:	e030      	b.n	8001a64 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d025      	beq.n	8001a5a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a12:	e022      	b.n	8001a5a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a18:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001a1c:	d11f      	bne.n	8001a5e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a22:	e01c      	b.n	8001a5e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d903      	bls.n	8001a32 <DMA_CheckFifoParam+0xb6>
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	2b03      	cmp	r3, #3
 8001a2e:	d003      	beq.n	8001a38 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a30:	e018      	b.n	8001a64 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	73fb      	strb	r3, [r7, #15]
      break;
 8001a36:	e015      	b.n	8001a64 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d00e      	beq.n	8001a62 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	73fb      	strb	r3, [r7, #15]
      break;
 8001a48:	e00b      	b.n	8001a62 <DMA_CheckFifoParam+0xe6>
      break;
 8001a4a:	bf00      	nop
 8001a4c:	e00a      	b.n	8001a64 <DMA_CheckFifoParam+0xe8>
      break;
 8001a4e:	bf00      	nop
 8001a50:	e008      	b.n	8001a64 <DMA_CheckFifoParam+0xe8>
      break;
 8001a52:	bf00      	nop
 8001a54:	e006      	b.n	8001a64 <DMA_CheckFifoParam+0xe8>
      break;
 8001a56:	bf00      	nop
 8001a58:	e004      	b.n	8001a64 <DMA_CheckFifoParam+0xe8>
      break;
 8001a5a:	bf00      	nop
 8001a5c:	e002      	b.n	8001a64 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a5e:	bf00      	nop
 8001a60:	e000      	b.n	8001a64 <DMA_CheckFifoParam+0xe8>
      break;
 8001a62:	bf00      	nop
    }
  } 
  
  return status; 
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop

08001a74 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e039      	b.n	8001afa <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d106      	bne.n	8001aa0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff fae4 	bl	8001068 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ac4:	f023 0107 	bic.w	r1, r3, #7
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ada:	4b0a      	ldr	r3, [pc, #40]	@ (8001b04 <HAL_DMA2D_Init+0x90>)
 8001adc:	4013      	ands	r3, r2
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	68d1      	ldr	r1, [r2, #12]
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	6812      	ldr	r2, [r2, #0]
 8001ae6:	430b      	orrs	r3, r1
 8001ae8:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	ffffc000 	.word	0xffffc000

08001b08 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af02      	add	r7, sp, #8
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
 8001b14:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d101      	bne.n	8001b24 <HAL_DMA2D_Start+0x1c>
 8001b20:	2302      	movs	r3, #2
 8001b22:	e018      	b.n	8001b56 <HAL_DMA2D_Start+0x4e>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2202      	movs	r2, #2
 8001b30:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	68b9      	ldr	r1, [r7, #8]
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f000 f988 	bl	8001e54 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f042 0201 	orr.w	r2, r2, #1
 8001b52:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b086      	sub	sp, #24
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
 8001b66:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d056      	beq.n	8001c28 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b7a:	f7ff fb91 	bl	80012a0 <HAL_GetTick>
 8001b7e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001b80:	e04b      	b.n	8001c1a <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d023      	beq.n	8001bdc <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f003 0320 	and.w	r3, r3, #32
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d005      	beq.n	8001baa <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ba2:	f043 0202 	orr.w	r2, r3, #2
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d005      	beq.n	8001bc0 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bb8:	f043 0201 	orr.w	r2, r3, #1
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2221      	movs	r2, #33	@ 0x21
 8001bc6:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2204      	movs	r2, #4
 8001bcc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e0a5      	b.n	8001d28 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be2:	d01a      	beq.n	8001c1a <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001be4:	f7ff fb5c 	bl	80012a0 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d302      	bcc.n	8001bfa <HAL_DMA2D_PollForTransfer+0x9c>
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d10f      	bne.n	8001c1a <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bfe:	f043 0220 	orr.w	r2, r3, #32
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2203      	movs	r2, #3
 8001c0a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e086      	b.n	8001d28 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0ac      	beq.n	8001b82 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	f003 0320 	and.w	r3, r3, #32
 8001c32:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3a:	f003 0320 	and.w	r3, r3, #32
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d061      	beq.n	8001d0e <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c4a:	f7ff fb29 	bl	80012a0 <HAL_GetTick>
 8001c4e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001c50:	e056      	b.n	8001d00 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d02e      	beq.n	8001cc2 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d005      	beq.n	8001c7a <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c72:	f043 0204 	orr.w	r2, r3, #4
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f003 0320 	and.w	r3, r3, #32
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d005      	beq.n	8001c90 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c88:	f043 0202 	orr.w	r2, r3, #2
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d005      	beq.n	8001ca6 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c9e:	f043 0201 	orr.w	r2, r3, #1
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2229      	movs	r2, #41	@ 0x29
 8001cac:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2204      	movs	r2, #4
 8001cb2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e032      	b.n	8001d28 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc8:	d01a      	beq.n	8001d00 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001cca:	f7ff fae9 	bl	80012a0 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d302      	bcc.n	8001ce0 <HAL_DMA2D_PollForTransfer+0x182>
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d10f      	bne.n	8001d00 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ce4:	f043 0220 	orr.w	r2, r3, #32
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2203      	movs	r2, #3
 8001cf0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e013      	b.n	8001d28 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f003 0310 	and.w	r3, r3, #16
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d0a1      	beq.n	8001c52 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2212      	movs	r2, #18
 8001d14:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b087      	sub	sp, #28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d101      	bne.n	8001d50 <HAL_DMA2D_ConfigLayer+0x20>
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	e079      	b.n	8001e44 <HAL_DMA2D_ConfigLayer+0x114>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	011b      	lsls	r3, r3, #4
 8001d64:	3318      	adds	r3, #24
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	4413      	add	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	041b      	lsls	r3, r3, #16
 8001d76:	4313      	orrs	r3, r2
 8001d78:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001d7a:	4b35      	ldr	r3, [pc, #212]	@ (8001e50 <HAL_DMA2D_ConfigLayer+0x120>)
 8001d7c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b0a      	cmp	r3, #10
 8001d84:	d003      	beq.n	8001d8e <HAL_DMA2D_ConfigLayer+0x5e>
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b09      	cmp	r3, #9
 8001d8c:	d107      	bne.n	8001d9e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	617b      	str	r3, [r7, #20]
 8001d9c:	e005      	b.n	8001daa <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	061b      	lsls	r3, r3, #24
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d120      	bne.n	8001df2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	43db      	mvns	r3, r3
 8001dba:	ea02 0103 	and.w	r1, r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	6812      	ldr	r2, [r2, #0]
 8001dd0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2b0a      	cmp	r3, #10
 8001dd8:	d003      	beq.n	8001de2 <HAL_DMA2D_ConfigLayer+0xb2>
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b09      	cmp	r3, #9
 8001de0:	d127      	bne.n	8001e32 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	68da      	ldr	r2, [r3, #12]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001dee:	629a      	str	r2, [r3, #40]	@ 0x28
 8001df0:	e01f      	b.n	8001e32 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	69da      	ldr	r2, [r3, #28]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	ea02 0103 	and.w	r1, r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	430a      	orrs	r2, r1
 8001e08:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	6812      	ldr	r2, [r2, #0]
 8001e12:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b0a      	cmp	r3, #10
 8001e1a:	d003      	beq.n	8001e24 <HAL_DMA2D_ConfigLayer+0xf4>
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b09      	cmp	r3, #9
 8001e22:	d106      	bne.n	8001e32 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	68da      	ldr	r2, [r3, #12]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001e30:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	371c      	adds	r7, #28
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	ff03000f 	.word	0xff03000f

08001e54 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b08b      	sub	sp, #44	@ 0x2c
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
 8001e60:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e68:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	041a      	lsls	r2, r3, #16
 8001e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e72:	431a      	orrs	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001e8c:	d174      	bne.n	8001f78 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001e94:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001e9c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8001ea4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d108      	bne.n	8001ec6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	6a3b      	ldr	r3, [r7, #32]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ec4:	e053      	b.n	8001f6e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d106      	bne.n	8001edc <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	697a      	ldr	r2, [r7, #20]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eda:	e048      	b.n	8001f6e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d111      	bne.n	8001f08 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	0cdb      	lsrs	r3, r3, #19
 8001ee8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	0a9b      	lsrs	r3, r3, #10
 8001eee:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	08db      	lsrs	r3, r3, #3
 8001ef4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	015a      	lsls	r2, r3, #5
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	02db      	lsls	r3, r3, #11
 8001efe:	4313      	orrs	r3, r2
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f06:	e032      	b.n	8001f6e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	2b03      	cmp	r3, #3
 8001f0e:	d117      	bne.n	8001f40 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8001f10:	6a3b      	ldr	r3, [r7, #32]
 8001f12:	0fdb      	lsrs	r3, r3, #31
 8001f14:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	0cdb      	lsrs	r3, r3, #19
 8001f1a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	0adb      	lsrs	r3, r3, #11
 8001f20:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	08db      	lsrs	r3, r3, #3
 8001f26:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	015a      	lsls	r2, r3, #5
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	029b      	lsls	r3, r3, #10
 8001f30:	431a      	orrs	r2, r3
 8001f32:	6a3b      	ldr	r3, [r7, #32]
 8001f34:	03db      	lsls	r3, r3, #15
 8001f36:	4313      	orrs	r3, r2
 8001f38:	697a      	ldr	r2, [r7, #20]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f3e:	e016      	b.n	8001f6e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8001f40:	6a3b      	ldr	r3, [r7, #32]
 8001f42:	0f1b      	lsrs	r3, r3, #28
 8001f44:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	0d1b      	lsrs	r3, r3, #20
 8001f4a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	0b1b      	lsrs	r3, r3, #12
 8001f50:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	091b      	lsrs	r3, r3, #4
 8001f56:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	011a      	lsls	r2, r3, #4
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	021b      	lsls	r3, r3, #8
 8001f60:	431a      	orrs	r2, r3
 8001f62:	6a3b      	ldr	r3, [r7, #32]
 8001f64:	031b      	lsls	r3, r3, #12
 8001f66:	4313      	orrs	r3, r2
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f74:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8001f76:	e003      	b.n	8001f80 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68ba      	ldr	r2, [r7, #8]
 8001f7e:	60da      	str	r2, [r3, #12]
}
 8001f80:	bf00      	nop
 8001f82:	372c      	adds	r7, #44	@ 0x2c
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b089      	sub	sp, #36	@ 0x24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61fb      	str	r3, [r7, #28]
 8001faa:	e175      	b.n	8002298 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001fac:	2201      	movs	r2, #1
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	f040 8164 	bne.w	8002292 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d005      	beq.n	8001fe2 <HAL_GPIO_Init+0x56>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d130      	bne.n	8002044 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	2203      	movs	r2, #3
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4313      	orrs	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002018:	2201      	movs	r2, #1
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	091b      	lsrs	r3, r3, #4
 800202e:	f003 0201 	and.w	r2, r3, #1
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	2b03      	cmp	r3, #3
 800204e:	d017      	beq.n	8002080 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	2203      	movs	r2, #3
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 0303 	and.w	r3, r3, #3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d123      	bne.n	80020d4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	08da      	lsrs	r2, r3, #3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3208      	adds	r2, #8
 8002094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	220f      	movs	r2, #15
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	691a      	ldr	r2, [r3, #16]
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	08da      	lsrs	r2, r3, #3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	3208      	adds	r2, #8
 80020ce:	69b9      	ldr	r1, [r7, #24]
 80020d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	2203      	movs	r2, #3
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 0203 	and.w	r2, r3, #3
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 80be 	beq.w	8002292 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002116:	4b66      	ldr	r3, [pc, #408]	@ (80022b0 <HAL_GPIO_Init+0x324>)
 8002118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211a:	4a65      	ldr	r2, [pc, #404]	@ (80022b0 <HAL_GPIO_Init+0x324>)
 800211c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002120:	6453      	str	r3, [r2, #68]	@ 0x44
 8002122:	4b63      	ldr	r3, [pc, #396]	@ (80022b0 <HAL_GPIO_Init+0x324>)
 8002124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002126:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800212e:	4a61      	ldr	r2, [pc, #388]	@ (80022b4 <HAL_GPIO_Init+0x328>)
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	089b      	lsrs	r3, r3, #2
 8002134:	3302      	adds	r3, #2
 8002136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	220f      	movs	r2, #15
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43db      	mvns	r3, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4013      	ands	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a58      	ldr	r2, [pc, #352]	@ (80022b8 <HAL_GPIO_Init+0x32c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d037      	beq.n	80021ca <HAL_GPIO_Init+0x23e>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a57      	ldr	r2, [pc, #348]	@ (80022bc <HAL_GPIO_Init+0x330>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d031      	beq.n	80021c6 <HAL_GPIO_Init+0x23a>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a56      	ldr	r2, [pc, #344]	@ (80022c0 <HAL_GPIO_Init+0x334>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d02b      	beq.n	80021c2 <HAL_GPIO_Init+0x236>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a55      	ldr	r2, [pc, #340]	@ (80022c4 <HAL_GPIO_Init+0x338>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d025      	beq.n	80021be <HAL_GPIO_Init+0x232>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a54      	ldr	r2, [pc, #336]	@ (80022c8 <HAL_GPIO_Init+0x33c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d01f      	beq.n	80021ba <HAL_GPIO_Init+0x22e>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a53      	ldr	r2, [pc, #332]	@ (80022cc <HAL_GPIO_Init+0x340>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d019      	beq.n	80021b6 <HAL_GPIO_Init+0x22a>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a52      	ldr	r2, [pc, #328]	@ (80022d0 <HAL_GPIO_Init+0x344>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d013      	beq.n	80021b2 <HAL_GPIO_Init+0x226>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a51      	ldr	r2, [pc, #324]	@ (80022d4 <HAL_GPIO_Init+0x348>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d00d      	beq.n	80021ae <HAL_GPIO_Init+0x222>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a50      	ldr	r2, [pc, #320]	@ (80022d8 <HAL_GPIO_Init+0x34c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d007      	beq.n	80021aa <HAL_GPIO_Init+0x21e>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a4f      	ldr	r2, [pc, #316]	@ (80022dc <HAL_GPIO_Init+0x350>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d101      	bne.n	80021a6 <HAL_GPIO_Init+0x21a>
 80021a2:	2309      	movs	r3, #9
 80021a4:	e012      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021a6:	230a      	movs	r3, #10
 80021a8:	e010      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021aa:	2308      	movs	r3, #8
 80021ac:	e00e      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021ae:	2307      	movs	r3, #7
 80021b0:	e00c      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021b2:	2306      	movs	r3, #6
 80021b4:	e00a      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021b6:	2305      	movs	r3, #5
 80021b8:	e008      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021ba:	2304      	movs	r3, #4
 80021bc:	e006      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021be:	2303      	movs	r3, #3
 80021c0:	e004      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021c2:	2302      	movs	r3, #2
 80021c4:	e002      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021c6:	2301      	movs	r3, #1
 80021c8:	e000      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021ca:	2300      	movs	r3, #0
 80021cc:	69fa      	ldr	r2, [r7, #28]
 80021ce:	f002 0203 	and.w	r2, r2, #3
 80021d2:	0092      	lsls	r2, r2, #2
 80021d4:	4093      	lsls	r3, r2
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80021dc:	4935      	ldr	r1, [pc, #212]	@ (80022b4 <HAL_GPIO_Init+0x328>)
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	089b      	lsrs	r3, r3, #2
 80021e2:	3302      	adds	r3, #2
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021ea:	4b3d      	ldr	r3, [pc, #244]	@ (80022e0 <HAL_GPIO_Init+0x354>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	43db      	mvns	r3, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4013      	ands	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	4313      	orrs	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800220e:	4a34      	ldr	r2, [pc, #208]	@ (80022e0 <HAL_GPIO_Init+0x354>)
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002214:	4b32      	ldr	r3, [pc, #200]	@ (80022e0 <HAL_GPIO_Init+0x354>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	43db      	mvns	r3, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4013      	ands	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d003      	beq.n	8002238 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	4313      	orrs	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002238:	4a29      	ldr	r2, [pc, #164]	@ (80022e0 <HAL_GPIO_Init+0x354>)
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800223e:	4b28      	ldr	r3, [pc, #160]	@ (80022e0 <HAL_GPIO_Init+0x354>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	43db      	mvns	r3, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4013      	ands	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002262:	4a1f      	ldr	r2, [pc, #124]	@ (80022e0 <HAL_GPIO_Init+0x354>)
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002268:	4b1d      	ldr	r3, [pc, #116]	@ (80022e0 <HAL_GPIO_Init+0x354>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800228c:	4a14      	ldr	r2, [pc, #80]	@ (80022e0 <HAL_GPIO_Init+0x354>)
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	3301      	adds	r3, #1
 8002296:	61fb      	str	r3, [r7, #28]
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	2b0f      	cmp	r3, #15
 800229c:	f67f ae86 	bls.w	8001fac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80022a0:	bf00      	nop
 80022a2:	bf00      	nop
 80022a4:	3724      	adds	r7, #36	@ 0x24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40013800 	.word	0x40013800
 80022b8:	40020000 	.word	0x40020000
 80022bc:	40020400 	.word	0x40020400
 80022c0:	40020800 	.word	0x40020800
 80022c4:	40020c00 	.word	0x40020c00
 80022c8:	40021000 	.word	0x40021000
 80022cc:	40021400 	.word	0x40021400
 80022d0:	40021800 	.word	0x40021800
 80022d4:	40021c00 	.word	0x40021c00
 80022d8:	40022000 	.word	0x40022000
 80022dc:	40022400 	.word	0x40022400
 80022e0:	40013c00 	.word	0x40013c00

080022e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	460b      	mov	r3, r1
 80022ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	691a      	ldr	r2, [r3, #16]
 80022f4:	887b      	ldrh	r3, [r7, #2]
 80022f6:	4013      	ands	r3, r2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d002      	beq.n	8002302 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022fc:	2301      	movs	r3, #1
 80022fe:	73fb      	strb	r3, [r7, #15]
 8002300:	e001      	b.n	8002306 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002302:	2300      	movs	r3, #0
 8002304:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002306:	7bfb      	ldrb	r3, [r7, #15]
}
 8002308:	4618      	mov	r0, r3
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	460b      	mov	r3, r1
 800231e:	807b      	strh	r3, [r7, #2]
 8002320:	4613      	mov	r3, r2
 8002322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002324:	787b      	ldrb	r3, [r7, #1]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800232a:	887a      	ldrh	r2, [r7, #2]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002330:	e003      	b.n	800233a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002332:	887b      	ldrh	r3, [r7, #2]
 8002334:	041a      	lsls	r2, r3, #16
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	619a      	str	r2, [r3, #24]
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
	...

08002348 <HAL_LTDC_Init>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, tmp1 = 0;
 8002350:	2300      	movs	r3, #0
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	2300      	movs	r3, #0
 8002356:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e0c7      	b.n	80024f2 <HAL_LTDC_Init+0x1aa>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d106      	bne.n	800237c <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f8c2 	bl	8002500 <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2202      	movs	r2, #2
 8002380:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configures the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	699a      	ldr	r2, [r3, #24]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8002392:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6999      	ldr	r1, [r3, #24]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80023a8:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	430a      	orrs	r2, r1
 80023b6:	619a      	str	r2, [r3, #24]

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6899      	ldr	r1, [r3, #8]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	4b4e      	ldr	r3, [pc, #312]	@ (80024fc <HAL_LTDC_Init+0x1b4>)
 80023c4:	400b      	ands	r3, r1
 80023c6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	041b      	lsls	r3, r3, #16
 80023ce:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6899      	ldr	r1, [r3, #8]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	699a      	ldr	r2, [r3, #24]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	431a      	orrs	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68d9      	ldr	r1, [r3, #12]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4b42      	ldr	r3, [pc, #264]	@ (80024fc <HAL_LTDC_Init+0x1b4>)
 80023f2:	400b      	ands	r3, r1
 80023f4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	041b      	lsls	r3, r3, #16
 80023fc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68d9      	ldr	r1, [r3, #12]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a1a      	ldr	r2, [r3, #32]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	431a      	orrs	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6919      	ldr	r1, [r3, #16]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	4b37      	ldr	r3, [pc, #220]	@ (80024fc <HAL_LTDC_Init+0x1b4>)
 8002420:	400b      	ands	r3, r1
 8002422:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002428:	041b      	lsls	r3, r3, #16
 800242a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6919      	ldr	r1, [r3, #16]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	431a      	orrs	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	430a      	orrs	r2, r1
 8002440:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6959      	ldr	r1, [r3, #20]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	4b2b      	ldr	r3, [pc, #172]	@ (80024fc <HAL_LTDC_Init+0x1b4>)
 800244e:	400b      	ands	r3, r1
 8002450:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002456:	041b      	lsls	r3, r3, #16
 8002458:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6959      	ldr	r1, [r3, #20]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	615a      	str	r2, [r3, #20]

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002476:	021b      	lsls	r3, r3, #8
 8002478:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8002480:	041b      	lsls	r3, r3, #16
 8002482:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8002492:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	4313      	orrs	r3, r2
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the transfer Error interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0204 	orr.w	r2, r2, #4
 80024be:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the FIFO underrun interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0202 	orr.w	r2, r2, #2
 80024ce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	699a      	ldr	r2, [r3, #24]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0201 	orr.w	r2, r2, #1
 80024de:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	f000f800 	.word	0xf000f800

08002500 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */ 
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <HAL_LTDC_IRQHandler>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.  
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_TE) != RESET)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002522:	f003 0304 	and.w	r3, r3, #4
 8002526:	2b00      	cmp	r3, #0
 8002528:	d025      	beq.n	8002576 <HAL_LTDC_IRQHandler+0x62>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_TE) != RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	d01e      	beq.n	8002576 <HAL_LTDC_IRQHandler+0x62>
    {
      /* Disable the transfer Error interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f022 0204 	bic.w	r2, r2, #4
 8002546:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Clear the transfer error flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2204      	movs	r2, #4
 800254e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Update error code */
      hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002556:	f043 0201 	orr.w	r2, r3, #1
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_ERROR;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2204      	movs	r2, #4
 8002564:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

      /* Transfer error Callback */
      HAL_LTDC_ErrorCallback(hltdc);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 f87b 	bl	800266c <HAL_LTDC_ErrorCallback>
    }
  }
  /* FIFO underrun Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_FU) != RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d025      	beq.n	80025d0 <HAL_LTDC_IRQHandler+0xbc>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_FU) != RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d01e      	beq.n	80025d0 <HAL_LTDC_IRQHandler+0xbc>
    {
      /* Disable the FIFO underrun interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 0202 	bic.w	r2, r2, #2
 80025a0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Clear the FIFO underrun flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2202      	movs	r2, #2
 80025a8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Update error code */
      hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80025b0:	f043 0202 	orr.w	r2, r3, #2
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_ERROR;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2204      	movs	r2, #4
 80025be:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
      
      /* Transfer error Callback */
      HAL_LTDC_ErrorCallback(hltdc);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f84e 	bl	800266c <HAL_LTDC_ErrorCallback>
    }
  }
  /* Line Interrupt management ************************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_LI) != RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d01d      	beq.n	800261a <HAL_LTDC_IRQHandler+0x106>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_LI) != RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d016      	beq.n	800261a <HAL_LTDC_IRQHandler+0x106>
    {
      /* Disable the Line interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 0201 	bic.w	r2, r2, #1
 80025fa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Clear the Line interrupt flag */  
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2201      	movs	r2, #1
 8002602:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_READY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

      /* Line interrupt Callback */
      HAL_LTDC_LineEventCallback(hltdc);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 f833 	bl	8002680 <HAL_LTDC_LineEventCallback>
    }
  }
  /* Register reload Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_RR) != RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002620:	f003 0308 	and.w	r3, r3, #8
 8002624:	2b00      	cmp	r3, #0
 8002626:	d01d      	beq.n	8002664 <HAL_LTDC_IRQHandler+0x150>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_RR) != RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800262e:	f003 0308 	and.w	r3, r3, #8
 8002632:	2b00      	cmp	r3, #0
 8002634:	d016      	beq.n	8002664 <HAL_LTDC_IRQHandler+0x150>
    {
      /* Disable the register reload interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 0208 	bic.w	r2, r2, #8
 8002644:	635a      	str	r2, [r3, #52]	@ 0x34
      
      /* Clear the register reload flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2208      	movs	r2, #8
 800264c:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
      
      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
      
      /* Register reload interrupt Callback */
      HAL_LTDC_ReloadEventCallback(hltdc);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f818 	bl	8002694 <HAL_LTDC_ReloadEventCallback>
    }
  }  
}
 8002664:	bf00      	nop
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 80026a8:	b5b0      	push	{r4, r5, r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d101      	bne.n	80026c2 <HAL_LTDC_ConfigLayer+0x1a>
 80026be:	2302      	movs	r3, #2
 80026c0:	e02c      	b.n	800271c <HAL_LTDC_ConfigLayer+0x74>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2202      	movs	r2, #2
 80026ce:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2134      	movs	r1, #52	@ 0x34
 80026d8:	fb01 f303 	mul.w	r3, r1, r3
 80026dc:	4413      	add	r3, r2
 80026de:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	4614      	mov	r4, r2
 80026e6:	461d      	mov	r5, r3
 80026e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026f4:	682b      	ldr	r3, [r5, #0]
 80026f6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	68b9      	ldr	r1, [r7, #8]
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f000 f855 	bl	80027ac <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2201      	movs	r2, #1
 8002708:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bdb0      	pop	{r4, r5, r7, pc}

08002724 <HAL_LTDC_SetAlpha>:
  *                   This parameter can be one of the following values:
  *                   0 or 1
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef *pLayerCfg;

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8002736:	2b01      	cmp	r3, #1
 8002738:	d101      	bne.n	800273e <HAL_LTDC_SetAlpha+0x1a>
 800273a:	2302      	movs	r3, #2
 800273c:	e024      	b.n	8002788 <HAL_LTDC_SetAlpha+0x64>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2202      	movs	r2, #2
 800274a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
  /* Check the parameters */
  assert_param(IS_LTDC_ALPHA(Alpha));
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2234      	movs	r2, #52	@ 0x34
 8002752:	fb02 f303 	mul.w	r3, r2, r3
 8002756:	3338      	adds	r3, #56	@ 0x38
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	4413      	add	r3, r2
 800275c:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	68ba      	ldr	r2, [r7, #8]
 8002762:	615a      	str	r2, [r3, #20]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	6979      	ldr	r1, [r7, #20]
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 f81f 	bl	80027ac <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2201      	movs	r2, #1
 8002774:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3718      	adds	r7, #24
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <HAL_LTDC_GetState>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800279e:	b2db      	uxtb	r3, r3
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                    This parameter can be one of the following values: 0 or 1
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b089      	sub	sp, #36	@ 0x24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 80027b8:	2300      	movs	r3, #0
 80027ba:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0;
 80027bc:	2300      	movs	r3, #0
 80027be:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0;
 80027c0:	2300      	movs	r3, #0
 80027c2:	617b      	str	r3, [r7, #20]

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	0c1b      	lsrs	r3, r3, #16
 80027d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d4:	4413      	add	r3, r2
 80027d6:	041b      	lsls	r3, r3, #16
 80027d8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	461a      	mov	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	01db      	lsls	r3, r3, #7
 80027e4:	4413      	add	r3, r2
 80027e6:	3384      	adds	r3, #132	@ 0x84
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	6812      	ldr	r2, [r2, #0]
 80027ee:	4611      	mov	r1, r2
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	01d2      	lsls	r2, r2, #7
 80027f4:	440a      	add	r2, r1
 80027f6:	3284      	adds	r2, #132	@ 0x84
 80027f8:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80027fc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	0c1b      	lsrs	r3, r3, #16
 800280a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800280e:	4413      	add	r3, r2
 8002810:	1c5a      	adds	r2, r3, #1
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4619      	mov	r1, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	01db      	lsls	r3, r3, #7
 800281c:	440b      	add	r3, r1
 800281e:	3384      	adds	r3, #132	@ 0x84
 8002820:	4619      	mov	r1, r3
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	4313      	orrs	r3, r2
 8002826:	604b      	str	r3, [r1, #4]

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	68da      	ldr	r2, [r3, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002836:	4413      	add	r3, r2
 8002838:	041b      	lsls	r3, r3, #16
 800283a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	461a      	mov	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	01db      	lsls	r3, r3, #7
 8002846:	4413      	add	r3, r2
 8002848:	3384      	adds	r3, #132	@ 0x84
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	6812      	ldr	r2, [r2, #0]
 8002850:	4611      	mov	r1, r2
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	01d2      	lsls	r2, r2, #7
 8002856:	440a      	add	r2, r1
 8002858:	3284      	adds	r2, #132	@ 0x84
 800285a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800285e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800286e:	4413      	add	r3, r2
 8002870:	1c5a      	adds	r2, r3, #1
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4619      	mov	r1, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	01db      	lsls	r3, r3, #7
 800287c:	440b      	add	r3, r1
 800287e:	3384      	adds	r3, #132	@ 0x84
 8002880:	4619      	mov	r1, r3
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	4313      	orrs	r3, r2
 8002886:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	461a      	mov	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	01db      	lsls	r3, r3, #7
 8002892:	4413      	add	r3, r2
 8002894:	3384      	adds	r3, #132	@ 0x84
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	6812      	ldr	r2, [r2, #0]
 800289c:	4611      	mov	r1, r2
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	01d2      	lsls	r2, r2, #7
 80028a2:	440a      	add	r2, r1
 80028a4:	3284      	adds	r2, #132	@ 0x84
 80028a6:	f023 0307 	bic.w	r3, r3, #7
 80028aa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	461a      	mov	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	01db      	lsls	r3, r3, #7
 80028b6:	4413      	add	r3, r2
 80028b8:	3384      	adds	r3, #132	@ 0x84
 80028ba:	461a      	mov	r2, r3
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	6113      	str	r3, [r2, #16]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80028c8:	021b      	lsls	r3, r3, #8
 80028ca:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80028d2:	041b      	lsls	r3, r3, #16
 80028d4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	061b      	lsls	r3, r3, #24
 80028dc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	461a      	mov	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	01db      	lsls	r3, r3, #7
 80028e8:	4413      	add	r3, r2
 80028ea:	3384      	adds	r3, #132	@ 0x84
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	461a      	mov	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	01db      	lsls	r3, r3, #7
 80028f8:	4413      	add	r3, r2
 80028fa:	3384      	adds	r3, #132	@ 0x84
 80028fc:	461a      	mov	r2, r3
 80028fe:	2300      	movs	r3, #0
 8002900:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002908:	461a      	mov	r2, r3
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	431a      	orrs	r2, r3
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	431a      	orrs	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4619      	mov	r1, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	01db      	lsls	r3, r3, #7
 800291c:	440b      	add	r3, r1
 800291e:	3384      	adds	r3, #132	@ 0x84
 8002920:	4619      	mov	r1, r3
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	4313      	orrs	r3, r2
 8002926:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	461a      	mov	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	01db      	lsls	r3, r3, #7
 8002932:	4413      	add	r3, r2
 8002934:	3384      	adds	r3, #132	@ 0x84
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	6812      	ldr	r2, [r2, #0]
 800293c:	4611      	mov	r1, r2
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	01d2      	lsls	r2, r2, #7
 8002942:	440a      	add	r2, r1
 8002944:	3284      	adds	r2, #132	@ 0x84
 8002946:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800294a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	461a      	mov	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	01db      	lsls	r3, r3, #7
 8002956:	4413      	add	r3, r2
 8002958:	3384      	adds	r3, #132	@ 0x84
 800295a:	461a      	mov	r2, r3
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	01db      	lsls	r3, r3, #7
 800296c:	4413      	add	r3, r2
 800296e:	3384      	adds	r3, #132	@ 0x84
 8002970:	69da      	ldr	r2, [r3, #28]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4619      	mov	r1, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	01db      	lsls	r3, r3, #7
 800297c:	440b      	add	r3, r1
 800297e:	3384      	adds	r3, #132	@ 0x84
 8002980:	4619      	mov	r1, r3
 8002982:	4b58      	ldr	r3, [pc, #352]	@ (8002ae4 <LTDC_SetConfig+0x338>)
 8002984:	4013      	ands	r3, r2
 8002986:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	69da      	ldr	r2, [r3, #28]
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	68f9      	ldr	r1, [r7, #12]
 8002992:	6809      	ldr	r1, [r1, #0]
 8002994:	4608      	mov	r0, r1
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	01c9      	lsls	r1, r1, #7
 800299a:	4401      	add	r1, r0
 800299c:	3184      	adds	r1, #132	@ 0x84
 800299e:	4313      	orrs	r3, r2
 80029a0:	61cb      	str	r3, [r1, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	461a      	mov	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	01db      	lsls	r3, r3, #7
 80029ac:	4413      	add	r3, r2
 80029ae:	3384      	adds	r3, #132	@ 0x84
 80029b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	461a      	mov	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	01db      	lsls	r3, r3, #7
 80029bc:	4413      	add	r3, r2
 80029be:	3384      	adds	r3, #132	@ 0x84
 80029c0:	461a      	mov	r2, r3
 80029c2:	2300      	movs	r3, #0
 80029c4:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	461a      	mov	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	01db      	lsls	r3, r3, #7
 80029d0:	4413      	add	r3, r2
 80029d2:	3384      	adds	r3, #132	@ 0x84
 80029d4:	461a      	mov	r2, r3
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029da:	6293      	str	r3, [r2, #40]	@ 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d102      	bne.n	80029ea <LTDC_SetConfig+0x23e>
  {
    tmp = 4;
 80029e4:	2304      	movs	r3, #4
 80029e6:	61fb      	str	r3, [r7, #28]
 80029e8:	e01b      	b.n	8002a22 <LTDC_SetConfig+0x276>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d102      	bne.n	80029f8 <LTDC_SetConfig+0x24c>
  {
    tmp = 3;
 80029f2:	2303      	movs	r3, #3
 80029f4:	61fb      	str	r3, [r7, #28]
 80029f6:	e014      	b.n	8002a22 <LTDC_SetConfig+0x276>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	2b04      	cmp	r3, #4
 80029fe:	d00b      	beq.n	8002a18 <LTDC_SetConfig+0x26c>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d007      	beq.n	8002a18 <LTDC_SetConfig+0x26c>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002a0c:	2b03      	cmp	r3, #3
 8002a0e:	d003      	beq.n	8002a18 <LTDC_SetConfig+0x26c>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002a14:	2b07      	cmp	r3, #7
 8002a16:	d102      	bne.n	8002a1e <LTDC_SetConfig+0x272>
  {
    tmp = 2;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	61fb      	str	r3, [r7, #28]
 8002a1c:	e001      	b.n	8002a22 <LTDC_SetConfig+0x276>
  }
  else
  {
    tmp = 1;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	61fb      	str	r3, [r7, #28]
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	01db      	lsls	r3, r3, #7
 8002a2c:	4413      	add	r3, r2
 8002a2e:	3384      	adds	r3, #132	@ 0x84
 8002a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	6812      	ldr	r2, [r2, #0]
 8002a36:	4611      	mov	r1, r2
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	01d2      	lsls	r2, r2, #7
 8002a3c:	440a      	add	r2, r1
 8002a3e:	3284      	adds	r2, #132	@ 0x84
 8002a40:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8002a44:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a4a:	69fa      	ldr	r2, [r7, #28]
 8002a4c:	fb02 f303 	mul.w	r3, r2, r3
 8002a50:	041a      	lsls	r2, r3, #16
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	6859      	ldr	r1, [r3, #4]
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	1acb      	subs	r3, r1, r3
 8002a5c:	69f9      	ldr	r1, [r7, #28]
 8002a5e:	fb01 f303 	mul.w	r3, r1, r3
 8002a62:	3303      	adds	r3, #3
 8002a64:	68f9      	ldr	r1, [r7, #12]
 8002a66:	6809      	ldr	r1, [r1, #0]
 8002a68:	4608      	mov	r0, r1
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	01c9      	lsls	r1, r1, #7
 8002a6e:	4401      	add	r1, r0
 8002a70:	3184      	adds	r1, #132	@ 0x84
 8002a72:	4313      	orrs	r3, r2
 8002a74:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	01db      	lsls	r3, r3, #7
 8002a80:	4413      	add	r3, r2
 8002a82:	3384      	adds	r3, #132	@ 0x84
 8002a84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	01db      	lsls	r3, r3, #7
 8002a90:	440b      	add	r3, r1
 8002a92:	3384      	adds	r3, #132	@ 0x84
 8002a94:	4619      	mov	r1, r3
 8002a96:	4b14      	ldr	r3, [pc, #80]	@ (8002ae8 <LTDC_SetConfig+0x33c>)
 8002a98:	4013      	ands	r3, r2
 8002a9a:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	01db      	lsls	r3, r3, #7
 8002aa6:	4413      	add	r3, r2
 8002aa8:	3384      	adds	r3, #132	@ 0x84
 8002aaa:	461a      	mov	r2, r3
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	01db      	lsls	r3, r3, #7
 8002abc:	4413      	add	r3, r2
 8002abe:	3384      	adds	r3, #132	@ 0x84
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	6812      	ldr	r2, [r2, #0]
 8002ac6:	4611      	mov	r1, r2
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	01d2      	lsls	r2, r2, #7
 8002acc:	440a      	add	r2, r1
 8002ace:	3284      	adds	r2, #132	@ 0x84
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	6013      	str	r3, [r2, #0]
}
 8002ad6:	bf00      	nop
 8002ad8:	3724      	adds	r7, #36	@ 0x24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	fffff8f8 	.word	0xfffff8f8
 8002ae8:	fffff800 	.word	0xfffff800

08002aec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002af2:	2300      	movs	r3, #0
 8002af4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002af6:	4b23      	ldr	r3, [pc, #140]	@ (8002b84 <HAL_PWREx_EnableOverDrive+0x98>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afa:	4a22      	ldr	r2, [pc, #136]	@ (8002b84 <HAL_PWREx_EnableOverDrive+0x98>)
 8002afc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b00:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b02:	4b20      	ldr	r3, [pc, #128]	@ (8002b84 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002b0e:	4b1e      	ldr	r3, [pc, #120]	@ (8002b88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a1d      	ldr	r2, [pc, #116]	@ (8002b88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b18:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b1a:	f7fe fbc1 	bl	80012a0 <HAL_GetTick>
 8002b1e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b20:	e009      	b.n	8002b36 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b22:	f7fe fbbd 	bl	80012a0 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b30:	d901      	bls.n	8002b36 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e022      	b.n	8002b7c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b36:	4b14      	ldr	r3, [pc, #80]	@ (8002b88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b42:	d1ee      	bne.n	8002b22 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b44:	4b10      	ldr	r3, [pc, #64]	@ (8002b88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a0f      	ldr	r2, [pc, #60]	@ (8002b88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b4e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b50:	f7fe fba6 	bl	80012a0 <HAL_GetTick>
 8002b54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b56:	e009      	b.n	8002b6c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b58:	f7fe fba2 	bl	80012a0 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b66:	d901      	bls.n	8002b6c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e007      	b.n	8002b7c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b6c:	4b06      	ldr	r3, [pc, #24]	@ (8002b88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b78:	d1ee      	bne.n	8002b58 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3708      	adds	r7, #8
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40023800 	.word	0x40023800
 8002b88:	40007000 	.word	0x40007000

08002b8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002b94:	2300      	movs	r3, #0
 8002b96:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e291      	b.n	80030c6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 8087 	beq.w	8002cbe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bb0:	4b96      	ldr	r3, [pc, #600]	@ (8002e0c <HAL_RCC_OscConfig+0x280>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f003 030c 	and.w	r3, r3, #12
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d00c      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bbc:	4b93      	ldr	r3, [pc, #588]	@ (8002e0c <HAL_RCC_OscConfig+0x280>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f003 030c 	and.w	r3, r3, #12
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	d112      	bne.n	8002bee <HAL_RCC_OscConfig+0x62>
 8002bc8:	4b90      	ldr	r3, [pc, #576]	@ (8002e0c <HAL_RCC_OscConfig+0x280>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bd4:	d10b      	bne.n	8002bee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd6:	4b8d      	ldr	r3, [pc, #564]	@ (8002e0c <HAL_RCC_OscConfig+0x280>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d06c      	beq.n	8002cbc <HAL_RCC_OscConfig+0x130>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d168      	bne.n	8002cbc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e26b      	b.n	80030c6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bf6:	d106      	bne.n	8002c06 <HAL_RCC_OscConfig+0x7a>
 8002bf8:	4b84      	ldr	r3, [pc, #528]	@ (8002e0c <HAL_RCC_OscConfig+0x280>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a83      	ldr	r2, [pc, #524]	@ (8002e0c <HAL_RCC_OscConfig+0x280>)
 8002bfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c02:	6013      	str	r3, [r2, #0]
 8002c04:	e02e      	b.n	8002c64 <HAL_RCC_OscConfig+0xd8>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10c      	bne.n	8002c28 <HAL_RCC_OscConfig+0x9c>
 8002c0e:	4b7f      	ldr	r3, [pc, #508]	@ (8002e0c <HAL_RCC_OscConfig+0x280>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a7e      	ldr	r2, [pc, #504]	@ (8002e0c <HAL_RCC_OscConfig+0x280>)
 8002c14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	4b7c      	ldr	r3, [pc, #496]	@ (8002e0c <HAL_RCC_OscConfig+0x280>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a7b      	ldr	r2, [pc, #492]	@ (8002e0c <HAL_RCC_OscConfig+0x280>)
 8002c20:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	e01d      	b.n	8002c64 <HAL_RCC_OscConfig+0xd8>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c30:	d10c      	bne.n	8002c4c <HAL_RCC_OscConfig+0xc0>
 8002c32:	4b76      	ldr	r3, [pc, #472]	@ (8002e0c <HAL_RCC_OscConfig+0x280>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a75      	ldr	r2, [pc, #468]	@ (8002e0c <HAL_RCC_OscConfig+0x280>)
 8002c38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c3c:	6013      	str	r3, [r2, #0]
 8002c3e:	4b73      	ldr	r3, [pc, #460]	@ (8002e0c <HAL_RCC_OscConfig+0x280>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a72      	ldr	r2, [pc, #456]	@ (8002e0c <HAL_RCC_OscConfig+0x280>)
 8002c44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c48:	6013      	str	r3, [r2, #0]
 8002c4a:	e00b      	b.n	8002c64 <HAL_RCC_OscConfig+0xd8>
 8002c4c:	4b6f      	ldr	r3, [pc, #444]	@ (8002e0c <HAL_RCC_OscConfig+0x280>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a6e      	ldr	r2, [pc, #440]	@ (8002e0c <HAL_RCC_OscConfig+0x280>)
 8002c52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c56:	6013      	str	r3, [r2, #0]
 8002c58:	4b6c      	ldr	r3, [pc, #432]	@ (8002e0c <HAL_RCC_OscConfig+0x280>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a6b      	ldr	r2, [pc, #428]	@ (8002e0c <HAL_RCC_OscConfig+0x280>)
 8002c5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d013      	beq.n	8002c94 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6c:	f7fe fb18 	bl	80012a0 <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c72:	e008      	b.n	8002c86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c74:	f7fe fb14 	bl	80012a0 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b64      	cmp	r3, #100	@ 0x64
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e21f      	b.n	80030c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c86:	4b61      	ldr	r3, [pc, #388]	@ (8002e0c <HAL_RCC_OscConfig+0x280>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d0f0      	beq.n	8002c74 <HAL_RCC_OscConfig+0xe8>
 8002c92:	e014      	b.n	8002cbe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c94:	f7fe fb04 	bl	80012a0 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c9c:	f7fe fb00 	bl	80012a0 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b64      	cmp	r3, #100	@ 0x64
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e20b      	b.n	80030c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cae:	4b57      	ldr	r3, [pc, #348]	@ (8002e0c <HAL_RCC_OscConfig+0x280>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1f0      	bne.n	8002c9c <HAL_RCC_OscConfig+0x110>
 8002cba:	e000      	b.n	8002cbe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d069      	beq.n	8002d9e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cca:	4b50      	ldr	r3, [pc, #320]	@ (8002e0c <HAL_RCC_OscConfig+0x280>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 030c 	and.w	r3, r3, #12
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00b      	beq.n	8002cee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cd6:	4b4d      	ldr	r3, [pc, #308]	@ (8002e0c <HAL_RCC_OscConfig+0x280>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f003 030c 	and.w	r3, r3, #12
 8002cde:	2b08      	cmp	r3, #8
 8002ce0:	d11c      	bne.n	8002d1c <HAL_RCC_OscConfig+0x190>
 8002ce2:	4b4a      	ldr	r3, [pc, #296]	@ (8002e0c <HAL_RCC_OscConfig+0x280>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d116      	bne.n	8002d1c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cee:	4b47      	ldr	r3, [pc, #284]	@ (8002e0c <HAL_RCC_OscConfig+0x280>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d005      	beq.n	8002d06 <HAL_RCC_OscConfig+0x17a>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d001      	beq.n	8002d06 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e1df      	b.n	80030c6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d06:	4b41      	ldr	r3, [pc, #260]	@ (8002e0c <HAL_RCC_OscConfig+0x280>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	493d      	ldr	r1, [pc, #244]	@ (8002e0c <HAL_RCC_OscConfig+0x280>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d1a:	e040      	b.n	8002d9e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d023      	beq.n	8002d6c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d24:	4b39      	ldr	r3, [pc, #228]	@ (8002e0c <HAL_RCC_OscConfig+0x280>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a38      	ldr	r2, [pc, #224]	@ (8002e0c <HAL_RCC_OscConfig+0x280>)
 8002d2a:	f043 0301 	orr.w	r3, r3, #1
 8002d2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d30:	f7fe fab6 	bl	80012a0 <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d38:	f7fe fab2 	bl	80012a0 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e1bd      	b.n	80030c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4a:	4b30      	ldr	r3, [pc, #192]	@ (8002e0c <HAL_RCC_OscConfig+0x280>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0f0      	beq.n	8002d38 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d56:	4b2d      	ldr	r3, [pc, #180]	@ (8002e0c <HAL_RCC_OscConfig+0x280>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	4929      	ldr	r1, [pc, #164]	@ (8002e0c <HAL_RCC_OscConfig+0x280>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	600b      	str	r3, [r1, #0]
 8002d6a:	e018      	b.n	8002d9e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d6c:	4b27      	ldr	r3, [pc, #156]	@ (8002e0c <HAL_RCC_OscConfig+0x280>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a26      	ldr	r2, [pc, #152]	@ (8002e0c <HAL_RCC_OscConfig+0x280>)
 8002d72:	f023 0301 	bic.w	r3, r3, #1
 8002d76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d78:	f7fe fa92 	bl	80012a0 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d80:	f7fe fa8e 	bl	80012a0 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e199      	b.n	80030c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d92:	4b1e      	ldr	r3, [pc, #120]	@ (8002e0c <HAL_RCC_OscConfig+0x280>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1f0      	bne.n	8002d80 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0308 	and.w	r3, r3, #8
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d038      	beq.n	8002e1c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d019      	beq.n	8002de6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002db2:	4b16      	ldr	r3, [pc, #88]	@ (8002e0c <HAL_RCC_OscConfig+0x280>)
 8002db4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002db6:	4a15      	ldr	r2, [pc, #84]	@ (8002e0c <HAL_RCC_OscConfig+0x280>)
 8002db8:	f043 0301 	orr.w	r3, r3, #1
 8002dbc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dbe:	f7fe fa6f 	bl	80012a0 <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dc6:	f7fe fa6b 	bl	80012a0 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e176      	b.n	80030c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8002e0c <HAL_RCC_OscConfig+0x280>)
 8002dda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d0f0      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x23a>
 8002de4:	e01a      	b.n	8002e1c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002de6:	4b09      	ldr	r3, [pc, #36]	@ (8002e0c <HAL_RCC_OscConfig+0x280>)
 8002de8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dea:	4a08      	ldr	r2, [pc, #32]	@ (8002e0c <HAL_RCC_OscConfig+0x280>)
 8002dec:	f023 0301 	bic.w	r3, r3, #1
 8002df0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df2:	f7fe fa55 	bl	80012a0 <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002df8:	e00a      	b.n	8002e10 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dfa:	f7fe fa51 	bl	80012a0 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d903      	bls.n	8002e10 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e15c      	b.n	80030c6 <HAL_RCC_OscConfig+0x53a>
 8002e0c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e10:	4b91      	ldr	r3, [pc, #580]	@ (8003058 <HAL_RCC_OscConfig+0x4cc>)
 8002e12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1ee      	bne.n	8002dfa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 80a4 	beq.w	8002f72 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e2a:	4b8b      	ldr	r3, [pc, #556]	@ (8003058 <HAL_RCC_OscConfig+0x4cc>)
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10d      	bne.n	8002e52 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e36:	4b88      	ldr	r3, [pc, #544]	@ (8003058 <HAL_RCC_OscConfig+0x4cc>)
 8002e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3a:	4a87      	ldr	r2, [pc, #540]	@ (8003058 <HAL_RCC_OscConfig+0x4cc>)
 8002e3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e40:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e42:	4b85      	ldr	r3, [pc, #532]	@ (8003058 <HAL_RCC_OscConfig+0x4cc>)
 8002e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e4a:	60bb      	str	r3, [r7, #8]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e52:	4b82      	ldr	r3, [pc, #520]	@ (800305c <HAL_RCC_OscConfig+0x4d0>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d118      	bne.n	8002e90 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002e5e:	4b7f      	ldr	r3, [pc, #508]	@ (800305c <HAL_RCC_OscConfig+0x4d0>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a7e      	ldr	r2, [pc, #504]	@ (800305c <HAL_RCC_OscConfig+0x4d0>)
 8002e64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e6a:	f7fe fa19 	bl	80012a0 <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e70:	e008      	b.n	8002e84 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e72:	f7fe fa15 	bl	80012a0 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b64      	cmp	r3, #100	@ 0x64
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e120      	b.n	80030c6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e84:	4b75      	ldr	r3, [pc, #468]	@ (800305c <HAL_RCC_OscConfig+0x4d0>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0f0      	beq.n	8002e72 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d106      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x31a>
 8002e98:	4b6f      	ldr	r3, [pc, #444]	@ (8003058 <HAL_RCC_OscConfig+0x4cc>)
 8002e9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e9c:	4a6e      	ldr	r2, [pc, #440]	@ (8003058 <HAL_RCC_OscConfig+0x4cc>)
 8002e9e:	f043 0301 	orr.w	r3, r3, #1
 8002ea2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ea4:	e02d      	b.n	8002f02 <HAL_RCC_OscConfig+0x376>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10c      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x33c>
 8002eae:	4b6a      	ldr	r3, [pc, #424]	@ (8003058 <HAL_RCC_OscConfig+0x4cc>)
 8002eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eb2:	4a69      	ldr	r2, [pc, #420]	@ (8003058 <HAL_RCC_OscConfig+0x4cc>)
 8002eb4:	f023 0301 	bic.w	r3, r3, #1
 8002eb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eba:	4b67      	ldr	r3, [pc, #412]	@ (8003058 <HAL_RCC_OscConfig+0x4cc>)
 8002ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ebe:	4a66      	ldr	r2, [pc, #408]	@ (8003058 <HAL_RCC_OscConfig+0x4cc>)
 8002ec0:	f023 0304 	bic.w	r3, r3, #4
 8002ec4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ec6:	e01c      	b.n	8002f02 <HAL_RCC_OscConfig+0x376>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	2b05      	cmp	r3, #5
 8002ece:	d10c      	bne.n	8002eea <HAL_RCC_OscConfig+0x35e>
 8002ed0:	4b61      	ldr	r3, [pc, #388]	@ (8003058 <HAL_RCC_OscConfig+0x4cc>)
 8002ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ed4:	4a60      	ldr	r2, [pc, #384]	@ (8003058 <HAL_RCC_OscConfig+0x4cc>)
 8002ed6:	f043 0304 	orr.w	r3, r3, #4
 8002eda:	6713      	str	r3, [r2, #112]	@ 0x70
 8002edc:	4b5e      	ldr	r3, [pc, #376]	@ (8003058 <HAL_RCC_OscConfig+0x4cc>)
 8002ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee0:	4a5d      	ldr	r2, [pc, #372]	@ (8003058 <HAL_RCC_OscConfig+0x4cc>)
 8002ee2:	f043 0301 	orr.w	r3, r3, #1
 8002ee6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ee8:	e00b      	b.n	8002f02 <HAL_RCC_OscConfig+0x376>
 8002eea:	4b5b      	ldr	r3, [pc, #364]	@ (8003058 <HAL_RCC_OscConfig+0x4cc>)
 8002eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eee:	4a5a      	ldr	r2, [pc, #360]	@ (8003058 <HAL_RCC_OscConfig+0x4cc>)
 8002ef0:	f023 0301 	bic.w	r3, r3, #1
 8002ef4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ef6:	4b58      	ldr	r3, [pc, #352]	@ (8003058 <HAL_RCC_OscConfig+0x4cc>)
 8002ef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002efa:	4a57      	ldr	r2, [pc, #348]	@ (8003058 <HAL_RCC_OscConfig+0x4cc>)
 8002efc:	f023 0304 	bic.w	r3, r3, #4
 8002f00:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d015      	beq.n	8002f36 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f0a:	f7fe f9c9 	bl	80012a0 <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f10:	e00a      	b.n	8002f28 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f12:	f7fe f9c5 	bl	80012a0 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e0ce      	b.n	80030c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f28:	4b4b      	ldr	r3, [pc, #300]	@ (8003058 <HAL_RCC_OscConfig+0x4cc>)
 8002f2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0ee      	beq.n	8002f12 <HAL_RCC_OscConfig+0x386>
 8002f34:	e014      	b.n	8002f60 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f36:	f7fe f9b3 	bl	80012a0 <HAL_GetTick>
 8002f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f3c:	e00a      	b.n	8002f54 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f3e:	f7fe f9af 	bl	80012a0 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e0b8      	b.n	80030c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f54:	4b40      	ldr	r3, [pc, #256]	@ (8003058 <HAL_RCC_OscConfig+0x4cc>)
 8002f56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1ee      	bne.n	8002f3e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f60:	7dfb      	ldrb	r3, [r7, #23]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d105      	bne.n	8002f72 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f66:	4b3c      	ldr	r3, [pc, #240]	@ (8003058 <HAL_RCC_OscConfig+0x4cc>)
 8002f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6a:	4a3b      	ldr	r2, [pc, #236]	@ (8003058 <HAL_RCC_OscConfig+0x4cc>)
 8002f6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f70:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f000 80a4 	beq.w	80030c4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f7c:	4b36      	ldr	r3, [pc, #216]	@ (8003058 <HAL_RCC_OscConfig+0x4cc>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f003 030c 	and.w	r3, r3, #12
 8002f84:	2b08      	cmp	r3, #8
 8002f86:	d06b      	beq.n	8003060 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d149      	bne.n	8003024 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f90:	4b31      	ldr	r3, [pc, #196]	@ (8003058 <HAL_RCC_OscConfig+0x4cc>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a30      	ldr	r2, [pc, #192]	@ (8003058 <HAL_RCC_OscConfig+0x4cc>)
 8002f96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9c:	f7fe f980 	bl	80012a0 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa4:	f7fe f97c 	bl	80012a0 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e087      	b.n	80030c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb6:	4b28      	ldr	r3, [pc, #160]	@ (8003058 <HAL_RCC_OscConfig+0x4cc>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1f0      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69da      	ldr	r2, [r3, #28]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd0:	019b      	lsls	r3, r3, #6
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fd8:	085b      	lsrs	r3, r3, #1
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	041b      	lsls	r3, r3, #16
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe4:	061b      	lsls	r3, r3, #24
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	4a1b      	ldr	r2, [pc, #108]	@ (8003058 <HAL_RCC_OscConfig+0x4cc>)
 8002fea:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002fee:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ff0:	4b19      	ldr	r3, [pc, #100]	@ (8003058 <HAL_RCC_OscConfig+0x4cc>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a18      	ldr	r2, [pc, #96]	@ (8003058 <HAL_RCC_OscConfig+0x4cc>)
 8002ff6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ffa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffc:	f7fe f950 	bl	80012a0 <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003004:	f7fe f94c 	bl	80012a0 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e057      	b.n	80030c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003016:	4b10      	ldr	r3, [pc, #64]	@ (8003058 <HAL_RCC_OscConfig+0x4cc>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0f0      	beq.n	8003004 <HAL_RCC_OscConfig+0x478>
 8003022:	e04f      	b.n	80030c4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003024:	4b0c      	ldr	r3, [pc, #48]	@ (8003058 <HAL_RCC_OscConfig+0x4cc>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a0b      	ldr	r2, [pc, #44]	@ (8003058 <HAL_RCC_OscConfig+0x4cc>)
 800302a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800302e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003030:	f7fe f936 	bl	80012a0 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003038:	f7fe f932 	bl	80012a0 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e03d      	b.n	80030c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800304a:	4b03      	ldr	r3, [pc, #12]	@ (8003058 <HAL_RCC_OscConfig+0x4cc>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1f0      	bne.n	8003038 <HAL_RCC_OscConfig+0x4ac>
 8003056:	e035      	b.n	80030c4 <HAL_RCC_OscConfig+0x538>
 8003058:	40023800 	.word	0x40023800
 800305c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003060:	4b1b      	ldr	r3, [pc, #108]	@ (80030d0 <HAL_RCC_OscConfig+0x544>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d028      	beq.n	80030c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003078:	429a      	cmp	r2, r3
 800307a:	d121      	bne.n	80030c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003086:	429a      	cmp	r2, r3
 8003088:	d11a      	bne.n	80030c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003090:	4013      	ands	r3, r2
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003096:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003098:	4293      	cmp	r3, r2
 800309a:	d111      	bne.n	80030c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a6:	085b      	lsrs	r3, r3, #1
 80030a8:	3b01      	subs	r3, #1
 80030aa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d107      	bne.n	80030c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030bc:	429a      	cmp	r2, r3
 80030be:	d001      	beq.n	80030c4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e000      	b.n	80030c6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40023800 	.word	0x40023800

080030d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80030de:	2300      	movs	r3, #0
 80030e0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d101      	bne.n	80030ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e0d0      	b.n	800328e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030ec:	4b6a      	ldr	r3, [pc, #424]	@ (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 030f 	and.w	r3, r3, #15
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d910      	bls.n	800311c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030fa:	4b67      	ldr	r3, [pc, #412]	@ (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f023 020f 	bic.w	r2, r3, #15
 8003102:	4965      	ldr	r1, [pc, #404]	@ (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	4313      	orrs	r3, r2
 8003108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800310a:	4b63      	ldr	r3, [pc, #396]	@ (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	429a      	cmp	r2, r3
 8003116:	d001      	beq.n	800311c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e0b8      	b.n	800328e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d020      	beq.n	800316a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b00      	cmp	r3, #0
 8003132:	d005      	beq.n	8003140 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003134:	4b59      	ldr	r3, [pc, #356]	@ (800329c <HAL_RCC_ClockConfig+0x1c8>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	4a58      	ldr	r2, [pc, #352]	@ (800329c <HAL_RCC_ClockConfig+0x1c8>)
 800313a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800313e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0308 	and.w	r3, r3, #8
 8003148:	2b00      	cmp	r3, #0
 800314a:	d005      	beq.n	8003158 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800314c:	4b53      	ldr	r3, [pc, #332]	@ (800329c <HAL_RCC_ClockConfig+0x1c8>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	4a52      	ldr	r2, [pc, #328]	@ (800329c <HAL_RCC_ClockConfig+0x1c8>)
 8003152:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003156:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003158:	4b50      	ldr	r3, [pc, #320]	@ (800329c <HAL_RCC_ClockConfig+0x1c8>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	494d      	ldr	r1, [pc, #308]	@ (800329c <HAL_RCC_ClockConfig+0x1c8>)
 8003166:	4313      	orrs	r3, r2
 8003168:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b00      	cmp	r3, #0
 8003174:	d040      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d107      	bne.n	800318e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800317e:	4b47      	ldr	r3, [pc, #284]	@ (800329c <HAL_RCC_ClockConfig+0x1c8>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d115      	bne.n	80031b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e07f      	b.n	800328e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2b02      	cmp	r3, #2
 8003194:	d107      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003196:	4b41      	ldr	r3, [pc, #260]	@ (800329c <HAL_RCC_ClockConfig+0x1c8>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d109      	bne.n	80031b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e073      	b.n	800328e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a6:	4b3d      	ldr	r3, [pc, #244]	@ (800329c <HAL_RCC_ClockConfig+0x1c8>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e06b      	b.n	800328e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031b6:	4b39      	ldr	r3, [pc, #228]	@ (800329c <HAL_RCC_ClockConfig+0x1c8>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f023 0203 	bic.w	r2, r3, #3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	4936      	ldr	r1, [pc, #216]	@ (800329c <HAL_RCC_ClockConfig+0x1c8>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031c8:	f7fe f86a 	bl	80012a0 <HAL_GetTick>
 80031cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ce:	e00a      	b.n	80031e6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031d0:	f7fe f866 	bl	80012a0 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031de:	4293      	cmp	r3, r2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e053      	b.n	800328e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e6:	4b2d      	ldr	r3, [pc, #180]	@ (800329c <HAL_RCC_ClockConfig+0x1c8>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 020c 	and.w	r2, r3, #12
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d1eb      	bne.n	80031d0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031f8:	4b27      	ldr	r3, [pc, #156]	@ (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 030f 	and.w	r3, r3, #15
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	429a      	cmp	r2, r3
 8003204:	d210      	bcs.n	8003228 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003206:	4b24      	ldr	r3, [pc, #144]	@ (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f023 020f 	bic.w	r2, r3, #15
 800320e:	4922      	ldr	r1, [pc, #136]	@ (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	4313      	orrs	r3, r2
 8003214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003216:	4b20      	ldr	r3, [pc, #128]	@ (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	429a      	cmp	r2, r3
 8003222:	d001      	beq.n	8003228 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e032      	b.n	800328e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b00      	cmp	r3, #0
 8003232:	d008      	beq.n	8003246 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003234:	4b19      	ldr	r3, [pc, #100]	@ (800329c <HAL_RCC_ClockConfig+0x1c8>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	4916      	ldr	r1, [pc, #88]	@ (800329c <HAL_RCC_ClockConfig+0x1c8>)
 8003242:	4313      	orrs	r3, r2
 8003244:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0308 	and.w	r3, r3, #8
 800324e:	2b00      	cmp	r3, #0
 8003250:	d009      	beq.n	8003266 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003252:	4b12      	ldr	r3, [pc, #72]	@ (800329c <HAL_RCC_ClockConfig+0x1c8>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	490e      	ldr	r1, [pc, #56]	@ (800329c <HAL_RCC_ClockConfig+0x1c8>)
 8003262:	4313      	orrs	r3, r2
 8003264:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003266:	f000 f821 	bl	80032ac <HAL_RCC_GetSysClockFreq>
 800326a:	4602      	mov	r2, r0
 800326c:	4b0b      	ldr	r3, [pc, #44]	@ (800329c <HAL_RCC_ClockConfig+0x1c8>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	091b      	lsrs	r3, r3, #4
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	490a      	ldr	r1, [pc, #40]	@ (80032a0 <HAL_RCC_ClockConfig+0x1cc>)
 8003278:	5ccb      	ldrb	r3, [r1, r3]
 800327a:	fa22 f303 	lsr.w	r3, r2, r3
 800327e:	4a09      	ldr	r2, [pc, #36]	@ (80032a4 <HAL_RCC_ClockConfig+0x1d0>)
 8003280:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003282:	4b09      	ldr	r3, [pc, #36]	@ (80032a8 <HAL_RCC_ClockConfig+0x1d4>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f7fd ffc6 	bl	8001218 <HAL_InitTick>

  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	40023c00 	.word	0x40023c00
 800329c:	40023800 	.word	0x40023800
 80032a0:	0800a318 	.word	0x0800a318
 80032a4:	20000004 	.word	0x20000004
 80032a8:	20000008 	.word	0x20000008

080032ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032b0:	b090      	sub	sp, #64	@ 0x40
 80032b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80032b4:	2300      	movs	r3, #0
 80032b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80032b8:	2300      	movs	r3, #0
 80032ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032bc:	2300      	movs	r3, #0
 80032be:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80032c0:	2300      	movs	r3, #0
 80032c2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032c4:	4b59      	ldr	r3, [pc, #356]	@ (800342c <HAL_RCC_GetSysClockFreq+0x180>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f003 030c 	and.w	r3, r3, #12
 80032cc:	2b08      	cmp	r3, #8
 80032ce:	d00d      	beq.n	80032ec <HAL_RCC_GetSysClockFreq+0x40>
 80032d0:	2b08      	cmp	r3, #8
 80032d2:	f200 80a1 	bhi.w	8003418 <HAL_RCC_GetSysClockFreq+0x16c>
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d002      	beq.n	80032e0 <HAL_RCC_GetSysClockFreq+0x34>
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d003      	beq.n	80032e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80032de:	e09b      	b.n	8003418 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032e0:	4b53      	ldr	r3, [pc, #332]	@ (8003430 <HAL_RCC_GetSysClockFreq+0x184>)
 80032e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80032e4:	e09b      	b.n	800341e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032e6:	4b53      	ldr	r3, [pc, #332]	@ (8003434 <HAL_RCC_GetSysClockFreq+0x188>)
 80032e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80032ea:	e098      	b.n	800341e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032ec:	4b4f      	ldr	r3, [pc, #316]	@ (800342c <HAL_RCC_GetSysClockFreq+0x180>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032f4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80032f6:	4b4d      	ldr	r3, [pc, #308]	@ (800342c <HAL_RCC_GetSysClockFreq+0x180>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d028      	beq.n	8003354 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003302:	4b4a      	ldr	r3, [pc, #296]	@ (800342c <HAL_RCC_GetSysClockFreq+0x180>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	099b      	lsrs	r3, r3, #6
 8003308:	2200      	movs	r2, #0
 800330a:	623b      	str	r3, [r7, #32]
 800330c:	627a      	str	r2, [r7, #36]	@ 0x24
 800330e:	6a3b      	ldr	r3, [r7, #32]
 8003310:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003314:	2100      	movs	r1, #0
 8003316:	4b47      	ldr	r3, [pc, #284]	@ (8003434 <HAL_RCC_GetSysClockFreq+0x188>)
 8003318:	fb03 f201 	mul.w	r2, r3, r1
 800331c:	2300      	movs	r3, #0
 800331e:	fb00 f303 	mul.w	r3, r0, r3
 8003322:	4413      	add	r3, r2
 8003324:	4a43      	ldr	r2, [pc, #268]	@ (8003434 <HAL_RCC_GetSysClockFreq+0x188>)
 8003326:	fba0 1202 	umull	r1, r2, r0, r2
 800332a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800332c:	460a      	mov	r2, r1
 800332e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003330:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003332:	4413      	add	r3, r2
 8003334:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003338:	2200      	movs	r2, #0
 800333a:	61bb      	str	r3, [r7, #24]
 800333c:	61fa      	str	r2, [r7, #28]
 800333e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003342:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003346:	f7fc ffb3 	bl	80002b0 <__aeabi_uldivmod>
 800334a:	4602      	mov	r2, r0
 800334c:	460b      	mov	r3, r1
 800334e:	4613      	mov	r3, r2
 8003350:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003352:	e053      	b.n	80033fc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003354:	4b35      	ldr	r3, [pc, #212]	@ (800342c <HAL_RCC_GetSysClockFreq+0x180>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	099b      	lsrs	r3, r3, #6
 800335a:	2200      	movs	r2, #0
 800335c:	613b      	str	r3, [r7, #16]
 800335e:	617a      	str	r2, [r7, #20]
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003366:	f04f 0b00 	mov.w	fp, #0
 800336a:	4652      	mov	r2, sl
 800336c:	465b      	mov	r3, fp
 800336e:	f04f 0000 	mov.w	r0, #0
 8003372:	f04f 0100 	mov.w	r1, #0
 8003376:	0159      	lsls	r1, r3, #5
 8003378:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800337c:	0150      	lsls	r0, r2, #5
 800337e:	4602      	mov	r2, r0
 8003380:	460b      	mov	r3, r1
 8003382:	ebb2 080a 	subs.w	r8, r2, sl
 8003386:	eb63 090b 	sbc.w	r9, r3, fp
 800338a:	f04f 0200 	mov.w	r2, #0
 800338e:	f04f 0300 	mov.w	r3, #0
 8003392:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003396:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800339a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800339e:	ebb2 0408 	subs.w	r4, r2, r8
 80033a2:	eb63 0509 	sbc.w	r5, r3, r9
 80033a6:	f04f 0200 	mov.w	r2, #0
 80033aa:	f04f 0300 	mov.w	r3, #0
 80033ae:	00eb      	lsls	r3, r5, #3
 80033b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033b4:	00e2      	lsls	r2, r4, #3
 80033b6:	4614      	mov	r4, r2
 80033b8:	461d      	mov	r5, r3
 80033ba:	eb14 030a 	adds.w	r3, r4, sl
 80033be:	603b      	str	r3, [r7, #0]
 80033c0:	eb45 030b 	adc.w	r3, r5, fp
 80033c4:	607b      	str	r3, [r7, #4]
 80033c6:	f04f 0200 	mov.w	r2, #0
 80033ca:	f04f 0300 	mov.w	r3, #0
 80033ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033d2:	4629      	mov	r1, r5
 80033d4:	028b      	lsls	r3, r1, #10
 80033d6:	4621      	mov	r1, r4
 80033d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033dc:	4621      	mov	r1, r4
 80033de:	028a      	lsls	r2, r1, #10
 80033e0:	4610      	mov	r0, r2
 80033e2:	4619      	mov	r1, r3
 80033e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033e6:	2200      	movs	r2, #0
 80033e8:	60bb      	str	r3, [r7, #8]
 80033ea:	60fa      	str	r2, [r7, #12]
 80033ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033f0:	f7fc ff5e 	bl	80002b0 <__aeabi_uldivmod>
 80033f4:	4602      	mov	r2, r0
 80033f6:	460b      	mov	r3, r1
 80033f8:	4613      	mov	r3, r2
 80033fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80033fc:	4b0b      	ldr	r3, [pc, #44]	@ (800342c <HAL_RCC_GetSysClockFreq+0x180>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	0c1b      	lsrs	r3, r3, #16
 8003402:	f003 0303 	and.w	r3, r3, #3
 8003406:	3301      	adds	r3, #1
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800340c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800340e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003410:	fbb2 f3f3 	udiv	r3, r2, r3
 8003414:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003416:	e002      	b.n	800341e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003418:	4b05      	ldr	r3, [pc, #20]	@ (8003430 <HAL_RCC_GetSysClockFreq+0x184>)
 800341a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800341c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800341e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003420:	4618      	mov	r0, r3
 8003422:	3740      	adds	r7, #64	@ 0x40
 8003424:	46bd      	mov	sp, r7
 8003426:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800342a:	bf00      	nop
 800342c:	40023800 	.word	0x40023800
 8003430:	00f42400 	.word	0x00f42400
 8003434:	017d7840 	.word	0x017d7840

08003438 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b088      	sub	sp, #32
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003440:	2300      	movs	r3, #0
 8003442:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003444:	2300      	movs	r3, #0
 8003446:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003448:	2300      	movs	r3, #0
 800344a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800344c:	2300      	movs	r3, #0
 800344e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003450:	2300      	movs	r3, #0
 8003452:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b00      	cmp	r3, #0
 800345e:	d012      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003460:	4b69      	ldr	r3, [pc, #420]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	4a68      	ldr	r2, [pc, #416]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003466:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800346a:	6093      	str	r3, [r2, #8]
 800346c:	4b66      	ldr	r3, [pc, #408]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003474:	4964      	ldr	r1, [pc, #400]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003476:	4313      	orrs	r3, r2
 8003478:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003482:	2301      	movs	r3, #1
 8003484:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d017      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003492:	4b5d      	ldr	r3, [pc, #372]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003494:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003498:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034a0:	4959      	ldr	r1, [pc, #356]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034b0:	d101      	bne.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80034b2:	2301      	movs	r3, #1
 80034b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80034be:	2301      	movs	r3, #1
 80034c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d017      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80034ce:	4b4e      	ldr	r3, [pc, #312]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034d4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034dc:	494a      	ldr	r1, [pc, #296]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034ec:	d101      	bne.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80034ee:	2301      	movs	r3, #1
 80034f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80034fa:	2301      	movs	r3, #1
 80034fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800350a:	2301      	movs	r3, #1
 800350c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0320 	and.w	r3, r3, #32
 8003516:	2b00      	cmp	r3, #0
 8003518:	f000 808b 	beq.w	8003632 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800351c:	4b3a      	ldr	r3, [pc, #232]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800351e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003520:	4a39      	ldr	r2, [pc, #228]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003522:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003526:	6413      	str	r3, [r2, #64]	@ 0x40
 8003528:	4b37      	ldr	r3, [pc, #220]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800352a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003530:	60bb      	str	r3, [r7, #8]
 8003532:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003534:	4b35      	ldr	r3, [pc, #212]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a34      	ldr	r2, [pc, #208]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800353a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800353e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003540:	f7fd feae 	bl	80012a0 <HAL_GetTick>
 8003544:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003546:	e008      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003548:	f7fd feaa 	bl	80012a0 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b64      	cmp	r3, #100	@ 0x64
 8003554:	d901      	bls.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e357      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800355a:	4b2c      	ldr	r3, [pc, #176]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003562:	2b00      	cmp	r3, #0
 8003564:	d0f0      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003566:	4b28      	ldr	r3, [pc, #160]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800356a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800356e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d035      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800357a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	429a      	cmp	r2, r3
 8003582:	d02e      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003584:	4b20      	ldr	r3, [pc, #128]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003588:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800358c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800358e:	4b1e      	ldr	r3, [pc, #120]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003592:	4a1d      	ldr	r2, [pc, #116]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003594:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003598:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800359a:	4b1b      	ldr	r3, [pc, #108]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800359c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800359e:	4a1a      	ldr	r2, [pc, #104]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035a4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80035a6:	4a18      	ldr	r2, [pc, #96]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80035ac:	4b16      	ldr	r3, [pc, #88]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d114      	bne.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b8:	f7fd fe72 	bl	80012a0 <HAL_GetTick>
 80035bc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035be:	e00a      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035c0:	f7fd fe6e 	bl	80012a0 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e319      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0ee      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80035ee:	d111      	bne.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80035f0:	4b05      	ldr	r3, [pc, #20]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80035fc:	4b04      	ldr	r3, [pc, #16]	@ (8003610 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80035fe:	400b      	ands	r3, r1
 8003600:	4901      	ldr	r1, [pc, #4]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003602:	4313      	orrs	r3, r2
 8003604:	608b      	str	r3, [r1, #8]
 8003606:	e00b      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003608:	40023800 	.word	0x40023800
 800360c:	40007000 	.word	0x40007000
 8003610:	0ffffcff 	.word	0x0ffffcff
 8003614:	4baa      	ldr	r3, [pc, #680]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	4aa9      	ldr	r2, [pc, #676]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800361a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800361e:	6093      	str	r3, [r2, #8]
 8003620:	4ba7      	ldr	r3, [pc, #668]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003622:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800362c:	49a4      	ldr	r1, [pc, #656]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800362e:	4313      	orrs	r3, r2
 8003630:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0310 	and.w	r3, r3, #16
 800363a:	2b00      	cmp	r3, #0
 800363c:	d010      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800363e:	4ba0      	ldr	r3, [pc, #640]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003640:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003644:	4a9e      	ldr	r2, [pc, #632]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003646:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800364a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800364e:	4b9c      	ldr	r3, [pc, #624]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003650:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003658:	4999      	ldr	r1, [pc, #612]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800365a:	4313      	orrs	r3, r2
 800365c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00a      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800366c:	4b94      	ldr	r3, [pc, #592]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800366e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003672:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800367a:	4991      	ldr	r1, [pc, #580]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800367c:	4313      	orrs	r3, r2
 800367e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00a      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800368e:	4b8c      	ldr	r3, [pc, #560]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003690:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003694:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800369c:	4988      	ldr	r1, [pc, #544]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00a      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036b0:	4b83      	ldr	r3, [pc, #524]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036be:	4980      	ldr	r1, [pc, #512]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00a      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036d2:	4b7b      	ldr	r3, [pc, #492]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036d8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036e0:	4977      	ldr	r1, [pc, #476]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00a      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036f4:	4b72      	ldr	r3, [pc, #456]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036fa:	f023 0203 	bic.w	r2, r3, #3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003702:	496f      	ldr	r1, [pc, #444]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003704:	4313      	orrs	r3, r2
 8003706:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00a      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003716:	4b6a      	ldr	r3, [pc, #424]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800371c:	f023 020c 	bic.w	r2, r3, #12
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003724:	4966      	ldr	r1, [pc, #408]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003726:	4313      	orrs	r3, r2
 8003728:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00a      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003738:	4b61      	ldr	r3, [pc, #388]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800373a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800373e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003746:	495e      	ldr	r1, [pc, #376]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003748:	4313      	orrs	r3, r2
 800374a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00a      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800375a:	4b59      	ldr	r3, [pc, #356]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800375c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003760:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003768:	4955      	ldr	r1, [pc, #340]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800376a:	4313      	orrs	r3, r2
 800376c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00a      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800377c:	4b50      	ldr	r3, [pc, #320]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800377e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003782:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800378a:	494d      	ldr	r1, [pc, #308]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800378c:	4313      	orrs	r3, r2
 800378e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00a      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800379e:	4b48      	ldr	r3, [pc, #288]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037a4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ac:	4944      	ldr	r1, [pc, #272]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00a      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80037c0:	4b3f      	ldr	r3, [pc, #252]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037c6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ce:	493c      	ldr	r1, [pc, #240]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00a      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80037e2:	4b37      	ldr	r3, [pc, #220]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037e8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037f0:	4933      	ldr	r1, [pc, #204]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00a      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003804:	4b2e      	ldr	r3, [pc, #184]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800380a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003812:	492b      	ldr	r1, [pc, #172]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003814:	4313      	orrs	r3, r2
 8003816:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d011      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003826:	4b26      	ldr	r3, [pc, #152]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800382c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003834:	4922      	ldr	r1, [pc, #136]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003836:	4313      	orrs	r3, r2
 8003838:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003840:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003844:	d101      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003846:	2301      	movs	r3, #1
 8003848:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003856:	2301      	movs	r3, #1
 8003858:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00a      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003866:	4b16      	ldr	r3, [pc, #88]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003868:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800386c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003874:	4912      	ldr	r1, [pc, #72]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003876:	4313      	orrs	r3, r2
 8003878:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00b      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003888:	4b0d      	ldr	r3, [pc, #52]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800388a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800388e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003898:	4909      	ldr	r1, [pc, #36]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800389a:	4313      	orrs	r3, r2
 800389c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d006      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f000 80d9 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80038b4:	4b02      	ldr	r3, [pc, #8]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a01      	ldr	r2, [pc, #4]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80038be:	e001      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80038c0:	40023800 	.word	0x40023800
 80038c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038c6:	f7fd fceb 	bl	80012a0 <HAL_GetTick>
 80038ca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038cc:	e008      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80038ce:	f7fd fce7 	bl	80012a0 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b64      	cmp	r3, #100	@ 0x64
 80038da:	d901      	bls.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e194      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038e0:	4b6c      	ldr	r3, [pc, #432]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1f0      	bne.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d021      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d11d      	bne.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003900:	4b64      	ldr	r3, [pc, #400]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003902:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003906:	0c1b      	lsrs	r3, r3, #16
 8003908:	f003 0303 	and.w	r3, r3, #3
 800390c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800390e:	4b61      	ldr	r3, [pc, #388]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003910:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003914:	0e1b      	lsrs	r3, r3, #24
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	019a      	lsls	r2, r3, #6
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	041b      	lsls	r3, r3, #16
 8003926:	431a      	orrs	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	061b      	lsls	r3, r3, #24
 800392c:	431a      	orrs	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	071b      	lsls	r3, r3, #28
 8003934:	4957      	ldr	r1, [pc, #348]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003936:	4313      	orrs	r3, r2
 8003938:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d004      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800394c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003950:	d00a      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800395a:	2b00      	cmp	r3, #0
 800395c:	d02e      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003962:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003966:	d129      	bne.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003968:	4b4a      	ldr	r3, [pc, #296]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800396a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800396e:	0c1b      	lsrs	r3, r3, #16
 8003970:	f003 0303 	and.w	r3, r3, #3
 8003974:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003976:	4b47      	ldr	r3, [pc, #284]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003978:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800397c:	0f1b      	lsrs	r3, r3, #28
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	019a      	lsls	r2, r3, #6
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	041b      	lsls	r3, r3, #16
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	061b      	lsls	r3, r3, #24
 8003996:	431a      	orrs	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	071b      	lsls	r3, r3, #28
 800399c:	493d      	ldr	r1, [pc, #244]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80039a4:	4b3b      	ldr	r3, [pc, #236]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039aa:	f023 021f 	bic.w	r2, r3, #31
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b2:	3b01      	subs	r3, #1
 80039b4:	4937      	ldr	r1, [pc, #220]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d01d      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80039c8:	4b32      	ldr	r3, [pc, #200]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039ce:	0e1b      	lsrs	r3, r3, #24
 80039d0:	f003 030f 	and.w	r3, r3, #15
 80039d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80039d6:	4b2f      	ldr	r3, [pc, #188]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039dc:	0f1b      	lsrs	r3, r3, #28
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	019a      	lsls	r2, r3, #6
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	041b      	lsls	r3, r3, #16
 80039f0:	431a      	orrs	r2, r3
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	061b      	lsls	r3, r3, #24
 80039f6:	431a      	orrs	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	071b      	lsls	r3, r3, #28
 80039fc:	4925      	ldr	r1, [pc, #148]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d011      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	019a      	lsls	r2, r3, #6
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	041b      	lsls	r3, r3, #16
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	061b      	lsls	r3, r3, #24
 8003a24:	431a      	orrs	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	071b      	lsls	r3, r3, #28
 8003a2c:	4919      	ldr	r1, [pc, #100]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003a34:	4b17      	ldr	r3, [pc, #92]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a16      	ldr	r2, [pc, #88]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a3a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a40:	f7fd fc2e 	bl	80012a0 <HAL_GetTick>
 8003a44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a46:	e008      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a48:	f7fd fc2a 	bl	80012a0 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b64      	cmp	r3, #100	@ 0x64
 8003a54:	d901      	bls.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e0d7      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0f0      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	f040 80cd 	bne.w	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003a6e:	4b09      	ldr	r3, [pc, #36]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a08      	ldr	r2, [pc, #32]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a7a:	f7fd fc11 	bl	80012a0 <HAL_GetTick>
 8003a7e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a80:	e00a      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a82:	f7fd fc0d 	bl	80012a0 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b64      	cmp	r3, #100	@ 0x64
 8003a8e:	d903      	bls.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e0ba      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003a94:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a98:	4b5e      	ldr	r3, [pc, #376]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003aa0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003aa4:	d0ed      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d009      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d02e      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d12a      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ace:	4b51      	ldr	r3, [pc, #324]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ad4:	0c1b      	lsrs	r3, r3, #16
 8003ad6:	f003 0303 	and.w	r3, r3, #3
 8003ada:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003adc:	4b4d      	ldr	r3, [pc, #308]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ae2:	0f1b      	lsrs	r3, r3, #28
 8003ae4:	f003 0307 	and.w	r3, r3, #7
 8003ae8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	019a      	lsls	r2, r3, #6
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	041b      	lsls	r3, r3, #16
 8003af4:	431a      	orrs	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	061b      	lsls	r3, r3, #24
 8003afc:	431a      	orrs	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	071b      	lsls	r3, r3, #28
 8003b02:	4944      	ldr	r1, [pc, #272]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003b0a:	4b42      	ldr	r3, [pc, #264]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b10:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	021b      	lsls	r3, r3, #8
 8003b1c:	493d      	ldr	r1, [pc, #244]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d022      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b38:	d11d      	bne.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b3a:	4b36      	ldr	r3, [pc, #216]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b40:	0e1b      	lsrs	r3, r3, #24
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b48:	4b32      	ldr	r3, [pc, #200]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b4e:	0f1b      	lsrs	r3, r3, #28
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	019a      	lsls	r2, r3, #6
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	041b      	lsls	r3, r3, #16
 8003b62:	431a      	orrs	r2, r3
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	061b      	lsls	r3, r3, #24
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	071b      	lsls	r3, r3, #28
 8003b6e:	4929      	ldr	r1, [pc, #164]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0308 	and.w	r3, r3, #8
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d028      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b82:	4b24      	ldr	r3, [pc, #144]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b88:	0e1b      	lsrs	r3, r3, #24
 8003b8a:	f003 030f 	and.w	r3, r3, #15
 8003b8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b90:	4b20      	ldr	r3, [pc, #128]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b96:	0c1b      	lsrs	r3, r3, #16
 8003b98:	f003 0303 	and.w	r3, r3, #3
 8003b9c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	019a      	lsls	r2, r3, #6
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	041b      	lsls	r3, r3, #16
 8003ba8:	431a      	orrs	r2, r3
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	061b      	lsls	r3, r3, #24
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	071b      	lsls	r3, r3, #28
 8003bb6:	4917      	ldr	r1, [pc, #92]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003bbe:	4b15      	ldr	r3, [pc, #84]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bc4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bcc:	4911      	ldr	r1, [pc, #68]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a0e      	ldr	r2, [pc, #56]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003be0:	f7fd fb5e 	bl	80012a0 <HAL_GetTick>
 8003be4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003be6:	e008      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003be8:	f7fd fb5a 	bl	80012a0 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b64      	cmp	r3, #100	@ 0x64
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e007      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003bfa:	4b06      	ldr	r3, [pc, #24]	@ (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c06:	d1ef      	bne.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3720      	adds	r7, #32
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	40023800 	.word	0x40023800

08003c18 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e01d      	b.n	8003c66 <HAL_SD_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d105      	bne.n	8003c42 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 f87a 	bl	8003d36 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2203      	movs	r2, #3
 8003c46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f80f 	bl	8003c6e <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	631a      	str	r2, [r3, #48]	@ 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003c6e:	b5b0      	push	{r4, r5, r7, lr}
 8003c70:	b08e      	sub	sp, #56	@ 0x38
 8003c72:	af04      	add	r7, sp, #16
 8003c74:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003c76:	2300      	movs	r3, #0
 8003c78:	627b      	str	r3, [r7, #36]	@ 0x24
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003c82:	2300      	movs	r3, #0
 8003c84:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8003c86:	2300      	movs	r3, #0
 8003c88:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8003c8e:	2376      	movs	r3, #118	@ 0x76
 8003c90:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681d      	ldr	r5, [r3, #0]
 8003c96:	466c      	mov	r4, sp
 8003c98:	f107 0318 	add.w	r3, r7, #24
 8003c9c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003ca0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003ca4:	f107 030c 	add.w	r3, r7, #12
 8003ca8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003caa:	4628      	mov	r0, r5
 8003cac:	f001 faee 	bl	800528c <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd); 
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685a      	ldr	r2, [r3, #4]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003cbe:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hsd->Instance);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f001 fb2b 	bl	8005320 <SDMMC_PowerState_ON>
  
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685a      	ldr	r2, [r3, #4]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cd8:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 8003cda:	2002      	movs	r0, #2
 8003cdc:	f7fd faec 	bl	80012b8 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 feee 	bl	8004ac2 <SD_PowerON>
 8003ce6:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00b      	beq.n	8003d06 <HAL_SD_InitCard+0x98>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e013      	b.n	8003d2e <HAL_SD_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 fe11 	bl	800492e <SD_InitCard>
 8003d0c:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00b      	beq.n	8003d2c <HAL_SD_InitCard+0xbe>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d22:	431a      	orrs	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e000      	b.n	8003d2e <HAL_SD_InitCard+0xc0>
  }

  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3728      	adds	r7, #40	@ 0x28
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bdb0      	pop	{r4, r5, r7, pc}

08003d36 <HAL_SD_MspInit>:
  * @brief  Initializes the SD MSP.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_MspInit(SD_HandleTypeDef *hsd)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_MspInit could be implemented in the user file
   */
}
 8003d3e:	bf00      	nop
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003d4a:	b590      	push	{r4, r7, lr}
 8003d4c:	b08f      	sub	sp, #60	@ 0x3c
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	60f8      	str	r0, [r7, #12]
 8003d52:	60b9      	str	r1, [r7, #8]
 8003d54:	607a      	str	r2, [r7, #4]
 8003d56:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart = HAL_GetTick();
 8003d5c:	f7fd faa0 	bl	80012a0 <HAL_GetTick>
 8003d60:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t count = 0, *tempbuff = (uint32_t *)pData;
 8003d62:	2300      	movs	r3, #0
 8003d64:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  if(NULL == pData)
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d107      	bne.n	8003d80 <HAL_SD_ReadBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d74:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e176      	b.n	800406e <HAL_SD_ReadBlocks+0x324>
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	f040 8169 	bne.w	8004060 <HAL_SD_ReadBlocks+0x316>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	639a      	str	r2, [r3, #56]	@ 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	441a      	add	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d907      	bls.n	8003db2 <HAL_SD_ReadBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e15d      	b.n	800406e <HAL_SD_ReadBlocks+0x324>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2203      	movs	r2, #3
 8003db6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d002      	beq.n	8003dd0 <HAL_SD_ReadBlocks+0x86>
    {
      BlockAdd *= 512;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	025b      	lsls	r3, r3, #9
 8003dce:	607b      	str	r3, [r7, #4]
    }
      
    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f001 fb35 	bl	8005448 <SDMMC_CmdBlockLength>
 8003dde:	6378      	str	r0, [r7, #52]	@ 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8003de0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d010      	beq.n	8003e08 <HAL_SD_ReadBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);      
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8003dee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003df4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003df6:	431a      	orrs	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e132      	b.n	800406e <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003e08:	f04f 33ff 	mov.w	r3, #4294967295
 8003e0c:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	025b      	lsls	r3, r3, #9
 8003e12:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003e14:	2390      	movs	r3, #144	@ 0x90
 8003e16:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003e18:	2302      	movs	r3, #2
 8003e1a:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8003e20:	2301      	movs	r3, #1
 8003e22:	627b      	str	r3, [r7, #36]	@ 0x24
    SDMMC_ConfigData(hsd->Instance, &config);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f107 0210 	add.w	r2, r7, #16
 8003e2c:	4611      	mov	r1, r2
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f001 fade 	bl	80053f0 <SDMMC_ConfigData>
    
    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d90a      	bls.n	8003e50 <HAL_SD_ReadBlocks+0x106>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2202      	movs	r2, #2
 8003e3e:	631a      	str	r2, [r3, #48]	@ 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6879      	ldr	r1, [r7, #4]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f001 fb46 	bl	80054d8 <SDMMC_CmdReadMultiBlock>
 8003e4c:	6378      	str	r0, [r7, #52]	@ 0x34
 8003e4e:	e009      	b.n	8003e64 <HAL_SD_ReadBlocks+0x11a>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2201      	movs	r2, #1
 8003e54:	631a      	str	r2, [r3, #48]	@ 0x30
      
      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6879      	ldr	r1, [r7, #4]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f001 fb17 	bl	8005490 <SDMMC_CmdReadSingleBlock>
 8003e62:	6378      	str	r0, [r7, #52]	@ 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d04a      	beq.n	8003f00 <HAL_SD_ReadBlocks+0x1b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8003e72:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e0f0      	b.n	800406e <HAL_SD_ReadBlocks+0x324>
    }
      
    /* Poll on SDMMC flags */
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d016      	beq.n	8003ec8 <HAL_SD_ReadBlocks+0x17e>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e9e:	e00d      	b.n	8003ebc <HAL_SD_ReadBlocks+0x172>
        {
          *(tempbuff + count) = SDMMC_ReadFIFO(hsd->Instance);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6819      	ldr	r1, [r3, #0]
 8003ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003eaa:	18d4      	adds	r4, r2, r3
 8003eac:	4608      	mov	r0, r1
 8003eae:	f001 fa19 	bl	80052e4 <SDMMC_ReadFIFO>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	6023      	str	r3, [r4, #0]
        for(count = 0U; count < 8U; count++)
 8003eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb8:	3301      	adds	r3, #1
 8003eba:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ebe:	2b07      	cmp	r3, #7
 8003ec0:	d9ee      	bls.n	8003ea0 <HAL_SD_ReadBlocks+0x156>
        }
        tempbuff += 8U;
 8003ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ec4:	3320      	adds	r3, #32
 8003ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8003ec8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d007      	beq.n	8003ede <HAL_SD_ReadBlocks+0x194>
 8003ece:	f7fd f9e7 	bl	80012a0 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d810      	bhi.n	8003f00 <HAL_SD_ReadBlocks+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8003ee6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eec:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e0b6      	b.n	800406e <HAL_SD_ReadBlocks+0x324>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f06:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d0be      	beq.n	8003e8c <HAL_SD_ReadBlocks+0x142>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d020      	beq.n	8003f5e <HAL_SD_ReadBlocks+0x214>
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d91d      	bls.n	8003f5e <HAL_SD_ReadBlocks+0x214>
    {    
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f26:	2b03      	cmp	r3, #3
 8003f28:	d019      	beq.n	8003f5e <HAL_SD_ReadBlocks+0x214>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f001 fb3e 	bl	80055b0 <SDMMC_CmdStopTransfer>
 8003f34:	6378      	str	r0, [r7, #52]	@ 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8003f36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d010      	beq.n	8003f5e <HAL_SD_ReadBlocks+0x214>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8003f44:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e087      	b.n	800406e <HAL_SD_ReadBlocks+0x324>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f64:	f003 0308 	and.w	r3, r3, #8
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d010      	beq.n	8003f8e <HAL_SD_ReadBlocks+0x244>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8003f74:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f7a:	f043 0208 	orr.w	r2, r3, #8
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e06f      	b.n	800406e <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d010      	beq.n	8003fbe <HAL_SD_ReadBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8003fa4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003faa:	f043 0202 	orr.w	r2, r3, #2
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e057      	b.n	800406e <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fc4:	f003 0320 	and.w	r3, r3, #32
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d037      	beq.n	800403c <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8003fd4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fda:	f043 0220 	orr.w	r2, r3, #32
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e03f      	b.n	800406e <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
    {
      *tempbuff = SDMMC_ReadFIFO(hsd->Instance);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f001 f976 	bl	80052e4 <SDMMC_ReadFIFO>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ffc:	601a      	str	r2, [r3, #0]
      tempbuff++;
 8003ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004000:	3304      	adds	r3, #4
 8004002:	62fb      	str	r3, [r7, #44]	@ 0x2c
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8004004:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004006:	2b00      	cmp	r3, #0
 8004008:	d007      	beq.n	800401a <HAL_SD_ReadBlocks+0x2d0>
 800400a:	f7fd f949 	bl	80012a0 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004016:	429a      	cmp	r2, r3
 8004018:	d810      	bhi.n	800403c <HAL_SD_ReadBlocks+0x2f2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);        
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8004022:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004028:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e018      	b.n	800406e <HAL_SD_ReadBlocks+0x324>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004042:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1d1      	bne.n	8003fee <HAL_SD_ReadBlocks+0x2a4>
      }
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8004052:	639a      	str	r2, [r3, #56]	@ 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_OK;
 800405c:	2300      	movs	r3, #0
 800405e:	e006      	b.n	800406e <HAL_SD_ReadBlocks+0x324>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004064:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
  }
}
 800406e:	4618      	mov	r0, r3
 8004070:	373c      	adds	r7, #60	@ 0x3c
 8004072:	46bd      	mov	sp, r7
 8004074:	bd90      	pop	{r4, r7, pc}

08004076 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b08e      	sub	sp, #56	@ 0x38
 800407a:	af00      	add	r7, sp, #0
 800407c:	60f8      	str	r0, [r7, #12]
 800407e:	60b9      	str	r1, [r7, #8]
 8004080:	607a      	str	r2, [r7, #4]
 8004082:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004084:	2300      	movs	r3, #0
 8004086:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart = HAL_GetTick();
 8004088:	f7fd f90a 	bl	80012a0 <HAL_GetTick>
 800408c:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t count = 0;
 800408e:	2300      	movs	r3, #0
 8004090:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t *tempbuff = (uint32_t *)pData;
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  if(NULL == pData)
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d107      	bne.n	80040ac <HAL_SD_WriteBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e147      	b.n	800433c <HAL_SD_WriteBlocks+0x2c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	f040 813a 	bne.w	800432e <HAL_SD_WriteBlocks+0x2b8>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	639a      	str	r2, [r3, #56]	@ 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	441a      	add	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d907      	bls.n	80040de <HAL_SD_WriteBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d2:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e12e      	b.n	800433c <HAL_SD_WriteBlocks+0x2c6>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2203      	movs	r2, #3
 80040e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2200      	movs	r2, #0
 80040ec:	62da      	str	r2, [r3, #44]	@ 0x2c
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d002      	beq.n	80040fc <HAL_SD_WriteBlocks+0x86>
    {
      BlockAdd *= 512;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	025b      	lsls	r3, r3, #9
 80040fa:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004104:	4618      	mov	r0, r3
 8004106:	f001 f99f 	bl	8005448 <SDMMC_CmdBlockLength>
 800410a:	6378      	str	r0, [r7, #52]	@ 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 800410c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800410e:	2b00      	cmp	r3, #0
 8004110:	d010      	beq.n	8004134 <HAL_SD_WriteBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 800411a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004122:	431a      	orrs	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e103      	b.n	800433c <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d90a      	bls.n	8004150 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2220      	movs	r2, #32
 800413e:	631a      	str	r2, [r3, #48]	@ 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6879      	ldr	r1, [r7, #4]
 8004146:	4618      	mov	r0, r3
 8004148:	f001 fa0e 	bl	8005568 <SDMMC_CmdWriteMultiBlock>
 800414c:	6378      	str	r0, [r7, #52]	@ 0x34
 800414e:	e009      	b.n	8004164 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2210      	movs	r2, #16
 8004154:	631a      	str	r2, [r3, #48]	@ 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	6879      	ldr	r1, [r7, #4]
 800415c:	4618      	mov	r0, r3
 800415e:	f001 f9df 	bl	8005520 <SDMMC_CmdWriteSingleBlock>
 8004162:	6378      	str	r0, [r7, #52]	@ 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004166:	2b00      	cmp	r3, #0
 8004168:	d010      	beq.n	800418c <HAL_SD_WriteBlocks+0x116>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8004172:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800417a:	431a      	orrs	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e0d7      	b.n	800433c <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800418c:	f04f 33ff 	mov.w	r3, #4294967295
 8004190:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	025b      	lsls	r3, r3, #9
 8004196:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004198:	2390      	movs	r3, #144	@ 0x90
 800419a:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800419c:	2300      	movs	r3, #0
 800419e:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80041a0:	2300      	movs	r3, #0
 80041a2:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80041a4:	2301      	movs	r3, #1
 80041a6:	627b      	str	r3, [r7, #36]	@ 0x24
    SDMMC_ConfigData(hsd->Instance, &config);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f107 0210 	add.w	r2, r7, #16
 80041b0:	4611      	mov	r1, r2
 80041b2:	4618      	mov	r0, r3
 80041b4:	f001 f91c 	bl	80053f0 <SDMMC_ConfigData>
    
    /* Write block(s) in polling mode */
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80041b8:	e037      	b.n	800422a <HAL_SD_WriteBlocks+0x1b4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE))
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d014      	beq.n	80041f2 <HAL_SD_WriteBlocks+0x17c>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80041c8:	2300      	movs	r3, #0
 80041ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80041cc:	e00b      	b.n	80041e6 <HAL_SD_WriteBlocks+0x170>
        {
          SDMMC_WriteFIFO(hsd->Instance, (tempbuff + count));
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6818      	ldr	r0, [r3, #0]
 80041d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041d8:	4413      	add	r3, r2
 80041da:	4619      	mov	r1, r3
 80041dc:	f001 f88f 	bl	80052fe <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80041e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e2:	3301      	adds	r3, #1
 80041e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80041e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e8:	2b07      	cmp	r3, #7
 80041ea:	d9f0      	bls.n	80041ce <HAL_SD_WriteBlocks+0x158>
        }
        tempbuff += 8U;
 80041ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ee:	3320      	adds	r3, #32
 80041f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 80041f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d007      	beq.n	8004208 <HAL_SD_WriteBlocks+0x192>
 80041f8:	f7fd f852 	bl	80012a0 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004204:	429a      	cmp	r2, r3
 8004206:	d810      	bhi.n	800422a <HAL_SD_WriteBlocks+0x1b4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8004210:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004218:	431a      	orrs	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e088      	b.n	800433c <HAL_SD_WriteBlocks+0x2c6>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004230:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 8004234:	2b00      	cmp	r3, #0
 8004236:	d0c0      	beq.n	80041ba <HAL_SD_WriteBlocks+0x144>
      }
    }
    
    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800423e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004242:	2b00      	cmp	r3, #0
 8004244:	d020      	beq.n	8004288 <HAL_SD_WriteBlocks+0x212>
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d91d      	bls.n	8004288 <HAL_SD_WriteBlocks+0x212>
    { 
      if(hsd->SdCard.CardType != CARD_SECURED)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004250:	2b03      	cmp	r3, #3
 8004252:	d019      	beq.n	8004288 <HAL_SD_WriteBlocks+0x212>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4618      	mov	r0, r3
 800425a:	f001 f9a9 	bl	80055b0 <SDMMC_CmdStopTransfer>
 800425e:	6378      	str	r0, [r7, #52]	@ 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8004260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004262:	2b00      	cmp	r3, #0
 8004264:	d010      	beq.n	8004288 <HAL_SD_WriteBlocks+0x212>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 800426e:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004276:	431a      	orrs	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e059      	b.n	800433c <HAL_SD_WriteBlocks+0x2c6>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	2b00      	cmp	r3, #0
 8004294:	d010      	beq.n	80042b8 <HAL_SD_WriteBlocks+0x242>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 800429e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042a4:	f043 0208 	orr.w	r2, r3, #8
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e041      	b.n	800433c <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d010      	beq.n	80042e8 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 80042ce:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042d4:	f043 0202 	orr.w	r2, r3, #2
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e029      	b.n	800433c <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042ee:	f003 0310 	and.w	r3, r3, #16
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d010      	beq.n	8004318 <HAL_SD_WriteBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 80042fe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004304:	f043 0210 	orr.w	r2, r3, #16
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e011      	b.n	800433c <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8004320:	639a      	str	r2, [r3, #56]	@ 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_OK;
 800432a:	2300      	movs	r3, #0
 800432c:	e006      	b.n	800433c <HAL_SD_WriteBlocks+0x2c6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004332:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
  }
}
 800433c:	4618      	mov	r0, r3
 800433e:	3738      	adds	r7, #56	@ 0x38
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 800434e:	2300      	movs	r3, #0
 8004350:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004356:	0e1b      	lsrs	r3, r3, #24
 8004358:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	099b      	lsrs	r3, r3, #6
 800435e:	b2db      	uxtb	r3, r3
 8004360:	f003 0303 	and.w	r3, r3, #3
 8004364:	b2da      	uxtb	r2, r3
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	089b      	lsrs	r3, r3, #2
 800436e:	b2db      	uxtb	r3, r3
 8004370:	f003 030f 	and.w	r3, r3, #15
 8004374:	b2da      	uxtb	r2, r3
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	b2db      	uxtb	r3, r3
 800437e:	f003 0303 	and.w	r3, r3, #3
 8004382:	b2da      	uxtb	r2, r3
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800438c:	0c1b      	lsrs	r3, r3, #16
 800438e:	b2db      	uxtb	r3, r3
 8004390:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	b2da      	uxtb	r2, r3
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800439e:	0a1b      	lsrs	r3, r3, #8
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	b2da      	uxtb	r2, r3
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043c0:	0e1b      	lsrs	r3, r3, #24
 80043c2:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	011b      	lsls	r3, r3, #4
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043d4:	0c1b      	lsrs	r3, r3, #16
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	88db      	ldrh	r3, [r3, #6]
 80043de:	b29a      	uxth	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	091b      	lsrs	r3, r3, #4
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	f003 030f 	and.w	r3, r3, #15
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	4313      	orrs	r3, r2
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	f003 030f 	and.w	r3, r3, #15
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004406:	0a1b      	lsrs	r3, r3, #8
 8004408:	b2db      	uxtb	r3, r3
 800440a:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	09db      	lsrs	r3, r3, #7
 8004410:	b2db      	uxtb	r3, r3
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	b2da      	uxtb	r2, r3
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	099b      	lsrs	r3, r3, #6
 8004420:	b2db      	uxtb	r3, r3
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	b2da      	uxtb	r2, r3
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	095b      	lsrs	r3, r3, #5
 8004430:	b2db      	uxtb	r3, r3
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	b2da      	uxtb	r2, r3
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	091b      	lsrs	r3, r3, #4
 8004440:	b2db      	uxtb	r3, r3
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	b2da      	uxtb	r2, r3
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	2200      	movs	r2, #0
 8004450:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004456:	2b00      	cmp	r3, #0
 8004458:	f040 8086 	bne.w	8004568 <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	029b      	lsls	r3, r3, #10
 8004460:	f403 6240 	and.w	r2, r3, #3072	@ 0xc00
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800446c:	b2db      	uxtb	r3, r3
 800446e:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	691a      	ldr	r2, [r3, #16]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	431a      	orrs	r2, r3
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004482:	0e1b      	lsrs	r3, r3, #24
 8004484:	b2db      	uxtb	r3, r3
 8004486:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	691a      	ldr	r2, [r3, #16]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	099b      	lsrs	r3, r3, #6
 8004490:	f003 0303 	and.w	r3, r3, #3
 8004494:	431a      	orrs	r2, r3
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	08db      	lsrs	r3, r3, #3
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	f003 0307 	and.w	r3, r3, #7
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	f003 0307 	and.w	r3, r3, #7
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044bc:	0c1b      	lsrs	r3, r3, #16
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	095b      	lsrs	r3, r3, #5
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	f003 0307 	and.w	r3, r3, #7
 80044cc:	b2da      	uxtb	r2, r3
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	089b      	lsrs	r3, r3, #2
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	f003 0307 	and.w	r3, r3, #7
 80044dc:	b2da      	uxtb	r2, r3
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	005b      	lsls	r3, r3, #1
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	f003 0306 	and.w	r3, r3, #6
 80044ee:	b2da      	uxtb	r2, r3
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044f8:	0a1b      	lsrs	r3, r3, #8
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	7e1b      	ldrb	r3, [r3, #24]
 8004502:	b2da      	uxtb	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	09db      	lsrs	r3, r3, #7
 8004508:	b2db      	uxtb	r3, r3
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	b2db      	uxtb	r3, r3
 8004510:	4313      	orrs	r3, r2
 8004512:	b2da      	uxtb	r2, r3
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	1c5a      	adds	r2, r3, #1
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	7e1b      	ldrb	r3, [r3, #24]
 8004526:	b2db      	uxtb	r3, r3
 8004528:	3302      	adds	r3, #2
 800452a:	2201      	movs	r2, #1
 800452c:	409a      	lsls	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004532:	fb03 f202 	mul.w	r2, r3, r2
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	7a1b      	ldrb	r3, [r3, #8]
 800453e:	b2db      	uxtb	r3, r3
 8004540:	461a      	mov	r2, r3
 8004542:	2301      	movs	r3, #1
 8004544:	4093      	lsls	r3, r2
 8004546:	461a      	mov	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004554:	0a52      	lsrs	r2, r2, #9
 8004556:	fb03 f202 	mul.w	r2, r3, r2
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004564:	661a      	str	r2, [r3, #96]	@ 0x60
 8004566:	e04d      	b.n	8004604 <HAL_SD_GetCardCSD+0x2c0>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800456c:	2b01      	cmp	r3, #1
 800456e:	d138      	bne.n	80045e2 <HAL_SD_GetCardCSD+0x29e>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004574:	b2db      	uxtb	r3, r3
 8004576:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	041b      	lsls	r3, r3, #16
 800457c:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004588:	0e1b      	lsrs	r3, r3, #24
 800458a:	b2db      	uxtb	r3, r3
 800458c:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	691a      	ldr	r2, [r3, #16]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	021b      	lsls	r3, r3, #8
 8004596:	431a      	orrs	r2, r3
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045a0:	0c1b      	lsrs	r3, r3, #16
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	691a      	ldr	r2, [r3, #16]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	431a      	orrs	r2, r3
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045b6:	0a1b      	lsrs	r3, r3, #8
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	3301      	adds	r3, #1
 80045c2:	029a      	lsls	r2, r3, #10
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	655a      	str	r2, [r3, #84]	@ 0x54
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045d6:	659a      	str	r2, [r3, #88]	@ 0x58
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	661a      	str	r2, [r3, #96]	@ 0x60
 80045e0:	e010      	b.n	8004604 <HAL_SD_GetCardCSD+0x2c0>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 80045ea:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e0c1      	b.n	8004788 <HAL_SD_GetCardCSD+0x444>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	099b      	lsrs	r3, r3, #6
 8004608:	b2db      	uxtb	r3, r3
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	b2da      	uxtb	r2, r3
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	b2db      	uxtb	r3, r3
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	b2db      	uxtb	r3, r3
 800461c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8004620:	b2da      	uxtb	r2, r3
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800462a:	b2db      	uxtb	r3, r3
 800462c:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	7e9b      	ldrb	r3, [r3, #26]
 8004632:	b2da      	uxtb	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	09db      	lsrs	r3, r3, #7
 8004638:	b2db      	uxtb	r3, r3
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	b2db      	uxtb	r3, r3
 8004640:	4313      	orrs	r3, r2
 8004642:	b2da      	uxtb	r2, r3
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	b2db      	uxtb	r3, r3
 800464c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004650:	b2da      	uxtb	r2, r3
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800465a:	0e1b      	lsrs	r3, r3, #24
 800465c:	b2db      	uxtb	r3, r3
 800465e:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	09db      	lsrs	r3, r3, #7
 8004664:	b2db      	uxtb	r3, r3
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	b2da      	uxtb	r2, r3
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	095b      	lsrs	r3, r3, #5
 8004674:	b2db      	uxtb	r3, r3
 8004676:	f003 0303 	and.w	r3, r3, #3
 800467a:	b2da      	uxtb	r2, r3
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	089b      	lsrs	r3, r3, #2
 8004684:	b2db      	uxtb	r3, r3
 8004686:	f003 0307 	and.w	r3, r3, #7
 800468a:	b2da      	uxtb	r2, r3
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	b2db      	uxtb	r3, r3
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	b2db      	uxtb	r3, r3
 8004698:	f003 030c 	and.w	r3, r3, #12
 800469c:	b2da      	uxtb	r2, r3
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046a6:	0c1b      	lsrs	r3, r3, #16
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	7fdb      	ldrb	r3, [r3, #31]
 80046b0:	b2da      	uxtb	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	099b      	lsrs	r3, r3, #6
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	f003 0303 	and.w	r3, r3, #3
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	4313      	orrs	r3, r2
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	095b      	lsrs	r3, r3, #5
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	b2da      	uxtb	r2, r3
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046f4:	0a1b      	lsrs	r3, r3, #8
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	09db      	lsrs	r3, r3, #7
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	f003 0301 	and.w	r3, r3, #1
 8004704:	b2da      	uxtb	r2, r3
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	099b      	lsrs	r3, r3, #6
 8004710:	b2db      	uxtb	r3, r3
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	b2da      	uxtb	r2, r3
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	095b      	lsrs	r3, r3, #5
 8004722:	b2db      	uxtb	r3, r3
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	b2da      	uxtb	r2, r3
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	091b      	lsrs	r3, r3, #4
 8004734:	b2db      	uxtb	r3, r3
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	b2da      	uxtb	r2, r3
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	089b      	lsrs	r3, r3, #2
 8004746:	b2db      	uxtb	r3, r3
 8004748:	f003 0303 	and.w	r3, r3, #3
 800474c:	b2da      	uxtb	r2, r3
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  pCSD->ECC              = (tmp & 0x03);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	b2db      	uxtb	r3, r3
 8004758:	f003 0303 	and.w	r3, r3, #3
 800475c:	b2da      	uxtb	r2, r3
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004768:	b2db      	uxtb	r3, r3
 800476a:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	085b      	lsrs	r3, r3, #1
 8004770:	b2db      	uxtb	r3, r3
 8004772:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004776:	b2da      	uxtb	r2, r3
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  pCSD->Reserved4 = 1;
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  
  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3714      	adds	r7, #20
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80047ec:	b5b0      	push	{r4, r5, r7, lr}
 80047ee:	b08e      	sub	sp, #56	@ 0x38
 80047f0:	af04      	add	r7, sp, #16
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80047f6:	2300      	movs	r3, #0
 80047f8:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2203      	movs	r2, #3
 80047fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004806:	2b03      	cmp	r3, #3
 8004808:	d02e      	beq.n	8004868 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004810:	d106      	bne.n	8004820 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004816:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	639a      	str	r2, [r3, #56]	@ 0x38
 800481e:	e029      	b.n	8004874 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004826:	d10a      	bne.n	800483e <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 fa1c 	bl	8004c66 <SD_WideBus_Enable>
 800482e:	6278      	str	r0, [r7, #36]	@ 0x24
      
      hsd->ErrorCode |= errorstate;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004836:	431a      	orrs	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	639a      	str	r2, [r3, #56]	@ 0x38
 800483c:	e01a      	b.n	8004874 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d10a      	bne.n	800485a <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 fa5b 	bl	8004d00 <SD_WideBus_Disable>
 800484a:	6278      	str	r0, [r7, #36]	@ 0x24
      
      hsd->ErrorCode |= errorstate;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004852:	431a      	orrs	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	639a      	str	r2, [r3, #56]	@ 0x38
 8004858:	e00c      	b.n	8004874 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800485e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	639a      	str	r2, [r3, #56]	@ 0x38
 8004866:	e005      	b.n	8004874 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800486c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00a      	beq.n	8004892 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8004884:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e024      	b.n	80048dc <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	623b      	str	r3, [r7, #32]
    SDMMC_Init(hsd->Instance, Init);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681d      	ldr	r5, [r3, #0]
 80048b8:	466c      	mov	r4, sp
 80048ba:	f107 0318 	add.w	r3, r7, #24
 80048be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80048c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80048c6:	f107 030c 	add.w	r3, r7, #12
 80048ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048cc:	4628      	mov	r0, r5
 80048ce:	f000 fcdd 	bl	800528c <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3728      	adds	r7, #40	@ 0x28
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bdb0      	pop	{r4, r5, r7, pc}

080048e4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b086      	sub	sp, #24
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 80048ec:	2304      	movs	r3, #4
 80048ee:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80048f0:	2300      	movs	r3, #0
 80048f2:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 80048f4:	2300      	movs	r3, #0
 80048f6:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 80048f8:	f107 030c 	add.w	r3, r7, #12
 80048fc:	4619      	mov	r1, r3
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f987 	bl	8004c12 <SD_SendStatus>
 8004904:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d005      	beq.n	8004918 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	431a      	orrs	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9) & 0x0F);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	0a5b      	lsrs	r3, r3, #9
 800491c:	b2db      	uxtb	r3, r3
 800491e:	f003 030f 	and.w	r3, r3, #15
 8004922:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8004924:	7dfb      	ldrb	r3, [r7, #23]
}
 8004926:	4618      	mov	r0, r3
 8004928:	3718      	adds	r7, #24
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800492e:	b5b0      	push	{r4, r5, r7, lr}
 8004930:	b094      	sub	sp, #80	@ 0x50
 8004932:	af04      	add	r7, sp, #16
 8004934:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004936:	2300      	movs	r3, #0
 8004938:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint16_t sd_rca = 1;
 800493a:	2301      	movs	r3, #1
 800493c:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4618      	mov	r0, r3
 8004944:	f000 fcfa 	bl	800533c <SDMMC_GetPowerState>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d102      	bne.n	8004954 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800494e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004952:	e0b2      	b.n	8004aba <SD_InitCard+0x18c>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004958:	2b03      	cmp	r3, #3
 800495a:	d02f      	beq.n	80049bc <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4618      	mov	r0, r3
 8004962:	f000 ff40 	bl	80057e6 <SDMMC_CmdSendCID>
 8004966:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004968:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <SD_InitCard+0x44>
    {
      return errorstate;
 800496e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004970:	e0a3      	b.n	8004aba <SD_InitCard+0x18c>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2100      	movs	r1, #0
 8004978:	4618      	mov	r0, r3
 800497a:	f000 fd24 	bl	80053c6 <SDMMC_GetResponse>
 800497e:	4602      	mov	r2, r0
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2104      	movs	r1, #4
 800498a:	4618      	mov	r0, r3
 800498c:	f000 fd1b 	bl	80053c6 <SDMMC_GetResponse>
 8004990:	4602      	mov	r2, r0
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2108      	movs	r1, #8
 800499c:	4618      	mov	r0, r3
 800499e:	f000 fd12 	bl	80053c6 <SDMMC_GetResponse>
 80049a2:	4602      	mov	r2, r0
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	210c      	movs	r1, #12
 80049ae:	4618      	mov	r0, r3
 80049b0:	f000 fd09 	bl	80053c6 <SDMMC_GetResponse>
 80049b4:	4602      	mov	r2, r0
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049c0:	2b03      	cmp	r3, #3
 80049c2:	d00d      	beq.n	80049e0 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f107 020e 	add.w	r2, r7, #14
 80049cc:	4611      	mov	r1, r2
 80049ce:	4618      	mov	r0, r3
 80049d0:	f000 ff4a 	bl	8005868 <SDMMC_CmdSetRelAdd>
 80049d4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80049d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d001      	beq.n	80049e0 <SD_InitCard+0xb2>
    {
      return errorstate;
 80049dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049de:	e06c      	b.n	8004aba <SD_InitCard+0x18c>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049e4:	2b03      	cmp	r3, #3
 80049e6:	d036      	beq.n	8004a56 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80049e8:	89fb      	ldrh	r3, [r7, #14]
 80049ea:	461a      	mov	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	651a      	str	r2, [r3, #80]	@ 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049f8:	041b      	lsls	r3, r3, #16
 80049fa:	4619      	mov	r1, r3
 80049fc:	4610      	mov	r0, r2
 80049fe:	f000 ff12 	bl	8005826 <SDMMC_CmdSendCSD>
 8004a02:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <SD_InitCard+0xe0>
    {
      return errorstate;
 8004a0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a0c:	e055      	b.n	8004aba <SD_InitCard+0x18c>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2100      	movs	r1, #0
 8004a14:	4618      	mov	r0, r3
 8004a16:	f000 fcd6 	bl	80053c6 <SDMMC_GetResponse>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2104      	movs	r1, #4
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 fccd 	bl	80053c6 <SDMMC_GetResponse>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2108      	movs	r1, #8
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f000 fcc4 	bl	80053c6 <SDMMC_GetResponse>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	210c      	movs	r1, #12
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 fcbb 	bl	80053c6 <SDMMC_GetResponse>
 8004a50:	4602      	mov	r2, r0
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2104      	movs	r1, #4
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f000 fcb2 	bl	80053c6 <SDMMC_GetResponse>
 8004a62:	4603      	mov	r3, r0
 8004a64:	0d1a      	lsrs	r2, r3, #20
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	64da      	str	r2, [r3, #76]	@ 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8004a6a:	f107 0310 	add.w	r3, r7, #16
 8004a6e:	4619      	mov	r1, r3
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7ff fc67 	bl	8004344 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6819      	ldr	r1, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a7e:	041b      	lsls	r3, r3, #16
 8004a80:	2200      	movs	r2, #0
 8004a82:	461c      	mov	r4, r3
 8004a84:	4615      	mov	r5, r2
 8004a86:	4622      	mov	r2, r4
 8004a88:	462b      	mov	r3, r5
 8004a8a:	4608      	mov	r0, r1
 8004a8c:	f000 fdb4 	bl	80055f8 <SDMMC_CmdSelDesel>
 8004a90:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <SD_InitCard+0x16e>
  {
    return errorstate;
 8004a98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a9a:	e00e      	b.n	8004aba <SD_InitCard+0x18c>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hsd->Instance, hsd->Init);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681d      	ldr	r5, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	466c      	mov	r4, sp
 8004aa4:	f103 0210 	add.w	r2, r3, #16
 8004aa8:	ca07      	ldmia	r2, {r0, r1, r2}
 8004aaa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004aae:	3304      	adds	r3, #4
 8004ab0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ab2:	4628      	mov	r0, r5
 8004ab4:	f000 fbea 	bl	800528c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3740      	adds	r7, #64	@ 0x40
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bdb0      	pop	{r4, r5, r7, pc}

08004ac2 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b086      	sub	sp, #24
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8004aca:	2300      	movs	r3, #0
 8004acc:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	617b      	str	r3, [r7, #20]
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 fdaf 	bl	8005642 <SDMMC_CmdGoIdleState>
 8004ae4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d001      	beq.n	8004af0 <SD_PowerON+0x2e>
  {
    return errorstate;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	e08c      	b.n	8004c0a <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f000 fdc4 	bl	8005682 <SDMMC_CmdOperCond>
 8004afa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d03d      	beq.n	8004b7e <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	649a      	str	r2, [r3, #72]	@ 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 8004b08:	e032      	b.n	8004b70 <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	1c5a      	adds	r2, r3, #1
 8004b0e:	60ba      	str	r2, [r7, #8]
 8004b10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d102      	bne.n	8004b1e <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004b18:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b1c:	e075      	b.n	8004c0a <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2100      	movs	r1, #0
 8004b24:	4618      	mov	r0, r3
 8004b26:	f000 fdcd 	bl	80056c4 <SDMMC_CmdAppCommand>
 8004b2a:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d002      	beq.n	8004b38 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004b32:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004b36:	e068      	b.n	8004c0a <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f000 fde4 	bl	800570c <SDMMC_CmdAppOperCommand>
 8004b44:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d002      	beq.n	8004b52 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004b4c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004b50:	e05b      	b.n	8004c0a <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2100      	movs	r1, #0
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f000 fc34 	bl	80053c6 <SDMMC_GetResponse>
 8004b5e:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	0fdb      	lsrs	r3, r3, #31
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	bf0c      	ite	eq
 8004b68:	2301      	moveq	r3, #1
 8004b6a:	2300      	movne	r3, #0
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d0c9      	beq.n	8004b0a <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	645a      	str	r2, [r3, #68]	@ 0x44
 8004b7c:	e044      	b.n	8004c08 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	649a      	str	r2, [r3, #72]	@ 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 8004b84:	e031      	b.n	8004bea <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	1c5a      	adds	r2, r3, #1
 8004b8a:	60ba      	str	r2, [r7, #8]
 8004b8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d102      	bne.n	8004b9a <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004b94:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b98:	e037      	b.n	8004c0a <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f000 fd8f 	bl	80056c4 <SDMMC_CmdAppCommand>
 8004ba6:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <SD_PowerON+0xf0>
      {
        return errorstate;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	e02b      	b.n	8004c0a <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 fda6 	bl	800570c <SDMMC_CmdAppOperCommand>
 8004bc0:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d001      	beq.n	8004bcc <SD_PowerON+0x10a>
      {
        return errorstate;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	e01e      	b.n	8004c0a <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 fbf7 	bl	80053c6 <SDMMC_GetResponse>
 8004bd8:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	0fdb      	lsrs	r3, r3, #31
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	bf0c      	ite	eq
 8004be2:	2301      	moveq	r3, #1
 8004be4:	2300      	movne	r3, #0
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0ca      	beq.n	8004b86 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	645a      	str	r2, [r3, #68]	@ 0x44
 8004c00:	e002      	b.n	8004c08 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3718      	adds	r7, #24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b084      	sub	sp, #16
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
 8004c1a:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d102      	bne.n	8004c2c <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 8004c26:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004c2a:	e018      	b.n	8004c5e <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c34:	041b      	lsls	r3, r3, #16
 8004c36:	4619      	mov	r1, r3
 8004c38:	4610      	mov	r0, r2
 8004c3a:	f000 fe38 	bl	80058ae <SDMMC_CmdSendStatus>
 8004c3e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d001      	beq.n	8004c4a <SD_SendStatus+0x38>
  {
    return errorstate;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	e009      	b.n	8004c5e <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2100      	movs	r1, #0
 8004c50:	4618      	mov	r0, r3
 8004c52:	f000 fbb8 	bl	80053c6 <SDMMC_GetResponse>
 8004c56:	4602      	mov	r2, r0
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004c66:	b580      	push	{r7, lr}
 8004c68:	b086      	sub	sp, #24
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 8004c6e:	2300      	movs	r3, #0
 8004c70:	60fb      	str	r3, [r7, #12]
 8004c72:	2300      	movs	r3, #0
 8004c74:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004c76:	2300      	movs	r3, #0
 8004c78:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2100      	movs	r1, #0
 8004c80:	4618      	mov	r0, r3
 8004c82:	f000 fba0 	bl	80053c6 <SDMMC_GetResponse>
 8004c86:	4603      	mov	r3, r0
 8004c88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004c90:	d102      	bne.n	8004c98 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004c92:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004c96:	e02f      	b.n	8004cf8 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004c98:	f107 030c 	add.w	r3, r7, #12
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f87b 	bl	8004d9a <SD_FindSCR>
 8004ca4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	e023      	b.n	8004cf8 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d01c      	beq.n	8004cf4 <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cc2:	041b      	lsls	r3, r3, #16
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	4610      	mov	r0, r2
 8004cc8:	f000 fcfc 	bl	80056c4 <SDMMC_CmdAppCommand>
 8004ccc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d001      	beq.n	8004cd8 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	e00f      	b.n	8004cf8 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2102      	movs	r1, #2
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 fd3a 	bl	8005758 <SDMMC_CmdBusWidth>
 8004ce4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d001      	beq.n	8004cf0 <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	e003      	b.n	8004cf8 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	e001      	b.n	8004cf8 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004cf4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3718      	adds	r7, #24
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 8004d08:	2300      	movs	r3, #0
 8004d0a:	60fb      	str	r3, [r7, #12]
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004d10:	2300      	movs	r3, #0
 8004d12:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2100      	movs	r1, #0
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 fb53 	bl	80053c6 <SDMMC_GetResponse>
 8004d20:	4603      	mov	r3, r0
 8004d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d2a:	d102      	bne.n	8004d32 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004d2c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004d30:	e02f      	b.n	8004d92 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004d32:	f107 030c 	add.w	r3, r7, #12
 8004d36:	4619      	mov	r1, r3
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 f82e 	bl	8004d9a <SD_FindSCR>
 8004d3e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	e023      	b.n	8004d92 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d01c      	beq.n	8004d8e <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d5c:	041b      	lsls	r3, r3, #16
 8004d5e:	4619      	mov	r1, r3
 8004d60:	4610      	mov	r0, r2
 8004d62:	f000 fcaf 	bl	80056c4 <SDMMC_CmdAppCommand>
 8004d66:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d001      	beq.n	8004d72 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	e00f      	b.n	8004d92 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2100      	movs	r1, #0
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f000 fced 	bl	8005758 <SDMMC_CmdBusWidth>
 8004d7e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	e003      	b.n	8004d92 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	e001      	b.n	8004d92 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004d8e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3718      	adds	r7, #24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004d9a:	b590      	push	{r4, r7, lr}
 8004d9c:	b08f      	sub	sp, #60	@ 0x3c
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
 8004da2:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004da4:	2300      	movs	r3, #0
 8004da6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8004da8:	f7fc fa7a 	bl	80012a0 <HAL_GetTick>
 8004dac:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t index = 0;
 8004dae:	2300      	movs	r3, #0
 8004db0:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2] = {0, 0};
 8004db2:	2300      	movs	r3, #0
 8004db4:	60fb      	str	r3, [r7, #12]
 8004db6:	2300      	movs	r3, #0
 8004db8:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2108      	movs	r1, #8
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f000 fb41 	bl	8005448 <SDMMC_CmdBlockLength>
 8004dc6:	6338      	str	r0, [r7, #48]	@ 0x30
  if(errorstate != HAL_OK)
 8004dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd0:	e0a8      	b.n	8004f24 <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dda:	041b      	lsls	r3, r3, #16
 8004ddc:	4619      	mov	r1, r3
 8004dde:	4610      	mov	r0, r2
 8004de0:	f000 fc70 	bl	80056c4 <SDMMC_CmdAppCommand>
 8004de4:	6338      	str	r0, [r7, #48]	@ 0x30
  if(errorstate != HAL_OK)
 8004de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d001      	beq.n	8004df0 <SD_FindSCR+0x56>
  {
    return errorstate;
 8004dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dee:	e099      	b.n	8004f24 <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004df0:	f04f 33ff 	mov.w	r3, #4294967295
 8004df4:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8;
 8004df6:	2308      	movs	r3, #8
 8004df8:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8004dfa:	2330      	movs	r3, #48	@ 0x30
 8004dfc:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004dfe:	2302      	movs	r3, #2
 8004e00:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004e02:	2300      	movs	r3, #0
 8004e04:	627b      	str	r3, [r7, #36]	@ 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004e06:	2301      	movs	r3, #1
 8004e08:	62bb      	str	r3, [r7, #40]	@ 0x28
  SDMMC_ConfigData(hsd->Instance, &config);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f107 0214 	add.w	r2, r7, #20
 8004e12:	4611      	mov	r1, r2
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 faeb 	bl	80053f0 <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 fcbe 	bl	80057a0 <SDMMC_CmdSendSCR>
 8004e24:	6338      	str	r0, [r7, #48]	@ 0x30
  if(errorstate != HAL_OK)
 8004e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d022      	beq.n	8004e72 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8004e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e2e:	e079      	b.n	8004f24 <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00e      	beq.n	8004e5c <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6819      	ldr	r1, [r3, #0]
 8004e42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	f107 020c 	add.w	r2, r7, #12
 8004e4a:	18d4      	adds	r4, r2, r3
 8004e4c:	4608      	mov	r0, r1
 8004e4e:	f000 fa49 	bl	80052e4 <SDMMC_ReadFIFO>
 8004e52:	4603      	mov	r3, r0
 8004e54:	6023      	str	r3, [r4, #0]
      index++;
 8004e56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e58:	3301      	adds	r3, #1
 8004e5a:	637b      	str	r3, [r7, #52]	@ 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004e5c:	f7fc fa20 	bl	80012a0 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e6a:	d102      	bne.n	8004e72 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004e6c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004e70:	e058      	b.n	8004f24 <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e78:	f240 432a 	movw	r3, #1066	@ 0x42a
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d0d6      	beq.n	8004e30 <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e88:	f003 0308 	and.w	r3, r3, #8
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d005      	beq.n	8004e9c <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2208      	movs	r2, #8
 8004e96:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004e98:	2308      	movs	r3, #8
 8004e9a:	e043      	b.n	8004f24 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d005      	beq.n	8004eb6 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2202      	movs	r2, #2
 8004eb0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	e036      	b.n	8004f24 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ebc:	f003 0320 	and.w	r3, r3, #32
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d005      	beq.n	8004ed0 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2220      	movs	r2, #32
 8004eca:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 8004ecc:	2320      	movs	r3, #32
 8004ece:	e029      	b.n	8004f24 <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8004ed8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	061a      	lsls	r2, r3, #24
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	021b      	lsls	r3, r3, #8
 8004ee2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004ee6:	431a      	orrs	r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	0a1b      	lsrs	r3, r3, #8
 8004eec:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004ef0:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	3304      	adds	r3, #4
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8004efc:	430a      	orrs	r2, r1
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004efe:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	061a      	lsls	r2, r3, #24
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	021b      	lsls	r3, r3, #8
 8004f08:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004f0c:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	0a1b      	lsrs	r3, r3, #8
 8004f12:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004f16:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	0e1b      	lsrs	r3, r3, #24
 8004f1c:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	373c      	adds	r7, #60	@ 0x3c
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd90      	pop	{r4, r7, pc}

08004f2c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d101      	bne.n	8004f40 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e025      	b.n	8004f8c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d106      	bne.n	8004f5a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 f81d 	bl	8004f94 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2202      	movs	r2, #2
 8004f5e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	3304      	adds	r3, #4
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	4610      	mov	r0, r2
 8004f6e:	f000 f867 	bl	8005040 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6818      	ldr	r0, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	6839      	ldr	r1, [r7, #0]
 8004f7e:	f000 f8d1 	bl	8005124 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d101      	bne.n	8004fc4 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	e018      	b.n	8004ff6 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	68b9      	ldr	r1, [r7, #8]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f000 f925 	bl	8005224 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d104      	bne.n	8004fec <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2205      	movs	r2, #5
 8004fe6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8004fea:	e003      	b.n	8004ff4 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  }
  
  return HAL_OK;  
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b082      	sub	sp, #8
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
 8005006:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b02      	cmp	r3, #2
 8005012:	d101      	bne.n	8005018 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005014:	2302      	movs	r3, #2
 8005016:	e00e      	b.n	8005036 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2202      	movs	r2, #2
 800501c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6839      	ldr	r1, [r7, #0]
 8005026:	4618      	mov	r0, r3
 8005028:	f000 f91d 	bl	8005266 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  return HAL_OK;   
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
	...

08005040 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800504a:	2300      	movs	r3, #0
 800504c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800504e:	2300      	movs	r3, #0
 8005050:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d027      	beq.n	80050aa <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	4b2f      	ldr	r3, [pc, #188]	@ (8005120 <FMC_SDRAM_Init+0xe0>)
 8005064:	4013      	ands	r3, r2
 8005066:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005070:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8005076:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800507c:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8005082:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8005088:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800508e:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8005094:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        Init->ReadBurst          |\
 800509a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	4313      	orrs	r3, r2
 80050a0:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	601a      	str	r2, [r3, #0]
 80050a8:	e032      	b.n	8005110 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80050b6:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80050c0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        Init->ReadBurst          |\
 80050c6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80050d4:	68ba      	ldr	r2, [r7, #8]
 80050d6:	4b12      	ldr	r3, [pc, #72]	@ (8005120 <FMC_SDRAM_Init+0xe0>)
 80050d8:	4013      	ands	r3, r2
 80050da:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80050e4:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 80050ea:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 80050f0:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 80050f6:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 80050fc:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	4313      	orrs	r3, r2
 8005102:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3714      	adds	r7, #20
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	ffff8000 	.word	0xffff8000

08005124 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005124:	b480      	push	{r7}
 8005126:	b087      	sub	sp, #28
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8005130:	2300      	movs	r3, #0
 8005132:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8005134:	2300      	movs	r3, #0
 8005136:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d02e      	beq.n	800519c <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800514a:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	3b01      	subs	r3, #1
 8005158:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800515a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	3b01      	subs	r3, #1
 8005162:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8005164:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	3b01      	subs	r3, #1
 800516c:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800516e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	3b01      	subs	r3, #1
 8005176:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8005178:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	3b01      	subs	r3, #1
 8005180:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8005182:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	3b01      	subs	r3, #1
 800518a:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800518c:	4313      	orrs	r3, r2
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	4313      	orrs	r3, r2
 8005192:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	609a      	str	r2, [r3, #8]
 800519a:	e039      	b.n	8005210 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	4b1e      	ldr	r3, [pc, #120]	@ (8005220 <FMC_SDRAM_Timing_Init+0xfc>)
 80051a6:	4013      	ands	r3, r2
 80051a8:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	3b01      	subs	r3, #1
 80051b0:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	3b01      	subs	r3, #1
 80051b8:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80051ba:	4313      	orrs	r3, r2
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	4313      	orrs	r3, r2
 80051c0:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80051ce:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	3b01      	subs	r3, #1
 80051dc:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80051de:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	3b01      	subs	r3, #1
 80051e6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80051e8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	3b01      	subs	r3, #1
 80051f0:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80051f2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	3b01      	subs	r3, #1
 80051fa:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80051fc:	4313      	orrs	r3, r2
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	4313      	orrs	r3, r2
 8005202:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	371c      	adds	r7, #28
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	ff0f0fff 	.word	0xff0f0fff

08005224 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005224:	b480      	push	{r7}
 8005226:	b087      	sub	sp, #28
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8005230:	2300      	movs	r3, #0
 8005232:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800523c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	3b01      	subs	r3, #1
 8005244:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8005246:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800524e:	4313      	orrs	r3, r2
 8005250:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	371c      	adds	r7, #28
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8005266:	b480      	push	{r7}
 8005268:	b083      	sub	sp, #12
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
 800526e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	695a      	ldr	r2, [r3, #20]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	005b      	lsls	r3, r3, #1
 8005278:	431a      	orrs	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800528c:	b084      	sub	sp, #16
 800528e:	b480      	push	{r7}
 8005290:	b085      	sub	sp, #20
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
 8005296:	f107 001c 	add.w	r0, r7, #28
 800529a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800529e:	2300      	movs	r3, #0
 80052a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80052a2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80052a4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80052a6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80052a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 80052aa:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80052ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 80052ae:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80052b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 80052b2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80052b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 80052b6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	4b07      	ldr	r3, [pc, #28]	@ (80052e0 <SDMMC_Init+0x54>)
 80052c4:	4013      	ands	r3, r2
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	431a      	orrs	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3714      	adds	r7, #20
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	b004      	add	sp, #16
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	ffff8100 	.word	0xffff8100

080052e4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 80052fe:	b480      	push	{r7}
 8005300:	b083      	sub	sp, #12
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
 8005306:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2203      	movs	r2, #3
 800532c:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0303 	and.w	r3, r3, #3
}
 800534c:	4618      	mov	r0, r3
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005362:	2300      	movs	r3, #0
 8005364:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005376:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800537c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005382:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	4313      	orrs	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	68da      	ldr	r2, [r3, #12]
 800538e:	4b06      	ldr	r3, [pc, #24]	@ (80053a8 <SDMMC_SendCommand+0x50>)
 8005390:	4013      	ands	r3, r2
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	431a      	orrs	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3714      	adds	r7, #20
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr
 80053a8:	fffff000 	.word	0xfffff000

080053ac <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	b2db      	uxtb	r3, r3
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80053c6:	b480      	push	{r7}
 80053c8:	b085      	sub	sp, #20
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
 80053ce:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 80053d0:	2300      	movs	r3, #0
 80053d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	3314      	adds	r3, #20
 80053d8:	461a      	mov	r2, r3
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	4413      	add	r3, r2
 80053de:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
}  
 80053e4:	4618      	mov	r0, r3
 80053e6:	3714      	adds	r7, #20
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <SDMMC_ConfigData>:
  * @param  Data  pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b085      	sub	sp, #20
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80053fa:	2300      	movs	r3, #0
 80053fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	685a      	ldr	r2, [r3, #4]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005416:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800541c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005422:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	4313      	orrs	r3, r2
 8005428:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800542e:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	431a      	orrs	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800543a:	2300      	movs	r3, #0

}
 800543c:	4618      	mov	r0, r3
 800543e:	3714      	adds	r7, #20
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b088      	sub	sp, #32
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005452:	2300      	movs	r3, #0
 8005454:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800545a:	2310      	movs	r3, #16
 800545c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800545e:	2340      	movs	r3, #64	@ 0x40
 8005460:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005462:	2300      	movs	r3, #0
 8005464:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005466:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800546a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800546c:	f107 0308 	add.w	r3, r7, #8
 8005470:	4619      	mov	r1, r3
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f7ff ff70 	bl	8005358 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8005478:	f241 3288 	movw	r2, #5000	@ 0x1388
 800547c:	2110      	movs	r1, #16
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 fa64 	bl	800594c <SDMMC_GetCmdResp1>
 8005484:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005486:	69fb      	ldr	r3, [r7, #28]
}
 8005488:	4618      	mov	r0, r3
 800548a:	3720      	adds	r7, #32
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b088      	sub	sp, #32
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800549a:	2300      	movs	r3, #0
 800549c:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80054a2:	2311      	movs	r3, #17
 80054a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80054a6:	2340      	movs	r3, #64	@ 0x40
 80054a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80054aa:	2300      	movs	r3, #0
 80054ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80054ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80054b2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80054b4:	f107 0308 	add.w	r3, r7, #8
 80054b8:	4619      	mov	r1, r3
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f7ff ff4c 	bl	8005358 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80054c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054c4:	2111      	movs	r1, #17
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 fa40 	bl	800594c <SDMMC_GetCmdResp1>
 80054cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054ce:	69fb      	ldr	r3, [r7, #28]
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3720      	adds	r7, #32
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b088      	sub	sp, #32
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80054e2:	2300      	movs	r3, #0
 80054e4:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80054ea:	2312      	movs	r3, #18
 80054ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80054ee:	2340      	movs	r3, #64	@ 0x40
 80054f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80054f2:	2300      	movs	r3, #0
 80054f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80054f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80054fa:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80054fc:	f107 0308 	add.w	r3, r7, #8
 8005500:	4619      	mov	r1, r3
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f7ff ff28 	bl	8005358 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005508:	f241 3288 	movw	r2, #5000	@ 0x1388
 800550c:	2112      	movs	r1, #18
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 fa1c 	bl	800594c <SDMMC_GetCmdResp1>
 8005514:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005516:	69fb      	ldr	r3, [r7, #28]
}
 8005518:	4618      	mov	r0, r3
 800551a:	3720      	adds	r7, #32
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b088      	sub	sp, #32
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800552a:	2300      	movs	r3, #0
 800552c:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005532:	2318      	movs	r3, #24
 8005534:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005536:	2340      	movs	r3, #64	@ 0x40
 8005538:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800553a:	2300      	movs	r3, #0
 800553c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800553e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005542:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005544:	f107 0308 	add.w	r3, r7, #8
 8005548:	4619      	mov	r1, r3
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7ff ff04 	bl	8005358 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005550:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005554:	2118      	movs	r1, #24
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 f9f8 	bl	800594c <SDMMC_GetCmdResp1>
 800555c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800555e:	69fb      	ldr	r3, [r7, #28]
}
 8005560:	4618      	mov	r0, r3
 8005562:	3720      	adds	r7, #32
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b088      	sub	sp, #32
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005572:	2300      	movs	r3, #0
 8005574:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800557a:	2319      	movs	r3, #25
 800557c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800557e:	2340      	movs	r3, #64	@ 0x40
 8005580:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005582:	2300      	movs	r3, #0
 8005584:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005586:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800558a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800558c:	f107 0308 	add.w	r3, r7, #8
 8005590:	4619      	mov	r1, r3
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f7ff fee0 	bl	8005358 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005598:	f241 3288 	movw	r2, #5000	@ 0x1388
 800559c:	2119      	movs	r1, #25
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f9d4 	bl	800594c <SDMMC_GetCmdResp1>
 80055a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055a6:	69fb      	ldr	r3, [r7, #28]
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3720      	adds	r7, #32
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b088      	sub	sp, #32
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80055b8:	2300      	movs	r3, #0
 80055ba:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0;
 80055bc:	2300      	movs	r3, #0
 80055be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80055c0:	230c      	movs	r3, #12
 80055c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80055c4:	2340      	movs	r3, #64	@ 0x40
 80055c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80055c8:	2300      	movs	r3, #0
 80055ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80055cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80055d0:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80055d2:	f107 0308 	add.w	r3, r7, #8
 80055d6:	4619      	mov	r1, r3
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f7ff febd 	bl	8005358 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 80055de:	4a05      	ldr	r2, [pc, #20]	@ (80055f4 <SDMMC_CmdStopTransfer+0x44>)
 80055e0:	210c      	movs	r1, #12
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f9b2 	bl	800594c <SDMMC_GetCmdResp1>
 80055e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055ea:	69fb      	ldr	r3, [r7, #28]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3720      	adds	r7, #32
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	05f5e100 	.word	0x05f5e100

080055f8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b08a      	sub	sp, #40	@ 0x28
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005604:	2300      	movs	r3, #0
 8005606:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800560c:	2307      	movs	r3, #7
 800560e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005610:	2340      	movs	r3, #64	@ 0x40
 8005612:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005614:	2300      	movs	r3, #0
 8005616:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005618:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800561c:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800561e:	f107 0310 	add.w	r3, r7, #16
 8005622:	4619      	mov	r1, r3
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f7ff fe97 	bl	8005358 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800562a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800562e:	2107      	movs	r1, #7
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f000 f98b 	bl	800594c <SDMMC_GetCmdResp1>
 8005636:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8005638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800563a:	4618      	mov	r0, r3
 800563c:	3728      	adds	r7, #40	@ 0x28
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8005642:	b580      	push	{r7, lr}
 8005644:	b088      	sub	sp, #32
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800564a:	2300      	movs	r3, #0
 800564c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 800564e:	2300      	movs	r3, #0
 8005650:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005652:	2300      	movs	r3, #0
 8005654:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8005656:	2300      	movs	r3, #0
 8005658:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800565a:	2300      	movs	r3, #0
 800565c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800565e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005662:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005664:	f107 0308 	add.w	r3, r7, #8
 8005668:	4619      	mov	r1, r3
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f7ff fe74 	bl	8005358 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 f941 	bl	80058f8 <SDMMC_GetCmdError>
 8005676:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005678:	69fb      	ldr	r3, [r7, #28]
}
 800567a:	4618      	mov	r0, r3
 800567c:	3720      	adds	r7, #32
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b088      	sub	sp, #32
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800568a:	2300      	movs	r3, #0
 800568c:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800568e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8005692:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005694:	2308      	movs	r3, #8
 8005696:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005698:	2340      	movs	r3, #64	@ 0x40
 800569a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800569c:	2300      	movs	r3, #0
 800569e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80056a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80056a4:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80056a6:	f107 0308 	add.w	r3, r7, #8
 80056aa:	4619      	mov	r1, r3
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f7ff fe53 	bl	8005358 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 fb12 	bl	8005cdc <SDMMC_GetCmdResp7>
 80056b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056ba:	69fb      	ldr	r3, [r7, #28]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3720      	adds	r7, #32
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b088      	sub	sp, #32
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80056ce:	2300      	movs	r3, #0
 80056d0:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80056d6:	2337      	movs	r3, #55	@ 0x37
 80056d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80056da:	2340      	movs	r3, #64	@ 0x40
 80056dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80056de:	2300      	movs	r3, #0
 80056e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80056e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80056e6:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80056e8:	f107 0308 	add.w	r3, r7, #8
 80056ec:	4619      	mov	r1, r3
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f7ff fe32 	bl	8005358 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80056f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056f8:	2137      	movs	r1, #55	@ 0x37
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f926 	bl	800594c <SDMMC_GetCmdResp1>
 8005700:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005702:	69fb      	ldr	r3, [r7, #28]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3720      	adds	r7, #32
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t SdType)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b088      	sub	sp, #32
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005716:	2300      	movs	r3, #0
 8005718:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800571a:	683a      	ldr	r2, [r7, #0]
 800571c:	4b0d      	ldr	r3, [pc, #52]	@ (8005754 <SDMMC_CmdAppOperCommand+0x48>)
 800571e:	4313      	orrs	r3, r2
 8005720:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005722:	2329      	movs	r3, #41	@ 0x29
 8005724:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005726:	2340      	movs	r3, #64	@ 0x40
 8005728:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800572a:	2300      	movs	r3, #0
 800572c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800572e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005732:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005734:	f107 0308 	add.w	r3, r7, #8
 8005738:	4619      	mov	r1, r3
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f7ff fe0c 	bl	8005358 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 fa29 	bl	8005b98 <SDMMC_GetCmdResp3>
 8005746:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005748:	69fb      	ldr	r3, [r7, #28]
}
 800574a:	4618      	mov	r0, r3
 800574c:	3720      	adds	r7, #32
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	80100000 	.word	0x80100000

08005758 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b088      	sub	sp, #32
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005762:	2300      	movs	r3, #0
 8005764:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800576a:	2306      	movs	r3, #6
 800576c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800576e:	2340      	movs	r3, #64	@ 0x40
 8005770:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005772:	2300      	movs	r3, #0
 8005774:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005776:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800577a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800577c:	f107 0308 	add.w	r3, r7, #8
 8005780:	4619      	mov	r1, r3
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f7ff fde8 	bl	8005358 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8005788:	f241 3288 	movw	r2, #5000	@ 0x1388
 800578c:	2106      	movs	r1, #6
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 f8dc 	bl	800594c <SDMMC_GetCmdResp1>
 8005794:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005796:	69fb      	ldr	r3, [r7, #28]
}
 8005798:	4618      	mov	r0, r3
 800579a:	3720      	adds	r7, #32
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b088      	sub	sp, #32
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80057a8:	2300      	movs	r3, #0
 80057aa:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0;
 80057ac:	2300      	movs	r3, #0
 80057ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80057b0:	2333      	movs	r3, #51	@ 0x33
 80057b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80057b4:	2340      	movs	r3, #64	@ 0x40
 80057b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80057b8:	2300      	movs	r3, #0
 80057ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80057bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80057c0:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80057c2:	f107 0308 	add.w	r3, r7, #8
 80057c6:	4619      	mov	r1, r3
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f7ff fdc5 	bl	8005358 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80057ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057d2:	2133      	movs	r1, #51	@ 0x33
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 f8b9 	bl	800594c <SDMMC_GetCmdResp1>
 80057da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057dc:	69fb      	ldr	r3, [r7, #28]
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3720      	adds	r7, #32
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b088      	sub	sp, #32
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80057ee:	2300      	movs	r3, #0
 80057f0:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 80057f2:	2300      	movs	r3, #0
 80057f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80057f6:	2302      	movs	r3, #2
 80057f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80057fa:	23c0      	movs	r3, #192	@ 0xc0
 80057fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80057fe:	2300      	movs	r3, #0
 8005800:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005802:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005806:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005808:	f107 0308 	add.w	r3, r7, #8
 800580c:	4619      	mov	r1, r3
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f7ff fda2 	bl	8005358 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 f97f 	bl	8005b18 <SDMMC_GetCmdResp2>
 800581a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800581c:	69fb      	ldr	r3, [r7, #28]
}
 800581e:	4618      	mov	r0, r3
 8005820:	3720      	adds	r7, #32
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b088      	sub	sp, #32
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
 800582e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005830:	2300      	movs	r3, #0
 8005832:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005838:	2309      	movs	r3, #9
 800583a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800583c:	23c0      	movs	r3, #192	@ 0xc0
 800583e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005840:	2300      	movs	r3, #0
 8005842:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005844:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005848:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800584a:	f107 0308 	add.w	r3, r7, #8
 800584e:	4619      	mov	r1, r3
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f7ff fd81 	bl	8005358 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 f95e 	bl	8005b18 <SDMMC_GetCmdResp2>
 800585c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800585e:	69fb      	ldr	r3, [r7, #28]
}
 8005860:	4618      	mov	r0, r3
 8005862:	3720      	adds	r7, #32
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b088      	sub	sp, #32
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005872:	2300      	movs	r3, #0
 8005874:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 8005876:	2300      	movs	r3, #0
 8005878:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800587a:	2303      	movs	r3, #3
 800587c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800587e:	2340      	movs	r3, #64	@ 0x40
 8005880:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005882:	2300      	movs	r3, #0
 8005884:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005886:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800588a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800588c:	f107 0308 	add.w	r3, r7, #8
 8005890:	4619      	mov	r1, r3
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f7ff fd60 	bl	8005358 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005898:	683a      	ldr	r2, [r7, #0]
 800589a:	2103      	movs	r1, #3
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 f9af 	bl	8005c00 <SDMMC_GetCmdResp6>
 80058a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80058a4:	69fb      	ldr	r3, [r7, #28]
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3720      	adds	r7, #32
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b088      	sub	sp, #32
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
 80058b6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80058b8:	2300      	movs	r3, #0
 80058ba:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80058c0:	230d      	movs	r3, #13
 80058c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80058c4:	2340      	movs	r3, #64	@ 0x40
 80058c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80058c8:	2300      	movs	r3, #0
 80058ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80058cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80058d0:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80058d2:	f107 0308 	add.w	r3, r7, #8
 80058d6:	4619      	mov	r1, r3
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f7ff fd3d 	bl	8005358 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80058de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058e2:	210d      	movs	r1, #13
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 f831 	bl	800594c <SDMMC_GetCmdResp1>
 80058ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80058ec:	69fb      	ldr	r3, [r7, #28]
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3720      	adds	r7, #32
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
	...

080058f8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80058f8:	b490      	push	{r4, r7}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005900:	4b10      	ldr	r3, [pc, #64]	@ (8005944 <SDMMC_GetCmdError+0x4c>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a10      	ldr	r2, [pc, #64]	@ (8005948 <SDMMC_GetCmdError+0x50>)
 8005906:	fba2 2303 	umull	r2, r3, r2, r3
 800590a:	0a5b      	lsrs	r3, r3, #9
 800590c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005910:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8005914:	4623      	mov	r3, r4
 8005916:	1e5c      	subs	r4, r3, #1
 8005918:	2b00      	cmp	r3, #0
 800591a:	d102      	bne.n	8005922 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800591c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005920:	e00a      	b.n	8005938 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800592a:	2b00      	cmp	r3, #0
 800592c:	d0f2      	beq.n	8005914 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8005934:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3708      	adds	r7, #8
 800593c:	46bd      	mov	sp, r7
 800593e:	bc90      	pop	{r4, r7}
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	20000004 	.word	0x20000004
 8005948:	10624dd3 	.word	0x10624dd3

0800594c <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800594c:	b590      	push	{r4, r7, lr}
 800594e:	b087      	sub	sp, #28
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	460b      	mov	r3, r1
 8005956:	607a      	str	r2, [r7, #4]
 8005958:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800595a:	4b6c      	ldr	r3, [pc, #432]	@ (8005b0c <SDMMC_GetCmdResp1+0x1c0>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a6c      	ldr	r2, [pc, #432]	@ (8005b10 <SDMMC_GetCmdResp1+0x1c4>)
 8005960:	fba2 2303 	umull	r2, r3, r2, r3
 8005964:	0a5b      	lsrs	r3, r3, #9
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800596c:	4623      	mov	r3, r4
 800596e:	1e5c      	subs	r4, r3, #1
 8005970:	2b00      	cmp	r3, #0
 8005972:	d102      	bne.n	800597a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005974:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005978:	e0c3      	b.n	8005b02 <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800597e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005982:	2b00      	cmp	r3, #0
 8005984:	d0f2      	beq.n	800596c <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800598a:	f003 0304 	and.w	r3, r3, #4
 800598e:	2b00      	cmp	r3, #0
 8005990:	d004      	beq.n	800599c <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2204      	movs	r2, #4
 8005996:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005998:	2304      	movs	r3, #4
 800599a:	e0b2      	b.n	8005b02 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059a0:	f003 0301 	and.w	r3, r3, #1
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d004      	beq.n	80059b2 <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2201      	movs	r2, #1
 80059ac:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e0a7      	b.n	8005b02 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f7ff fcfa 	bl	80053ac <SDMMC_GetCommandResponse>
 80059b8:	4603      	mov	r3, r0
 80059ba:	461a      	mov	r2, r3
 80059bc:	7afb      	ldrb	r3, [r7, #11]
 80059be:	4293      	cmp	r3, r2
 80059c0:	d001      	beq.n	80059c6 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e09d      	b.n	8005b02 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 80059cc:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80059ce:	2100      	movs	r1, #0
 80059d0:	68f8      	ldr	r0, [r7, #12]
 80059d2:	f7ff fcf8 	bl	80053c6 <SDMMC_GetResponse>
 80059d6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	4b4e      	ldr	r3, [pc, #312]	@ (8005b14 <SDMMC_GetCmdResp1+0x1c8>)
 80059dc:	4013      	ands	r3, r2
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 80059e2:	2300      	movs	r3, #0
 80059e4:	e08d      	b.n	8005b02 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	da02      	bge.n	80059f2 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80059ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80059f0:	e087      	b.n	8005b02 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d001      	beq.n	8005a00 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80059fc:	2340      	movs	r3, #64	@ 0x40
 80059fe:	e080      	b.n	8005b02 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d001      	beq.n	8005a0e <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005a0a:	2380      	movs	r3, #128	@ 0x80
 8005a0c:	e079      	b.n	8005b02 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d002      	beq.n	8005a1e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005a18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005a1c:	e071      	b.n	8005b02 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d002      	beq.n	8005a2e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005a28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005a2c:	e069      	b.n	8005b02 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d002      	beq.n	8005a3e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005a38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a3c:	e061      	b.n	8005b02 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d002      	beq.n	8005a4e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005a48:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005a4c:	e059      	b.n	8005b02 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d002      	beq.n	8005a5e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005a58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005a5c:	e051      	b.n	8005b02 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d002      	beq.n	8005a6e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005a68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005a6c:	e049      	b.n	8005b02 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d002      	beq.n	8005a7e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005a78:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005a7c:	e041      	b.n	8005b02 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d002      	beq.n	8005a8e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 8005a88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a8c:	e039      	b.n	8005b02 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d002      	beq.n	8005a9e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005a98:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005a9c:	e031      	b.n	8005b02 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d002      	beq.n	8005aae <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005aa8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005aac:	e029      	b.n	8005b02 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d002      	beq.n	8005abe <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005ab8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005abc:	e021      	b.n	8005b02 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d002      	beq.n	8005ace <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005ac8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005acc:	e019      	b.n	8005b02 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d002      	beq.n	8005ade <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005ad8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005adc:	e011      	b.n	8005b02 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d002      	beq.n	8005aee <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005ae8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005aec:	e009      	b.n	8005b02 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	f003 0308 	and.w	r3, r3, #8
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d002      	beq.n	8005afe <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005af8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8005afc:	e001      	b.n	8005b02 <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005afe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	371c      	adds	r7, #28
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd90      	pop	{r4, r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	20000004 	.word	0x20000004
 8005b10:	10624dd3 	.word	0x10624dd3
 8005b14:	fdffe008 	.word	0xfdffe008

08005b18 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8005b18:	b490      	push	{r4, r7}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005b20:	4b1b      	ldr	r3, [pc, #108]	@ (8005b90 <SDMMC_GetCmdResp2+0x78>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a1b      	ldr	r2, [pc, #108]	@ (8005b94 <SDMMC_GetCmdResp2+0x7c>)
 8005b26:	fba2 2303 	umull	r2, r3, r2, r3
 8005b2a:	0a5b      	lsrs	r3, r3, #9
 8005b2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b30:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8005b34:	4623      	mov	r3, r4
 8005b36:	1e5c      	subs	r4, r3, #1
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d102      	bne.n	8005b42 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005b3c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005b40:	e020      	b.n	8005b84 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b46:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d0f2      	beq.n	8005b34 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b52:	f003 0304 	and.w	r3, r3, #4
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d004      	beq.n	8005b64 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2204      	movs	r2, #4
 8005b5e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005b60:	2304      	movs	r3, #4
 8005b62:	e00f      	b.n	8005b84 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b68:	f003 0301 	and.w	r3, r3, #1
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d004      	beq.n	8005b7a <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e004      	b.n	8005b84 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8005b80:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3708      	adds	r7, #8
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bc90      	pop	{r4, r7}
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	20000004 	.word	0x20000004
 8005b94:	10624dd3 	.word	0x10624dd3

08005b98 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8005b98:	b490      	push	{r4, r7}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005ba0:	4b15      	ldr	r3, [pc, #84]	@ (8005bf8 <SDMMC_GetCmdResp3+0x60>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a15      	ldr	r2, [pc, #84]	@ (8005bfc <SDMMC_GetCmdResp3+0x64>)
 8005ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8005baa:	0a5b      	lsrs	r3, r3, #9
 8005bac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bb0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8005bb4:	4623      	mov	r3, r4
 8005bb6:	1e5c      	subs	r4, r3, #1
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d102      	bne.n	8005bc2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005bbc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005bc0:	e015      	b.n	8005bee <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bc6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d0f2      	beq.n	8005bb4 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bd2:	f003 0304 	and.w	r3, r3, #4
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d004      	beq.n	8005be4 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2204      	movs	r2, #4
 8005bde:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005be0:	2304      	movs	r3, #4
 8005be2:	e004      	b.n	8005bee <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8005bea:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3708      	adds	r7, #8
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bc90      	pop	{r4, r7}
 8005bf6:	4770      	bx	lr
 8005bf8:	20000004 	.word	0x20000004
 8005bfc:	10624dd3 	.word	0x10624dd3

08005c00 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005c00:	b590      	push	{r4, r7, lr}
 8005c02:	b087      	sub	sp, #28
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	460b      	mov	r3, r1
 8005c0a:	607a      	str	r2, [r7, #4]
 8005c0c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005c0e:	4b31      	ldr	r3, [pc, #196]	@ (8005cd4 <SDMMC_GetCmdResp6+0xd4>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a31      	ldr	r2, [pc, #196]	@ (8005cd8 <SDMMC_GetCmdResp6+0xd8>)
 8005c14:	fba2 2303 	umull	r2, r3, r2, r3
 8005c18:	0a5b      	lsrs	r3, r3, #9
 8005c1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c1e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8005c22:	4623      	mov	r3, r4
 8005c24:	1e5c      	subs	r4, r3, #1
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d102      	bne.n	8005c30 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005c2a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005c2e:	e04c      	b.n	8005cca <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c34:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d0f2      	beq.n	8005c22 <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c40:	f003 0304 	and.w	r3, r3, #4
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d004      	beq.n	8005c52 <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2204      	movs	r2, #4
 8005c4c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005c4e:	2304      	movs	r3, #4
 8005c50:	e03b      	b.n	8005cca <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d004      	beq.n	8005c68 <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2201      	movs	r2, #1
 8005c62:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e030      	b.n	8005cca <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005c68:	68f8      	ldr	r0, [r7, #12]
 8005c6a:	f7ff fb9f 	bl	80053ac <SDMMC_GetCommandResponse>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	461a      	mov	r2, r3
 8005c72:	7afb      	ldrb	r3, [r7, #11]
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d001      	beq.n	8005c7c <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e026      	b.n	8005cca <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8005c82:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005c84:	2100      	movs	r1, #0
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f7ff fb9d 	bl	80053c6 <SDMMC_GetResponse>
 8005c8c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d106      	bne.n	8005ca6 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	0c1b      	lsrs	r3, r3, #16
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	e011      	b.n	8005cca <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d002      	beq.n	8005cb6 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005cb0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005cb4:	e009      	b.n	8005cca <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d002      	beq.n	8005cc6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005cc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005cc4:	e001      	b.n	8005cca <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005cc6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	371c      	adds	r7, #28
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd90      	pop	{r4, r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	20000004 	.word	0x20000004
 8005cd8:	10624dd3 	.word	0x10624dd3

08005cdc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8005cdc:	b490      	push	{r4, r7}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005ce4:	4b18      	ldr	r3, [pc, #96]	@ (8005d48 <SDMMC_GetCmdResp7+0x6c>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a18      	ldr	r2, [pc, #96]	@ (8005d4c <SDMMC_GetCmdResp7+0x70>)
 8005cea:	fba2 2303 	umull	r2, r3, r2, r3
 8005cee:	0a5b      	lsrs	r3, r3, #9
 8005cf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cf4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8005cf8:	4623      	mov	r3, r4
 8005cfa:	1e5c      	subs	r4, r3, #1
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d102      	bne.n	8005d06 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005d00:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005d04:	e01a      	b.n	8005d3c <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d0a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d0f2      	beq.n	8005cf8 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d16:	f003 0304 	and.w	r3, r3, #4
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d004      	beq.n	8005d28 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2240      	movs	r2, #64	@ 0x40
 8005d22:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005d24:	2304      	movs	r3, #4
 8005d26:	e009      	b.n	8005d3c <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d002      	beq.n	8005d3a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2240      	movs	r2, #64	@ 0x40
 8005d38:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005d3a:	2300      	movs	r3, #0
  
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3708      	adds	r7, #8
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bc90      	pop	{r4, r7}
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	20000004 	.word	0x20000004
 8005d4c:	10624dd3 	.word	0x10624dd3

08005d50 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	4603      	mov	r3, r0
 8005d58:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005d5a:	79fb      	ldrb	r3, [r7, #7]
 8005d5c:	4a08      	ldr	r2, [pc, #32]	@ (8005d80 <disk_status+0x30>)
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	4413      	add	r3, r2
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	79fa      	ldrb	r2, [r7, #7]
 8005d68:	4905      	ldr	r1, [pc, #20]	@ (8005d80 <disk_status+0x30>)
 8005d6a:	440a      	add	r2, r1
 8005d6c:	7b12      	ldrb	r2, [r2, #12]
 8005d6e:	4610      	mov	r0, r2
 8005d70:	4798      	blx	r3
 8005d72:	4603      	mov	r3, r0
 8005d74:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3710      	adds	r7, #16
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	20000854 	.word	0x20000854

08005d84 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005d92:	79fb      	ldrb	r3, [r7, #7]
 8005d94:	4a0d      	ldr	r2, [pc, #52]	@ (8005dcc <disk_initialize+0x48>)
 8005d96:	5cd3      	ldrb	r3, [r2, r3]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d111      	bne.n	8005dc0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005d9c:	79fb      	ldrb	r3, [r7, #7]
 8005d9e:	4a0b      	ldr	r2, [pc, #44]	@ (8005dcc <disk_initialize+0x48>)
 8005da0:	2101      	movs	r1, #1
 8005da2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005da4:	79fb      	ldrb	r3, [r7, #7]
 8005da6:	4a09      	ldr	r2, [pc, #36]	@ (8005dcc <disk_initialize+0x48>)
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	4413      	add	r3, r2
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	79fa      	ldrb	r2, [r7, #7]
 8005db2:	4906      	ldr	r1, [pc, #24]	@ (8005dcc <disk_initialize+0x48>)
 8005db4:	440a      	add	r2, r1
 8005db6:	7b12      	ldrb	r2, [r2, #12]
 8005db8:	4610      	mov	r0, r2
 8005dba:	4798      	blx	r3
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	20000854 	.word	0x20000854

08005dd0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005dd0:	b590      	push	{r4, r7, lr}
 8005dd2:	b087      	sub	sp, #28
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60b9      	str	r1, [r7, #8]
 8005dd8:	607a      	str	r2, [r7, #4]
 8005dda:	603b      	str	r3, [r7, #0]
 8005ddc:	4603      	mov	r3, r0
 8005dde:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005de0:	7bfb      	ldrb	r3, [r7, #15]
 8005de2:	4a0a      	ldr	r2, [pc, #40]	@ (8005e0c <disk_read+0x3c>)
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	689c      	ldr	r4, [r3, #8]
 8005dec:	7bfb      	ldrb	r3, [r7, #15]
 8005dee:	4a07      	ldr	r2, [pc, #28]	@ (8005e0c <disk_read+0x3c>)
 8005df0:	4413      	add	r3, r2
 8005df2:	7b18      	ldrb	r0, [r3, #12]
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	68b9      	ldr	r1, [r7, #8]
 8005dfa:	47a0      	blx	r4
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	75fb      	strb	r3, [r7, #23]
  return res;
 8005e00:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	371c      	adds	r7, #28
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd90      	pop	{r4, r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	20000854 	.word	0x20000854

08005e10 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005e10:	b590      	push	{r4, r7, lr}
 8005e12:	b087      	sub	sp, #28
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60b9      	str	r1, [r7, #8]
 8005e18:	607a      	str	r2, [r7, #4]
 8005e1a:	603b      	str	r3, [r7, #0]
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005e20:	7bfb      	ldrb	r3, [r7, #15]
 8005e22:	4a0a      	ldr	r2, [pc, #40]	@ (8005e4c <disk_write+0x3c>)
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4413      	add	r3, r2
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	68dc      	ldr	r4, [r3, #12]
 8005e2c:	7bfb      	ldrb	r3, [r7, #15]
 8005e2e:	4a07      	ldr	r2, [pc, #28]	@ (8005e4c <disk_write+0x3c>)
 8005e30:	4413      	add	r3, r2
 8005e32:	7b18      	ldrb	r0, [r3, #12]
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	68b9      	ldr	r1, [r7, #8]
 8005e3a:	47a0      	blx	r4
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	371c      	adds	r7, #28
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd90      	pop	{r4, r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	20000854 	.word	0x20000854

08005e50 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	4603      	mov	r3, r0
 8005e58:	603a      	str	r2, [r7, #0]
 8005e5a:	71fb      	strb	r3, [r7, #7]
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005e60:	79fb      	ldrb	r3, [r7, #7]
 8005e62:	4a09      	ldr	r2, [pc, #36]	@ (8005e88 <disk_ioctl+0x38>)
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4413      	add	r3, r2
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	79fa      	ldrb	r2, [r7, #7]
 8005e6e:	4906      	ldr	r1, [pc, #24]	@ (8005e88 <disk_ioctl+0x38>)
 8005e70:	440a      	add	r2, r1
 8005e72:	7b10      	ldrb	r0, [r2, #12]
 8005e74:	79b9      	ldrb	r1, [r7, #6]
 8005e76:	683a      	ldr	r2, [r7, #0]
 8005e78:	4798      	blx	r3
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	73fb      	strb	r3, [r7, #15]
  return res;
 8005e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	20000854 	.word	0x20000854

08005e8c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	af00      	add	r7, sp, #0
  return 0;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005eac:	89fb      	ldrh	r3, [r7, #14]
 8005eae:	021b      	lsls	r3, r3, #8
 8005eb0:	b21a      	sxth	r2, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	b21b      	sxth	r3, r3
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	b21b      	sxth	r3, r3
 8005ebc:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005ebe:	89fb      	ldrh	r3, [r7, #14]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3714      	adds	r7, #20
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	3303      	adds	r3, #3
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	021b      	lsls	r3, r3, #8
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	3202      	adds	r2, #2
 8005ee4:	7812      	ldrb	r2, [r2, #0]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	021b      	lsls	r3, r3, #8
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	3201      	adds	r2, #1
 8005ef2:	7812      	ldrb	r2, [r2, #0]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	021b      	lsls	r3, r3, #8
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	7812      	ldrb	r2, [r2, #0]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	60fb      	str	r3, [r7, #12]
	return rv;
 8005f04:	68fb      	ldr	r3, [r7, #12]
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3714      	adds	r7, #20
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr

08005f12 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005f12:	b480      	push	{r7}
 8005f14:	b083      	sub	sp, #12
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	1c5a      	adds	r2, r3, #1
 8005f22:	607a      	str	r2, [r7, #4]
 8005f24:	887a      	ldrh	r2, [r7, #2]
 8005f26:	b2d2      	uxtb	r2, r2
 8005f28:	701a      	strb	r2, [r3, #0]
 8005f2a:	887b      	ldrh	r3, [r7, #2]
 8005f2c:	0a1b      	lsrs	r3, r3, #8
 8005f2e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	1c5a      	adds	r2, r3, #1
 8005f34:	607a      	str	r2, [r7, #4]
 8005f36:	887a      	ldrh	r2, [r7, #2]
 8005f38:	b2d2      	uxtb	r2, r2
 8005f3a:	701a      	strb	r2, [r3, #0]
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	1c5a      	adds	r2, r3, #1
 8005f56:	607a      	str	r2, [r7, #4]
 8005f58:	683a      	ldr	r2, [r7, #0]
 8005f5a:	b2d2      	uxtb	r2, r2
 8005f5c:	701a      	strb	r2, [r3, #0]
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	0a1b      	lsrs	r3, r3, #8
 8005f62:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	1c5a      	adds	r2, r3, #1
 8005f68:	607a      	str	r2, [r7, #4]
 8005f6a:	683a      	ldr	r2, [r7, #0]
 8005f6c:	b2d2      	uxtb	r2, r2
 8005f6e:	701a      	strb	r2, [r3, #0]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	0a1b      	lsrs	r3, r3, #8
 8005f74:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	1c5a      	adds	r2, r3, #1
 8005f7a:	607a      	str	r2, [r7, #4]
 8005f7c:	683a      	ldr	r2, [r7, #0]
 8005f7e:	b2d2      	uxtb	r2, r2
 8005f80:	701a      	strb	r2, [r3, #0]
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	0a1b      	lsrs	r3, r3, #8
 8005f86:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	1c5a      	adds	r2, r3, #1
 8005f8c:	607a      	str	r2, [r7, #4]
 8005f8e:	683a      	ldr	r2, [r7, #0]
 8005f90:	b2d2      	uxtb	r2, r2
 8005f92:	701a      	strb	r2, [r3, #0]
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005fa0:	b480      	push	{r7}
 8005fa2:	b087      	sub	sp, #28
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00d      	beq.n	8005fd6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	1c53      	adds	r3, r2, #1
 8005fbe:	613b      	str	r3, [r7, #16]
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	1c59      	adds	r1, r3, #1
 8005fc4:	6179      	str	r1, [r7, #20]
 8005fc6:	7812      	ldrb	r2, [r2, #0]
 8005fc8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	607b      	str	r3, [r7, #4]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1f1      	bne.n	8005fba <mem_cpy+0x1a>
	}
}
 8005fd6:	bf00      	nop
 8005fd8:	371c      	adds	r7, #28
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr

08005fe2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005fe2:	b480      	push	{r7}
 8005fe4:	b087      	sub	sp, #28
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	60f8      	str	r0, [r7, #12]
 8005fea:	60b9      	str	r1, [r7, #8]
 8005fec:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	1c5a      	adds	r2, r3, #1
 8005ff6:	617a      	str	r2, [r7, #20]
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	b2d2      	uxtb	r2, r2
 8005ffc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	3b01      	subs	r3, #1
 8006002:	607b      	str	r3, [r7, #4]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1f3      	bne.n	8005ff2 <mem_set+0x10>
}
 800600a:	bf00      	nop
 800600c:	bf00      	nop
 800600e:	371c      	adds	r7, #28
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006018:	b480      	push	{r7}
 800601a:	b089      	sub	sp, #36	@ 0x24
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	61fb      	str	r3, [r7, #28]
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800602c:	2300      	movs	r3, #0
 800602e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	1c5a      	adds	r2, r3, #1
 8006034:	61fa      	str	r2, [r7, #28]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	4619      	mov	r1, r3
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	1c5a      	adds	r2, r3, #1
 800603e:	61ba      	str	r2, [r7, #24]
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	1acb      	subs	r3, r1, r3
 8006044:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	3b01      	subs	r3, #1
 800604a:	607b      	str	r3, [r7, #4]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d002      	beq.n	8006058 <mem_cmp+0x40>
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d0eb      	beq.n	8006030 <mem_cmp+0x18>

	return r;
 8006058:	697b      	ldr	r3, [r7, #20]
}
 800605a:	4618      	mov	r0, r3
 800605c:	3724      	adds	r7, #36	@ 0x24
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006066:	b480      	push	{r7}
 8006068:	b083      	sub	sp, #12
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
 800606e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006070:	e002      	b.n	8006078 <chk_chr+0x12>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	3301      	adds	r3, #1
 8006076:	607b      	str	r3, [r7, #4]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d005      	beq.n	800608c <chk_chr+0x26>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	461a      	mov	r2, r3
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	4293      	cmp	r3, r2
 800608a:	d1f2      	bne.n	8006072 <chk_chr+0xc>
	return *str;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	781b      	ldrb	r3, [r3, #0]
}
 8006090:	4618      	mov	r0, r3
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800609c:	b480      	push	{r7}
 800609e:	b085      	sub	sp, #20
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80060a6:	2300      	movs	r3, #0
 80060a8:	60bb      	str	r3, [r7, #8]
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	60fb      	str	r3, [r7, #12]
 80060ae:	e029      	b.n	8006104 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80060b0:	4a27      	ldr	r2, [pc, #156]	@ (8006150 <chk_lock+0xb4>)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	011b      	lsls	r3, r3, #4
 80060b6:	4413      	add	r3, r2
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d01d      	beq.n	80060fa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80060be:	4a24      	ldr	r2, [pc, #144]	@ (8006150 <chk_lock+0xb4>)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	011b      	lsls	r3, r3, #4
 80060c4:	4413      	add	r3, r2
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d116      	bne.n	80060fe <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80060d0:	4a1f      	ldr	r2, [pc, #124]	@ (8006150 <chk_lock+0xb4>)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	011b      	lsls	r3, r3, #4
 80060d6:	4413      	add	r3, r2
 80060d8:	3304      	adds	r3, #4
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d10c      	bne.n	80060fe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80060e4:	4a1a      	ldr	r2, [pc, #104]	@ (8006150 <chk_lock+0xb4>)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	011b      	lsls	r3, r3, #4
 80060ea:	4413      	add	r3, r2
 80060ec:	3308      	adds	r3, #8
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d102      	bne.n	80060fe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80060f8:	e007      	b.n	800610a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80060fa:	2301      	movs	r3, #1
 80060fc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	3301      	adds	r3, #1
 8006102:	60fb      	str	r3, [r7, #12]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d9d2      	bls.n	80060b0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2b02      	cmp	r3, #2
 800610e:	d109      	bne.n	8006124 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d102      	bne.n	800611c <chk_lock+0x80>
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	2b02      	cmp	r3, #2
 800611a:	d101      	bne.n	8006120 <chk_lock+0x84>
 800611c:	2300      	movs	r3, #0
 800611e:	e010      	b.n	8006142 <chk_lock+0xa6>
 8006120:	2312      	movs	r3, #18
 8006122:	e00e      	b.n	8006142 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d108      	bne.n	800613c <chk_lock+0xa0>
 800612a:	4a09      	ldr	r2, [pc, #36]	@ (8006150 <chk_lock+0xb4>)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	011b      	lsls	r3, r3, #4
 8006130:	4413      	add	r3, r2
 8006132:	330c      	adds	r3, #12
 8006134:	881b      	ldrh	r3, [r3, #0]
 8006136:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800613a:	d101      	bne.n	8006140 <chk_lock+0xa4>
 800613c:	2310      	movs	r3, #16
 800613e:	e000      	b.n	8006142 <chk_lock+0xa6>
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3714      	adds	r7, #20
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	20000834 	.word	0x20000834

08006154 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800615a:	2300      	movs	r3, #0
 800615c:	607b      	str	r3, [r7, #4]
 800615e:	e002      	b.n	8006166 <enq_lock+0x12>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	3301      	adds	r3, #1
 8006164:	607b      	str	r3, [r7, #4]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2b01      	cmp	r3, #1
 800616a:	d806      	bhi.n	800617a <enq_lock+0x26>
 800616c:	4a09      	ldr	r2, [pc, #36]	@ (8006194 <enq_lock+0x40>)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	011b      	lsls	r3, r3, #4
 8006172:	4413      	add	r3, r2
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d1f2      	bne.n	8006160 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2b02      	cmp	r3, #2
 800617e:	bf14      	ite	ne
 8006180:	2301      	movne	r3, #1
 8006182:	2300      	moveq	r3, #0
 8006184:	b2db      	uxtb	r3, r3
}
 8006186:	4618      	mov	r0, r3
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	20000834 	.word	0x20000834

08006198 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80061a2:	2300      	movs	r3, #0
 80061a4:	60fb      	str	r3, [r7, #12]
 80061a6:	e01f      	b.n	80061e8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80061a8:	4a41      	ldr	r2, [pc, #260]	@ (80062b0 <inc_lock+0x118>)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	011b      	lsls	r3, r3, #4
 80061ae:	4413      	add	r3, r2
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d113      	bne.n	80061e2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80061ba:	4a3d      	ldr	r2, [pc, #244]	@ (80062b0 <inc_lock+0x118>)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	011b      	lsls	r3, r3, #4
 80061c0:	4413      	add	r3, r2
 80061c2:	3304      	adds	r3, #4
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d109      	bne.n	80061e2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80061ce:	4a38      	ldr	r2, [pc, #224]	@ (80062b0 <inc_lock+0x118>)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	011b      	lsls	r3, r3, #4
 80061d4:	4413      	add	r3, r2
 80061d6:	3308      	adds	r3, #8
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80061de:	429a      	cmp	r2, r3
 80061e0:	d006      	beq.n	80061f0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	3301      	adds	r3, #1
 80061e6:	60fb      	str	r3, [r7, #12]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d9dc      	bls.n	80061a8 <inc_lock+0x10>
 80061ee:	e000      	b.n	80061f2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80061f0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d132      	bne.n	800625e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80061f8:	2300      	movs	r3, #0
 80061fa:	60fb      	str	r3, [r7, #12]
 80061fc:	e002      	b.n	8006204 <inc_lock+0x6c>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	3301      	adds	r3, #1
 8006202:	60fb      	str	r3, [r7, #12]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2b01      	cmp	r3, #1
 8006208:	d806      	bhi.n	8006218 <inc_lock+0x80>
 800620a:	4a29      	ldr	r2, [pc, #164]	@ (80062b0 <inc_lock+0x118>)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	011b      	lsls	r3, r3, #4
 8006210:	4413      	add	r3, r2
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d1f2      	bne.n	80061fe <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2b02      	cmp	r3, #2
 800621c:	d101      	bne.n	8006222 <inc_lock+0x8a>
 800621e:	2300      	movs	r3, #0
 8006220:	e040      	b.n	80062a4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	4922      	ldr	r1, [pc, #136]	@ (80062b0 <inc_lock+0x118>)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	011b      	lsls	r3, r3, #4
 800622c:	440b      	add	r3, r1
 800622e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	689a      	ldr	r2, [r3, #8]
 8006234:	491e      	ldr	r1, [pc, #120]	@ (80062b0 <inc_lock+0x118>)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	011b      	lsls	r3, r3, #4
 800623a:	440b      	add	r3, r1
 800623c:	3304      	adds	r3, #4
 800623e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	695a      	ldr	r2, [r3, #20]
 8006244:	491a      	ldr	r1, [pc, #104]	@ (80062b0 <inc_lock+0x118>)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	011b      	lsls	r3, r3, #4
 800624a:	440b      	add	r3, r1
 800624c:	3308      	adds	r3, #8
 800624e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006250:	4a17      	ldr	r2, [pc, #92]	@ (80062b0 <inc_lock+0x118>)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	011b      	lsls	r3, r3, #4
 8006256:	4413      	add	r3, r2
 8006258:	330c      	adds	r3, #12
 800625a:	2200      	movs	r2, #0
 800625c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d009      	beq.n	8006278 <inc_lock+0xe0>
 8006264:	4a12      	ldr	r2, [pc, #72]	@ (80062b0 <inc_lock+0x118>)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	011b      	lsls	r3, r3, #4
 800626a:	4413      	add	r3, r2
 800626c:	330c      	adds	r3, #12
 800626e:	881b      	ldrh	r3, [r3, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d001      	beq.n	8006278 <inc_lock+0xe0>
 8006274:	2300      	movs	r3, #0
 8006276:	e015      	b.n	80062a4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d108      	bne.n	8006290 <inc_lock+0xf8>
 800627e:	4a0c      	ldr	r2, [pc, #48]	@ (80062b0 <inc_lock+0x118>)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	011b      	lsls	r3, r3, #4
 8006284:	4413      	add	r3, r2
 8006286:	330c      	adds	r3, #12
 8006288:	881b      	ldrh	r3, [r3, #0]
 800628a:	3301      	adds	r3, #1
 800628c:	b29a      	uxth	r2, r3
 800628e:	e001      	b.n	8006294 <inc_lock+0xfc>
 8006290:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006294:	4906      	ldr	r1, [pc, #24]	@ (80062b0 <inc_lock+0x118>)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	011b      	lsls	r3, r3, #4
 800629a:	440b      	add	r3, r1
 800629c:	330c      	adds	r3, #12
 800629e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	3301      	adds	r3, #1
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3714      	adds	r7, #20
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr
 80062b0:	20000834 	.word	0x20000834

080062b4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	3b01      	subs	r3, #1
 80062c0:	607b      	str	r3, [r7, #4]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d825      	bhi.n	8006314 <dec_lock+0x60>
		n = Files[i].ctr;
 80062c8:	4a17      	ldr	r2, [pc, #92]	@ (8006328 <dec_lock+0x74>)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	011b      	lsls	r3, r3, #4
 80062ce:	4413      	add	r3, r2
 80062d0:	330c      	adds	r3, #12
 80062d2:	881b      	ldrh	r3, [r3, #0]
 80062d4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80062d6:	89fb      	ldrh	r3, [r7, #14]
 80062d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062dc:	d101      	bne.n	80062e2 <dec_lock+0x2e>
 80062de:	2300      	movs	r3, #0
 80062e0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80062e2:	89fb      	ldrh	r3, [r7, #14]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d002      	beq.n	80062ee <dec_lock+0x3a>
 80062e8:	89fb      	ldrh	r3, [r7, #14]
 80062ea:	3b01      	subs	r3, #1
 80062ec:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80062ee:	4a0e      	ldr	r2, [pc, #56]	@ (8006328 <dec_lock+0x74>)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	011b      	lsls	r3, r3, #4
 80062f4:	4413      	add	r3, r2
 80062f6:	330c      	adds	r3, #12
 80062f8:	89fa      	ldrh	r2, [r7, #14]
 80062fa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80062fc:	89fb      	ldrh	r3, [r7, #14]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d105      	bne.n	800630e <dec_lock+0x5a>
 8006302:	4a09      	ldr	r2, [pc, #36]	@ (8006328 <dec_lock+0x74>)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	011b      	lsls	r3, r3, #4
 8006308:	4413      	add	r3, r2
 800630a:	2200      	movs	r2, #0
 800630c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800630e:	2300      	movs	r3, #0
 8006310:	737b      	strb	r3, [r7, #13]
 8006312:	e001      	b.n	8006318 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006314:	2302      	movs	r3, #2
 8006316:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006318:	7b7b      	ldrb	r3, [r7, #13]
}
 800631a:	4618      	mov	r0, r3
 800631c:	3714      	adds	r7, #20
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	20000834 	.word	0x20000834

0800632c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006334:	2300      	movs	r3, #0
 8006336:	60fb      	str	r3, [r7, #12]
 8006338:	e010      	b.n	800635c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800633a:	4a0d      	ldr	r2, [pc, #52]	@ (8006370 <clear_lock+0x44>)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	011b      	lsls	r3, r3, #4
 8006340:	4413      	add	r3, r2
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	429a      	cmp	r2, r3
 8006348:	d105      	bne.n	8006356 <clear_lock+0x2a>
 800634a:	4a09      	ldr	r2, [pc, #36]	@ (8006370 <clear_lock+0x44>)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	011b      	lsls	r3, r3, #4
 8006350:	4413      	add	r3, r2
 8006352:	2200      	movs	r2, #0
 8006354:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	3301      	adds	r3, #1
 800635a:	60fb      	str	r3, [r7, #12]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d9eb      	bls.n	800633a <clear_lock+0xe>
	}
}
 8006362:	bf00      	nop
 8006364:	bf00      	nop
 8006366:	3714      	adds	r7, #20
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr
 8006370:	20000834 	.word	0x20000834

08006374 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b086      	sub	sp, #24
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800637c:	2300      	movs	r3, #0
 800637e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	78db      	ldrb	r3, [r3, #3]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d034      	beq.n	80063f2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800638c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	7858      	ldrb	r0, [r3, #1]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006398:	2301      	movs	r3, #1
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	f7ff fd38 	bl	8005e10 <disk_write>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d002      	beq.n	80063ac <sync_window+0x38>
			res = FR_DISK_ERR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	73fb      	strb	r3, [r7, #15]
 80063aa:	e022      	b.n	80063f2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	697a      	ldr	r2, [r7, #20]
 80063b8:	1ad2      	subs	r2, r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	429a      	cmp	r2, r3
 80063c0:	d217      	bcs.n	80063f2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	789b      	ldrb	r3, [r3, #2]
 80063c6:	613b      	str	r3, [r7, #16]
 80063c8:	e010      	b.n	80063ec <sync_window+0x78>
					wsect += fs->fsize;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	697a      	ldr	r2, [r7, #20]
 80063d0:	4413      	add	r3, r2
 80063d2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	7858      	ldrb	r0, [r3, #1]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80063de:	2301      	movs	r3, #1
 80063e0:	697a      	ldr	r2, [r7, #20]
 80063e2:	f7ff fd15 	bl	8005e10 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	3b01      	subs	r3, #1
 80063ea:	613b      	str	r3, [r7, #16]
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d8eb      	bhi.n	80063ca <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80063f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3718      	adds	r7, #24
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006406:	2300      	movs	r3, #0
 8006408:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800640e:	683a      	ldr	r2, [r7, #0]
 8006410:	429a      	cmp	r2, r3
 8006412:	d01b      	beq.n	800644c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f7ff ffad 	bl	8006374 <sync_window>
 800641a:	4603      	mov	r3, r0
 800641c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800641e:	7bfb      	ldrb	r3, [r7, #15]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d113      	bne.n	800644c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	7858      	ldrb	r0, [r3, #1]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800642e:	2301      	movs	r3, #1
 8006430:	683a      	ldr	r2, [r7, #0]
 8006432:	f7ff fccd 	bl	8005dd0 <disk_read>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d004      	beq.n	8006446 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800643c:	f04f 33ff 	mov.w	r3, #4294967295
 8006440:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006442:	2301      	movs	r3, #1
 8006444:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	683a      	ldr	r2, [r7, #0]
 800644a:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800644c:	7bfb      	ldrb	r3, [r7, #15]
}
 800644e:	4618      	mov	r0, r3
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
	...

08006458 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f7ff ff87 	bl	8006374 <sync_window>
 8006466:	4603      	mov	r3, r0
 8006468:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800646a:	7bfb      	ldrb	r3, [r7, #15]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d158      	bne.n	8006522 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	2b03      	cmp	r3, #3
 8006476:	d148      	bne.n	800650a <sync_fs+0xb2>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	791b      	ldrb	r3, [r3, #4]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d144      	bne.n	800650a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	3330      	adds	r3, #48	@ 0x30
 8006484:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006488:	2100      	movs	r1, #0
 800648a:	4618      	mov	r0, r3
 800648c:	f7ff fda9 	bl	8005fe2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	3330      	adds	r3, #48	@ 0x30
 8006494:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006498:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800649c:	4618      	mov	r0, r3
 800649e:	f7ff fd38 	bl	8005f12 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	3330      	adds	r3, #48	@ 0x30
 80064a6:	4921      	ldr	r1, [pc, #132]	@ (800652c <sync_fs+0xd4>)
 80064a8:	4618      	mov	r0, r3
 80064aa:	f7ff fd4d 	bl	8005f48 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	3330      	adds	r3, #48	@ 0x30
 80064b2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80064b6:	491e      	ldr	r1, [pc, #120]	@ (8006530 <sync_fs+0xd8>)
 80064b8:	4618      	mov	r0, r3
 80064ba:	f7ff fd45 	bl	8005f48 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	3330      	adds	r3, #48	@ 0x30
 80064c2:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	4619      	mov	r1, r3
 80064cc:	4610      	mov	r0, r2
 80064ce:	f7ff fd3b 	bl	8005f48 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	3330      	adds	r3, #48	@ 0x30
 80064d6:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	4619      	mov	r1, r3
 80064e0:	4610      	mov	r0, r2
 80064e2:	f7ff fd31 	bl	8005f48 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	69db      	ldr	r3, [r3, #28]
 80064ea:	1c5a      	adds	r2, r3, #1
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	7858      	ldrb	r0, [r3, #1]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064fe:	2301      	movs	r3, #1
 8006500:	f7ff fc86 	bl	8005e10 <disk_write>
			fs->fsi_flag = 0;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	785b      	ldrb	r3, [r3, #1]
 800650e:	2200      	movs	r2, #0
 8006510:	2100      	movs	r1, #0
 8006512:	4618      	mov	r0, r3
 8006514:	f7ff fc9c 	bl	8005e50 <disk_ioctl>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d001      	beq.n	8006522 <sync_fs+0xca>
 800651e:	2301      	movs	r3, #1
 8006520:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006522:	7bfb      	ldrb	r3, [r7, #15]
}
 8006524:	4618      	mov	r0, r3
 8006526:	3710      	adds	r7, #16
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}
 800652c:	41615252 	.word	0x41615252
 8006530:	61417272 	.word	0x61417272

08006534 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	3b02      	subs	r3, #2
 8006542:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	695b      	ldr	r3, [r3, #20]
 8006548:	3b02      	subs	r3, #2
 800654a:	683a      	ldr	r2, [r7, #0]
 800654c:	429a      	cmp	r2, r3
 800654e:	d301      	bcc.n	8006554 <clust2sect+0x20>
 8006550:	2300      	movs	r3, #0
 8006552:	e008      	b.n	8006566 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	895b      	ldrh	r3, [r3, #10]
 8006558:	461a      	mov	r2, r3
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	fb03 f202 	mul.w	r2, r3, r2
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006564:	4413      	add	r3, r2
}
 8006566:	4618      	mov	r0, r3
 8006568:	370c      	adds	r7, #12
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr

08006572 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b086      	sub	sp, #24
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
 800657a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	2b01      	cmp	r3, #1
 8006586:	d904      	bls.n	8006592 <get_fat+0x20>
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	695b      	ldr	r3, [r3, #20]
 800658c:	683a      	ldr	r2, [r7, #0]
 800658e:	429a      	cmp	r2, r3
 8006590:	d302      	bcc.n	8006598 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006592:	2301      	movs	r3, #1
 8006594:	617b      	str	r3, [r7, #20]
 8006596:	e08e      	b.n	80066b6 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006598:	f04f 33ff 	mov.w	r3, #4294967295
 800659c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	2b03      	cmp	r3, #3
 80065a4:	d061      	beq.n	800666a <get_fat+0xf8>
 80065a6:	2b03      	cmp	r3, #3
 80065a8:	dc7b      	bgt.n	80066a2 <get_fat+0x130>
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d002      	beq.n	80065b4 <get_fat+0x42>
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d041      	beq.n	8006636 <get_fat+0xc4>
 80065b2:	e076      	b.n	80066a2 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	60fb      	str	r3, [r7, #12]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	085b      	lsrs	r3, r3, #1
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	4413      	add	r3, r2
 80065c0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	6a1a      	ldr	r2, [r3, #32]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	0a5b      	lsrs	r3, r3, #9
 80065ca:	4413      	add	r3, r2
 80065cc:	4619      	mov	r1, r3
 80065ce:	6938      	ldr	r0, [r7, #16]
 80065d0:	f7ff ff14 	bl	80063fc <move_window>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d166      	bne.n	80066a8 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	1c5a      	adds	r2, r3, #1
 80065de:	60fa      	str	r2, [r7, #12]
 80065e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	4413      	add	r3, r2
 80065e8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80065ec:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	6a1a      	ldr	r2, [r3, #32]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	0a5b      	lsrs	r3, r3, #9
 80065f6:	4413      	add	r3, r2
 80065f8:	4619      	mov	r1, r3
 80065fa:	6938      	ldr	r0, [r7, #16]
 80065fc:	f7ff fefe 	bl	80063fc <move_window>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d152      	bne.n	80066ac <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800660c:	693a      	ldr	r2, [r7, #16]
 800660e:	4413      	add	r3, r2
 8006610:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006614:	021b      	lsls	r3, r3, #8
 8006616:	68ba      	ldr	r2, [r7, #8]
 8006618:	4313      	orrs	r3, r2
 800661a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	2b00      	cmp	r3, #0
 8006624:	d002      	beq.n	800662c <get_fat+0xba>
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	091b      	lsrs	r3, r3, #4
 800662a:	e002      	b.n	8006632 <get_fat+0xc0>
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006632:	617b      	str	r3, [r7, #20]
			break;
 8006634:	e03f      	b.n	80066b6 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	6a1a      	ldr	r2, [r3, #32]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	0a1b      	lsrs	r3, r3, #8
 800663e:	4413      	add	r3, r2
 8006640:	4619      	mov	r1, r3
 8006642:	6938      	ldr	r0, [r7, #16]
 8006644:	f7ff feda 	bl	80063fc <move_window>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d130      	bne.n	80066b0 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	005b      	lsls	r3, r3, #1
 8006658:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800665c:	4413      	add	r3, r2
 800665e:	4618      	mov	r0, r3
 8006660:	f7ff fc1c 	bl	8005e9c <ld_word>
 8006664:	4603      	mov	r3, r0
 8006666:	617b      	str	r3, [r7, #20]
			break;
 8006668:	e025      	b.n	80066b6 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	6a1a      	ldr	r2, [r3, #32]
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	09db      	lsrs	r3, r3, #7
 8006672:	4413      	add	r3, r2
 8006674:	4619      	mov	r1, r3
 8006676:	6938      	ldr	r0, [r7, #16]
 8006678:	f7ff fec0 	bl	80063fc <move_window>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d118      	bne.n	80066b4 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006690:	4413      	add	r3, r2
 8006692:	4618      	mov	r0, r3
 8006694:	f7ff fc1a 	bl	8005ecc <ld_dword>
 8006698:	4603      	mov	r3, r0
 800669a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800669e:	617b      	str	r3, [r7, #20]
			break;
 80066a0:	e009      	b.n	80066b6 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80066a2:	2301      	movs	r3, #1
 80066a4:	617b      	str	r3, [r7, #20]
 80066a6:	e006      	b.n	80066b6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80066a8:	bf00      	nop
 80066aa:	e004      	b.n	80066b6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80066ac:	bf00      	nop
 80066ae:	e002      	b.n	80066b6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80066b0:	bf00      	nop
 80066b2:	e000      	b.n	80066b6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80066b4:	bf00      	nop
		}
	}

	return val;
 80066b6:	697b      	ldr	r3, [r7, #20]
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3718      	adds	r7, #24
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80066c0:	b590      	push	{r4, r7, lr}
 80066c2:	b089      	sub	sp, #36	@ 0x24
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80066cc:	2302      	movs	r3, #2
 80066ce:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	f240 80d9 	bls.w	800688a <put_fat+0x1ca>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	695b      	ldr	r3, [r3, #20]
 80066dc:	68ba      	ldr	r2, [r7, #8]
 80066de:	429a      	cmp	r2, r3
 80066e0:	f080 80d3 	bcs.w	800688a <put_fat+0x1ca>
		switch (fs->fs_type) {
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	2b03      	cmp	r3, #3
 80066ea:	f000 8096 	beq.w	800681a <put_fat+0x15a>
 80066ee:	2b03      	cmp	r3, #3
 80066f0:	f300 80cb 	bgt.w	800688a <put_fat+0x1ca>
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d002      	beq.n	80066fe <put_fat+0x3e>
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d06e      	beq.n	80067da <put_fat+0x11a>
 80066fc:	e0c5      	b.n	800688a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	61bb      	str	r3, [r7, #24]
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	085b      	lsrs	r3, r3, #1
 8006706:	69ba      	ldr	r2, [r7, #24]
 8006708:	4413      	add	r3, r2
 800670a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6a1a      	ldr	r2, [r3, #32]
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	0a5b      	lsrs	r3, r3, #9
 8006714:	4413      	add	r3, r2
 8006716:	4619      	mov	r1, r3
 8006718:	68f8      	ldr	r0, [r7, #12]
 800671a:	f7ff fe6f 	bl	80063fc <move_window>
 800671e:	4603      	mov	r3, r0
 8006720:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006722:	7ffb      	ldrb	r3, [r7, #31]
 8006724:	2b00      	cmp	r3, #0
 8006726:	f040 80a9 	bne.w	800687c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	1c59      	adds	r1, r3, #1
 8006734:	61b9      	str	r1, [r7, #24]
 8006736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800673a:	4413      	add	r3, r2
 800673c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	f003 0301 	and.w	r3, r3, #1
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00d      	beq.n	8006764 <put_fat+0xa4>
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	b25b      	sxtb	r3, r3
 800674e:	f003 030f 	and.w	r3, r3, #15
 8006752:	b25a      	sxtb	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	b2db      	uxtb	r3, r3
 8006758:	011b      	lsls	r3, r3, #4
 800675a:	b25b      	sxtb	r3, r3
 800675c:	4313      	orrs	r3, r2
 800675e:	b25b      	sxtb	r3, r3
 8006760:	b2db      	uxtb	r3, r3
 8006762:	e001      	b.n	8006768 <put_fat+0xa8>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	b2db      	uxtb	r3, r3
 8006768:	697a      	ldr	r2, [r7, #20]
 800676a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2201      	movs	r2, #1
 8006770:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6a1a      	ldr	r2, [r3, #32]
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	0a5b      	lsrs	r3, r3, #9
 800677a:	4413      	add	r3, r2
 800677c:	4619      	mov	r1, r3
 800677e:	68f8      	ldr	r0, [r7, #12]
 8006780:	f7ff fe3c 	bl	80063fc <move_window>
 8006784:	4603      	mov	r3, r0
 8006786:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006788:	7ffb      	ldrb	r3, [r7, #31]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d178      	bne.n	8006880 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800679a:	4413      	add	r3, r2
 800679c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	f003 0301 	and.w	r3, r3, #1
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d003      	beq.n	80067b0 <put_fat+0xf0>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	091b      	lsrs	r3, r3, #4
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	e00e      	b.n	80067ce <put_fat+0x10e>
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	b25b      	sxtb	r3, r3
 80067b6:	f023 030f 	bic.w	r3, r3, #15
 80067ba:	b25a      	sxtb	r2, r3
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	0a1b      	lsrs	r3, r3, #8
 80067c0:	b25b      	sxtb	r3, r3
 80067c2:	f003 030f 	and.w	r3, r3, #15
 80067c6:	b25b      	sxtb	r3, r3
 80067c8:	4313      	orrs	r3, r2
 80067ca:	b25b      	sxtb	r3, r3
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	697a      	ldr	r2, [r7, #20]
 80067d0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2201      	movs	r2, #1
 80067d6:	70da      	strb	r2, [r3, #3]
			break;
 80067d8:	e057      	b.n	800688a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6a1a      	ldr	r2, [r3, #32]
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	0a1b      	lsrs	r3, r3, #8
 80067e2:	4413      	add	r3, r2
 80067e4:	4619      	mov	r1, r3
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f7ff fe08 	bl	80063fc <move_window>
 80067ec:	4603      	mov	r3, r0
 80067ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80067f0:	7ffb      	ldrb	r3, [r7, #31]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d146      	bne.n	8006884 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	005b      	lsls	r3, r3, #1
 8006800:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006804:	4413      	add	r3, r2
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	b292      	uxth	r2, r2
 800680a:	4611      	mov	r1, r2
 800680c:	4618      	mov	r0, r3
 800680e:	f7ff fb80 	bl	8005f12 <st_word>
			fs->wflag = 1;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2201      	movs	r2, #1
 8006816:	70da      	strb	r2, [r3, #3]
			break;
 8006818:	e037      	b.n	800688a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6a1a      	ldr	r2, [r3, #32]
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	09db      	lsrs	r3, r3, #7
 8006822:	4413      	add	r3, r2
 8006824:	4619      	mov	r1, r3
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f7ff fde8 	bl	80063fc <move_window>
 800682c:	4603      	mov	r3, r0
 800682e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006830:	7ffb      	ldrb	r3, [r7, #31]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d128      	bne.n	8006888 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800684a:	4413      	add	r3, r2
 800684c:	4618      	mov	r0, r3
 800684e:	f7ff fb3d 	bl	8005ecc <ld_dword>
 8006852:	4603      	mov	r3, r0
 8006854:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006858:	4323      	orrs	r3, r4
 800685a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800686a:	4413      	add	r3, r2
 800686c:	6879      	ldr	r1, [r7, #4]
 800686e:	4618      	mov	r0, r3
 8006870:	f7ff fb6a 	bl	8005f48 <st_dword>
			fs->wflag = 1;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2201      	movs	r2, #1
 8006878:	70da      	strb	r2, [r3, #3]
			break;
 800687a:	e006      	b.n	800688a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800687c:	bf00      	nop
 800687e:	e004      	b.n	800688a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006880:	bf00      	nop
 8006882:	e002      	b.n	800688a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006884:	bf00      	nop
 8006886:	e000      	b.n	800688a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006888:	bf00      	nop
		}
	}
	return res;
 800688a:	7ffb      	ldrb	r3, [r7, #31]
}
 800688c:	4618      	mov	r0, r3
 800688e:	3724      	adds	r7, #36	@ 0x24
 8006890:	46bd      	mov	sp, r7
 8006892:	bd90      	pop	{r4, r7, pc}

08006894 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b088      	sub	sp, #32
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80068a0:	2300      	movs	r3, #0
 80068a2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d904      	bls.n	80068ba <remove_chain+0x26>
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	695b      	ldr	r3, [r3, #20]
 80068b4:	68ba      	ldr	r2, [r7, #8]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d301      	bcc.n	80068be <remove_chain+0x2a>
 80068ba:	2302      	movs	r3, #2
 80068bc:	e04b      	b.n	8006956 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d00c      	beq.n	80068de <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80068c4:	f04f 32ff 	mov.w	r2, #4294967295
 80068c8:	6879      	ldr	r1, [r7, #4]
 80068ca:	69b8      	ldr	r0, [r7, #24]
 80068cc:	f7ff fef8 	bl	80066c0 <put_fat>
 80068d0:	4603      	mov	r3, r0
 80068d2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80068d4:	7ffb      	ldrb	r3, [r7, #31]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d001      	beq.n	80068de <remove_chain+0x4a>
 80068da:	7ffb      	ldrb	r3, [r7, #31]
 80068dc:	e03b      	b.n	8006956 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80068de:	68b9      	ldr	r1, [r7, #8]
 80068e0:	68f8      	ldr	r0, [r7, #12]
 80068e2:	f7ff fe46 	bl	8006572 <get_fat>
 80068e6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d031      	beq.n	8006952 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d101      	bne.n	80068f8 <remove_chain+0x64>
 80068f4:	2302      	movs	r3, #2
 80068f6:	e02e      	b.n	8006956 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068fe:	d101      	bne.n	8006904 <remove_chain+0x70>
 8006900:	2301      	movs	r3, #1
 8006902:	e028      	b.n	8006956 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006904:	2200      	movs	r2, #0
 8006906:	68b9      	ldr	r1, [r7, #8]
 8006908:	69b8      	ldr	r0, [r7, #24]
 800690a:	f7ff fed9 	bl	80066c0 <put_fat>
 800690e:	4603      	mov	r3, r0
 8006910:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006912:	7ffb      	ldrb	r3, [r7, #31]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d001      	beq.n	800691c <remove_chain+0x88>
 8006918:	7ffb      	ldrb	r3, [r7, #31]
 800691a:	e01c      	b.n	8006956 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	691a      	ldr	r2, [r3, #16]
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	695b      	ldr	r3, [r3, #20]
 8006924:	3b02      	subs	r3, #2
 8006926:	429a      	cmp	r2, r3
 8006928:	d20b      	bcs.n	8006942 <remove_chain+0xae>
			fs->free_clst++;
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	1c5a      	adds	r2, r3, #1
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	791b      	ldrb	r3, [r3, #4]
 8006938:	f043 0301 	orr.w	r3, r3, #1
 800693c:	b2da      	uxtb	r2, r3
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	68ba      	ldr	r2, [r7, #8]
 800694c:	429a      	cmp	r2, r3
 800694e:	d3c6      	bcc.n	80068de <remove_chain+0x4a>
 8006950:	e000      	b.n	8006954 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006952:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3720      	adds	r7, #32
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800695e:	b580      	push	{r7, lr}
 8006960:	b088      	sub	sp, #32
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
 8006966:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d10d      	bne.n	8006990 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d004      	beq.n	800698a <create_chain+0x2c>
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	695b      	ldr	r3, [r3, #20]
 8006984:	69ba      	ldr	r2, [r7, #24]
 8006986:	429a      	cmp	r2, r3
 8006988:	d31b      	bcc.n	80069c2 <create_chain+0x64>
 800698a:	2301      	movs	r3, #1
 800698c:	61bb      	str	r3, [r7, #24]
 800698e:	e018      	b.n	80069c2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006990:	6839      	ldr	r1, [r7, #0]
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f7ff fded 	bl	8006572 <get_fat>
 8006998:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2b01      	cmp	r3, #1
 800699e:	d801      	bhi.n	80069a4 <create_chain+0x46>
 80069a0:	2301      	movs	r3, #1
 80069a2:	e070      	b.n	8006a86 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069aa:	d101      	bne.n	80069b0 <create_chain+0x52>
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	e06a      	b.n	8006a86 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	695b      	ldr	r3, [r3, #20]
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d201      	bcs.n	80069be <create_chain+0x60>
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	e063      	b.n	8006a86 <create_chain+0x128>
		scl = clst;
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	3301      	adds	r3, #1
 80069ca:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	695b      	ldr	r3, [r3, #20]
 80069d0:	69fa      	ldr	r2, [r7, #28]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d307      	bcc.n	80069e6 <create_chain+0x88>
				ncl = 2;
 80069d6:	2302      	movs	r3, #2
 80069d8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80069da:	69fa      	ldr	r2, [r7, #28]
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d901      	bls.n	80069e6 <create_chain+0x88>
 80069e2:	2300      	movs	r3, #0
 80069e4:	e04f      	b.n	8006a86 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80069e6:	69f9      	ldr	r1, [r7, #28]
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f7ff fdc2 	bl	8006572 <get_fat>
 80069ee:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00e      	beq.n	8006a14 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d003      	beq.n	8006a04 <create_chain+0xa6>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a02:	d101      	bne.n	8006a08 <create_chain+0xaa>
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	e03e      	b.n	8006a86 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006a08:	69fa      	ldr	r2, [r7, #28]
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d1da      	bne.n	80069c6 <create_chain+0x68>
 8006a10:	2300      	movs	r3, #0
 8006a12:	e038      	b.n	8006a86 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006a14:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006a16:	f04f 32ff 	mov.w	r2, #4294967295
 8006a1a:	69f9      	ldr	r1, [r7, #28]
 8006a1c:	6938      	ldr	r0, [r7, #16]
 8006a1e:	f7ff fe4f 	bl	80066c0 <put_fat>
 8006a22:	4603      	mov	r3, r0
 8006a24:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006a26:	7dfb      	ldrb	r3, [r7, #23]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d109      	bne.n	8006a40 <create_chain+0xe2>
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d006      	beq.n	8006a40 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006a32:	69fa      	ldr	r2, [r7, #28]
 8006a34:	6839      	ldr	r1, [r7, #0]
 8006a36:	6938      	ldr	r0, [r7, #16]
 8006a38:	f7ff fe42 	bl	80066c0 <put_fat>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006a40:	7dfb      	ldrb	r3, [r7, #23]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d116      	bne.n	8006a74 <create_chain+0x116>
		fs->last_clst = ncl;
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	69fa      	ldr	r2, [r7, #28]
 8006a4a:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	691a      	ldr	r2, [r3, #16]
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	695b      	ldr	r3, [r3, #20]
 8006a54:	3b02      	subs	r3, #2
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d804      	bhi.n	8006a64 <create_chain+0x106>
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	1e5a      	subs	r2, r3, #1
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	791b      	ldrb	r3, [r3, #4]
 8006a68:	f043 0301 	orr.w	r3, r3, #1
 8006a6c:	b2da      	uxtb	r2, r3
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	711a      	strb	r2, [r3, #4]
 8006a72:	e007      	b.n	8006a84 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006a74:	7dfb      	ldrb	r3, [r7, #23]
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d102      	bne.n	8006a80 <create_chain+0x122>
 8006a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a7e:	e000      	b.n	8006a82 <create_chain+0x124>
 8006a80:	2301      	movs	r3, #1
 8006a82:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006a84:	69fb      	ldr	r3, [r7, #28]
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3720      	adds	r7, #32
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}

08006a8e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006a8e:	b480      	push	{r7}
 8006a90:	b087      	sub	sp, #28
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
 8006a96:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aa2:	3304      	adds	r3, #4
 8006aa4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	0a5b      	lsrs	r3, r3, #9
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	8952      	ldrh	r2, [r2, #10]
 8006aae:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ab2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	1d1a      	adds	r2, r3, #4
 8006ab8:	613a      	str	r2, [r7, #16]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d101      	bne.n	8006ac8 <clmt_clust+0x3a>
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	e010      	b.n	8006aea <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006ac8:	697a      	ldr	r2, [r7, #20]
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d307      	bcc.n	8006ae0 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006ad0:	697a      	ldr	r2, [r7, #20]
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	617b      	str	r3, [r7, #20]
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	3304      	adds	r3, #4
 8006adc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006ade:	e7e9      	b.n	8006ab4 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006ae0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	4413      	add	r3, r2
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	371c      	adds	r7, #28
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr

08006af6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b086      	sub	sp, #24
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
 8006afe:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b0c:	d204      	bcs.n	8006b18 <dir_sdi+0x22>
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	f003 031f 	and.w	r3, r3, #31
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d001      	beq.n	8006b1c <dir_sdi+0x26>
		return FR_INT_ERR;
 8006b18:	2302      	movs	r3, #2
 8006b1a:	e063      	b.n	8006be4 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	683a      	ldr	r2, [r7, #0]
 8006b20:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d106      	bne.n	8006b3c <dir_sdi+0x46>
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d902      	bls.n	8006b3c <dir_sdi+0x46>
		clst = fs->dirbase;
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b3a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d10c      	bne.n	8006b5c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	095b      	lsrs	r3, r3, #5
 8006b46:	693a      	ldr	r2, [r7, #16]
 8006b48:	8912      	ldrh	r2, [r2, #8]
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d301      	bcc.n	8006b52 <dir_sdi+0x5c>
 8006b4e:	2302      	movs	r3, #2
 8006b50:	e048      	b.n	8006be4 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	61da      	str	r2, [r3, #28]
 8006b5a:	e029      	b.n	8006bb0 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	895b      	ldrh	r3, [r3, #10]
 8006b60:	025b      	lsls	r3, r3, #9
 8006b62:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006b64:	e019      	b.n	8006b9a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6979      	ldr	r1, [r7, #20]
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7ff fd01 	bl	8006572 <get_fat>
 8006b70:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b78:	d101      	bne.n	8006b7e <dir_sdi+0x88>
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e032      	b.n	8006be4 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d904      	bls.n	8006b8e <dir_sdi+0x98>
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	695b      	ldr	r3, [r3, #20]
 8006b88:	697a      	ldr	r2, [r7, #20]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d301      	bcc.n	8006b92 <dir_sdi+0x9c>
 8006b8e:	2302      	movs	r3, #2
 8006b90:	e028      	b.n	8006be4 <dir_sdi+0xee>
			ofs -= csz;
 8006b92:	683a      	ldr	r2, [r7, #0]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006b9a:	683a      	ldr	r2, [r7, #0]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d2e1      	bcs.n	8006b66 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006ba2:	6979      	ldr	r1, [r7, #20]
 8006ba4:	6938      	ldr	r0, [r7, #16]
 8006ba6:	f7ff fcc5 	bl	8006534 <clust2sect>
 8006baa:	4602      	mov	r2, r0
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	697a      	ldr	r2, [r7, #20]
 8006bb4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	69db      	ldr	r3, [r3, #28]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d101      	bne.n	8006bc2 <dir_sdi+0xcc>
 8006bbe:	2302      	movs	r3, #2
 8006bc0:	e010      	b.n	8006be4 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	69da      	ldr	r2, [r3, #28]
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	0a5b      	lsrs	r3, r3, #9
 8006bca:	441a      	add	r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bdc:	441a      	add	r2, r3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3718      	adds	r7, #24
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b086      	sub	sp, #24
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	695b      	ldr	r3, [r3, #20]
 8006c00:	3320      	adds	r3, #32
 8006c02:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	69db      	ldr	r3, [r3, #28]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d003      	beq.n	8006c14 <dir_next+0x28>
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c12:	d301      	bcc.n	8006c18 <dir_next+0x2c>
 8006c14:	2304      	movs	r3, #4
 8006c16:	e0aa      	b.n	8006d6e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	f040 8098 	bne.w	8006d54 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	69db      	ldr	r3, [r3, #28]
 8006c28:	1c5a      	adds	r2, r3, #1
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d10b      	bne.n	8006c4e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	095b      	lsrs	r3, r3, #5
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	8912      	ldrh	r2, [r2, #8]
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	f0c0 8088 	bcc.w	8006d54 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	61da      	str	r2, [r3, #28]
 8006c4a:	2304      	movs	r3, #4
 8006c4c:	e08f      	b.n	8006d6e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	0a5b      	lsrs	r3, r3, #9
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	8952      	ldrh	r2, [r2, #10]
 8006c56:	3a01      	subs	r2, #1
 8006c58:	4013      	ands	r3, r2
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d17a      	bne.n	8006d54 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	699b      	ldr	r3, [r3, #24]
 8006c64:	4619      	mov	r1, r3
 8006c66:	4610      	mov	r0, r2
 8006c68:	f7ff fc83 	bl	8006572 <get_fat>
 8006c6c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d801      	bhi.n	8006c78 <dir_next+0x8c>
 8006c74:	2302      	movs	r3, #2
 8006c76:	e07a      	b.n	8006d6e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c7e:	d101      	bne.n	8006c84 <dir_next+0x98>
 8006c80:	2301      	movs	r3, #1
 8006c82:	e074      	b.n	8006d6e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	695b      	ldr	r3, [r3, #20]
 8006c88:	697a      	ldr	r2, [r7, #20]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d358      	bcc.n	8006d40 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d104      	bne.n	8006c9e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	61da      	str	r2, [r3, #28]
 8006c9a:	2304      	movs	r3, #4
 8006c9c:	e067      	b.n	8006d6e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	699b      	ldr	r3, [r3, #24]
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	4610      	mov	r0, r2
 8006ca8:	f7ff fe59 	bl	800695e <create_chain>
 8006cac:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d101      	bne.n	8006cb8 <dir_next+0xcc>
 8006cb4:	2307      	movs	r3, #7
 8006cb6:	e05a      	b.n	8006d6e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d101      	bne.n	8006cc2 <dir_next+0xd6>
 8006cbe:	2302      	movs	r3, #2
 8006cc0:	e055      	b.n	8006d6e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc8:	d101      	bne.n	8006cce <dir_next+0xe2>
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e04f      	b.n	8006d6e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f7ff fb50 	bl	8006374 <sync_window>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d001      	beq.n	8006cde <dir_next+0xf2>
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e047      	b.n	8006d6e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	3330      	adds	r3, #48	@ 0x30
 8006ce2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ce6:	2100      	movs	r1, #0
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f7ff f97a 	bl	8005fe2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006cee:	2300      	movs	r3, #0
 8006cf0:	613b      	str	r3, [r7, #16]
 8006cf2:	6979      	ldr	r1, [r7, #20]
 8006cf4:	68f8      	ldr	r0, [r7, #12]
 8006cf6:	f7ff fc1d 	bl	8006534 <clust2sect>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006d00:	e012      	b.n	8006d28 <dir_next+0x13c>
						fs->wflag = 1;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2201      	movs	r2, #1
 8006d06:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006d08:	68f8      	ldr	r0, [r7, #12]
 8006d0a:	f7ff fb33 	bl	8006374 <sync_window>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d001      	beq.n	8006d18 <dir_next+0x12c>
 8006d14:	2301      	movs	r3, #1
 8006d16:	e02a      	b.n	8006d6e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	613b      	str	r3, [r7, #16]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d22:	1c5a      	adds	r2, r3, #1
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	895b      	ldrh	r3, [r3, #10]
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d3e6      	bcc.n	8006d02 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	1ad2      	subs	r2, r2, r3
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	697a      	ldr	r2, [r7, #20]
 8006d44:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006d46:	6979      	ldr	r1, [r7, #20]
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	f7ff fbf3 	bl	8006534 <clust2sect>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	68ba      	ldr	r2, [r7, #8]
 8006d58:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d66:	441a      	add	r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3718      	adds	r7, #24
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b086      	sub	sp, #24
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
 8006d7e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006d86:	2100      	movs	r1, #0
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f7ff feb4 	bl	8006af6 <dir_sdi>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006d92:	7dfb      	ldrb	r3, [r7, #23]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d12b      	bne.n	8006df0 <dir_alloc+0x7a>
		n = 0;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	69db      	ldr	r3, [r3, #28]
 8006da0:	4619      	mov	r1, r3
 8006da2:	68f8      	ldr	r0, [r7, #12]
 8006da4:	f7ff fb2a 	bl	80063fc <move_window>
 8006da8:	4603      	mov	r3, r0
 8006daa:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006dac:	7dfb      	ldrb	r3, [r7, #23]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d11d      	bne.n	8006dee <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a1b      	ldr	r3, [r3, #32]
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	2be5      	cmp	r3, #229	@ 0xe5
 8006dba:	d004      	beq.n	8006dc6 <dir_alloc+0x50>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a1b      	ldr	r3, [r3, #32]
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d107      	bne.n	8006dd6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	3301      	adds	r3, #1
 8006dca:	613b      	str	r3, [r7, #16]
 8006dcc:	693a      	ldr	r2, [r7, #16]
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d102      	bne.n	8006dda <dir_alloc+0x64>
 8006dd4:	e00c      	b.n	8006df0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006dda:	2101      	movs	r1, #1
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f7ff ff05 	bl	8006bec <dir_next>
 8006de2:	4603      	mov	r3, r0
 8006de4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006de6:	7dfb      	ldrb	r3, [r7, #23]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d0d7      	beq.n	8006d9c <dir_alloc+0x26>
 8006dec:	e000      	b.n	8006df0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006dee:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006df0:	7dfb      	ldrb	r3, [r7, #23]
 8006df2:	2b04      	cmp	r3, #4
 8006df4:	d101      	bne.n	8006dfa <dir_alloc+0x84>
 8006df6:	2307      	movs	r3, #7
 8006df8:	75fb      	strb	r3, [r7, #23]
	return res;
 8006dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3718      	adds	r7, #24
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	331a      	adds	r3, #26
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7ff f842 	bl	8005e9c <ld_word>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	2b03      	cmp	r3, #3
 8006e22:	d109      	bne.n	8006e38 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	3314      	adds	r3, #20
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f7ff f837 	bl	8005e9c <ld_word>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	041b      	lsls	r3, r3, #16
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006e38:	68fb      	ldr	r3, [r7, #12]
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3710      	adds	r7, #16
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b084      	sub	sp, #16
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	60f8      	str	r0, [r7, #12]
 8006e4a:	60b9      	str	r1, [r7, #8]
 8006e4c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	331a      	adds	r3, #26
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	b292      	uxth	r2, r2
 8006e56:	4611      	mov	r1, r2
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f7ff f85a 	bl	8005f12 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	2b03      	cmp	r3, #3
 8006e64:	d109      	bne.n	8006e7a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	f103 0214 	add.w	r2, r3, #20
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	0c1b      	lsrs	r3, r3, #16
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	4619      	mov	r1, r3
 8006e74:	4610      	mov	r0, r2
 8006e76:	f7ff f84c 	bl	8005f12 <st_word>
	}
}
 8006e7a:	bf00      	nop
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b086      	sub	sp, #24
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
 8006e8a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8006e8c:	2304      	movs	r3, #4
 8006e8e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8006e96:	e03c      	b.n	8006f12 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	69db      	ldr	r3, [r3, #28]
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	6938      	ldr	r0, [r7, #16]
 8006ea0:	f7ff faac 	bl	80063fc <move_window>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006ea8:	7dfb      	ldrb	r3, [r7, #23]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d136      	bne.n	8006f1c <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a1b      	ldr	r3, [r3, #32]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8006eb6:	7bfb      	ldrb	r3, [r7, #15]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d102      	bne.n	8006ec2 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8006ebc:	2304      	movs	r3, #4
 8006ebe:	75fb      	strb	r3, [r7, #23]
 8006ec0:	e031      	b.n	8006f26 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6a1b      	ldr	r3, [r3, #32]
 8006ec6:	330b      	adds	r3, #11
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ece:	73bb      	strb	r3, [r7, #14]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	7bba      	ldrb	r2, [r7, #14]
 8006ed4:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8006ed6:	7bfb      	ldrb	r3, [r7, #15]
 8006ed8:	2be5      	cmp	r3, #229	@ 0xe5
 8006eda:	d011      	beq.n	8006f00 <dir_read+0x7e>
 8006edc:	7bfb      	ldrb	r3, [r7, #15]
 8006ede:	2b2e      	cmp	r3, #46	@ 0x2e
 8006ee0:	d00e      	beq.n	8006f00 <dir_read+0x7e>
 8006ee2:	7bbb      	ldrb	r3, [r7, #14]
 8006ee4:	2b0f      	cmp	r3, #15
 8006ee6:	d00b      	beq.n	8006f00 <dir_read+0x7e>
 8006ee8:	7bbb      	ldrb	r3, [r7, #14]
 8006eea:	f023 0320 	bic.w	r3, r3, #32
 8006eee:	2b08      	cmp	r3, #8
 8006ef0:	bf0c      	ite	eq
 8006ef2:	2301      	moveq	r3, #1
 8006ef4:	2300      	movne	r3, #0
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	461a      	mov	r2, r3
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d00f      	beq.n	8006f20 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8006f00:	2100      	movs	r1, #0
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f7ff fe72 	bl	8006bec <dir_next>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006f0c:	7dfb      	ldrb	r3, [r7, #23]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d108      	bne.n	8006f24 <dir_read+0xa2>
	while (dp->sect) {
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	69db      	ldr	r3, [r3, #28]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1be      	bne.n	8006e98 <dir_read+0x16>
 8006f1a:	e004      	b.n	8006f26 <dir_read+0xa4>
		if (res != FR_OK) break;
 8006f1c:	bf00      	nop
 8006f1e:	e002      	b.n	8006f26 <dir_read+0xa4>
				break;
 8006f20:	bf00      	nop
 8006f22:	e000      	b.n	8006f26 <dir_read+0xa4>
		if (res != FR_OK) break;
 8006f24:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8006f26:	7dfb      	ldrb	r3, [r7, #23]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d002      	beq.n	8006f32 <dir_read+0xb0>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	61da      	str	r2, [r3, #28]
	return res;
 8006f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3718      	adds	r7, #24
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b086      	sub	sp, #24
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006f4a:	2100      	movs	r1, #0
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f7ff fdd2 	bl	8006af6 <dir_sdi>
 8006f52:	4603      	mov	r3, r0
 8006f54:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006f56:	7dfb      	ldrb	r3, [r7, #23]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d001      	beq.n	8006f60 <dir_find+0x24>
 8006f5c:	7dfb      	ldrb	r3, [r7, #23]
 8006f5e:	e03e      	b.n	8006fde <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	69db      	ldr	r3, [r3, #28]
 8006f64:	4619      	mov	r1, r3
 8006f66:	6938      	ldr	r0, [r7, #16]
 8006f68:	f7ff fa48 	bl	80063fc <move_window>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006f70:	7dfb      	ldrb	r3, [r7, #23]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d12f      	bne.n	8006fd6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a1b      	ldr	r3, [r3, #32]
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006f7e:	7bfb      	ldrb	r3, [r7, #15]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d102      	bne.n	8006f8a <dir_find+0x4e>
 8006f84:	2304      	movs	r3, #4
 8006f86:	75fb      	strb	r3, [r7, #23]
 8006f88:	e028      	b.n	8006fdc <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
 8006f8e:	330b      	adds	r3, #11
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f96:	b2da      	uxtb	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6a1b      	ldr	r3, [r3, #32]
 8006fa0:	330b      	adds	r3, #11
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	f003 0308 	and.w	r3, r3, #8
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d10a      	bne.n	8006fc2 <dir_find+0x86>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a18      	ldr	r0, [r3, #32]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	3324      	adds	r3, #36	@ 0x24
 8006fb4:	220b      	movs	r2, #11
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	f7ff f82e 	bl	8006018 <mem_cmp>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00b      	beq.n	8006fda <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f7ff fe11 	bl	8006bec <dir_next>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006fce:	7dfb      	ldrb	r3, [r7, #23]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d0c5      	beq.n	8006f60 <dir_find+0x24>
 8006fd4:	e002      	b.n	8006fdc <dir_find+0xa0>
		if (res != FR_OK) break;
 8006fd6:	bf00      	nop
 8006fd8:	e000      	b.n	8006fdc <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006fda:	bf00      	nop

	return res;
 8006fdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3718      	adds	r7, #24
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b084      	sub	sp, #16
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006ff4:	2101      	movs	r1, #1
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f7ff febd 	bl	8006d76 <dir_alloc>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007000:	7bfb      	ldrb	r3, [r7, #15]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d11c      	bne.n	8007040 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	69db      	ldr	r3, [r3, #28]
 800700a:	4619      	mov	r1, r3
 800700c:	68b8      	ldr	r0, [r7, #8]
 800700e:	f7ff f9f5 	bl	80063fc <move_window>
 8007012:	4603      	mov	r3, r0
 8007014:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007016:	7bfb      	ldrb	r3, [r7, #15]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d111      	bne.n	8007040 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a1b      	ldr	r3, [r3, #32]
 8007020:	2220      	movs	r2, #32
 8007022:	2100      	movs	r1, #0
 8007024:	4618      	mov	r0, r3
 8007026:	f7fe ffdc 	bl	8005fe2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a18      	ldr	r0, [r3, #32]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	3324      	adds	r3, #36	@ 0x24
 8007032:	220b      	movs	r2, #11
 8007034:	4619      	mov	r1, r3
 8007036:	f7fe ffb3 	bl	8005fa0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	2201      	movs	r2, #1
 800703e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007040:	7bfb      	ldrb	r3, [r7, #15]
}
 8007042:	4618      	mov	r0, r3
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b086      	sub	sp, #24
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
 8007052:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	2200      	movs	r2, #0
 8007058:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	69db      	ldr	r3, [r3, #28]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d04f      	beq.n	8007102 <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8007062:	2300      	movs	r3, #0
 8007064:	613b      	str	r3, [r7, #16]
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800706a:	e022      	b.n	80070b2 <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6a1a      	ldr	r2, [r3, #32]
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	1c59      	adds	r1, r3, #1
 8007074:	6179      	str	r1, [r7, #20]
 8007076:	4413      	add	r3, r2
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800707c:	7bfb      	ldrb	r3, [r7, #15]
 800707e:	2b20      	cmp	r3, #32
 8007080:	d016      	beq.n	80070b0 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8007082:	7bfb      	ldrb	r3, [r7, #15]
 8007084:	2b05      	cmp	r3, #5
 8007086:	d101      	bne.n	800708c <get_fileinfo+0x42>
 8007088:	23e5      	movs	r3, #229	@ 0xe5
 800708a:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	2b09      	cmp	r3, #9
 8007090:	d106      	bne.n	80070a0 <get_fileinfo+0x56>
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	1c5a      	adds	r2, r3, #1
 8007096:	613a      	str	r2, [r7, #16]
 8007098:	683a      	ldr	r2, [r7, #0]
 800709a:	4413      	add	r3, r2
 800709c:	222e      	movs	r2, #46	@ 0x2e
 800709e:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	1c5a      	adds	r2, r3, #1
 80070a4:	613a      	str	r2, [r7, #16]
 80070a6:	683a      	ldr	r2, [r7, #0]
 80070a8:	4413      	add	r3, r2
 80070aa:	7bfa      	ldrb	r2, [r7, #15]
 80070ac:	725a      	strb	r2, [r3, #9]
 80070ae:	e000      	b.n	80070b2 <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 80070b0:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	2b0a      	cmp	r3, #10
 80070b6:	d9d9      	bls.n	800706c <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 80070b8:	683a      	ldr	r2, [r7, #0]
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	4413      	add	r3, r2
 80070be:	3309      	adds	r3, #9
 80070c0:	2200      	movs	r2, #0
 80070c2:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a1b      	ldr	r3, [r3, #32]
 80070c8:	7ada      	ldrb	r2, [r3, #11]
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	331c      	adds	r3, #28
 80070d4:	4618      	mov	r0, r3
 80070d6:	f7fe fef9 	bl	8005ecc <ld_dword>
 80070da:	4602      	mov	r2, r0
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a1b      	ldr	r3, [r3, #32]
 80070e4:	3316      	adds	r3, #22
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7fe fef0 	bl	8005ecc <ld_dword>
 80070ec:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	b29a      	uxth	r2, r3
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	80da      	strh	r2, [r3, #6]
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	0c1b      	lsrs	r3, r3, #16
 80070fa:	b29a      	uxth	r2, r3
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	809a      	strh	r2, [r3, #4]
 8007100:	e000      	b.n	8007104 <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007102:	bf00      	nop
}
 8007104:	3718      	adds	r7, #24
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
	...

0800710c <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	1c59      	adds	r1, r3, #1
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	6011      	str	r1, [r2, #0]
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8007122:	89fb      	ldrh	r3, [r7, #14]
 8007124:	2b60      	cmp	r3, #96	@ 0x60
 8007126:	d905      	bls.n	8007134 <get_achar+0x28>
 8007128:	89fb      	ldrh	r3, [r7, #14]
 800712a:	2b7a      	cmp	r3, #122	@ 0x7a
 800712c:	d802      	bhi.n	8007134 <get_achar+0x28>
 800712e:	89fb      	ldrh	r3, [r7, #14]
 8007130:	3b20      	subs	r3, #32
 8007132:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8007134:	89fb      	ldrh	r3, [r7, #14]
 8007136:	2b7f      	cmp	r3, #127	@ 0x7f
 8007138:	d904      	bls.n	8007144 <get_achar+0x38>
 800713a:	89fb      	ldrh	r3, [r7, #14]
 800713c:	3b80      	subs	r3, #128	@ 0x80
 800713e:	4a05      	ldr	r2, [pc, #20]	@ (8007154 <get_achar+0x48>)
 8007140:	5cd3      	ldrb	r3, [r2, r3]
 8007142:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 8007144:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 8007146:	4618      	mov	r0, r3
 8007148:	3714      	adds	r7, #20
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	0800a330 	.word	0x0800a330

08007158 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b08a      	sub	sp, #40	@ 0x28
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	607a      	str	r2, [r7, #4]
 8007164:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 8007166:	e009      	b.n	800717c <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 8007168:	f107 0308 	add.w	r3, r7, #8
 800716c:	4618      	mov	r0, r3
 800716e:	f7ff ffcd 	bl	800710c <get_achar>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d101      	bne.n	800717c <pattern_matching+0x24>
 8007178:	2300      	movs	r3, #0
 800717a:	e064      	b.n	8007246 <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	1e5a      	subs	r2, r3, #1
 8007180:	607a      	str	r2, [r7, #4]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1f0      	bne.n	8007168 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d104      	bne.n	8007198 <pattern_matching+0x40>
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d001      	beq.n	8007198 <pattern_matching+0x40>
 8007194:	2301      	movs	r3, #1
 8007196:	e056      	b.n	8007246 <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	617b      	str	r3, [r7, #20]
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	2b3f      	cmp	r3, #63	@ 0x3f
 80071a6:	d003      	beq.n	80071b0 <pattern_matching+0x58>
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80071ae:	d126      	bne.n	80071fe <pattern_matching+0xa6>
				nm = nx = 0;
 80071b0:	2300      	movs	r3, #0
 80071b2:	61fb      	str	r3, [r7, #28]
 80071b4:	69fb      	ldr	r3, [r7, #28]
 80071b6:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	1c5a      	adds	r2, r3, #1
 80071bc:	617a      	str	r2, [r7, #20]
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	2b3f      	cmp	r3, #63	@ 0x3f
 80071c2:	d103      	bne.n	80071cc <pattern_matching+0x74>
 80071c4:	6a3b      	ldr	r3, [r7, #32]
 80071c6:	3301      	adds	r3, #1
 80071c8:	623b      	str	r3, [r7, #32]
 80071ca:	e001      	b.n	80071d0 <pattern_matching+0x78>
 80071cc:	2301      	movs	r3, #1
 80071ce:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	2b3f      	cmp	r3, #63	@ 0x3f
 80071d6:	d0ef      	beq.n	80071b8 <pattern_matching+0x60>
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80071de:	d0eb      	beq.n	80071b8 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 80071e0:	6978      	ldr	r0, [r7, #20]
 80071e2:	6939      	ldr	r1, [r7, #16]
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	6a3a      	ldr	r2, [r7, #32]
 80071e8:	f7ff ffb6 	bl	8007158 <pattern_matching>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d001      	beq.n	80071f6 <pattern_matching+0x9e>
 80071f2:	2301      	movs	r3, #1
 80071f4:	e027      	b.n	8007246 <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80071fc:	e017      	b.n	800722e <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 80071fe:	f107 0314 	add.w	r3, r7, #20
 8007202:	4618      	mov	r0, r3
 8007204:	f7ff ff82 	bl	800710c <get_achar>
 8007208:	4603      	mov	r3, r0
 800720a:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 800720c:	f107 0310 	add.w	r3, r7, #16
 8007210:	4618      	mov	r0, r3
 8007212:	f7ff ff7b 	bl	800710c <get_achar>
 8007216:	4603      	mov	r3, r0
 8007218:	84fb      	strh	r3, [r7, #38]	@ 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 800721a:	8b7a      	ldrh	r2, [r7, #26]
 800721c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800721e:	429a      	cmp	r2, r3
 8007220:	d104      	bne.n	800722c <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 8007222:	8b7b      	ldrh	r3, [r7, #26]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d1bb      	bne.n	80071a0 <pattern_matching+0x48>
 8007228:	2301      	movs	r3, #1
 800722a:	e00c      	b.n	8007246 <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 800722c:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 800722e:	f107 0308 	add.w	r3, r7, #8
 8007232:	4618      	mov	r0, r3
 8007234:	f7ff ff6a 	bl	800710c <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d002      	beq.n	8007244 <pattern_matching+0xec>
 800723e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007240:	2b00      	cmp	r3, #0
 8007242:	d1a9      	bne.n	8007198 <pattern_matching+0x40>

	return 0;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3728      	adds	r7, #40	@ 0x28
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
	...

08007250 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b088      	sub	sp, #32
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	60fb      	str	r3, [r7, #12]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	3324      	adds	r3, #36	@ 0x24
 8007264:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007266:	220b      	movs	r2, #11
 8007268:	2120      	movs	r1, #32
 800726a:	68b8      	ldr	r0, [r7, #8]
 800726c:	f7fe feb9 	bl	8005fe2 <mem_set>
	si = i = 0; ni = 8;
 8007270:	2300      	movs	r3, #0
 8007272:	613b      	str	r3, [r7, #16]
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	61fb      	str	r3, [r7, #28]
 8007278:	2308      	movs	r3, #8
 800727a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800727c:	69fb      	ldr	r3, [r7, #28]
 800727e:	1c5a      	adds	r2, r3, #1
 8007280:	61fa      	str	r2, [r7, #28]
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	4413      	add	r3, r2
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800728a:	7efb      	ldrb	r3, [r7, #27]
 800728c:	2b20      	cmp	r3, #32
 800728e:	d94e      	bls.n	800732e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007290:	7efb      	ldrb	r3, [r7, #27]
 8007292:	2b2f      	cmp	r3, #47	@ 0x2f
 8007294:	d006      	beq.n	80072a4 <create_name+0x54>
 8007296:	7efb      	ldrb	r3, [r7, #27]
 8007298:	2b5c      	cmp	r3, #92	@ 0x5c
 800729a:	d110      	bne.n	80072be <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800729c:	e002      	b.n	80072a4 <create_name+0x54>
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	3301      	adds	r3, #1
 80072a2:	61fb      	str	r3, [r7, #28]
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	69fb      	ldr	r3, [r7, #28]
 80072a8:	4413      	add	r3, r2
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	2b2f      	cmp	r3, #47	@ 0x2f
 80072ae:	d0f6      	beq.n	800729e <create_name+0x4e>
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	4413      	add	r3, r2
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	2b5c      	cmp	r3, #92	@ 0x5c
 80072ba:	d0f0      	beq.n	800729e <create_name+0x4e>
			break;
 80072bc:	e038      	b.n	8007330 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80072be:	7efb      	ldrb	r3, [r7, #27]
 80072c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80072c2:	d003      	beq.n	80072cc <create_name+0x7c>
 80072c4:	693a      	ldr	r2, [r7, #16]
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d30c      	bcc.n	80072e6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	2b0b      	cmp	r3, #11
 80072d0:	d002      	beq.n	80072d8 <create_name+0x88>
 80072d2:	7efb      	ldrb	r3, [r7, #27]
 80072d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80072d6:	d001      	beq.n	80072dc <create_name+0x8c>
 80072d8:	2306      	movs	r3, #6
 80072da:	e044      	b.n	8007366 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80072dc:	2308      	movs	r3, #8
 80072de:	613b      	str	r3, [r7, #16]
 80072e0:	230b      	movs	r3, #11
 80072e2:	617b      	str	r3, [r7, #20]
			continue;
 80072e4:	e022      	b.n	800732c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80072e6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	da04      	bge.n	80072f8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80072ee:	7efb      	ldrb	r3, [r7, #27]
 80072f0:	3b80      	subs	r3, #128	@ 0x80
 80072f2:	4a1f      	ldr	r2, [pc, #124]	@ (8007370 <create_name+0x120>)
 80072f4:	5cd3      	ldrb	r3, [r2, r3]
 80072f6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80072f8:	7efb      	ldrb	r3, [r7, #27]
 80072fa:	4619      	mov	r1, r3
 80072fc:	481d      	ldr	r0, [pc, #116]	@ (8007374 <create_name+0x124>)
 80072fe:	f7fe feb2 	bl	8006066 <chk_chr>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d001      	beq.n	800730c <create_name+0xbc>
 8007308:	2306      	movs	r3, #6
 800730a:	e02c      	b.n	8007366 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800730c:	7efb      	ldrb	r3, [r7, #27]
 800730e:	2b60      	cmp	r3, #96	@ 0x60
 8007310:	d905      	bls.n	800731e <create_name+0xce>
 8007312:	7efb      	ldrb	r3, [r7, #27]
 8007314:	2b7a      	cmp	r3, #122	@ 0x7a
 8007316:	d802      	bhi.n	800731e <create_name+0xce>
 8007318:	7efb      	ldrb	r3, [r7, #27]
 800731a:	3b20      	subs	r3, #32
 800731c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	1c5a      	adds	r2, r3, #1
 8007322:	613a      	str	r2, [r7, #16]
 8007324:	68ba      	ldr	r2, [r7, #8]
 8007326:	4413      	add	r3, r2
 8007328:	7efa      	ldrb	r2, [r7, #27]
 800732a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800732c:	e7a6      	b.n	800727c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800732e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	441a      	add	r2, r3
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d101      	bne.n	8007344 <create_name+0xf4>
 8007340:	2306      	movs	r3, #6
 8007342:	e010      	b.n	8007366 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	2be5      	cmp	r3, #229	@ 0xe5
 800734a:	d102      	bne.n	8007352 <create_name+0x102>
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	2205      	movs	r2, #5
 8007350:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007352:	7efb      	ldrb	r3, [r7, #27]
 8007354:	2b20      	cmp	r3, #32
 8007356:	d801      	bhi.n	800735c <create_name+0x10c>
 8007358:	2204      	movs	r2, #4
 800735a:	e000      	b.n	800735e <create_name+0x10e>
 800735c:	2200      	movs	r2, #0
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	330b      	adds	r3, #11
 8007362:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007364:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007366:	4618      	mov	r0, r3
 8007368:	3720      	adds	r7, #32
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	0800a330 	.word	0x0800a330
 8007374:	0800a2bc 	.word	0x0800a2bc

08007378 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b086      	sub	sp, #24
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800738c:	e002      	b.n	8007394 <follow_path+0x1c>
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	3301      	adds	r3, #1
 8007392:	603b      	str	r3, [r7, #0]
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	2b2f      	cmp	r3, #47	@ 0x2f
 800739a:	d0f8      	beq.n	800738e <follow_path+0x16>
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	2b5c      	cmp	r3, #92	@ 0x5c
 80073a2:	d0f4      	beq.n	800738e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	2200      	movs	r2, #0
 80073a8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	2b1f      	cmp	r3, #31
 80073b0:	d80a      	bhi.n	80073c8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2280      	movs	r2, #128	@ 0x80
 80073b6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80073ba:	2100      	movs	r1, #0
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f7ff fb9a 	bl	8006af6 <dir_sdi>
 80073c2:	4603      	mov	r3, r0
 80073c4:	75fb      	strb	r3, [r7, #23]
 80073c6:	e043      	b.n	8007450 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80073c8:	463b      	mov	r3, r7
 80073ca:	4619      	mov	r1, r3
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f7ff ff3f 	bl	8007250 <create_name>
 80073d2:	4603      	mov	r3, r0
 80073d4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80073d6:	7dfb      	ldrb	r3, [r7, #23]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d134      	bne.n	8007446 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f7ff fdad 	bl	8006f3c <dir_find>
 80073e2:	4603      	mov	r3, r0
 80073e4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80073ec:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80073ee:	7dfb      	ldrb	r3, [r7, #23]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00a      	beq.n	800740a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80073f4:	7dfb      	ldrb	r3, [r7, #23]
 80073f6:	2b04      	cmp	r3, #4
 80073f8:	d127      	bne.n	800744a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80073fa:	7afb      	ldrb	r3, [r7, #11]
 80073fc:	f003 0304 	and.w	r3, r3, #4
 8007400:	2b00      	cmp	r3, #0
 8007402:	d122      	bne.n	800744a <follow_path+0xd2>
 8007404:	2305      	movs	r3, #5
 8007406:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007408:	e01f      	b.n	800744a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800740a:	7afb      	ldrb	r3, [r7, #11]
 800740c:	f003 0304 	and.w	r3, r3, #4
 8007410:	2b00      	cmp	r3, #0
 8007412:	d11c      	bne.n	800744e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	799b      	ldrb	r3, [r3, #6]
 8007418:	f003 0310 	and.w	r3, r3, #16
 800741c:	2b00      	cmp	r3, #0
 800741e:	d102      	bne.n	8007426 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007420:	2305      	movs	r3, #5
 8007422:	75fb      	strb	r3, [r7, #23]
 8007424:	e014      	b.n	8007450 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	695b      	ldr	r3, [r3, #20]
 8007430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007434:	4413      	add	r3, r2
 8007436:	4619      	mov	r1, r3
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f7ff fce3 	bl	8006e04 <ld_clust>
 800743e:	4602      	mov	r2, r0
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007444:	e7c0      	b.n	80073c8 <follow_path+0x50>
			if (res != FR_OK) break;
 8007446:	bf00      	nop
 8007448:	e002      	b.n	8007450 <follow_path+0xd8>
				break;
 800744a:	bf00      	nop
 800744c:	e000      	b.n	8007450 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800744e:	bf00      	nop
			}
		}
	}

	return res;
 8007450:	7dfb      	ldrb	r3, [r7, #23]
}
 8007452:	4618      	mov	r0, r3
 8007454:	3718      	adds	r7, #24
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800745a:	b480      	push	{r7}
 800745c:	b087      	sub	sp, #28
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007462:	f04f 33ff 	mov.w	r3, #4294967295
 8007466:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d031      	beq.n	80074d4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	617b      	str	r3, [r7, #20]
 8007476:	e002      	b.n	800747e <get_ldnumber+0x24>
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	3301      	adds	r3, #1
 800747c:	617b      	str	r3, [r7, #20]
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	2b20      	cmp	r3, #32
 8007484:	d903      	bls.n	800748e <get_ldnumber+0x34>
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	2b3a      	cmp	r3, #58	@ 0x3a
 800748c:	d1f4      	bne.n	8007478 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	2b3a      	cmp	r3, #58	@ 0x3a
 8007494:	d11c      	bne.n	80074d0 <get_ldnumber+0x76>
			tp = *path;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	1c5a      	adds	r2, r3, #1
 80074a0:	60fa      	str	r2, [r7, #12]
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	3b30      	subs	r3, #48	@ 0x30
 80074a6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	2b09      	cmp	r3, #9
 80074ac:	d80e      	bhi.n	80074cc <get_ldnumber+0x72>
 80074ae:	68fa      	ldr	r2, [r7, #12]
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d10a      	bne.n	80074cc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d807      	bhi.n	80074cc <get_ldnumber+0x72>
					vol = (int)i;
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	3301      	adds	r3, #1
 80074c4:	617b      	str	r3, [r7, #20]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	697a      	ldr	r2, [r7, #20]
 80074ca:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	e002      	b.n	80074d6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80074d0:	2300      	movs	r3, #0
 80074d2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80074d4:	693b      	ldr	r3, [r7, #16]
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	371c      	adds	r7, #28
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
	...

080074e4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	70da      	strb	r2, [r3, #3]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f04f 32ff 	mov.w	r2, #4294967295
 80074fa:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80074fc:	6839      	ldr	r1, [r7, #0]
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f7fe ff7c 	bl	80063fc <move_window>
 8007504:	4603      	mov	r3, r0
 8007506:	2b00      	cmp	r3, #0
 8007508:	d001      	beq.n	800750e <check_fs+0x2a>
 800750a:	2304      	movs	r3, #4
 800750c:	e038      	b.n	8007580 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	3330      	adds	r3, #48	@ 0x30
 8007512:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007516:	4618      	mov	r0, r3
 8007518:	f7fe fcc0 	bl	8005e9c <ld_word>
 800751c:	4603      	mov	r3, r0
 800751e:	461a      	mov	r2, r3
 8007520:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007524:	429a      	cmp	r2, r3
 8007526:	d001      	beq.n	800752c <check_fs+0x48>
 8007528:	2303      	movs	r3, #3
 800752a:	e029      	b.n	8007580 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007532:	2be9      	cmp	r3, #233	@ 0xe9
 8007534:	d009      	beq.n	800754a <check_fs+0x66>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800753c:	2beb      	cmp	r3, #235	@ 0xeb
 800753e:	d11e      	bne.n	800757e <check_fs+0x9a>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007546:	2b90      	cmp	r3, #144	@ 0x90
 8007548:	d119      	bne.n	800757e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	3330      	adds	r3, #48	@ 0x30
 800754e:	3336      	adds	r3, #54	@ 0x36
 8007550:	4618      	mov	r0, r3
 8007552:	f7fe fcbb 	bl	8005ecc <ld_dword>
 8007556:	4603      	mov	r3, r0
 8007558:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800755c:	4a0a      	ldr	r2, [pc, #40]	@ (8007588 <check_fs+0xa4>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d101      	bne.n	8007566 <check_fs+0x82>
 8007562:	2300      	movs	r3, #0
 8007564:	e00c      	b.n	8007580 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	3330      	adds	r3, #48	@ 0x30
 800756a:	3352      	adds	r3, #82	@ 0x52
 800756c:	4618      	mov	r0, r3
 800756e:	f7fe fcad 	bl	8005ecc <ld_dword>
 8007572:	4603      	mov	r3, r0
 8007574:	4a05      	ldr	r2, [pc, #20]	@ (800758c <check_fs+0xa8>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d101      	bne.n	800757e <check_fs+0x9a>
 800757a:	2300      	movs	r3, #0
 800757c:	e000      	b.n	8007580 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800757e:	2302      	movs	r3, #2
}
 8007580:	4618      	mov	r0, r3
 8007582:	3708      	adds	r7, #8
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}
 8007588:	00544146 	.word	0x00544146
 800758c:	33544146 	.word	0x33544146

08007590 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b096      	sub	sp, #88	@ 0x58
 8007594:	af00      	add	r7, sp, #0
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	60b9      	str	r1, [r7, #8]
 800759a:	4613      	mov	r3, r2
 800759c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	2200      	movs	r2, #0
 80075a2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80075a4:	68f8      	ldr	r0, [r7, #12]
 80075a6:	f7ff ff58 	bl	800745a <get_ldnumber>
 80075aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80075ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	da01      	bge.n	80075b6 <find_volume+0x26>
 80075b2:	230b      	movs	r3, #11
 80075b4:	e22d      	b.n	8007a12 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80075b6:	4aa1      	ldr	r2, [pc, #644]	@ (800783c <find_volume+0x2ac>)
 80075b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075be:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80075c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d101      	bne.n	80075ca <find_volume+0x3a>
 80075c6:	230c      	movs	r3, #12
 80075c8:	e223      	b.n	8007a12 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80075ce:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80075d0:	79fb      	ldrb	r3, [r7, #7]
 80075d2:	f023 0301 	bic.w	r3, r3, #1
 80075d6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80075d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d01a      	beq.n	8007616 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80075e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e2:	785b      	ldrb	r3, [r3, #1]
 80075e4:	4618      	mov	r0, r3
 80075e6:	f7fe fbb3 	bl	8005d50 <disk_status>
 80075ea:	4603      	mov	r3, r0
 80075ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80075f0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80075f4:	f003 0301 	and.w	r3, r3, #1
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d10c      	bne.n	8007616 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80075fc:	79fb      	ldrb	r3, [r7, #7]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d007      	beq.n	8007612 <find_volume+0x82>
 8007602:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007606:	f003 0304 	and.w	r3, r3, #4
 800760a:	2b00      	cmp	r3, #0
 800760c:	d001      	beq.n	8007612 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800760e:	230a      	movs	r3, #10
 8007610:	e1ff      	b.n	8007a12 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8007612:	2300      	movs	r3, #0
 8007614:	e1fd      	b.n	8007a12 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007618:	2200      	movs	r2, #0
 800761a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800761c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800761e:	b2da      	uxtb	r2, r3
 8007620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007622:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007626:	785b      	ldrb	r3, [r3, #1]
 8007628:	4618      	mov	r0, r3
 800762a:	f7fe fbab 	bl	8005d84 <disk_initialize>
 800762e:	4603      	mov	r3, r0
 8007630:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007634:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007638:	f003 0301 	and.w	r3, r3, #1
 800763c:	2b00      	cmp	r3, #0
 800763e:	d001      	beq.n	8007644 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007640:	2303      	movs	r3, #3
 8007642:	e1e6      	b.n	8007a12 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007644:	79fb      	ldrb	r3, [r7, #7]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d007      	beq.n	800765a <find_volume+0xca>
 800764a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800764e:	f003 0304 	and.w	r3, r3, #4
 8007652:	2b00      	cmp	r3, #0
 8007654:	d001      	beq.n	800765a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007656:	230a      	movs	r3, #10
 8007658:	e1db      	b.n	8007a12 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800765a:	2300      	movs	r3, #0
 800765c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800765e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007660:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007662:	f7ff ff3f 	bl	80074e4 <check_fs>
 8007666:	4603      	mov	r3, r0
 8007668:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800766c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007670:	2b02      	cmp	r3, #2
 8007672:	d149      	bne.n	8007708 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007674:	2300      	movs	r3, #0
 8007676:	643b      	str	r3, [r7, #64]	@ 0x40
 8007678:	e01e      	b.n	80076b8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800767a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800767c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007680:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007682:	011b      	lsls	r3, r3, #4
 8007684:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8007688:	4413      	add	r3, r2
 800768a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800768c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800768e:	3304      	adds	r3, #4
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d006      	beq.n	80076a4 <find_volume+0x114>
 8007696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007698:	3308      	adds	r3, #8
 800769a:	4618      	mov	r0, r3
 800769c:	f7fe fc16 	bl	8005ecc <ld_dword>
 80076a0:	4602      	mov	r2, r0
 80076a2:	e000      	b.n	80076a6 <find_volume+0x116>
 80076a4:	2200      	movs	r2, #0
 80076a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	3358      	adds	r3, #88	@ 0x58
 80076ac:	443b      	add	r3, r7
 80076ae:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80076b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076b4:	3301      	adds	r3, #1
 80076b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80076b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076ba:	2b03      	cmp	r3, #3
 80076bc:	d9dd      	bls.n	800767a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80076be:	2300      	movs	r3, #0
 80076c0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80076c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d002      	beq.n	80076ce <find_volume+0x13e>
 80076c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076ca:	3b01      	subs	r3, #1
 80076cc:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80076ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	3358      	adds	r3, #88	@ 0x58
 80076d4:	443b      	add	r3, r7
 80076d6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80076da:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80076dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d005      	beq.n	80076ee <find_volume+0x15e>
 80076e2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80076e4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80076e6:	f7ff fefd 	bl	80074e4 <check_fs>
 80076ea:	4603      	mov	r3, r0
 80076ec:	e000      	b.n	80076f0 <find_volume+0x160>
 80076ee:	2303      	movs	r3, #3
 80076f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80076f4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d905      	bls.n	8007708 <find_volume+0x178>
 80076fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076fe:	3301      	adds	r3, #1
 8007700:	643b      	str	r3, [r7, #64]	@ 0x40
 8007702:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007704:	2b03      	cmp	r3, #3
 8007706:	d9e2      	bls.n	80076ce <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007708:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800770c:	2b04      	cmp	r3, #4
 800770e:	d101      	bne.n	8007714 <find_volume+0x184>
 8007710:	2301      	movs	r3, #1
 8007712:	e17e      	b.n	8007a12 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007714:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007718:	2b01      	cmp	r3, #1
 800771a:	d901      	bls.n	8007720 <find_volume+0x190>
 800771c:	230d      	movs	r3, #13
 800771e:	e178      	b.n	8007a12 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007722:	3330      	adds	r3, #48	@ 0x30
 8007724:	330b      	adds	r3, #11
 8007726:	4618      	mov	r0, r3
 8007728:	f7fe fbb8 	bl	8005e9c <ld_word>
 800772c:	4603      	mov	r3, r0
 800772e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007732:	d001      	beq.n	8007738 <find_volume+0x1a8>
 8007734:	230d      	movs	r3, #13
 8007736:	e16c      	b.n	8007a12 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800773a:	3330      	adds	r3, #48	@ 0x30
 800773c:	3316      	adds	r3, #22
 800773e:	4618      	mov	r0, r3
 8007740:	f7fe fbac 	bl	8005e9c <ld_word>
 8007744:	4603      	mov	r3, r0
 8007746:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007748:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800774a:	2b00      	cmp	r3, #0
 800774c:	d106      	bne.n	800775c <find_volume+0x1cc>
 800774e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007750:	3330      	adds	r3, #48	@ 0x30
 8007752:	3324      	adds	r3, #36	@ 0x24
 8007754:	4618      	mov	r0, r3
 8007756:	f7fe fbb9 	bl	8005ecc <ld_dword>
 800775a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800775c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800775e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007760:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007764:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8007768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800776a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800776c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800776e:	789b      	ldrb	r3, [r3, #2]
 8007770:	2b01      	cmp	r3, #1
 8007772:	d005      	beq.n	8007780 <find_volume+0x1f0>
 8007774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007776:	789b      	ldrb	r3, [r3, #2]
 8007778:	2b02      	cmp	r3, #2
 800777a:	d001      	beq.n	8007780 <find_volume+0x1f0>
 800777c:	230d      	movs	r3, #13
 800777e:	e148      	b.n	8007a12 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007782:	789b      	ldrb	r3, [r3, #2]
 8007784:	461a      	mov	r2, r3
 8007786:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007788:	fb02 f303 	mul.w	r3, r2, r3
 800778c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800778e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007790:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007794:	461a      	mov	r2, r3
 8007796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007798:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800779a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800779c:	895b      	ldrh	r3, [r3, #10]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d008      	beq.n	80077b4 <find_volume+0x224>
 80077a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a4:	895b      	ldrh	r3, [r3, #10]
 80077a6:	461a      	mov	r2, r3
 80077a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077aa:	895b      	ldrh	r3, [r3, #10]
 80077ac:	3b01      	subs	r3, #1
 80077ae:	4013      	ands	r3, r2
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d001      	beq.n	80077b8 <find_volume+0x228>
 80077b4:	230d      	movs	r3, #13
 80077b6:	e12c      	b.n	8007a12 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80077b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ba:	3330      	adds	r3, #48	@ 0x30
 80077bc:	3311      	adds	r3, #17
 80077be:	4618      	mov	r0, r3
 80077c0:	f7fe fb6c 	bl	8005e9c <ld_word>
 80077c4:	4603      	mov	r3, r0
 80077c6:	461a      	mov	r2, r3
 80077c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ca:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80077cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ce:	891b      	ldrh	r3, [r3, #8]
 80077d0:	f003 030f 	and.w	r3, r3, #15
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d001      	beq.n	80077de <find_volume+0x24e>
 80077da:	230d      	movs	r3, #13
 80077dc:	e119      	b.n	8007a12 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80077de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077e0:	3330      	adds	r3, #48	@ 0x30
 80077e2:	3313      	adds	r3, #19
 80077e4:	4618      	mov	r0, r3
 80077e6:	f7fe fb59 	bl	8005e9c <ld_word>
 80077ea:	4603      	mov	r3, r0
 80077ec:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80077ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d106      	bne.n	8007802 <find_volume+0x272>
 80077f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077f6:	3330      	adds	r3, #48	@ 0x30
 80077f8:	3320      	adds	r3, #32
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7fe fb66 	bl	8005ecc <ld_dword>
 8007800:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007804:	3330      	adds	r3, #48	@ 0x30
 8007806:	330e      	adds	r3, #14
 8007808:	4618      	mov	r0, r3
 800780a:	f7fe fb47 	bl	8005e9c <ld_word>
 800780e:	4603      	mov	r3, r0
 8007810:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007812:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007814:	2b00      	cmp	r3, #0
 8007816:	d101      	bne.n	800781c <find_volume+0x28c>
 8007818:	230d      	movs	r3, #13
 800781a:	e0fa      	b.n	8007a12 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800781c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800781e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007820:	4413      	add	r3, r2
 8007822:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007824:	8912      	ldrh	r2, [r2, #8]
 8007826:	0912      	lsrs	r2, r2, #4
 8007828:	b292      	uxth	r2, r2
 800782a:	4413      	add	r3, r2
 800782c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800782e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007832:	429a      	cmp	r2, r3
 8007834:	d204      	bcs.n	8007840 <find_volume+0x2b0>
 8007836:	230d      	movs	r3, #13
 8007838:	e0eb      	b.n	8007a12 <find_volume+0x482>
 800783a:	bf00      	nop
 800783c:	20000828 	.word	0x20000828
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007840:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007844:	1ad3      	subs	r3, r2, r3
 8007846:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007848:	8952      	ldrh	r2, [r2, #10]
 800784a:	fbb3 f3f2 	udiv	r3, r3, r2
 800784e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007852:	2b00      	cmp	r3, #0
 8007854:	d101      	bne.n	800785a <find_volume+0x2ca>
 8007856:	230d      	movs	r3, #13
 8007858:	e0db      	b.n	8007a12 <find_volume+0x482>
		fmt = FS_FAT32;
 800785a:	2303      	movs	r3, #3
 800785c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007862:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8007866:	4293      	cmp	r3, r2
 8007868:	d802      	bhi.n	8007870 <find_volume+0x2e0>
 800786a:	2302      	movs	r3, #2
 800786c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007872:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8007876:	4293      	cmp	r3, r2
 8007878:	d802      	bhi.n	8007880 <find_volume+0x2f0>
 800787a:	2301      	movs	r3, #1
 800787c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007882:	1c9a      	adds	r2, r3, #2
 8007884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007886:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8007888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800788a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800788c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800788e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007890:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007892:	441a      	add	r2, r3
 8007894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007896:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8007898:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800789a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800789c:	441a      	add	r2, r3
 800789e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078a0:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 80078a2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80078a6:	2b03      	cmp	r3, #3
 80078a8:	d11e      	bne.n	80078e8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80078aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ac:	3330      	adds	r3, #48	@ 0x30
 80078ae:	332a      	adds	r3, #42	@ 0x2a
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7fe faf3 	bl	8005e9c <ld_word>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d001      	beq.n	80078c0 <find_volume+0x330>
 80078bc:	230d      	movs	r3, #13
 80078be:	e0a8      	b.n	8007a12 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80078c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078c2:	891b      	ldrh	r3, [r3, #8]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d001      	beq.n	80078cc <find_volume+0x33c>
 80078c8:	230d      	movs	r3, #13
 80078ca:	e0a2      	b.n	8007a12 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80078cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ce:	3330      	adds	r3, #48	@ 0x30
 80078d0:	332c      	adds	r3, #44	@ 0x2c
 80078d2:	4618      	mov	r0, r3
 80078d4:	f7fe fafa 	bl	8005ecc <ld_dword>
 80078d8:	4602      	mov	r2, r0
 80078da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078dc:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80078de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078e0:	695b      	ldr	r3, [r3, #20]
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80078e6:	e01f      	b.n	8007928 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80078e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ea:	891b      	ldrh	r3, [r3, #8]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d101      	bne.n	80078f4 <find_volume+0x364>
 80078f0:	230d      	movs	r3, #13
 80078f2:	e08e      	b.n	8007a12 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80078f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078f6:	6a1a      	ldr	r2, [r3, #32]
 80078f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078fa:	441a      	add	r2, r3
 80078fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078fe:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007900:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007904:	2b02      	cmp	r3, #2
 8007906:	d103      	bne.n	8007910 <find_volume+0x380>
 8007908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800790a:	695b      	ldr	r3, [r3, #20]
 800790c:	005b      	lsls	r3, r3, #1
 800790e:	e00a      	b.n	8007926 <find_volume+0x396>
 8007910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007912:	695a      	ldr	r2, [r3, #20]
 8007914:	4613      	mov	r3, r2
 8007916:	005b      	lsls	r3, r3, #1
 8007918:	4413      	add	r3, r2
 800791a:	085a      	lsrs	r2, r3, #1
 800791c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800791e:	695b      	ldr	r3, [r3, #20]
 8007920:	f003 0301 	and.w	r3, r3, #1
 8007924:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007926:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800792a:	699a      	ldr	r2, [r3, #24]
 800792c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800792e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8007932:	0a5b      	lsrs	r3, r3, #9
 8007934:	429a      	cmp	r2, r3
 8007936:	d201      	bcs.n	800793c <find_volume+0x3ac>
 8007938:	230d      	movs	r3, #13
 800793a:	e06a      	b.n	8007a12 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800793c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800793e:	f04f 32ff 	mov.w	r2, #4294967295
 8007942:	611a      	str	r2, [r3, #16]
 8007944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007946:	691a      	ldr	r2, [r3, #16]
 8007948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800794a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800794c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800794e:	2280      	movs	r2, #128	@ 0x80
 8007950:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007952:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007956:	2b03      	cmp	r3, #3
 8007958:	d149      	bne.n	80079ee <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800795a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800795c:	3330      	adds	r3, #48	@ 0x30
 800795e:	3330      	adds	r3, #48	@ 0x30
 8007960:	4618      	mov	r0, r3
 8007962:	f7fe fa9b 	bl	8005e9c <ld_word>
 8007966:	4603      	mov	r3, r0
 8007968:	2b01      	cmp	r3, #1
 800796a:	d140      	bne.n	80079ee <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800796c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800796e:	3301      	adds	r3, #1
 8007970:	4619      	mov	r1, r3
 8007972:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007974:	f7fe fd42 	bl	80063fc <move_window>
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d137      	bne.n	80079ee <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800797e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007980:	2200      	movs	r2, #0
 8007982:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007986:	3330      	adds	r3, #48	@ 0x30
 8007988:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800798c:	4618      	mov	r0, r3
 800798e:	f7fe fa85 	bl	8005e9c <ld_word>
 8007992:	4603      	mov	r3, r0
 8007994:	461a      	mov	r2, r3
 8007996:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800799a:	429a      	cmp	r2, r3
 800799c:	d127      	bne.n	80079ee <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800799e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a0:	3330      	adds	r3, #48	@ 0x30
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7fe fa92 	bl	8005ecc <ld_dword>
 80079a8:	4603      	mov	r3, r0
 80079aa:	4a1c      	ldr	r2, [pc, #112]	@ (8007a1c <find_volume+0x48c>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d11e      	bne.n	80079ee <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80079b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079b2:	3330      	adds	r3, #48	@ 0x30
 80079b4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80079b8:	4618      	mov	r0, r3
 80079ba:	f7fe fa87 	bl	8005ecc <ld_dword>
 80079be:	4603      	mov	r3, r0
 80079c0:	4a17      	ldr	r2, [pc, #92]	@ (8007a20 <find_volume+0x490>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d113      	bne.n	80079ee <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80079c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079c8:	3330      	adds	r3, #48	@ 0x30
 80079ca:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7fe fa7c 	bl	8005ecc <ld_dword>
 80079d4:	4602      	mov	r2, r0
 80079d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079d8:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80079da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079dc:	3330      	adds	r3, #48	@ 0x30
 80079de:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80079e2:	4618      	mov	r0, r3
 80079e4:	f7fe fa72 	bl	8005ecc <ld_dword>
 80079e8:	4602      	mov	r2, r0
 80079ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ec:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80079ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079f0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80079f4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80079f6:	4b0b      	ldr	r3, [pc, #44]	@ (8007a24 <find_volume+0x494>)
 80079f8:	881b      	ldrh	r3, [r3, #0]
 80079fa:	3301      	adds	r3, #1
 80079fc:	b29a      	uxth	r2, r3
 80079fe:	4b09      	ldr	r3, [pc, #36]	@ (8007a24 <find_volume+0x494>)
 8007a00:	801a      	strh	r2, [r3, #0]
 8007a02:	4b08      	ldr	r3, [pc, #32]	@ (8007a24 <find_volume+0x494>)
 8007a04:	881a      	ldrh	r2, [r3, #0]
 8007a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a08:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007a0a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007a0c:	f7fe fc8e 	bl	800632c <clear_lock>
#endif
	return FR_OK;
 8007a10:	2300      	movs	r3, #0
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3758      	adds	r7, #88	@ 0x58
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	41615252 	.word	0x41615252
 8007a20:	61417272 	.word	0x61417272
 8007a24:	20000830 	.word	0x20000830

08007a28 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007a32:	2309      	movs	r3, #9
 8007a34:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d01c      	beq.n	8007a76 <validate+0x4e>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d018      	beq.n	8007a76 <validate+0x4e>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d013      	beq.n	8007a76 <validate+0x4e>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	889a      	ldrh	r2, [r3, #4]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	88db      	ldrh	r3, [r3, #6]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d10c      	bne.n	8007a76 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	785b      	ldrb	r3, [r3, #1]
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7fe f974 	bl	8005d50 <disk_status>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	f003 0301 	and.w	r3, r3, #1
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d101      	bne.n	8007a76 <validate+0x4e>
			res = FR_OK;
 8007a72:	2300      	movs	r3, #0
 8007a74:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007a76:	7bfb      	ldrb	r3, [r7, #15]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d102      	bne.n	8007a82 <validate+0x5a>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	e000      	b.n	8007a84 <validate+0x5c>
 8007a82:	2300      	movs	r3, #0
 8007a84:	683a      	ldr	r2, [r7, #0]
 8007a86:	6013      	str	r3, [r2, #0]
	return res;
 8007a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3710      	adds	r7, #16
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
	...

08007a94 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b088      	sub	sp, #32
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007aa6:	f107 0310 	add.w	r3, r7, #16
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7ff fcd5 	bl	800745a <get_ldnumber>
 8007ab0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	da01      	bge.n	8007abc <f_mount+0x28>
 8007ab8:	230b      	movs	r3, #11
 8007aba:	e02b      	b.n	8007b14 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007abc:	4a17      	ldr	r2, [pc, #92]	@ (8007b1c <f_mount+0x88>)
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ac4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d005      	beq.n	8007ad8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007acc:	69b8      	ldr	r0, [r7, #24]
 8007ace:	f7fe fc2d 	bl	800632c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d002      	beq.n	8007ae4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	490d      	ldr	r1, [pc, #52]	@ (8007b1c <f_mount+0x88>)
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d002      	beq.n	8007afa <f_mount+0x66>
 8007af4:	79fb      	ldrb	r3, [r7, #7]
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d001      	beq.n	8007afe <f_mount+0x6a>
 8007afa:	2300      	movs	r3, #0
 8007afc:	e00a      	b.n	8007b14 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007afe:	f107 010c 	add.w	r1, r7, #12
 8007b02:	f107 0308 	add.w	r3, r7, #8
 8007b06:	2200      	movs	r2, #0
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f7ff fd41 	bl	8007590 <find_volume>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3720      	adds	r7, #32
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	20000828 	.word	0x20000828

08007b20 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b09a      	sub	sp, #104	@ 0x68
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d101      	bne.n	8007b38 <f_open+0x18>
 8007b34:	2309      	movs	r3, #9
 8007b36:	e1a9      	b.n	8007e8c <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007b38:	79fb      	ldrb	r3, [r7, #7]
 8007b3a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b3e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007b40:	79fa      	ldrb	r2, [r7, #7]
 8007b42:	f107 0114 	add.w	r1, r7, #20
 8007b46:	f107 0308 	add.w	r3, r7, #8
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f7ff fd20 	bl	8007590 <find_volume>
 8007b50:	4603      	mov	r3, r0
 8007b52:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8007b56:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	f040 818d 	bne.w	8007e7a <f_open+0x35a>
		dj.obj.fs = fs;
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007b64:	68ba      	ldr	r2, [r7, #8]
 8007b66:	f107 0318 	add.w	r3, r7, #24
 8007b6a:	4611      	mov	r1, r2
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f7ff fc03 	bl	8007378 <follow_path>
 8007b72:	4603      	mov	r3, r0
 8007b74:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007b78:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d118      	bne.n	8007bb2 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007b80:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007b84:	b25b      	sxtb	r3, r3
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	da03      	bge.n	8007b92 <f_open+0x72>
				res = FR_INVALID_NAME;
 8007b8a:	2306      	movs	r3, #6
 8007b8c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007b90:	e00f      	b.n	8007bb2 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007b92:	79fb      	ldrb	r3, [r7, #7]
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	bf8c      	ite	hi
 8007b98:	2301      	movhi	r3, #1
 8007b9a:	2300      	movls	r3, #0
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	f107 0318 	add.w	r3, r7, #24
 8007ba4:	4611      	mov	r1, r2
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7fe fa78 	bl	800609c <chk_lock>
 8007bac:	4603      	mov	r3, r0
 8007bae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007bb2:	79fb      	ldrb	r3, [r7, #7]
 8007bb4:	f003 031c 	and.w	r3, r3, #28
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d07f      	beq.n	8007cbc <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8007bbc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d017      	beq.n	8007bf4 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007bc4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007bc8:	2b04      	cmp	r3, #4
 8007bca:	d10e      	bne.n	8007bea <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007bcc:	f7fe fac2 	bl	8006154 <enq_lock>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d006      	beq.n	8007be4 <f_open+0xc4>
 8007bd6:	f107 0318 	add.w	r3, r7, #24
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7ff fa03 	bl	8006fe6 <dir_register>
 8007be0:	4603      	mov	r3, r0
 8007be2:	e000      	b.n	8007be6 <f_open+0xc6>
 8007be4:	2312      	movs	r3, #18
 8007be6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007bea:	79fb      	ldrb	r3, [r7, #7]
 8007bec:	f043 0308 	orr.w	r3, r3, #8
 8007bf0:	71fb      	strb	r3, [r7, #7]
 8007bf2:	e010      	b.n	8007c16 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007bf4:	7fbb      	ldrb	r3, [r7, #30]
 8007bf6:	f003 0311 	and.w	r3, r3, #17
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d003      	beq.n	8007c06 <f_open+0xe6>
					res = FR_DENIED;
 8007bfe:	2307      	movs	r3, #7
 8007c00:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007c04:	e007      	b.n	8007c16 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007c06:	79fb      	ldrb	r3, [r7, #7]
 8007c08:	f003 0304 	and.w	r3, r3, #4
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d002      	beq.n	8007c16 <f_open+0xf6>
 8007c10:	2308      	movs	r3, #8
 8007c12:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007c16:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d168      	bne.n	8007cf0 <f_open+0x1d0>
 8007c1e:	79fb      	ldrb	r3, [r7, #7]
 8007c20:	f003 0308 	and.w	r3, r3, #8
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d063      	beq.n	8007cf0 <f_open+0x1d0>
				dw = GET_FATTIME();
 8007c28:	f7fe f930 	bl	8005e8c <get_fattime>
 8007c2c:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c30:	330e      	adds	r3, #14
 8007c32:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007c34:	4618      	mov	r0, r3
 8007c36:	f7fe f987 	bl	8005f48 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c3c:	3316      	adds	r3, #22
 8007c3e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7fe f981 	bl	8005f48 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c48:	330b      	adds	r3, #11
 8007c4a:	2220      	movs	r2, #32
 8007c4c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c52:	4611      	mov	r1, r2
 8007c54:	4618      	mov	r0, r3
 8007c56:	f7ff f8d5 	bl	8006e04 <ld_clust>
 8007c5a:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007c60:	2200      	movs	r2, #0
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7ff f8ed 	bl	8006e42 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c6a:	331c      	adds	r3, #28
 8007c6c:	2100      	movs	r1, #0
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7fe f96a 	bl	8005f48 <st_dword>
					fs->wflag = 1;
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	2201      	movs	r2, #1
 8007c78:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007c7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d037      	beq.n	8007cf0 <f_open+0x1d0>
						dw = fs->winsect;
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c84:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8007c86:	f107 0318 	add.w	r3, r7, #24
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7fe fe00 	bl	8006894 <remove_chain>
 8007c94:	4603      	mov	r3, r0
 8007c96:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8007c9a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d126      	bne.n	8007cf0 <f_open+0x1d0>
							res = move_window(fs, dw);
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7fe fba8 	bl	80063fc <move_window>
 8007cac:	4603      	mov	r3, r0
 8007cae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007cb6:	3a01      	subs	r2, #1
 8007cb8:	60da      	str	r2, [r3, #12]
 8007cba:	e019      	b.n	8007cf0 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007cbc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d115      	bne.n	8007cf0 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007cc4:	7fbb      	ldrb	r3, [r7, #30]
 8007cc6:	f003 0310 	and.w	r3, r3, #16
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d003      	beq.n	8007cd6 <f_open+0x1b6>
					res = FR_NO_FILE;
 8007cce:	2304      	movs	r3, #4
 8007cd0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007cd4:	e00c      	b.n	8007cf0 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007cd6:	79fb      	ldrb	r3, [r7, #7]
 8007cd8:	f003 0302 	and.w	r3, r3, #2
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d007      	beq.n	8007cf0 <f_open+0x1d0>
 8007ce0:	7fbb      	ldrb	r3, [r7, #30]
 8007ce2:	f003 0301 	and.w	r3, r3, #1
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d002      	beq.n	8007cf0 <f_open+0x1d0>
						res = FR_DENIED;
 8007cea:	2307      	movs	r3, #7
 8007cec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8007cf0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d126      	bne.n	8007d46 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007cf8:	79fb      	ldrb	r3, [r7, #7]
 8007cfa:	f003 0308 	and.w	r3, r3, #8
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d003      	beq.n	8007d0a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8007d02:	79fb      	ldrb	r3, [r7, #7]
 8007d04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d08:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8007d12:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007d18:	79fb      	ldrb	r3, [r7, #7]
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	bf8c      	ite	hi
 8007d1e:	2301      	movhi	r3, #1
 8007d20:	2300      	movls	r3, #0
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	461a      	mov	r2, r3
 8007d26:	f107 0318 	add.w	r3, r7, #24
 8007d2a:	4611      	mov	r1, r2
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f7fe fa33 	bl	8006198 <inc_lock>
 8007d32:	4602      	mov	r2, r0
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	691b      	ldr	r3, [r3, #16]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d102      	bne.n	8007d46 <f_open+0x226>
 8007d40:	2302      	movs	r3, #2
 8007d42:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007d46:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	f040 8095 	bne.w	8007e7a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d54:	4611      	mov	r1, r2
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7ff f854 	bl	8006e04 <ld_clust>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d64:	331c      	adds	r3, #28
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7fe f8b0 	bl	8005ecc <ld_dword>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2200      	movs	r2, #0
 8007d76:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007d78:	697a      	ldr	r2, [r7, #20]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	88da      	ldrh	r2, [r3, #6]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	79fa      	ldrb	r2, [r7, #7]
 8007d8a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2200      	movs	r2, #0
 8007d96:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	3330      	adds	r3, #48	@ 0x30
 8007da2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007da6:	2100      	movs	r1, #0
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7fe f91a 	bl	8005fe2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007dae:	79fb      	ldrb	r3, [r7, #7]
 8007db0:	f003 0320 	and.w	r3, r3, #32
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d060      	beq.n	8007e7a <f_open+0x35a>
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d05c      	beq.n	8007e7a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	68da      	ldr	r2, [r3, #12]
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	895b      	ldrh	r3, [r3, #10]
 8007dcc:	025b      	lsls	r3, r3, #9
 8007dce:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ddc:	e016      	b.n	8007e0c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007de2:	4618      	mov	r0, r3
 8007de4:	f7fe fbc5 	bl	8006572 <get_fat>
 8007de8:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8007dea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d802      	bhi.n	8007df6 <f_open+0x2d6>
 8007df0:	2302      	movs	r3, #2
 8007df2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007df6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dfc:	d102      	bne.n	8007e04 <f_open+0x2e4>
 8007dfe:	2301      	movs	r3, #1
 8007e00:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007e04:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007e06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e08:	1ad3      	subs	r3, r2, r3
 8007e0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e0c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d103      	bne.n	8007e1c <f_open+0x2fc>
 8007e14:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007e16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d8e0      	bhi.n	8007dde <f_open+0x2be>
				}
				fp->clust = clst;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007e20:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007e22:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d127      	bne.n	8007e7a <f_open+0x35a>
 8007e2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d022      	beq.n	8007e7a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f7fe fb7b 	bl	8006534 <clust2sect>
 8007e3e:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8007e40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d103      	bne.n	8007e4e <f_open+0x32e>
						res = FR_INT_ERR;
 8007e46:	2302      	movs	r3, #2
 8007e48:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007e4c:	e015      	b.n	8007e7a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007e4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e50:	0a5a      	lsrs	r2, r3, #9
 8007e52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e54:	441a      	add	r2, r3
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	7858      	ldrb	r0, [r3, #1]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6a1a      	ldr	r2, [r3, #32]
 8007e68:	2301      	movs	r3, #1
 8007e6a:	f7fd ffb1 	bl	8005dd0 <disk_read>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d002      	beq.n	8007e7a <f_open+0x35a>
 8007e74:	2301      	movs	r3, #1
 8007e76:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007e7a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d002      	beq.n	8007e88 <f_open+0x368>
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2200      	movs	r2, #0
 8007e86:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007e88:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3768      	adds	r7, #104	@ 0x68
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b08e      	sub	sp, #56	@ 0x38
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	607a      	str	r2, [r7, #4]
 8007ea0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f107 0214 	add.w	r2, r7, #20
 8007eb2:	4611      	mov	r1, r2
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f7ff fdb7 	bl	8007a28 <validate>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007ec0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d107      	bne.n	8007ed8 <f_read+0x44>
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	7d5b      	ldrb	r3, [r3, #21]
 8007ecc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8007ed0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d002      	beq.n	8007ede <f_read+0x4a>
 8007ed8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007edc:	e115      	b.n	800810a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	7d1b      	ldrb	r3, [r3, #20]
 8007ee2:	f003 0301 	and.w	r3, r3, #1
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d101      	bne.n	8007eee <f_read+0x5a>
 8007eea:	2307      	movs	r3, #7
 8007eec:	e10d      	b.n	800810a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	68da      	ldr	r2, [r3, #12]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	699b      	ldr	r3, [r3, #24]
 8007ef6:	1ad3      	subs	r3, r2, r3
 8007ef8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	6a3b      	ldr	r3, [r7, #32]
 8007efe:	429a      	cmp	r2, r3
 8007f00:	f240 80fe 	bls.w	8008100 <f_read+0x26c>
 8007f04:	6a3b      	ldr	r3, [r7, #32]
 8007f06:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007f08:	e0fa      	b.n	8008100 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	699b      	ldr	r3, [r3, #24]
 8007f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	f040 80c6 	bne.w	80080a4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	699b      	ldr	r3, [r3, #24]
 8007f1c:	0a5b      	lsrs	r3, r3, #9
 8007f1e:	697a      	ldr	r2, [r7, #20]
 8007f20:	8952      	ldrh	r2, [r2, #10]
 8007f22:	3a01      	subs	r2, #1
 8007f24:	4013      	ands	r3, r2
 8007f26:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d12f      	bne.n	8007f8e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	699b      	ldr	r3, [r3, #24]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d103      	bne.n	8007f3e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f3c:	e013      	b.n	8007f66 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d007      	beq.n	8007f56 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	699b      	ldr	r3, [r3, #24]
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	68f8      	ldr	r0, [r7, #12]
 8007f4e:	f7fe fd9e 	bl	8006a8e <clmt_clust>
 8007f52:	6338      	str	r0, [r7, #48]	@ 0x30
 8007f54:	e007      	b.n	8007f66 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	69db      	ldr	r3, [r3, #28]
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	4610      	mov	r0, r2
 8007f60:	f7fe fb07 	bl	8006572 <get_fat>
 8007f64:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d804      	bhi.n	8007f76 <f_read+0xe2>
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2202      	movs	r2, #2
 8007f70:	755a      	strb	r2, [r3, #21]
 8007f72:	2302      	movs	r3, #2
 8007f74:	e0c9      	b.n	800810a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f7c:	d104      	bne.n	8007f88 <f_read+0xf4>
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2201      	movs	r2, #1
 8007f82:	755a      	strb	r2, [r3, #21]
 8007f84:	2301      	movs	r3, #1
 8007f86:	e0c0      	b.n	800810a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f8c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007f8e:	697a      	ldr	r2, [r7, #20]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	69db      	ldr	r3, [r3, #28]
 8007f94:	4619      	mov	r1, r3
 8007f96:	4610      	mov	r0, r2
 8007f98:	f7fe facc 	bl	8006534 <clust2sect>
 8007f9c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d104      	bne.n	8007fae <f_read+0x11a>
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2202      	movs	r2, #2
 8007fa8:	755a      	strb	r2, [r3, #21]
 8007faa:	2302      	movs	r3, #2
 8007fac:	e0ad      	b.n	800810a <f_read+0x276>
			sect += csect;
 8007fae:	69ba      	ldr	r2, [r7, #24]
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	4413      	add	r3, r2
 8007fb4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	0a5b      	lsrs	r3, r3, #9
 8007fba:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d039      	beq.n	8008036 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007fc2:	69fa      	ldr	r2, [r7, #28]
 8007fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fc6:	4413      	add	r3, r2
 8007fc8:	697a      	ldr	r2, [r7, #20]
 8007fca:	8952      	ldrh	r2, [r2, #10]
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d905      	bls.n	8007fdc <f_read+0x148>
					cc = fs->csize - csect;
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	895b      	ldrh	r3, [r3, #10]
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	1ad3      	subs	r3, r2, r3
 8007fda:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	7858      	ldrb	r0, [r3, #1]
 8007fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fe2:	69ba      	ldr	r2, [r7, #24]
 8007fe4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007fe6:	f7fd fef3 	bl	8005dd0 <disk_read>
 8007fea:	4603      	mov	r3, r0
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d004      	beq.n	8007ffa <f_read+0x166>
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	755a      	strb	r2, [r3, #21]
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	e087      	b.n	800810a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	7d1b      	ldrb	r3, [r3, #20]
 8007ffe:	b25b      	sxtb	r3, r3
 8008000:	2b00      	cmp	r3, #0
 8008002:	da14      	bge.n	800802e <f_read+0x19a>
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6a1a      	ldr	r2, [r3, #32]
 8008008:	69bb      	ldr	r3, [r7, #24]
 800800a:	1ad3      	subs	r3, r2, r3
 800800c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800800e:	429a      	cmp	r2, r3
 8008010:	d90d      	bls.n	800802e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6a1a      	ldr	r2, [r3, #32]
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	1ad3      	subs	r3, r2, r3
 800801a:	025b      	lsls	r3, r3, #9
 800801c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800801e:	18d0      	adds	r0, r2, r3
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	3330      	adds	r3, #48	@ 0x30
 8008024:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008028:	4619      	mov	r1, r3
 800802a:	f7fd ffb9 	bl	8005fa0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800802e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008030:	025b      	lsls	r3, r3, #9
 8008032:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8008034:	e050      	b.n	80080d8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	6a1b      	ldr	r3, [r3, #32]
 800803a:	69ba      	ldr	r2, [r7, #24]
 800803c:	429a      	cmp	r2, r3
 800803e:	d02e      	beq.n	800809e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	7d1b      	ldrb	r3, [r3, #20]
 8008044:	b25b      	sxtb	r3, r3
 8008046:	2b00      	cmp	r3, #0
 8008048:	da18      	bge.n	800807c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	7858      	ldrb	r0, [r3, #1]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6a1a      	ldr	r2, [r3, #32]
 8008058:	2301      	movs	r3, #1
 800805a:	f7fd fed9 	bl	8005e10 <disk_write>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d004      	beq.n	800806e <f_read+0x1da>
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2201      	movs	r2, #1
 8008068:	755a      	strb	r2, [r3, #21]
 800806a:	2301      	movs	r3, #1
 800806c:	e04d      	b.n	800810a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	7d1b      	ldrb	r3, [r3, #20]
 8008072:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008076:	b2da      	uxtb	r2, r3
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	7858      	ldrb	r0, [r3, #1]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008086:	2301      	movs	r3, #1
 8008088:	69ba      	ldr	r2, [r7, #24]
 800808a:	f7fd fea1 	bl	8005dd0 <disk_read>
 800808e:	4603      	mov	r3, r0
 8008090:	2b00      	cmp	r3, #0
 8008092:	d004      	beq.n	800809e <f_read+0x20a>
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2201      	movs	r2, #1
 8008098:	755a      	strb	r2, [r3, #21]
 800809a:	2301      	movs	r3, #1
 800809c:	e035      	b.n	800810a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	69ba      	ldr	r2, [r7, #24]
 80080a2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	699b      	ldr	r3, [r3, #24]
 80080a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080ac:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80080b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80080b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d901      	bls.n	80080be <f_read+0x22a>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	699b      	ldr	r3, [r3, #24]
 80080c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080cc:	4413      	add	r3, r2
 80080ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080d0:	4619      	mov	r1, r3
 80080d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80080d4:	f7fd ff64 	bl	8005fa0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80080d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080dc:	4413      	add	r3, r2
 80080de:	627b      	str	r3, [r7, #36]	@ 0x24
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	699a      	ldr	r2, [r3, #24]
 80080e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080e6:	441a      	add	r2, r3
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	619a      	str	r2, [r3, #24]
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080f2:	441a      	add	r2, r3
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	601a      	str	r2, [r3, #0]
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080fc:	1ad3      	subs	r3, r2, r3
 80080fe:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	f47f af01 	bne.w	8007f0a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008108:	2300      	movs	r3, #0
}
 800810a:	4618      	mov	r0, r3
 800810c:	3738      	adds	r7, #56	@ 0x38
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}

08008112 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008112:	b580      	push	{r7, lr}
 8008114:	b086      	sub	sp, #24
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f107 0208 	add.w	r2, r7, #8
 8008120:	4611      	mov	r1, r2
 8008122:	4618      	mov	r0, r3
 8008124:	f7ff fc80 	bl	8007a28 <validate>
 8008128:	4603      	mov	r3, r0
 800812a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800812c:	7dfb      	ldrb	r3, [r7, #23]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d168      	bne.n	8008204 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	7d1b      	ldrb	r3, [r3, #20]
 8008136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800813a:	2b00      	cmp	r3, #0
 800813c:	d062      	beq.n	8008204 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	7d1b      	ldrb	r3, [r3, #20]
 8008142:	b25b      	sxtb	r3, r3
 8008144:	2b00      	cmp	r3, #0
 8008146:	da15      	bge.n	8008174 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	7858      	ldrb	r0, [r3, #1]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6a1a      	ldr	r2, [r3, #32]
 8008156:	2301      	movs	r3, #1
 8008158:	f7fd fe5a 	bl	8005e10 <disk_write>
 800815c:	4603      	mov	r3, r0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d001      	beq.n	8008166 <f_sync+0x54>
 8008162:	2301      	movs	r3, #1
 8008164:	e04f      	b.n	8008206 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	7d1b      	ldrb	r3, [r3, #20]
 800816a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800816e:	b2da      	uxtb	r2, r3
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008174:	f7fd fe8a 	bl	8005e8c <get_fattime>
 8008178:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800817a:	68ba      	ldr	r2, [r7, #8]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008180:	4619      	mov	r1, r3
 8008182:	4610      	mov	r0, r2
 8008184:	f7fe f93a 	bl	80063fc <move_window>
 8008188:	4603      	mov	r3, r0
 800818a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800818c:	7dfb      	ldrb	r3, [r7, #23]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d138      	bne.n	8008204 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008196:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	330b      	adds	r3, #11
 800819c:	781a      	ldrb	r2, [r3, #0]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	330b      	adds	r3, #11
 80081a2:	f042 0220 	orr.w	r2, r2, #32
 80081a6:	b2d2      	uxtb	r2, r2
 80081a8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6818      	ldr	r0, [r3, #0]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	461a      	mov	r2, r3
 80081b4:	68f9      	ldr	r1, [r7, #12]
 80081b6:	f7fe fe44 	bl	8006e42 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f103 021c 	add.w	r2, r3, #28
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	4619      	mov	r1, r3
 80081c6:	4610      	mov	r0, r2
 80081c8:	f7fd febe 	bl	8005f48 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	3316      	adds	r3, #22
 80081d0:	6939      	ldr	r1, [r7, #16]
 80081d2:	4618      	mov	r0, r3
 80081d4:	f7fd feb8 	bl	8005f48 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	3312      	adds	r3, #18
 80081dc:	2100      	movs	r1, #0
 80081de:	4618      	mov	r0, r3
 80081e0:	f7fd fe97 	bl	8005f12 <st_word>
					fs->wflag = 1;
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	2201      	movs	r2, #1
 80081e8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7fe f933 	bl	8006458 <sync_fs>
 80081f2:	4603      	mov	r3, r0
 80081f4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	7d1b      	ldrb	r3, [r3, #20]
 80081fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081fe:	b2da      	uxtb	r2, r3
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008204:	7dfb      	ldrb	r3, [r7, #23]
}
 8008206:	4618      	mov	r0, r3
 8008208:	3718      	adds	r7, #24
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800820e:	b580      	push	{r7, lr}
 8008210:	b084      	sub	sp, #16
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f7ff ff7b 	bl	8008112 <f_sync>
 800821c:	4603      	mov	r3, r0
 800821e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008220:	7bfb      	ldrb	r3, [r7, #15]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d118      	bne.n	8008258 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f107 0208 	add.w	r2, r7, #8
 800822c:	4611      	mov	r1, r2
 800822e:	4618      	mov	r0, r3
 8008230:	f7ff fbfa 	bl	8007a28 <validate>
 8008234:	4603      	mov	r3, r0
 8008236:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008238:	7bfb      	ldrb	r3, [r7, #15]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d10c      	bne.n	8008258 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	4618      	mov	r0, r3
 8008244:	f7fe f836 	bl	80062b4 <dec_lock>
 8008248:	4603      	mov	r3, r0
 800824a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800824c:	7bfb      	ldrb	r3, [r7, #15]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d102      	bne.n	8008258 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008258:	7bfb      	ldrb	r3, [r7, #15]
}
 800825a:	4618      	mov	r0, r3
 800825c:	3710      	adds	r7, #16
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}

08008262 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8008262:	b580      	push	{r7, lr}
 8008264:	b086      	sub	sp, #24
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
 800826a:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d101      	bne.n	8008276 <f_opendir+0x14>
 8008272:	2309      	movs	r3, #9
 8008274:	e064      	b.n	8008340 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800827a:	f107 010c 	add.w	r1, r7, #12
 800827e:	463b      	mov	r3, r7
 8008280:	2200      	movs	r2, #0
 8008282:	4618      	mov	r0, r3
 8008284:	f7ff f984 	bl	8007590 <find_volume>
 8008288:	4603      	mov	r3, r0
 800828a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800828c:	7dfb      	ldrb	r3, [r7, #23]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d14f      	bne.n	8008332 <f_opendir+0xd0>
		obj->fs = fs;
 8008292:	68fa      	ldr	r2, [r7, #12]
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	4619      	mov	r1, r3
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f7ff f86b 	bl	8007378 <follow_path>
 80082a2:	4603      	mov	r3, r0
 80082a4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80082a6:	7dfb      	ldrb	r3, [r7, #23]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d13d      	bne.n	8008328 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80082b2:	b25b      	sxtb	r3, r3
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	db12      	blt.n	80082de <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	799b      	ldrb	r3, [r3, #6]
 80082bc:	f003 0310 	and.w	r3, r3, #16
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d00a      	beq.n	80082da <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80082c4:	68fa      	ldr	r2, [r7, #12]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6a1b      	ldr	r3, [r3, #32]
 80082ca:	4619      	mov	r1, r3
 80082cc:	4610      	mov	r0, r2
 80082ce:	f7fe fd99 	bl	8006e04 <ld_clust>
 80082d2:	4602      	mov	r2, r0
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	609a      	str	r2, [r3, #8]
 80082d8:	e001      	b.n	80082de <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80082da:	2305      	movs	r3, #5
 80082dc:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80082de:	7dfb      	ldrb	r3, [r7, #23]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d121      	bne.n	8008328 <f_opendir+0xc6>
				obj->id = fs->id;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	88da      	ldrh	r2, [r3, #6]
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80082ec:	2100      	movs	r1, #0
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f7fe fc01 	bl	8006af6 <dir_sdi>
 80082f4:	4603      	mov	r3, r0
 80082f6:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80082f8:	7dfb      	ldrb	r3, [r7, #23]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d114      	bne.n	8008328 <f_opendir+0xc6>
					if (obj->sclust) {
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d00d      	beq.n	8008322 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8008306:	2100      	movs	r1, #0
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f7fd ff45 	bl	8006198 <inc_lock>
 800830e:	4602      	mov	r2, r0
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	691b      	ldr	r3, [r3, #16]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d105      	bne.n	8008328 <f_opendir+0xc6>
 800831c:	2312      	movs	r3, #18
 800831e:	75fb      	strb	r3, [r7, #23]
 8008320:	e002      	b.n	8008328 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	2200      	movs	r2, #0
 8008326:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8008328:	7dfb      	ldrb	r3, [r7, #23]
 800832a:	2b04      	cmp	r3, #4
 800832c:	d101      	bne.n	8008332 <f_opendir+0xd0>
 800832e:	2305      	movs	r3, #5
 8008330:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8008332:	7dfb      	ldrb	r3, [r7, #23]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d002      	beq.n	800833e <f_opendir+0xdc>
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	2200      	movs	r2, #0
 800833c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800833e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008340:	4618      	mov	r0, r3
 8008342:	3718      	adds	r7, #24
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f107 0208 	add.w	r2, r7, #8
 8008356:	4611      	mov	r1, r2
 8008358:	4618      	mov	r0, r3
 800835a:	f7ff fb65 	bl	8007a28 <validate>
 800835e:	4603      	mov	r3, r0
 8008360:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008362:	7bfb      	ldrb	r3, [r7, #15]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d110      	bne.n	800838a <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	691b      	ldr	r3, [r3, #16]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d006      	beq.n	800837e <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	691b      	ldr	r3, [r3, #16]
 8008374:	4618      	mov	r0, r3
 8008376:	f7fd ff9d 	bl	80062b4 <dec_lock>
 800837a:	4603      	mov	r3, r0
 800837c:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800837e:	7bfb      	ldrb	r3, [r7, #15]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d102      	bne.n	800838a <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800838a:	7bfb      	ldrb	r3, [r7, #15]
}
 800838c:	4618      	mov	r0, r3
 800838e:	3710      	adds	r7, #16
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f107 0208 	add.w	r2, r7, #8
 80083a4:	4611      	mov	r1, r2
 80083a6:	4618      	mov	r0, r3
 80083a8:	f7ff fb3e 	bl	8007a28 <validate>
 80083ac:	4603      	mov	r3, r0
 80083ae:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80083b0:	7bfb      	ldrb	r3, [r7, #15]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d126      	bne.n	8008404 <f_readdir+0x70>
		if (!fno) {
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d106      	bne.n	80083ca <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80083bc:	2100      	movs	r1, #0
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f7fe fb99 	bl	8006af6 <dir_sdi>
 80083c4:	4603      	mov	r3, r0
 80083c6:	73fb      	strb	r3, [r7, #15]
 80083c8:	e01c      	b.n	8008404 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 80083ca:	2100      	movs	r1, #0
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f7fe fd58 	bl	8006e82 <dir_read>
 80083d2:	4603      	mov	r3, r0
 80083d4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80083d6:	7bfb      	ldrb	r3, [r7, #15]
 80083d8:	2b04      	cmp	r3, #4
 80083da:	d101      	bne.n	80083e0 <f_readdir+0x4c>
 80083dc:	2300      	movs	r3, #0
 80083de:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 80083e0:	7bfb      	ldrb	r3, [r7, #15]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d10e      	bne.n	8008404 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 80083e6:	6839      	ldr	r1, [r7, #0]
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f7fe fe2e 	bl	800704a <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80083ee:	2100      	movs	r1, #0
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f7fe fbfb 	bl	8006bec <dir_next>
 80083f6:	4603      	mov	r3, r0
 80083f8:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80083fa:	7bfb      	ldrb	r3, [r7, #15]
 80083fc:	2b04      	cmp	r3, #4
 80083fe:	d101      	bne.n	8008404 <f_readdir+0x70>
 8008400:	2300      	movs	r3, #0
 8008402:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8008404:	7bfb      	ldrb	r3, [r7, #15]
}
 8008406:	4618      	mov	r0, r3
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 800840e:	b580      	push	{r7, lr}
 8008410:	b084      	sub	sp, #16
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
 8008416:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 8008418:	6839      	ldr	r1, [r7, #0]
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f7ff ffba 	bl	8008394 <f_readdir>
 8008420:	4603      	mov	r3, r0
 8008422:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 8008424:	7bfb      	ldrb	r3, [r7, #15]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d114      	bne.n	8008454 <f_findnext+0x46>
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d011      	beq.n	8008454 <f_findnext+0x46>
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	7a5b      	ldrb	r3, [r3, #9]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d00d      	beq.n	8008454 <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	f103 0109 	add.w	r1, r3, #9
 8008442:	2300      	movs	r3, #0
 8008444:	2200      	movs	r2, #0
 8008446:	f7fe fe87 	bl	8007158 <pattern_matching>
 800844a:	4603      	mov	r3, r0
 800844c:	2b00      	cmp	r3, #0
 800844e:	d100      	bne.n	8008452 <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 8008450:	e7e2      	b.n	8008418 <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8008452:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 8008454:	7bfb      	ldrb	r3, [r7, #15]
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 800845e:	b580      	push	{r7, lr}
 8008460:	b086      	sub	sp, #24
 8008462:	af00      	add	r7, sp, #0
 8008464:	60f8      	str	r0, [r7, #12]
 8008466:	60b9      	str	r1, [r7, #8]
 8008468:	607a      	str	r2, [r7, #4]
 800846a:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	683a      	ldr	r2, [r7, #0]
 8008470:	631a      	str	r2, [r3, #48]	@ 0x30
	res = f_opendir(dp, path);		/* Open the target directory */
 8008472:	6879      	ldr	r1, [r7, #4]
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	f7ff fef4 	bl	8008262 <f_opendir>
 800847a:	4603      	mov	r3, r0
 800847c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800847e:	7dfb      	ldrb	r3, [r7, #23]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d105      	bne.n	8008490 <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 8008484:	68b9      	ldr	r1, [r7, #8]
 8008486:	68f8      	ldr	r0, [r7, #12]
 8008488:	f7ff ffc1 	bl	800840e <f_findnext>
 800848c:	4603      	mov	r3, r0
 800848e:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 8008490:	7dfb      	ldrb	r3, [r7, #23]
}
 8008492:	4618      	mov	r0, r3
 8008494:	3718      	adds	r7, #24
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
	...

0800849c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800849c:	b480      	push	{r7}
 800849e:	b087      	sub	sp, #28
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	60b9      	str	r1, [r7, #8]
 80084a6:	4613      	mov	r3, r2
 80084a8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80084aa:	2301      	movs	r3, #1
 80084ac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80084ae:	2300      	movs	r3, #0
 80084b0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80084b2:	4b1f      	ldr	r3, [pc, #124]	@ (8008530 <FATFS_LinkDriverEx+0x94>)
 80084b4:	7b9b      	ldrb	r3, [r3, #14]
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d831      	bhi.n	8008520 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80084bc:	4b1c      	ldr	r3, [pc, #112]	@ (8008530 <FATFS_LinkDriverEx+0x94>)
 80084be:	7b9b      	ldrb	r3, [r3, #14]
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	461a      	mov	r2, r3
 80084c4:	4b1a      	ldr	r3, [pc, #104]	@ (8008530 <FATFS_LinkDriverEx+0x94>)
 80084c6:	2100      	movs	r1, #0
 80084c8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80084ca:	4b19      	ldr	r3, [pc, #100]	@ (8008530 <FATFS_LinkDriverEx+0x94>)
 80084cc:	7b9b      	ldrb	r3, [r3, #14]
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	4a17      	ldr	r2, [pc, #92]	@ (8008530 <FATFS_LinkDriverEx+0x94>)
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	4413      	add	r3, r2
 80084d6:	68fa      	ldr	r2, [r7, #12]
 80084d8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80084da:	4b15      	ldr	r3, [pc, #84]	@ (8008530 <FATFS_LinkDriverEx+0x94>)
 80084dc:	7b9b      	ldrb	r3, [r3, #14]
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	461a      	mov	r2, r3
 80084e2:	4b13      	ldr	r3, [pc, #76]	@ (8008530 <FATFS_LinkDriverEx+0x94>)
 80084e4:	4413      	add	r3, r2
 80084e6:	79fa      	ldrb	r2, [r7, #7]
 80084e8:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 80084ea:	4b11      	ldr	r3, [pc, #68]	@ (8008530 <FATFS_LinkDriverEx+0x94>)
 80084ec:	7b9b      	ldrb	r3, [r3, #14]
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	1c5a      	adds	r2, r3, #1
 80084f2:	b2d1      	uxtb	r1, r2
 80084f4:	4a0e      	ldr	r2, [pc, #56]	@ (8008530 <FATFS_LinkDriverEx+0x94>)
 80084f6:	7391      	strb	r1, [r2, #14]
 80084f8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80084fa:	7dbb      	ldrb	r3, [r7, #22]
 80084fc:	3330      	adds	r3, #48	@ 0x30
 80084fe:	b2da      	uxtb	r2, r3
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	3301      	adds	r3, #1
 8008508:	223a      	movs	r2, #58	@ 0x3a
 800850a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	3302      	adds	r3, #2
 8008510:	222f      	movs	r2, #47	@ 0x2f
 8008512:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	3303      	adds	r3, #3
 8008518:	2200      	movs	r2, #0
 800851a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800851c:	2300      	movs	r3, #0
 800851e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008520:	7dfb      	ldrb	r3, [r7, #23]
}
 8008522:	4618      	mov	r0, r3
 8008524:	371c      	adds	r7, #28
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr
 800852e:	bf00      	nop
 8008530:	20000854 	.word	0x20000854

08008534 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800853e:	2200      	movs	r2, #0
 8008540:	6839      	ldr	r1, [r7, #0]
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f7ff ffaa 	bl	800849c <FATFS_LinkDriverEx>
 8008548:	4603      	mov	r3, r0
}
 800854a:	4618      	mov	r0, r3
 800854c:	3708      	adds	r7, #8
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
	...

08008554 <BSP_PB_GetState>:
  *       are mapped on the same push button named "User"
  *       on the board serigraphy.
  * @retval The Button GPIO pin value
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	4603      	mov	r3, r0
 800855c:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800855e:	79fb      	ldrb	r3, [r7, #7]
 8008560:	4a07      	ldr	r2, [pc, #28]	@ (8008580 <BSP_PB_GetState+0x2c>)
 8008562:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008566:	79fb      	ldrb	r3, [r7, #7]
 8008568:	4906      	ldr	r1, [pc, #24]	@ (8008584 <BSP_PB_GetState+0x30>)
 800856a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800856e:	4619      	mov	r1, r3
 8008570:	4610      	mov	r0, r2
 8008572:	f7f9 feb7 	bl	80022e4 <HAL_GPIO_ReadPin>
 8008576:	4603      	mov	r3, r0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3708      	adds	r7, #8
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}
 8008580:	20000018 	.word	0x20000018
 8008584:	0800be68 	.word	0x0800be68

08008588 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8008588:	b580      	push	{r7, lr}
 800858a:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 800858c:	4b31      	ldr	r3, [pc, #196]	@ (8008654 <BSP_LCD_Init+0xcc>)
 800858e:	2228      	movs	r2, #40	@ 0x28
 8008590:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8008592:	4b30      	ldr	r3, [pc, #192]	@ (8008654 <BSP_LCD_Init+0xcc>)
 8008594:	2209      	movs	r2, #9
 8008596:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8008598:	4b2e      	ldr	r3, [pc, #184]	@ (8008654 <BSP_LCD_Init+0xcc>)
 800859a:	2235      	movs	r2, #53	@ 0x35
 800859c:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800859e:	4b2d      	ldr	r3, [pc, #180]	@ (8008654 <BSP_LCD_Init+0xcc>)
 80085a0:	220b      	movs	r2, #11
 80085a2:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80085a4:	4b2b      	ldr	r3, [pc, #172]	@ (8008654 <BSP_LCD_Init+0xcc>)
 80085a6:	f240 121b 	movw	r2, #283	@ 0x11b
 80085aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80085ac:	4b29      	ldr	r3, [pc, #164]	@ (8008654 <BSP_LCD_Init+0xcc>)
 80085ae:	f240 2215 	movw	r2, #533	@ 0x215
 80085b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 80085b4:	4b27      	ldr	r3, [pc, #156]	@ (8008654 <BSP_LCD_Init+0xcc>)
 80085b6:	f240 121d 	movw	r2, #285	@ 0x11d
 80085ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80085bc:	4b25      	ldr	r3, [pc, #148]	@ (8008654 <BSP_LCD_Init+0xcc>)
 80085be:	f240 2235 	movw	r2, #565	@ 0x235
 80085c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80085c4:	2100      	movs	r1, #0
 80085c6:	4823      	ldr	r0, [pc, #140]	@ (8008654 <BSP_LCD_Init+0xcc>)
 80085c8:	f000 fc7e 	bl	8008ec8 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80085cc:	4b21      	ldr	r3, [pc, #132]	@ (8008654 <BSP_LCD_Init+0xcc>)
 80085ce:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80085d2:	661a      	str	r2, [r3, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80085d4:	4b1f      	ldr	r3, [pc, #124]	@ (8008654 <BSP_LCD_Init+0xcc>)
 80085d6:	f44f 7288 	mov.w	r2, #272	@ 0x110
 80085da:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 80085dc:	4b1d      	ldr	r3, [pc, #116]	@ (8008654 <BSP_LCD_Init+0xcc>)
 80085de:	2200      	movs	r2, #0
 80085e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 80085e4:	4b1b      	ldr	r3, [pc, #108]	@ (8008654 <BSP_LCD_Init+0xcc>)
 80085e6:	2200      	movs	r2, #0
 80085e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 80085ec:	4b19      	ldr	r3, [pc, #100]	@ (8008654 <BSP_LCD_Init+0xcc>)
 80085ee:	2200      	movs	r2, #0
 80085f0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80085f4:	4b17      	ldr	r3, [pc, #92]	@ (8008654 <BSP_LCD_Init+0xcc>)
 80085f6:	2200      	movs	r2, #0
 80085f8:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80085fa:	4b16      	ldr	r3, [pc, #88]	@ (8008654 <BSP_LCD_Init+0xcc>)
 80085fc:	2200      	movs	r2, #0
 80085fe:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8008600:	4b14      	ldr	r3, [pc, #80]	@ (8008654 <BSP_LCD_Init+0xcc>)
 8008602:	2200      	movs	r2, #0
 8008604:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8008606:	4b13      	ldr	r3, [pc, #76]	@ (8008654 <BSP_LCD_Init+0xcc>)
 8008608:	2200      	movs	r2, #0
 800860a:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 800860c:	4b11      	ldr	r3, [pc, #68]	@ (8008654 <BSP_LCD_Init+0xcc>)
 800860e:	4a12      	ldr	r2, [pc, #72]	@ (8008658 <BSP_LCD_Init+0xd0>)
 8008610:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8008612:	4810      	ldr	r0, [pc, #64]	@ (8008654 <BSP_LCD_Init+0xcc>)
 8008614:	f7fa f8bc 	bl	8002790 <HAL_LTDC_GetState>
 8008618:	4603      	mov	r3, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d103      	bne.n	8008626 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800861e:	2100      	movs	r1, #0
 8008620:	480c      	ldr	r0, [pc, #48]	@ (8008654 <BSP_LCD_Init+0xcc>)
 8008622:	f000 fb77 	bl	8008d14 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8008626:	480b      	ldr	r0, [pc, #44]	@ (8008654 <BSP_LCD_Init+0xcc>)
 8008628:	f7f9 fe8e 	bl	8002348 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 800862c:	2201      	movs	r2, #1
 800862e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8008632:	480a      	ldr	r0, [pc, #40]	@ (800865c <BSP_LCD_Init+0xd4>)
 8008634:	f7f9 fe6e 	bl	8002314 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8008638:	2201      	movs	r2, #1
 800863a:	2108      	movs	r1, #8
 800863c:	4808      	ldr	r0, [pc, #32]	@ (8008660 <BSP_LCD_Init+0xd8>)
 800863e:	f7f9 fe69 	bl	8002314 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8008642:	f000 ff71 	bl	8009528 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8008646:	4807      	ldr	r0, [pc, #28]	@ (8008664 <BSP_LCD_Init+0xdc>)
 8008648:	f000 f8d0 	bl	80087ec <BSP_LCD_SetFont>
  
  return LCD_OK;
 800864c:	2300      	movs	r3, #0
}
 800864e:	4618      	mov	r0, r3
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	20000864 	.word	0x20000864
 8008658:	40016800 	.word	0x40016800
 800865c:	40022000 	.word	0x40022000
 8008660:	40022800 	.word	0x40022800
 8008664:	20000010 	.word	0x20000010

08008668 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8008668:	b480      	push	{r7}
 800866a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800866c:	4b06      	ldr	r3, [pc, #24]	@ (8008688 <BSP_LCD_GetXSize+0x20>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a06      	ldr	r2, [pc, #24]	@ (800868c <BSP_LCD_GetXSize+0x24>)
 8008672:	2134      	movs	r1, #52	@ 0x34
 8008674:	fb01 f303 	mul.w	r3, r1, r3
 8008678:	4413      	add	r3, r2
 800867a:	3360      	adds	r3, #96	@ 0x60
 800867c:	681b      	ldr	r3, [r3, #0]
}
 800867e:	4618      	mov	r0, r3
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr
 8008688:	2000094c 	.word	0x2000094c
 800868c:	20000864 	.word	0x20000864

08008690 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8008690:	b480      	push	{r7}
 8008692:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8008694:	4b06      	ldr	r3, [pc, #24]	@ (80086b0 <BSP_LCD_GetYSize+0x20>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a06      	ldr	r2, [pc, #24]	@ (80086b4 <BSP_LCD_GetYSize+0x24>)
 800869a:	2134      	movs	r1, #52	@ 0x34
 800869c:	fb01 f303 	mul.w	r3, r1, r3
 80086a0:	4413      	add	r3, r2
 80086a2:	3364      	adds	r3, #100	@ 0x64
 80086a4:	681b      	ldr	r3, [r3, #0]
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr
 80086b0:	2000094c 	.word	0x2000094c
 80086b4:	20000864 	.word	0x20000864

080086b8 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b090      	sub	sp, #64	@ 0x40
 80086bc:	af00      	add	r7, sp, #0
 80086be:	4603      	mov	r3, r0
 80086c0:	6039      	str	r1, [r7, #0]
 80086c2:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 80086c4:	2300      	movs	r3, #0
 80086c6:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 80086c8:	f7ff ffce 	bl	8008668 <BSP_LCD_GetXSize>
 80086cc:	4603      	mov	r3, r0
 80086ce:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 80086d0:	2300      	movs	r3, #0
 80086d2:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 80086d4:	f7ff ffdc 	bl	8008690 <BSP_LCD_GetYSize>
 80086d8:	4603      	mov	r3, r0
 80086da:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80086dc:	2300      	movs	r3, #0
 80086de:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	633b      	str	r3, [r7, #48]	@ 0x30
  layer_cfg.Alpha = 255;
 80086e4:	23ff      	movs	r3, #255	@ 0xff
 80086e6:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 80086e8:	2300      	movs	r3, #0
 80086ea:	627b      	str	r3, [r7, #36]	@ 0x24
  layer_cfg.Backcolor.Blue = 0;
 80086ec:	2300      	movs	r3, #0
 80086ee:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  layer_cfg.Backcolor.Green = 0;
 80086f2:	2300      	movs	r3, #0
 80086f4:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  layer_cfg.Backcolor.Red = 0;
 80086f8:	2300      	movs	r3, #0
 80086fa:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80086fe:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8008702:	62bb      	str	r3, [r7, #40]	@ 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8008704:	2307      	movs	r3, #7
 8008706:	62fb      	str	r3, [r7, #44]	@ 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8008708:	f7ff ffae 	bl	8008668 <BSP_LCD_GetXSize>
 800870c:	4603      	mov	r3, r0
 800870e:	637b      	str	r3, [r7, #52]	@ 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8008710:	f7ff ffbe 	bl	8008690 <BSP_LCD_GetYSize>
 8008714:	4603      	mov	r3, r0
 8008716:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8008718:	88fa      	ldrh	r2, [r7, #6]
 800871a:	f107 030c 	add.w	r3, r7, #12
 800871e:	4619      	mov	r1, r3
 8008720:	4812      	ldr	r0, [pc, #72]	@ (800876c <BSP_LCD_LayerDefaultInit+0xb4>)
 8008722:	f7f9 ffc1 	bl	80026a8 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8008726:	88fa      	ldrh	r2, [r7, #6]
 8008728:	4911      	ldr	r1, [pc, #68]	@ (8008770 <BSP_LCD_LayerDefaultInit+0xb8>)
 800872a:	4613      	mov	r3, r2
 800872c:	005b      	lsls	r3, r3, #1
 800872e:	4413      	add	r3, r2
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	440b      	add	r3, r1
 8008734:	3304      	adds	r3, #4
 8008736:	f04f 32ff 	mov.w	r2, #4294967295
 800873a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 800873c:	88fa      	ldrh	r2, [r7, #6]
 800873e:	490c      	ldr	r1, [pc, #48]	@ (8008770 <BSP_LCD_LayerDefaultInit+0xb8>)
 8008740:	4613      	mov	r3, r2
 8008742:	005b      	lsls	r3, r3, #1
 8008744:	4413      	add	r3, r2
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	440b      	add	r3, r1
 800874a:	3308      	adds	r3, #8
 800874c:	4a09      	ldr	r2, [pc, #36]	@ (8008774 <BSP_LCD_LayerDefaultInit+0xbc>)
 800874e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8008750:	88fa      	ldrh	r2, [r7, #6]
 8008752:	4907      	ldr	r1, [pc, #28]	@ (8008770 <BSP_LCD_LayerDefaultInit+0xb8>)
 8008754:	4613      	mov	r3, r2
 8008756:	005b      	lsls	r3, r3, #1
 8008758:	4413      	add	r3, r2
 800875a:	009b      	lsls	r3, r3, #2
 800875c:	440b      	add	r3, r1
 800875e:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8008762:	601a      	str	r2, [r3, #0]
}
 8008764:	bf00      	nop
 8008766:	3740      	adds	r7, #64	@ 0x40
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}
 800876c:	20000864 	.word	0x20000864
 8008770:	20000950 	.word	0x20000950
 8008774:	20000010 	.word	0x20000010

08008778 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8008780:	4a04      	ldr	r2, [pc, #16]	@ (8008794 <BSP_LCD_SelectLayer+0x1c>)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6013      	str	r3, [r2, #0]
} 
 8008786:	bf00      	nop
 8008788:	370c      	adds	r7, #12
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop
 8008794:	2000094c 	.word	0x2000094c

08008798 <BSP_LCD_SetTransparency>:
  * @param  Transparency: Transparency
  *           This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFF 
  * @retval None
  */
void BSP_LCD_SetTransparency(uint32_t LayerIndex, uint8_t Transparency)
{    
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	460b      	mov	r3, r1
 80087a2:	70fb      	strb	r3, [r7, #3]
  HAL_LTDC_SetAlpha(&hLtdcHandler, Transparency, LayerIndex);
 80087a4:	78fb      	ldrb	r3, [r7, #3]
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	4619      	mov	r1, r3
 80087aa:	4803      	ldr	r0, [pc, #12]	@ (80087b8 <BSP_LCD_SetTransparency+0x20>)
 80087ac:	f7f9 ffba 	bl	8002724 <HAL_LTDC_SetAlpha>
}
 80087b0:	bf00      	nop
 80087b2:	3708      	adds	r7, #8
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	20000864 	.word	0x20000864

080087bc <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80087c4:	4b07      	ldr	r3, [pc, #28]	@ (80087e4 <BSP_LCD_SetTextColor+0x28>)
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	4907      	ldr	r1, [pc, #28]	@ (80087e8 <BSP_LCD_SetTextColor+0x2c>)
 80087ca:	4613      	mov	r3, r2
 80087cc:	005b      	lsls	r3, r3, #1
 80087ce:	4413      	add	r3, r2
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	440b      	add	r3, r1
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	601a      	str	r2, [r3, #0]
}
 80087d8:	bf00      	nop
 80087da:	370c      	adds	r7, #12
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr
 80087e4:	2000094c 	.word	0x2000094c
 80087e8:	20000950 	.word	0x20000950

080087ec <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80087f4:	4b08      	ldr	r3, [pc, #32]	@ (8008818 <BSP_LCD_SetFont+0x2c>)
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	4908      	ldr	r1, [pc, #32]	@ (800881c <BSP_LCD_SetFont+0x30>)
 80087fa:	4613      	mov	r3, r2
 80087fc:	005b      	lsls	r3, r3, #1
 80087fe:	4413      	add	r3, r2
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	440b      	add	r3, r1
 8008804:	3308      	adds	r3, #8
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	601a      	str	r2, [r3, #0]
}
 800880a:	bf00      	nop
 800880c:	370c      	adds	r7, #12
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop
 8008818:	2000094c 	.word	0x2000094c
 800881c:	20000950 	.word	0x20000950

08008820 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8008820:	b480      	push	{r7}
 8008822:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8008824:	4b07      	ldr	r3, [pc, #28]	@ (8008844 <BSP_LCD_GetFont+0x24>)
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	4907      	ldr	r1, [pc, #28]	@ (8008848 <BSP_LCD_GetFont+0x28>)
 800882a:	4613      	mov	r3, r2
 800882c:	005b      	lsls	r3, r3, #1
 800882e:	4413      	add	r3, r2
 8008830:	009b      	lsls	r3, r3, #2
 8008832:	440b      	add	r3, r1
 8008834:	3308      	adds	r3, #8
 8008836:	681b      	ldr	r3, [r3, #0]
}
 8008838:	4618      	mov	r0, r3
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr
 8008842:	bf00      	nop
 8008844:	2000094c 	.word	0x2000094c
 8008848:	20000950 	.word	0x20000950

0800884c <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 800884c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800884e:	b085      	sub	sp, #20
 8008850:	af02      	add	r7, sp, #8
 8008852:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8008854:	4b0f      	ldr	r3, [pc, #60]	@ (8008894 <BSP_LCD_Clear+0x48>)
 8008856:	681c      	ldr	r4, [r3, #0]
 8008858:	4b0e      	ldr	r3, [pc, #56]	@ (8008894 <BSP_LCD_Clear+0x48>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a0e      	ldr	r2, [pc, #56]	@ (8008898 <BSP_LCD_Clear+0x4c>)
 800885e:	2134      	movs	r1, #52	@ 0x34
 8008860:	fb01 f303 	mul.w	r3, r1, r3
 8008864:	4413      	add	r3, r2
 8008866:	335c      	adds	r3, #92	@ 0x5c
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	461e      	mov	r6, r3
 800886c:	f7ff fefc 	bl	8008668 <BSP_LCD_GetXSize>
 8008870:	4605      	mov	r5, r0
 8008872:	f7ff ff0d 	bl	8008690 <BSP_LCD_GetYSize>
 8008876:	4602      	mov	r2, r0
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	9301      	str	r3, [sp, #4]
 800887c:	2300      	movs	r3, #0
 800887e:	9300      	str	r3, [sp, #0]
 8008880:	4613      	mov	r3, r2
 8008882:	462a      	mov	r2, r5
 8008884:	4631      	mov	r1, r6
 8008886:	4620      	mov	r0, r4
 8008888:	f000 fbf2 	bl	8009070 <LL_FillBuffer>
}
 800888c:	bf00      	nop
 800888e:	370c      	adds	r7, #12
 8008890:	46bd      	mov	sp, r7
 8008892:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008894:	2000094c 	.word	0x2000094c
 8008898:	20000864 	.word	0x20000864

0800889c <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800889c:	b590      	push	{r4, r7, lr}
 800889e:	b083      	sub	sp, #12
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	4603      	mov	r3, r0
 80088a4:	80fb      	strh	r3, [r7, #6]
 80088a6:	460b      	mov	r3, r1
 80088a8:	80bb      	strh	r3, [r7, #4]
 80088aa:	4613      	mov	r3, r2
 80088ac:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80088ae:	4b1b      	ldr	r3, [pc, #108]	@ (800891c <BSP_LCD_DisplayChar+0x80>)
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	491b      	ldr	r1, [pc, #108]	@ (8008920 <BSP_LCD_DisplayChar+0x84>)
 80088b4:	4613      	mov	r3, r2
 80088b6:	005b      	lsls	r3, r3, #1
 80088b8:	4413      	add	r3, r2
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	440b      	add	r3, r1
 80088be:	3308      	adds	r3, #8
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	6819      	ldr	r1, [r3, #0]
 80088c4:	78fb      	ldrb	r3, [r7, #3]
 80088c6:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80088ca:	4b14      	ldr	r3, [pc, #80]	@ (800891c <BSP_LCD_DisplayChar+0x80>)
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	4c14      	ldr	r4, [pc, #80]	@ (8008920 <BSP_LCD_DisplayChar+0x84>)
 80088d0:	4613      	mov	r3, r2
 80088d2:	005b      	lsls	r3, r3, #1
 80088d4:	4413      	add	r3, r2
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	4423      	add	r3, r4
 80088da:	3308      	adds	r3, #8
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80088e0:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80088e4:	4b0d      	ldr	r3, [pc, #52]	@ (800891c <BSP_LCD_DisplayChar+0x80>)
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	4c0d      	ldr	r4, [pc, #52]	@ (8008920 <BSP_LCD_DisplayChar+0x84>)
 80088ea:	4613      	mov	r3, r2
 80088ec:	005b      	lsls	r3, r3, #1
 80088ee:	4413      	add	r3, r2
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	4423      	add	r3, r4
 80088f4:	3308      	adds	r3, #8
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	889b      	ldrh	r3, [r3, #4]
 80088fa:	3307      	adds	r3, #7
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	da00      	bge.n	8008902 <BSP_LCD_DisplayChar+0x66>
 8008900:	3307      	adds	r3, #7
 8008902:	10db      	asrs	r3, r3, #3
 8008904:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8008908:	18ca      	adds	r2, r1, r3
 800890a:	88b9      	ldrh	r1, [r7, #4]
 800890c:	88fb      	ldrh	r3, [r7, #6]
 800890e:	4618      	mov	r0, r3
 8008910:	f000 faf6 	bl	8008f00 <DrawChar>
}
 8008914:	bf00      	nop
 8008916:	370c      	adds	r7, #12
 8008918:	46bd      	mov	sp, r7
 800891a:	bd90      	pop	{r4, r7, pc}
 800891c:	2000094c 	.word	0x2000094c
 8008920:	20000950 	.word	0x20000950

08008924 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8008924:	b5b0      	push	{r4, r5, r7, lr}
 8008926:	b088      	sub	sp, #32
 8008928:	af00      	add	r7, sp, #0
 800892a:	60ba      	str	r2, [r7, #8]
 800892c:	461a      	mov	r2, r3
 800892e:	4603      	mov	r3, r0
 8008930:	81fb      	strh	r3, [r7, #14]
 8008932:	460b      	mov	r3, r1
 8008934:	81bb      	strh	r3, [r7, #12]
 8008936:	4613      	mov	r3, r2
 8008938:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 800893a:	2301      	movs	r3, #1
 800893c:	83fb      	strh	r3, [r7, #30]
 800893e:	2300      	movs	r3, #0
 8008940:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8008942:	2300      	movs	r3, #0
 8008944:	61bb      	str	r3, [r7, #24]
 8008946:	2300      	movs	r3, #0
 8008948:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800894e:	e002      	b.n	8008956 <BSP_LCD_DisplayStringAt+0x32>
 8008950:	69bb      	ldr	r3, [r7, #24]
 8008952:	3301      	adds	r3, #1
 8008954:	61bb      	str	r3, [r7, #24]
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	1c5a      	adds	r2, r3, #1
 800895a:	617a      	str	r2, [r7, #20]
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d1f6      	bne.n	8008950 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8008962:	f7ff fe81 	bl	8008668 <BSP_LCD_GetXSize>
 8008966:	4601      	mov	r1, r0
 8008968:	4b50      	ldr	r3, [pc, #320]	@ (8008aac <BSP_LCD_DisplayStringAt+0x188>)
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	4850      	ldr	r0, [pc, #320]	@ (8008ab0 <BSP_LCD_DisplayStringAt+0x18c>)
 800896e:	4613      	mov	r3, r2
 8008970:	005b      	lsls	r3, r3, #1
 8008972:	4413      	add	r3, r2
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	4403      	add	r3, r0
 8008978:	3308      	adds	r3, #8
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	889b      	ldrh	r3, [r3, #4]
 800897e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008982:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8008984:	79fb      	ldrb	r3, [r7, #7]
 8008986:	2b03      	cmp	r3, #3
 8008988:	d01c      	beq.n	80089c4 <BSP_LCD_DisplayStringAt+0xa0>
 800898a:	2b03      	cmp	r3, #3
 800898c:	dc33      	bgt.n	80089f6 <BSP_LCD_DisplayStringAt+0xd2>
 800898e:	2b01      	cmp	r3, #1
 8008990:	d002      	beq.n	8008998 <BSP_LCD_DisplayStringAt+0x74>
 8008992:	2b02      	cmp	r3, #2
 8008994:	d019      	beq.n	80089ca <BSP_LCD_DisplayStringAt+0xa6>
 8008996:	e02e      	b.n	80089f6 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8008998:	693a      	ldr	r2, [r7, #16]
 800899a:	69bb      	ldr	r3, [r7, #24]
 800899c:	1ad1      	subs	r1, r2, r3
 800899e:	4b43      	ldr	r3, [pc, #268]	@ (8008aac <BSP_LCD_DisplayStringAt+0x188>)
 80089a0:	681a      	ldr	r2, [r3, #0]
 80089a2:	4843      	ldr	r0, [pc, #268]	@ (8008ab0 <BSP_LCD_DisplayStringAt+0x18c>)
 80089a4:	4613      	mov	r3, r2
 80089a6:	005b      	lsls	r3, r3, #1
 80089a8:	4413      	add	r3, r2
 80089aa:	009b      	lsls	r3, r3, #2
 80089ac:	4403      	add	r3, r0
 80089ae:	3308      	adds	r3, #8
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	889b      	ldrh	r3, [r3, #4]
 80089b4:	fb01 f303 	mul.w	r3, r1, r3
 80089b8:	085b      	lsrs	r3, r3, #1
 80089ba:	b29a      	uxth	r2, r3
 80089bc:	89fb      	ldrh	r3, [r7, #14]
 80089be:	4413      	add	r3, r2
 80089c0:	83fb      	strh	r3, [r7, #30]
      break;
 80089c2:	e01b      	b.n	80089fc <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 80089c4:	89fb      	ldrh	r3, [r7, #14]
 80089c6:	83fb      	strh	r3, [r7, #30]
      break;
 80089c8:	e018      	b.n	80089fc <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80089ca:	693a      	ldr	r2, [r7, #16]
 80089cc:	69bb      	ldr	r3, [r7, #24]
 80089ce:	1ad3      	subs	r3, r2, r3
 80089d0:	b299      	uxth	r1, r3
 80089d2:	4b36      	ldr	r3, [pc, #216]	@ (8008aac <BSP_LCD_DisplayStringAt+0x188>)
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	4836      	ldr	r0, [pc, #216]	@ (8008ab0 <BSP_LCD_DisplayStringAt+0x18c>)
 80089d8:	4613      	mov	r3, r2
 80089da:	005b      	lsls	r3, r3, #1
 80089dc:	4413      	add	r3, r2
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	4403      	add	r3, r0
 80089e2:	3308      	adds	r3, #8
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	889b      	ldrh	r3, [r3, #4]
 80089e8:	fb11 f303 	smulbb	r3, r1, r3
 80089ec:	b29a      	uxth	r2, r3
 80089ee:	89fb      	ldrh	r3, [r7, #14]
 80089f0:	1ad3      	subs	r3, r2, r3
 80089f2:	83fb      	strh	r3, [r7, #30]
      break;
 80089f4:	e002      	b.n	80089fc <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 80089f6:	89fb      	ldrh	r3, [r7, #14]
 80089f8:	83fb      	strh	r3, [r7, #30]
      break;
 80089fa:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80089fc:	8bfb      	ldrh	r3, [r7, #30]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d003      	beq.n	8008a0a <BSP_LCD_DisplayStringAt+0xe6>
 8008a02:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	da1d      	bge.n	8008a46 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8008a0e:	e01a      	b.n	8008a46 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	781a      	ldrb	r2, [r3, #0]
 8008a14:	89b9      	ldrh	r1, [r7, #12]
 8008a16:	8bfb      	ldrh	r3, [r7, #30]
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f7ff ff3f 	bl	800889c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8008a1e:	4b23      	ldr	r3, [pc, #140]	@ (8008aac <BSP_LCD_DisplayStringAt+0x188>)
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	4923      	ldr	r1, [pc, #140]	@ (8008ab0 <BSP_LCD_DisplayStringAt+0x18c>)
 8008a24:	4613      	mov	r3, r2
 8008a26:	005b      	lsls	r3, r3, #1
 8008a28:	4413      	add	r3, r2
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	440b      	add	r3, r1
 8008a2e:	3308      	adds	r3, #8
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	889a      	ldrh	r2, [r3, #4]
 8008a34:	8bfb      	ldrh	r3, [r7, #30]
 8008a36:	4413      	add	r3, r2
 8008a38:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	60bb      	str	r3, [r7, #8]
    i++;
 8008a40:	8bbb      	ldrh	r3, [r7, #28]
 8008a42:	3301      	adds	r3, #1
 8008a44:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	bf14      	ite	ne
 8008a4e:	2301      	movne	r3, #1
 8008a50:	2300      	moveq	r3, #0
 8008a52:	b2dc      	uxtb	r4, r3
 8008a54:	f7ff fe08 	bl	8008668 <BSP_LCD_GetXSize>
 8008a58:	8bb9      	ldrh	r1, [r7, #28]
 8008a5a:	4b14      	ldr	r3, [pc, #80]	@ (8008aac <BSP_LCD_DisplayStringAt+0x188>)
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	4d14      	ldr	r5, [pc, #80]	@ (8008ab0 <BSP_LCD_DisplayStringAt+0x18c>)
 8008a60:	4613      	mov	r3, r2
 8008a62:	005b      	lsls	r3, r3, #1
 8008a64:	4413      	add	r3, r2
 8008a66:	009b      	lsls	r3, r3, #2
 8008a68:	442b      	add	r3, r5
 8008a6a:	3308      	adds	r3, #8
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	889b      	ldrh	r3, [r3, #4]
 8008a70:	fb01 f303 	mul.w	r3, r1, r3
 8008a74:	1ac3      	subs	r3, r0, r3
 8008a76:	b299      	uxth	r1, r3
 8008a78:	4b0c      	ldr	r3, [pc, #48]	@ (8008aac <BSP_LCD_DisplayStringAt+0x188>)
 8008a7a:	681a      	ldr	r2, [r3, #0]
 8008a7c:	480c      	ldr	r0, [pc, #48]	@ (8008ab0 <BSP_LCD_DisplayStringAt+0x18c>)
 8008a7e:	4613      	mov	r3, r2
 8008a80:	005b      	lsls	r3, r3, #1
 8008a82:	4413      	add	r3, r2
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	4403      	add	r3, r0
 8008a88:	3308      	adds	r3, #8
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	889b      	ldrh	r3, [r3, #4]
 8008a8e:	4299      	cmp	r1, r3
 8008a90:	bf2c      	ite	cs
 8008a92:	2301      	movcs	r3, #1
 8008a94:	2300      	movcc	r3, #0
 8008a96:	b2db      	uxtb	r3, r3
 8008a98:	4023      	ands	r3, r4
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d1b7      	bne.n	8008a10 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8008aa0:	bf00      	nop
 8008aa2:	bf00      	nop
 8008aa4:	3720      	adds	r7, #32
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bdb0      	pop	{r4, r5, r7, pc}
 8008aaa:	bf00      	nop
 8008aac:	2000094c 	.word	0x2000094c
 8008ab0:	20000950 	.word	0x20000950

08008ab4 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	4603      	mov	r3, r0
 8008abc:	6039      	str	r1, [r7, #0]
 8008abe:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8008ac0:	f7ff feae 	bl	8008820 <BSP_LCD_GetFont>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	88db      	ldrh	r3, [r3, #6]
 8008ac8:	88fa      	ldrh	r2, [r7, #6]
 8008aca:	fb12 f303 	smulbb	r3, r2, r3
 8008ace:	b299      	uxth	r1, r3
 8008ad0:	2303      	movs	r3, #3
 8008ad2:	683a      	ldr	r2, [r7, #0]
 8008ad4:	2000      	movs	r0, #0
 8008ad6:	f7ff ff25 	bl	8008924 <BSP_LCD_DisplayStringAt>
}
 8008ada:	bf00      	nop
 8008adc:	3708      	adds	r7, #8
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
	...

08008ae4 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8008ae4:	b5b0      	push	{r4, r5, r7, lr}
 8008ae6:	b082      	sub	sp, #8
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	4603      	mov	r3, r0
 8008aec:	603a      	str	r2, [r7, #0]
 8008aee:	80fb      	strh	r3, [r7, #6]
 8008af0:	460b      	mov	r3, r1
 8008af2:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8008af4:	4b1d      	ldr	r3, [pc, #116]	@ (8008b6c <BSP_LCD_DrawPixel+0x88>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a1d      	ldr	r2, [pc, #116]	@ (8008b70 <BSP_LCD_DrawPixel+0x8c>)
 8008afa:	2134      	movs	r1, #52	@ 0x34
 8008afc:	fb01 f303 	mul.w	r3, r1, r3
 8008b00:	4413      	add	r3, r2
 8008b02:	3348      	adds	r3, #72	@ 0x48
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	d116      	bne.n	8008b38 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8008b0a:	4b18      	ldr	r3, [pc, #96]	@ (8008b6c <BSP_LCD_DrawPixel+0x88>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a18      	ldr	r2, [pc, #96]	@ (8008b70 <BSP_LCD_DrawPixel+0x8c>)
 8008b10:	2134      	movs	r1, #52	@ 0x34
 8008b12:	fb01 f303 	mul.w	r3, r1, r3
 8008b16:	4413      	add	r3, r2
 8008b18:	335c      	adds	r3, #92	@ 0x5c
 8008b1a:	681c      	ldr	r4, [r3, #0]
 8008b1c:	88bd      	ldrh	r5, [r7, #4]
 8008b1e:	f7ff fda3 	bl	8008668 <BSP_LCD_GetXSize>
 8008b22:	4603      	mov	r3, r0
 8008b24:	fb03 f205 	mul.w	r2, r3, r5
 8008b28:	88fb      	ldrh	r3, [r7, #6]
 8008b2a:	4413      	add	r3, r2
 8008b2c:	005b      	lsls	r3, r3, #1
 8008b2e:	4423      	add	r3, r4
 8008b30:	683a      	ldr	r2, [r7, #0]
 8008b32:	b292      	uxth	r2, r2
 8008b34:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8008b36:	e015      	b.n	8008b64 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8008b38:	4b0c      	ldr	r3, [pc, #48]	@ (8008b6c <BSP_LCD_DrawPixel+0x88>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a0c      	ldr	r2, [pc, #48]	@ (8008b70 <BSP_LCD_DrawPixel+0x8c>)
 8008b3e:	2134      	movs	r1, #52	@ 0x34
 8008b40:	fb01 f303 	mul.w	r3, r1, r3
 8008b44:	4413      	add	r3, r2
 8008b46:	335c      	adds	r3, #92	@ 0x5c
 8008b48:	681c      	ldr	r4, [r3, #0]
 8008b4a:	88bd      	ldrh	r5, [r7, #4]
 8008b4c:	f7ff fd8c 	bl	8008668 <BSP_LCD_GetXSize>
 8008b50:	4603      	mov	r3, r0
 8008b52:	fb03 f205 	mul.w	r2, r3, r5
 8008b56:	88fb      	ldrh	r3, [r7, #6]
 8008b58:	4413      	add	r3, r2
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	4423      	add	r3, r4
 8008b5e:	461a      	mov	r2, r3
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	6013      	str	r3, [r2, #0]
}
 8008b64:	bf00      	nop
 8008b66:	3708      	adds	r7, #8
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bdb0      	pop	{r4, r5, r7, pc}
 8008b6c:	2000094c 	.word	0x2000094c
 8008b70:	20000864 	.word	0x20000864

08008b74 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8008b74:	b590      	push	{r4, r7, lr}
 8008b76:	b08b      	sub	sp, #44	@ 0x2c
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8008b80:	2300      	movs	r3, #0
 8008b82:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b84:	2300      	movs	r3, #0
 8008b86:	61bb      	str	r3, [r7, #24]
 8008b88:	2300      	movs	r3, #0
 8008b8a:	617b      	str	r3, [r7, #20]
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 8008b90:	2300      	movs	r3, #0
 8008b92:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	330a      	adds	r3, #10
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	330b      	adds	r3, #11
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	021b      	lsls	r3, r3, #8
 8008ba4:	441a      	add	r2, r3
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	330c      	adds	r3, #12
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	041b      	lsls	r3, r3, #16
 8008bae:	441a      	add	r2, r3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	330d      	adds	r3, #13
 8008bb4:	781b      	ldrb	r3, [r3, #0]
 8008bb6:	061b      	lsls	r3, r3, #24
 8008bb8:	4413      	add	r3, r2
 8008bba:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	3312      	adds	r3, #18
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	3313      	adds	r3, #19
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	021b      	lsls	r3, r3, #8
 8008bcc:	441a      	add	r2, r3
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	3314      	adds	r3, #20
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	041b      	lsls	r3, r3, #16
 8008bd6:	441a      	add	r2, r3
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	3315      	adds	r3, #21
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	061b      	lsls	r3, r3, #24
 8008be0:	4413      	add	r3, r2
 8008be2:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	3316      	adds	r3, #22
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	461a      	mov	r2, r3
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	3317      	adds	r3, #23
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	021b      	lsls	r3, r3, #8
 8008bf4:	441a      	add	r2, r3
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	3318      	adds	r3, #24
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	041b      	lsls	r3, r3, #16
 8008bfe:	441a      	add	r2, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	3319      	adds	r3, #25
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	061b      	lsls	r3, r3, #24
 8008c08:	4413      	add	r3, r2
 8008c0a:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	331c      	adds	r3, #28
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	461a      	mov	r2, r3
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	331d      	adds	r3, #29
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	021b      	lsls	r3, r3, #8
 8008c1c:	4413      	add	r3, r2
 8008c1e:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8008c20:	4b2b      	ldr	r3, [pc, #172]	@ (8008cd0 <BSP_LCD_DrawBitmap+0x15c>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a2b      	ldr	r2, [pc, #172]	@ (8008cd4 <BSP_LCD_DrawBitmap+0x160>)
 8008c26:	2134      	movs	r1, #52	@ 0x34
 8008c28:	fb01 f303 	mul.w	r3, r1, r3
 8008c2c:	4413      	add	r3, r2
 8008c2e:	335c      	adds	r3, #92	@ 0x5c
 8008c30:	681c      	ldr	r4, [r3, #0]
 8008c32:	f7ff fd19 	bl	8008668 <BSP_LCD_GetXSize>
 8008c36:	4602      	mov	r2, r0
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	fb03 f202 	mul.w	r2, r3, r2
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	4413      	add	r3, r2
 8008c42:	009b      	lsls	r3, r3, #2
 8008c44:	4423      	add	r3, r4
 8008c46:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	3b20      	subs	r3, #32
 8008c4c:	2b07      	cmp	r3, #7
 8008c4e:	d802      	bhi.n	8008c56 <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 8008c50:	2300      	movs	r3, #0
 8008c52:	61fb      	str	r3, [r7, #28]
 8008c54:	e008      	b.n	8008c68 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	3b10      	subs	r3, #16
 8008c5a:	2b07      	cmp	r3, #7
 8008c5c:	d802      	bhi.n	8008c64 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 8008c5e:	2302      	movs	r3, #2
 8008c60:	61fb      	str	r3, [r7, #28]
 8008c62:	e001      	b.n	8008c68 <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 8008c64:	2301      	movs	r3, #1
 8008c66:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	3b01      	subs	r3, #1
 8008c6c:	69ba      	ldr	r2, [r7, #24]
 8008c6e:	fb02 f303 	mul.w	r3, r2, r3
 8008c72:	693a      	ldr	r2, [r7, #16]
 8008c74:	08d2      	lsrs	r2, r2, #3
 8008c76:	fb03 f202 	mul.w	r2, r3, r2
 8008c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c7c:	4413      	add	r3, r2
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	4413      	add	r3, r2
 8008c82:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8008c84:	2300      	movs	r3, #0
 8008c86:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c88:	e018      	b.n	8008cbc <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 8008c8a:	6a39      	ldr	r1, [r7, #32]
 8008c8c:	69fb      	ldr	r3, [r7, #28]
 8008c8e:	69ba      	ldr	r2, [r7, #24]
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 fa39 	bl	8009108 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 8008c96:	f7ff fce7 	bl	8008668 <BSP_LCD_GetXSize>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	6a3a      	ldr	r2, [r7, #32]
 8008ca0:	4413      	add	r3, r2
 8008ca2:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	08db      	lsrs	r3, r3, #3
 8008ca8:	69ba      	ldr	r2, [r7, #24]
 8008caa:	fb02 f303 	mul.w	r3, r2, r3
 8008cae:	425b      	negs	r3, r3
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	4413      	add	r3, r2
 8008cb4:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 8008cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb8:	3301      	adds	r3, #1
 8008cba:	627b      	str	r3, [r7, #36]	@ 0x24
 8008cbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d3e2      	bcc.n	8008c8a <BSP_LCD_DrawBitmap+0x116>
  } 
}
 8008cc4:	bf00      	nop
 8008cc6:	bf00      	nop
 8008cc8:	372c      	adds	r7, #44	@ 0x2c
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd90      	pop	{r4, r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	2000094c 	.word	0x2000094c
 8008cd4:	20000864 	.word	0x20000864

08008cd8 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8008cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8008d08 <BSP_LCD_DisplayOn+0x30>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	699a      	ldr	r2, [r3, #24]
 8008ce2:	4b09      	ldr	r3, [pc, #36]	@ (8008d08 <BSP_LCD_DisplayOn+0x30>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f042 0201 	orr.w	r2, r2, #1
 8008cea:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8008cec:	2201      	movs	r2, #1
 8008cee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8008cf2:	4806      	ldr	r0, [pc, #24]	@ (8008d0c <BSP_LCD_DisplayOn+0x34>)
 8008cf4:	f7f9 fb0e 	bl	8002314 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	2108      	movs	r1, #8
 8008cfc:	4804      	ldr	r0, [pc, #16]	@ (8008d10 <BSP_LCD_DisplayOn+0x38>)
 8008cfe:	f7f9 fb09 	bl	8002314 <HAL_GPIO_WritePin>
}
 8008d02:	bf00      	nop
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	20000864 	.word	0x20000864
 8008d0c:	40022000 	.word	0x40022000
 8008d10:	40022800 	.word	0x40022800

08008d14 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b090      	sub	sp, #64	@ 0x40
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8008d1e:	4b64      	ldr	r3, [pc, #400]	@ (8008eb0 <BSP_LCD_MspInit+0x19c>)
 8008d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d22:	4a63      	ldr	r2, [pc, #396]	@ (8008eb0 <BSP_LCD_MspInit+0x19c>)
 8008d24:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008d28:	6453      	str	r3, [r2, #68]	@ 0x44
 8008d2a:	4b61      	ldr	r3, [pc, #388]	@ (8008eb0 <BSP_LCD_MspInit+0x19c>)
 8008d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d2e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008d32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8008d36:	4b5e      	ldr	r3, [pc, #376]	@ (8008eb0 <BSP_LCD_MspInit+0x19c>)
 8008d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d3a:	4a5d      	ldr	r2, [pc, #372]	@ (8008eb0 <BSP_LCD_MspInit+0x19c>)
 8008d3c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8008d42:	4b5b      	ldr	r3, [pc, #364]	@ (8008eb0 <BSP_LCD_MspInit+0x19c>)
 8008d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008d4e:	4b58      	ldr	r3, [pc, #352]	@ (8008eb0 <BSP_LCD_MspInit+0x19c>)
 8008d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d52:	4a57      	ldr	r2, [pc, #348]	@ (8008eb0 <BSP_LCD_MspInit+0x19c>)
 8008d54:	f043 0310 	orr.w	r3, r3, #16
 8008d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8008d5a:	4b55      	ldr	r3, [pc, #340]	@ (8008eb0 <BSP_LCD_MspInit+0x19c>)
 8008d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d5e:	f003 0310 	and.w	r3, r3, #16
 8008d62:	623b      	str	r3, [r7, #32]
 8008d64:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008d66:	4b52      	ldr	r3, [pc, #328]	@ (8008eb0 <BSP_LCD_MspInit+0x19c>)
 8008d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d6a:	4a51      	ldr	r2, [pc, #324]	@ (8008eb0 <BSP_LCD_MspInit+0x19c>)
 8008d6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8008d72:	4b4f      	ldr	r3, [pc, #316]	@ (8008eb0 <BSP_LCD_MspInit+0x19c>)
 8008d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d7a:	61fb      	str	r3, [r7, #28]
 8008d7c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8008d7e:	4b4c      	ldr	r3, [pc, #304]	@ (8008eb0 <BSP_LCD_MspInit+0x19c>)
 8008d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d82:	4a4b      	ldr	r2, [pc, #300]	@ (8008eb0 <BSP_LCD_MspInit+0x19c>)
 8008d84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8008d8a:	4b49      	ldr	r3, [pc, #292]	@ (8008eb0 <BSP_LCD_MspInit+0x19c>)
 8008d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d92:	61bb      	str	r3, [r7, #24]
 8008d94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8008d96:	4b46      	ldr	r3, [pc, #280]	@ (8008eb0 <BSP_LCD_MspInit+0x19c>)
 8008d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d9a:	4a45      	ldr	r2, [pc, #276]	@ (8008eb0 <BSP_LCD_MspInit+0x19c>)
 8008d9c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8008da2:	4b43      	ldr	r3, [pc, #268]	@ (8008eb0 <BSP_LCD_MspInit+0x19c>)
 8008da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008da6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008daa:	617b      	str	r3, [r7, #20]
 8008dac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8008dae:	4b40      	ldr	r3, [pc, #256]	@ (8008eb0 <BSP_LCD_MspInit+0x19c>)
 8008db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008db2:	4a3f      	ldr	r2, [pc, #252]	@ (8008eb0 <BSP_LCD_MspInit+0x19c>)
 8008db4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8008dba:	4b3d      	ldr	r3, [pc, #244]	@ (8008eb0 <BSP_LCD_MspInit+0x19c>)
 8008dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008dc2:	613b      	str	r3, [r7, #16]
 8008dc4:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8008dc6:	4b3a      	ldr	r3, [pc, #232]	@ (8008eb0 <BSP_LCD_MspInit+0x19c>)
 8008dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dca:	4a39      	ldr	r2, [pc, #228]	@ (8008eb0 <BSP_LCD_MspInit+0x19c>)
 8008dcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8008dd2:	4b37      	ldr	r3, [pc, #220]	@ (8008eb0 <BSP_LCD_MspInit+0x19c>)
 8008dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008dda:	60fb      	str	r3, [r7, #12]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8008dde:	4b34      	ldr	r3, [pc, #208]	@ (8008eb0 <BSP_LCD_MspInit+0x19c>)
 8008de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008de2:	4a33      	ldr	r2, [pc, #204]	@ (8008eb0 <BSP_LCD_MspInit+0x19c>)
 8008de4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8008dea:	4b31      	ldr	r3, [pc, #196]	@ (8008eb0 <BSP_LCD_MspInit+0x19c>)
 8008dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008df2:	60bb      	str	r3, [r7, #8]
 8008df4:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8008df6:	2310      	movs	r3, #16
 8008df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8008dfa:	2302      	movs	r3, #2
 8008dfc:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8008e02:	2302      	movs	r3, #2
 8008e04:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8008e06:	230e      	movs	r3, #14
 8008e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8008e0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008e0e:	4619      	mov	r1, r3
 8008e10:	4828      	ldr	r0, [pc, #160]	@ (8008eb4 <BSP_LCD_MspInit+0x1a0>)
 8008e12:	f7f9 f8bb 	bl	8001f8c <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8008e16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8008e1c:	2302      	movs	r3, #2
 8008e1e:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8008e20:	2309      	movs	r3, #9
 8008e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8008e24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008e28:	4619      	mov	r1, r3
 8008e2a:	4823      	ldr	r0, [pc, #140]	@ (8008eb8 <BSP_LCD_MspInit+0x1a4>)
 8008e2c:	f7f9 f8ae 	bl	8001f8c <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8008e30:	f44f 4366 	mov.w	r3, #58880	@ 0xe600
 8008e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8008e36:	2302      	movs	r3, #2
 8008e38:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8008e3a:	230e      	movs	r3, #14
 8008e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8008e3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008e42:	4619      	mov	r1, r3
 8008e44:	481d      	ldr	r0, [pc, #116]	@ (8008ebc <BSP_LCD_MspInit+0x1a8>)
 8008e46:	f7f9 f8a1 	bl	8001f8c <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8008e4a:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8008e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8008e50:	2302      	movs	r3, #2
 8008e52:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8008e54:	230e      	movs	r3, #14
 8008e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8008e58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	4818      	ldr	r0, [pc, #96]	@ (8008ec0 <BSP_LCD_MspInit+0x1ac>)
 8008e60:	f7f9 f894 	bl	8001f8c <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8008e64:	23f7      	movs	r3, #247	@ 0xf7
 8008e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8008e68:	2302      	movs	r3, #2
 8008e6a:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8008e6c:	230e      	movs	r3, #14
 8008e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8008e70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008e74:	4619      	mov	r1, r3
 8008e76:	4813      	ldr	r0, [pc, #76]	@ (8008ec4 <BSP_LCD_MspInit+0x1b0>)
 8008e78:	f7f9 f888 	bl	8001f8c <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8008e7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8008e82:	2301      	movs	r3, #1
 8008e84:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8008e86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	480b      	ldr	r0, [pc, #44]	@ (8008ebc <BSP_LCD_MspInit+0x1a8>)
 8008e8e:	f7f9 f87d 	bl	8001f8c <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8008e92:	2308      	movs	r3, #8
 8008e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8008e96:	2301      	movs	r3, #1
 8008e98:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8008e9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	4808      	ldr	r0, [pc, #32]	@ (8008ec4 <BSP_LCD_MspInit+0x1b0>)
 8008ea2:	f7f9 f873 	bl	8001f8c <HAL_GPIO_Init>
}
 8008ea6:	bf00      	nop
 8008ea8:	3740      	adds	r7, #64	@ 0x40
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	bf00      	nop
 8008eb0:	40023800 	.word	0x40023800
 8008eb4:	40021000 	.word	0x40021000
 8008eb8:	40021800 	.word	0x40021800
 8008ebc:	40022000 	.word	0x40022000
 8008ec0:	40022400 	.word	0x40022400
 8008ec4:	40022800 	.word	0x40022800

08008ec8 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8008ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8008efc <BSP_LCD_ClockConfig+0x34>)
 8008ed4:	2208      	movs	r2, #8
 8008ed6:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8008ed8:	4b08      	ldr	r3, [pc, #32]	@ (8008efc <BSP_LCD_ClockConfig+0x34>)
 8008eda:	22c0      	movs	r2, #192	@ 0xc0
 8008edc:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8008ede:	4b07      	ldr	r3, [pc, #28]	@ (8008efc <BSP_LCD_ClockConfig+0x34>)
 8008ee0:	2205      	movs	r2, #5
 8008ee2:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8008ee4:	4b05      	ldr	r3, [pc, #20]	@ (8008efc <BSP_LCD_ClockConfig+0x34>)
 8008ee6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8008eea:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8008eec:	4803      	ldr	r0, [pc, #12]	@ (8008efc <BSP_LCD_ClockConfig+0x34>)
 8008eee:	f7fa faa3 	bl	8003438 <HAL_RCCEx_PeriphCLKConfig>
}
 8008ef2:	bf00      	nop
 8008ef4:	3708      	adds	r7, #8
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	20000968 	.word	0x20000968

08008f00 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b088      	sub	sp, #32
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	4603      	mov	r3, r0
 8008f08:	603a      	str	r2, [r7, #0]
 8008f0a:	80fb      	strh	r3, [r7, #6]
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8008f10:	2300      	movs	r3, #0
 8008f12:	61fb      	str	r3, [r7, #28]
 8008f14:	2300      	movs	r3, #0
 8008f16:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8008f18:	4b53      	ldr	r3, [pc, #332]	@ (8009068 <DrawChar+0x168>)
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	4953      	ldr	r1, [pc, #332]	@ (800906c <DrawChar+0x16c>)
 8008f1e:	4613      	mov	r3, r2
 8008f20:	005b      	lsls	r3, r3, #1
 8008f22:	4413      	add	r3, r2
 8008f24:	009b      	lsls	r3, r3, #2
 8008f26:	440b      	add	r3, r1
 8008f28:	3308      	adds	r3, #8
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	88db      	ldrh	r3, [r3, #6]
 8008f2e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8008f30:	4b4d      	ldr	r3, [pc, #308]	@ (8009068 <DrawChar+0x168>)
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	494d      	ldr	r1, [pc, #308]	@ (800906c <DrawChar+0x16c>)
 8008f36:	4613      	mov	r3, r2
 8008f38:	005b      	lsls	r3, r3, #1
 8008f3a:	4413      	add	r3, r2
 8008f3c:	009b      	lsls	r3, r3, #2
 8008f3e:	440b      	add	r3, r1
 8008f40:	3308      	adds	r3, #8
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	889b      	ldrh	r3, [r3, #4]
 8008f46:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8008f48:	8a3b      	ldrh	r3, [r7, #16]
 8008f4a:	3307      	adds	r3, #7
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	da00      	bge.n	8008f52 <DrawChar+0x52>
 8008f50:	3307      	adds	r3, #7
 8008f52:	10db      	asrs	r3, r3, #3
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	00db      	lsls	r3, r3, #3
 8008f58:	b2da      	uxtb	r2, r3
 8008f5a:	8a3b      	ldrh	r3, [r7, #16]
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	1ad3      	subs	r3, r2, r3
 8008f60:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8008f62:	2300      	movs	r3, #0
 8008f64:	61fb      	str	r3, [r7, #28]
 8008f66:	e076      	b.n	8009056 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8008f68:	8a3b      	ldrh	r3, [r7, #16]
 8008f6a:	3307      	adds	r3, #7
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	da00      	bge.n	8008f72 <DrawChar+0x72>
 8008f70:	3307      	adds	r3, #7
 8008f72:	10db      	asrs	r3, r3, #3
 8008f74:	461a      	mov	r2, r3
 8008f76:	69fb      	ldr	r3, [r7, #28]
 8008f78:	fb02 f303 	mul.w	r3, r2, r3
 8008f7c:	683a      	ldr	r2, [r7, #0]
 8008f7e:	4413      	add	r3, r2
 8008f80:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8008f82:	8a3b      	ldrh	r3, [r7, #16]
 8008f84:	3307      	adds	r3, #7
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	da00      	bge.n	8008f8c <DrawChar+0x8c>
 8008f8a:	3307      	adds	r3, #7
 8008f8c:	10db      	asrs	r3, r3, #3
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d002      	beq.n	8008f98 <DrawChar+0x98>
 8008f92:	2b02      	cmp	r3, #2
 8008f94:	d004      	beq.n	8008fa0 <DrawChar+0xa0>
 8008f96:	e00c      	b.n	8008fb2 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	617b      	str	r3, [r7, #20]
      break;
 8008f9e:	e016      	b.n	8008fce <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	021b      	lsls	r3, r3, #8
 8008fa6:	68ba      	ldr	r2, [r7, #8]
 8008fa8:	3201      	adds	r2, #1
 8008faa:	7812      	ldrb	r2, [r2, #0]
 8008fac:	4313      	orrs	r3, r2
 8008fae:	617b      	str	r3, [r7, #20]
      break;
 8008fb0:	e00d      	b.n	8008fce <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	041a      	lsls	r2, r3, #16
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	021b      	lsls	r3, r3, #8
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	68ba      	ldr	r2, [r7, #8]
 8008fc4:	3202      	adds	r2, #2
 8008fc6:	7812      	ldrb	r2, [r2, #0]
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	617b      	str	r3, [r7, #20]
      break;
 8008fcc:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8008fce:	2300      	movs	r3, #0
 8008fd0:	61bb      	str	r3, [r7, #24]
 8008fd2:	e036      	b.n	8009042 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8008fd4:	8a3a      	ldrh	r2, [r7, #16]
 8008fd6:	69bb      	ldr	r3, [r7, #24]
 8008fd8:	1ad2      	subs	r2, r2, r3
 8008fda:	7bfb      	ldrb	r3, [r7, #15]
 8008fdc:	4413      	add	r3, r2
 8008fde:	3b01      	subs	r3, #1
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	4013      	ands	r3, r2
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d012      	beq.n	8009016 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	b29a      	uxth	r2, r3
 8008ff4:	88fb      	ldrh	r3, [r7, #6]
 8008ff6:	4413      	add	r3, r2
 8008ff8:	b298      	uxth	r0, r3
 8008ffa:	4b1b      	ldr	r3, [pc, #108]	@ (8009068 <DrawChar+0x168>)
 8008ffc:	681a      	ldr	r2, [r3, #0]
 8008ffe:	491b      	ldr	r1, [pc, #108]	@ (800906c <DrawChar+0x16c>)
 8009000:	4613      	mov	r3, r2
 8009002:	005b      	lsls	r3, r3, #1
 8009004:	4413      	add	r3, r2
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	440b      	add	r3, r1
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	88bb      	ldrh	r3, [r7, #4]
 800900e:	4619      	mov	r1, r3
 8009010:	f7ff fd68 	bl	8008ae4 <BSP_LCD_DrawPixel>
 8009014:	e012      	b.n	800903c <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	b29a      	uxth	r2, r3
 800901a:	88fb      	ldrh	r3, [r7, #6]
 800901c:	4413      	add	r3, r2
 800901e:	b298      	uxth	r0, r3
 8009020:	4b11      	ldr	r3, [pc, #68]	@ (8009068 <DrawChar+0x168>)
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	4911      	ldr	r1, [pc, #68]	@ (800906c <DrawChar+0x16c>)
 8009026:	4613      	mov	r3, r2
 8009028:	005b      	lsls	r3, r3, #1
 800902a:	4413      	add	r3, r2
 800902c:	009b      	lsls	r3, r3, #2
 800902e:	440b      	add	r3, r1
 8009030:	3304      	adds	r3, #4
 8009032:	681a      	ldr	r2, [r3, #0]
 8009034:	88bb      	ldrh	r3, [r7, #4]
 8009036:	4619      	mov	r1, r3
 8009038:	f7ff fd54 	bl	8008ae4 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800903c:	69bb      	ldr	r3, [r7, #24]
 800903e:	3301      	adds	r3, #1
 8009040:	61bb      	str	r3, [r7, #24]
 8009042:	8a3b      	ldrh	r3, [r7, #16]
 8009044:	69ba      	ldr	r2, [r7, #24]
 8009046:	429a      	cmp	r2, r3
 8009048:	d3c4      	bcc.n	8008fd4 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 800904a:	88bb      	ldrh	r3, [r7, #4]
 800904c:	3301      	adds	r3, #1
 800904e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	3301      	adds	r3, #1
 8009054:	61fb      	str	r3, [r7, #28]
 8009056:	8a7b      	ldrh	r3, [r7, #18]
 8009058:	69fa      	ldr	r2, [r7, #28]
 800905a:	429a      	cmp	r2, r3
 800905c:	d384      	bcc.n	8008f68 <DrawChar+0x68>
  }
}
 800905e:	bf00      	nop
 8009060:	bf00      	nop
 8009062:	3720      	adds	r7, #32
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}
 8009068:	2000094c 	.word	0x2000094c
 800906c:	20000950 	.word	0x20000950

08009070 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b086      	sub	sp, #24
 8009074:	af02      	add	r7, sp, #8
 8009076:	60f8      	str	r0, [r7, #12]
 8009078:	60b9      	str	r1, [r7, #8]
 800907a:	607a      	str	r2, [r7, #4]
 800907c:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800907e:	4b1e      	ldr	r3, [pc, #120]	@ (80090f8 <LL_FillBuffer+0x88>)
 8009080:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8009084:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8009086:	4b1d      	ldr	r3, [pc, #116]	@ (80090fc <LL_FillBuffer+0x8c>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a1d      	ldr	r2, [pc, #116]	@ (8009100 <LL_FillBuffer+0x90>)
 800908c:	2134      	movs	r1, #52	@ 0x34
 800908e:	fb01 f303 	mul.w	r3, r1, r3
 8009092:	4413      	add	r3, r2
 8009094:	3348      	adds	r3, #72	@ 0x48
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	2b02      	cmp	r3, #2
 800909a:	d103      	bne.n	80090a4 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 800909c:	4b16      	ldr	r3, [pc, #88]	@ (80090f8 <LL_FillBuffer+0x88>)
 800909e:	2202      	movs	r2, #2
 80090a0:	609a      	str	r2, [r3, #8]
 80090a2:	e002      	b.n	80090aa <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80090a4:	4b14      	ldr	r3, [pc, #80]	@ (80090f8 <LL_FillBuffer+0x88>)
 80090a6:	2200      	movs	r2, #0
 80090a8:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80090aa:	4a13      	ldr	r2, [pc, #76]	@ (80090f8 <LL_FillBuffer+0x88>)
 80090ac:	69bb      	ldr	r3, [r7, #24]
 80090ae:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80090b0:	4b11      	ldr	r3, [pc, #68]	@ (80090f8 <LL_FillBuffer+0x88>)
 80090b2:	4a14      	ldr	r2, [pc, #80]	@ (8009104 <LL_FillBuffer+0x94>)
 80090b4:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80090b6:	4810      	ldr	r0, [pc, #64]	@ (80090f8 <LL_FillBuffer+0x88>)
 80090b8:	f7f8 fcdc 	bl	8001a74 <HAL_DMA2D_Init>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d115      	bne.n	80090ee <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80090c2:	68f9      	ldr	r1, [r7, #12]
 80090c4:	480c      	ldr	r0, [pc, #48]	@ (80090f8 <LL_FillBuffer+0x88>)
 80090c6:	f7f8 fe33 	bl	8001d30 <HAL_DMA2D_ConfigLayer>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d10e      	bne.n	80090ee <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80090d0:	68ba      	ldr	r2, [r7, #8]
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	9300      	str	r3, [sp, #0]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	69f9      	ldr	r1, [r7, #28]
 80090da:	4807      	ldr	r0, [pc, #28]	@ (80090f8 <LL_FillBuffer+0x88>)
 80090dc:	f7f8 fd14 	bl	8001b08 <HAL_DMA2D_Start>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d103      	bne.n	80090ee <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80090e6:	210a      	movs	r1, #10
 80090e8:	4803      	ldr	r0, [pc, #12]	@ (80090f8 <LL_FillBuffer+0x88>)
 80090ea:	f7f8 fd38 	bl	8001b5e <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80090ee:	bf00      	nop
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	2000090c 	.word	0x2000090c
 80090fc:	2000094c 	.word	0x2000094c
 8009100:	20000864 	.word	0x20000864
 8009104:	4002b000 	.word	0x4002b000

08009108 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 8009108:	b580      	push	{r7, lr}
 800910a:	b086      	sub	sp, #24
 800910c:	af02      	add	r7, sp, #8
 800910e:	60f8      	str	r0, [r7, #12]
 8009110:	60b9      	str	r1, [r7, #8]
 8009112:	607a      	str	r2, [r7, #4]
 8009114:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 8009116:	4b1c      	ldr	r3, [pc, #112]	@ (8009188 <LL_ConvertLineToARGB8888+0x80>)
 8009118:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800911c:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800911e:	4b1a      	ldr	r3, [pc, #104]	@ (8009188 <LL_ConvertLineToARGB8888+0x80>)
 8009120:	2200      	movs	r2, #0
 8009122:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 8009124:	4b18      	ldr	r3, [pc, #96]	@ (8009188 <LL_ConvertLineToARGB8888+0x80>)
 8009126:	2200      	movs	r2, #0
 8009128:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800912a:	4b17      	ldr	r3, [pc, #92]	@ (8009188 <LL_ConvertLineToARGB8888+0x80>)
 800912c:	2200      	movs	r2, #0
 800912e:	631a      	str	r2, [r3, #48]	@ 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 8009130:	4b15      	ldr	r3, [pc, #84]	@ (8009188 <LL_ConvertLineToARGB8888+0x80>)
 8009132:	22ff      	movs	r2, #255	@ 0xff
 8009134:	635a      	str	r2, [r3, #52]	@ 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 8009136:	4a14      	ldr	r2, [pc, #80]	@ (8009188 <LL_ConvertLineToARGB8888+0x80>)
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 800913c:	4b12      	ldr	r3, [pc, #72]	@ (8009188 <LL_ConvertLineToARGB8888+0x80>)
 800913e:	2200      	movs	r2, #0
 8009140:	629a      	str	r2, [r3, #40]	@ 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 8009142:	4b11      	ldr	r3, [pc, #68]	@ (8009188 <LL_ConvertLineToARGB8888+0x80>)
 8009144:	4a11      	ldr	r2, [pc, #68]	@ (800918c <LL_ConvertLineToARGB8888+0x84>)
 8009146:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8009148:	480f      	ldr	r0, [pc, #60]	@ (8009188 <LL_ConvertLineToARGB8888+0x80>)
 800914a:	f7f8 fc93 	bl	8001a74 <HAL_DMA2D_Init>
 800914e:	4603      	mov	r3, r0
 8009150:	2b00      	cmp	r3, #0
 8009152:	d115      	bne.n	8009180 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 8009154:	2101      	movs	r1, #1
 8009156:	480c      	ldr	r0, [pc, #48]	@ (8009188 <LL_ConvertLineToARGB8888+0x80>)
 8009158:	f7f8 fdea 	bl	8001d30 <HAL_DMA2D_ConfigLayer>
 800915c:	4603      	mov	r3, r0
 800915e:	2b00      	cmp	r3, #0
 8009160:	d10e      	bne.n	8009180 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8009162:	68f9      	ldr	r1, [r7, #12]
 8009164:	68ba      	ldr	r2, [r7, #8]
 8009166:	2301      	movs	r3, #1
 8009168:	9300      	str	r3, [sp, #0]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	4806      	ldr	r0, [pc, #24]	@ (8009188 <LL_ConvertLineToARGB8888+0x80>)
 800916e:	f7f8 fccb 	bl	8001b08 <HAL_DMA2D_Start>
 8009172:	4603      	mov	r3, r0
 8009174:	2b00      	cmp	r3, #0
 8009176:	d103      	bne.n	8009180 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8009178:	210a      	movs	r1, #10
 800917a:	4803      	ldr	r0, [pc, #12]	@ (8009188 <LL_ConvertLineToARGB8888+0x80>)
 800917c:	f7f8 fcef 	bl	8001b5e <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8009180:	bf00      	nop
 8009182:	3710      	adds	r7, #16
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}
 8009188:	2000090c 	.word	0x2000090c
 800918c:	4002b000 	.word	0x4002b000

08009190 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{ 
 8009190:	b580      	push	{r7, lr}
 8009192:	b082      	sub	sp, #8
 8009194:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009196:	2300      	movs	r3, #0
 8009198:	71fb      	strb	r3, [r7, #7]
  
  /* uSD device interface configuration */
  uSdHandle.Instance = SDMMC1;
 800919a:	4b20      	ldr	r3, [pc, #128]	@ (800921c <BSP_SD_Init+0x8c>)
 800919c:	4a20      	ldr	r2, [pc, #128]	@ (8009220 <BSP_SD_Init+0x90>)
 800919e:	601a      	str	r2, [r3, #0]

  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80091a0:	4b1e      	ldr	r3, [pc, #120]	@ (800921c <BSP_SD_Init+0x8c>)
 80091a2:	2200      	movs	r2, #0
 80091a4:	605a      	str	r2, [r3, #4]
  uSdHandle.Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80091a6:	4b1d      	ldr	r3, [pc, #116]	@ (800921c <BSP_SD_Init+0x8c>)
 80091a8:	2200      	movs	r2, #0
 80091aa:	609a      	str	r2, [r3, #8]
  uSdHandle.Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80091ac:	4b1b      	ldr	r3, [pc, #108]	@ (800921c <BSP_SD_Init+0x8c>)
 80091ae:	2200      	movs	r2, #0
 80091b0:	60da      	str	r2, [r3, #12]
  uSdHandle.Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80091b2:	4b1a      	ldr	r3, [pc, #104]	@ (800921c <BSP_SD_Init+0x8c>)
 80091b4:	2200      	movs	r2, #0
 80091b6:	611a      	str	r2, [r3, #16]
  uSdHandle.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80091b8:	4b18      	ldr	r3, [pc, #96]	@ (800921c <BSP_SD_Init+0x8c>)
 80091ba:	2200      	movs	r2, #0
 80091bc:	615a      	str	r2, [r3, #20]
  uSdHandle.Init.ClockDiv            = SDMMC_TRANSFER_CLK_DIV;
 80091be:	4b17      	ldr	r3, [pc, #92]	@ (800921c <BSP_SD_Init+0x8c>)
 80091c0:	2200      	movs	r2, #0
 80091c2:	619a      	str	r2, [r3, #24]
  
  /* Msp SD Detect pin initialization */
  BSP_SD_Detect_MspInit(&uSdHandle, NULL);
 80091c4:	2100      	movs	r1, #0
 80091c6:	4815      	ldr	r0, [pc, #84]	@ (800921c <BSP_SD_Init+0x8c>)
 80091c8:	f000 f968 	bl	800949c <BSP_SD_Detect_MspInit>
  if(BSP_SD_IsDetected() != SD_PRESENT)   /* Check if SD card is present */
 80091cc:	f000 f82a 	bl	8009224 <BSP_SD_IsDetected>
 80091d0:	4603      	mov	r3, r0
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	d001      	beq.n	80091da <BSP_SD_Init+0x4a>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80091d6:	2302      	movs	r3, #2
 80091d8:	e01c      	b.n	8009214 <BSP_SD_Init+0x84>
  }
  
  /* Msp SD initialization */
  BSP_SD_MspInit(&uSdHandle, NULL);
 80091da:	2100      	movs	r1, #0
 80091dc:	480f      	ldr	r0, [pc, #60]	@ (800921c <BSP_SD_Init+0x8c>)
 80091de:	f000 f871 	bl	80092c4 <BSP_SD_MspInit>

  /* HAL SD initialization */
  if(HAL_SD_Init(&uSdHandle) != HAL_OK)
 80091e2:	480e      	ldr	r0, [pc, #56]	@ (800921c <BSP_SD_Init+0x8c>)
 80091e4:	f7fa fd18 	bl	8003c18 <HAL_SD_Init>
 80091e8:	4603      	mov	r3, r0
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d001      	beq.n	80091f2 <BSP_SD_Init+0x62>
  {
    sd_state = MSD_ERROR;
 80091ee:	2301      	movs	r3, #1
 80091f0:	71fb      	strb	r3, [r7, #7]
  }
  
  /* Configure SD Bus width */
  if(sd_state == MSD_OK)
 80091f2:	79fb      	ldrb	r3, [r7, #7]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d10c      	bne.n	8009212 <BSP_SD_Init+0x82>
  {
    /* Enable wide operation */ 
    if(HAL_SD_ConfigWideBusOperation(&uSdHandle, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80091f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80091fc:	4807      	ldr	r0, [pc, #28]	@ (800921c <BSP_SD_Init+0x8c>)
 80091fe:	f7fb faf5 	bl	80047ec <HAL_SD_ConfigWideBusOperation>
 8009202:	4603      	mov	r3, r0
 8009204:	2b00      	cmp	r3, #0
 8009206:	d002      	beq.n	800920e <BSP_SD_Init+0x7e>
    {
      sd_state = MSD_ERROR;
 8009208:	2301      	movs	r3, #1
 800920a:	71fb      	strb	r3, [r7, #7]
 800920c:	e001      	b.n	8009212 <BSP_SD_Init+0x82>
    }
    else
    {
      sd_state = MSD_OK;
 800920e:	2300      	movs	r3, #0
 8009210:	71fb      	strb	r3, [r7, #7]
    }
  }
  
  return  sd_state;
 8009212:	79fb      	ldrb	r3, [r7, #7]
}
 8009214:	4618      	mov	r0, r3
 8009216:	3708      	adds	r7, #8
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}
 800921c:	200009ec 	.word	0x200009ec
 8009220:	40012c00 	.word	0x40012c00

08009224 <BSP_SD_IsDetected>:
/**
  * @brief  Detects if SD card is correctly plugged in the memory slot or not.
  * @retval Returns if SD is detected or not
  */
uint8_t BSP_SD_IsDetected(void)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
  __IO uint8_t      status = SD_PRESENT;
 800922a:	2301      	movs	r3, #1
 800922c:	71fb      	strb	r3, [r7, #7]
  
  /* Check SD card detect pin */
  if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET)
 800922e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009232:	4807      	ldr	r0, [pc, #28]	@ (8009250 <BSP_SD_IsDetected+0x2c>)
 8009234:	f7f9 f856 	bl	80022e4 <HAL_GPIO_ReadPin>
 8009238:	4603      	mov	r3, r0
 800923a:	2b01      	cmp	r3, #1
 800923c:	d101      	bne.n	8009242 <BSP_SD_IsDetected+0x1e>
  {
    status = SD_NOT_PRESENT;
 800923e:	2300      	movs	r3, #0
 8009240:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009242:	79fb      	ldrb	r3, [r7, #7]
 8009244:	b2db      	uxtb	r3, r3
}
 8009246:	4618      	mov	r0, r3
 8009248:	3708      	adds	r7, #8
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
 800924e:	bf00      	nop
 8009250:	40020800 	.word	0x40020800

08009254 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b086      	sub	sp, #24
 8009258:	af02      	add	r7, sp, #8
 800925a:	60f8      	str	r0, [r7, #12]
 800925c:	60b9      	str	r1, [r7, #8]
 800925e:	607a      	str	r2, [r7, #4]
 8009260:	603b      	str	r3, [r7, #0]
  if(HAL_SD_ReadBlocks(&uSdHandle, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	9300      	str	r3, [sp, #0]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	68ba      	ldr	r2, [r7, #8]
 800926a:	68f9      	ldr	r1, [r7, #12]
 800926c:	4806      	ldr	r0, [pc, #24]	@ (8009288 <BSP_SD_ReadBlocks+0x34>)
 800926e:	f7fa fd6c 	bl	8003d4a <HAL_SD_ReadBlocks>
 8009272:	4603      	mov	r3, r0
 8009274:	2b00      	cmp	r3, #0
 8009276:	d001      	beq.n	800927c <BSP_SD_ReadBlocks+0x28>
  {
    return MSD_ERROR;
 8009278:	2301      	movs	r3, #1
 800927a:	e000      	b.n	800927e <BSP_SD_ReadBlocks+0x2a>
  }
  else
  {
    return MSD_OK;
 800927c:	2300      	movs	r3, #0
  }
}
 800927e:	4618      	mov	r0, r3
 8009280:	3710      	adds	r7, #16
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
 8009286:	bf00      	nop
 8009288:	200009ec 	.word	0x200009ec

0800928c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b086      	sub	sp, #24
 8009290:	af02      	add	r7, sp, #8
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	607a      	str	r2, [r7, #4]
 8009298:	603b      	str	r3, [r7, #0]
  if(HAL_SD_WriteBlocks(&uSdHandle, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	9300      	str	r3, [sp, #0]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	68ba      	ldr	r2, [r7, #8]
 80092a2:	68f9      	ldr	r1, [r7, #12]
 80092a4:	4806      	ldr	r0, [pc, #24]	@ (80092c0 <BSP_SD_WriteBlocks+0x34>)
 80092a6:	f7fa fee6 	bl	8004076 <HAL_SD_WriteBlocks>
 80092aa:	4603      	mov	r3, r0
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d001      	beq.n	80092b4 <BSP_SD_WriteBlocks+0x28>
  {
    return MSD_ERROR;
 80092b0:	2301      	movs	r3, #1
 80092b2:	e000      	b.n	80092b6 <BSP_SD_WriteBlocks+0x2a>
  }
  else
  {
    return MSD_OK;
 80092b4:	2300      	movs	r3, #0
  }
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3710      	adds	r7, #16
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	bf00      	nop
 80092c0:	200009ec 	.word	0x200009ec

080092c4 <BSP_SD_MspInit>:
  * @param  hsd: SD handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SD_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b08c      	sub	sp, #48	@ 0x30
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_rx_handle;
  static DMA_HandleTypeDef dma_tx_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable SDIO clock */
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 80092ce:	4b6c      	ldr	r3, [pc, #432]	@ (8009480 <BSP_SD_MspInit+0x1bc>)
 80092d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092d2:	4a6b      	ldr	r2, [pc, #428]	@ (8009480 <BSP_SD_MspInit+0x1bc>)
 80092d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80092d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80092da:	4b69      	ldr	r3, [pc, #420]	@ (8009480 <BSP_SD_MspInit+0x1bc>)
 80092dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80092e2:	61bb      	str	r3, [r7, #24]
 80092e4:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable DMA2 clocks */
  __DMAx_TxRx_CLK_ENABLE();
 80092e6:	4b66      	ldr	r3, [pc, #408]	@ (8009480 <BSP_SD_MspInit+0x1bc>)
 80092e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092ea:	4a65      	ldr	r2, [pc, #404]	@ (8009480 <BSP_SD_MspInit+0x1bc>)
 80092ec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80092f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80092f2:	4b63      	ldr	r3, [pc, #396]	@ (8009480 <BSP_SD_MspInit+0x1bc>)
 80092f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80092fa:	617b      	str	r3, [r7, #20]
 80092fc:	697b      	ldr	r3, [r7, #20]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80092fe:	4b60      	ldr	r3, [pc, #384]	@ (8009480 <BSP_SD_MspInit+0x1bc>)
 8009300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009302:	4a5f      	ldr	r2, [pc, #380]	@ (8009480 <BSP_SD_MspInit+0x1bc>)
 8009304:	f043 0304 	orr.w	r3, r3, #4
 8009308:	6313      	str	r3, [r2, #48]	@ 0x30
 800930a:	4b5d      	ldr	r3, [pc, #372]	@ (8009480 <BSP_SD_MspInit+0x1bc>)
 800930c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800930e:	f003 0304 	and.w	r3, r3, #4
 8009312:	613b      	str	r3, [r7, #16]
 8009314:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009316:	4b5a      	ldr	r3, [pc, #360]	@ (8009480 <BSP_SD_MspInit+0x1bc>)
 8009318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800931a:	4a59      	ldr	r2, [pc, #356]	@ (8009480 <BSP_SD_MspInit+0x1bc>)
 800931c:	f043 0308 	orr.w	r3, r3, #8
 8009320:	6313      	str	r3, [r2, #48]	@ 0x30
 8009322:	4b57      	ldr	r3, [pc, #348]	@ (8009480 <BSP_SD_MspInit+0x1bc>)
 8009324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009326:	f003 0308 	and.w	r3, r3, #8
 800932a:	60fb      	str	r3, [r7, #12]
 800932c:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800932e:	2302      	movs	r3, #2
 8009330:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8009332:	2301      	movs	r3, #1
 8009334:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8009336:	2303      	movs	r3, #3
 8009338:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = GPIO_AF12_SDMMC1;
 800933a:	230c      	movs	r3, #12
 800933c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 800933e:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8009342:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8009344:	f107 031c 	add.w	r3, r7, #28
 8009348:	4619      	mov	r1, r3
 800934a:	484e      	ldr	r0, [pc, #312]	@ (8009484 <BSP_SD_MspInit+0x1c0>)
 800934c:	f7f8 fe1e 	bl	8001f8c <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin = GPIO_PIN_2;
 8009350:	2304      	movs	r3, #4
 8009352:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8009354:	f107 031c 	add.w	r3, r7, #28
 8009358:	4619      	mov	r1, r3
 800935a:	484b      	ldr	r0, [pc, #300]	@ (8009488 <BSP_SD_MspInit+0x1c4>)
 800935c:	f7f8 fe16 	bl	8001f8c <HAL_GPIO_Init>

  /* NVIC configuration for SDIO interrupts */
  HAL_NVIC_SetPriority(SDMMC1_IRQn, 0x0E, 0);
 8009360:	2200      	movs	r2, #0
 8009362:	210e      	movs	r1, #14
 8009364:	2031      	movs	r0, #49	@ 0x31
 8009366:	f7f8 f8a6 	bl	80014b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800936a:	2031      	movs	r0, #49	@ 0x31
 800936c:	f7f8 f8bf 	bl	80014ee <HAL_NVIC_EnableIRQ>
    
  /* Configure DMA Rx parameters */
  dma_rx_handle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 8009370:	4b46      	ldr	r3, [pc, #280]	@ (800948c <BSP_SD_MspInit+0x1c8>)
 8009372:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8009376:	605a      	str	r2, [r3, #4]
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8009378:	4b44      	ldr	r3, [pc, #272]	@ (800948c <BSP_SD_MspInit+0x1c8>)
 800937a:	2200      	movs	r2, #0
 800937c:	609a      	str	r2, [r3, #8]
  dma_rx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 800937e:	4b43      	ldr	r3, [pc, #268]	@ (800948c <BSP_SD_MspInit+0x1c8>)
 8009380:	2200      	movs	r2, #0
 8009382:	60da      	str	r2, [r3, #12]
  dma_rx_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8009384:	4b41      	ldr	r3, [pc, #260]	@ (800948c <BSP_SD_MspInit+0x1c8>)
 8009386:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800938a:	611a      	str	r2, [r3, #16]
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800938c:	4b3f      	ldr	r3, [pc, #252]	@ (800948c <BSP_SD_MspInit+0x1c8>)
 800938e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009392:	615a      	str	r2, [r3, #20]
  dma_rx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8009394:	4b3d      	ldr	r3, [pc, #244]	@ (800948c <BSP_SD_MspInit+0x1c8>)
 8009396:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800939a:	619a      	str	r2, [r3, #24]
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 800939c:	4b3b      	ldr	r3, [pc, #236]	@ (800948c <BSP_SD_MspInit+0x1c8>)
 800939e:	2220      	movs	r2, #32
 80093a0:	61da      	str	r2, [r3, #28]
  dma_rx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 80093a2:	4b3a      	ldr	r3, [pc, #232]	@ (800948c <BSP_SD_MspInit+0x1c8>)
 80093a4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80093a8:	621a      	str	r2, [r3, #32]
  dma_rx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 80093aa:	4b38      	ldr	r3, [pc, #224]	@ (800948c <BSP_SD_MspInit+0x1c8>)
 80093ac:	2204      	movs	r2, #4
 80093ae:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_rx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80093b0:	4b36      	ldr	r3, [pc, #216]	@ (800948c <BSP_SD_MspInit+0x1c8>)
 80093b2:	2203      	movs	r2, #3
 80093b4:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_rx_handle.Init.MemBurst            = DMA_MBURST_INC4;
 80093b6:	4b35      	ldr	r3, [pc, #212]	@ (800948c <BSP_SD_MspInit+0x1c8>)
 80093b8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80093bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 80093be:	4b33      	ldr	r3, [pc, #204]	@ (800948c <BSP_SD_MspInit+0x1c8>)
 80093c0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80093c4:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 80093c6:	4b31      	ldr	r3, [pc, #196]	@ (800948c <BSP_SD_MspInit+0x1c8>)
 80093c8:	4a31      	ldr	r2, [pc, #196]	@ (8009490 <BSP_SD_MspInit+0x1cc>)
 80093ca:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	4a2f      	ldr	r2, [pc, #188]	@ (800948c <BSP_SD_MspInit+0x1c8>)
 80093d0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80093d2:	4a2e      	ldr	r2, [pc, #184]	@ (800948c <BSP_SD_MspInit+0x1c8>)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_rx_handle);
 80093d8:	482c      	ldr	r0, [pc, #176]	@ (800948c <BSP_SD_MspInit+0x1c8>)
 80093da:	f7f8 fa3b 	bl	8001854 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_rx_handle);
 80093de:	482b      	ldr	r0, [pc, #172]	@ (800948c <BSP_SD_MspInit+0x1c8>)
 80093e0:	f7f8 f98a 	bl	80016f8 <HAL_DMA_Init>
  
  /* Configure DMA Tx parameters */
  dma_tx_handle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
 80093e4:	4b2b      	ldr	r3, [pc, #172]	@ (8009494 <BSP_SD_MspInit+0x1d0>)
 80093e6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80093ea:	605a      	str	r2, [r3, #4]
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80093ec:	4b29      	ldr	r3, [pc, #164]	@ (8009494 <BSP_SD_MspInit+0x1d0>)
 80093ee:	2240      	movs	r2, #64	@ 0x40
 80093f0:	609a      	str	r2, [r3, #8]
  dma_tx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 80093f2:	4b28      	ldr	r3, [pc, #160]	@ (8009494 <BSP_SD_MspInit+0x1d0>)
 80093f4:	2200      	movs	r2, #0
 80093f6:	60da      	str	r2, [r3, #12]
  dma_tx_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80093f8:	4b26      	ldr	r3, [pc, #152]	@ (8009494 <BSP_SD_MspInit+0x1d0>)
 80093fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80093fe:	611a      	str	r2, [r3, #16]
  dma_tx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8009400:	4b24      	ldr	r3, [pc, #144]	@ (8009494 <BSP_SD_MspInit+0x1d0>)
 8009402:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009406:	615a      	str	r2, [r3, #20]
  dma_tx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8009408:	4b22      	ldr	r3, [pc, #136]	@ (8009494 <BSP_SD_MspInit+0x1d0>)
 800940a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800940e:	619a      	str	r2, [r3, #24]
  dma_tx_handle.Init.Mode                = DMA_PFCTRL;
 8009410:	4b20      	ldr	r3, [pc, #128]	@ (8009494 <BSP_SD_MspInit+0x1d0>)
 8009412:	2220      	movs	r2, #32
 8009414:	61da      	str	r2, [r3, #28]
  dma_tx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8009416:	4b1f      	ldr	r3, [pc, #124]	@ (8009494 <BSP_SD_MspInit+0x1d0>)
 8009418:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800941c:	621a      	str	r2, [r3, #32]
  dma_tx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 800941e:	4b1d      	ldr	r3, [pc, #116]	@ (8009494 <BSP_SD_MspInit+0x1d0>)
 8009420:	2204      	movs	r2, #4
 8009422:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_tx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8009424:	4b1b      	ldr	r3, [pc, #108]	@ (8009494 <BSP_SD_MspInit+0x1d0>)
 8009426:	2203      	movs	r2, #3
 8009428:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_tx_handle.Init.MemBurst            = DMA_MBURST_INC4;
 800942a:	4b1a      	ldr	r3, [pc, #104]	@ (8009494 <BSP_SD_MspInit+0x1d0>)
 800942c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8009430:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_tx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8009432:	4b18      	ldr	r3, [pc, #96]	@ (8009494 <BSP_SD_MspInit+0x1d0>)
 8009434:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8009438:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
 800943a:	4b16      	ldr	r3, [pc, #88]	@ (8009494 <BSP_SD_MspInit+0x1d0>)
 800943c:	4a16      	ldr	r2, [pc, #88]	@ (8009498 <BSP_SD_MspInit+0x1d4>)
 800943e:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, dma_tx_handle);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4a14      	ldr	r2, [pc, #80]	@ (8009494 <BSP_SD_MspInit+0x1d0>)
 8009444:	641a      	str	r2, [r3, #64]	@ 0x40
 8009446:	4a13      	ldr	r2, [pc, #76]	@ (8009494 <BSP_SD_MspInit+0x1d0>)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_tx_handle);
 800944c:	4811      	ldr	r0, [pc, #68]	@ (8009494 <BSP_SD_MspInit+0x1d0>)
 800944e:	f7f8 fa01 	bl	8001854 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_tx_handle); 
 8009452:	4810      	ldr	r0, [pc, #64]	@ (8009494 <BSP_SD_MspInit+0x1d0>)
 8009454:	f7f8 f950 	bl	80016f8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Rx_IRQn, 0x0F, 0);
 8009458:	2200      	movs	r2, #0
 800945a:	210f      	movs	r1, #15
 800945c:	203b      	movs	r0, #59	@ 0x3b
 800945e:	f7f8 f82a 	bl	80014b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Rx_IRQn);
 8009462:	203b      	movs	r0, #59	@ 0x3b
 8009464:	f7f8 f843 	bl	80014ee <HAL_NVIC_EnableIRQ>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Tx_IRQn, 0x0F, 0);
 8009468:	2200      	movs	r2, #0
 800946a:	210f      	movs	r1, #15
 800946c:	2045      	movs	r0, #69	@ 0x45
 800946e:	f7f8 f822 	bl	80014b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Tx_IRQn);
 8009472:	2045      	movs	r0, #69	@ 0x45
 8009474:	f7f8 f83b 	bl	80014ee <HAL_NVIC_EnableIRQ>
}
 8009478:	bf00      	nop
 800947a:	3730      	adds	r7, #48	@ 0x30
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}
 8009480:	40023800 	.word	0x40023800
 8009484:	40020800 	.word	0x40020800
 8009488:	40020c00 	.word	0x40020c00
 800948c:	20000a70 	.word	0x20000a70
 8009490:	40026458 	.word	0x40026458
 8009494:	20000ad0 	.word	0x20000ad0
 8009498:	400264a0 	.word	0x400264a0

0800949c <BSP_SD_Detect_MspInit>:
  * @param  hsd: SD handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SD_Detect_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b088      	sub	sp, #32
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef  gpio_init_structure;

  SD_DETECT_GPIO_CLK_ENABLE();
 80094a6:	4b0f      	ldr	r3, [pc, #60]	@ (80094e4 <BSP_SD_Detect_MspInit+0x48>)
 80094a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094aa:	4a0e      	ldr	r2, [pc, #56]	@ (80094e4 <BSP_SD_Detect_MspInit+0x48>)
 80094ac:	f043 0304 	orr.w	r3, r3, #4
 80094b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80094b2:	4b0c      	ldr	r3, [pc, #48]	@ (80094e4 <BSP_SD_Detect_MspInit+0x48>)
 80094b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094b6:	f003 0304 	and.w	r3, r3, #4
 80094ba:	60bb      	str	r3, [r7, #8]
 80094bc:	68bb      	ldr	r3, [r7, #8]

  /* GPIO configuration in input for uSD_Detect signal */
  gpio_init_structure.Pin       = SD_DETECT_PIN;
 80094be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80094c2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 80094c4:	2300      	movs	r3, #0
 80094c6:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80094c8:	2301      	movs	r3, #1
 80094ca:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80094cc:	2303      	movs	r3, #3
 80094ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 80094d0:	f107 030c 	add.w	r3, r7, #12
 80094d4:	4619      	mov	r1, r3
 80094d6:	4804      	ldr	r0, [pc, #16]	@ (80094e8 <BSP_SD_Detect_MspInit+0x4c>)
 80094d8:	f7f8 fd58 	bl	8001f8c <HAL_GPIO_Init>
}
 80094dc:	bf00      	nop
 80094de:	3720      	adds	r7, #32
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}
 80094e4:	40023800 	.word	0x40023800
 80094e8:	40020800 	.word	0x40020800

080094ec <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	af00      	add	r7, sp, #0
  return((HAL_SD_GetCardState(&uSdHandle) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80094f0:	4805      	ldr	r0, [pc, #20]	@ (8009508 <BSP_SD_GetCardState+0x1c>)
 80094f2:	f7fb f9f7 	bl	80048e4 <HAL_SD_GetCardState>
 80094f6:	4603      	mov	r3, r0
 80094f8:	2b04      	cmp	r3, #4
 80094fa:	bf14      	ite	ne
 80094fc:	2301      	movne	r3, #1
 80094fe:	2300      	moveq	r3, #0
 8009500:	b2db      	uxtb	r3, r3
}
 8009502:	4618      	mov	r0, r3
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop
 8009508:	200009ec 	.word	0x200009ec

0800950c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b082      	sub	sp, #8
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&uSdHandle, CardInfo);
 8009514:	6879      	ldr	r1, [r7, #4]
 8009516:	4803      	ldr	r0, [pc, #12]	@ (8009524 <BSP_SD_GetCardInfo+0x18>)
 8009518:	f7fb f93c 	bl	8004794 <HAL_SD_GetCardInfo>
}
 800951c:	bf00      	nop
 800951e:	3708      	adds	r7, #8
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}
 8009524:	200009ec 	.word	0x200009ec

08009528 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8009528:	b580      	push	{r7, lr}
 800952a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800952c:	4b29      	ldr	r3, [pc, #164]	@ (80095d4 <BSP_SDRAM_Init+0xac>)
 800952e:	4a2a      	ldr	r2, [pc, #168]	@ (80095d8 <BSP_SDRAM_Init+0xb0>)
 8009530:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8009532:	4b2a      	ldr	r3, [pc, #168]	@ (80095dc <BSP_SDRAM_Init+0xb4>)
 8009534:	2202      	movs	r2, #2
 8009536:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8009538:	4b28      	ldr	r3, [pc, #160]	@ (80095dc <BSP_SDRAM_Init+0xb4>)
 800953a:	2207      	movs	r2, #7
 800953c:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 800953e:	4b27      	ldr	r3, [pc, #156]	@ (80095dc <BSP_SDRAM_Init+0xb4>)
 8009540:	2204      	movs	r2, #4
 8009542:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8009544:	4b25      	ldr	r3, [pc, #148]	@ (80095dc <BSP_SDRAM_Init+0xb4>)
 8009546:	2207      	movs	r2, #7
 8009548:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800954a:	4b24      	ldr	r3, [pc, #144]	@ (80095dc <BSP_SDRAM_Init+0xb4>)
 800954c:	2202      	movs	r2, #2
 800954e:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8009550:	4b22      	ldr	r3, [pc, #136]	@ (80095dc <BSP_SDRAM_Init+0xb4>)
 8009552:	2202      	movs	r2, #2
 8009554:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8009556:	4b21      	ldr	r3, [pc, #132]	@ (80095dc <BSP_SDRAM_Init+0xb4>)
 8009558:	2202      	movs	r2, #2
 800955a:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 800955c:	4b1d      	ldr	r3, [pc, #116]	@ (80095d4 <BSP_SDRAM_Init+0xac>)
 800955e:	2200      	movs	r2, #0
 8009560:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8009562:	4b1c      	ldr	r3, [pc, #112]	@ (80095d4 <BSP_SDRAM_Init+0xac>)
 8009564:	2200      	movs	r2, #0
 8009566:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8009568:	4b1a      	ldr	r3, [pc, #104]	@ (80095d4 <BSP_SDRAM_Init+0xac>)
 800956a:	2204      	movs	r2, #4
 800956c:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800956e:	4b19      	ldr	r3, [pc, #100]	@ (80095d4 <BSP_SDRAM_Init+0xac>)
 8009570:	2210      	movs	r2, #16
 8009572:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8009574:	4b17      	ldr	r3, [pc, #92]	@ (80095d4 <BSP_SDRAM_Init+0xac>)
 8009576:	2240      	movs	r2, #64	@ 0x40
 8009578:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800957a:	4b16      	ldr	r3, [pc, #88]	@ (80095d4 <BSP_SDRAM_Init+0xac>)
 800957c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009580:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8009582:	4b14      	ldr	r3, [pc, #80]	@ (80095d4 <BSP_SDRAM_Init+0xac>)
 8009584:	2200      	movs	r2, #0
 8009586:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8009588:	4b12      	ldr	r3, [pc, #72]	@ (80095d4 <BSP_SDRAM_Init+0xac>)
 800958a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800958e:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8009590:	4b10      	ldr	r3, [pc, #64]	@ (80095d4 <BSP_SDRAM_Init+0xac>)
 8009592:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009596:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8009598:	4b0e      	ldr	r3, [pc, #56]	@ (80095d4 <BSP_SDRAM_Init+0xac>)
 800959a:	2200      	movs	r2, #0
 800959c:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800959e:	2100      	movs	r1, #0
 80095a0:	480c      	ldr	r0, [pc, #48]	@ (80095d4 <BSP_SDRAM_Init+0xac>)
 80095a2:	f000 f87f 	bl	80096a4 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80095a6:	490d      	ldr	r1, [pc, #52]	@ (80095dc <BSP_SDRAM_Init+0xb4>)
 80095a8:	480a      	ldr	r0, [pc, #40]	@ (80095d4 <BSP_SDRAM_Init+0xac>)
 80095aa:	f7fb fcbf 	bl	8004f2c <HAL_SDRAM_Init>
 80095ae:	4603      	mov	r3, r0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d003      	beq.n	80095bc <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80095b4:	4b0a      	ldr	r3, [pc, #40]	@ (80095e0 <BSP_SDRAM_Init+0xb8>)
 80095b6:	2201      	movs	r2, #1
 80095b8:	701a      	strb	r2, [r3, #0]
 80095ba:	e002      	b.n	80095c2 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80095bc:	4b08      	ldr	r3, [pc, #32]	@ (80095e0 <BSP_SDRAM_Init+0xb8>)
 80095be:	2200      	movs	r2, #0
 80095c0:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80095c2:	f240 6003 	movw	r0, #1539	@ 0x603
 80095c6:	f000 f80d 	bl	80095e4 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80095ca:	4b05      	ldr	r3, [pc, #20]	@ (80095e0 <BSP_SDRAM_Init+0xb8>)
 80095cc:	781b      	ldrb	r3, [r3, #0]
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	20000b30 	.word	0x20000b30
 80095d8:	a0000140 	.word	0xa0000140
 80095dc:	20000b64 	.word	0x20000b64
 80095e0:	20000024 	.word	0x20000024

080095e4 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80095ec:	2300      	movs	r3, #0
 80095ee:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80095f0:	4b2a      	ldr	r3, [pc, #168]	@ (800969c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80095f2:	2201      	movs	r2, #1
 80095f4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80095f6:	4b29      	ldr	r3, [pc, #164]	@ (800969c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80095f8:	2210      	movs	r2, #16
 80095fa:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80095fc:	4b27      	ldr	r3, [pc, #156]	@ (800969c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80095fe:	2201      	movs	r2, #1
 8009600:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8009602:	4b26      	ldr	r3, [pc, #152]	@ (800969c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8009604:	2200      	movs	r2, #0
 8009606:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8009608:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800960c:	4923      	ldr	r1, [pc, #140]	@ (800969c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800960e:	4824      	ldr	r0, [pc, #144]	@ (80096a0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8009610:	f7fb fcca 	bl	8004fa8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8009614:	2001      	movs	r0, #1
 8009616:	f7f7 fe4f 	bl	80012b8 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800961a:	4b20      	ldr	r3, [pc, #128]	@ (800969c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800961c:	2202      	movs	r2, #2
 800961e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8009620:	4b1e      	ldr	r3, [pc, #120]	@ (800969c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8009622:	2210      	movs	r2, #16
 8009624:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8009626:	4b1d      	ldr	r3, [pc, #116]	@ (800969c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8009628:	2201      	movs	r2, #1
 800962a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800962c:	4b1b      	ldr	r3, [pc, #108]	@ (800969c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800962e:	2200      	movs	r2, #0
 8009630:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8009632:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009636:	4919      	ldr	r1, [pc, #100]	@ (800969c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8009638:	4819      	ldr	r0, [pc, #100]	@ (80096a0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800963a:	f7fb fcb5 	bl	8004fa8 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800963e:	4b17      	ldr	r3, [pc, #92]	@ (800969c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8009640:	2203      	movs	r2, #3
 8009642:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8009644:	4b15      	ldr	r3, [pc, #84]	@ (800969c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8009646:	2210      	movs	r2, #16
 8009648:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800964a:	4b14      	ldr	r3, [pc, #80]	@ (800969c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800964c:	2208      	movs	r2, #8
 800964e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8009650:	4b12      	ldr	r3, [pc, #72]	@ (800969c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8009652:	2200      	movs	r2, #0
 8009654:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8009656:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800965a:	4910      	ldr	r1, [pc, #64]	@ (800969c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800965c:	4810      	ldr	r0, [pc, #64]	@ (80096a0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800965e:	f7fb fca3 	bl	8004fa8 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8009662:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8009666:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8009668:	4b0c      	ldr	r3, [pc, #48]	@ (800969c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800966a:	2204      	movs	r2, #4
 800966c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800966e:	4b0b      	ldr	r3, [pc, #44]	@ (800969c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8009670:	2210      	movs	r2, #16
 8009672:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8009674:	4b09      	ldr	r3, [pc, #36]	@ (800969c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8009676:	2201      	movs	r2, #1
 8009678:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	4a07      	ldr	r2, [pc, #28]	@ (800969c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800967e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8009680:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009684:	4905      	ldr	r1, [pc, #20]	@ (800969c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8009686:	4806      	ldr	r0, [pc, #24]	@ (80096a0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8009688:	f7fb fc8e 	bl	8004fa8 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 800968c:	6879      	ldr	r1, [r7, #4]
 800968e:	4804      	ldr	r0, [pc, #16]	@ (80096a0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8009690:	f7fb fcb5 	bl	8004ffe <HAL_SDRAM_ProgramRefreshRate>
}
 8009694:	bf00      	nop
 8009696:	3710      	adds	r7, #16
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}
 800969c:	20000b80 	.word	0x20000b80
 80096a0:	20000b30 	.word	0x20000b30

080096a4 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b090      	sub	sp, #64	@ 0x40
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80096ae:	4b70      	ldr	r3, [pc, #448]	@ (8009870 <BSP_SDRAM_MspInit+0x1cc>)
 80096b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096b2:	4a6f      	ldr	r2, [pc, #444]	@ (8009870 <BSP_SDRAM_MspInit+0x1cc>)
 80096b4:	f043 0301 	orr.w	r3, r3, #1
 80096b8:	6393      	str	r3, [r2, #56]	@ 0x38
 80096ba:	4b6d      	ldr	r3, [pc, #436]	@ (8009870 <BSP_SDRAM_MspInit+0x1cc>)
 80096bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096be:	f003 0301 	and.w	r3, r3, #1
 80096c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80096c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80096c6:	4b6a      	ldr	r3, [pc, #424]	@ (8009870 <BSP_SDRAM_MspInit+0x1cc>)
 80096c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096ca:	4a69      	ldr	r2, [pc, #420]	@ (8009870 <BSP_SDRAM_MspInit+0x1cc>)
 80096cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80096d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80096d2:	4b67      	ldr	r3, [pc, #412]	@ (8009870 <BSP_SDRAM_MspInit+0x1cc>)
 80096d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80096da:	627b      	str	r3, [r7, #36]	@ 0x24
 80096dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80096de:	4b64      	ldr	r3, [pc, #400]	@ (8009870 <BSP_SDRAM_MspInit+0x1cc>)
 80096e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096e2:	4a63      	ldr	r2, [pc, #396]	@ (8009870 <BSP_SDRAM_MspInit+0x1cc>)
 80096e4:	f043 0304 	orr.w	r3, r3, #4
 80096e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80096ea:	4b61      	ldr	r3, [pc, #388]	@ (8009870 <BSP_SDRAM_MspInit+0x1cc>)
 80096ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096ee:	f003 0304 	and.w	r3, r3, #4
 80096f2:	623b      	str	r3, [r7, #32]
 80096f4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80096f6:	4b5e      	ldr	r3, [pc, #376]	@ (8009870 <BSP_SDRAM_MspInit+0x1cc>)
 80096f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096fa:	4a5d      	ldr	r2, [pc, #372]	@ (8009870 <BSP_SDRAM_MspInit+0x1cc>)
 80096fc:	f043 0308 	orr.w	r3, r3, #8
 8009700:	6313      	str	r3, [r2, #48]	@ 0x30
 8009702:	4b5b      	ldr	r3, [pc, #364]	@ (8009870 <BSP_SDRAM_MspInit+0x1cc>)
 8009704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009706:	f003 0308 	and.w	r3, r3, #8
 800970a:	61fb      	str	r3, [r7, #28]
 800970c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800970e:	4b58      	ldr	r3, [pc, #352]	@ (8009870 <BSP_SDRAM_MspInit+0x1cc>)
 8009710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009712:	4a57      	ldr	r2, [pc, #348]	@ (8009870 <BSP_SDRAM_MspInit+0x1cc>)
 8009714:	f043 0310 	orr.w	r3, r3, #16
 8009718:	6313      	str	r3, [r2, #48]	@ 0x30
 800971a:	4b55      	ldr	r3, [pc, #340]	@ (8009870 <BSP_SDRAM_MspInit+0x1cc>)
 800971c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800971e:	f003 0310 	and.w	r3, r3, #16
 8009722:	61bb      	str	r3, [r7, #24]
 8009724:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8009726:	4b52      	ldr	r3, [pc, #328]	@ (8009870 <BSP_SDRAM_MspInit+0x1cc>)
 8009728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800972a:	4a51      	ldr	r2, [pc, #324]	@ (8009870 <BSP_SDRAM_MspInit+0x1cc>)
 800972c:	f043 0320 	orr.w	r3, r3, #32
 8009730:	6313      	str	r3, [r2, #48]	@ 0x30
 8009732:	4b4f      	ldr	r3, [pc, #316]	@ (8009870 <BSP_SDRAM_MspInit+0x1cc>)
 8009734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009736:	f003 0320 	and.w	r3, r3, #32
 800973a:	617b      	str	r3, [r7, #20]
 800973c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800973e:	4b4c      	ldr	r3, [pc, #304]	@ (8009870 <BSP_SDRAM_MspInit+0x1cc>)
 8009740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009742:	4a4b      	ldr	r2, [pc, #300]	@ (8009870 <BSP_SDRAM_MspInit+0x1cc>)
 8009744:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009748:	6313      	str	r3, [r2, #48]	@ 0x30
 800974a:	4b49      	ldr	r3, [pc, #292]	@ (8009870 <BSP_SDRAM_MspInit+0x1cc>)
 800974c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800974e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009752:	613b      	str	r3, [r7, #16]
 8009754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009756:	4b46      	ldr	r3, [pc, #280]	@ (8009870 <BSP_SDRAM_MspInit+0x1cc>)
 8009758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800975a:	4a45      	ldr	r2, [pc, #276]	@ (8009870 <BSP_SDRAM_MspInit+0x1cc>)
 800975c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009760:	6313      	str	r3, [r2, #48]	@ 0x30
 8009762:	4b43      	ldr	r3, [pc, #268]	@ (8009870 <BSP_SDRAM_MspInit+0x1cc>)
 8009764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800976a:	60fb      	str	r3, [r7, #12]
 800976c:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800976e:	2302      	movs	r3, #2
 8009770:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8009772:	2301      	movs	r3, #1
 8009774:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8009776:	2302      	movs	r3, #2
 8009778:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800977a:	230c      	movs	r3, #12
 800977c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800977e:	2308      	movs	r3, #8
 8009780:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8009782:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009786:	4619      	mov	r1, r3
 8009788:	483a      	ldr	r0, [pc, #232]	@ (8009874 <BSP_SDRAM_MspInit+0x1d0>)
 800978a:	f7f8 fbff 	bl	8001f8c <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800978e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8009792:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8009794:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009798:	4619      	mov	r1, r3
 800979a:	4837      	ldr	r0, [pc, #220]	@ (8009878 <BSP_SDRAM_MspInit+0x1d4>)
 800979c:	f7f8 fbf6 	bl	8001f8c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80097a0:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80097a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80097a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80097aa:	4619      	mov	r1, r3
 80097ac:	4833      	ldr	r0, [pc, #204]	@ (800987c <BSP_SDRAM_MspInit+0x1d8>)
 80097ae:	f7f8 fbed 	bl	8001f8c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80097b2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80097b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80097b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80097bc:	4619      	mov	r1, r3
 80097be:	4830      	ldr	r0, [pc, #192]	@ (8009880 <BSP_SDRAM_MspInit+0x1dc>)
 80097c0:	f7f8 fbe4 	bl	8001f8c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80097c4:	f248 1333 	movw	r3, #33075	@ 0x8133
 80097c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80097ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80097ce:	4619      	mov	r1, r3
 80097d0:	482c      	ldr	r0, [pc, #176]	@ (8009884 <BSP_SDRAM_MspInit+0x1e0>)
 80097d2:	f7f8 fbdb 	bl	8001f8c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80097d6:	2328      	movs	r3, #40	@ 0x28
 80097d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80097da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80097de:	4619      	mov	r1, r3
 80097e0:	4829      	ldr	r0, [pc, #164]	@ (8009888 <BSP_SDRAM_MspInit+0x1e4>)
 80097e2:	f7f8 fbd3 	bl	8001f8c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80097e6:	4b29      	ldr	r3, [pc, #164]	@ (800988c <BSP_SDRAM_MspInit+0x1e8>)
 80097e8:	2200      	movs	r2, #0
 80097ea:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80097ec:	4b27      	ldr	r3, [pc, #156]	@ (800988c <BSP_SDRAM_MspInit+0x1e8>)
 80097ee:	2280      	movs	r2, #128	@ 0x80
 80097f0:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80097f2:	4b26      	ldr	r3, [pc, #152]	@ (800988c <BSP_SDRAM_MspInit+0x1e8>)
 80097f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80097f8:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80097fa:	4b24      	ldr	r3, [pc, #144]	@ (800988c <BSP_SDRAM_MspInit+0x1e8>)
 80097fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009800:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8009802:	4b22      	ldr	r3, [pc, #136]	@ (800988c <BSP_SDRAM_MspInit+0x1e8>)
 8009804:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009808:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800980a:	4b20      	ldr	r3, [pc, #128]	@ (800988c <BSP_SDRAM_MspInit+0x1e8>)
 800980c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8009810:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8009812:	4b1e      	ldr	r3, [pc, #120]	@ (800988c <BSP_SDRAM_MspInit+0x1e8>)
 8009814:	2200      	movs	r2, #0
 8009816:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8009818:	4b1c      	ldr	r3, [pc, #112]	@ (800988c <BSP_SDRAM_MspInit+0x1e8>)
 800981a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800981e:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8009820:	4b1a      	ldr	r3, [pc, #104]	@ (800988c <BSP_SDRAM_MspInit+0x1e8>)
 8009822:	2200      	movs	r2, #0
 8009824:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8009826:	4b19      	ldr	r3, [pc, #100]	@ (800988c <BSP_SDRAM_MspInit+0x1e8>)
 8009828:	2203      	movs	r2, #3
 800982a:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800982c:	4b17      	ldr	r3, [pc, #92]	@ (800988c <BSP_SDRAM_MspInit+0x1e8>)
 800982e:	2200      	movs	r2, #0
 8009830:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8009832:	4b16      	ldr	r3, [pc, #88]	@ (800988c <BSP_SDRAM_MspInit+0x1e8>)
 8009834:	2200      	movs	r2, #0
 8009836:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8009838:	4b14      	ldr	r3, [pc, #80]	@ (800988c <BSP_SDRAM_MspInit+0x1e8>)
 800983a:	4a15      	ldr	r2, [pc, #84]	@ (8009890 <BSP_SDRAM_MspInit+0x1ec>)
 800983c:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	4a12      	ldr	r2, [pc, #72]	@ (800988c <BSP_SDRAM_MspInit+0x1e8>)
 8009842:	631a      	str	r2, [r3, #48]	@ 0x30
 8009844:	4a11      	ldr	r2, [pc, #68]	@ (800988c <BSP_SDRAM_MspInit+0x1e8>)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800984a:	4810      	ldr	r0, [pc, #64]	@ (800988c <BSP_SDRAM_MspInit+0x1e8>)
 800984c:	f7f8 f802 	bl	8001854 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8009850:	480e      	ldr	r0, [pc, #56]	@ (800988c <BSP_SDRAM_MspInit+0x1e8>)
 8009852:	f7f7 ff51 	bl	80016f8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8009856:	2200      	movs	r2, #0
 8009858:	210f      	movs	r1, #15
 800985a:	2038      	movs	r0, #56	@ 0x38
 800985c:	f7f7 fe2b 	bl	80014b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8009860:	2038      	movs	r0, #56	@ 0x38
 8009862:	f7f7 fe44 	bl	80014ee <HAL_NVIC_EnableIRQ>
}
 8009866:	bf00      	nop
 8009868:	3740      	adds	r7, #64	@ 0x40
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}
 800986e:	bf00      	nop
 8009870:	40023800 	.word	0x40023800
 8009874:	40020800 	.word	0x40020800
 8009878:	40020c00 	.word	0x40020c00
 800987c:	40021000 	.word	0x40021000
 8009880:	40021400 	.word	0x40021400
 8009884:	40021800 	.word	0x40021800
 8009888:	40021c00 	.word	0x40021c00
 800988c:	20000b90 	.word	0x20000b90
 8009890:	40026410 	.word	0x40026410

08009894 <malloc>:
 8009894:	4b02      	ldr	r3, [pc, #8]	@ (80098a0 <malloc+0xc>)
 8009896:	4601      	mov	r1, r0
 8009898:	6818      	ldr	r0, [r3, #0]
 800989a:	f000 b82d 	b.w	80098f8 <_malloc_r>
 800989e:	bf00      	nop
 80098a0:	20000028 	.word	0x20000028

080098a4 <free>:
 80098a4:	4b02      	ldr	r3, [pc, #8]	@ (80098b0 <free+0xc>)
 80098a6:	4601      	mov	r1, r0
 80098a8:	6818      	ldr	r0, [r3, #0]
 80098aa:	f000 b915 	b.w	8009ad8 <_free_r>
 80098ae:	bf00      	nop
 80098b0:	20000028 	.word	0x20000028

080098b4 <sbrk_aligned>:
 80098b4:	b570      	push	{r4, r5, r6, lr}
 80098b6:	4e0f      	ldr	r6, [pc, #60]	@ (80098f4 <sbrk_aligned+0x40>)
 80098b8:	460c      	mov	r4, r1
 80098ba:	6831      	ldr	r1, [r6, #0]
 80098bc:	4605      	mov	r5, r0
 80098be:	b911      	cbnz	r1, 80098c6 <sbrk_aligned+0x12>
 80098c0:	f000 f8ce 	bl	8009a60 <_sbrk_r>
 80098c4:	6030      	str	r0, [r6, #0]
 80098c6:	4621      	mov	r1, r4
 80098c8:	4628      	mov	r0, r5
 80098ca:	f000 f8c9 	bl	8009a60 <_sbrk_r>
 80098ce:	1c43      	adds	r3, r0, #1
 80098d0:	d103      	bne.n	80098da <sbrk_aligned+0x26>
 80098d2:	f04f 34ff 	mov.w	r4, #4294967295
 80098d6:	4620      	mov	r0, r4
 80098d8:	bd70      	pop	{r4, r5, r6, pc}
 80098da:	1cc4      	adds	r4, r0, #3
 80098dc:	f024 0403 	bic.w	r4, r4, #3
 80098e0:	42a0      	cmp	r0, r4
 80098e2:	d0f8      	beq.n	80098d6 <sbrk_aligned+0x22>
 80098e4:	1a21      	subs	r1, r4, r0
 80098e6:	4628      	mov	r0, r5
 80098e8:	f000 f8ba 	bl	8009a60 <_sbrk_r>
 80098ec:	3001      	adds	r0, #1
 80098ee:	d1f2      	bne.n	80098d6 <sbrk_aligned+0x22>
 80098f0:	e7ef      	b.n	80098d2 <sbrk_aligned+0x1e>
 80098f2:	bf00      	nop
 80098f4:	20000bf0 	.word	0x20000bf0

080098f8 <_malloc_r>:
 80098f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098fc:	1ccd      	adds	r5, r1, #3
 80098fe:	f025 0503 	bic.w	r5, r5, #3
 8009902:	3508      	adds	r5, #8
 8009904:	2d0c      	cmp	r5, #12
 8009906:	bf38      	it	cc
 8009908:	250c      	movcc	r5, #12
 800990a:	2d00      	cmp	r5, #0
 800990c:	4606      	mov	r6, r0
 800990e:	db01      	blt.n	8009914 <_malloc_r+0x1c>
 8009910:	42a9      	cmp	r1, r5
 8009912:	d904      	bls.n	800991e <_malloc_r+0x26>
 8009914:	230c      	movs	r3, #12
 8009916:	6033      	str	r3, [r6, #0]
 8009918:	2000      	movs	r0, #0
 800991a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800991e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80099f4 <_malloc_r+0xfc>
 8009922:	f000 f869 	bl	80099f8 <__malloc_lock>
 8009926:	f8d8 3000 	ldr.w	r3, [r8]
 800992a:	461c      	mov	r4, r3
 800992c:	bb44      	cbnz	r4, 8009980 <_malloc_r+0x88>
 800992e:	4629      	mov	r1, r5
 8009930:	4630      	mov	r0, r6
 8009932:	f7ff ffbf 	bl	80098b4 <sbrk_aligned>
 8009936:	1c43      	adds	r3, r0, #1
 8009938:	4604      	mov	r4, r0
 800993a:	d158      	bne.n	80099ee <_malloc_r+0xf6>
 800993c:	f8d8 4000 	ldr.w	r4, [r8]
 8009940:	4627      	mov	r7, r4
 8009942:	2f00      	cmp	r7, #0
 8009944:	d143      	bne.n	80099ce <_malloc_r+0xd6>
 8009946:	2c00      	cmp	r4, #0
 8009948:	d04b      	beq.n	80099e2 <_malloc_r+0xea>
 800994a:	6823      	ldr	r3, [r4, #0]
 800994c:	4639      	mov	r1, r7
 800994e:	4630      	mov	r0, r6
 8009950:	eb04 0903 	add.w	r9, r4, r3
 8009954:	f000 f884 	bl	8009a60 <_sbrk_r>
 8009958:	4581      	cmp	r9, r0
 800995a:	d142      	bne.n	80099e2 <_malloc_r+0xea>
 800995c:	6821      	ldr	r1, [r4, #0]
 800995e:	1a6d      	subs	r5, r5, r1
 8009960:	4629      	mov	r1, r5
 8009962:	4630      	mov	r0, r6
 8009964:	f7ff ffa6 	bl	80098b4 <sbrk_aligned>
 8009968:	3001      	adds	r0, #1
 800996a:	d03a      	beq.n	80099e2 <_malloc_r+0xea>
 800996c:	6823      	ldr	r3, [r4, #0]
 800996e:	442b      	add	r3, r5
 8009970:	6023      	str	r3, [r4, #0]
 8009972:	f8d8 3000 	ldr.w	r3, [r8]
 8009976:	685a      	ldr	r2, [r3, #4]
 8009978:	bb62      	cbnz	r2, 80099d4 <_malloc_r+0xdc>
 800997a:	f8c8 7000 	str.w	r7, [r8]
 800997e:	e00f      	b.n	80099a0 <_malloc_r+0xa8>
 8009980:	6822      	ldr	r2, [r4, #0]
 8009982:	1b52      	subs	r2, r2, r5
 8009984:	d420      	bmi.n	80099c8 <_malloc_r+0xd0>
 8009986:	2a0b      	cmp	r2, #11
 8009988:	d917      	bls.n	80099ba <_malloc_r+0xc2>
 800998a:	1961      	adds	r1, r4, r5
 800998c:	42a3      	cmp	r3, r4
 800998e:	6025      	str	r5, [r4, #0]
 8009990:	bf18      	it	ne
 8009992:	6059      	strne	r1, [r3, #4]
 8009994:	6863      	ldr	r3, [r4, #4]
 8009996:	bf08      	it	eq
 8009998:	f8c8 1000 	streq.w	r1, [r8]
 800999c:	5162      	str	r2, [r4, r5]
 800999e:	604b      	str	r3, [r1, #4]
 80099a0:	4630      	mov	r0, r6
 80099a2:	f000 f82f 	bl	8009a04 <__malloc_unlock>
 80099a6:	f104 000b 	add.w	r0, r4, #11
 80099aa:	1d23      	adds	r3, r4, #4
 80099ac:	f020 0007 	bic.w	r0, r0, #7
 80099b0:	1ac2      	subs	r2, r0, r3
 80099b2:	bf1c      	itt	ne
 80099b4:	1a1b      	subne	r3, r3, r0
 80099b6:	50a3      	strne	r3, [r4, r2]
 80099b8:	e7af      	b.n	800991a <_malloc_r+0x22>
 80099ba:	6862      	ldr	r2, [r4, #4]
 80099bc:	42a3      	cmp	r3, r4
 80099be:	bf0c      	ite	eq
 80099c0:	f8c8 2000 	streq.w	r2, [r8]
 80099c4:	605a      	strne	r2, [r3, #4]
 80099c6:	e7eb      	b.n	80099a0 <_malloc_r+0xa8>
 80099c8:	4623      	mov	r3, r4
 80099ca:	6864      	ldr	r4, [r4, #4]
 80099cc:	e7ae      	b.n	800992c <_malloc_r+0x34>
 80099ce:	463c      	mov	r4, r7
 80099d0:	687f      	ldr	r7, [r7, #4]
 80099d2:	e7b6      	b.n	8009942 <_malloc_r+0x4a>
 80099d4:	461a      	mov	r2, r3
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	42a3      	cmp	r3, r4
 80099da:	d1fb      	bne.n	80099d4 <_malloc_r+0xdc>
 80099dc:	2300      	movs	r3, #0
 80099de:	6053      	str	r3, [r2, #4]
 80099e0:	e7de      	b.n	80099a0 <_malloc_r+0xa8>
 80099e2:	230c      	movs	r3, #12
 80099e4:	6033      	str	r3, [r6, #0]
 80099e6:	4630      	mov	r0, r6
 80099e8:	f000 f80c 	bl	8009a04 <__malloc_unlock>
 80099ec:	e794      	b.n	8009918 <_malloc_r+0x20>
 80099ee:	6005      	str	r5, [r0, #0]
 80099f0:	e7d6      	b.n	80099a0 <_malloc_r+0xa8>
 80099f2:	bf00      	nop
 80099f4:	20000bf4 	.word	0x20000bf4

080099f8 <__malloc_lock>:
 80099f8:	4801      	ldr	r0, [pc, #4]	@ (8009a00 <__malloc_lock+0x8>)
 80099fa:	f000 b86b 	b.w	8009ad4 <__retarget_lock_acquire_recursive>
 80099fe:	bf00      	nop
 8009a00:	20000d34 	.word	0x20000d34

08009a04 <__malloc_unlock>:
 8009a04:	4801      	ldr	r0, [pc, #4]	@ (8009a0c <__malloc_unlock+0x8>)
 8009a06:	f000 b866 	b.w	8009ad6 <__retarget_lock_release_recursive>
 8009a0a:	bf00      	nop
 8009a0c:	20000d34 	.word	0x20000d34

08009a10 <siprintf>:
 8009a10:	b40e      	push	{r1, r2, r3}
 8009a12:	b500      	push	{lr}
 8009a14:	b09c      	sub	sp, #112	@ 0x70
 8009a16:	ab1d      	add	r3, sp, #116	@ 0x74
 8009a18:	9002      	str	r0, [sp, #8]
 8009a1a:	9006      	str	r0, [sp, #24]
 8009a1c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009a20:	4809      	ldr	r0, [pc, #36]	@ (8009a48 <siprintf+0x38>)
 8009a22:	9107      	str	r1, [sp, #28]
 8009a24:	9104      	str	r1, [sp, #16]
 8009a26:	4909      	ldr	r1, [pc, #36]	@ (8009a4c <siprintf+0x3c>)
 8009a28:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a2c:	9105      	str	r1, [sp, #20]
 8009a2e:	6800      	ldr	r0, [r0, #0]
 8009a30:	9301      	str	r3, [sp, #4]
 8009a32:	a902      	add	r1, sp, #8
 8009a34:	f000 f8f6 	bl	8009c24 <_svfiprintf_r>
 8009a38:	9b02      	ldr	r3, [sp, #8]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	701a      	strb	r2, [r3, #0]
 8009a3e:	b01c      	add	sp, #112	@ 0x70
 8009a40:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a44:	b003      	add	sp, #12
 8009a46:	4770      	bx	lr
 8009a48:	20000028 	.word	0x20000028
 8009a4c:	ffff0208 	.word	0xffff0208

08009a50 <memset>:
 8009a50:	4402      	add	r2, r0
 8009a52:	4603      	mov	r3, r0
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d100      	bne.n	8009a5a <memset+0xa>
 8009a58:	4770      	bx	lr
 8009a5a:	f803 1b01 	strb.w	r1, [r3], #1
 8009a5e:	e7f9      	b.n	8009a54 <memset+0x4>

08009a60 <_sbrk_r>:
 8009a60:	b538      	push	{r3, r4, r5, lr}
 8009a62:	4d06      	ldr	r5, [pc, #24]	@ (8009a7c <_sbrk_r+0x1c>)
 8009a64:	2300      	movs	r3, #0
 8009a66:	4604      	mov	r4, r0
 8009a68:	4608      	mov	r0, r1
 8009a6a:	602b      	str	r3, [r5, #0]
 8009a6c:	f7f7 fb56 	bl	800111c <_sbrk>
 8009a70:	1c43      	adds	r3, r0, #1
 8009a72:	d102      	bne.n	8009a7a <_sbrk_r+0x1a>
 8009a74:	682b      	ldr	r3, [r5, #0]
 8009a76:	b103      	cbz	r3, 8009a7a <_sbrk_r+0x1a>
 8009a78:	6023      	str	r3, [r4, #0]
 8009a7a:	bd38      	pop	{r3, r4, r5, pc}
 8009a7c:	20000d30 	.word	0x20000d30

08009a80 <__errno>:
 8009a80:	4b01      	ldr	r3, [pc, #4]	@ (8009a88 <__errno+0x8>)
 8009a82:	6818      	ldr	r0, [r3, #0]
 8009a84:	4770      	bx	lr
 8009a86:	bf00      	nop
 8009a88:	20000028 	.word	0x20000028

08009a8c <__libc_init_array>:
 8009a8c:	b570      	push	{r4, r5, r6, lr}
 8009a8e:	4d0d      	ldr	r5, [pc, #52]	@ (8009ac4 <__libc_init_array+0x38>)
 8009a90:	4c0d      	ldr	r4, [pc, #52]	@ (8009ac8 <__libc_init_array+0x3c>)
 8009a92:	1b64      	subs	r4, r4, r5
 8009a94:	10a4      	asrs	r4, r4, #2
 8009a96:	2600      	movs	r6, #0
 8009a98:	42a6      	cmp	r6, r4
 8009a9a:	d109      	bne.n	8009ab0 <__libc_init_array+0x24>
 8009a9c:	4d0b      	ldr	r5, [pc, #44]	@ (8009acc <__libc_init_array+0x40>)
 8009a9e:	4c0c      	ldr	r4, [pc, #48]	@ (8009ad0 <__libc_init_array+0x44>)
 8009aa0:	f000 fba8 	bl	800a1f4 <_init>
 8009aa4:	1b64      	subs	r4, r4, r5
 8009aa6:	10a4      	asrs	r4, r4, #2
 8009aa8:	2600      	movs	r6, #0
 8009aaa:	42a6      	cmp	r6, r4
 8009aac:	d105      	bne.n	8009aba <__libc_init_array+0x2e>
 8009aae:	bd70      	pop	{r4, r5, r6, pc}
 8009ab0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ab4:	4798      	blx	r3
 8009ab6:	3601      	adds	r6, #1
 8009ab8:	e7ee      	b.n	8009a98 <__libc_init_array+0xc>
 8009aba:	f855 3b04 	ldr.w	r3, [r5], #4
 8009abe:	4798      	blx	r3
 8009ac0:	3601      	adds	r6, #1
 8009ac2:	e7f2      	b.n	8009aaa <__libc_init_array+0x1e>
 8009ac4:	0800beac 	.word	0x0800beac
 8009ac8:	0800beac 	.word	0x0800beac
 8009acc:	0800beac 	.word	0x0800beac
 8009ad0:	0800beb0 	.word	0x0800beb0

08009ad4 <__retarget_lock_acquire_recursive>:
 8009ad4:	4770      	bx	lr

08009ad6 <__retarget_lock_release_recursive>:
 8009ad6:	4770      	bx	lr

08009ad8 <_free_r>:
 8009ad8:	b538      	push	{r3, r4, r5, lr}
 8009ada:	4605      	mov	r5, r0
 8009adc:	2900      	cmp	r1, #0
 8009ade:	d041      	beq.n	8009b64 <_free_r+0x8c>
 8009ae0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ae4:	1f0c      	subs	r4, r1, #4
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	bfb8      	it	lt
 8009aea:	18e4      	addlt	r4, r4, r3
 8009aec:	f7ff ff84 	bl	80099f8 <__malloc_lock>
 8009af0:	4a1d      	ldr	r2, [pc, #116]	@ (8009b68 <_free_r+0x90>)
 8009af2:	6813      	ldr	r3, [r2, #0]
 8009af4:	b933      	cbnz	r3, 8009b04 <_free_r+0x2c>
 8009af6:	6063      	str	r3, [r4, #4]
 8009af8:	6014      	str	r4, [r2, #0]
 8009afa:	4628      	mov	r0, r5
 8009afc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b00:	f7ff bf80 	b.w	8009a04 <__malloc_unlock>
 8009b04:	42a3      	cmp	r3, r4
 8009b06:	d908      	bls.n	8009b1a <_free_r+0x42>
 8009b08:	6820      	ldr	r0, [r4, #0]
 8009b0a:	1821      	adds	r1, r4, r0
 8009b0c:	428b      	cmp	r3, r1
 8009b0e:	bf01      	itttt	eq
 8009b10:	6819      	ldreq	r1, [r3, #0]
 8009b12:	685b      	ldreq	r3, [r3, #4]
 8009b14:	1809      	addeq	r1, r1, r0
 8009b16:	6021      	streq	r1, [r4, #0]
 8009b18:	e7ed      	b.n	8009af6 <_free_r+0x1e>
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	b10b      	cbz	r3, 8009b24 <_free_r+0x4c>
 8009b20:	42a3      	cmp	r3, r4
 8009b22:	d9fa      	bls.n	8009b1a <_free_r+0x42>
 8009b24:	6811      	ldr	r1, [r2, #0]
 8009b26:	1850      	adds	r0, r2, r1
 8009b28:	42a0      	cmp	r0, r4
 8009b2a:	d10b      	bne.n	8009b44 <_free_r+0x6c>
 8009b2c:	6820      	ldr	r0, [r4, #0]
 8009b2e:	4401      	add	r1, r0
 8009b30:	1850      	adds	r0, r2, r1
 8009b32:	4283      	cmp	r3, r0
 8009b34:	6011      	str	r1, [r2, #0]
 8009b36:	d1e0      	bne.n	8009afa <_free_r+0x22>
 8009b38:	6818      	ldr	r0, [r3, #0]
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	6053      	str	r3, [r2, #4]
 8009b3e:	4408      	add	r0, r1
 8009b40:	6010      	str	r0, [r2, #0]
 8009b42:	e7da      	b.n	8009afa <_free_r+0x22>
 8009b44:	d902      	bls.n	8009b4c <_free_r+0x74>
 8009b46:	230c      	movs	r3, #12
 8009b48:	602b      	str	r3, [r5, #0]
 8009b4a:	e7d6      	b.n	8009afa <_free_r+0x22>
 8009b4c:	6820      	ldr	r0, [r4, #0]
 8009b4e:	1821      	adds	r1, r4, r0
 8009b50:	428b      	cmp	r3, r1
 8009b52:	bf04      	itt	eq
 8009b54:	6819      	ldreq	r1, [r3, #0]
 8009b56:	685b      	ldreq	r3, [r3, #4]
 8009b58:	6063      	str	r3, [r4, #4]
 8009b5a:	bf04      	itt	eq
 8009b5c:	1809      	addeq	r1, r1, r0
 8009b5e:	6021      	streq	r1, [r4, #0]
 8009b60:	6054      	str	r4, [r2, #4]
 8009b62:	e7ca      	b.n	8009afa <_free_r+0x22>
 8009b64:	bd38      	pop	{r3, r4, r5, pc}
 8009b66:	bf00      	nop
 8009b68:	20000bf4 	.word	0x20000bf4

08009b6c <__ssputs_r>:
 8009b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b70:	688e      	ldr	r6, [r1, #8]
 8009b72:	461f      	mov	r7, r3
 8009b74:	42be      	cmp	r6, r7
 8009b76:	680b      	ldr	r3, [r1, #0]
 8009b78:	4682      	mov	sl, r0
 8009b7a:	460c      	mov	r4, r1
 8009b7c:	4690      	mov	r8, r2
 8009b7e:	d82d      	bhi.n	8009bdc <__ssputs_r+0x70>
 8009b80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009b84:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009b88:	d026      	beq.n	8009bd8 <__ssputs_r+0x6c>
 8009b8a:	6965      	ldr	r5, [r4, #20]
 8009b8c:	6909      	ldr	r1, [r1, #16]
 8009b8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b92:	eba3 0901 	sub.w	r9, r3, r1
 8009b96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b9a:	1c7b      	adds	r3, r7, #1
 8009b9c:	444b      	add	r3, r9
 8009b9e:	106d      	asrs	r5, r5, #1
 8009ba0:	429d      	cmp	r5, r3
 8009ba2:	bf38      	it	cc
 8009ba4:	461d      	movcc	r5, r3
 8009ba6:	0553      	lsls	r3, r2, #21
 8009ba8:	d527      	bpl.n	8009bfa <__ssputs_r+0x8e>
 8009baa:	4629      	mov	r1, r5
 8009bac:	f7ff fea4 	bl	80098f8 <_malloc_r>
 8009bb0:	4606      	mov	r6, r0
 8009bb2:	b360      	cbz	r0, 8009c0e <__ssputs_r+0xa2>
 8009bb4:	6921      	ldr	r1, [r4, #16]
 8009bb6:	464a      	mov	r2, r9
 8009bb8:	f000 fad8 	bl	800a16c <memcpy>
 8009bbc:	89a3      	ldrh	r3, [r4, #12]
 8009bbe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009bc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bc6:	81a3      	strh	r3, [r4, #12]
 8009bc8:	6126      	str	r6, [r4, #16]
 8009bca:	6165      	str	r5, [r4, #20]
 8009bcc:	444e      	add	r6, r9
 8009bce:	eba5 0509 	sub.w	r5, r5, r9
 8009bd2:	6026      	str	r6, [r4, #0]
 8009bd4:	60a5      	str	r5, [r4, #8]
 8009bd6:	463e      	mov	r6, r7
 8009bd8:	42be      	cmp	r6, r7
 8009bda:	d900      	bls.n	8009bde <__ssputs_r+0x72>
 8009bdc:	463e      	mov	r6, r7
 8009bde:	6820      	ldr	r0, [r4, #0]
 8009be0:	4632      	mov	r2, r6
 8009be2:	4641      	mov	r1, r8
 8009be4:	f000 faa8 	bl	800a138 <memmove>
 8009be8:	68a3      	ldr	r3, [r4, #8]
 8009bea:	1b9b      	subs	r3, r3, r6
 8009bec:	60a3      	str	r3, [r4, #8]
 8009bee:	6823      	ldr	r3, [r4, #0]
 8009bf0:	4433      	add	r3, r6
 8009bf2:	6023      	str	r3, [r4, #0]
 8009bf4:	2000      	movs	r0, #0
 8009bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bfa:	462a      	mov	r2, r5
 8009bfc:	f000 fac4 	bl	800a188 <_realloc_r>
 8009c00:	4606      	mov	r6, r0
 8009c02:	2800      	cmp	r0, #0
 8009c04:	d1e0      	bne.n	8009bc8 <__ssputs_r+0x5c>
 8009c06:	6921      	ldr	r1, [r4, #16]
 8009c08:	4650      	mov	r0, sl
 8009c0a:	f7ff ff65 	bl	8009ad8 <_free_r>
 8009c0e:	230c      	movs	r3, #12
 8009c10:	f8ca 3000 	str.w	r3, [sl]
 8009c14:	89a3      	ldrh	r3, [r4, #12]
 8009c16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c1a:	81a3      	strh	r3, [r4, #12]
 8009c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c20:	e7e9      	b.n	8009bf6 <__ssputs_r+0x8a>
	...

08009c24 <_svfiprintf_r>:
 8009c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c28:	4698      	mov	r8, r3
 8009c2a:	898b      	ldrh	r3, [r1, #12]
 8009c2c:	061b      	lsls	r3, r3, #24
 8009c2e:	b09d      	sub	sp, #116	@ 0x74
 8009c30:	4607      	mov	r7, r0
 8009c32:	460d      	mov	r5, r1
 8009c34:	4614      	mov	r4, r2
 8009c36:	d510      	bpl.n	8009c5a <_svfiprintf_r+0x36>
 8009c38:	690b      	ldr	r3, [r1, #16]
 8009c3a:	b973      	cbnz	r3, 8009c5a <_svfiprintf_r+0x36>
 8009c3c:	2140      	movs	r1, #64	@ 0x40
 8009c3e:	f7ff fe5b 	bl	80098f8 <_malloc_r>
 8009c42:	6028      	str	r0, [r5, #0]
 8009c44:	6128      	str	r0, [r5, #16]
 8009c46:	b930      	cbnz	r0, 8009c56 <_svfiprintf_r+0x32>
 8009c48:	230c      	movs	r3, #12
 8009c4a:	603b      	str	r3, [r7, #0]
 8009c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c50:	b01d      	add	sp, #116	@ 0x74
 8009c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c56:	2340      	movs	r3, #64	@ 0x40
 8009c58:	616b      	str	r3, [r5, #20]
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c5e:	2320      	movs	r3, #32
 8009c60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009c64:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c68:	2330      	movs	r3, #48	@ 0x30
 8009c6a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009e08 <_svfiprintf_r+0x1e4>
 8009c6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009c72:	f04f 0901 	mov.w	r9, #1
 8009c76:	4623      	mov	r3, r4
 8009c78:	469a      	mov	sl, r3
 8009c7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c7e:	b10a      	cbz	r2, 8009c84 <_svfiprintf_r+0x60>
 8009c80:	2a25      	cmp	r2, #37	@ 0x25
 8009c82:	d1f9      	bne.n	8009c78 <_svfiprintf_r+0x54>
 8009c84:	ebba 0b04 	subs.w	fp, sl, r4
 8009c88:	d00b      	beq.n	8009ca2 <_svfiprintf_r+0x7e>
 8009c8a:	465b      	mov	r3, fp
 8009c8c:	4622      	mov	r2, r4
 8009c8e:	4629      	mov	r1, r5
 8009c90:	4638      	mov	r0, r7
 8009c92:	f7ff ff6b 	bl	8009b6c <__ssputs_r>
 8009c96:	3001      	adds	r0, #1
 8009c98:	f000 80a7 	beq.w	8009dea <_svfiprintf_r+0x1c6>
 8009c9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c9e:	445a      	add	r2, fp
 8009ca0:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ca2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	f000 809f 	beq.w	8009dea <_svfiprintf_r+0x1c6>
 8009cac:	2300      	movs	r3, #0
 8009cae:	f04f 32ff 	mov.w	r2, #4294967295
 8009cb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cb6:	f10a 0a01 	add.w	sl, sl, #1
 8009cba:	9304      	str	r3, [sp, #16]
 8009cbc:	9307      	str	r3, [sp, #28]
 8009cbe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009cc2:	931a      	str	r3, [sp, #104]	@ 0x68
 8009cc4:	4654      	mov	r4, sl
 8009cc6:	2205      	movs	r2, #5
 8009cc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ccc:	484e      	ldr	r0, [pc, #312]	@ (8009e08 <_svfiprintf_r+0x1e4>)
 8009cce:	f7f6 fa9f 	bl	8000210 <memchr>
 8009cd2:	9a04      	ldr	r2, [sp, #16]
 8009cd4:	b9d8      	cbnz	r0, 8009d0e <_svfiprintf_r+0xea>
 8009cd6:	06d0      	lsls	r0, r2, #27
 8009cd8:	bf44      	itt	mi
 8009cda:	2320      	movmi	r3, #32
 8009cdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ce0:	0711      	lsls	r1, r2, #28
 8009ce2:	bf44      	itt	mi
 8009ce4:	232b      	movmi	r3, #43	@ 0x2b
 8009ce6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009cea:	f89a 3000 	ldrb.w	r3, [sl]
 8009cee:	2b2a      	cmp	r3, #42	@ 0x2a
 8009cf0:	d015      	beq.n	8009d1e <_svfiprintf_r+0xfa>
 8009cf2:	9a07      	ldr	r2, [sp, #28]
 8009cf4:	4654      	mov	r4, sl
 8009cf6:	2000      	movs	r0, #0
 8009cf8:	f04f 0c0a 	mov.w	ip, #10
 8009cfc:	4621      	mov	r1, r4
 8009cfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d02:	3b30      	subs	r3, #48	@ 0x30
 8009d04:	2b09      	cmp	r3, #9
 8009d06:	d94b      	bls.n	8009da0 <_svfiprintf_r+0x17c>
 8009d08:	b1b0      	cbz	r0, 8009d38 <_svfiprintf_r+0x114>
 8009d0a:	9207      	str	r2, [sp, #28]
 8009d0c:	e014      	b.n	8009d38 <_svfiprintf_r+0x114>
 8009d0e:	eba0 0308 	sub.w	r3, r0, r8
 8009d12:	fa09 f303 	lsl.w	r3, r9, r3
 8009d16:	4313      	orrs	r3, r2
 8009d18:	9304      	str	r3, [sp, #16]
 8009d1a:	46a2      	mov	sl, r4
 8009d1c:	e7d2      	b.n	8009cc4 <_svfiprintf_r+0xa0>
 8009d1e:	9b03      	ldr	r3, [sp, #12]
 8009d20:	1d19      	adds	r1, r3, #4
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	9103      	str	r1, [sp, #12]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	bfbb      	ittet	lt
 8009d2a:	425b      	neglt	r3, r3
 8009d2c:	f042 0202 	orrlt.w	r2, r2, #2
 8009d30:	9307      	strge	r3, [sp, #28]
 8009d32:	9307      	strlt	r3, [sp, #28]
 8009d34:	bfb8      	it	lt
 8009d36:	9204      	strlt	r2, [sp, #16]
 8009d38:	7823      	ldrb	r3, [r4, #0]
 8009d3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d3c:	d10a      	bne.n	8009d54 <_svfiprintf_r+0x130>
 8009d3e:	7863      	ldrb	r3, [r4, #1]
 8009d40:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d42:	d132      	bne.n	8009daa <_svfiprintf_r+0x186>
 8009d44:	9b03      	ldr	r3, [sp, #12]
 8009d46:	1d1a      	adds	r2, r3, #4
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	9203      	str	r2, [sp, #12]
 8009d4c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009d50:	3402      	adds	r4, #2
 8009d52:	9305      	str	r3, [sp, #20]
 8009d54:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009e18 <_svfiprintf_r+0x1f4>
 8009d58:	7821      	ldrb	r1, [r4, #0]
 8009d5a:	2203      	movs	r2, #3
 8009d5c:	4650      	mov	r0, sl
 8009d5e:	f7f6 fa57 	bl	8000210 <memchr>
 8009d62:	b138      	cbz	r0, 8009d74 <_svfiprintf_r+0x150>
 8009d64:	9b04      	ldr	r3, [sp, #16]
 8009d66:	eba0 000a 	sub.w	r0, r0, sl
 8009d6a:	2240      	movs	r2, #64	@ 0x40
 8009d6c:	4082      	lsls	r2, r0
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	3401      	adds	r4, #1
 8009d72:	9304      	str	r3, [sp, #16]
 8009d74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d78:	4824      	ldr	r0, [pc, #144]	@ (8009e0c <_svfiprintf_r+0x1e8>)
 8009d7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009d7e:	2206      	movs	r2, #6
 8009d80:	f7f6 fa46 	bl	8000210 <memchr>
 8009d84:	2800      	cmp	r0, #0
 8009d86:	d036      	beq.n	8009df6 <_svfiprintf_r+0x1d2>
 8009d88:	4b21      	ldr	r3, [pc, #132]	@ (8009e10 <_svfiprintf_r+0x1ec>)
 8009d8a:	bb1b      	cbnz	r3, 8009dd4 <_svfiprintf_r+0x1b0>
 8009d8c:	9b03      	ldr	r3, [sp, #12]
 8009d8e:	3307      	adds	r3, #7
 8009d90:	f023 0307 	bic.w	r3, r3, #7
 8009d94:	3308      	adds	r3, #8
 8009d96:	9303      	str	r3, [sp, #12]
 8009d98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d9a:	4433      	add	r3, r6
 8009d9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d9e:	e76a      	b.n	8009c76 <_svfiprintf_r+0x52>
 8009da0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009da4:	460c      	mov	r4, r1
 8009da6:	2001      	movs	r0, #1
 8009da8:	e7a8      	b.n	8009cfc <_svfiprintf_r+0xd8>
 8009daa:	2300      	movs	r3, #0
 8009dac:	3401      	adds	r4, #1
 8009dae:	9305      	str	r3, [sp, #20]
 8009db0:	4619      	mov	r1, r3
 8009db2:	f04f 0c0a 	mov.w	ip, #10
 8009db6:	4620      	mov	r0, r4
 8009db8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dbc:	3a30      	subs	r2, #48	@ 0x30
 8009dbe:	2a09      	cmp	r2, #9
 8009dc0:	d903      	bls.n	8009dca <_svfiprintf_r+0x1a6>
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d0c6      	beq.n	8009d54 <_svfiprintf_r+0x130>
 8009dc6:	9105      	str	r1, [sp, #20]
 8009dc8:	e7c4      	b.n	8009d54 <_svfiprintf_r+0x130>
 8009dca:	fb0c 2101 	mla	r1, ip, r1, r2
 8009dce:	4604      	mov	r4, r0
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	e7f0      	b.n	8009db6 <_svfiprintf_r+0x192>
 8009dd4:	ab03      	add	r3, sp, #12
 8009dd6:	9300      	str	r3, [sp, #0]
 8009dd8:	462a      	mov	r2, r5
 8009dda:	4b0e      	ldr	r3, [pc, #56]	@ (8009e14 <_svfiprintf_r+0x1f0>)
 8009ddc:	a904      	add	r1, sp, #16
 8009dde:	4638      	mov	r0, r7
 8009de0:	f3af 8000 	nop.w
 8009de4:	1c42      	adds	r2, r0, #1
 8009de6:	4606      	mov	r6, r0
 8009de8:	d1d6      	bne.n	8009d98 <_svfiprintf_r+0x174>
 8009dea:	89ab      	ldrh	r3, [r5, #12]
 8009dec:	065b      	lsls	r3, r3, #25
 8009dee:	f53f af2d 	bmi.w	8009c4c <_svfiprintf_r+0x28>
 8009df2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009df4:	e72c      	b.n	8009c50 <_svfiprintf_r+0x2c>
 8009df6:	ab03      	add	r3, sp, #12
 8009df8:	9300      	str	r3, [sp, #0]
 8009dfa:	462a      	mov	r2, r5
 8009dfc:	4b05      	ldr	r3, [pc, #20]	@ (8009e14 <_svfiprintf_r+0x1f0>)
 8009dfe:	a904      	add	r1, sp, #16
 8009e00:	4638      	mov	r0, r7
 8009e02:	f000 f879 	bl	8009ef8 <_printf_i>
 8009e06:	e7ed      	b.n	8009de4 <_svfiprintf_r+0x1c0>
 8009e08:	0800be6e 	.word	0x0800be6e
 8009e0c:	0800be78 	.word	0x0800be78
 8009e10:	00000000 	.word	0x00000000
 8009e14:	08009b6d 	.word	0x08009b6d
 8009e18:	0800be74 	.word	0x0800be74

08009e1c <_printf_common>:
 8009e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e20:	4616      	mov	r6, r2
 8009e22:	4698      	mov	r8, r3
 8009e24:	688a      	ldr	r2, [r1, #8]
 8009e26:	690b      	ldr	r3, [r1, #16]
 8009e28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	bfb8      	it	lt
 8009e30:	4613      	movlt	r3, r2
 8009e32:	6033      	str	r3, [r6, #0]
 8009e34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009e38:	4607      	mov	r7, r0
 8009e3a:	460c      	mov	r4, r1
 8009e3c:	b10a      	cbz	r2, 8009e42 <_printf_common+0x26>
 8009e3e:	3301      	adds	r3, #1
 8009e40:	6033      	str	r3, [r6, #0]
 8009e42:	6823      	ldr	r3, [r4, #0]
 8009e44:	0699      	lsls	r1, r3, #26
 8009e46:	bf42      	ittt	mi
 8009e48:	6833      	ldrmi	r3, [r6, #0]
 8009e4a:	3302      	addmi	r3, #2
 8009e4c:	6033      	strmi	r3, [r6, #0]
 8009e4e:	6825      	ldr	r5, [r4, #0]
 8009e50:	f015 0506 	ands.w	r5, r5, #6
 8009e54:	d106      	bne.n	8009e64 <_printf_common+0x48>
 8009e56:	f104 0a19 	add.w	sl, r4, #25
 8009e5a:	68e3      	ldr	r3, [r4, #12]
 8009e5c:	6832      	ldr	r2, [r6, #0]
 8009e5e:	1a9b      	subs	r3, r3, r2
 8009e60:	42ab      	cmp	r3, r5
 8009e62:	dc26      	bgt.n	8009eb2 <_printf_common+0x96>
 8009e64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009e68:	6822      	ldr	r2, [r4, #0]
 8009e6a:	3b00      	subs	r3, #0
 8009e6c:	bf18      	it	ne
 8009e6e:	2301      	movne	r3, #1
 8009e70:	0692      	lsls	r2, r2, #26
 8009e72:	d42b      	bmi.n	8009ecc <_printf_common+0xb0>
 8009e74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009e78:	4641      	mov	r1, r8
 8009e7a:	4638      	mov	r0, r7
 8009e7c:	47c8      	blx	r9
 8009e7e:	3001      	adds	r0, #1
 8009e80:	d01e      	beq.n	8009ec0 <_printf_common+0xa4>
 8009e82:	6823      	ldr	r3, [r4, #0]
 8009e84:	6922      	ldr	r2, [r4, #16]
 8009e86:	f003 0306 	and.w	r3, r3, #6
 8009e8a:	2b04      	cmp	r3, #4
 8009e8c:	bf02      	ittt	eq
 8009e8e:	68e5      	ldreq	r5, [r4, #12]
 8009e90:	6833      	ldreq	r3, [r6, #0]
 8009e92:	1aed      	subeq	r5, r5, r3
 8009e94:	68a3      	ldr	r3, [r4, #8]
 8009e96:	bf0c      	ite	eq
 8009e98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e9c:	2500      	movne	r5, #0
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	bfc4      	itt	gt
 8009ea2:	1a9b      	subgt	r3, r3, r2
 8009ea4:	18ed      	addgt	r5, r5, r3
 8009ea6:	2600      	movs	r6, #0
 8009ea8:	341a      	adds	r4, #26
 8009eaa:	42b5      	cmp	r5, r6
 8009eac:	d11a      	bne.n	8009ee4 <_printf_common+0xc8>
 8009eae:	2000      	movs	r0, #0
 8009eb0:	e008      	b.n	8009ec4 <_printf_common+0xa8>
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	4652      	mov	r2, sl
 8009eb6:	4641      	mov	r1, r8
 8009eb8:	4638      	mov	r0, r7
 8009eba:	47c8      	blx	r9
 8009ebc:	3001      	adds	r0, #1
 8009ebe:	d103      	bne.n	8009ec8 <_printf_common+0xac>
 8009ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ec8:	3501      	adds	r5, #1
 8009eca:	e7c6      	b.n	8009e5a <_printf_common+0x3e>
 8009ecc:	18e1      	adds	r1, r4, r3
 8009ece:	1c5a      	adds	r2, r3, #1
 8009ed0:	2030      	movs	r0, #48	@ 0x30
 8009ed2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009ed6:	4422      	add	r2, r4
 8009ed8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009edc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009ee0:	3302      	adds	r3, #2
 8009ee2:	e7c7      	b.n	8009e74 <_printf_common+0x58>
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	4622      	mov	r2, r4
 8009ee8:	4641      	mov	r1, r8
 8009eea:	4638      	mov	r0, r7
 8009eec:	47c8      	blx	r9
 8009eee:	3001      	adds	r0, #1
 8009ef0:	d0e6      	beq.n	8009ec0 <_printf_common+0xa4>
 8009ef2:	3601      	adds	r6, #1
 8009ef4:	e7d9      	b.n	8009eaa <_printf_common+0x8e>
	...

08009ef8 <_printf_i>:
 8009ef8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009efc:	7e0f      	ldrb	r7, [r1, #24]
 8009efe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009f00:	2f78      	cmp	r7, #120	@ 0x78
 8009f02:	4691      	mov	r9, r2
 8009f04:	4680      	mov	r8, r0
 8009f06:	460c      	mov	r4, r1
 8009f08:	469a      	mov	sl, r3
 8009f0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009f0e:	d807      	bhi.n	8009f20 <_printf_i+0x28>
 8009f10:	2f62      	cmp	r7, #98	@ 0x62
 8009f12:	d80a      	bhi.n	8009f2a <_printf_i+0x32>
 8009f14:	2f00      	cmp	r7, #0
 8009f16:	f000 80d2 	beq.w	800a0be <_printf_i+0x1c6>
 8009f1a:	2f58      	cmp	r7, #88	@ 0x58
 8009f1c:	f000 80b9 	beq.w	800a092 <_printf_i+0x19a>
 8009f20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009f28:	e03a      	b.n	8009fa0 <_printf_i+0xa8>
 8009f2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009f2e:	2b15      	cmp	r3, #21
 8009f30:	d8f6      	bhi.n	8009f20 <_printf_i+0x28>
 8009f32:	a101      	add	r1, pc, #4	@ (adr r1, 8009f38 <_printf_i+0x40>)
 8009f34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009f38:	08009f91 	.word	0x08009f91
 8009f3c:	08009fa5 	.word	0x08009fa5
 8009f40:	08009f21 	.word	0x08009f21
 8009f44:	08009f21 	.word	0x08009f21
 8009f48:	08009f21 	.word	0x08009f21
 8009f4c:	08009f21 	.word	0x08009f21
 8009f50:	08009fa5 	.word	0x08009fa5
 8009f54:	08009f21 	.word	0x08009f21
 8009f58:	08009f21 	.word	0x08009f21
 8009f5c:	08009f21 	.word	0x08009f21
 8009f60:	08009f21 	.word	0x08009f21
 8009f64:	0800a0a5 	.word	0x0800a0a5
 8009f68:	08009fcf 	.word	0x08009fcf
 8009f6c:	0800a05f 	.word	0x0800a05f
 8009f70:	08009f21 	.word	0x08009f21
 8009f74:	08009f21 	.word	0x08009f21
 8009f78:	0800a0c7 	.word	0x0800a0c7
 8009f7c:	08009f21 	.word	0x08009f21
 8009f80:	08009fcf 	.word	0x08009fcf
 8009f84:	08009f21 	.word	0x08009f21
 8009f88:	08009f21 	.word	0x08009f21
 8009f8c:	0800a067 	.word	0x0800a067
 8009f90:	6833      	ldr	r3, [r6, #0]
 8009f92:	1d1a      	adds	r2, r3, #4
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	6032      	str	r2, [r6, #0]
 8009f98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	e09d      	b.n	800a0e0 <_printf_i+0x1e8>
 8009fa4:	6833      	ldr	r3, [r6, #0]
 8009fa6:	6820      	ldr	r0, [r4, #0]
 8009fa8:	1d19      	adds	r1, r3, #4
 8009faa:	6031      	str	r1, [r6, #0]
 8009fac:	0606      	lsls	r6, r0, #24
 8009fae:	d501      	bpl.n	8009fb4 <_printf_i+0xbc>
 8009fb0:	681d      	ldr	r5, [r3, #0]
 8009fb2:	e003      	b.n	8009fbc <_printf_i+0xc4>
 8009fb4:	0645      	lsls	r5, r0, #25
 8009fb6:	d5fb      	bpl.n	8009fb0 <_printf_i+0xb8>
 8009fb8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009fbc:	2d00      	cmp	r5, #0
 8009fbe:	da03      	bge.n	8009fc8 <_printf_i+0xd0>
 8009fc0:	232d      	movs	r3, #45	@ 0x2d
 8009fc2:	426d      	negs	r5, r5
 8009fc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009fc8:	4859      	ldr	r0, [pc, #356]	@ (800a130 <_printf_i+0x238>)
 8009fca:	230a      	movs	r3, #10
 8009fcc:	e011      	b.n	8009ff2 <_printf_i+0xfa>
 8009fce:	6821      	ldr	r1, [r4, #0]
 8009fd0:	6833      	ldr	r3, [r6, #0]
 8009fd2:	0608      	lsls	r0, r1, #24
 8009fd4:	f853 5b04 	ldr.w	r5, [r3], #4
 8009fd8:	d402      	bmi.n	8009fe0 <_printf_i+0xe8>
 8009fda:	0649      	lsls	r1, r1, #25
 8009fdc:	bf48      	it	mi
 8009fde:	b2ad      	uxthmi	r5, r5
 8009fe0:	2f6f      	cmp	r7, #111	@ 0x6f
 8009fe2:	4853      	ldr	r0, [pc, #332]	@ (800a130 <_printf_i+0x238>)
 8009fe4:	6033      	str	r3, [r6, #0]
 8009fe6:	bf14      	ite	ne
 8009fe8:	230a      	movne	r3, #10
 8009fea:	2308      	moveq	r3, #8
 8009fec:	2100      	movs	r1, #0
 8009fee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009ff2:	6866      	ldr	r6, [r4, #4]
 8009ff4:	60a6      	str	r6, [r4, #8]
 8009ff6:	2e00      	cmp	r6, #0
 8009ff8:	bfa2      	ittt	ge
 8009ffa:	6821      	ldrge	r1, [r4, #0]
 8009ffc:	f021 0104 	bicge.w	r1, r1, #4
 800a000:	6021      	strge	r1, [r4, #0]
 800a002:	b90d      	cbnz	r5, 800a008 <_printf_i+0x110>
 800a004:	2e00      	cmp	r6, #0
 800a006:	d04b      	beq.n	800a0a0 <_printf_i+0x1a8>
 800a008:	4616      	mov	r6, r2
 800a00a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a00e:	fb03 5711 	mls	r7, r3, r1, r5
 800a012:	5dc7      	ldrb	r7, [r0, r7]
 800a014:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a018:	462f      	mov	r7, r5
 800a01a:	42bb      	cmp	r3, r7
 800a01c:	460d      	mov	r5, r1
 800a01e:	d9f4      	bls.n	800a00a <_printf_i+0x112>
 800a020:	2b08      	cmp	r3, #8
 800a022:	d10b      	bne.n	800a03c <_printf_i+0x144>
 800a024:	6823      	ldr	r3, [r4, #0]
 800a026:	07df      	lsls	r7, r3, #31
 800a028:	d508      	bpl.n	800a03c <_printf_i+0x144>
 800a02a:	6923      	ldr	r3, [r4, #16]
 800a02c:	6861      	ldr	r1, [r4, #4]
 800a02e:	4299      	cmp	r1, r3
 800a030:	bfde      	ittt	le
 800a032:	2330      	movle	r3, #48	@ 0x30
 800a034:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a038:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a03c:	1b92      	subs	r2, r2, r6
 800a03e:	6122      	str	r2, [r4, #16]
 800a040:	f8cd a000 	str.w	sl, [sp]
 800a044:	464b      	mov	r3, r9
 800a046:	aa03      	add	r2, sp, #12
 800a048:	4621      	mov	r1, r4
 800a04a:	4640      	mov	r0, r8
 800a04c:	f7ff fee6 	bl	8009e1c <_printf_common>
 800a050:	3001      	adds	r0, #1
 800a052:	d14a      	bne.n	800a0ea <_printf_i+0x1f2>
 800a054:	f04f 30ff 	mov.w	r0, #4294967295
 800a058:	b004      	add	sp, #16
 800a05a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a05e:	6823      	ldr	r3, [r4, #0]
 800a060:	f043 0320 	orr.w	r3, r3, #32
 800a064:	6023      	str	r3, [r4, #0]
 800a066:	4833      	ldr	r0, [pc, #204]	@ (800a134 <_printf_i+0x23c>)
 800a068:	2778      	movs	r7, #120	@ 0x78
 800a06a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a06e:	6823      	ldr	r3, [r4, #0]
 800a070:	6831      	ldr	r1, [r6, #0]
 800a072:	061f      	lsls	r7, r3, #24
 800a074:	f851 5b04 	ldr.w	r5, [r1], #4
 800a078:	d402      	bmi.n	800a080 <_printf_i+0x188>
 800a07a:	065f      	lsls	r7, r3, #25
 800a07c:	bf48      	it	mi
 800a07e:	b2ad      	uxthmi	r5, r5
 800a080:	6031      	str	r1, [r6, #0]
 800a082:	07d9      	lsls	r1, r3, #31
 800a084:	bf44      	itt	mi
 800a086:	f043 0320 	orrmi.w	r3, r3, #32
 800a08a:	6023      	strmi	r3, [r4, #0]
 800a08c:	b11d      	cbz	r5, 800a096 <_printf_i+0x19e>
 800a08e:	2310      	movs	r3, #16
 800a090:	e7ac      	b.n	8009fec <_printf_i+0xf4>
 800a092:	4827      	ldr	r0, [pc, #156]	@ (800a130 <_printf_i+0x238>)
 800a094:	e7e9      	b.n	800a06a <_printf_i+0x172>
 800a096:	6823      	ldr	r3, [r4, #0]
 800a098:	f023 0320 	bic.w	r3, r3, #32
 800a09c:	6023      	str	r3, [r4, #0]
 800a09e:	e7f6      	b.n	800a08e <_printf_i+0x196>
 800a0a0:	4616      	mov	r6, r2
 800a0a2:	e7bd      	b.n	800a020 <_printf_i+0x128>
 800a0a4:	6833      	ldr	r3, [r6, #0]
 800a0a6:	6825      	ldr	r5, [r4, #0]
 800a0a8:	6961      	ldr	r1, [r4, #20]
 800a0aa:	1d18      	adds	r0, r3, #4
 800a0ac:	6030      	str	r0, [r6, #0]
 800a0ae:	062e      	lsls	r6, r5, #24
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	d501      	bpl.n	800a0b8 <_printf_i+0x1c0>
 800a0b4:	6019      	str	r1, [r3, #0]
 800a0b6:	e002      	b.n	800a0be <_printf_i+0x1c6>
 800a0b8:	0668      	lsls	r0, r5, #25
 800a0ba:	d5fb      	bpl.n	800a0b4 <_printf_i+0x1bc>
 800a0bc:	8019      	strh	r1, [r3, #0]
 800a0be:	2300      	movs	r3, #0
 800a0c0:	6123      	str	r3, [r4, #16]
 800a0c2:	4616      	mov	r6, r2
 800a0c4:	e7bc      	b.n	800a040 <_printf_i+0x148>
 800a0c6:	6833      	ldr	r3, [r6, #0]
 800a0c8:	1d1a      	adds	r2, r3, #4
 800a0ca:	6032      	str	r2, [r6, #0]
 800a0cc:	681e      	ldr	r6, [r3, #0]
 800a0ce:	6862      	ldr	r2, [r4, #4]
 800a0d0:	2100      	movs	r1, #0
 800a0d2:	4630      	mov	r0, r6
 800a0d4:	f7f6 f89c 	bl	8000210 <memchr>
 800a0d8:	b108      	cbz	r0, 800a0de <_printf_i+0x1e6>
 800a0da:	1b80      	subs	r0, r0, r6
 800a0dc:	6060      	str	r0, [r4, #4]
 800a0de:	6863      	ldr	r3, [r4, #4]
 800a0e0:	6123      	str	r3, [r4, #16]
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0e8:	e7aa      	b.n	800a040 <_printf_i+0x148>
 800a0ea:	6923      	ldr	r3, [r4, #16]
 800a0ec:	4632      	mov	r2, r6
 800a0ee:	4649      	mov	r1, r9
 800a0f0:	4640      	mov	r0, r8
 800a0f2:	47d0      	blx	sl
 800a0f4:	3001      	adds	r0, #1
 800a0f6:	d0ad      	beq.n	800a054 <_printf_i+0x15c>
 800a0f8:	6823      	ldr	r3, [r4, #0]
 800a0fa:	079b      	lsls	r3, r3, #30
 800a0fc:	d413      	bmi.n	800a126 <_printf_i+0x22e>
 800a0fe:	68e0      	ldr	r0, [r4, #12]
 800a100:	9b03      	ldr	r3, [sp, #12]
 800a102:	4298      	cmp	r0, r3
 800a104:	bfb8      	it	lt
 800a106:	4618      	movlt	r0, r3
 800a108:	e7a6      	b.n	800a058 <_printf_i+0x160>
 800a10a:	2301      	movs	r3, #1
 800a10c:	4632      	mov	r2, r6
 800a10e:	4649      	mov	r1, r9
 800a110:	4640      	mov	r0, r8
 800a112:	47d0      	blx	sl
 800a114:	3001      	adds	r0, #1
 800a116:	d09d      	beq.n	800a054 <_printf_i+0x15c>
 800a118:	3501      	adds	r5, #1
 800a11a:	68e3      	ldr	r3, [r4, #12]
 800a11c:	9903      	ldr	r1, [sp, #12]
 800a11e:	1a5b      	subs	r3, r3, r1
 800a120:	42ab      	cmp	r3, r5
 800a122:	dcf2      	bgt.n	800a10a <_printf_i+0x212>
 800a124:	e7eb      	b.n	800a0fe <_printf_i+0x206>
 800a126:	2500      	movs	r5, #0
 800a128:	f104 0619 	add.w	r6, r4, #25
 800a12c:	e7f5      	b.n	800a11a <_printf_i+0x222>
 800a12e:	bf00      	nop
 800a130:	0800be7f 	.word	0x0800be7f
 800a134:	0800be90 	.word	0x0800be90

0800a138 <memmove>:
 800a138:	4288      	cmp	r0, r1
 800a13a:	b510      	push	{r4, lr}
 800a13c:	eb01 0402 	add.w	r4, r1, r2
 800a140:	d902      	bls.n	800a148 <memmove+0x10>
 800a142:	4284      	cmp	r4, r0
 800a144:	4623      	mov	r3, r4
 800a146:	d807      	bhi.n	800a158 <memmove+0x20>
 800a148:	1e43      	subs	r3, r0, #1
 800a14a:	42a1      	cmp	r1, r4
 800a14c:	d008      	beq.n	800a160 <memmove+0x28>
 800a14e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a152:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a156:	e7f8      	b.n	800a14a <memmove+0x12>
 800a158:	4402      	add	r2, r0
 800a15a:	4601      	mov	r1, r0
 800a15c:	428a      	cmp	r2, r1
 800a15e:	d100      	bne.n	800a162 <memmove+0x2a>
 800a160:	bd10      	pop	{r4, pc}
 800a162:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a166:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a16a:	e7f7      	b.n	800a15c <memmove+0x24>

0800a16c <memcpy>:
 800a16c:	440a      	add	r2, r1
 800a16e:	4291      	cmp	r1, r2
 800a170:	f100 33ff 	add.w	r3, r0, #4294967295
 800a174:	d100      	bne.n	800a178 <memcpy+0xc>
 800a176:	4770      	bx	lr
 800a178:	b510      	push	{r4, lr}
 800a17a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a17e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a182:	4291      	cmp	r1, r2
 800a184:	d1f9      	bne.n	800a17a <memcpy+0xe>
 800a186:	bd10      	pop	{r4, pc}

0800a188 <_realloc_r>:
 800a188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a18c:	4680      	mov	r8, r0
 800a18e:	4615      	mov	r5, r2
 800a190:	460c      	mov	r4, r1
 800a192:	b921      	cbnz	r1, 800a19e <_realloc_r+0x16>
 800a194:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a198:	4611      	mov	r1, r2
 800a19a:	f7ff bbad 	b.w	80098f8 <_malloc_r>
 800a19e:	b92a      	cbnz	r2, 800a1ac <_realloc_r+0x24>
 800a1a0:	f7ff fc9a 	bl	8009ad8 <_free_r>
 800a1a4:	2400      	movs	r4, #0
 800a1a6:	4620      	mov	r0, r4
 800a1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1ac:	f000 f81a 	bl	800a1e4 <_malloc_usable_size_r>
 800a1b0:	4285      	cmp	r5, r0
 800a1b2:	4606      	mov	r6, r0
 800a1b4:	d802      	bhi.n	800a1bc <_realloc_r+0x34>
 800a1b6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a1ba:	d8f4      	bhi.n	800a1a6 <_realloc_r+0x1e>
 800a1bc:	4629      	mov	r1, r5
 800a1be:	4640      	mov	r0, r8
 800a1c0:	f7ff fb9a 	bl	80098f8 <_malloc_r>
 800a1c4:	4607      	mov	r7, r0
 800a1c6:	2800      	cmp	r0, #0
 800a1c8:	d0ec      	beq.n	800a1a4 <_realloc_r+0x1c>
 800a1ca:	42b5      	cmp	r5, r6
 800a1cc:	462a      	mov	r2, r5
 800a1ce:	4621      	mov	r1, r4
 800a1d0:	bf28      	it	cs
 800a1d2:	4632      	movcs	r2, r6
 800a1d4:	f7ff ffca 	bl	800a16c <memcpy>
 800a1d8:	4621      	mov	r1, r4
 800a1da:	4640      	mov	r0, r8
 800a1dc:	f7ff fc7c 	bl	8009ad8 <_free_r>
 800a1e0:	463c      	mov	r4, r7
 800a1e2:	e7e0      	b.n	800a1a6 <_realloc_r+0x1e>

0800a1e4 <_malloc_usable_size_r>:
 800a1e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1e8:	1f18      	subs	r0, r3, #4
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	bfbc      	itt	lt
 800a1ee:	580b      	ldrlt	r3, [r1, r0]
 800a1f0:	18c0      	addlt	r0, r0, r3
 800a1f2:	4770      	bx	lr

0800a1f4 <_init>:
 800a1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1f6:	bf00      	nop
 800a1f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1fa:	bc08      	pop	{r3}
 800a1fc:	469e      	mov	lr, r3
 800a1fe:	4770      	bx	lr

0800a200 <_fini>:
 800a200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a202:	bf00      	nop
 800a204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a206:	bc08      	pop	{r3}
 800a208:	469e      	mov	lr, r3
 800a20a:	4770      	bx	lr
