
slid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a018  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c98  0800a1e8  0800a1e8  0000b1e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be80  0800be80  0000d078  2**0
                  CONTENTS
  4 .ARM          00000008  0800be80  0800be80  0000ce80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be88  0800be88  0000d078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be88  0800be88  0000ce88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800be8c  0800be8c  0000ce8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0800be90  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cbc  20000078  0800bf08  0000d078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d34  0800bf08  0000dd34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001730d  00000000  00000000  0000d0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dde  00000000  00000000  000243b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001498  00000000  00000000  00028198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f70  00000000  00000000  00029630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a868  00000000  00000000  0002a5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a8e9  00000000  00000000  00054e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8b02  00000000  00000000  0006f6f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001681f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058b4  00000000  00000000  00168238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  0016daec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a1d0 	.word	0x0800a1d0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	0800a1d0 	.word	0x0800a1d0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <BSP_DisplayImage>:
#include <stdio.h>

//uint8_t firstDisplay = 0;

void BSP_DisplayImage(uint8_t index, char* pDirectoryFiles[25], uint8_t ubNumberOfFiles)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08e      	sub	sp, #56	@ 0x38
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	6039      	str	r1, [r7, #0]
 80005aa:	71fb      	strb	r3, [r7, #7]
 80005ac:	4613      	mov	r3, r2
 80005ae:	71bb      	strb	r3, [r7, #6]



//	BSP_LCD_SetTransparency(lastLayer,0);
//	HAL_Delay(2);
	for (int i = 255; i>0; i--) {
 80005b0:	23ff      	movs	r3, #255	@ 0xff
 80005b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80005b4:	e009      	b.n	80005ca <BSP_DisplayImage+0x2a>
			BSP_LCD_SetTransparency(1, i);
 80005b6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80005b8:	2001      	movs	r0, #1
 80005ba:	f008 f8db 	bl	8008774 <BSP_LCD_SetTransparency>
			HAL_Delay(1);
 80005be:	2001      	movs	r0, #1
 80005c0:	f000 fe68 	bl	8001294 <HAL_Delay>
	for (int i = 255; i>0; i--) {
 80005c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005c6:	3b01      	subs	r3, #1
 80005c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80005ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	dcf2      	bgt.n	80005b6 <BSP_DisplayImage+0x16>
//	HAL_Delay(2);

//	++index;
//	index %= ubNumberOfFiles;

	sprintf ((char*)path, "/%-11.11s", pDirectoryFiles[index]);
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	683a      	ldr	r2, [r7, #0]
 80005d6:	4413      	add	r3, r2
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	f107 030c 	add.w	r3, r7, #12
 80005de:	4916      	ldr	r1, [pc, #88]	@ (8000638 <BSP_DisplayImage+0x98>)
 80005e0:	4618      	mov	r0, r3
 80005e2:	f009 fa03 	bl	80099ec <siprintf>
	uint8_t *uwInternelBuffer= (uint8_t *)0xC0260000;
 80005e6:	4b15      	ldr	r3, [pc, #84]	@ (800063c <BSP_DisplayImage+0x9c>)
 80005e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	Storage_OpenReadFile(uwInternelBuffer, (const char*)path);
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	4619      	mov	r1, r3
 80005f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80005f2:	f000 f825 	bl	8000640 <Storage_OpenReadFile>

	BSP_LCD_Clear(((uint32_t)0xFF000000));
 80005f6:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80005fa:	f008 f915 	bl	8008828 <BSP_LCD_Clear>
	BSP_LCD_SelectLayer(1);
 80005fe:	2001      	movs	r0, #1
 8000600:	f008 f8a8 	bl	8008754 <BSP_LCD_SelectLayer>
	BSP_LCD_DrawBitmap(0, 0, uwInternelBuffer);
 8000604:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000606:	2100      	movs	r1, #0
 8000608:	2000      	movs	r0, #0
 800060a:	f008 faa1 	bl	8008b50 <BSP_LCD_DrawBitmap>

	for (int i = 0; i<255; i++) {
 800060e:	2300      	movs	r3, #0
 8000610:	633b      	str	r3, [r7, #48]	@ 0x30
 8000612:	e009      	b.n	8000628 <BSP_DisplayImage+0x88>
		BSP_LCD_SetTransparency(1, i);
 8000614:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000616:	2001      	movs	r0, #1
 8000618:	f008 f8ac 	bl	8008774 <BSP_LCD_SetTransparency>
		HAL_Delay(1);
 800061c:	2001      	movs	r0, #1
 800061e:	f000 fe39 	bl	8001294 <HAL_Delay>
	for (int i = 0; i<255; i++) {
 8000622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000624:	3301      	adds	r3, #1
 8000626:	633b      	str	r3, [r7, #48]	@ 0x30
 8000628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800062a:	2bfe      	cmp	r3, #254	@ 0xfe
 800062c:	ddf2      	ble.n	8000614 <BSP_DisplayImage+0x74>
	}

//	actualLayer ++;
//	actualLayer %=2;
}
 800062e:	bf00      	nop
 8000630:	bf00      	nop
 8000632:	3738      	adds	r7, #56	@ 0x38
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	0800a1e8 	.word	0x0800a1e8
 800063c:	c0260000 	.word	0xc0260000

08000640 <Storage_OpenReadFile>:
  return 0;
}


uint32_t Storage_OpenReadFile(uint8_t *Address, const char* BmpName)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	f5ad 7d12 	sub.w	sp, sp, #584	@ 0x248
 8000646:	af00      	add	r7, sp, #0
 8000648:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800064c:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8000650:	6018      	str	r0, [r3, #0]
 8000652:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8000656:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800065a:	6019      	str	r1, [r3, #0]
  uint32_t index = 0, size = 0, i1 = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 8000662:	2300      	movs	r3, #0
 8000664:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 8000668:	2300      	movs	r3, #0
 800066a:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
  uint32_t BmpAddress;
  FIL F1;

  if (f_open(&F1, (TCHAR const*)BmpName, FA_READ) != FR_OK)
 800066e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8000672:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8000676:	f107 0008 	add.w	r0, r7, #8
 800067a:	2201      	movs	r2, #1
 800067c:	6819      	ldr	r1, [r3, #0]
 800067e:	f007 fa3d 	bl	8007afc <f_open>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <Storage_OpenReadFile+0x4c>
  {
    while(1)
 8000688:	bf00      	nop
 800068a:	e7fd      	b.n	8000688 <Storage_OpenReadFile+0x48>
    {
    } 
  }
  if (f_read (&F1, sector, 30, (UINT *)&BytesRead) != FR_OK)
 800068c:	f107 0008 	add.w	r0, r7, #8
 8000690:	4b49      	ldr	r3, [pc, #292]	@ (80007b8 <Storage_OpenReadFile+0x178>)
 8000692:	221e      	movs	r2, #30
 8000694:	4949      	ldr	r1, [pc, #292]	@ (80007bc <Storage_OpenReadFile+0x17c>)
 8000696:	f007 fbeb 	bl	8007e70 <f_read>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <Storage_OpenReadFile+0x64>
  {
    while(1)
 80006a0:	bf00      	nop
 80006a2:	e7fd      	b.n	80006a0 <Storage_OpenReadFile+0x60>
    {
    } 
  }
  
  BmpAddress = (uint32_t)sector;
 80006a4:	4b45      	ldr	r3, [pc, #276]	@ (80007bc <Storage_OpenReadFile+0x17c>)
 80006a6:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238

  /* Read bitmap size */
  size = *(uint16_t *) (BmpAddress + 2);
 80006aa:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80006ae:	3302      	adds	r3, #2
 80006b0:	881b      	ldrh	r3, [r3, #0]
 80006b2:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
  size |= (*(uint16_t *) (BmpAddress + 4)) << 16;  
 80006b6:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80006ba:	3304      	adds	r3, #4
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	041b      	lsls	r3, r3, #16
 80006c0:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 80006c4:	4313      	orrs	r3, r2
 80006c6:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 
  /* Get bitmap data address offset */
  index = *(uint16_t *) (BmpAddress + 10);
 80006ca:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80006ce:	330a      	adds	r3, #10
 80006d0:	881b      	ldrh	r3, [r3, #0]
 80006d2:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
  index |= (*(uint16_t *) (BmpAddress + 12)) << 16;  
 80006d6:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80006da:	330c      	adds	r3, #12
 80006dc:	881b      	ldrh	r3, [r3, #0]
 80006de:	041b      	lsls	r3, r3, #16
 80006e0:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 80006e4:	4313      	orrs	r3, r2
 80006e6:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
  
  f_close (&F1);
 80006ea:	f107 0308 	add.w	r3, r7, #8
 80006ee:	4618      	mov	r0, r3
 80006f0:	f007 fd7b 	bl	80081ea <f_close>
  
  f_open (&F1, (TCHAR const*)BmpName, FA_READ);
 80006f4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80006f8:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80006fc:	f107 0008 	add.w	r0, r7, #8
 8000700:	2201      	movs	r2, #1
 8000702:	6819      	ldr	r1, [r3, #0]
 8000704:	f007 f9fa 	bl	8007afc <f_open>

  do
  {
    if (size < 256*2)
 8000708:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 800070c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000710:	d204      	bcs.n	800071c <Storage_OpenReadFile+0xdc>
    {
      i1 = size;
 8000712:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8000716:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
 800071a:	e003      	b.n	8000724 <Storage_OpenReadFile+0xe4>
    }
    else
    {
      i1 = 256*2;
 800071c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000720:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
    }
    size -= i1;
 8000724:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 8000728:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 800072c:	1ad3      	subs	r3, r2, r3
 800072e:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
    f_read (&F1, sector, i1, (UINT *)&BytesRead);
 8000732:	f107 0008 	add.w	r0, r7, #8
 8000736:	4b20      	ldr	r3, [pc, #128]	@ (80007b8 <Storage_OpenReadFile+0x178>)
 8000738:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 800073c:	491f      	ldr	r1, [pc, #124]	@ (80007bc <Storage_OpenReadFile+0x17c>)
 800073e:	f007 fb97 	bl	8007e70 <f_read>

    for (index = 0; index < i1; index++)
 8000742:	2300      	movs	r3, #0
 8000744:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 8000748:	e01e      	b.n	8000788 <Storage_OpenReadFile+0x148>
    {
      *(__IO uint8_t*) (Address) = *(__IO uint8_t *)BmpAddress;
 800074a:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	b2da      	uxtb	r2, r3
 8000752:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8000756:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	701a      	strb	r2, [r3, #0]
      
      BmpAddress++;
 800075e:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8000762:	3301      	adds	r3, #1
 8000764:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
      Address++;
 8000768:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800076c:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8000770:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8000774:	f5a2 7211 	sub.w	r2, r2, #580	@ 0x244
 8000778:	6812      	ldr	r2, [r2, #0]
 800077a:	3201      	adds	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
    for (index = 0; index < i1; index++)
 800077e:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8000782:	3301      	adds	r3, #1
 8000784:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 8000788:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 800078c:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8000790:	429a      	cmp	r2, r3
 8000792:	d3da      	bcc.n	800074a <Storage_OpenReadFile+0x10a>
    }  
    
    BmpAddress = (uint32_t)sector;
 8000794:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <Storage_OpenReadFile+0x17c>)
 8000796:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
  }
  while (size > 0);
 800079a:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d1b2      	bne.n	8000708 <Storage_OpenReadFile+0xc8>

  f_close (&F1);
 80007a2:	f107 0308 	add.w	r3, r7, #8
 80007a6:	4618      	mov	r0, r3
 80007a8:	f007 fd1f 	bl	80081ea <f_close>
  
  return 1;
 80007ac:	2301      	movs	r3, #1
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	f507 7712 	add.w	r7, r7, #584	@ 0x248
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000740 	.word	0x20000740
 80007bc:	20000094 	.word	0x20000094

080007c0 <Storage_CheckBitmapFile>:


uint32_t Storage_CheckBitmapFile(const char* BmpName, uint32_t *FileLen)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
  if(f_mount(&fs, (TCHAR const*)"",0))
 80007ca:	2200      	movs	r2, #0
 80007cc:	4913      	ldr	r1, [pc, #76]	@ (800081c <Storage_CheckBitmapFile+0x5c>)
 80007ce:	4814      	ldr	r0, [pc, #80]	@ (8000820 <Storage_CheckBitmapFile+0x60>)
 80007d0:	f007 f94e 	bl	8007a70 <f_mount>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <Storage_CheckBitmapFile+0x1e>
  {
    return 1;
 80007da:	2301      	movs	r3, #1
 80007dc:	e01a      	b.n	8000814 <Storage_CheckBitmapFile+0x54>
  }
  if(f_open (&F, (TCHAR const*)BmpName, FA_READ))
 80007de:	2201      	movs	r2, #1
 80007e0:	6879      	ldr	r1, [r7, #4]
 80007e2:	4810      	ldr	r0, [pc, #64]	@ (8000824 <Storage_CheckBitmapFile+0x64>)
 80007e4:	f007 f98a 	bl	8007afc <f_open>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <Storage_CheckBitmapFile+0x32>
  {
    return 2;
 80007ee:	2302      	movs	r3, #2
 80007f0:	e010      	b.n	8000814 <Storage_CheckBitmapFile+0x54>
  }
  
  f_read (&F, sector, 6, (UINT *)&BytesRead);
 80007f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000828 <Storage_CheckBitmapFile+0x68>)
 80007f4:	2206      	movs	r2, #6
 80007f6:	490d      	ldr	r1, [pc, #52]	@ (800082c <Storage_CheckBitmapFile+0x6c>)
 80007f8:	480a      	ldr	r0, [pc, #40]	@ (8000824 <Storage_CheckBitmapFile+0x64>)
 80007fa:	f007 fb39 	bl	8007e70 <f_read>
  
  if (Buffercmp((uint8_t *)SlidesCheck, (uint8_t *) sector, 2) != 0)
 80007fe:	2202      	movs	r2, #2
 8000800:	490a      	ldr	r1, [pc, #40]	@ (800082c <Storage_CheckBitmapFile+0x6c>)
 8000802:	480b      	ldr	r0, [pc, #44]	@ (8000830 <Storage_CheckBitmapFile+0x70>)
 8000804:	f000 f866 	bl	80008d4 <Buffercmp>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <Storage_CheckBitmapFile+0x52>
  {
    return 3;
 800080e:	2303      	movs	r3, #3
 8000810:	e000      	b.n	8000814 <Storage_CheckBitmapFile+0x54>
  }
  return 0;
 8000812:	2300      	movs	r3, #0
}
 8000814:	4618      	mov	r0, r3
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	0800a1f4 	.word	0x0800a1f4
 8000820:	20000294 	.word	0x20000294
 8000824:	20000510 	.word	0x20000510
 8000828:	20000740 	.word	0x20000740
 800082c:	20000094 	.word	0x20000094
 8000830:	0800a2dc 	.word	0x0800a2dc

08000834 <Storage_GetDirectoryBitmapFiles>:


uint32_t Storage_GetDirectoryBitmapFiles(const char* DirName, char* Files[])
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	6039      	str	r1, [r7, #0]
  FRESULT res;
  uint32_t index = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	60bb      	str	r3, [r7, #8]

  /* Open filesystem */
  if(f_mount(&fs, (TCHAR const*)"",0) != FR_OK)
 8000842:	2200      	movs	r2, #0
 8000844:	491c      	ldr	r1, [pc, #112]	@ (80008b8 <Storage_GetDirectoryBitmapFiles+0x84>)
 8000846:	481d      	ldr	r0, [pc, #116]	@ (80008bc <Storage_GetDirectoryBitmapFiles+0x88>)
 8000848:	f007 f912 	bl	8007a70 <f_mount>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <Storage_GetDirectoryBitmapFiles+0x22>
  {
    return 0;
 8000852:	2300      	movs	r3, #0
 8000854:	e02c      	b.n	80008b0 <Storage_GetDirectoryBitmapFiles+0x7c>
  }

  /* Start to search for wave files */
  res = f_findfirst(&dir, &fno, DirName, "*.bmp");
 8000856:	4b1a      	ldr	r3, [pc, #104]	@ (80008c0 <Storage_GetDirectoryBitmapFiles+0x8c>)
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	491a      	ldr	r1, [pc, #104]	@ (80008c4 <Storage_GetDirectoryBitmapFiles+0x90>)
 800085c:	481a      	ldr	r0, [pc, #104]	@ (80008c8 <Storage_GetDirectoryBitmapFiles+0x94>)
 800085e:	f007 fdec 	bl	800843a <f_findfirst>
 8000862:	4603      	mov	r3, r0
 8000864:	73fb      	strb	r3, [r7, #15]

  /* Repeat while an item is found */
  while (fno.fname[0])
 8000866:	e01b      	b.n	80008a0 <Storage_GetDirectoryBitmapFiles+0x6c>
  {
    if(res == FR_OK)
 8000868:	7bfb      	ldrb	r3, [r7, #15]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d115      	bne.n	800089a <Storage_GetDirectoryBitmapFiles+0x66>
    {
      if(index < MAX_BMP_FILES)
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	2b18      	cmp	r3, #24
 8000872:	d80b      	bhi.n	800088c <Storage_GetDirectoryBitmapFiles+0x58>
      {
        sprintf (Files[index++], "%s", fno.fname);
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	1c5a      	adds	r2, r3, #1
 8000878:	60ba      	str	r2, [r7, #8]
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	683a      	ldr	r2, [r7, #0]
 800087e:	4413      	add	r3, r2
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a12      	ldr	r2, [pc, #72]	@ (80008cc <Storage_GetDirectoryBitmapFiles+0x98>)
 8000884:	4912      	ldr	r1, [pc, #72]	@ (80008d0 <Storage_GetDirectoryBitmapFiles+0x9c>)
 8000886:	4618      	mov	r0, r3
 8000888:	f009 f8b0 	bl	80099ec <siprintf>
      }
      /* Search for next item */
      res = f_findnext(&dir, &fno);
 800088c:	490d      	ldr	r1, [pc, #52]	@ (80008c4 <Storage_GetDirectoryBitmapFiles+0x90>)
 800088e:	480e      	ldr	r0, [pc, #56]	@ (80008c8 <Storage_GetDirectoryBitmapFiles+0x94>)
 8000890:	f007 fdab 	bl	80083ea <f_findnext>
 8000894:	4603      	mov	r3, r0
 8000896:	73fb      	strb	r3, [r7, #15]
 8000898:	e002      	b.n	80008a0 <Storage_GetDirectoryBitmapFiles+0x6c>
    }
    else
    {
      index = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
      break;
 800089e:	e003      	b.n	80008a8 <Storage_GetDirectoryBitmapFiles+0x74>
  while (fno.fname[0])
 80008a0:	4b08      	ldr	r3, [pc, #32]	@ (80008c4 <Storage_GetDirectoryBitmapFiles+0x90>)
 80008a2:	7a5b      	ldrb	r3, [r3, #9]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d1df      	bne.n	8000868 <Storage_GetDirectoryBitmapFiles+0x34>
    }
  }

  f_closedir(&dir);
 80008a8:	4807      	ldr	r0, [pc, #28]	@ (80008c8 <Storage_GetDirectoryBitmapFiles+0x94>)
 80008aa:	f007 fd3b 	bl	8008324 <f_closedir>

  return index;
 80008ae:	68bb      	ldr	r3, [r7, #8]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	0800a1f4 	.word	0x0800a1f4
 80008bc:	20000294 	.word	0x20000294
 80008c0:	0800a1f8 	.word	0x0800a1f8
 80008c4:	200004c4 	.word	0x200004c4
 80008c8:	200004dc 	.word	0x200004dc
 80008cc:	200004cd 	.word	0x200004cd
 80008d0:	0800a200 	.word	0x0800a200

080008d4 <Buffercmp>:


uint8_t Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	4613      	mov	r3, r2
 80008e0:	80fb      	strh	r3, [r7, #6]
  while (BufferLength--)
 80008e2:	e00d      	b.n	8000900 <Buffercmp+0x2c>
  {
    if (*pBuffer1 != *pBuffer2)
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	781a      	ldrb	r2, [r3, #0]
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d001      	beq.n	80008f4 <Buffercmp+0x20>
    {
      return 1;
 80008f0:	2301      	movs	r3, #1
 80008f2:	e00b      	b.n	800090c <Buffercmp+0x38>
    }

    pBuffer1++;
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	3301      	adds	r3, #1
 80008f8:	60fb      	str	r3, [r7, #12]
    pBuffer2++;
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	3301      	adds	r3, #1
 80008fe:	60bb      	str	r3, [r7, #8]
  while (BufferLength--)
 8000900:	88fb      	ldrh	r3, [r7, #6]
 8000902:	1e5a      	subs	r2, r3, #1
 8000904:	80fa      	strh	r2, [r7, #6]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d1ec      	bne.n	80008e4 <Buffercmp+0x10>
  }

  return 0;
 800090a:	2300      	movs	r3, #0
}
 800090c:	4618      	mov	r0, r3
 800090e:	3714      	adds	r7, #20
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800091c:	f3bf 8f4f 	dsb	sy
}
 8000920:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000922:	f3bf 8f6f 	isb	sy
}
 8000926:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000928:	4b0d      	ldr	r3, [pc, #52]	@ (8000960 <SCB_EnableICache+0x48>)
 800092a:	2200      	movs	r2, #0
 800092c:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000930:	f3bf 8f4f 	dsb	sy
}
 8000934:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000936:	f3bf 8f6f 	isb	sy
}
 800093a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800093c:	4b08      	ldr	r3, [pc, #32]	@ (8000960 <SCB_EnableICache+0x48>)
 800093e:	695b      	ldr	r3, [r3, #20]
 8000940:	4a07      	ldr	r2, [pc, #28]	@ (8000960 <SCB_EnableICache+0x48>)
 8000942:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000946:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000948:	f3bf 8f4f 	dsb	sy
}
 800094c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800094e:	f3bf 8f6f 	isb	sy
}
 8000952:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	e000ed00 	.word	0xe000ed00

08000964 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800096a:	4b1f      	ldr	r3, [pc, #124]	@ (80009e8 <SCB_EnableDCache+0x84>)
 800096c:	2200      	movs	r2, #0
 800096e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000972:	f3bf 8f4f 	dsb	sy
}
 8000976:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000978:	4b1b      	ldr	r3, [pc, #108]	@ (80009e8 <SCB_EnableDCache+0x84>)
 800097a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800097e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	0b5b      	lsrs	r3, r3, #13
 8000984:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000988:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	08db      	lsrs	r3, r3, #3
 800098e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000992:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	015a      	lsls	r2, r3, #5
 8000998:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800099c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800099e:	68ba      	ldr	r2, [r7, #8]
 80009a0:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80009a2:	4911      	ldr	r1, [pc, #68]	@ (80009e8 <SCB_EnableDCache+0x84>)
 80009a4:	4313      	orrs	r3, r2
 80009a6:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	1e5a      	subs	r2, r3, #1
 80009ae:	60ba      	str	r2, [r7, #8]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d1ef      	bne.n	8000994 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	1e5a      	subs	r2, r3, #1
 80009b8:	60fa      	str	r2, [r7, #12]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d1e5      	bne.n	800098a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80009be:	f3bf 8f4f 	dsb	sy
}
 80009c2:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80009c4:	4b08      	ldr	r3, [pc, #32]	@ (80009e8 <SCB_EnableDCache+0x84>)
 80009c6:	695b      	ldr	r3, [r3, #20]
 80009c8:	4a07      	ldr	r2, [pc, #28]	@ (80009e8 <SCB_EnableDCache+0x84>)
 80009ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80009ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80009d0:	f3bf 8f4f 	dsb	sy
}
 80009d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009d6:	f3bf 8f6f 	isb	sy
}
 80009da:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80009dc:	bf00      	nop
 80009de:	3714      	adds	r7, #20
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ec:	b590      	push	{r4, r7, lr}
 80009ee:	b08b      	sub	sp, #44	@ 0x2c
 80009f0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN 1 */
	  uint32_t counter = 0, transparency = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80009f6:	2300      	movs	r3, #0
 80009f8:	623b      	str	r3, [r7, #32]
	  uint8_t str[30];
	  uwInternelBuffer = (uint8_t *)0xC0260000;
 80009fa:	4b6e      	ldr	r3, [pc, #440]	@ (8000bb4 <main+0x1c8>)
 80009fc:	4a6e      	ldr	r2, [pc, #440]	@ (8000bb8 <main+0x1cc>)
 80009fe:	601a      	str	r2, [r3, #0]
	/* Enable I-Cache */
	SCB_EnableICache();
 8000a00:	f7ff ff8a 	bl	8000918 <SCB_EnableICache>
	/* Enable D-Cache */
	SCB_EnableDCache();
 8000a04:	f7ff ffae 	bl	8000964 <SCB_EnableDCache>
	  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a08:	f000 fbe7 	bl	80011da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a0c:	f000 f8ee 	bl	8000bec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a10:	f000 f9ac 	bl	8000d6c <MX_GPIO_Init>
  MX_CRC_Init();
 8000a14:	f000 f956 	bl	8000cc4 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000a18:	f000 f976 	bl	8000d08 <MX_DMA2D_Init>
  /* USER CODE BEGIN 2 */
    BSP_LCD_Init();
 8000a1c:	f007 fda2 	bl	8008564 <BSP_LCD_Init>

    /* LCD Initialization */
    BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000a20:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8000a24:	2000      	movs	r0, #0
 8000a26:	f007 fe35 	bl	8008694 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+(BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4));
 8000a2a:	f007 fe0b 	bl	8008644 <BSP_LCD_GetXSize>
 8000a2e:	4604      	mov	r4, r0
 8000a30:	f007 fe1c 	bl	800866c <BSP_LCD_GetYSize>
 8000a34:	4603      	mov	r3, r0
 8000a36:	fb04 f303 	mul.w	r3, r4, r3
 8000a3a:	f103 5340 	add.w	r3, r3, #805306368	@ 0x30000000
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	4619      	mov	r1, r3
 8000a42:	2001      	movs	r0, #1
 8000a44:	f007 fe26 	bl	8008694 <BSP_LCD_LayerDefaultInit>

    /* Enable the LCD */
    BSP_LCD_DisplayOn();
 8000a48:	f008 f934 	bl	8008cb4 <BSP_LCD_DisplayOn>

    /* Select the LCD Background Layer  */
    BSP_LCD_SelectLayer(0);
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f007 fe81 	bl	8008754 <BSP_LCD_SelectLayer>

    /* Clear the Background Layer */
    BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000a52:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000a56:	f007 fee7 	bl	8008828 <BSP_LCD_Clear>

    /* Select the LCD Foreground Layer  */
    BSP_LCD_SelectLayer(1);
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	f007 fe7a 	bl	8008754 <BSP_LCD_SelectLayer>

    /* Clear the Foreground Layer */
    BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000a60:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000a64:	f007 fee0 	bl	8008828 <BSP_LCD_Clear>

    /* Configure the transparency for foreground and background :
       Increase the transparency */
    BSP_LCD_SetTransparency(0, 0);
 8000a68:	2100      	movs	r1, #0
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f007 fe82 	bl	8008774 <BSP_LCD_SetTransparency>
    BSP_LCD_SetTransparency(1, 100);
 8000a70:	2164      	movs	r1, #100	@ 0x64
 8000a72:	2001      	movs	r0, #1
 8000a74:	f007 fe7e 	bl	8008774 <BSP_LCD_SetTransparency>

    BSP_SD_Init();
 8000a78:	f008 fb78 	bl	800916c <BSP_SD_Init>

    while(BSP_SD_IsDetected() != SD_PRESENT)
 8000a7c:	e006      	b.n	8000a8c <main+0xa0>
    {
          BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000a7e:	484f      	ldr	r0, [pc, #316]	@ (8000bbc <main+0x1d0>)
 8000a80:	f007 fe8a 	bl	8008798 <BSP_LCD_SetTextColor>
          BSP_LCD_DisplayStringAtLine(8, (uint8_t*)"  Please insert SD Card                  ");
 8000a84:	494e      	ldr	r1, [pc, #312]	@ (8000bc0 <main+0x1d4>)
 8000a86:	2008      	movs	r0, #8
 8000a88:	f008 f802 	bl	8008a90 <BSP_LCD_DisplayStringAtLine>
    while(BSP_SD_IsDetected() != SD_PRESENT)
 8000a8c:	f008 fbb8 	bl	8009200 <BSP_SD_IsDetected>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d1f3      	bne.n	8000a7e <main+0x92>
    }

    BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000a96:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000a9a:	f007 fec5 	bl	8008828 <BSP_LCD_Clear>

    /*##-2- Link the SD Card disk I/O driver ###################################*/
    if(FATFS_LinkDriver(&SD_Driver, SD_Path) == 0)
 8000a9e:	4949      	ldr	r1, [pc, #292]	@ (8000bc4 <main+0x1d8>)
 8000aa0:	4849      	ldr	r0, [pc, #292]	@ (8000bc8 <main+0x1dc>)
 8000aa2:	f007 fd35 	bl	8008510 <FATFS_LinkDriver>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d142      	bne.n	8000b32 <main+0x146>
    {
      /*##-3- Initialize the Directory Files pointers (heap) ###################*/
      for (counter = 0; counter < MAX_BMP_FILES; counter++)
 8000aac:	2300      	movs	r3, #0
 8000aae:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ab0:	e01a      	b.n	8000ae8 <main+0xfc>
      {
        pDirectoryFiles[counter] = malloc(MAX_BMP_FILE_NAME);
 8000ab2:	200b      	movs	r0, #11
 8000ab4:	f008 fedc 	bl	8009870 <malloc>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	4619      	mov	r1, r3
 8000abc:	4a43      	ldr	r2, [pc, #268]	@ (8000bcc <main+0x1e0>)
 8000abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        if(pDirectoryFiles[counter] == NULL)
 8000ac4:	4a41      	ldr	r2, [pc, #260]	@ (8000bcc <main+0x1e0>)
 8000ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d108      	bne.n	8000ae2 <main+0xf6>
        {
          /* Set the Text Color */
          BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000ad0:	483a      	ldr	r0, [pc, #232]	@ (8000bbc <main+0x1d0>)
 8000ad2:	f007 fe61 	bl	8008798 <BSP_LCD_SetTextColor>

          BSP_LCD_DisplayStringAtLine(8, (uint8_t*)"  Cannot allocate memory ");
 8000ad6:	493e      	ldr	r1, [pc, #248]	@ (8000bd0 <main+0x1e4>)
 8000ad8:	2008      	movs	r0, #8
 8000ada:	f007 ffd9 	bl	8008a90 <BSP_LCD_DisplayStringAtLine>

          while(1)
 8000ade:	bf00      	nop
 8000ae0:	e7fd      	b.n	8000ade <main+0xf2>
      for (counter = 0; counter < MAX_BMP_FILES; counter++)
 8000ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aea:	2b18      	cmp	r3, #24
 8000aec:	d9e1      	bls.n	8000ab2 <main+0xc6>
          }
        }
      }

      /* Get the BMP file names on root directory */
      ubNumberOfFiles = Storage_GetDirectoryBitmapFiles("/", pDirectoryFiles);
 8000aee:	4937      	ldr	r1, [pc, #220]	@ (8000bcc <main+0x1e0>)
 8000af0:	4838      	ldr	r0, [pc, #224]	@ (8000bd4 <main+0x1e8>)
 8000af2:	f7ff fe9f 	bl	8000834 <Storage_GetDirectoryBitmapFiles>
 8000af6:	4603      	mov	r3, r0
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	4b37      	ldr	r3, [pc, #220]	@ (8000bd8 <main+0x1ec>)
 8000afc:	701a      	strb	r2, [r3, #0]

      if (ubNumberOfFiles == 0)
 8000afe:	4b36      	ldr	r3, [pc, #216]	@ (8000bd8 <main+0x1ec>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d117      	bne.n	8000b36 <main+0x14a>
      {
        for (counter = 0; counter < MAX_BMP_FILES; counter++)
 8000b06:	2300      	movs	r3, #0
 8000b08:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b0a:	e009      	b.n	8000b20 <main+0x134>
        {
          free(pDirectoryFiles[counter]);
 8000b0c:	4a2f      	ldr	r2, [pc, #188]	@ (8000bcc <main+0x1e0>)
 8000b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f008 feb3 	bl	8009880 <free>
        for (counter = 0; counter < MAX_BMP_FILES; counter++)
 8000b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b22:	2b18      	cmp	r3, #24
 8000b24:	d9f2      	bls.n	8000b0c <main+0x120>
        }
        BSP_LCD_DisplayStringAtLine(8, (uint8_t*)"  No Bitmap files...      ");
 8000b26:	492d      	ldr	r1, [pc, #180]	@ (8000bdc <main+0x1f0>)
 8000b28:	2008      	movs	r0, #8
 8000b2a:	f007 ffb1 	bl	8008a90 <BSP_LCD_DisplayStringAtLine>
        while(1)
 8000b2e:	bf00      	nop
 8000b30:	e7fd      	b.n	8000b2e <main+0x142>
      }
    }
    else
    {
      /* FatFs Initialization Error */
      Error_Handler();
 8000b32:	f000 f959 	bl	8000de8 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	    counter = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	627b      	str	r3, [r7, #36]	@ 0x24

	  	    do
	  	    {
			sprintf ((char*)str, "/%-11.11s", pDirectoryFiles[counter]);
 8000b3a:	4a24      	ldr	r2, [pc, #144]	@ (8000bcc <main+0x1e0>)
 8000b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b3e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b42:	463b      	mov	r3, r7
 8000b44:	4926      	ldr	r1, [pc, #152]	@ (8000be0 <main+0x1f4>)
 8000b46:	4618      	mov	r0, r3
 8000b48:	f008 ff50 	bl	80099ec <siprintf>
	  	      if (Storage_CheckBitmapFile((const char*)str, &uwBmplen) == 0)
 8000b4c:	463b      	mov	r3, r7
 8000b4e:	4925      	ldr	r1, [pc, #148]	@ (8000be4 <main+0x1f8>)
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fe35 	bl	80007c0 <Storage_CheckBitmapFile>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d11c      	bne.n	8000b96 <main+0x1aa>
	  	        /* Format the string */

	  	        /* Set LCD foreground Layer */


	  	      BSP_DisplayImage(counter,pDirectoryFiles,ubNumberOfFiles);
 8000b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	4a1d      	ldr	r2, [pc, #116]	@ (8000bd8 <main+0x1ec>)
 8000b62:	7812      	ldrb	r2, [r2, #0]
 8000b64:	4919      	ldr	r1, [pc, #100]	@ (8000bcc <main+0x1e0>)
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff fd1a 	bl	80005a0 <BSP_DisplayImage>
//	  	          HAL_Delay(2);
//	  	        }


	  	        /* Wait for tamper button pressed */
	  	        while (BSP_PB_GetState(BUTTON_TAMPER) == RESET)
 8000b6c:	bf00      	nop
 8000b6e:	2001      	movs	r0, #1
 8000b70:	f007 fcde 	bl	8008530 <BSP_PB_GetState>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d0f9      	beq.n	8000b6e <main+0x182>
//
//	  	        /* Clear the Foreground Layer */
//	  	        BSP_LCD_Clear(LCD_COLOR_BLACK);

	  	        /* Jump to the next image */
	  	        counter++;
 8000b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	627b      	str	r3, [r7, #36]	@ 0x24
	  	        counter %= ubNumberOfFiles;
 8000b80:	4b15      	ldr	r3, [pc, #84]	@ (8000bd8 <main+0x1ec>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	461a      	mov	r2, r3
 8000b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b88:	fbb3 f1f2 	udiv	r1, r3, r2
 8000b8c:	fb01 f202 	mul.w	r2, r1, r2
 8000b90:	1a9b      	subs	r3, r3, r2
 8000b92:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b94:	e7d1      	b.n	8000b3a <main+0x14e>

	  	      }
				else
				{
				  /* Set the Text Color */
				  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000b96:	4809      	ldr	r0, [pc, #36]	@ (8000bbc <main+0x1d0>)
 8000b98:	f007 fdfe 	bl	8008798 <BSP_LCD_SetTextColor>

				  BSP_LCD_DisplayStringAtLine(7, (uint8_t *) str);
 8000b9c:	463b      	mov	r3, r7
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	2007      	movs	r0, #7
 8000ba2:	f007 ff75 	bl	8008a90 <BSP_LCD_DisplayStringAtLine>
				  BSP_LCD_DisplayStringAtLine(8, (uint8_t*)"    File type not supported. ");
 8000ba6:	4910      	ldr	r1, [pc, #64]	@ (8000be8 <main+0x1fc>)
 8000ba8:	2008      	movs	r0, #8
 8000baa:	f007 ff71 	bl	8008a90 <BSP_LCD_DisplayStringAtLine>
				  while(1);
 8000bae:	bf00      	nop
 8000bb0:	e7fd      	b.n	8000bae <main+0x1c2>
 8000bb2:	bf00      	nop
 8000bb4:	200007b4 	.word	0x200007b4
 8000bb8:	c0260000 	.word	0xc0260000
 8000bbc:	ffff0000 	.word	0xffff0000
 8000bc0:	0800a204 	.word	0x0800a204
 8000bc4:	20000744 	.word	0x20000744
 8000bc8:	0800a2e0 	.word	0x0800a2e0
 8000bcc:	20000748 	.word	0x20000748
 8000bd0:	0800a230 	.word	0x0800a230
 8000bd4:	0800a24c 	.word	0x0800a24c
 8000bd8:	200007ac 	.word	0x200007ac
 8000bdc:	0800a250 	.word	0x0800a250
 8000be0:	0800a26c 	.word	0x0800a26c
 8000be4:	200007b0 	.word	0x200007b0
 8000be8:	0800a278 	.word	0x0800a278

08000bec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b094      	sub	sp, #80	@ 0x50
 8000bf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bf2:	f107 0320 	add.w	r3, r7, #32
 8000bf6:	2230      	movs	r2, #48	@ 0x30
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f008 ff16 	bl	8009a2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c00:	f107 030c 	add.w	r3, r7, #12
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c10:	4b2a      	ldr	r3, [pc, #168]	@ (8000cbc <SystemClock_Config+0xd0>)
 8000c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c14:	4a29      	ldr	r2, [pc, #164]	@ (8000cbc <SystemClock_Config+0xd0>)
 8000c16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c1c:	4b27      	ldr	r3, [pc, #156]	@ (8000cbc <SystemClock_Config+0xd0>)
 8000c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c28:	4b25      	ldr	r3, [pc, #148]	@ (8000cc0 <SystemClock_Config+0xd4>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a24      	ldr	r2, [pc, #144]	@ (8000cc0 <SystemClock_Config+0xd4>)
 8000c2e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c32:	6013      	str	r3, [r2, #0]
 8000c34:	4b22      	ldr	r3, [pc, #136]	@ (8000cc0 <SystemClock_Config+0xd4>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c40:	2302      	movs	r3, #2
 8000c42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c44:	2301      	movs	r3, #1
 8000c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c48:	2310      	movs	r3, #16
 8000c4a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c50:	2300      	movs	r3, #0
 8000c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c54:	2308      	movs	r3, #8
 8000c56:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 8000c58:	23c8      	movs	r3, #200	@ 0xc8
 8000c5a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000c60:	2309      	movs	r3, #9
 8000c62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c64:	f107 0320 	add.w	r3, r7, #32
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f001 ff7d 	bl	8002b68 <HAL_RCC_OscConfig>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000c74:	f000 f8b8 	bl	8000de8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c78:	f001 ff26 	bl	8002ac8 <HAL_PWREx_EnableOverDrive>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c82:	f000 f8b1 	bl	8000de8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c86:	230f      	movs	r3, #15
 8000c88:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c92:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c96:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c9c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000c9e:	f107 030c 	add.w	r3, r7, #12
 8000ca2:	2106      	movs	r1, #6
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f002 fa03 	bl	80030b0 <HAL_RCC_ClockConfig>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000cb0:	f000 f89a 	bl	8000de8 <Error_Handler>
  }
}
 8000cb4:	bf00      	nop
 8000cb6:	3750      	adds	r7, #80	@ 0x50
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40007000 	.word	0x40007000

08000cc4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8000d00 <MX_CRC_Init+0x3c>)
 8000cca:	4a0e      	ldr	r2, [pc, #56]	@ (8000d04 <MX_CRC_Init+0x40>)
 8000ccc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000cce:	4b0c      	ldr	r3, [pc, #48]	@ (8000d00 <MX_CRC_Init+0x3c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8000d00 <MX_CRC_Init+0x3c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000cda:	4b09      	ldr	r3, [pc, #36]	@ (8000d00 <MX_CRC_Init+0x3c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000ce0:	4b07      	ldr	r3, [pc, #28]	@ (8000d00 <MX_CRC_Init+0x3c>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000ce6:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <MX_CRC_Init+0x3c>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000cec:	4804      	ldr	r0, [pc, #16]	@ (8000d00 <MX_CRC_Init+0x3c>)
 8000cee:	f000 fc07 	bl	8001500 <HAL_CRC_Init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000cf8:	f000 f876 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	200007b8 	.word	0x200007b8
 8000d04:	40023000 	.word	0x40023000

08000d08 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000d0c:	4b15      	ldr	r3, [pc, #84]	@ (8000d64 <MX_DMA2D_Init+0x5c>)
 8000d0e:	4a16      	ldr	r2, [pc, #88]	@ (8000d68 <MX_DMA2D_Init+0x60>)
 8000d10:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000d12:	4b14      	ldr	r3, [pc, #80]	@ (8000d64 <MX_DMA2D_Init+0x5c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000d18:	4b12      	ldr	r3, [pc, #72]	@ (8000d64 <MX_DMA2D_Init+0x5c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000d1e:	4b11      	ldr	r3, [pc, #68]	@ (8000d64 <MX_DMA2D_Init+0x5c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000d24:	4b0f      	ldr	r3, [pc, #60]	@ (8000d64 <MX_DMA2D_Init+0x5c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d64 <MX_DMA2D_Init+0x5c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000d30:	4b0c      	ldr	r3, [pc, #48]	@ (8000d64 <MX_DMA2D_Init+0x5c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000d36:	4b0b      	ldr	r3, [pc, #44]	@ (8000d64 <MX_DMA2D_Init+0x5c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000d3c:	4809      	ldr	r0, [pc, #36]	@ (8000d64 <MX_DMA2D_Init+0x5c>)
 8000d3e:	f000 fe87 	bl	8001a50 <HAL_DMA2D_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000d48:	f000 f84e 	bl	8000de8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	4805      	ldr	r0, [pc, #20]	@ (8000d64 <MX_DMA2D_Init+0x5c>)
 8000d50:	f000 ffdc 	bl	8001d0c <HAL_DMA2D_ConfigLayer>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000d5a:	f000 f845 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	200007dc 	.word	0x200007dc
 8000d68:	4002b000 	.word	0x4002b000

08000d6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b088      	sub	sp, #32
 8000d70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d72:	f107 030c 	add.w	r3, r7, #12
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
 8000d7e:	60da      	str	r2, [r3, #12]
 8000d80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000d82:	4b17      	ldr	r3, [pc, #92]	@ (8000de0 <MX_GPIO_Init+0x74>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	4a16      	ldr	r2, [pc, #88]	@ (8000de0 <MX_GPIO_Init+0x74>)
 8000d88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8e:	4b14      	ldr	r3, [pc, #80]	@ (8000de0 <MX_GPIO_Init+0x74>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d9a:	4b11      	ldr	r3, [pc, #68]	@ (8000de0 <MX_GPIO_Init+0x74>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	4a10      	ldr	r2, [pc, #64]	@ (8000de0 <MX_GPIO_Init+0x74>)
 8000da0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da6:	4b0e      	ldr	r3, [pc, #56]	@ (8000de0 <MX_GPIO_Init+0x74>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2102      	movs	r1, #2
 8000db6:	480b      	ldr	r0, [pc, #44]	@ (8000de4 <MX_GPIO_Init+0x78>)
 8000db8:	f001 fa9a 	bl	80022f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000dcc:	f107 030c 	add.w	r3, r7, #12
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4804      	ldr	r0, [pc, #16]	@ (8000de4 <MX_GPIO_Init+0x78>)
 8000dd4:	f001 f8c8 	bl	8001f68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dd8:	bf00      	nop
 8000dda:	3720      	adds	r7, #32
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40022000 	.word	0x40022000

08000de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000dec:	b672      	cpsid	i
}
 8000dee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <Error_Handler+0x8>

08000df4 <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8000e2c <SD_CheckStatus+0x38>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8000e04:	f008 fb60 	bl	80094c8 <BSP_SD_GetCardState>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d107      	bne.n	8000e1e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8000e0e:	4b07      	ldr	r3, [pc, #28]	@ (8000e2c <SD_CheckStatus+0x38>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	f023 0301 	bic.w	r3, r3, #1
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	4b04      	ldr	r3, [pc, #16]	@ (8000e2c <SD_CheckStatus+0x38>)
 8000e1c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8000e1e:	4b03      	ldr	r3, [pc, #12]	@ (8000e2c <SD_CheckStatus+0x38>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	b2db      	uxtb	r3, r3
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000000 	.word	0x20000000

08000e30 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8000e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e68 <SD_initialize+0x38>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	701a      	strb	r2, [r3, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8000e40:	f008 f994 	bl	800916c <BSP_SD_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d107      	bne.n	8000e5a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ffd1 	bl	8000df4 <SD_CheckStatus>
 8000e52:	4603      	mov	r3, r0
 8000e54:	461a      	mov	r2, r3
 8000e56:	4b04      	ldr	r3, [pc, #16]	@ (8000e68 <SD_initialize+0x38>)
 8000e58:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8000e5a:	4b03      	ldr	r3, [pc, #12]	@ (8000e68 <SD_initialize+0x38>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	b2db      	uxtb	r3, r3
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000000 	.word	0x20000000

08000e6c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ffbb 	bl	8000df4 <SD_CheckStatus>
 8000e7e:	4603      	mov	r3, r0
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60b9      	str	r1, [r7, #8]
 8000e90:	607a      	str	r2, [r7, #4]
 8000e92:	603b      	str	r3, [r7, #0]
 8000e94:	4603      	mov	r3, r0
 8000e96:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8000e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea0:	683a      	ldr	r2, [r7, #0]
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	68b8      	ldr	r0, [r7, #8]
 8000ea6:	f008 f9c3 	bl	8009230 <BSP_SD_ReadBlocks>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d107      	bne.n	8000ec0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8000eb0:	bf00      	nop
 8000eb2:	f008 fb09 	bl	80094c8 <BSP_SD_GetCardState>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d1fa      	bne.n	8000eb2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8000ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <SD_write>:


#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b086      	sub	sp, #24
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
 8000ed4:	603b      	str	r3, [r7, #0]
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee2:	683a      	ldr	r2, [r7, #0]
 8000ee4:	6879      	ldr	r1, [r7, #4]
 8000ee6:	68b8      	ldr	r0, [r7, #8]
 8000ee8:	f008 f9be 	bl	8009268 <BSP_SD_WriteBlocks>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d107      	bne.n	8000f02 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8000ef2:	bf00      	nop
 8000ef4:	f008 fae8 	bl	80094c8 <BSP_SD_GetCardState>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d1fa      	bne.n	8000ef4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8000efe:	2300      	movs	r3, #0
 8000f00:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8000f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3718      	adds	r7, #24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <SD_ioctl>:
#endif /* _USE_WRITE == 1 */


#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08c      	sub	sp, #48	@ 0x30
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	603a      	str	r2, [r7, #0]
 8000f16:	71fb      	strb	r3, [r7, #7]
 8000f18:	460b      	mov	r3, r1
 8000f1a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000f22:	4b25      	ldr	r3, [pc, #148]	@ (8000fb8 <SD_ioctl+0xac>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	f003 0301 	and.w	r3, r3, #1
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <SD_ioctl+0x28>
 8000f30:	2303      	movs	r3, #3
 8000f32:	e03c      	b.n	8000fae <SD_ioctl+0xa2>

  switch (cmd)
 8000f34:	79bb      	ldrb	r3, [r7, #6]
 8000f36:	2b03      	cmp	r3, #3
 8000f38:	d834      	bhi.n	8000fa4 <SD_ioctl+0x98>
 8000f3a:	a201      	add	r2, pc, #4	@ (adr r2, 8000f40 <SD_ioctl+0x34>)
 8000f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f40:	08000f51 	.word	0x08000f51
 8000f44:	08000f59 	.word	0x08000f59
 8000f48:	08000f71 	.word	0x08000f71
 8000f4c:	08000f8b 	.word	0x08000f8b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8000f50:	2300      	movs	r3, #0
 8000f52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8000f56:	e028      	b.n	8000faa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8000f58:	f107 030c 	add.w	r3, r7, #12
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f008 fac3 	bl	80094e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8000f62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8000f6e:	e01c      	b.n	8000faa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8000f70:	f107 030c 	add.w	r3, r7, #12
 8000f74:	4618      	mov	r0, r3
 8000f76:	f008 fab7 	bl	80094e8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8000f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f7c:	b29a      	uxth	r2, r3
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8000f82:	2300      	movs	r3, #0
 8000f84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8000f88:	e00f      	b.n	8000faa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8000f8a:	f107 030c 	add.w	r3, r7, #12
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f008 faaa 	bl	80094e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8000f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f96:	0a5a      	lsrs	r2, r3, #9
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	601a      	str	r2, [r3, #0]
	res = RES_OK;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8000fa2:	e002      	b.n	8000faa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8000fa4:	2304      	movs	r3, #4
 8000fa6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8000faa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3730      	adds	r7, #48	@ 0x30
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000000 	.word	0x20000000

08000fbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc2:	4b0f      	ldr	r3, [pc, #60]	@ (8001000 <HAL_MspInit+0x44>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc6:	4a0e      	ldr	r2, [pc, #56]	@ (8001000 <HAL_MspInit+0x44>)
 8000fc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fce:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <HAL_MspInit+0x44>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fda:	4b09      	ldr	r3, [pc, #36]	@ (8001000 <HAL_MspInit+0x44>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fde:	4a08      	ldr	r2, [pc, #32]	@ (8001000 <HAL_MspInit+0x44>)
 8000fe0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fe4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fe6:	4b06      	ldr	r3, [pc, #24]	@ (8001000 <HAL_MspInit+0x44>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fee:	603b      	str	r3, [r7, #0]
 8000ff0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	40023800 	.word	0x40023800

08001004 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a0a      	ldr	r2, [pc, #40]	@ (800103c <HAL_CRC_MspInit+0x38>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d10b      	bne.n	800102e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001016:	4b0a      	ldr	r3, [pc, #40]	@ (8001040 <HAL_CRC_MspInit+0x3c>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101a:	4a09      	ldr	r2, [pc, #36]	@ (8001040 <HAL_CRC_MspInit+0x3c>)
 800101c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001020:	6313      	str	r3, [r2, #48]	@ 0x30
 8001022:	4b07      	ldr	r3, [pc, #28]	@ (8001040 <HAL_CRC_MspInit+0x3c>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 800102e:	bf00      	nop
 8001030:	3714      	adds	r7, #20
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40023000 	.word	0x40023000
 8001040:	40023800 	.word	0x40023800

08001044 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a0a      	ldr	r2, [pc, #40]	@ (800107c <HAL_DMA2D_MspInit+0x38>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d10b      	bne.n	800106e <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001056:	4b0a      	ldr	r3, [pc, #40]	@ (8001080 <HAL_DMA2D_MspInit+0x3c>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	4a09      	ldr	r2, [pc, #36]	@ (8001080 <HAL_DMA2D_MspInit+0x3c>)
 800105c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001060:	6313      	str	r3, [r2, #48]	@ 0x30
 8001062:	4b07      	ldr	r3, [pc, #28]	@ (8001080 <HAL_DMA2D_MspInit+0x3c>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 800106e:	bf00      	nop
 8001070:	3714      	adds	r7, #20
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	4002b000 	.word	0x4002b000
 8001080:	40023800 	.word	0x40023800

08001084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001088:	bf00      	nop
 800108a:	e7fd      	b.n	8001088 <NMI_Handler+0x4>

0800108c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <HardFault_Handler+0x4>

08001094 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <MemManage_Handler+0x4>

0800109c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <BusFault_Handler+0x4>

080010a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a8:	bf00      	nop
 80010aa:	e7fd      	b.n	80010a8 <UsageFault_Handler+0x4>

080010ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010da:	f000 f8bb 	bl	8001254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
	...

080010e4 <LTDC_IRQHandler>:
/* please refer to the startup file (startup_stm32f7xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void LTDC_IRQHandler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  HAL_LTDC_IRQHandler(&hLtdcHandler);
 80010e8:	4802      	ldr	r0, [pc, #8]	@ (80010f4 <LTDC_IRQHandler+0x10>)
 80010ea:	f001 fa01 	bl	80024f0 <HAL_LTDC_IRQHandler>
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000860 	.word	0x20000860

080010f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001100:	4a14      	ldr	r2, [pc, #80]	@ (8001154 <_sbrk+0x5c>)
 8001102:	4b15      	ldr	r3, [pc, #84]	@ (8001158 <_sbrk+0x60>)
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800110c:	4b13      	ldr	r3, [pc, #76]	@ (800115c <_sbrk+0x64>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d102      	bne.n	800111a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001114:	4b11      	ldr	r3, [pc, #68]	@ (800115c <_sbrk+0x64>)
 8001116:	4a12      	ldr	r2, [pc, #72]	@ (8001160 <_sbrk+0x68>)
 8001118:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800111a:	4b10      	ldr	r3, [pc, #64]	@ (800115c <_sbrk+0x64>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4413      	add	r3, r2
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	429a      	cmp	r2, r3
 8001126:	d207      	bcs.n	8001138 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001128:	f008 fc98 	bl	8009a5c <__errno>
 800112c:	4603      	mov	r3, r0
 800112e:	220c      	movs	r2, #12
 8001130:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001132:	f04f 33ff 	mov.w	r3, #4294967295
 8001136:	e009      	b.n	800114c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001138:	4b08      	ldr	r3, [pc, #32]	@ (800115c <_sbrk+0x64>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800113e:	4b07      	ldr	r3, [pc, #28]	@ (800115c <_sbrk+0x64>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4413      	add	r3, r2
 8001146:	4a05      	ldr	r2, [pc, #20]	@ (800115c <_sbrk+0x64>)
 8001148:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800114a:	68fb      	ldr	r3, [r7, #12]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20050000 	.word	0x20050000
 8001158:	00000400 	.word	0x00000400
 800115c:	2000081c 	.word	0x2000081c
 8001160:	20000d38 	.word	0x20000d38

08001164 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001168:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <SystemInit+0x20>)
 800116a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800116e:	4a05      	ldr	r2, [pc, #20]	@ (8001184 <SystemInit+0x20>)
 8001170:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001174:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001188:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011c0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 800118c:	f7ff ffea 	bl	8001164 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001190:	480c      	ldr	r0, [pc, #48]	@ (80011c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001192:	490d      	ldr	r1, [pc, #52]	@ (80011c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001194:	4a0d      	ldr	r2, [pc, #52]	@ (80011cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001196:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001198:	e002      	b.n	80011a0 <LoopCopyDataInit>

0800119a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800119a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800119c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800119e:	3304      	adds	r3, #4

080011a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a4:	d3f9      	bcc.n	800119a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011a6:	4a0a      	ldr	r2, [pc, #40]	@ (80011d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011a8:	4c0a      	ldr	r4, [pc, #40]	@ (80011d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011ac:	e001      	b.n	80011b2 <LoopFillZerobss>

080011ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b0:	3204      	adds	r2, #4

080011b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b4:	d3fb      	bcc.n	80011ae <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80011b6:	f008 fc57 	bl	8009a68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ba:	f7ff fc17 	bl	80009ec <main>
  bx  lr    
 80011be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011c0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80011c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80011cc:	0800be90 	.word	0x0800be90
  ldr r2, =_sbss
 80011d0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80011d4:	20000d34 	.word	0x20000d34

080011d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011d8:	e7fe      	b.n	80011d8 <ADC_IRQHandler>

080011da <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011de:	2003      	movs	r0, #3
 80011e0:	f000 f94c 	bl	800147c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011e4:	200f      	movs	r0, #15
 80011e6:	f000 f805 	bl	80011f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011ea:	f7ff fee7 	bl	8000fbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011fc:	4b12      	ldr	r3, [pc, #72]	@ (8001248 <HAL_InitTick+0x54>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4b12      	ldr	r3, [pc, #72]	@ (800124c <HAL_InitTick+0x58>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	4619      	mov	r1, r3
 8001206:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800120a:	fbb3 f3f1 	udiv	r3, r3, r1
 800120e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001212:	4618      	mov	r0, r3
 8001214:	f000 f967 	bl	80014e6 <HAL_SYSTICK_Config>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e00e      	b.n	8001240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2b0f      	cmp	r3, #15
 8001226:	d80a      	bhi.n	800123e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001228:	2200      	movs	r2, #0
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	f04f 30ff 	mov.w	r0, #4294967295
 8001230:	f000 f92f 	bl	8001492 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001234:	4a06      	ldr	r2, [pc, #24]	@ (8001250 <HAL_InitTick+0x5c>)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800123a:	2300      	movs	r3, #0
 800123c:	e000      	b.n	8001240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
}
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000004 	.word	0x20000004
 800124c:	2000000c 	.word	0x2000000c
 8001250:	20000008 	.word	0x20000008

08001254 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001258:	4b06      	ldr	r3, [pc, #24]	@ (8001274 <HAL_IncTick+0x20>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	461a      	mov	r2, r3
 800125e:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <HAL_IncTick+0x24>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4413      	add	r3, r2
 8001264:	4a04      	ldr	r2, [pc, #16]	@ (8001278 <HAL_IncTick+0x24>)
 8001266:	6013      	str	r3, [r2, #0]
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	2000000c 	.word	0x2000000c
 8001278:	20000820 	.word	0x20000820

0800127c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return uwTick;
 8001280:	4b03      	ldr	r3, [pc, #12]	@ (8001290 <HAL_GetTick+0x14>)
 8001282:	681b      	ldr	r3, [r3, #0]
}
 8001284:	4618      	mov	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20000820 	.word	0x20000820

08001294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800129c:	f7ff ffee 	bl	800127c <HAL_GetTick>
 80012a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ac:	d005      	beq.n	80012ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ae:	4b0a      	ldr	r3, [pc, #40]	@ (80012d8 <HAL_Delay+0x44>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	461a      	mov	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4413      	add	r3, r2
 80012b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ba:	bf00      	nop
 80012bc:	f7ff ffde 	bl	800127c <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d8f7      	bhi.n	80012bc <HAL_Delay+0x28>
  {
  }
}
 80012cc:	bf00      	nop
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	2000000c 	.word	0x2000000c

080012dc <__NVIC_SetPriorityGrouping>:
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012ec:	4b0b      	ldr	r3, [pc, #44]	@ (800131c <__NVIC_SetPriorityGrouping+0x40>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012f2:	68ba      	ldr	r2, [r7, #8]
 80012f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012f8:	4013      	ands	r3, r2
 80012fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001304:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <__NVIC_SetPriorityGrouping+0x44>)
 8001306:	4313      	orrs	r3, r2
 8001308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800130a:	4a04      	ldr	r2, [pc, #16]	@ (800131c <__NVIC_SetPriorityGrouping+0x40>)
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	60d3      	str	r3, [r2, #12]
}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000ed00 	.word	0xe000ed00
 8001320:	05fa0000 	.word	0x05fa0000

08001324 <__NVIC_GetPriorityGrouping>:
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001328:	4b04      	ldr	r3, [pc, #16]	@ (800133c <__NVIC_GetPriorityGrouping+0x18>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	0a1b      	lsrs	r3, r3, #8
 800132e:	f003 0307 	and.w	r3, r3, #7
}
 8001332:	4618      	mov	r0, r3
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <__NVIC_EnableIRQ>:
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	2b00      	cmp	r3, #0
 8001350:	db0b      	blt.n	800136a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	f003 021f 	and.w	r2, r3, #31
 8001358:	4907      	ldr	r1, [pc, #28]	@ (8001378 <__NVIC_EnableIRQ+0x38>)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	095b      	lsrs	r3, r3, #5
 8001360:	2001      	movs	r0, #1
 8001362:	fa00 f202 	lsl.w	r2, r0, r2
 8001366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	e000e100 	.word	0xe000e100

0800137c <__NVIC_SetPriority>:
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	6039      	str	r1, [r7, #0]
 8001386:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138c:	2b00      	cmp	r3, #0
 800138e:	db0a      	blt.n	80013a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	b2da      	uxtb	r2, r3
 8001394:	490c      	ldr	r1, [pc, #48]	@ (80013c8 <__NVIC_SetPriority+0x4c>)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	0112      	lsls	r2, r2, #4
 800139c:	b2d2      	uxtb	r2, r2
 800139e:	440b      	add	r3, r1
 80013a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80013a4:	e00a      	b.n	80013bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4908      	ldr	r1, [pc, #32]	@ (80013cc <__NVIC_SetPriority+0x50>)
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	f003 030f 	and.w	r3, r3, #15
 80013b2:	3b04      	subs	r3, #4
 80013b4:	0112      	lsls	r2, r2, #4
 80013b6:	b2d2      	uxtb	r2, r2
 80013b8:	440b      	add	r3, r1
 80013ba:	761a      	strb	r2, [r3, #24]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000e100 	.word	0xe000e100
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <NVIC_EncodePriority>:
{
 80013d0:	b480      	push	{r7}
 80013d2:	b089      	sub	sp, #36	@ 0x24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f1c3 0307 	rsb	r3, r3, #7
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	bf28      	it	cs
 80013ee:	2304      	movcs	r3, #4
 80013f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3304      	adds	r3, #4
 80013f6:	2b06      	cmp	r3, #6
 80013f8:	d902      	bls.n	8001400 <NVIC_EncodePriority+0x30>
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3b03      	subs	r3, #3
 80013fe:	e000      	b.n	8001402 <NVIC_EncodePriority+0x32>
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001404:	f04f 32ff 	mov.w	r2, #4294967295
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43da      	mvns	r2, r3
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	401a      	ands	r2, r3
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001418:	f04f 31ff 	mov.w	r1, #4294967295
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	fa01 f303 	lsl.w	r3, r1, r3
 8001422:	43d9      	mvns	r1, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001428:	4313      	orrs	r3, r2
}
 800142a:	4618      	mov	r0, r3
 800142c:	3724      	adds	r7, #36	@ 0x24
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
	...

08001438 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3b01      	subs	r3, #1
 8001444:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001448:	d301      	bcc.n	800144e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800144a:	2301      	movs	r3, #1
 800144c:	e00f      	b.n	800146e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800144e:	4a0a      	ldr	r2, [pc, #40]	@ (8001478 <SysTick_Config+0x40>)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3b01      	subs	r3, #1
 8001454:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001456:	210f      	movs	r1, #15
 8001458:	f04f 30ff 	mov.w	r0, #4294967295
 800145c:	f7ff ff8e 	bl	800137c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001460:	4b05      	ldr	r3, [pc, #20]	@ (8001478 <SysTick_Config+0x40>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001466:	4b04      	ldr	r3, [pc, #16]	@ (8001478 <SysTick_Config+0x40>)
 8001468:	2207      	movs	r2, #7
 800146a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	e000e010 	.word	0xe000e010

0800147c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff ff29 	bl	80012dc <__NVIC_SetPriorityGrouping>
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001492:	b580      	push	{r7, lr}
 8001494:	b086      	sub	sp, #24
 8001496:	af00      	add	r7, sp, #0
 8001498:	4603      	mov	r3, r0
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
 800149e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014a4:	f7ff ff3e 	bl	8001324 <__NVIC_GetPriorityGrouping>
 80014a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	68b9      	ldr	r1, [r7, #8]
 80014ae:	6978      	ldr	r0, [r7, #20]
 80014b0:	f7ff ff8e 	bl	80013d0 <NVIC_EncodePriority>
 80014b4:	4602      	mov	r2, r0
 80014b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ba:	4611      	mov	r1, r2
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ff5d 	bl	800137c <__NVIC_SetPriority>
}
 80014c2:	bf00      	nop
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	4603      	mov	r3, r0
 80014d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff ff31 	bl	8001340 <__NVIC_EnableIRQ>
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff ffa2 	bl	8001438 <SysTick_Config>
 80014f4:	4603      	mov	r3, r0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e054      	b.n	80015bc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	7f5b      	ldrb	r3, [r3, #29]
 8001516:	b2db      	uxtb	r3, r3
 8001518:	2b00      	cmp	r3, #0
 800151a:	d105      	bne.n	8001528 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff fd6e 	bl	8001004 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2202      	movs	r2, #2
 800152c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	791b      	ldrb	r3, [r3, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d10c      	bne.n	8001550 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a22      	ldr	r2, [pc, #136]	@ (80015c4 <HAL_CRC_Init+0xc4>)
 800153c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	689a      	ldr	r2, [r3, #8]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f022 0218 	bic.w	r2, r2, #24
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	e00c      	b.n	800156a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6899      	ldr	r1, [r3, #8]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	461a      	mov	r2, r3
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 f834 	bl	80015c8 <HAL_CRCEx_Polynomial_Set>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e028      	b.n	80015bc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	795b      	ldrb	r3, [r3, #5]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d105      	bne.n	800157e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f04f 32ff 	mov.w	r2, #4294967295
 800157a:	611a      	str	r2, [r3, #16]
 800157c:	e004      	b.n	8001588 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	6912      	ldr	r2, [r2, #16]
 8001586:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	695a      	ldr	r2, [r3, #20]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	430a      	orrs	r2, r1
 800159c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	699a      	ldr	r2, [r3, #24]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	430a      	orrs	r2, r1
 80015b2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	04c11db7 	.word	0x04c11db7

080015c8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b087      	sub	sp, #28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015d4:	2300      	movs	r3, #0
 80015d6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80015d8:	231f      	movs	r3, #31
 80015da:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80015dc:	bf00      	nop
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1e5a      	subs	r2, r3, #1
 80015e2:	613a      	str	r2, [r7, #16]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d009      	beq.n	80015fc <HAL_CRCEx_Polynomial_Set+0x34>
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	f003 031f 	and.w	r3, r3, #31
 80015ee:	68ba      	ldr	r2, [r7, #8]
 80015f0:	fa22 f303 	lsr.w	r3, r2, r3
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d0f0      	beq.n	80015de <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b18      	cmp	r3, #24
 8001600:	d846      	bhi.n	8001690 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001602:	a201      	add	r2, pc, #4	@ (adr r2, 8001608 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001608:	08001697 	.word	0x08001697
 800160c:	08001691 	.word	0x08001691
 8001610:	08001691 	.word	0x08001691
 8001614:	08001691 	.word	0x08001691
 8001618:	08001691 	.word	0x08001691
 800161c:	08001691 	.word	0x08001691
 8001620:	08001691 	.word	0x08001691
 8001624:	08001691 	.word	0x08001691
 8001628:	08001685 	.word	0x08001685
 800162c:	08001691 	.word	0x08001691
 8001630:	08001691 	.word	0x08001691
 8001634:	08001691 	.word	0x08001691
 8001638:	08001691 	.word	0x08001691
 800163c:	08001691 	.word	0x08001691
 8001640:	08001691 	.word	0x08001691
 8001644:	08001691 	.word	0x08001691
 8001648:	08001679 	.word	0x08001679
 800164c:	08001691 	.word	0x08001691
 8001650:	08001691 	.word	0x08001691
 8001654:	08001691 	.word	0x08001691
 8001658:	08001691 	.word	0x08001691
 800165c:	08001691 	.word	0x08001691
 8001660:	08001691 	.word	0x08001691
 8001664:	08001691 	.word	0x08001691
 8001668:	0800166d 	.word	0x0800166d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	2b06      	cmp	r3, #6
 8001670:	d913      	bls.n	800169a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001676:	e010      	b.n	800169a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	2b07      	cmp	r3, #7
 800167c:	d90f      	bls.n	800169e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001682:	e00c      	b.n	800169e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	2b0f      	cmp	r3, #15
 8001688:	d90b      	bls.n	80016a2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800168e:	e008      	b.n	80016a2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	75fb      	strb	r3, [r7, #23]
      break;
 8001694:	e006      	b.n	80016a4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001696:	bf00      	nop
 8001698:	e004      	b.n	80016a4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800169a:	bf00      	nop
 800169c:	e002      	b.n	80016a4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800169e:	bf00      	nop
 80016a0:	e000      	b.n	80016a4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80016a2:	bf00      	nop
  }
  if (status == HAL_OK)
 80016a4:	7dfb      	ldrb	r3, [r7, #23]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d10d      	bne.n	80016c6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	68ba      	ldr	r2, [r7, #8]
 80016b0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f023 0118 	bic.w	r1, r3, #24
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80016c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	371c      	adds	r7, #28
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80016e0:	f7ff fdcc 	bl	800127c <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d101      	bne.n	80016f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e099      	b.n	8001824 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2202      	movs	r2, #2
 80016f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 0201 	bic.w	r2, r2, #1
 800170e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001710:	e00f      	b.n	8001732 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001712:	f7ff fdb3 	bl	800127c <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b05      	cmp	r3, #5
 800171e:	d908      	bls.n	8001732 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2220      	movs	r2, #32
 8001724:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2203      	movs	r2, #3
 800172a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e078      	b.n	8001824 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1e8      	bne.n	8001712 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	4b38      	ldr	r3, [pc, #224]	@ (800182c <HAL_DMA_Init+0x158>)
 800174c:	4013      	ands	r3, r2
 800174e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685a      	ldr	r2, [r3, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800175e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800176a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001776:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a1b      	ldr	r3, [r3, #32]
 800177c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800177e:	697a      	ldr	r2, [r7, #20]
 8001780:	4313      	orrs	r3, r2
 8001782:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001788:	2b04      	cmp	r3, #4
 800178a:	d107      	bne.n	800179c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001794:	4313      	orrs	r3, r2
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	4313      	orrs	r3, r2
 800179a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	697a      	ldr	r2, [r7, #20]
 80017a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	f023 0307 	bic.w	r3, r3, #7
 80017b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c2:	2b04      	cmp	r3, #4
 80017c4:	d117      	bne.n	80017f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d00e      	beq.n	80017f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 f8bd 	bl	8001958 <DMA_CheckFifoParam>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d008      	beq.n	80017f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2240      	movs	r2, #64	@ 0x40
 80017e8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2201      	movs	r2, #1
 80017ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80017f2:	2301      	movs	r3, #1
 80017f4:	e016      	b.n	8001824 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 f874 	bl	80018ec <DMA_CalcBaseAndBitshift>
 8001804:	4603      	mov	r3, r0
 8001806:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800180c:	223f      	movs	r2, #63	@ 0x3f
 800180e:	409a      	lsls	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2201      	movs	r2, #1
 800181e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	f010803f 	.word	0xf010803f

08001830 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e050      	b.n	80018e4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d101      	bne.n	8001852 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800184e:	2302      	movs	r3, #2
 8001850:	e048      	b.n	80018e4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f022 0201 	bic.w	r2, r2, #1
 8001860:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2200      	movs	r2, #0
 8001870:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2200      	movs	r2, #0
 8001878:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2200      	movs	r2, #0
 8001880:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2200      	movs	r2, #0
 8001888:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2221      	movs	r2, #33	@ 0x21
 8001890:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f000 f82a 	bl	80018ec <DMA_CalcBaseAndBitshift>
 8001898:	4603      	mov	r3, r0
 800189a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018a0:	223f      	movs	r2, #63	@ 0x3f
 80018a2:	409a      	lsls	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	3b10      	subs	r3, #16
 80018fc:	4a13      	ldr	r2, [pc, #76]	@ (800194c <DMA_CalcBaseAndBitshift+0x60>)
 80018fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001902:	091b      	lsrs	r3, r3, #4
 8001904:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001906:	4a12      	ldr	r2, [pc, #72]	@ (8001950 <DMA_CalcBaseAndBitshift+0x64>)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4413      	add	r3, r2
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	461a      	mov	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2b03      	cmp	r3, #3
 8001918:	d908      	bls.n	800192c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	461a      	mov	r2, r3
 8001920:	4b0c      	ldr	r3, [pc, #48]	@ (8001954 <DMA_CalcBaseAndBitshift+0x68>)
 8001922:	4013      	ands	r3, r2
 8001924:	1d1a      	adds	r2, r3, #4
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	659a      	str	r2, [r3, #88]	@ 0x58
 800192a:	e006      	b.n	800193a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	461a      	mov	r2, r3
 8001932:	4b08      	ldr	r3, [pc, #32]	@ (8001954 <DMA_CalcBaseAndBitshift+0x68>)
 8001934:	4013      	ands	r3, r2
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800193e:	4618      	mov	r0, r3
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	aaaaaaab 	.word	0xaaaaaaab
 8001950:	0800a304 	.word	0x0800a304
 8001954:	fffffc00 	.word	0xfffffc00

08001958 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001960:	2300      	movs	r3, #0
 8001962:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001968:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d11f      	bne.n	80019b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	2b03      	cmp	r3, #3
 8001976:	d856      	bhi.n	8001a26 <DMA_CheckFifoParam+0xce>
 8001978:	a201      	add	r2, pc, #4	@ (adr r2, 8001980 <DMA_CheckFifoParam+0x28>)
 800197a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800197e:	bf00      	nop
 8001980:	08001991 	.word	0x08001991
 8001984:	080019a3 	.word	0x080019a3
 8001988:	08001991 	.word	0x08001991
 800198c:	08001a27 	.word	0x08001a27
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001994:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d046      	beq.n	8001a2a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019a0:	e043      	b.n	8001a2a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80019aa:	d140      	bne.n	8001a2e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019b0:	e03d      	b.n	8001a2e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019ba:	d121      	bne.n	8001a00 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	2b03      	cmp	r3, #3
 80019c0:	d837      	bhi.n	8001a32 <DMA_CheckFifoParam+0xda>
 80019c2:	a201      	add	r2, pc, #4	@ (adr r2, 80019c8 <DMA_CheckFifoParam+0x70>)
 80019c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c8:	080019d9 	.word	0x080019d9
 80019cc:	080019df 	.word	0x080019df
 80019d0:	080019d9 	.word	0x080019d9
 80019d4:	080019f1 	.word	0x080019f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	73fb      	strb	r3, [r7, #15]
      break;
 80019dc:	e030      	b.n	8001a40 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d025      	beq.n	8001a36 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019ee:	e022      	b.n	8001a36 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019f4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80019f8:	d11f      	bne.n	8001a3a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80019fe:	e01c      	b.n	8001a3a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d903      	bls.n	8001a0e <DMA_CheckFifoParam+0xb6>
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	2b03      	cmp	r3, #3
 8001a0a:	d003      	beq.n	8001a14 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a0c:	e018      	b.n	8001a40 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	73fb      	strb	r3, [r7, #15]
      break;
 8001a12:	e015      	b.n	8001a40 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d00e      	beq.n	8001a3e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	73fb      	strb	r3, [r7, #15]
      break;
 8001a24:	e00b      	b.n	8001a3e <DMA_CheckFifoParam+0xe6>
      break;
 8001a26:	bf00      	nop
 8001a28:	e00a      	b.n	8001a40 <DMA_CheckFifoParam+0xe8>
      break;
 8001a2a:	bf00      	nop
 8001a2c:	e008      	b.n	8001a40 <DMA_CheckFifoParam+0xe8>
      break;
 8001a2e:	bf00      	nop
 8001a30:	e006      	b.n	8001a40 <DMA_CheckFifoParam+0xe8>
      break;
 8001a32:	bf00      	nop
 8001a34:	e004      	b.n	8001a40 <DMA_CheckFifoParam+0xe8>
      break;
 8001a36:	bf00      	nop
 8001a38:	e002      	b.n	8001a40 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a3a:	bf00      	nop
 8001a3c:	e000      	b.n	8001a40 <DMA_CheckFifoParam+0xe8>
      break;
 8001a3e:	bf00      	nop
    }
  } 
  
  return status; 
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop

08001a50 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e039      	b.n	8001ad6 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d106      	bne.n	8001a7c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff fae4 	bl	8001044 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2202      	movs	r2, #2
 8001a80:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	430a      	orrs	r2, r1
 8001a98:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001aa0:	f023 0107 	bic.w	r1, r3, #7
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	430a      	orrs	r2, r1
 8001aae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae0 <HAL_DMA2D_Init+0x90>)
 8001ab8:	4013      	ands	r3, r2
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	68d1      	ldr	r1, [r2, #12]
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	6812      	ldr	r2, [r2, #0]
 8001ac2:	430b      	orrs	r3, r1
 8001ac4:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	ffffc000 	.word	0xffffc000

08001ae4 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af02      	add	r7, sp, #8
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
 8001af0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d101      	bne.n	8001b00 <HAL_DMA2D_Start+0x1c>
 8001afc:	2302      	movs	r3, #2
 8001afe:	e018      	b.n	8001b32 <HAL_DMA2D_Start+0x4e>
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	68b9      	ldr	r1, [r7, #8]
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f000 f988 	bl	8001e30 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f042 0201 	orr.w	r2, r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b086      	sub	sp, #24
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
 8001b42:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8001b44:	2300      	movs	r3, #0
 8001b46:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d056      	beq.n	8001c04 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b56:	f7ff fb91 	bl	800127c <HAL_GetTick>
 8001b5a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001b5c:	e04b      	b.n	8001bf6 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d023      	beq.n	8001bb8 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f003 0320 	and.w	r3, r3, #32
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d005      	beq.n	8001b86 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b7e:	f043 0202 	orr.w	r2, r3, #2
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d005      	beq.n	8001b9c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b94:	f043 0201 	orr.w	r2, r3, #1
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2221      	movs	r2, #33	@ 0x21
 8001ba2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2204      	movs	r2, #4
 8001ba8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e0a5      	b.n	8001d04 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bbe:	d01a      	beq.n	8001bf6 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001bc0:	f7ff fb5c 	bl	800127c <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d302      	bcc.n	8001bd6 <HAL_DMA2D_PollForTransfer+0x9c>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10f      	bne.n	8001bf6 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bda:	f043 0220 	orr.w	r2, r3, #32
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2203      	movs	r2, #3
 8001be6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e086      	b.n	8001d04 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0ac      	beq.n	8001b5e <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	f003 0320 	and.w	r3, r3, #32
 8001c0e:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c16:	f003 0320 	and.w	r3, r3, #32
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d061      	beq.n	8001cea <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c26:	f7ff fb29 	bl	800127c <HAL_GetTick>
 8001c2a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001c2c:	e056      	b.n	8001cdc <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d02e      	beq.n	8001c9e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f003 0308 	and.w	r3, r3, #8
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d005      	beq.n	8001c56 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c4e:	f043 0204 	orr.w	r2, r3, #4
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f003 0320 	and.w	r3, r3, #32
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d005      	beq.n	8001c6c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c64:	f043 0202 	orr.w	r2, r3, #2
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d005      	beq.n	8001c82 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c7a:	f043 0201 	orr.w	r2, r3, #1
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2229      	movs	r2, #41	@ 0x29
 8001c88:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2204      	movs	r2, #4
 8001c8e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e032      	b.n	8001d04 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca4:	d01a      	beq.n	8001cdc <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ca6:	f7ff fae9 	bl	800127c <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d302      	bcc.n	8001cbc <HAL_DMA2D_PollForTransfer+0x182>
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d10f      	bne.n	8001cdc <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cc0:	f043 0220 	orr.w	r2, r3, #32
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2203      	movs	r2, #3
 8001ccc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e013      	b.n	8001d04 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f003 0310 	and.w	r3, r3, #16
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0a1      	beq.n	8001c2e <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2212      	movs	r2, #18
 8001cf0:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b087      	sub	sp, #28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d101      	bne.n	8001d2c <HAL_DMA2D_ConfigLayer+0x20>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e079      	b.n	8001e20 <HAL_DMA2D_ConfigLayer+0x114>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2202      	movs	r2, #2
 8001d38:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	011b      	lsls	r3, r3, #4
 8001d40:	3318      	adds	r3, #24
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	041b      	lsls	r3, r3, #16
 8001d52:	4313      	orrs	r3, r2
 8001d54:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001d56:	4b35      	ldr	r3, [pc, #212]	@ (8001e2c <HAL_DMA2D_ConfigLayer+0x120>)
 8001d58:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b0a      	cmp	r3, #10
 8001d60:	d003      	beq.n	8001d6a <HAL_DMA2D_ConfigLayer+0x5e>
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b09      	cmp	r3, #9
 8001d68:	d107      	bne.n	8001d7a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	617b      	str	r3, [r7, #20]
 8001d78:	e005      	b.n	8001d86 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	061b      	lsls	r3, r3, #24
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d120      	bne.n	8001dce <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	43db      	mvns	r3, r3
 8001d96:	ea02 0103 	and.w	r1, r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	430a      	orrs	r2, r1
 8001da2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	6812      	ldr	r2, [r2, #0]
 8001dac:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b0a      	cmp	r3, #10
 8001db4:	d003      	beq.n	8001dbe <HAL_DMA2D_ConfigLayer+0xb2>
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b09      	cmp	r3, #9
 8001dbc:	d127      	bne.n	8001e0e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	68da      	ldr	r2, [r3, #12]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001dca:	629a      	str	r2, [r3, #40]	@ 0x28
 8001dcc:	e01f      	b.n	8001e0e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	69da      	ldr	r2, [r3, #28]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	ea02 0103 	and.w	r1, r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	430a      	orrs	r2, r1
 8001de4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	6812      	ldr	r2, [r2, #0]
 8001dee:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b0a      	cmp	r3, #10
 8001df6:	d003      	beq.n	8001e00 <HAL_DMA2D_ConfigLayer+0xf4>
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b09      	cmp	r3, #9
 8001dfe:	d106      	bne.n	8001e0e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	68da      	ldr	r2, [r3, #12]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001e0c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	371c      	adds	r7, #28
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	ff03000f 	.word	0xff03000f

08001e30 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b08b      	sub	sp, #44	@ 0x2c
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
 8001e3c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e44:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	041a      	lsls	r2, r3, #16
 8001e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	430a      	orrs	r2, r1
 8001e56:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001e68:	d174      	bne.n	8001f54 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001e70:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001e78:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8001e80:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d108      	bne.n	8001ea2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	431a      	orrs	r2, r3
 8001e96:	6a3b      	ldr	r3, [r7, #32]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ea0:	e053      	b.n	8001f4a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d106      	bne.n	8001eb8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eb6:	e048      	b.n	8001f4a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d111      	bne.n	8001ee4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	0cdb      	lsrs	r3, r3, #19
 8001ec4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	0a9b      	lsrs	r3, r3, #10
 8001eca:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	08db      	lsrs	r3, r3, #3
 8001ed0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	015a      	lsls	r2, r3, #5
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	02db      	lsls	r3, r3, #11
 8001eda:	4313      	orrs	r3, r2
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ee2:	e032      	b.n	8001f4a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	2b03      	cmp	r3, #3
 8001eea:	d117      	bne.n	8001f1c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8001eec:	6a3b      	ldr	r3, [r7, #32]
 8001eee:	0fdb      	lsrs	r3, r3, #31
 8001ef0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	0cdb      	lsrs	r3, r3, #19
 8001ef6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	0adb      	lsrs	r3, r3, #11
 8001efc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	08db      	lsrs	r3, r3, #3
 8001f02:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	015a      	lsls	r2, r3, #5
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	029b      	lsls	r3, r3, #10
 8001f0c:	431a      	orrs	r2, r3
 8001f0e:	6a3b      	ldr	r3, [r7, #32]
 8001f10:	03db      	lsls	r3, r3, #15
 8001f12:	4313      	orrs	r3, r2
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f1a:	e016      	b.n	8001f4a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8001f1c:	6a3b      	ldr	r3, [r7, #32]
 8001f1e:	0f1b      	lsrs	r3, r3, #28
 8001f20:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	0d1b      	lsrs	r3, r3, #20
 8001f26:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	0b1b      	lsrs	r3, r3, #12
 8001f2c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	091b      	lsrs	r3, r3, #4
 8001f32:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	011a      	lsls	r2, r3, #4
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	021b      	lsls	r3, r3, #8
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	6a3b      	ldr	r3, [r7, #32]
 8001f40:	031b      	lsls	r3, r3, #12
 8001f42:	4313      	orrs	r3, r2
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f50:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8001f52:	e003      	b.n	8001f5c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68ba      	ldr	r2, [r7, #8]
 8001f5a:	60da      	str	r2, [r3, #12]
}
 8001f5c:	bf00      	nop
 8001f5e:	372c      	adds	r7, #44	@ 0x2c
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b089      	sub	sp, #36	@ 0x24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f82:	2300      	movs	r3, #0
 8001f84:	61fb      	str	r3, [r7, #28]
 8001f86:	e175      	b.n	8002274 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001f88:	2201      	movs	r2, #1
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	f040 8164 	bne.w	800226e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d005      	beq.n	8001fbe <HAL_GPIO_Init+0x56>
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d130      	bne.n	8002020 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	2203      	movs	r2, #3
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	68da      	ldr	r2, [r3, #12]
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	091b      	lsrs	r3, r3, #4
 800200a:	f003 0201 	and.w	r2, r3, #1
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4313      	orrs	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	2b03      	cmp	r3, #3
 800202a:	d017      	beq.n	800205c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	2203      	movs	r2, #3
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4013      	ands	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4313      	orrs	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 0303 	and.w	r3, r3, #3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d123      	bne.n	80020b0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	08da      	lsrs	r2, r3, #3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3208      	adds	r2, #8
 8002070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	220f      	movs	r2, #15
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	43db      	mvns	r3, r3
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4013      	ands	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	691a      	ldr	r2, [r3, #16]
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4313      	orrs	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	08da      	lsrs	r2, r3, #3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	3208      	adds	r2, #8
 80020aa:	69b9      	ldr	r1, [r7, #24]
 80020ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	2203      	movs	r2, #3
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4013      	ands	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 0203 	and.w	r2, r3, #3
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4313      	orrs	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f000 80be 	beq.w	800226e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020f2:	4b66      	ldr	r3, [pc, #408]	@ (800228c <HAL_GPIO_Init+0x324>)
 80020f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f6:	4a65      	ldr	r2, [pc, #404]	@ (800228c <HAL_GPIO_Init+0x324>)
 80020f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80020fe:	4b63      	ldr	r3, [pc, #396]	@ (800228c <HAL_GPIO_Init+0x324>)
 8002100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002102:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800210a:	4a61      	ldr	r2, [pc, #388]	@ (8002290 <HAL_GPIO_Init+0x328>)
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	089b      	lsrs	r3, r3, #2
 8002110:	3302      	adds	r3, #2
 8002112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	220f      	movs	r2, #15
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43db      	mvns	r3, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4013      	ands	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a58      	ldr	r2, [pc, #352]	@ (8002294 <HAL_GPIO_Init+0x32c>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d037      	beq.n	80021a6 <HAL_GPIO_Init+0x23e>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a57      	ldr	r2, [pc, #348]	@ (8002298 <HAL_GPIO_Init+0x330>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d031      	beq.n	80021a2 <HAL_GPIO_Init+0x23a>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a56      	ldr	r2, [pc, #344]	@ (800229c <HAL_GPIO_Init+0x334>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d02b      	beq.n	800219e <HAL_GPIO_Init+0x236>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a55      	ldr	r2, [pc, #340]	@ (80022a0 <HAL_GPIO_Init+0x338>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d025      	beq.n	800219a <HAL_GPIO_Init+0x232>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a54      	ldr	r2, [pc, #336]	@ (80022a4 <HAL_GPIO_Init+0x33c>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d01f      	beq.n	8002196 <HAL_GPIO_Init+0x22e>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a53      	ldr	r2, [pc, #332]	@ (80022a8 <HAL_GPIO_Init+0x340>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d019      	beq.n	8002192 <HAL_GPIO_Init+0x22a>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a52      	ldr	r2, [pc, #328]	@ (80022ac <HAL_GPIO_Init+0x344>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d013      	beq.n	800218e <HAL_GPIO_Init+0x226>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a51      	ldr	r2, [pc, #324]	@ (80022b0 <HAL_GPIO_Init+0x348>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d00d      	beq.n	800218a <HAL_GPIO_Init+0x222>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a50      	ldr	r2, [pc, #320]	@ (80022b4 <HAL_GPIO_Init+0x34c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d007      	beq.n	8002186 <HAL_GPIO_Init+0x21e>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a4f      	ldr	r2, [pc, #316]	@ (80022b8 <HAL_GPIO_Init+0x350>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d101      	bne.n	8002182 <HAL_GPIO_Init+0x21a>
 800217e:	2309      	movs	r3, #9
 8002180:	e012      	b.n	80021a8 <HAL_GPIO_Init+0x240>
 8002182:	230a      	movs	r3, #10
 8002184:	e010      	b.n	80021a8 <HAL_GPIO_Init+0x240>
 8002186:	2308      	movs	r3, #8
 8002188:	e00e      	b.n	80021a8 <HAL_GPIO_Init+0x240>
 800218a:	2307      	movs	r3, #7
 800218c:	e00c      	b.n	80021a8 <HAL_GPIO_Init+0x240>
 800218e:	2306      	movs	r3, #6
 8002190:	e00a      	b.n	80021a8 <HAL_GPIO_Init+0x240>
 8002192:	2305      	movs	r3, #5
 8002194:	e008      	b.n	80021a8 <HAL_GPIO_Init+0x240>
 8002196:	2304      	movs	r3, #4
 8002198:	e006      	b.n	80021a8 <HAL_GPIO_Init+0x240>
 800219a:	2303      	movs	r3, #3
 800219c:	e004      	b.n	80021a8 <HAL_GPIO_Init+0x240>
 800219e:	2302      	movs	r3, #2
 80021a0:	e002      	b.n	80021a8 <HAL_GPIO_Init+0x240>
 80021a2:	2301      	movs	r3, #1
 80021a4:	e000      	b.n	80021a8 <HAL_GPIO_Init+0x240>
 80021a6:	2300      	movs	r3, #0
 80021a8:	69fa      	ldr	r2, [r7, #28]
 80021aa:	f002 0203 	and.w	r2, r2, #3
 80021ae:	0092      	lsls	r2, r2, #2
 80021b0:	4093      	lsls	r3, r2
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80021b8:	4935      	ldr	r1, [pc, #212]	@ (8002290 <HAL_GPIO_Init+0x328>)
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	089b      	lsrs	r3, r3, #2
 80021be:	3302      	adds	r3, #2
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021c6:	4b3d      	ldr	r3, [pc, #244]	@ (80022bc <HAL_GPIO_Init+0x354>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	43db      	mvns	r3, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4013      	ands	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021ea:	4a34      	ldr	r2, [pc, #208]	@ (80022bc <HAL_GPIO_Init+0x354>)
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021f0:	4b32      	ldr	r3, [pc, #200]	@ (80022bc <HAL_GPIO_Init+0x354>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	43db      	mvns	r3, r3
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4013      	ands	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	4313      	orrs	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002214:	4a29      	ldr	r2, [pc, #164]	@ (80022bc <HAL_GPIO_Init+0x354>)
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800221a:	4b28      	ldr	r3, [pc, #160]	@ (80022bc <HAL_GPIO_Init+0x354>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	43db      	mvns	r3, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4013      	ands	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	4313      	orrs	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800223e:	4a1f      	ldr	r2, [pc, #124]	@ (80022bc <HAL_GPIO_Init+0x354>)
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002244:	4b1d      	ldr	r3, [pc, #116]	@ (80022bc <HAL_GPIO_Init+0x354>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	43db      	mvns	r3, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4013      	ands	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d003      	beq.n	8002268 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4313      	orrs	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002268:	4a14      	ldr	r2, [pc, #80]	@ (80022bc <HAL_GPIO_Init+0x354>)
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	3301      	adds	r3, #1
 8002272:	61fb      	str	r3, [r7, #28]
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	2b0f      	cmp	r3, #15
 8002278:	f67f ae86 	bls.w	8001f88 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800227c:	bf00      	nop
 800227e:	bf00      	nop
 8002280:	3724      	adds	r7, #36	@ 0x24
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	40023800 	.word	0x40023800
 8002290:	40013800 	.word	0x40013800
 8002294:	40020000 	.word	0x40020000
 8002298:	40020400 	.word	0x40020400
 800229c:	40020800 	.word	0x40020800
 80022a0:	40020c00 	.word	0x40020c00
 80022a4:	40021000 	.word	0x40021000
 80022a8:	40021400 	.word	0x40021400
 80022ac:	40021800 	.word	0x40021800
 80022b0:	40021c00 	.word	0x40021c00
 80022b4:	40022000 	.word	0x40022000
 80022b8:	40022400 	.word	0x40022400
 80022bc:	40013c00 	.word	0x40013c00

080022c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	460b      	mov	r3, r1
 80022ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691a      	ldr	r2, [r3, #16]
 80022d0:	887b      	ldrh	r3, [r7, #2]
 80022d2:	4013      	ands	r3, r2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d002      	beq.n	80022de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022d8:	2301      	movs	r3, #1
 80022da:	73fb      	strb	r3, [r7, #15]
 80022dc:	e001      	b.n	80022e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022de:	2300      	movs	r3, #0
 80022e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	460b      	mov	r3, r1
 80022fa:	807b      	strh	r3, [r7, #2]
 80022fc:	4613      	mov	r3, r2
 80022fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002300:	787b      	ldrb	r3, [r7, #1]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002306:	887a      	ldrh	r2, [r7, #2]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800230c:	e003      	b.n	8002316 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800230e:	887b      	ldrh	r3, [r7, #2]
 8002310:	041a      	lsls	r2, r3, #16
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	619a      	str	r2, [r3, #24]
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
	...

08002324 <HAL_LTDC_Init>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, tmp1 = 0;
 800232c:	2300      	movs	r3, #0
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	2300      	movs	r3, #0
 8002332:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e0c7      	b.n	80024ce <HAL_LTDC_Init+0x1aa>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d106      	bne.n	8002358 <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f8c2 	bl	80024dc <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2202      	movs	r2, #2
 800235c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configures the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	699a      	ldr	r2, [r3, #24]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800236e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6999      	ldr	r1, [r3, #24]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002384:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	430a      	orrs	r2, r1
 8002392:	619a      	str	r2, [r3, #24]

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6899      	ldr	r1, [r3, #8]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	4b4e      	ldr	r3, [pc, #312]	@ (80024d8 <HAL_LTDC_Init+0x1b4>)
 80023a0:	400b      	ands	r3, r1
 80023a2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	041b      	lsls	r3, r3, #16
 80023aa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6899      	ldr	r1, [r3, #8]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	699a      	ldr	r2, [r3, #24]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	431a      	orrs	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68d9      	ldr	r1, [r3, #12]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	4b42      	ldr	r3, [pc, #264]	@ (80024d8 <HAL_LTDC_Init+0x1b4>)
 80023ce:	400b      	ands	r3, r1
 80023d0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	041b      	lsls	r3, r3, #16
 80023d8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68d9      	ldr	r1, [r3, #12]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a1a      	ldr	r2, [r3, #32]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	431a      	orrs	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6919      	ldr	r1, [r3, #16]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	4b37      	ldr	r3, [pc, #220]	@ (80024d8 <HAL_LTDC_Init+0x1b4>)
 80023fc:	400b      	ands	r3, r1
 80023fe:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002404:	041b      	lsls	r3, r3, #16
 8002406:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6919      	ldr	r1, [r3, #16]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	431a      	orrs	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	430a      	orrs	r2, r1
 800241c:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6959      	ldr	r1, [r3, #20]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	4b2b      	ldr	r3, [pc, #172]	@ (80024d8 <HAL_LTDC_Init+0x1b4>)
 800242a:	400b      	ands	r3, r1
 800242c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002432:	041b      	lsls	r3, r3, #16
 8002434:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6959      	ldr	r1, [r3, #20]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	431a      	orrs	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	430a      	orrs	r2, r1
 800244a:	615a      	str	r2, [r3, #20]

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002452:	021b      	lsls	r3, r3, #8
 8002454:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800245c:	041b      	lsls	r3, r3, #16
 800245e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800246e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4313      	orrs	r3, r2
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8002482:	431a      	orrs	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the transfer Error interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f042 0204 	orr.w	r2, r2, #4
 800249a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the FIFO underrun interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0202 	orr.w	r2, r2, #2
 80024aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	699a      	ldr	r2, [r3, #24]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0201 	orr.w	r2, r2, #1
 80024ba:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	f000f800 	.word	0xf000f800

080024dc <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */ 
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.  
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_TE) != RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024fe:	f003 0304 	and.w	r3, r3, #4
 8002502:	2b00      	cmp	r3, #0
 8002504:	d025      	beq.n	8002552 <HAL_LTDC_IRQHandler+0x62>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_TE) != RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b00      	cmp	r3, #0
 8002512:	d01e      	beq.n	8002552 <HAL_LTDC_IRQHandler+0x62>
    {
      /* Disable the transfer Error interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 0204 	bic.w	r2, r2, #4
 8002522:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Clear the transfer error flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2204      	movs	r2, #4
 800252a:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Update error code */
      hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002532:	f043 0201 	orr.w	r2, r3, #1
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_ERROR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2204      	movs	r2, #4
 8002540:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

      /* Transfer error Callback */
      HAL_LTDC_ErrorCallback(hltdc);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f000 f87b 	bl	8002648 <HAL_LTDC_ErrorCallback>
    }
  }
  /* FIFO underrun Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_FU) != RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d025      	beq.n	80025ac <HAL_LTDC_IRQHandler+0xbc>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_FU) != RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d01e      	beq.n	80025ac <HAL_LTDC_IRQHandler+0xbc>
    {
      /* Disable the FIFO underrun interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 0202 	bic.w	r2, r2, #2
 800257c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Clear the FIFO underrun flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2202      	movs	r2, #2
 8002584:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Update error code */
      hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800258c:	f043 0202 	orr.w	r2, r3, #2
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_ERROR;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2204      	movs	r2, #4
 800259a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
      
      /* Transfer error Callback */
      HAL_LTDC_ErrorCallback(hltdc);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f84e 	bl	8002648 <HAL_LTDC_ErrorCallback>
    }
  }
  /* Line Interrupt management ************************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_LI) != RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d01d      	beq.n	80025f6 <HAL_LTDC_IRQHandler+0x106>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_LI) != RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d016      	beq.n	80025f6 <HAL_LTDC_IRQHandler+0x106>
    {
      /* Disable the Line interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 0201 	bic.w	r2, r2, #1
 80025d6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Clear the Line interrupt flag */  
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2201      	movs	r2, #1
 80025de:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

      /* Line interrupt Callback */
      HAL_LTDC_LineEventCallback(hltdc);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 f833 	bl	800265c <HAL_LTDC_LineEventCallback>
    }
  }
  /* Register reload Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_RR) != RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025fc:	f003 0308 	and.w	r3, r3, #8
 8002600:	2b00      	cmp	r3, #0
 8002602:	d01d      	beq.n	8002640 <HAL_LTDC_IRQHandler+0x150>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_RR) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800260a:	f003 0308 	and.w	r3, r3, #8
 800260e:	2b00      	cmp	r3, #0
 8002610:	d016      	beq.n	8002640 <HAL_LTDC_IRQHandler+0x150>
    {
      /* Disable the register reload interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 0208 	bic.w	r2, r2, #8
 8002620:	635a      	str	r2, [r3, #52]	@ 0x34
      
      /* Clear the register reload flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2208      	movs	r2, #8
 8002628:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_READY;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
      
      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
      
      /* Register reload interrupt Callback */
      HAL_LTDC_ReloadEventCallback(hltdc);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f818 	bl	8002670 <HAL_LTDC_ReloadEventCallback>
    }
  }  
}
 8002640:	bf00      	nop
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 8002684:	b5b0      	push	{r4, r5, r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8002696:	2b01      	cmp	r3, #1
 8002698:	d101      	bne.n	800269e <HAL_LTDC_ConfigLayer+0x1a>
 800269a:	2302      	movs	r3, #2
 800269c:	e02c      	b.n	80026f8 <HAL_LTDC_ConfigLayer+0x74>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2202      	movs	r2, #2
 80026aa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2134      	movs	r1, #52	@ 0x34
 80026b4:	fb01 f303 	mul.w	r3, r1, r3
 80026b8:	4413      	add	r3, r2
 80026ba:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	4614      	mov	r4, r2
 80026c2:	461d      	mov	r5, r3
 80026c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026d0:	682b      	ldr	r3, [r5, #0]
 80026d2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	68b9      	ldr	r1, [r7, #8]
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f000 f855 	bl	8002788 <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2201      	movs	r2, #1
 80026e4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bdb0      	pop	{r4, r5, r7, pc}

08002700 <HAL_LTDC_SetAlpha>:
  *                   This parameter can be one of the following values:
  *                   0 or 1
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef *pLayerCfg;

  /* Process locked */
  __HAL_LOCK(hltdc);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8002712:	2b01      	cmp	r3, #1
 8002714:	d101      	bne.n	800271a <HAL_LTDC_SetAlpha+0x1a>
 8002716:	2302      	movs	r3, #2
 8002718:	e024      	b.n	8002764 <HAL_LTDC_SetAlpha+0x64>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2202      	movs	r2, #2
 8002726:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
  /* Check the parameters */
  assert_param(IS_LTDC_ALPHA(Alpha));
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2234      	movs	r2, #52	@ 0x34
 800272e:	fb02 f303 	mul.w	r3, r2, r3
 8002732:	3338      	adds	r3, #56	@ 0x38
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	4413      	add	r3, r2
 8002738:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	68ba      	ldr	r2, [r7, #8]
 800273e:	615a      	str	r2, [r3, #20]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	6979      	ldr	r1, [r7, #20]
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f000 f81f 	bl	8002788 <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2201      	movs	r2, #1
 8002750:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3718      	adds	r7, #24
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <HAL_LTDC_GetState>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800277a:	b2db      	uxtb	r3, r3
}
 800277c:	4618      	mov	r0, r3
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                    This parameter can be one of the following values: 0 or 1
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002788:	b480      	push	{r7}
 800278a:	b089      	sub	sp, #36	@ 0x24
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 8002794:	2300      	movs	r3, #0
 8002796:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0;
 8002798:	2300      	movs	r3, #0
 800279a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0;
 800279c:	2300      	movs	r3, #0
 800279e:	617b      	str	r3, [r7, #20]

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	0c1b      	lsrs	r3, r3, #16
 80027ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b0:	4413      	add	r3, r2
 80027b2:	041b      	lsls	r3, r3, #16
 80027b4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	461a      	mov	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	01db      	lsls	r3, r3, #7
 80027c0:	4413      	add	r3, r2
 80027c2:	3384      	adds	r3, #132	@ 0x84
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	6812      	ldr	r2, [r2, #0]
 80027ca:	4611      	mov	r1, r2
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	01d2      	lsls	r2, r2, #7
 80027d0:	440a      	add	r2, r1
 80027d2:	3284      	adds	r2, #132	@ 0x84
 80027d4:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80027d8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	0c1b      	lsrs	r3, r3, #16
 80027e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ea:	4413      	add	r3, r2
 80027ec:	1c5a      	adds	r2, r3, #1
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4619      	mov	r1, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	01db      	lsls	r3, r3, #7
 80027f8:	440b      	add	r3, r1
 80027fa:	3384      	adds	r3, #132	@ 0x84
 80027fc:	4619      	mov	r1, r3
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	4313      	orrs	r3, r2
 8002802:	604b      	str	r3, [r1, #4]

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	68da      	ldr	r2, [r3, #12]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002812:	4413      	add	r3, r2
 8002814:	041b      	lsls	r3, r3, #16
 8002816:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	461a      	mov	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	01db      	lsls	r3, r3, #7
 8002822:	4413      	add	r3, r2
 8002824:	3384      	adds	r3, #132	@ 0x84
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	6812      	ldr	r2, [r2, #0]
 800282c:	4611      	mov	r1, r2
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	01d2      	lsls	r2, r2, #7
 8002832:	440a      	add	r2, r1
 8002834:	3284      	adds	r2, #132	@ 0x84
 8002836:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800283a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800284a:	4413      	add	r3, r2
 800284c:	1c5a      	adds	r2, r3, #1
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4619      	mov	r1, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	01db      	lsls	r3, r3, #7
 8002858:	440b      	add	r3, r1
 800285a:	3384      	adds	r3, #132	@ 0x84
 800285c:	4619      	mov	r1, r3
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	4313      	orrs	r3, r2
 8002862:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	461a      	mov	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	01db      	lsls	r3, r3, #7
 800286e:	4413      	add	r3, r2
 8002870:	3384      	adds	r3, #132	@ 0x84
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	6812      	ldr	r2, [r2, #0]
 8002878:	4611      	mov	r1, r2
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	01d2      	lsls	r2, r2, #7
 800287e:	440a      	add	r2, r1
 8002880:	3284      	adds	r2, #132	@ 0x84
 8002882:	f023 0307 	bic.w	r3, r3, #7
 8002886:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	461a      	mov	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	01db      	lsls	r3, r3, #7
 8002892:	4413      	add	r3, r2
 8002894:	3384      	adds	r3, #132	@ 0x84
 8002896:	461a      	mov	r2, r3
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	6113      	str	r3, [r2, #16]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80028a4:	021b      	lsls	r3, r3, #8
 80028a6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80028ae:	041b      	lsls	r3, r3, #16
 80028b0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	061b      	lsls	r3, r3, #24
 80028b8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	461a      	mov	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	01db      	lsls	r3, r3, #7
 80028c4:	4413      	add	r3, r2
 80028c6:	3384      	adds	r3, #132	@ 0x84
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	461a      	mov	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	01db      	lsls	r3, r3, #7
 80028d4:	4413      	add	r3, r2
 80028d6:	3384      	adds	r3, #132	@ 0x84
 80028d8:	461a      	mov	r2, r3
 80028da:	2300      	movs	r3, #0
 80028dc:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80028e4:	461a      	mov	r2, r3
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	431a      	orrs	r2, r3
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	431a      	orrs	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4619      	mov	r1, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	01db      	lsls	r3, r3, #7
 80028f8:	440b      	add	r3, r1
 80028fa:	3384      	adds	r3, #132	@ 0x84
 80028fc:	4619      	mov	r1, r3
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	4313      	orrs	r3, r2
 8002902:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	461a      	mov	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	01db      	lsls	r3, r3, #7
 800290e:	4413      	add	r3, r2
 8002910:	3384      	adds	r3, #132	@ 0x84
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	6812      	ldr	r2, [r2, #0]
 8002918:	4611      	mov	r1, r2
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	01d2      	lsls	r2, r2, #7
 800291e:	440a      	add	r2, r1
 8002920:	3284      	adds	r2, #132	@ 0x84
 8002922:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002926:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	461a      	mov	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	01db      	lsls	r3, r3, #7
 8002932:	4413      	add	r3, r2
 8002934:	3384      	adds	r3, #132	@ 0x84
 8002936:	461a      	mov	r2, r3
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	461a      	mov	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	01db      	lsls	r3, r3, #7
 8002948:	4413      	add	r3, r2
 800294a:	3384      	adds	r3, #132	@ 0x84
 800294c:	69da      	ldr	r2, [r3, #28]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4619      	mov	r1, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	01db      	lsls	r3, r3, #7
 8002958:	440b      	add	r3, r1
 800295a:	3384      	adds	r3, #132	@ 0x84
 800295c:	4619      	mov	r1, r3
 800295e:	4b58      	ldr	r3, [pc, #352]	@ (8002ac0 <LTDC_SetConfig+0x338>)
 8002960:	4013      	ands	r3, r2
 8002962:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	69da      	ldr	r2, [r3, #28]
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	68f9      	ldr	r1, [r7, #12]
 800296e:	6809      	ldr	r1, [r1, #0]
 8002970:	4608      	mov	r0, r1
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	01c9      	lsls	r1, r1, #7
 8002976:	4401      	add	r1, r0
 8002978:	3184      	adds	r1, #132	@ 0x84
 800297a:	4313      	orrs	r3, r2
 800297c:	61cb      	str	r3, [r1, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	461a      	mov	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	01db      	lsls	r3, r3, #7
 8002988:	4413      	add	r3, r2
 800298a:	3384      	adds	r3, #132	@ 0x84
 800298c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	461a      	mov	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	01db      	lsls	r3, r3, #7
 8002998:	4413      	add	r3, r2
 800299a:	3384      	adds	r3, #132	@ 0x84
 800299c:	461a      	mov	r2, r3
 800299e:	2300      	movs	r3, #0
 80029a0:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	461a      	mov	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	01db      	lsls	r3, r3, #7
 80029ac:	4413      	add	r3, r2
 80029ae:	3384      	adds	r3, #132	@ 0x84
 80029b0:	461a      	mov	r2, r3
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b6:	6293      	str	r3, [r2, #40]	@ 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d102      	bne.n	80029c6 <LTDC_SetConfig+0x23e>
  {
    tmp = 4;
 80029c0:	2304      	movs	r3, #4
 80029c2:	61fb      	str	r3, [r7, #28]
 80029c4:	e01b      	b.n	80029fe <LTDC_SetConfig+0x276>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d102      	bne.n	80029d4 <LTDC_SetConfig+0x24c>
  {
    tmp = 3;
 80029ce:	2303      	movs	r3, #3
 80029d0:	61fb      	str	r3, [r7, #28]
 80029d2:	e014      	b.n	80029fe <LTDC_SetConfig+0x276>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	2b04      	cmp	r3, #4
 80029da:	d00b      	beq.n	80029f4 <LTDC_SetConfig+0x26c>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d007      	beq.n	80029f4 <LTDC_SetConfig+0x26c>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80029e8:	2b03      	cmp	r3, #3
 80029ea:	d003      	beq.n	80029f4 <LTDC_SetConfig+0x26c>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80029f0:	2b07      	cmp	r3, #7
 80029f2:	d102      	bne.n	80029fa <LTDC_SetConfig+0x272>
  {
    tmp = 2;
 80029f4:	2302      	movs	r3, #2
 80029f6:	61fb      	str	r3, [r7, #28]
 80029f8:	e001      	b.n	80029fe <LTDC_SetConfig+0x276>
  }
  else
  {
    tmp = 1;
 80029fa:	2301      	movs	r3, #1
 80029fc:	61fb      	str	r3, [r7, #28]
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	461a      	mov	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	01db      	lsls	r3, r3, #7
 8002a08:	4413      	add	r3, r2
 8002a0a:	3384      	adds	r3, #132	@ 0x84
 8002a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	6812      	ldr	r2, [r2, #0]
 8002a12:	4611      	mov	r1, r2
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	01d2      	lsls	r2, r2, #7
 8002a18:	440a      	add	r2, r1
 8002a1a:	3284      	adds	r2, #132	@ 0x84
 8002a1c:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8002a20:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a26:	69fa      	ldr	r2, [r7, #28]
 8002a28:	fb02 f303 	mul.w	r3, r2, r3
 8002a2c:	041a      	lsls	r2, r3, #16
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	6859      	ldr	r1, [r3, #4]
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	1acb      	subs	r3, r1, r3
 8002a38:	69f9      	ldr	r1, [r7, #28]
 8002a3a:	fb01 f303 	mul.w	r3, r1, r3
 8002a3e:	3303      	adds	r3, #3
 8002a40:	68f9      	ldr	r1, [r7, #12]
 8002a42:	6809      	ldr	r1, [r1, #0]
 8002a44:	4608      	mov	r0, r1
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	01c9      	lsls	r1, r1, #7
 8002a4a:	4401      	add	r1, r0
 8002a4c:	3184      	adds	r1, #132	@ 0x84
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	461a      	mov	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	01db      	lsls	r3, r3, #7
 8002a5c:	4413      	add	r3, r2
 8002a5e:	3384      	adds	r3, #132	@ 0x84
 8002a60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4619      	mov	r1, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	01db      	lsls	r3, r3, #7
 8002a6c:	440b      	add	r3, r1
 8002a6e:	3384      	adds	r3, #132	@ 0x84
 8002a70:	4619      	mov	r1, r3
 8002a72:	4b14      	ldr	r3, [pc, #80]	@ (8002ac4 <LTDC_SetConfig+0x33c>)
 8002a74:	4013      	ands	r3, r2
 8002a76:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	01db      	lsls	r3, r3, #7
 8002a82:	4413      	add	r3, r2
 8002a84:	3384      	adds	r3, #132	@ 0x84
 8002a86:	461a      	mov	r2, r3
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	461a      	mov	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	01db      	lsls	r3, r3, #7
 8002a98:	4413      	add	r3, r2
 8002a9a:	3384      	adds	r3, #132	@ 0x84
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	6812      	ldr	r2, [r2, #0]
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	01d2      	lsls	r2, r2, #7
 8002aa8:	440a      	add	r2, r1
 8002aaa:	3284      	adds	r2, #132	@ 0x84
 8002aac:	f043 0301 	orr.w	r3, r3, #1
 8002ab0:	6013      	str	r3, [r2, #0]
}
 8002ab2:	bf00      	nop
 8002ab4:	3724      	adds	r7, #36	@ 0x24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	fffff8f8 	.word	0xfffff8f8
 8002ac4:	fffff800 	.word	0xfffff800

08002ac8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ad2:	4b23      	ldr	r3, [pc, #140]	@ (8002b60 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad6:	4a22      	ldr	r2, [pc, #136]	@ (8002b60 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ad8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002adc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ade:	4b20      	ldr	r3, [pc, #128]	@ (8002b60 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ae6:	603b      	str	r3, [r7, #0]
 8002ae8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002aea:	4b1e      	ldr	r3, [pc, #120]	@ (8002b64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a1d      	ldr	r2, [pc, #116]	@ (8002b64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002af0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002af4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002af6:	f7fe fbc1 	bl	800127c <HAL_GetTick>
 8002afa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002afc:	e009      	b.n	8002b12 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002afe:	f7fe fbbd 	bl	800127c <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b0c:	d901      	bls.n	8002b12 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e022      	b.n	8002b58 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b12:	4b14      	ldr	r3, [pc, #80]	@ (8002b64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b1e:	d1ee      	bne.n	8002afe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b20:	4b10      	ldr	r3, [pc, #64]	@ (8002b64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a0f      	ldr	r2, [pc, #60]	@ (8002b64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b2a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b2c:	f7fe fba6 	bl	800127c <HAL_GetTick>
 8002b30:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b32:	e009      	b.n	8002b48 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b34:	f7fe fba2 	bl	800127c <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b42:	d901      	bls.n	8002b48 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e007      	b.n	8002b58 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b48:	4b06      	ldr	r3, [pc, #24]	@ (8002b64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b54:	d1ee      	bne.n	8002b34 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40023800 	.word	0x40023800
 8002b64:	40007000 	.word	0x40007000

08002b68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002b70:	2300      	movs	r3, #0
 8002b72:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e291      	b.n	80030a2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f000 8087 	beq.w	8002c9a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b8c:	4b96      	ldr	r3, [pc, #600]	@ (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f003 030c 	and.w	r3, r3, #12
 8002b94:	2b04      	cmp	r3, #4
 8002b96:	d00c      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b98:	4b93      	ldr	r3, [pc, #588]	@ (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 030c 	and.w	r3, r3, #12
 8002ba0:	2b08      	cmp	r3, #8
 8002ba2:	d112      	bne.n	8002bca <HAL_RCC_OscConfig+0x62>
 8002ba4:	4b90      	ldr	r3, [pc, #576]	@ (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bb0:	d10b      	bne.n	8002bca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb2:	4b8d      	ldr	r3, [pc, #564]	@ (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d06c      	beq.n	8002c98 <HAL_RCC_OscConfig+0x130>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d168      	bne.n	8002c98 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e26b      	b.n	80030a2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bd2:	d106      	bne.n	8002be2 <HAL_RCC_OscConfig+0x7a>
 8002bd4:	4b84      	ldr	r3, [pc, #528]	@ (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a83      	ldr	r2, [pc, #524]	@ (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002bda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bde:	6013      	str	r3, [r2, #0]
 8002be0:	e02e      	b.n	8002c40 <HAL_RCC_OscConfig+0xd8>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10c      	bne.n	8002c04 <HAL_RCC_OscConfig+0x9c>
 8002bea:	4b7f      	ldr	r3, [pc, #508]	@ (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a7e      	ldr	r2, [pc, #504]	@ (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002bf0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	4b7c      	ldr	r3, [pc, #496]	@ (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a7b      	ldr	r2, [pc, #492]	@ (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002bfc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	e01d      	b.n	8002c40 <HAL_RCC_OscConfig+0xd8>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c0c:	d10c      	bne.n	8002c28 <HAL_RCC_OscConfig+0xc0>
 8002c0e:	4b76      	ldr	r3, [pc, #472]	@ (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a75      	ldr	r2, [pc, #468]	@ (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002c14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	4b73      	ldr	r3, [pc, #460]	@ (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a72      	ldr	r2, [pc, #456]	@ (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002c20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	e00b      	b.n	8002c40 <HAL_RCC_OscConfig+0xd8>
 8002c28:	4b6f      	ldr	r3, [pc, #444]	@ (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a6e      	ldr	r2, [pc, #440]	@ (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002c2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c32:	6013      	str	r3, [r2, #0]
 8002c34:	4b6c      	ldr	r3, [pc, #432]	@ (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a6b      	ldr	r2, [pc, #428]	@ (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002c3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d013      	beq.n	8002c70 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c48:	f7fe fb18 	bl	800127c <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c50:	f7fe fb14 	bl	800127c <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b64      	cmp	r3, #100	@ 0x64
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e21f      	b.n	80030a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c62:	4b61      	ldr	r3, [pc, #388]	@ (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f0      	beq.n	8002c50 <HAL_RCC_OscConfig+0xe8>
 8002c6e:	e014      	b.n	8002c9a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c70:	f7fe fb04 	bl	800127c <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c78:	f7fe fb00 	bl	800127c <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b64      	cmp	r3, #100	@ 0x64
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e20b      	b.n	80030a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c8a:	4b57      	ldr	r3, [pc, #348]	@ (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1f0      	bne.n	8002c78 <HAL_RCC_OscConfig+0x110>
 8002c96:	e000      	b.n	8002c9a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d069      	beq.n	8002d7a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ca6:	4b50      	ldr	r3, [pc, #320]	@ (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 030c 	and.w	r3, r3, #12
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00b      	beq.n	8002cca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cb2:	4b4d      	ldr	r3, [pc, #308]	@ (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 030c 	and.w	r3, r3, #12
 8002cba:	2b08      	cmp	r3, #8
 8002cbc:	d11c      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x190>
 8002cbe:	4b4a      	ldr	r3, [pc, #296]	@ (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d116      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cca:	4b47      	ldr	r3, [pc, #284]	@ (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d005      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x17a>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d001      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e1df      	b.n	80030a2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce2:	4b41      	ldr	r3, [pc, #260]	@ (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	493d      	ldr	r1, [pc, #244]	@ (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cf6:	e040      	b.n	8002d7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d023      	beq.n	8002d48 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d00:	4b39      	ldr	r3, [pc, #228]	@ (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a38      	ldr	r2, [pc, #224]	@ (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002d06:	f043 0301 	orr.w	r3, r3, #1
 8002d0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0c:	f7fe fab6 	bl	800127c <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d14:	f7fe fab2 	bl	800127c <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e1bd      	b.n	80030a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d26:	4b30      	ldr	r3, [pc, #192]	@ (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d0f0      	beq.n	8002d14 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d32:	4b2d      	ldr	r3, [pc, #180]	@ (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	4929      	ldr	r1, [pc, #164]	@ (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	600b      	str	r3, [r1, #0]
 8002d46:	e018      	b.n	8002d7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d48:	4b27      	ldr	r3, [pc, #156]	@ (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a26      	ldr	r2, [pc, #152]	@ (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002d4e:	f023 0301 	bic.w	r3, r3, #1
 8002d52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d54:	f7fe fa92 	bl	800127c <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d5c:	f7fe fa8e 	bl	800127c <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e199      	b.n	80030a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1f0      	bne.n	8002d5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d038      	beq.n	8002df8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d019      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d8e:	4b16      	ldr	r3, [pc, #88]	@ (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002d90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d92:	4a15      	ldr	r2, [pc, #84]	@ (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002d94:	f043 0301 	orr.w	r3, r3, #1
 8002d98:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9a:	f7fe fa6f 	bl	800127c <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002da2:	f7fe fa6b 	bl	800127c <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e176      	b.n	80030a2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002db4:	4b0c      	ldr	r3, [pc, #48]	@ (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002db6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0f0      	beq.n	8002da2 <HAL_RCC_OscConfig+0x23a>
 8002dc0:	e01a      	b.n	8002df8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dc2:	4b09      	ldr	r3, [pc, #36]	@ (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002dc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dc6:	4a08      	ldr	r2, [pc, #32]	@ (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002dc8:	f023 0301 	bic.w	r3, r3, #1
 8002dcc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dce:	f7fe fa55 	bl	800127c <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dd4:	e00a      	b.n	8002dec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd6:	f7fe fa51 	bl	800127c <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d903      	bls.n	8002dec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e15c      	b.n	80030a2 <HAL_RCC_OscConfig+0x53a>
 8002de8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dec:	4b91      	ldr	r3, [pc, #580]	@ (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002dee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1ee      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 80a4 	beq.w	8002f4e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e06:	4b8b      	ldr	r3, [pc, #556]	@ (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10d      	bne.n	8002e2e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e12:	4b88      	ldr	r3, [pc, #544]	@ (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e16:	4a87      	ldr	r2, [pc, #540]	@ (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002e18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e1e:	4b85      	ldr	r3, [pc, #532]	@ (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e26:	60bb      	str	r3, [r7, #8]
 8002e28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e2e:	4b82      	ldr	r3, [pc, #520]	@ (8003038 <HAL_RCC_OscConfig+0x4d0>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d118      	bne.n	8002e6c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002e3a:	4b7f      	ldr	r3, [pc, #508]	@ (8003038 <HAL_RCC_OscConfig+0x4d0>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a7e      	ldr	r2, [pc, #504]	@ (8003038 <HAL_RCC_OscConfig+0x4d0>)
 8002e40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e46:	f7fe fa19 	bl	800127c <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e4c:	e008      	b.n	8002e60 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e4e:	f7fe fa15 	bl	800127c <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b64      	cmp	r3, #100	@ 0x64
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e120      	b.n	80030a2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e60:	4b75      	ldr	r3, [pc, #468]	@ (8003038 <HAL_RCC_OscConfig+0x4d0>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d0f0      	beq.n	8002e4e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d106      	bne.n	8002e82 <HAL_RCC_OscConfig+0x31a>
 8002e74:	4b6f      	ldr	r3, [pc, #444]	@ (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002e76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e78:	4a6e      	ldr	r2, [pc, #440]	@ (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002e7a:	f043 0301 	orr.w	r3, r3, #1
 8002e7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e80:	e02d      	b.n	8002ede <HAL_RCC_OscConfig+0x376>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10c      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x33c>
 8002e8a:	4b6a      	ldr	r3, [pc, #424]	@ (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e8e:	4a69      	ldr	r2, [pc, #420]	@ (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002e90:	f023 0301 	bic.w	r3, r3, #1
 8002e94:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e96:	4b67      	ldr	r3, [pc, #412]	@ (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e9a:	4a66      	ldr	r2, [pc, #408]	@ (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002e9c:	f023 0304 	bic.w	r3, r3, #4
 8002ea0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ea2:	e01c      	b.n	8002ede <HAL_RCC_OscConfig+0x376>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	2b05      	cmp	r3, #5
 8002eaa:	d10c      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x35e>
 8002eac:	4b61      	ldr	r3, [pc, #388]	@ (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002eae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eb0:	4a60      	ldr	r2, [pc, #384]	@ (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002eb2:	f043 0304 	orr.w	r3, r3, #4
 8002eb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eb8:	4b5e      	ldr	r3, [pc, #376]	@ (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002eba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ebc:	4a5d      	ldr	r2, [pc, #372]	@ (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002ebe:	f043 0301 	orr.w	r3, r3, #1
 8002ec2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ec4:	e00b      	b.n	8002ede <HAL_RCC_OscConfig+0x376>
 8002ec6:	4b5b      	ldr	r3, [pc, #364]	@ (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002ec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eca:	4a5a      	ldr	r2, [pc, #360]	@ (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002ecc:	f023 0301 	bic.w	r3, r3, #1
 8002ed0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ed2:	4b58      	ldr	r3, [pc, #352]	@ (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ed6:	4a57      	ldr	r2, [pc, #348]	@ (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002ed8:	f023 0304 	bic.w	r3, r3, #4
 8002edc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d015      	beq.n	8002f12 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee6:	f7fe f9c9 	bl	800127c <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eec:	e00a      	b.n	8002f04 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eee:	f7fe f9c5 	bl	800127c <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e0ce      	b.n	80030a2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f04:	4b4b      	ldr	r3, [pc, #300]	@ (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002f06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0ee      	beq.n	8002eee <HAL_RCC_OscConfig+0x386>
 8002f10:	e014      	b.n	8002f3c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f12:	f7fe f9b3 	bl	800127c <HAL_GetTick>
 8002f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f18:	e00a      	b.n	8002f30 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f1a:	f7fe f9af 	bl	800127c <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e0b8      	b.n	80030a2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f30:	4b40      	ldr	r3, [pc, #256]	@ (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002f32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1ee      	bne.n	8002f1a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f3c:	7dfb      	ldrb	r3, [r7, #23]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d105      	bne.n	8002f4e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f42:	4b3c      	ldr	r3, [pc, #240]	@ (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f46:	4a3b      	ldr	r2, [pc, #236]	@ (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002f48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f4c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f000 80a4 	beq.w	80030a0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f58:	4b36      	ldr	r3, [pc, #216]	@ (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f003 030c 	and.w	r3, r3, #12
 8002f60:	2b08      	cmp	r3, #8
 8002f62:	d06b      	beq.n	800303c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d149      	bne.n	8003000 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f6c:	4b31      	ldr	r3, [pc, #196]	@ (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a30      	ldr	r2, [pc, #192]	@ (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002f72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f78:	f7fe f980 	bl	800127c <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f80:	f7fe f97c 	bl	800127c <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e087      	b.n	80030a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f92:	4b28      	ldr	r3, [pc, #160]	@ (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1f0      	bne.n	8002f80 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69da      	ldr	r2, [r3, #28]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fac:	019b      	lsls	r3, r3, #6
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fb4:	085b      	lsrs	r3, r3, #1
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	041b      	lsls	r3, r3, #16
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc0:	061b      	lsls	r3, r3, #24
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	4a1b      	ldr	r2, [pc, #108]	@ (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002fc6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002fca:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fcc:	4b19      	ldr	r3, [pc, #100]	@ (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a18      	ldr	r2, [pc, #96]	@ (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002fd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd8:	f7fe f950 	bl	800127c <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe0:	f7fe f94c 	bl	800127c <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e057      	b.n	80030a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff2:	4b10      	ldr	r3, [pc, #64]	@ (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0f0      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x478>
 8002ffe:	e04f      	b.n	80030a0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003000:	4b0c      	ldr	r3, [pc, #48]	@ (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a0b      	ldr	r2, [pc, #44]	@ (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8003006:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800300a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300c:	f7fe f936 	bl	800127c <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003014:	f7fe f932 	bl	800127c <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e03d      	b.n	80030a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003026:	4b03      	ldr	r3, [pc, #12]	@ (8003034 <HAL_RCC_OscConfig+0x4cc>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1f0      	bne.n	8003014 <HAL_RCC_OscConfig+0x4ac>
 8003032:	e035      	b.n	80030a0 <HAL_RCC_OscConfig+0x538>
 8003034:	40023800 	.word	0x40023800
 8003038:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800303c:	4b1b      	ldr	r3, [pc, #108]	@ (80030ac <HAL_RCC_OscConfig+0x544>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d028      	beq.n	800309c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003054:	429a      	cmp	r2, r3
 8003056:	d121      	bne.n	800309c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003062:	429a      	cmp	r2, r3
 8003064:	d11a      	bne.n	800309c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800306c:	4013      	ands	r3, r2
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003072:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003074:	4293      	cmp	r3, r2
 8003076:	d111      	bne.n	800309c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003082:	085b      	lsrs	r3, r3, #1
 8003084:	3b01      	subs	r3, #1
 8003086:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003088:	429a      	cmp	r2, r3
 800308a:	d107      	bne.n	800309c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003096:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003098:	429a      	cmp	r2, r3
 800309a:	d001      	beq.n	80030a0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e000      	b.n	80030a2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40023800 	.word	0x40023800

080030b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80030ba:	2300      	movs	r3, #0
 80030bc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e0d0      	b.n	800326a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030c8:	4b6a      	ldr	r3, [pc, #424]	@ (8003274 <HAL_RCC_ClockConfig+0x1c4>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 030f 	and.w	r3, r3, #15
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d910      	bls.n	80030f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030d6:	4b67      	ldr	r3, [pc, #412]	@ (8003274 <HAL_RCC_ClockConfig+0x1c4>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f023 020f 	bic.w	r2, r3, #15
 80030de:	4965      	ldr	r1, [pc, #404]	@ (8003274 <HAL_RCC_ClockConfig+0x1c4>)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030e6:	4b63      	ldr	r3, [pc, #396]	@ (8003274 <HAL_RCC_ClockConfig+0x1c4>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d001      	beq.n	80030f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e0b8      	b.n	800326a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d020      	beq.n	8003146 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	2b00      	cmp	r3, #0
 800310e:	d005      	beq.n	800311c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003110:	4b59      	ldr	r3, [pc, #356]	@ (8003278 <HAL_RCC_ClockConfig+0x1c8>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	4a58      	ldr	r2, [pc, #352]	@ (8003278 <HAL_RCC_ClockConfig+0x1c8>)
 8003116:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800311a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0308 	and.w	r3, r3, #8
 8003124:	2b00      	cmp	r3, #0
 8003126:	d005      	beq.n	8003134 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003128:	4b53      	ldr	r3, [pc, #332]	@ (8003278 <HAL_RCC_ClockConfig+0x1c8>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	4a52      	ldr	r2, [pc, #328]	@ (8003278 <HAL_RCC_ClockConfig+0x1c8>)
 800312e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003132:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003134:	4b50      	ldr	r3, [pc, #320]	@ (8003278 <HAL_RCC_ClockConfig+0x1c8>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	494d      	ldr	r1, [pc, #308]	@ (8003278 <HAL_RCC_ClockConfig+0x1c8>)
 8003142:	4313      	orrs	r3, r2
 8003144:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d040      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d107      	bne.n	800316a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315a:	4b47      	ldr	r3, [pc, #284]	@ (8003278 <HAL_RCC_ClockConfig+0x1c8>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d115      	bne.n	8003192 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e07f      	b.n	800326a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2b02      	cmp	r3, #2
 8003170:	d107      	bne.n	8003182 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003172:	4b41      	ldr	r3, [pc, #260]	@ (8003278 <HAL_RCC_ClockConfig+0x1c8>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d109      	bne.n	8003192 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e073      	b.n	800326a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003182:	4b3d      	ldr	r3, [pc, #244]	@ (8003278 <HAL_RCC_ClockConfig+0x1c8>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e06b      	b.n	800326a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003192:	4b39      	ldr	r3, [pc, #228]	@ (8003278 <HAL_RCC_ClockConfig+0x1c8>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f023 0203 	bic.w	r2, r3, #3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	4936      	ldr	r1, [pc, #216]	@ (8003278 <HAL_RCC_ClockConfig+0x1c8>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031a4:	f7fe f86a 	bl	800127c <HAL_GetTick>
 80031a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031aa:	e00a      	b.n	80031c2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ac:	f7fe f866 	bl	800127c <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e053      	b.n	800326a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c2:	4b2d      	ldr	r3, [pc, #180]	@ (8003278 <HAL_RCC_ClockConfig+0x1c8>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 020c 	and.w	r2, r3, #12
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d1eb      	bne.n	80031ac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031d4:	4b27      	ldr	r3, [pc, #156]	@ (8003274 <HAL_RCC_ClockConfig+0x1c4>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 030f 	and.w	r3, r3, #15
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d210      	bcs.n	8003204 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e2:	4b24      	ldr	r3, [pc, #144]	@ (8003274 <HAL_RCC_ClockConfig+0x1c4>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f023 020f 	bic.w	r2, r3, #15
 80031ea:	4922      	ldr	r1, [pc, #136]	@ (8003274 <HAL_RCC_ClockConfig+0x1c4>)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031f2:	4b20      	ldr	r3, [pc, #128]	@ (8003274 <HAL_RCC_ClockConfig+0x1c4>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 030f 	and.w	r3, r3, #15
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d001      	beq.n	8003204 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e032      	b.n	800326a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b00      	cmp	r3, #0
 800320e:	d008      	beq.n	8003222 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003210:	4b19      	ldr	r3, [pc, #100]	@ (8003278 <HAL_RCC_ClockConfig+0x1c8>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	4916      	ldr	r1, [pc, #88]	@ (8003278 <HAL_RCC_ClockConfig+0x1c8>)
 800321e:	4313      	orrs	r3, r2
 8003220:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0308 	and.w	r3, r3, #8
 800322a:	2b00      	cmp	r3, #0
 800322c:	d009      	beq.n	8003242 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800322e:	4b12      	ldr	r3, [pc, #72]	@ (8003278 <HAL_RCC_ClockConfig+0x1c8>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	490e      	ldr	r1, [pc, #56]	@ (8003278 <HAL_RCC_ClockConfig+0x1c8>)
 800323e:	4313      	orrs	r3, r2
 8003240:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003242:	f000 f821 	bl	8003288 <HAL_RCC_GetSysClockFreq>
 8003246:	4602      	mov	r2, r0
 8003248:	4b0b      	ldr	r3, [pc, #44]	@ (8003278 <HAL_RCC_ClockConfig+0x1c8>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	091b      	lsrs	r3, r3, #4
 800324e:	f003 030f 	and.w	r3, r3, #15
 8003252:	490a      	ldr	r1, [pc, #40]	@ (800327c <HAL_RCC_ClockConfig+0x1cc>)
 8003254:	5ccb      	ldrb	r3, [r1, r3]
 8003256:	fa22 f303 	lsr.w	r3, r2, r3
 800325a:	4a09      	ldr	r2, [pc, #36]	@ (8003280 <HAL_RCC_ClockConfig+0x1d0>)
 800325c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800325e:	4b09      	ldr	r3, [pc, #36]	@ (8003284 <HAL_RCC_ClockConfig+0x1d4>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f7fd ffc6 	bl	80011f4 <HAL_InitTick>

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	40023c00 	.word	0x40023c00
 8003278:	40023800 	.word	0x40023800
 800327c:	0800a2f4 	.word	0x0800a2f4
 8003280:	20000004 	.word	0x20000004
 8003284:	20000008 	.word	0x20000008

08003288 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003288:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800328c:	b090      	sub	sp, #64	@ 0x40
 800328e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003290:	2300      	movs	r3, #0
 8003292:	637b      	str	r3, [r7, #52]	@ 0x34
 8003294:	2300      	movs	r3, #0
 8003296:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003298:	2300      	movs	r3, #0
 800329a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800329c:	2300      	movs	r3, #0
 800329e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032a0:	4b59      	ldr	r3, [pc, #356]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x180>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f003 030c 	and.w	r3, r3, #12
 80032a8:	2b08      	cmp	r3, #8
 80032aa:	d00d      	beq.n	80032c8 <HAL_RCC_GetSysClockFreq+0x40>
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	f200 80a1 	bhi.w	80033f4 <HAL_RCC_GetSysClockFreq+0x16c>
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d002      	beq.n	80032bc <HAL_RCC_GetSysClockFreq+0x34>
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	d003      	beq.n	80032c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80032ba:	e09b      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032bc:	4b53      	ldr	r3, [pc, #332]	@ (800340c <HAL_RCC_GetSysClockFreq+0x184>)
 80032be:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80032c0:	e09b      	b.n	80033fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032c2:	4b53      	ldr	r3, [pc, #332]	@ (8003410 <HAL_RCC_GetSysClockFreq+0x188>)
 80032c4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80032c6:	e098      	b.n	80033fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032c8:	4b4f      	ldr	r3, [pc, #316]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x180>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032d0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80032d2:	4b4d      	ldr	r3, [pc, #308]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x180>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d028      	beq.n	8003330 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032de:	4b4a      	ldr	r3, [pc, #296]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x180>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	099b      	lsrs	r3, r3, #6
 80032e4:	2200      	movs	r2, #0
 80032e6:	623b      	str	r3, [r7, #32]
 80032e8:	627a      	str	r2, [r7, #36]	@ 0x24
 80032ea:	6a3b      	ldr	r3, [r7, #32]
 80032ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80032f0:	2100      	movs	r1, #0
 80032f2:	4b47      	ldr	r3, [pc, #284]	@ (8003410 <HAL_RCC_GetSysClockFreq+0x188>)
 80032f4:	fb03 f201 	mul.w	r2, r3, r1
 80032f8:	2300      	movs	r3, #0
 80032fa:	fb00 f303 	mul.w	r3, r0, r3
 80032fe:	4413      	add	r3, r2
 8003300:	4a43      	ldr	r2, [pc, #268]	@ (8003410 <HAL_RCC_GetSysClockFreq+0x188>)
 8003302:	fba0 1202 	umull	r1, r2, r0, r2
 8003306:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003308:	460a      	mov	r2, r1
 800330a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800330c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800330e:	4413      	add	r3, r2
 8003310:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003314:	2200      	movs	r2, #0
 8003316:	61bb      	str	r3, [r7, #24]
 8003318:	61fa      	str	r2, [r7, #28]
 800331a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800331e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003322:	f7fc ffc5 	bl	80002b0 <__aeabi_uldivmod>
 8003326:	4602      	mov	r2, r0
 8003328:	460b      	mov	r3, r1
 800332a:	4613      	mov	r3, r2
 800332c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800332e:	e053      	b.n	80033d8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003330:	4b35      	ldr	r3, [pc, #212]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x180>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	099b      	lsrs	r3, r3, #6
 8003336:	2200      	movs	r2, #0
 8003338:	613b      	str	r3, [r7, #16]
 800333a:	617a      	str	r2, [r7, #20]
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003342:	f04f 0b00 	mov.w	fp, #0
 8003346:	4652      	mov	r2, sl
 8003348:	465b      	mov	r3, fp
 800334a:	f04f 0000 	mov.w	r0, #0
 800334e:	f04f 0100 	mov.w	r1, #0
 8003352:	0159      	lsls	r1, r3, #5
 8003354:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003358:	0150      	lsls	r0, r2, #5
 800335a:	4602      	mov	r2, r0
 800335c:	460b      	mov	r3, r1
 800335e:	ebb2 080a 	subs.w	r8, r2, sl
 8003362:	eb63 090b 	sbc.w	r9, r3, fp
 8003366:	f04f 0200 	mov.w	r2, #0
 800336a:	f04f 0300 	mov.w	r3, #0
 800336e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003372:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003376:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800337a:	ebb2 0408 	subs.w	r4, r2, r8
 800337e:	eb63 0509 	sbc.w	r5, r3, r9
 8003382:	f04f 0200 	mov.w	r2, #0
 8003386:	f04f 0300 	mov.w	r3, #0
 800338a:	00eb      	lsls	r3, r5, #3
 800338c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003390:	00e2      	lsls	r2, r4, #3
 8003392:	4614      	mov	r4, r2
 8003394:	461d      	mov	r5, r3
 8003396:	eb14 030a 	adds.w	r3, r4, sl
 800339a:	603b      	str	r3, [r7, #0]
 800339c:	eb45 030b 	adc.w	r3, r5, fp
 80033a0:	607b      	str	r3, [r7, #4]
 80033a2:	f04f 0200 	mov.w	r2, #0
 80033a6:	f04f 0300 	mov.w	r3, #0
 80033aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033ae:	4629      	mov	r1, r5
 80033b0:	028b      	lsls	r3, r1, #10
 80033b2:	4621      	mov	r1, r4
 80033b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033b8:	4621      	mov	r1, r4
 80033ba:	028a      	lsls	r2, r1, #10
 80033bc:	4610      	mov	r0, r2
 80033be:	4619      	mov	r1, r3
 80033c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033c2:	2200      	movs	r2, #0
 80033c4:	60bb      	str	r3, [r7, #8]
 80033c6:	60fa      	str	r2, [r7, #12]
 80033c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033cc:	f7fc ff70 	bl	80002b0 <__aeabi_uldivmod>
 80033d0:	4602      	mov	r2, r0
 80033d2:	460b      	mov	r3, r1
 80033d4:	4613      	mov	r3, r2
 80033d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80033d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x180>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	0c1b      	lsrs	r3, r3, #16
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	3301      	adds	r3, #1
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80033e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80033ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033f2:	e002      	b.n	80033fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033f4:	4b05      	ldr	r3, [pc, #20]	@ (800340c <HAL_RCC_GetSysClockFreq+0x184>)
 80033f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3740      	adds	r7, #64	@ 0x40
 8003400:	46bd      	mov	sp, r7
 8003402:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003406:	bf00      	nop
 8003408:	40023800 	.word	0x40023800
 800340c:	00f42400 	.word	0x00f42400
 8003410:	017d7840 	.word	0x017d7840

08003414 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b088      	sub	sp, #32
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800341c:	2300      	movs	r3, #0
 800341e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003420:	2300      	movs	r3, #0
 8003422:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003424:	2300      	movs	r3, #0
 8003426:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003428:	2300      	movs	r3, #0
 800342a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800342c:	2300      	movs	r3, #0
 800342e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b00      	cmp	r3, #0
 800343a:	d012      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800343c:	4b69      	ldr	r3, [pc, #420]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	4a68      	ldr	r2, [pc, #416]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003442:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003446:	6093      	str	r3, [r2, #8]
 8003448:	4b66      	ldr	r3, [pc, #408]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003450:	4964      	ldr	r1, [pc, #400]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003452:	4313      	orrs	r3, r2
 8003454:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800345e:	2301      	movs	r3, #1
 8003460:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d017      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800346e:	4b5d      	ldr	r3, [pc, #372]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003470:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003474:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800347c:	4959      	ldr	r1, [pc, #356]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800347e:	4313      	orrs	r3, r2
 8003480:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003488:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800348c:	d101      	bne.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800348e:	2301      	movs	r3, #1
 8003490:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800349a:	2301      	movs	r3, #1
 800349c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d017      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80034aa:	4b4e      	ldr	r3, [pc, #312]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034b0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b8:	494a      	ldr	r1, [pc, #296]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034c8:	d101      	bne.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80034ca:	2301      	movs	r3, #1
 80034cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80034d6:	2301      	movs	r3, #1
 80034d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80034e6:	2301      	movs	r3, #1
 80034e8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0320 	and.w	r3, r3, #32
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 808b 	beq.w	800360e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80034f8:	4b3a      	ldr	r3, [pc, #232]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fc:	4a39      	ldr	r2, [pc, #228]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003502:	6413      	str	r3, [r2, #64]	@ 0x40
 8003504:	4b37      	ldr	r3, [pc, #220]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003508:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800350c:	60bb      	str	r3, [r7, #8]
 800350e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003510:	4b35      	ldr	r3, [pc, #212]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a34      	ldr	r2, [pc, #208]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003516:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800351a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800351c:	f7fd feae 	bl	800127c <HAL_GetTick>
 8003520:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003522:	e008      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003524:	f7fd feaa 	bl	800127c <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b64      	cmp	r3, #100	@ 0x64
 8003530:	d901      	bls.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e357      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003536:	4b2c      	ldr	r3, [pc, #176]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0f0      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003542:	4b28      	ldr	r3, [pc, #160]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003546:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800354a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d035      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003556:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	429a      	cmp	r2, r3
 800355e:	d02e      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003560:	4b20      	ldr	r3, [pc, #128]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003564:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003568:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800356a:	4b1e      	ldr	r3, [pc, #120]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800356c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800356e:	4a1d      	ldr	r2, [pc, #116]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003570:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003574:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003576:	4b1b      	ldr	r3, [pc, #108]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800357a:	4a1a      	ldr	r2, [pc, #104]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800357c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003580:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003582:	4a18      	ldr	r2, [pc, #96]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003588:	4b16      	ldr	r3, [pc, #88]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800358a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	2b01      	cmp	r3, #1
 8003592:	d114      	bne.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003594:	f7fd fe72 	bl	800127c <HAL_GetTick>
 8003598:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800359a:	e00a      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800359c:	f7fd fe6e 	bl	800127c <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e319      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b2:	4b0c      	ldr	r3, [pc, #48]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d0ee      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80035ca:	d111      	bne.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80035cc:	4b05      	ldr	r3, [pc, #20]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80035d8:	4b04      	ldr	r3, [pc, #16]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80035da:	400b      	ands	r3, r1
 80035dc:	4901      	ldr	r1, [pc, #4]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	608b      	str	r3, [r1, #8]
 80035e2:	e00b      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80035e4:	40023800 	.word	0x40023800
 80035e8:	40007000 	.word	0x40007000
 80035ec:	0ffffcff 	.word	0x0ffffcff
 80035f0:	4baa      	ldr	r3, [pc, #680]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	4aa9      	ldr	r2, [pc, #676]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035f6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80035fa:	6093      	str	r3, [r2, #8]
 80035fc:	4ba7      	ldr	r3, [pc, #668]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035fe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003604:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003608:	49a4      	ldr	r1, [pc, #656]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800360a:	4313      	orrs	r3, r2
 800360c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0310 	and.w	r3, r3, #16
 8003616:	2b00      	cmp	r3, #0
 8003618:	d010      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800361a:	4ba0      	ldr	r3, [pc, #640]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800361c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003620:	4a9e      	ldr	r2, [pc, #632]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003622:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003626:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800362a:	4b9c      	ldr	r3, [pc, #624]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800362c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003634:	4999      	ldr	r1, [pc, #612]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003636:	4313      	orrs	r3, r2
 8003638:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00a      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003648:	4b94      	ldr	r3, [pc, #592]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800364a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800364e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003656:	4991      	ldr	r1, [pc, #580]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003658:	4313      	orrs	r3, r2
 800365a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00a      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800366a:	4b8c      	ldr	r3, [pc, #560]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800366c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003670:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003678:	4988      	ldr	r1, [pc, #544]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800367a:	4313      	orrs	r3, r2
 800367c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00a      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800368c:	4b83      	ldr	r3, [pc, #524]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800368e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003692:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800369a:	4980      	ldr	r1, [pc, #512]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800369c:	4313      	orrs	r3, r2
 800369e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00a      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036ae:	4b7b      	ldr	r3, [pc, #492]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036b4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036bc:	4977      	ldr	r1, [pc, #476]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00a      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036d0:	4b72      	ldr	r3, [pc, #456]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036d6:	f023 0203 	bic.w	r2, r3, #3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036de:	496f      	ldr	r1, [pc, #444]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00a      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036f2:	4b6a      	ldr	r3, [pc, #424]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036f8:	f023 020c 	bic.w	r2, r3, #12
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003700:	4966      	ldr	r1, [pc, #408]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003702:	4313      	orrs	r3, r2
 8003704:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00a      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003714:	4b61      	ldr	r3, [pc, #388]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800371a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003722:	495e      	ldr	r1, [pc, #376]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003724:	4313      	orrs	r3, r2
 8003726:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00a      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003736:	4b59      	ldr	r3, [pc, #356]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800373c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003744:	4955      	ldr	r1, [pc, #340]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003746:	4313      	orrs	r3, r2
 8003748:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00a      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003758:	4b50      	ldr	r3, [pc, #320]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800375a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800375e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003766:	494d      	ldr	r1, [pc, #308]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003768:	4313      	orrs	r3, r2
 800376a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00a      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800377a:	4b48      	ldr	r3, [pc, #288]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800377c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003780:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003788:	4944      	ldr	r1, [pc, #272]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800378a:	4313      	orrs	r3, r2
 800378c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00a      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800379c:	4b3f      	ldr	r3, [pc, #252]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800379e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037a2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037aa:	493c      	ldr	r1, [pc, #240]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00a      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80037be:	4b37      	ldr	r3, [pc, #220]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037c4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037cc:	4933      	ldr	r1, [pc, #204]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00a      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80037e0:	4b2e      	ldr	r3, [pc, #184]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037e6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037ee:	492b      	ldr	r1, [pc, #172]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d011      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003802:	4b26      	ldr	r3, [pc, #152]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003804:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003808:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003810:	4922      	ldr	r1, [pc, #136]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003812:	4313      	orrs	r3, r2
 8003814:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800381c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003820:	d101      	bne.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003822:	2301      	movs	r3, #1
 8003824:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003832:	2301      	movs	r3, #1
 8003834:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00a      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003842:	4b16      	ldr	r3, [pc, #88]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003844:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003848:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003850:	4912      	ldr	r1, [pc, #72]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003852:	4313      	orrs	r3, r2
 8003854:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00b      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003864:	4b0d      	ldr	r3, [pc, #52]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800386a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003874:	4909      	ldr	r1, [pc, #36]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003876:	4313      	orrs	r3, r2
 8003878:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d006      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800388a:	2b00      	cmp	r3, #0
 800388c:	f000 80d9 	beq.w	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003890:	4b02      	ldr	r3, [pc, #8]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a01      	ldr	r2, [pc, #4]	@ (800389c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003896:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800389a:	e001      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800389c:	40023800 	.word	0x40023800
 80038a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038a2:	f7fd fceb 	bl	800127c <HAL_GetTick>
 80038a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038a8:	e008      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80038aa:	f7fd fce7 	bl	800127c <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b64      	cmp	r3, #100	@ 0x64
 80038b6:	d901      	bls.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e194      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038bc:	4b6c      	ldr	r3, [pc, #432]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1f0      	bne.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d021      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d11d      	bne.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80038dc:	4b64      	ldr	r3, [pc, #400]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038e2:	0c1b      	lsrs	r3, r3, #16
 80038e4:	f003 0303 	and.w	r3, r3, #3
 80038e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80038ea:	4b61      	ldr	r3, [pc, #388]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038f0:	0e1b      	lsrs	r3, r3, #24
 80038f2:	f003 030f 	and.w	r3, r3, #15
 80038f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	019a      	lsls	r2, r3, #6
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	041b      	lsls	r3, r3, #16
 8003902:	431a      	orrs	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	061b      	lsls	r3, r3, #24
 8003908:	431a      	orrs	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	071b      	lsls	r3, r3, #28
 8003910:	4957      	ldr	r1, [pc, #348]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003912:	4313      	orrs	r3, r2
 8003914:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d004      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003928:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800392c:	d00a      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003936:	2b00      	cmp	r3, #0
 8003938:	d02e      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003942:	d129      	bne.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003944:	4b4a      	ldr	r3, [pc, #296]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003946:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800394a:	0c1b      	lsrs	r3, r3, #16
 800394c:	f003 0303 	and.w	r3, r3, #3
 8003950:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003952:	4b47      	ldr	r3, [pc, #284]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003954:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003958:	0f1b      	lsrs	r3, r3, #28
 800395a:	f003 0307 	and.w	r3, r3, #7
 800395e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	019a      	lsls	r2, r3, #6
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	041b      	lsls	r3, r3, #16
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	061b      	lsls	r3, r3, #24
 8003972:	431a      	orrs	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	071b      	lsls	r3, r3, #28
 8003978:	493d      	ldr	r1, [pc, #244]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800397a:	4313      	orrs	r3, r2
 800397c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003980:	4b3b      	ldr	r3, [pc, #236]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003982:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003986:	f023 021f 	bic.w	r2, r3, #31
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398e:	3b01      	subs	r3, #1
 8003990:	4937      	ldr	r1, [pc, #220]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003992:	4313      	orrs	r3, r2
 8003994:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d01d      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80039a4:	4b32      	ldr	r3, [pc, #200]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039aa:	0e1b      	lsrs	r3, r3, #24
 80039ac:	f003 030f 	and.w	r3, r3, #15
 80039b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80039b2:	4b2f      	ldr	r3, [pc, #188]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039b8:	0f1b      	lsrs	r3, r3, #28
 80039ba:	f003 0307 	and.w	r3, r3, #7
 80039be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	019a      	lsls	r2, r3, #6
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	041b      	lsls	r3, r3, #16
 80039cc:	431a      	orrs	r2, r3
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	061b      	lsls	r3, r3, #24
 80039d2:	431a      	orrs	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	071b      	lsls	r3, r3, #28
 80039d8:	4925      	ldr	r1, [pc, #148]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d011      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	019a      	lsls	r2, r3, #6
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	041b      	lsls	r3, r3, #16
 80039f8:	431a      	orrs	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	061b      	lsls	r3, r3, #24
 8003a00:	431a      	orrs	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	071b      	lsls	r3, r3, #28
 8003a08:	4919      	ldr	r1, [pc, #100]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003a10:	4b17      	ldr	r3, [pc, #92]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a16      	ldr	r2, [pc, #88]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a16:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a1c:	f7fd fc2e 	bl	800127c <HAL_GetTick>
 8003a20:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a22:	e008      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a24:	f7fd fc2a 	bl	800127c <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b64      	cmp	r3, #100	@ 0x64
 8003a30:	d901      	bls.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e0d7      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a36:	4b0e      	ldr	r3, [pc, #56]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d0f0      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	f040 80cd 	bne.w	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003a4a:	4b09      	ldr	r3, [pc, #36]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a08      	ldr	r2, [pc, #32]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a56:	f7fd fc11 	bl	800127c <HAL_GetTick>
 8003a5a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a5c:	e00a      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a5e:	f7fd fc0d 	bl	800127c <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b64      	cmp	r3, #100	@ 0x64
 8003a6a:	d903      	bls.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e0ba      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003a70:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a74:	4b5e      	ldr	r3, [pc, #376]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a80:	d0ed      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d003      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d009      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d02e      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d12a      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003aaa:	4b51      	ldr	r3, [pc, #324]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ab0:	0c1b      	lsrs	r3, r3, #16
 8003ab2:	f003 0303 	and.w	r3, r3, #3
 8003ab6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ab8:	4b4d      	ldr	r3, [pc, #308]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003abe:	0f1b      	lsrs	r3, r3, #28
 8003ac0:	f003 0307 	and.w	r3, r3, #7
 8003ac4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	019a      	lsls	r2, r3, #6
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	041b      	lsls	r3, r3, #16
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	061b      	lsls	r3, r3, #24
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	071b      	lsls	r3, r3, #28
 8003ade:	4944      	ldr	r1, [pc, #272]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003ae6:	4b42      	ldr	r3, [pc, #264]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ae8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003aec:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af4:	3b01      	subs	r3, #1
 8003af6:	021b      	lsls	r3, r3, #8
 8003af8:	493d      	ldr	r1, [pc, #244]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d022      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b14:	d11d      	bne.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b16:	4b36      	ldr	r3, [pc, #216]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b1c:	0e1b      	lsrs	r3, r3, #24
 8003b1e:	f003 030f 	and.w	r3, r3, #15
 8003b22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b24:	4b32      	ldr	r3, [pc, #200]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b2a:	0f1b      	lsrs	r3, r3, #28
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	019a      	lsls	r2, r3, #6
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	041b      	lsls	r3, r3, #16
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	061b      	lsls	r3, r3, #24
 8003b44:	431a      	orrs	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	071b      	lsls	r3, r3, #28
 8003b4a:	4929      	ldr	r1, [pc, #164]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0308 	and.w	r3, r3, #8
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d028      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b5e:	4b24      	ldr	r3, [pc, #144]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b64:	0e1b      	lsrs	r3, r3, #24
 8003b66:	f003 030f 	and.w	r3, r3, #15
 8003b6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b6c:	4b20      	ldr	r3, [pc, #128]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b72:	0c1b      	lsrs	r3, r3, #16
 8003b74:	f003 0303 	and.w	r3, r3, #3
 8003b78:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	019a      	lsls	r2, r3, #6
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	041b      	lsls	r3, r3, #16
 8003b84:	431a      	orrs	r2, r3
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	061b      	lsls	r3, r3, #24
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	071b      	lsls	r3, r3, #28
 8003b92:	4917      	ldr	r1, [pc, #92]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003b9a:	4b15      	ldr	r3, [pc, #84]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ba0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba8:	4911      	ldr	r1, [pc, #68]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a0e      	ldr	r2, [pc, #56]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bbc:	f7fd fb5e 	bl	800127c <HAL_GetTick>
 8003bc0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003bc4:	f7fd fb5a 	bl	800127c <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b64      	cmp	r3, #100	@ 0x64
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e007      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003bd6:	4b06      	ldr	r3, [pc, #24]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003bde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003be2:	d1ef      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3720      	adds	r7, #32
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	40023800 	.word	0x40023800

08003bf4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e01d      	b.n	8003c42 <HAL_SD_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d105      	bne.n	8003c1e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 f87a 	bl	8003d12 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2203      	movs	r2, #3
 8003c22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f80f 	bl	8003c4a <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	631a      	str	r2, [r3, #48]	@ 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003c4a:	b5b0      	push	{r4, r5, r7, lr}
 8003c4c:	b08e      	sub	sp, #56	@ 0x38
 8003c4e:	af04      	add	r7, sp, #16
 8003c50:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003c52:	2300      	movs	r3, #0
 8003c54:	627b      	str	r3, [r7, #36]	@ 0x24
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003c56:	2300      	movs	r3, #0
 8003c58:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8003c62:	2300      	movs	r3, #0
 8003c64:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003c66:	2300      	movs	r3, #0
 8003c68:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8003c6a:	2376      	movs	r3, #118	@ 0x76
 8003c6c:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681d      	ldr	r5, [r3, #0]
 8003c72:	466c      	mov	r4, sp
 8003c74:	f107 0318 	add.w	r3, r7, #24
 8003c78:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003c7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003c80:	f107 030c 	add.w	r3, r7, #12
 8003c84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c86:	4628      	mov	r0, r5
 8003c88:	f001 faee 	bl	8005268 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd); 
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c9a:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hsd->Instance);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f001 fb2b 	bl	80052fc <SDMMC_PowerState_ON>
  
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cb4:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 8003cb6:	2002      	movs	r0, #2
 8003cb8:	f7fd faec 	bl	8001294 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 feee 	bl	8004a9e <SD_PowerON>
 8003cc2:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00b      	beq.n	8003ce2 <HAL_SD_InitCard+0x98>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e013      	b.n	8003d0a <HAL_SD_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 fe11 	bl	800490a <SD_InitCard>
 8003ce8:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00b      	beq.n	8003d08 <HAL_SD_InitCard+0xbe>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e000      	b.n	8003d0a <HAL_SD_InitCard+0xc0>
  }

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3728      	adds	r7, #40	@ 0x28
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bdb0      	pop	{r4, r5, r7, pc}

08003d12 <HAL_SD_MspInit>:
  * @brief  Initializes the SD MSP.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_MspInit(SD_HandleTypeDef *hsd)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_MspInit could be implemented in the user file
   */
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003d26:	b590      	push	{r4, r7, lr}
 8003d28:	b08f      	sub	sp, #60	@ 0x3c
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	60f8      	str	r0, [r7, #12]
 8003d2e:	60b9      	str	r1, [r7, #8]
 8003d30:	607a      	str	r2, [r7, #4]
 8003d32:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003d34:	2300      	movs	r3, #0
 8003d36:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart = HAL_GetTick();
 8003d38:	f7fd faa0 	bl	800127c <HAL_GetTick>
 8003d3c:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t count = 0, *tempbuff = (uint32_t *)pData;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  if(NULL == pData)
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d107      	bne.n	8003d5c <HAL_SD_ReadBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d50:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e176      	b.n	800404a <HAL_SD_ReadBlocks+0x324>
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	f040 8169 	bne.w	800403c <HAL_SD_ReadBlocks+0x316>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	441a      	add	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d907      	bls.n	8003d8e <HAL_SD_ReadBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d82:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e15d      	b.n	800404a <HAL_SD_ReadBlocks+0x324>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2203      	movs	r2, #3
 8003d92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d002      	beq.n	8003dac <HAL_SD_ReadBlocks+0x86>
    {
      BlockAdd *= 512;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	025b      	lsls	r3, r3, #9
 8003daa:	607b      	str	r3, [r7, #4]
    }
      
    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003db4:	4618      	mov	r0, r3
 8003db6:	f001 fb35 	bl	8005424 <SDMMC_CmdBlockLength>
 8003dba:	6378      	str	r0, [r7, #52]	@ 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8003dbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d010      	beq.n	8003de4 <HAL_SD_ReadBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);      
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8003dca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003dd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e132      	b.n	800404a <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003de4:	f04f 33ff 	mov.w	r3, #4294967295
 8003de8:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	025b      	lsls	r3, r3, #9
 8003dee:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003df0:	2390      	movs	r3, #144	@ 0x90
 8003df2:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003df4:	2302      	movs	r3, #2
 8003df6:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	627b      	str	r3, [r7, #36]	@ 0x24
    SDMMC_ConfigData(hsd->Instance, &config);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f107 0210 	add.w	r2, r7, #16
 8003e08:	4611      	mov	r1, r2
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f001 fade 	bl	80053cc <SDMMC_ConfigData>
    
    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d90a      	bls.n	8003e2c <HAL_SD_ReadBlocks+0x106>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2202      	movs	r2, #2
 8003e1a:	631a      	str	r2, [r3, #48]	@ 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6879      	ldr	r1, [r7, #4]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f001 fb46 	bl	80054b4 <SDMMC_CmdReadMultiBlock>
 8003e28:	6378      	str	r0, [r7, #52]	@ 0x34
 8003e2a:	e009      	b.n	8003e40 <HAL_SD_ReadBlocks+0x11a>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	631a      	str	r2, [r3, #48]	@ 0x30
      
      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f001 fb17 	bl	800546c <SDMMC_CmdReadSingleBlock>
 8003e3e:	6378      	str	r0, [r7, #52]	@ 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d04a      	beq.n	8003edc <HAL_SD_ReadBlocks+0x1b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8003e4e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e56:	431a      	orrs	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e0f0      	b.n	800404a <HAL_SD_ReadBlocks+0x324>
    }
      
    /* Poll on SDMMC flags */
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d016      	beq.n	8003ea4 <HAL_SD_ReadBlocks+0x17e>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003e76:	2300      	movs	r3, #0
 8003e78:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e7a:	e00d      	b.n	8003e98 <HAL_SD_ReadBlocks+0x172>
        {
          *(tempbuff + count) = SDMMC_ReadFIFO(hsd->Instance);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6819      	ldr	r1, [r3, #0]
 8003e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e86:	18d4      	adds	r4, r2, r3
 8003e88:	4608      	mov	r0, r1
 8003e8a:	f001 fa19 	bl	80052c0 <SDMMC_ReadFIFO>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	6023      	str	r3, [r4, #0]
        for(count = 0U; count < 8U; count++)
 8003e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e94:	3301      	adds	r3, #1
 8003e96:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e9a:	2b07      	cmp	r3, #7
 8003e9c:	d9ee      	bls.n	8003e7c <HAL_SD_ReadBlocks+0x156>
        }
        tempbuff += 8U;
 8003e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ea0:	3320      	adds	r3, #32
 8003ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8003ea4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d007      	beq.n	8003eba <HAL_SD_ReadBlocks+0x194>
 8003eaa:	f7fd f9e7 	bl	800127c <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d810      	bhi.n	8003edc <HAL_SD_ReadBlocks+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8003ec2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e0b6      	b.n	800404a <HAL_SD_ReadBlocks+0x324>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ee2:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d0be      	beq.n	8003e68 <HAL_SD_ReadBlocks+0x142>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ef0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d020      	beq.n	8003f3a <HAL_SD_ReadBlocks+0x214>
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d91d      	bls.n	8003f3a <HAL_SD_ReadBlocks+0x214>
    {    
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f02:	2b03      	cmp	r3, #3
 8003f04:	d019      	beq.n	8003f3a <HAL_SD_ReadBlocks+0x214>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f001 fb3e 	bl	800558c <SDMMC_CmdStopTransfer>
 8003f10:	6378      	str	r0, [r7, #52]	@ 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8003f12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d010      	beq.n	8003f3a <HAL_SD_ReadBlocks+0x214>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8003f20:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e087      	b.n	800404a <HAL_SD_ReadBlocks+0x324>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f40:	f003 0308 	and.w	r3, r3, #8
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d010      	beq.n	8003f6a <HAL_SD_ReadBlocks+0x244>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8003f50:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f56:	f043 0208 	orr.w	r2, r3, #8
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e06f      	b.n	800404a <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d010      	beq.n	8003f9a <HAL_SD_ReadBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8003f80:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f86:	f043 0202 	orr.w	r2, r3, #2
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e057      	b.n	800404a <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fa0:	f003 0320 	and.w	r3, r3, #32
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d037      	beq.n	8004018 <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8003fb0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fb6:	f043 0220 	orr.w	r2, r3, #32
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e03f      	b.n	800404a <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
    {
      *tempbuff = SDMMC_ReadFIFO(hsd->Instance);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f001 f976 	bl	80052c0 <SDMMC_ReadFIFO>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fd8:	601a      	str	r2, [r3, #0]
      tempbuff++;
 8003fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fdc:	3304      	adds	r3, #4
 8003fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8003fe0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d007      	beq.n	8003ff6 <HAL_SD_ReadBlocks+0x2d0>
 8003fe6:	f7fd f949 	bl	800127c <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d810      	bhi.n	8004018 <HAL_SD_ReadBlocks+0x2f2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);        
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8003ffe:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004004:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e018      	b.n	800404a <HAL_SD_ReadBlocks+0x324>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800401e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1d1      	bne.n	8003fca <HAL_SD_ReadBlocks+0x2a4>
      }
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 800402e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_OK;
 8004038:	2300      	movs	r3, #0
 800403a:	e006      	b.n	800404a <HAL_SD_ReadBlocks+0x324>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004040:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
  }
}
 800404a:	4618      	mov	r0, r3
 800404c:	373c      	adds	r7, #60	@ 0x3c
 800404e:	46bd      	mov	sp, r7
 8004050:	bd90      	pop	{r4, r7, pc}

08004052 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b08e      	sub	sp, #56	@ 0x38
 8004056:	af00      	add	r7, sp, #0
 8004058:	60f8      	str	r0, [r7, #12]
 800405a:	60b9      	str	r1, [r7, #8]
 800405c:	607a      	str	r2, [r7, #4]
 800405e:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004060:	2300      	movs	r3, #0
 8004062:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart = HAL_GetTick();
 8004064:	f7fd f90a 	bl	800127c <HAL_GetTick>
 8004068:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t count = 0;
 800406a:	2300      	movs	r3, #0
 800406c:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t *tempbuff = (uint32_t *)pData;
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  if(NULL == pData)
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d107      	bne.n	8004088 <HAL_SD_WriteBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800407c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e147      	b.n	8004318 <HAL_SD_WriteBlocks+0x2c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b01      	cmp	r3, #1
 8004092:	f040 813a 	bne.w	800430a <HAL_SD_WriteBlocks+0x2b8>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	441a      	add	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d907      	bls.n	80040ba <HAL_SD_WriteBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ae:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e12e      	b.n	8004318 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2203      	movs	r2, #3
 80040be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2200      	movs	r2, #0
 80040c8:	62da      	str	r2, [r3, #44]	@ 0x2c
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d002      	beq.n	80040d8 <HAL_SD_WriteBlocks+0x86>
    {
      BlockAdd *= 512;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	025b      	lsls	r3, r3, #9
 80040d6:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80040e0:	4618      	mov	r0, r3
 80040e2:	f001 f99f 	bl	8005424 <SDMMC_CmdBlockLength>
 80040e6:	6378      	str	r0, [r7, #52]	@ 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 80040e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d010      	beq.n	8004110 <HAL_SD_WriteBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 80040f6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040fe:	431a      	orrs	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e103      	b.n	8004318 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d90a      	bls.n	800412c <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2220      	movs	r2, #32
 800411a:	631a      	str	r2, [r3, #48]	@ 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6879      	ldr	r1, [r7, #4]
 8004122:	4618      	mov	r0, r3
 8004124:	f001 fa0e 	bl	8005544 <SDMMC_CmdWriteMultiBlock>
 8004128:	6378      	str	r0, [r7, #52]	@ 0x34
 800412a:	e009      	b.n	8004140 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2210      	movs	r2, #16
 8004130:	631a      	str	r2, [r3, #48]	@ 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	6879      	ldr	r1, [r7, #4]
 8004138:	4618      	mov	r0, r3
 800413a:	f001 f9df 	bl	80054fc <SDMMC_CmdWriteSingleBlock>
 800413e:	6378      	str	r0, [r7, #52]	@ 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004142:	2b00      	cmp	r3, #0
 8004144:	d010      	beq.n	8004168 <HAL_SD_WriteBlocks+0x116>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 800414e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004156:	431a      	orrs	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e0d7      	b.n	8004318 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004168:	f04f 33ff 	mov.w	r3, #4294967295
 800416c:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	025b      	lsls	r3, r3, #9
 8004172:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004174:	2390      	movs	r3, #144	@ 0x90
 8004176:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8004178:	2300      	movs	r3, #0
 800417a:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800417c:	2300      	movs	r3, #0
 800417e:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8004180:	2301      	movs	r3, #1
 8004182:	627b      	str	r3, [r7, #36]	@ 0x24
    SDMMC_ConfigData(hsd->Instance, &config);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f107 0210 	add.w	r2, r7, #16
 800418c:	4611      	mov	r1, r2
 800418e:	4618      	mov	r0, r3
 8004190:	f001 f91c 	bl	80053cc <SDMMC_ConfigData>
    
    /* Write block(s) in polling mode */
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004194:	e037      	b.n	8004206 <HAL_SD_WriteBlocks+0x1b4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE))
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800419c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d014      	beq.n	80041ce <HAL_SD_WriteBlocks+0x17c>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80041a4:	2300      	movs	r3, #0
 80041a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80041a8:	e00b      	b.n	80041c2 <HAL_SD_WriteBlocks+0x170>
        {
          SDMMC_WriteFIFO(hsd->Instance, (tempbuff + count));
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6818      	ldr	r0, [r3, #0]
 80041ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041b4:	4413      	add	r3, r2
 80041b6:	4619      	mov	r1, r3
 80041b8:	f001 f88f 	bl	80052da <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80041bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041be:	3301      	adds	r3, #1
 80041c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80041c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041c4:	2b07      	cmp	r3, #7
 80041c6:	d9f0      	bls.n	80041aa <HAL_SD_WriteBlocks+0x158>
        }
        tempbuff += 8U;
 80041c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ca:	3320      	adds	r3, #32
 80041cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 80041ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d007      	beq.n	80041e4 <HAL_SD_WriteBlocks+0x192>
 80041d4:	f7fd f852 	bl	800127c <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d810      	bhi.n	8004206 <HAL_SD_WriteBlocks+0x1b4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 80041ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041f4:	431a      	orrs	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e088      	b.n	8004318 <HAL_SD_WriteBlocks+0x2c6>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800420c:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 8004210:	2b00      	cmp	r3, #0
 8004212:	d0c0      	beq.n	8004196 <HAL_SD_WriteBlocks+0x144>
      }
    }
    
    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800421a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800421e:	2b00      	cmp	r3, #0
 8004220:	d020      	beq.n	8004264 <HAL_SD_WriteBlocks+0x212>
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d91d      	bls.n	8004264 <HAL_SD_WriteBlocks+0x212>
    { 
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800422c:	2b03      	cmp	r3, #3
 800422e:	d019      	beq.n	8004264 <HAL_SD_WriteBlocks+0x212>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4618      	mov	r0, r3
 8004236:	f001 f9a9 	bl	800558c <SDMMC_CmdStopTransfer>
 800423a:	6378      	str	r0, [r7, #52]	@ 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 800423c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800423e:	2b00      	cmp	r3, #0
 8004240:	d010      	beq.n	8004264 <HAL_SD_WriteBlocks+0x212>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 800424a:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004252:	431a      	orrs	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e059      	b.n	8004318 <HAL_SD_WriteBlocks+0x2c6>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800426a:	f003 0308 	and.w	r3, r3, #8
 800426e:	2b00      	cmp	r3, #0
 8004270:	d010      	beq.n	8004294 <HAL_SD_WriteBlocks+0x242>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 800427a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004280:	f043 0208 	orr.w	r2, r3, #8
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e041      	b.n	8004318 <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d010      	beq.n	80042c4 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 80042aa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042b0:	f043 0202 	orr.w	r2, r3, #2
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e029      	b.n	8004318 <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042ca:	f003 0310 	and.w	r3, r3, #16
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d010      	beq.n	80042f4 <HAL_SD_WriteBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 80042da:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e0:	f043 0210 	orr.w	r2, r3, #16
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e011      	b.n	8004318 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 80042fc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_OK;
 8004306:	2300      	movs	r3, #0
 8004308:	e006      	b.n	8004318 <HAL_SD_WriteBlocks+0x2c6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800430e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
  }
}
 8004318:	4618      	mov	r0, r3
 800431a:	3738      	adds	r7, #56	@ 0x38
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 800432a:	2300      	movs	r3, #0
 800432c:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004332:	0e1b      	lsrs	r3, r3, #24
 8004334:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	099b      	lsrs	r3, r3, #6
 800433a:	b2db      	uxtb	r3, r3
 800433c:	f003 0303 	and.w	r3, r3, #3
 8004340:	b2da      	uxtb	r2, r3
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	089b      	lsrs	r3, r3, #2
 800434a:	b2db      	uxtb	r3, r3
 800434c:	f003 030f 	and.w	r3, r3, #15
 8004350:	b2da      	uxtb	r2, r3
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	b2db      	uxtb	r3, r3
 800435a:	f003 0303 	and.w	r3, r3, #3
 800435e:	b2da      	uxtb	r2, r3
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004368:	0c1b      	lsrs	r3, r3, #16
 800436a:	b2db      	uxtb	r3, r3
 800436c:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	b2da      	uxtb	r2, r3
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800437a:	0a1b      	lsrs	r3, r3, #8
 800437c:	b2db      	uxtb	r3, r3
 800437e:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	b2da      	uxtb	r2, r3
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800438c:	b2db      	uxtb	r3, r3
 800438e:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	b2da      	uxtb	r2, r3
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800439c:	0e1b      	lsrs	r3, r3, #24
 800439e:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	011b      	lsls	r3, r3, #4
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043b0:	0c1b      	lsrs	r3, r3, #16
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	88db      	ldrh	r3, [r3, #6]
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	091b      	lsrs	r3, r3, #4
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	f003 030f 	and.w	r3, r3, #15
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	4313      	orrs	r3, r2
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	f003 030f 	and.w	r3, r3, #15
 80043d8:	b2da      	uxtb	r2, r3
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043e2:	0a1b      	lsrs	r3, r3, #8
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	09db      	lsrs	r3, r3, #7
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	b2da      	uxtb	r2, r3
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	099b      	lsrs	r3, r3, #6
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	b2da      	uxtb	r2, r3
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	095b      	lsrs	r3, r3, #5
 800440c:	b2db      	uxtb	r3, r3
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	b2da      	uxtb	r2, r3
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	091b      	lsrs	r3, r3, #4
 800441c:	b2db      	uxtb	r3, r3
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	b2da      	uxtb	r2, r3
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	2200      	movs	r2, #0
 800442c:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004432:	2b00      	cmp	r3, #0
 8004434:	f040 8086 	bne.w	8004544 <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	029b      	lsls	r3, r3, #10
 800443c:	f403 6240 	and.w	r2, r3, #3072	@ 0xc00
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004448:	b2db      	uxtb	r3, r3
 800444a:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	691a      	ldr	r2, [r3, #16]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	431a      	orrs	r2, r3
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800445e:	0e1b      	lsrs	r3, r3, #24
 8004460:	b2db      	uxtb	r3, r3
 8004462:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	691a      	ldr	r2, [r3, #16]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	099b      	lsrs	r3, r3, #6
 800446c:	f003 0303 	and.w	r3, r3, #3
 8004470:	431a      	orrs	r2, r3
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	08db      	lsrs	r3, r3, #3
 800447a:	b2db      	uxtb	r3, r3
 800447c:	f003 0307 	and.w	r3, r3, #7
 8004480:	b2da      	uxtb	r2, r3
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	b2db      	uxtb	r3, r3
 800448a:	f003 0307 	and.w	r3, r3, #7
 800448e:	b2da      	uxtb	r2, r3
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004498:	0c1b      	lsrs	r3, r3, #16
 800449a:	b2db      	uxtb	r3, r3
 800449c:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	095b      	lsrs	r3, r3, #5
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	f003 0307 	and.w	r3, r3, #7
 80044a8:	b2da      	uxtb	r2, r3
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	089b      	lsrs	r3, r3, #2
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	f003 0307 	and.w	r3, r3, #7
 80044b8:	b2da      	uxtb	r2, r3
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	f003 0306 	and.w	r3, r3, #6
 80044ca:	b2da      	uxtb	r2, r3
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044d4:	0a1b      	lsrs	r3, r3, #8
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	7e1b      	ldrb	r3, [r3, #24]
 80044de:	b2da      	uxtb	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	09db      	lsrs	r3, r3, #7
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	4313      	orrs	r3, r2
 80044ee:	b2da      	uxtb	r2, r3
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	1c5a      	adds	r2, r3, #1
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	7e1b      	ldrb	r3, [r3, #24]
 8004502:	b2db      	uxtb	r3, r3
 8004504:	3302      	adds	r3, #2
 8004506:	2201      	movs	r2, #1
 8004508:	409a      	lsls	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800450e:	fb03 f202 	mul.w	r2, r3, r2
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	7a1b      	ldrb	r3, [r3, #8]
 800451a:	b2db      	uxtb	r3, r3
 800451c:	461a      	mov	r2, r3
 800451e:	2301      	movs	r3, #1
 8004520:	4093      	lsls	r3, r2
 8004522:	461a      	mov	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004530:	0a52      	lsrs	r2, r2, #9
 8004532:	fb03 f202 	mul.w	r2, r3, r2
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004540:	661a      	str	r2, [r3, #96]	@ 0x60
 8004542:	e04d      	b.n	80045e0 <HAL_SD_GetCardCSD+0x2c0>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004548:	2b01      	cmp	r3, #1
 800454a:	d138      	bne.n	80045be <HAL_SD_GetCardCSD+0x29e>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004550:	b2db      	uxtb	r3, r3
 8004552:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	041b      	lsls	r3, r3, #16
 8004558:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004564:	0e1b      	lsrs	r3, r3, #24
 8004566:	b2db      	uxtb	r3, r3
 8004568:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8);
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	691a      	ldr	r2, [r3, #16]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	021b      	lsls	r3, r3, #8
 8004572:	431a      	orrs	r2, r3
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800457c:	0c1b      	lsrs	r3, r3, #16
 800457e:	b2db      	uxtb	r3, r3
 8004580:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	691a      	ldr	r2, [r3, #16]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	431a      	orrs	r2, r3
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004592:	0a1b      	lsrs	r3, r3, #8
 8004594:	b2db      	uxtb	r3, r3
 8004596:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	3301      	adds	r3, #1
 800459e:	029a      	lsls	r2, r3, #10
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	655a      	str	r2, [r3, #84]	@ 0x54
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045b2:	659a      	str	r2, [r3, #88]	@ 0x58
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	661a      	str	r2, [r3, #96]	@ 0x60
 80045bc:	e010      	b.n	80045e0 <HAL_SD_GetCardCSD+0x2c0>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 80045c6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045cc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e0c1      	b.n	8004764 <HAL_SD_GetCardCSD+0x444>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	099b      	lsrs	r3, r3, #6
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	b2da      	uxtb	r2, r3
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004606:	b2db      	uxtb	r3, r3
 8004608:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	7e9b      	ldrb	r3, [r3, #26]
 800460e:	b2da      	uxtb	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	09db      	lsrs	r3, r3, #7
 8004614:	b2db      	uxtb	r3, r3
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	b2db      	uxtb	r3, r3
 800461c:	4313      	orrs	r3, r2
 800461e:	b2da      	uxtb	r2, r3
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	b2db      	uxtb	r3, r3
 8004628:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800462c:	b2da      	uxtb	r2, r3
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004636:	0e1b      	lsrs	r3, r3, #24
 8004638:	b2db      	uxtb	r3, r3
 800463a:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	09db      	lsrs	r3, r3, #7
 8004640:	b2db      	uxtb	r3, r3
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	b2da      	uxtb	r2, r3
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	095b      	lsrs	r3, r3, #5
 8004650:	b2db      	uxtb	r3, r3
 8004652:	f003 0303 	and.w	r3, r3, #3
 8004656:	b2da      	uxtb	r2, r3
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	089b      	lsrs	r3, r3, #2
 8004660:	b2db      	uxtb	r3, r3
 8004662:	f003 0307 	and.w	r3, r3, #7
 8004666:	b2da      	uxtb	r2, r3
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	b2db      	uxtb	r3, r3
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	b2db      	uxtb	r3, r3
 8004674:	f003 030c 	and.w	r3, r3, #12
 8004678:	b2da      	uxtb	r2, r3
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004682:	0c1b      	lsrs	r3, r3, #16
 8004684:	b2db      	uxtb	r3, r3
 8004686:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	7fdb      	ldrb	r3, [r3, #31]
 800468c:	b2da      	uxtb	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	099b      	lsrs	r3, r3, #6
 8004692:	b2db      	uxtb	r3, r3
 8004694:	f003 0303 	and.w	r3, r3, #3
 8004698:	b2db      	uxtb	r3, r3
 800469a:	4313      	orrs	r3, r2
 800469c:	b2da      	uxtb	r2, r3
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	095b      	lsrs	r3, r3, #5
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	b2da      	uxtb	r2, r3
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	b2da      	uxtb	r2, r3
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046d0:	0a1b      	lsrs	r3, r3, #8
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	09db      	lsrs	r3, r3, #7
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	b2da      	uxtb	r2, r3
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	099b      	lsrs	r3, r3, #6
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	b2da      	uxtb	r2, r3
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	095b      	lsrs	r3, r3, #5
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	f003 0301 	and.w	r3, r3, #1
 8004704:	b2da      	uxtb	r2, r3
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	091b      	lsrs	r3, r3, #4
 8004710:	b2db      	uxtb	r3, r3
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	b2da      	uxtb	r2, r3
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	089b      	lsrs	r3, r3, #2
 8004722:	b2db      	uxtb	r3, r3
 8004724:	f003 0303 	and.w	r3, r3, #3
 8004728:	b2da      	uxtb	r2, r3
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  pCSD->ECC              = (tmp & 0x03);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	b2db      	uxtb	r3, r3
 8004734:	f003 0303 	and.w	r3, r3, #3
 8004738:	b2da      	uxtb	r2, r3
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004744:	b2db      	uxtb	r3, r3
 8004746:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	085b      	lsrs	r3, r3, #1
 800474c:	b2db      	uxtb	r3, r3
 800474e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004752:	b2da      	uxtb	r2, r3
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  pCSD->Reserved4 = 1;
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  
  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80047c8:	b5b0      	push	{r4, r5, r7, lr}
 80047ca:	b08e      	sub	sp, #56	@ 0x38
 80047cc:	af04      	add	r7, sp, #16
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80047d2:	2300      	movs	r3, #0
 80047d4:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2203      	movs	r2, #3
 80047da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047e2:	2b03      	cmp	r3, #3
 80047e4:	d02e      	beq.n	8004844 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047ec:	d106      	bne.n	80047fc <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047f2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	639a      	str	r2, [r3, #56]	@ 0x38
 80047fa:	e029      	b.n	8004850 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004802:	d10a      	bne.n	800481a <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 fa1c 	bl	8004c42 <SD_WideBus_Enable>
 800480a:	6278      	str	r0, [r7, #36]	@ 0x24
      
      hsd->ErrorCode |= errorstate;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004812:	431a      	orrs	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	639a      	str	r2, [r3, #56]	@ 0x38
 8004818:	e01a      	b.n	8004850 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10a      	bne.n	8004836 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 fa5b 	bl	8004cdc <SD_WideBus_Disable>
 8004826:	6278      	str	r0, [r7, #36]	@ 0x24
      
      hsd->ErrorCode |= errorstate;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800482c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800482e:	431a      	orrs	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	639a      	str	r2, [r3, #56]	@ 0x38
 8004834:	e00c      	b.n	8004850 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800483a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	639a      	str	r2, [r3, #56]	@ 0x38
 8004842:	e005      	b.n	8004850 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004848:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00a      	beq.n	800486e <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8004860:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e024      	b.n	80048b8 <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	695b      	ldr	r3, [r3, #20]
 8004888:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	623b      	str	r3, [r7, #32]
    SDMMC_Init(hsd->Instance, Init);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681d      	ldr	r5, [r3, #0]
 8004894:	466c      	mov	r4, sp
 8004896:	f107 0318 	add.w	r3, r7, #24
 800489a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800489e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80048a2:	f107 030c 	add.w	r3, r7, #12
 80048a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048a8:	4628      	mov	r0, r5
 80048aa:	f000 fcdd 	bl	8005268 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3728      	adds	r7, #40	@ 0x28
 80048bc:	46bd      	mov	sp, r7
 80048be:	bdb0      	pop	{r4, r5, r7, pc}

080048c0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 80048c8:	2304      	movs	r3, #4
 80048ca:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80048cc:	2300      	movs	r3, #0
 80048ce:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 80048d0:	2300      	movs	r3, #0
 80048d2:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 80048d4:	f107 030c 	add.w	r3, r7, #12
 80048d8:	4619      	mov	r1, r3
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f987 	bl	8004bee <SD_SendStatus>
 80048e0:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d005      	beq.n	80048f4 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	431a      	orrs	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9) & 0x0F);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	0a5b      	lsrs	r3, r3, #9
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	f003 030f 	and.w	r3, r3, #15
 80048fe:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8004900:	7dfb      	ldrb	r3, [r7, #23]
}
 8004902:	4618      	mov	r0, r3
 8004904:	3718      	adds	r7, #24
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800490a:	b5b0      	push	{r4, r5, r7, lr}
 800490c:	b094      	sub	sp, #80	@ 0x50
 800490e:	af04      	add	r7, sp, #16
 8004910:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004912:	2300      	movs	r3, #0
 8004914:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint16_t sd_rca = 1;
 8004916:	2301      	movs	r3, #1
 8004918:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4618      	mov	r0, r3
 8004920:	f000 fcfa 	bl	8005318 <SDMMC_GetPowerState>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d102      	bne.n	8004930 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800492a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800492e:	e0b2      	b.n	8004a96 <SD_InitCard+0x18c>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004934:	2b03      	cmp	r3, #3
 8004936:	d02f      	beq.n	8004998 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4618      	mov	r0, r3
 800493e:	f000 ff40 	bl	80057c2 <SDMMC_CmdSendCID>
 8004942:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004944:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <SD_InitCard+0x44>
    {
      return errorstate;
 800494a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800494c:	e0a3      	b.n	8004a96 <SD_InitCard+0x18c>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2100      	movs	r1, #0
 8004954:	4618      	mov	r0, r3
 8004956:	f000 fd24 	bl	80053a2 <SDMMC_GetResponse>
 800495a:	4602      	mov	r2, r0
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2104      	movs	r1, #4
 8004966:	4618      	mov	r0, r3
 8004968:	f000 fd1b 	bl	80053a2 <SDMMC_GetResponse>
 800496c:	4602      	mov	r2, r0
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2108      	movs	r1, #8
 8004978:	4618      	mov	r0, r3
 800497a:	f000 fd12 	bl	80053a2 <SDMMC_GetResponse>
 800497e:	4602      	mov	r2, r0
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	210c      	movs	r1, #12
 800498a:	4618      	mov	r0, r3
 800498c:	f000 fd09 	bl	80053a2 <SDMMC_GetResponse>
 8004990:	4602      	mov	r2, r0
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800499c:	2b03      	cmp	r3, #3
 800499e:	d00d      	beq.n	80049bc <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f107 020e 	add.w	r2, r7, #14
 80049a8:	4611      	mov	r1, r2
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 ff4a 	bl	8005844 <SDMMC_CmdSetRelAdd>
 80049b0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80049b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d001      	beq.n	80049bc <SD_InitCard+0xb2>
    {
      return errorstate;
 80049b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049ba:	e06c      	b.n	8004a96 <SD_InitCard+0x18c>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049c0:	2b03      	cmp	r3, #3
 80049c2:	d036      	beq.n	8004a32 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80049c4:	89fb      	ldrh	r3, [r7, #14]
 80049c6:	461a      	mov	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	651a      	str	r2, [r3, #80]	@ 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049d4:	041b      	lsls	r3, r3, #16
 80049d6:	4619      	mov	r1, r3
 80049d8:	4610      	mov	r0, r2
 80049da:	f000 ff12 	bl	8005802 <SDMMC_CmdSendCSD>
 80049de:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80049e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <SD_InitCard+0xe0>
    {
      return errorstate;
 80049e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049e8:	e055      	b.n	8004a96 <SD_InitCard+0x18c>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2100      	movs	r1, #0
 80049f0:	4618      	mov	r0, r3
 80049f2:	f000 fcd6 	bl	80053a2 <SDMMC_GetResponse>
 80049f6:	4602      	mov	r2, r0
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2104      	movs	r1, #4
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 fccd 	bl	80053a2 <SDMMC_GetResponse>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2108      	movs	r1, #8
 8004a14:	4618      	mov	r0, r3
 8004a16:	f000 fcc4 	bl	80053a2 <SDMMC_GetResponse>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	210c      	movs	r1, #12
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 fcbb 	bl	80053a2 <SDMMC_GetResponse>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2104      	movs	r1, #4
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f000 fcb2 	bl	80053a2 <SDMMC_GetResponse>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	0d1a      	lsrs	r2, r3, #20
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	64da      	str	r2, [r3, #76]	@ 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8004a46:	f107 0310 	add.w	r3, r7, #16
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f7ff fc67 	bl	8004320 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6819      	ldr	r1, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a5a:	041b      	lsls	r3, r3, #16
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	461c      	mov	r4, r3
 8004a60:	4615      	mov	r5, r2
 8004a62:	4622      	mov	r2, r4
 8004a64:	462b      	mov	r3, r5
 8004a66:	4608      	mov	r0, r1
 8004a68:	f000 fdb4 	bl	80055d4 <SDMMC_CmdSelDesel>
 8004a6c:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d001      	beq.n	8004a78 <SD_InitCard+0x16e>
  {
    return errorstate;
 8004a74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a76:	e00e      	b.n	8004a96 <SD_InitCard+0x18c>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hsd->Instance, hsd->Init);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681d      	ldr	r5, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	466c      	mov	r4, sp
 8004a80:	f103 0210 	add.w	r2, r3, #16
 8004a84:	ca07      	ldmia	r2, {r0, r1, r2}
 8004a86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004a8a:	3304      	adds	r3, #4
 8004a8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a8e:	4628      	mov	r0, r5
 8004a90:	f000 fbea 	bl	8005268 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3740      	adds	r7, #64	@ 0x40
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bdb0      	pop	{r4, r5, r7, pc}

08004a9e <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b086      	sub	sp, #24
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	617b      	str	r3, [r7, #20]
 8004aae:	2300      	movs	r3, #0
 8004ab0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 fdaf 	bl	800561e <SDMMC_CmdGoIdleState>
 8004ac0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d001      	beq.n	8004acc <SD_PowerON+0x2e>
  {
    return errorstate;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	e08c      	b.n	8004be6 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f000 fdc4 	bl	800565e <SDMMC_CmdOperCond>
 8004ad6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d03d      	beq.n	8004b5a <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	649a      	str	r2, [r3, #72]	@ 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 8004ae4:	e032      	b.n	8004b4c <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	1c5a      	adds	r2, r3, #1
 8004aea:	60ba      	str	r2, [r7, #8]
 8004aec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d102      	bne.n	8004afa <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004af4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004af8:	e075      	b.n	8004be6 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2100      	movs	r1, #0
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 fdcd 	bl	80056a0 <SDMMC_CmdAppCommand>
 8004b06:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d002      	beq.n	8004b14 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004b0e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004b12:	e068      	b.n	8004be6 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2100      	movs	r1, #0
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 fde4 	bl	80056e8 <SDMMC_CmdAppOperCommand>
 8004b20:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d002      	beq.n	8004b2e <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004b28:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004b2c:	e05b      	b.n	8004be6 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2100      	movs	r1, #0
 8004b34:	4618      	mov	r0, r3
 8004b36:	f000 fc34 	bl	80053a2 <SDMMC_GetResponse>
 8004b3a:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	0fdb      	lsrs	r3, r3, #31
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	bf0c      	ite	eq
 8004b44:	2301      	moveq	r3, #1
 8004b46:	2300      	movne	r3, #0
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d0c9      	beq.n	8004ae6 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	645a      	str	r2, [r3, #68]	@ 0x44
 8004b58:	e044      	b.n	8004be4 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	649a      	str	r2, [r3, #72]	@ 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 8004b60:	e031      	b.n	8004bc6 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	1c5a      	adds	r2, r3, #1
 8004b66:	60ba      	str	r2, [r7, #8]
 8004b68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d102      	bne.n	8004b76 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004b70:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b74:	e037      	b.n	8004be6 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f000 fd8f 	bl	80056a0 <SDMMC_CmdAppCommand>
 8004b82:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <SD_PowerON+0xf0>
      {
        return errorstate;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	e02b      	b.n	8004be6 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004b96:	4618      	mov	r0, r3
 8004b98:	f000 fda6 	bl	80056e8 <SDMMC_CmdAppOperCommand>
 8004b9c:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d001      	beq.n	8004ba8 <SD_PowerON+0x10a>
      {
        return errorstate;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	e01e      	b.n	8004be6 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2100      	movs	r1, #0
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 fbf7 	bl	80053a2 <SDMMC_GetResponse>
 8004bb4:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	0fdb      	lsrs	r3, r3, #31
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	bf0c      	ite	eq
 8004bbe:	2301      	moveq	r3, #1
 8004bc0:	2300      	movne	r3, #0
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d0ca      	beq.n	8004b62 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d003      	beq.n	8004bde <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	645a      	str	r2, [r3, #68]	@ 0x44
 8004bdc:	e002      	b.n	8004be4 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3718      	adds	r7, #24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b084      	sub	sp, #16
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
 8004bf6:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d102      	bne.n	8004c08 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 8004c02:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004c06:	e018      	b.n	8004c3a <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c10:	041b      	lsls	r3, r3, #16
 8004c12:	4619      	mov	r1, r3
 8004c14:	4610      	mov	r0, r2
 8004c16:	f000 fe38 	bl	800588a <SDMMC_CmdSendStatus>
 8004c1a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <SD_SendStatus+0x38>
  {
    return errorstate;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	e009      	b.n	8004c3a <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2100      	movs	r1, #0
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f000 fbb8 	bl	80053a2 <SDMMC_GetResponse>
 8004c32:	4602      	mov	r2, r0
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3710      	adds	r7, #16
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b086      	sub	sp, #24
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	60fb      	str	r3, [r7, #12]
 8004c4e:	2300      	movs	r3, #0
 8004c50:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004c52:	2300      	movs	r3, #0
 8004c54:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2100      	movs	r1, #0
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f000 fba0 	bl	80053a2 <SDMMC_GetResponse>
 8004c62:	4603      	mov	r3, r0
 8004c64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004c6c:	d102      	bne.n	8004c74 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004c6e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004c72:	e02f      	b.n	8004cd4 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004c74:	f107 030c 	add.w	r3, r7, #12
 8004c78:	4619      	mov	r1, r3
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f87b 	bl	8004d76 <SD_FindSCR>
 8004c80:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d001      	beq.n	8004c8c <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	e023      	b.n	8004cd4 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d01c      	beq.n	8004cd0 <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c9e:	041b      	lsls	r3, r3, #16
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	4610      	mov	r0, r2
 8004ca4:	f000 fcfc 	bl	80056a0 <SDMMC_CmdAppCommand>
 8004ca8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d001      	beq.n	8004cb4 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	e00f      	b.n	8004cd4 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2102      	movs	r1, #2
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 fd3a 	bl	8005734 <SDMMC_CmdBusWidth>
 8004cc0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d001      	beq.n	8004ccc <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	e003      	b.n	8004cd4 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	e001      	b.n	8004cd4 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004cd0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3718      	adds	r7, #24
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	60fb      	str	r3, [r7, #12]
 8004ce8:	2300      	movs	r3, #0
 8004cea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004cec:	2300      	movs	r3, #0
 8004cee:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f000 fb53 	bl	80053a2 <SDMMC_GetResponse>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d06:	d102      	bne.n	8004d0e <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004d08:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004d0c:	e02f      	b.n	8004d6e <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004d0e:	f107 030c 	add.w	r3, r7, #12
 8004d12:	4619      	mov	r1, r3
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 f82e 	bl	8004d76 <SD_FindSCR>
 8004d1a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	e023      	b.n	8004d6e <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d01c      	beq.n	8004d6a <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d38:	041b      	lsls	r3, r3, #16
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	4610      	mov	r0, r2
 8004d3e:	f000 fcaf 	bl	80056a0 <SDMMC_CmdAppCommand>
 8004d42:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	e00f      	b.n	8004d6e <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2100      	movs	r1, #0
 8004d54:	4618      	mov	r0, r3
 8004d56:	f000 fced 	bl	8005734 <SDMMC_CmdBusWidth>
 8004d5a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d001      	beq.n	8004d66 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	e003      	b.n	8004d6e <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8004d66:	2300      	movs	r3, #0
 8004d68:	e001      	b.n	8004d6e <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004d6a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3718      	adds	r7, #24
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004d76:	b590      	push	{r4, r7, lr}
 8004d78:	b08f      	sub	sp, #60	@ 0x3c
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
 8004d7e:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004d80:	2300      	movs	r3, #0
 8004d82:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8004d84:	f7fc fa7a 	bl	800127c <HAL_GetTick>
 8004d88:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t index = 0;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2] = {0, 0};
 8004d8e:	2300      	movs	r3, #0
 8004d90:	60fb      	str	r3, [r7, #12]
 8004d92:	2300      	movs	r3, #0
 8004d94:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2108      	movs	r1, #8
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f000 fb41 	bl	8005424 <SDMMC_CmdBlockLength>
 8004da2:	6338      	str	r0, [r7, #48]	@ 0x30
  if(errorstate != HAL_OK)
 8004da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <SD_FindSCR+0x38>
  {
    return errorstate;
 8004daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dac:	e0a8      	b.n	8004f00 <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004db6:	041b      	lsls	r3, r3, #16
 8004db8:	4619      	mov	r1, r3
 8004dba:	4610      	mov	r0, r2
 8004dbc:	f000 fc70 	bl	80056a0 <SDMMC_CmdAppCommand>
 8004dc0:	6338      	str	r0, [r7, #48]	@ 0x30
  if(errorstate != HAL_OK)
 8004dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d001      	beq.n	8004dcc <SD_FindSCR+0x56>
  {
    return errorstate;
 8004dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dca:	e099      	b.n	8004f00 <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8004dd0:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8;
 8004dd2:	2308      	movs	r3, #8
 8004dd4:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8004dd6:	2330      	movs	r3, #48	@ 0x30
 8004dd8:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004dda:	2302      	movs	r3, #2
 8004ddc:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004dde:	2300      	movs	r3, #0
 8004de0:	627b      	str	r3, [r7, #36]	@ 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004de2:	2301      	movs	r3, #1
 8004de4:	62bb      	str	r3, [r7, #40]	@ 0x28
  SDMMC_ConfigData(hsd->Instance, &config);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f107 0214 	add.w	r2, r7, #20
 8004dee:	4611      	mov	r1, r2
 8004df0:	4618      	mov	r0, r3
 8004df2:	f000 faeb 	bl	80053cc <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f000 fcbe 	bl	800577c <SDMMC_CmdSendSCR>
 8004e00:	6338      	str	r0, [r7, #48]	@ 0x30
  if(errorstate != HAL_OK)
 8004e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d022      	beq.n	8004e4e <SD_FindSCR+0xd8>
  {
    return errorstate;
 8004e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e0a:	e079      	b.n	8004f00 <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00e      	beq.n	8004e38 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6819      	ldr	r1, [r3, #0]
 8004e1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	f107 020c 	add.w	r2, r7, #12
 8004e26:	18d4      	adds	r4, r2, r3
 8004e28:	4608      	mov	r0, r1
 8004e2a:	f000 fa49 	bl	80052c0 <SDMMC_ReadFIFO>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	6023      	str	r3, [r4, #0]
      index++;
 8004e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e34:	3301      	adds	r3, #1
 8004e36:	637b      	str	r3, [r7, #52]	@ 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004e38:	f7fc fa20 	bl	800127c <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e46:	d102      	bne.n	8004e4e <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004e48:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004e4c:	e058      	b.n	8004f00 <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e54:	f240 432a 	movw	r3, #1066	@ 0x42a
 8004e58:	4013      	ands	r3, r2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d0d6      	beq.n	8004e0c <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e64:	f003 0308 	and.w	r3, r3, #8
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d005      	beq.n	8004e78 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2208      	movs	r2, #8
 8004e72:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004e74:	2308      	movs	r3, #8
 8004e76:	e043      	b.n	8004f00 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d005      	beq.n	8004e92 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004e8e:	2302      	movs	r3, #2
 8004e90:	e036      	b.n	8004f00 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e98:	f003 0320 	and.w	r3, r3, #32
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d005      	beq.n	8004eac <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2220      	movs	r2, #32
 8004ea6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 8004ea8:	2320      	movs	r3, #32
 8004eaa:	e029      	b.n	8004f00 <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8004eb4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	061a      	lsls	r2, r3, #24
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	021b      	lsls	r3, r3, #8
 8004ebe:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004ec2:	431a      	orrs	r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	0a1b      	lsrs	r3, r3, #8
 8004ec8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004ecc:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	3304      	adds	r3, #4
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8004ed8:	430a      	orrs	r2, r1
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004eda:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	061a      	lsls	r2, r3, #24
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	021b      	lsls	r3, r3, #8
 8004ee4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004ee8:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	0a1b      	lsrs	r3, r3, #8
 8004eee:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004ef2:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	0e1b      	lsrs	r3, r3, #24
 8004ef8:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	373c      	adds	r7, #60	@ 0x3c
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd90      	pop	{r4, r7, pc}

08004f08 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d101      	bne.n	8004f1c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e025      	b.n	8004f68 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d106      	bne.n	8004f36 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 f81d 	bl	8004f70 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2202      	movs	r2, #2
 8004f3a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	3304      	adds	r3, #4
 8004f46:	4619      	mov	r1, r3
 8004f48:	4610      	mov	r0, r2
 8004f4a:	f000 f867 	bl	800501c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6818      	ldr	r0, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	461a      	mov	r2, r3
 8004f58:	6839      	ldr	r1, [r7, #0]
 8004f5a:	f000 f8d1 	bl	8005100 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3708      	adds	r7, #8
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d101      	bne.n	8004fa0 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	e018      	b.n	8004fd2 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	68b9      	ldr	r1, [r7, #8]
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f000 f925 	bl	8005200 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d104      	bne.n	8004fc8 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2205      	movs	r2, #5
 8004fc2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8004fc6:	e003      	b.n	8004fd0 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  }
  
  return HAL_OK;  
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b082      	sub	sp, #8
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
 8004fe2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d101      	bne.n	8004ff4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	e00e      	b.n	8005012 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6839      	ldr	r1, [r7, #0]
 8005002:	4618      	mov	r0, r3
 8005004:	f000 f91d 	bl	8005242 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  
  return HAL_OK;   
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3708      	adds	r7, #8
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
	...

0800501c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8005026:	2300      	movs	r3, #0
 8005028:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800502a:	2300      	movs	r3, #0
 800502c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d027      	beq.n	8005086 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	4b2f      	ldr	r3, [pc, #188]	@ (80050fc <FMC_SDRAM_Init+0xe0>)
 8005040:	4013      	ands	r3, r2
 8005042:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800504c:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8005052:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8005058:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800505e:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8005064:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800506a:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8005070:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        Init->ReadBurst          |\
 8005076:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	4313      	orrs	r3, r2
 800507c:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	601a      	str	r2, [r3, #0]
 8005084:	e032      	b.n	80050ec <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8005092:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800509c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        Init->ReadBurst          |\
 80050a2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	4b12      	ldr	r3, [pc, #72]	@ (80050fc <FMC_SDRAM_Init+0xe0>)
 80050b4:	4013      	ands	r3, r2
 80050b6:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80050c0:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 80050c6:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 80050cc:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 80050d2:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 80050d8:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80050da:	68ba      	ldr	r2, [r7, #8]
 80050dc:	4313      	orrs	r3, r2
 80050de:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3714      	adds	r7, #20
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	ffff8000 	.word	0xffff8000

08005100 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005100:	b480      	push	{r7}
 8005102:	b087      	sub	sp, #28
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800510c:	2300      	movs	r3, #0
 800510e:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8005110:	2300      	movs	r3, #0
 8005112:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d02e      	beq.n	8005178 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005126:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	3b01      	subs	r3, #1
 8005134:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005136:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	3b01      	subs	r3, #1
 800513e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8005140:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	3b01      	subs	r3, #1
 8005148:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800514a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	3b01      	subs	r3, #1
 8005152:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8005154:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	3b01      	subs	r3, #1
 800515c:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800515e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	3b01      	subs	r3, #1
 8005166:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005168:	4313      	orrs	r3, r2
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	4313      	orrs	r3, r2
 800516e:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	609a      	str	r2, [r3, #8]
 8005176:	e039      	b.n	80051ec <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	4b1e      	ldr	r3, [pc, #120]	@ (80051fc <FMC_SDRAM_Timing_Init+0xfc>)
 8005182:	4013      	ands	r3, r2
 8005184:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	3b01      	subs	r3, #1
 800518c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	3b01      	subs	r3, #1
 8005194:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8005196:	4313      	orrs	r3, r2
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	4313      	orrs	r3, r2
 800519c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80051aa:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	3b01      	subs	r3, #1
 80051b8:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80051ba:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	3b01      	subs	r3, #1
 80051c2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80051c4:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	3b01      	subs	r3, #1
 80051cc:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80051ce:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	3b01      	subs	r3, #1
 80051d6:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80051d8:	4313      	orrs	r3, r2
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	4313      	orrs	r3, r2
 80051de:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	371c      	adds	r7, #28
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	ff0f0fff 	.word	0xff0f0fff

08005200 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005200:	b480      	push	{r7}
 8005202:	b087      	sub	sp, #28
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800520c:	2300      	movs	r3, #0
 800520e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005218:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	3b01      	subs	r3, #1
 8005220:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8005222:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800522a:	4313      	orrs	r3, r2
 800522c:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	371c      	adds	r7, #28
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8005242:	b480      	push	{r7}
 8005244:	b083      	sub	sp, #12
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
 800524a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	695a      	ldr	r2, [r3, #20]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	005b      	lsls	r3, r3, #1
 8005254:	431a      	orrs	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8005268:	b084      	sub	sp, #16
 800526a:	b480      	push	{r7}
 800526c:	b085      	sub	sp, #20
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
 8005272:	f107 001c 	add.w	r0, r7, #28
 8005276:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800527a:	2300      	movs	r3, #0
 800527c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800527e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005280:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005282:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8005286:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800528a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800528c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800528e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8005292:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	4313      	orrs	r3, r2
 8005298:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685a      	ldr	r2, [r3, #4]
 800529e:	4b07      	ldr	r3, [pc, #28]	@ (80052bc <SDMMC_Init+0x54>)
 80052a0:	4013      	ands	r3, r2
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	431a      	orrs	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3714      	adds	r7, #20
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	b004      	add	sp, #16
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	ffff8100 	.word	0xffff8100

080052c0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	370c      	adds	r7, #12
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 80052da:	b480      	push	{r7}
 80052dc:	b083      	sub	sp, #12
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
 80052e2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2203      	movs	r2, #3
 8005308:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0303 	and.w	r3, r3, #3
}
 8005328:	4618      	mov	r0, r3
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800533e:	2300      	movs	r3, #0
 8005340:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005352:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005358:	431a      	orrs	r2, r3
                       Command->CPSM);
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800535e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	4313      	orrs	r3, r2
 8005364:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68da      	ldr	r2, [r3, #12]
 800536a:	4b06      	ldr	r3, [pc, #24]	@ (8005384 <SDMMC_SendCommand+0x50>)
 800536c:	4013      	ands	r3, r2
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	431a      	orrs	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3714      	adds	r7, #20
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr
 8005384:	fffff000 	.word	0xfffff000

08005388 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	b2db      	uxtb	r3, r3
}
 8005396:	4618      	mov	r0, r3
 8005398:	370c      	adds	r7, #12
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b085      	sub	sp, #20
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
 80053aa:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 80053ac:	2300      	movs	r3, #0
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	3314      	adds	r3, #20
 80053b4:	461a      	mov	r2, r3
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	4413      	add	r3, r2
 80053ba:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
}  
 80053c0:	4618      	mov	r0, r3
 80053c2:	3714      	adds	r7, #20
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <SDMMC_ConfigData>:
  * @param  Data  pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80053d6:	2300      	movs	r3, #0
 80053d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80053f2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80053f8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80053fe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	4313      	orrs	r3, r2
 8005404:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800540a:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	431a      	orrs	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005416:	2300      	movs	r3, #0

}
 8005418:	4618      	mov	r0, r3
 800541a:	3714      	adds	r7, #20
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b088      	sub	sp, #32
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800542e:	2300      	movs	r3, #0
 8005430:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005436:	2310      	movs	r3, #16
 8005438:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800543a:	2340      	movs	r3, #64	@ 0x40
 800543c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800543e:	2300      	movs	r3, #0
 8005440:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005442:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005446:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005448:	f107 0308 	add.w	r3, r7, #8
 800544c:	4619      	mov	r1, r3
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7ff ff70 	bl	8005334 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8005454:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005458:	2110      	movs	r1, #16
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 fa64 	bl	8005928 <SDMMC_GetCmdResp1>
 8005460:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005462:	69fb      	ldr	r3, [r7, #28]
}
 8005464:	4618      	mov	r0, r3
 8005466:	3720      	adds	r7, #32
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b088      	sub	sp, #32
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005476:	2300      	movs	r3, #0
 8005478:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800547e:	2311      	movs	r3, #17
 8005480:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005482:	2340      	movs	r3, #64	@ 0x40
 8005484:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005486:	2300      	movs	r3, #0
 8005488:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800548a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800548e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005490:	f107 0308 	add.w	r3, r7, #8
 8005494:	4619      	mov	r1, r3
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f7ff ff4c 	bl	8005334 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800549c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054a0:	2111      	movs	r1, #17
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 fa40 	bl	8005928 <SDMMC_GetCmdResp1>
 80054a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054aa:	69fb      	ldr	r3, [r7, #28]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3720      	adds	r7, #32
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b088      	sub	sp, #32
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80054be:	2300      	movs	r3, #0
 80054c0:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80054c6:	2312      	movs	r3, #18
 80054c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80054ca:	2340      	movs	r3, #64	@ 0x40
 80054cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80054ce:	2300      	movs	r3, #0
 80054d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80054d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80054d6:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80054d8:	f107 0308 	add.w	r3, r7, #8
 80054dc:	4619      	mov	r1, r3
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f7ff ff28 	bl	8005334 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80054e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054e8:	2112      	movs	r1, #18
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 fa1c 	bl	8005928 <SDMMC_GetCmdResp1>
 80054f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054f2:	69fb      	ldr	r3, [r7, #28]
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3720      	adds	r7, #32
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b088      	sub	sp, #32
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005506:	2300      	movs	r3, #0
 8005508:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800550e:	2318      	movs	r3, #24
 8005510:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005512:	2340      	movs	r3, #64	@ 0x40
 8005514:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005516:	2300      	movs	r3, #0
 8005518:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800551a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800551e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005520:	f107 0308 	add.w	r3, r7, #8
 8005524:	4619      	mov	r1, r3
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f7ff ff04 	bl	8005334 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800552c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005530:	2118      	movs	r1, #24
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f9f8 	bl	8005928 <SDMMC_GetCmdResp1>
 8005538:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800553a:	69fb      	ldr	r3, [r7, #28]
}
 800553c:	4618      	mov	r0, r3
 800553e:	3720      	adds	r7, #32
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b088      	sub	sp, #32
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800554e:	2300      	movs	r3, #0
 8005550:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005556:	2319      	movs	r3, #25
 8005558:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800555a:	2340      	movs	r3, #64	@ 0x40
 800555c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800555e:	2300      	movs	r3, #0
 8005560:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005562:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005566:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005568:	f107 0308 	add.w	r3, r7, #8
 800556c:	4619      	mov	r1, r3
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f7ff fee0 	bl	8005334 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005574:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005578:	2119      	movs	r1, #25
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f9d4 	bl	8005928 <SDMMC_GetCmdResp1>
 8005580:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005582:	69fb      	ldr	r3, [r7, #28]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3720      	adds	r7, #32
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b088      	sub	sp, #32
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005594:	2300      	movs	r3, #0
 8005596:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0;
 8005598:	2300      	movs	r3, #0
 800559a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800559c:	230c      	movs	r3, #12
 800559e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80055a0:	2340      	movs	r3, #64	@ 0x40
 80055a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80055a4:	2300      	movs	r3, #0
 80055a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80055a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80055ac:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80055ae:	f107 0308 	add.w	r3, r7, #8
 80055b2:	4619      	mov	r1, r3
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f7ff febd 	bl	8005334 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 80055ba:	4a05      	ldr	r2, [pc, #20]	@ (80055d0 <SDMMC_CmdStopTransfer+0x44>)
 80055bc:	210c      	movs	r1, #12
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f9b2 	bl	8005928 <SDMMC_GetCmdResp1>
 80055c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055c6:	69fb      	ldr	r3, [r7, #28]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3720      	adds	r7, #32
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	05f5e100 	.word	0x05f5e100

080055d4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b08a      	sub	sp, #40	@ 0x28
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80055e0:	2300      	movs	r3, #0
 80055e2:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80055e8:	2307      	movs	r3, #7
 80055ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80055ec:	2340      	movs	r3, #64	@ 0x40
 80055ee:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80055f0:	2300      	movs	r3, #0
 80055f2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80055f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80055f8:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80055fa:	f107 0310 	add.w	r3, r7, #16
 80055fe:	4619      	mov	r1, r3
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	f7ff fe97 	bl	8005334 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8005606:	f241 3288 	movw	r2, #5000	@ 0x1388
 800560a:	2107      	movs	r1, #7
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f000 f98b 	bl	8005928 <SDMMC_GetCmdResp1>
 8005612:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8005614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005616:	4618      	mov	r0, r3
 8005618:	3728      	adds	r7, #40	@ 0x28
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b088      	sub	sp, #32
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005626:	2300      	movs	r3, #0
 8005628:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 800562a:	2300      	movs	r3, #0
 800562c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800562e:	2300      	movs	r3, #0
 8005630:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8005632:	2300      	movs	r3, #0
 8005634:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005636:	2300      	movs	r3, #0
 8005638:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800563a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800563e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005640:	f107 0308 	add.w	r3, r7, #8
 8005644:	4619      	mov	r1, r3
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f7ff fe74 	bl	8005334 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 f941 	bl	80058d4 <SDMMC_GetCmdError>
 8005652:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005654:	69fb      	ldr	r3, [r7, #28]
}
 8005656:	4618      	mov	r0, r3
 8005658:	3720      	adds	r7, #32
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b088      	sub	sp, #32
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005666:	2300      	movs	r3, #0
 8005668:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800566a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800566e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005670:	2308      	movs	r3, #8
 8005672:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005674:	2340      	movs	r3, #64	@ 0x40
 8005676:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005678:	2300      	movs	r3, #0
 800567a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800567c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005680:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005682:	f107 0308 	add.w	r3, r7, #8
 8005686:	4619      	mov	r1, r3
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f7ff fe53 	bl	8005334 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 fb12 	bl	8005cb8 <SDMMC_GetCmdResp7>
 8005694:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005696:	69fb      	ldr	r3, [r7, #28]
}
 8005698:	4618      	mov	r0, r3
 800569a:	3720      	adds	r7, #32
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b088      	sub	sp, #32
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80056aa:	2300      	movs	r3, #0
 80056ac:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80056b2:	2337      	movs	r3, #55	@ 0x37
 80056b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80056b6:	2340      	movs	r3, #64	@ 0x40
 80056b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80056ba:	2300      	movs	r3, #0
 80056bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80056be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80056c2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80056c4:	f107 0308 	add.w	r3, r7, #8
 80056c8:	4619      	mov	r1, r3
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f7ff fe32 	bl	8005334 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80056d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056d4:	2137      	movs	r1, #55	@ 0x37
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 f926 	bl	8005928 <SDMMC_GetCmdResp1>
 80056dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056de:	69fb      	ldr	r3, [r7, #28]
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3720      	adds	r7, #32
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t SdType)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b088      	sub	sp, #32
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80056f2:	2300      	movs	r3, #0
 80056f4:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 80056f6:	683a      	ldr	r2, [r7, #0]
 80056f8:	4b0d      	ldr	r3, [pc, #52]	@ (8005730 <SDMMC_CmdAppOperCommand+0x48>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80056fe:	2329      	movs	r3, #41	@ 0x29
 8005700:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005702:	2340      	movs	r3, #64	@ 0x40
 8005704:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005706:	2300      	movs	r3, #0
 8005708:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800570a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800570e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005710:	f107 0308 	add.w	r3, r7, #8
 8005714:	4619      	mov	r1, r3
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f7ff fe0c 	bl	8005334 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 fa29 	bl	8005b74 <SDMMC_GetCmdResp3>
 8005722:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005724:	69fb      	ldr	r3, [r7, #28]
}
 8005726:	4618      	mov	r0, r3
 8005728:	3720      	adds	r7, #32
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	80100000 	.word	0x80100000

08005734 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b088      	sub	sp, #32
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800573e:	2300      	movs	r3, #0
 8005740:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005746:	2306      	movs	r3, #6
 8005748:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800574a:	2340      	movs	r3, #64	@ 0x40
 800574c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800574e:	2300      	movs	r3, #0
 8005750:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005752:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005756:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005758:	f107 0308 	add.w	r3, r7, #8
 800575c:	4619      	mov	r1, r3
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f7ff fde8 	bl	8005334 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8005764:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005768:	2106      	movs	r1, #6
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 f8dc 	bl	8005928 <SDMMC_GetCmdResp1>
 8005770:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005772:	69fb      	ldr	r3, [r7, #28]
}
 8005774:	4618      	mov	r0, r3
 8005776:	3720      	adds	r7, #32
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b088      	sub	sp, #32
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005784:	2300      	movs	r3, #0
 8005786:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0;
 8005788:	2300      	movs	r3, #0
 800578a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800578c:	2333      	movs	r3, #51	@ 0x33
 800578e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005790:	2340      	movs	r3, #64	@ 0x40
 8005792:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005794:	2300      	movs	r3, #0
 8005796:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005798:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800579c:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800579e:	f107 0308 	add.w	r3, r7, #8
 80057a2:	4619      	mov	r1, r3
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f7ff fdc5 	bl	8005334 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80057aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057ae:	2133      	movs	r1, #51	@ 0x33
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 f8b9 	bl	8005928 <SDMMC_GetCmdResp1>
 80057b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057b8:	69fb      	ldr	r3, [r7, #28]
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3720      	adds	r7, #32
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b088      	sub	sp, #32
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80057ca:	2300      	movs	r3, #0
 80057cc:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 80057ce:	2300      	movs	r3, #0
 80057d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80057d2:	2302      	movs	r3, #2
 80057d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80057d6:	23c0      	movs	r3, #192	@ 0xc0
 80057d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80057da:	2300      	movs	r3, #0
 80057dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80057de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80057e2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80057e4:	f107 0308 	add.w	r3, r7, #8
 80057e8:	4619      	mov	r1, r3
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f7ff fda2 	bl	8005334 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 f97f 	bl	8005af4 <SDMMC_GetCmdResp2>
 80057f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057f8:	69fb      	ldr	r3, [r7, #28]
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3720      	adds	r7, #32
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b088      	sub	sp, #32
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
 800580a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800580c:	2300      	movs	r3, #0
 800580e:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005814:	2309      	movs	r3, #9
 8005816:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005818:	23c0      	movs	r3, #192	@ 0xc0
 800581a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800581c:	2300      	movs	r3, #0
 800581e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005820:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005824:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005826:	f107 0308 	add.w	r3, r7, #8
 800582a:	4619      	mov	r1, r3
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f7ff fd81 	bl	8005334 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f95e 	bl	8005af4 <SDMMC_GetCmdResp2>
 8005838:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800583a:	69fb      	ldr	r3, [r7, #28]
}
 800583c:	4618      	mov	r0, r3
 800583e:	3720      	adds	r7, #32
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b088      	sub	sp, #32
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800584e:	2300      	movs	r3, #0
 8005850:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 8005852:	2300      	movs	r3, #0
 8005854:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005856:	2303      	movs	r3, #3
 8005858:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800585a:	2340      	movs	r3, #64	@ 0x40
 800585c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800585e:	2300      	movs	r3, #0
 8005860:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005862:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005866:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005868:	f107 0308 	add.w	r3, r7, #8
 800586c:	4619      	mov	r1, r3
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f7ff fd60 	bl	8005334 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	2103      	movs	r1, #3
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 f9af 	bl	8005bdc <SDMMC_GetCmdResp6>
 800587e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005880:	69fb      	ldr	r3, [r7, #28]
}
 8005882:	4618      	mov	r0, r3
 8005884:	3720      	adds	r7, #32
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b088      	sub	sp, #32
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
 8005892:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005894:	2300      	movs	r3, #0
 8005896:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800589c:	230d      	movs	r3, #13
 800589e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80058a0:	2340      	movs	r3, #64	@ 0x40
 80058a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80058a4:	2300      	movs	r3, #0
 80058a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80058a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80058ac:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80058ae:	f107 0308 	add.w	r3, r7, #8
 80058b2:	4619      	mov	r1, r3
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f7ff fd3d 	bl	8005334 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80058ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058be:	210d      	movs	r1, #13
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 f831 	bl	8005928 <SDMMC_GetCmdResp1>
 80058c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80058c8:	69fb      	ldr	r3, [r7, #28]
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3720      	adds	r7, #32
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
	...

080058d4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80058d4:	b490      	push	{r4, r7}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80058dc:	4b10      	ldr	r3, [pc, #64]	@ (8005920 <SDMMC_GetCmdError+0x4c>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a10      	ldr	r2, [pc, #64]	@ (8005924 <SDMMC_GetCmdError+0x50>)
 80058e2:	fba2 2303 	umull	r2, r3, r2, r3
 80058e6:	0a5b      	lsrs	r3, r3, #9
 80058e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058ec:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 80058f0:	4623      	mov	r3, r4
 80058f2:	1e5c      	subs	r4, r3, #1
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d102      	bne.n	80058fe <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80058f8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80058fc:	e00a      	b.n	8005914 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005906:	2b00      	cmp	r3, #0
 8005908:	d0f2      	beq.n	80058f0 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8005910:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3708      	adds	r7, #8
 8005918:	46bd      	mov	sp, r7
 800591a:	bc90      	pop	{r4, r7}
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	20000004 	.word	0x20000004
 8005924:	10624dd3 	.word	0x10624dd3

08005928 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005928:	b590      	push	{r4, r7, lr}
 800592a:	b087      	sub	sp, #28
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	460b      	mov	r3, r1
 8005932:	607a      	str	r2, [r7, #4]
 8005934:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8005936:	4b6c      	ldr	r3, [pc, #432]	@ (8005ae8 <SDMMC_GetCmdResp1+0x1c0>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a6c      	ldr	r2, [pc, #432]	@ (8005aec <SDMMC_GetCmdResp1+0x1c4>)
 800593c:	fba2 2303 	umull	r2, r3, r2, r3
 8005940:	0a5b      	lsrs	r3, r3, #9
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8005948:	4623      	mov	r3, r4
 800594a:	1e5c      	subs	r4, r3, #1
 800594c:	2b00      	cmp	r3, #0
 800594e:	d102      	bne.n	8005956 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005950:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005954:	e0c3      	b.n	8005ade <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800595a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800595e:	2b00      	cmp	r3, #0
 8005960:	d0f2      	beq.n	8005948 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005966:	f003 0304 	and.w	r3, r3, #4
 800596a:	2b00      	cmp	r3, #0
 800596c:	d004      	beq.n	8005978 <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2204      	movs	r2, #4
 8005972:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005974:	2304      	movs	r3, #4
 8005976:	e0b2      	b.n	8005ade <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800597c:	f003 0301 	and.w	r3, r3, #1
 8005980:	2b00      	cmp	r3, #0
 8005982:	d004      	beq.n	800598e <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2201      	movs	r2, #1
 8005988:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800598a:	2301      	movs	r3, #1
 800598c:	e0a7      	b.n	8005ade <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800598e:	68f8      	ldr	r0, [r7, #12]
 8005990:	f7ff fcfa 	bl	8005388 <SDMMC_GetCommandResponse>
 8005994:	4603      	mov	r3, r0
 8005996:	461a      	mov	r2, r3
 8005998:	7afb      	ldrb	r3, [r7, #11]
 800599a:	4293      	cmp	r3, r2
 800599c:	d001      	beq.n	80059a2 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800599e:	2301      	movs	r3, #1
 80059a0:	e09d      	b.n	8005ade <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 80059a8:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80059aa:	2100      	movs	r1, #0
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f7ff fcf8 	bl	80053a2 <SDMMC_GetResponse>
 80059b2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80059b4:	697a      	ldr	r2, [r7, #20]
 80059b6:	4b4e      	ldr	r3, [pc, #312]	@ (8005af0 <SDMMC_GetCmdResp1+0x1c8>)
 80059b8:	4013      	ands	r3, r2
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d101      	bne.n	80059c2 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 80059be:	2300      	movs	r3, #0
 80059c0:	e08d      	b.n	8005ade <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	da02      	bge.n	80059ce <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80059c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80059cc:	e087      	b.n	8005ade <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d001      	beq.n	80059dc <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80059d8:	2340      	movs	r3, #64	@ 0x40
 80059da:	e080      	b.n	8005ade <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d001      	beq.n	80059ea <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80059e6:	2380      	movs	r3, #128	@ 0x80
 80059e8:	e079      	b.n	8005ade <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d002      	beq.n	80059fa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80059f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80059f8:	e071      	b.n	8005ade <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d002      	beq.n	8005a0a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005a04:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005a08:	e069      	b.n	8005ade <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d002      	beq.n	8005a1a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005a14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a18:	e061      	b.n	8005ade <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d002      	beq.n	8005a2a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005a24:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005a28:	e059      	b.n	8005ade <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d002      	beq.n	8005a3a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005a34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005a38:	e051      	b.n	8005ade <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d002      	beq.n	8005a4a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005a44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005a48:	e049      	b.n	8005ade <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d002      	beq.n	8005a5a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005a54:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005a58:	e041      	b.n	8005ade <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d002      	beq.n	8005a6a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 8005a64:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a68:	e039      	b.n	8005ade <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d002      	beq.n	8005a7a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005a74:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005a78:	e031      	b.n	8005ade <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d002      	beq.n	8005a8a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005a84:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005a88:	e029      	b.n	8005ade <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d002      	beq.n	8005a9a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005a94:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005a98:	e021      	b.n	8005ade <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d002      	beq.n	8005aaa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005aa4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005aa8:	e019      	b.n	8005ade <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d002      	beq.n	8005aba <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005ab4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005ab8:	e011      	b.n	8005ade <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d002      	beq.n	8005aca <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005ac4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005ac8:	e009      	b.n	8005ade <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f003 0308 	and.w	r3, r3, #8
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d002      	beq.n	8005ada <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005ad4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8005ad8:	e001      	b.n	8005ade <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005ada:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	371c      	adds	r7, #28
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd90      	pop	{r4, r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	20000004 	.word	0x20000004
 8005aec:	10624dd3 	.word	0x10624dd3
 8005af0:	fdffe008 	.word	0xfdffe008

08005af4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8005af4:	b490      	push	{r4, r7}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005afc:	4b1b      	ldr	r3, [pc, #108]	@ (8005b6c <SDMMC_GetCmdResp2+0x78>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a1b      	ldr	r2, [pc, #108]	@ (8005b70 <SDMMC_GetCmdResp2+0x7c>)
 8005b02:	fba2 2303 	umull	r2, r3, r2, r3
 8005b06:	0a5b      	lsrs	r3, r3, #9
 8005b08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b0c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8005b10:	4623      	mov	r3, r4
 8005b12:	1e5c      	subs	r4, r3, #1
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d102      	bne.n	8005b1e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005b18:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005b1c:	e020      	b.n	8005b60 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b22:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d0f2      	beq.n	8005b10 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b2e:	f003 0304 	and.w	r3, r3, #4
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d004      	beq.n	8005b40 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2204      	movs	r2, #4
 8005b3a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005b3c:	2304      	movs	r3, #4
 8005b3e:	e00f      	b.n	8005b60 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b44:	f003 0301 	and.w	r3, r3, #1
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d004      	beq.n	8005b56 <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e004      	b.n	8005b60 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8005b5c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3708      	adds	r7, #8
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bc90      	pop	{r4, r7}
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	20000004 	.word	0x20000004
 8005b70:	10624dd3 	.word	0x10624dd3

08005b74 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8005b74:	b490      	push	{r4, r7}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005b7c:	4b15      	ldr	r3, [pc, #84]	@ (8005bd4 <SDMMC_GetCmdResp3+0x60>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a15      	ldr	r2, [pc, #84]	@ (8005bd8 <SDMMC_GetCmdResp3+0x64>)
 8005b82:	fba2 2303 	umull	r2, r3, r2, r3
 8005b86:	0a5b      	lsrs	r3, r3, #9
 8005b88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b8c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8005b90:	4623      	mov	r3, r4
 8005b92:	1e5c      	subs	r4, r3, #1
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d102      	bne.n	8005b9e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005b98:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005b9c:	e015      	b.n	8005bca <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ba2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d0f2      	beq.n	8005b90 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bae:	f003 0304 	and.w	r3, r3, #4
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d004      	beq.n	8005bc0 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2204      	movs	r2, #4
 8005bba:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005bbc:	2304      	movs	r3, #4
 8005bbe:	e004      	b.n	8005bca <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8005bc6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3708      	adds	r7, #8
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bc90      	pop	{r4, r7}
 8005bd2:	4770      	bx	lr
 8005bd4:	20000004 	.word	0x20000004
 8005bd8:	10624dd3 	.word	0x10624dd3

08005bdc <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005bdc:	b590      	push	{r4, r7, lr}
 8005bde:	b087      	sub	sp, #28
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	460b      	mov	r3, r1
 8005be6:	607a      	str	r2, [r7, #4]
 8005be8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005bea:	4b31      	ldr	r3, [pc, #196]	@ (8005cb0 <SDMMC_GetCmdResp6+0xd4>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a31      	ldr	r2, [pc, #196]	@ (8005cb4 <SDMMC_GetCmdResp6+0xd8>)
 8005bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf4:	0a5b      	lsrs	r3, r3, #9
 8005bf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bfa:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8005bfe:	4623      	mov	r3, r4
 8005c00:	1e5c      	subs	r4, r3, #1
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d102      	bne.n	8005c0c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005c06:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005c0a:	e04c      	b.n	8005ca6 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c10:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d0f2      	beq.n	8005bfe <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c1c:	f003 0304 	and.w	r3, r3, #4
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d004      	beq.n	8005c2e <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2204      	movs	r2, #4
 8005c28:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005c2a:	2304      	movs	r3, #4
 8005c2c:	e03b      	b.n	8005ca6 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d004      	beq.n	8005c44 <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e030      	b.n	8005ca6 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f7ff fb9f 	bl	8005388 <SDMMC_GetCommandResponse>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	7afb      	ldrb	r3, [r7, #11]
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d001      	beq.n	8005c58 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e026      	b.n	8005ca6 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f240 52ff 	movw	r2, #1535	@ 0x5ff
 8005c5e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005c60:	2100      	movs	r1, #0
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f7ff fb9d 	bl	80053a2 <SDMMC_GetResponse>
 8005c68:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d106      	bne.n	8005c82 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	0c1b      	lsrs	r3, r3, #16
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	e011      	b.n	8005ca6 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d002      	beq.n	8005c92 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005c8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005c90:	e009      	b.n	8005ca6 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d002      	beq.n	8005ca2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005c9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005ca0:	e001      	b.n	8005ca6 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005ca2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	371c      	adds	r7, #28
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd90      	pop	{r4, r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	20000004 	.word	0x20000004
 8005cb4:	10624dd3 	.word	0x10624dd3

08005cb8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8005cb8:	b490      	push	{r4, r7}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005cc0:	4b18      	ldr	r3, [pc, #96]	@ (8005d24 <SDMMC_GetCmdResp7+0x6c>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a18      	ldr	r2, [pc, #96]	@ (8005d28 <SDMMC_GetCmdResp7+0x70>)
 8005cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cca:	0a5b      	lsrs	r3, r3, #9
 8005ccc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cd0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8005cd4:	4623      	mov	r3, r4
 8005cd6:	1e5c      	subs	r4, r3, #1
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d102      	bne.n	8005ce2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005cdc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005ce0:	e01a      	b.n	8005d18 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ce6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d0f2      	beq.n	8005cd4 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cf2:	f003 0304 	and.w	r3, r3, #4
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d004      	beq.n	8005d04 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2240      	movs	r2, #64	@ 0x40
 8005cfe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005d00:	2304      	movs	r3, #4
 8005d02:	e009      	b.n	8005d18 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d002      	beq.n	8005d16 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2240      	movs	r2, #64	@ 0x40
 8005d14:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005d16:	2300      	movs	r3, #0
  
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3708      	adds	r7, #8
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bc90      	pop	{r4, r7}
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	20000004 	.word	0x20000004
 8005d28:	10624dd3 	.word	0x10624dd3

08005d2c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	4603      	mov	r3, r0
 8005d34:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005d36:	79fb      	ldrb	r3, [r7, #7]
 8005d38:	4a08      	ldr	r2, [pc, #32]	@ (8005d5c <disk_status+0x30>)
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	4413      	add	r3, r2
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	79fa      	ldrb	r2, [r7, #7]
 8005d44:	4905      	ldr	r1, [pc, #20]	@ (8005d5c <disk_status+0x30>)
 8005d46:	440a      	add	r2, r1
 8005d48:	7b12      	ldrb	r2, [r2, #12]
 8005d4a:	4610      	mov	r0, r2
 8005d4c:	4798      	blx	r3
 8005d4e:	4603      	mov	r3, r0
 8005d50:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3710      	adds	r7, #16
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	20000850 	.word	0x20000850

08005d60 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	4603      	mov	r3, r0
 8005d68:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005d6e:	79fb      	ldrb	r3, [r7, #7]
 8005d70:	4a0d      	ldr	r2, [pc, #52]	@ (8005da8 <disk_initialize+0x48>)
 8005d72:	5cd3      	ldrb	r3, [r2, r3]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d111      	bne.n	8005d9c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005d78:	79fb      	ldrb	r3, [r7, #7]
 8005d7a:	4a0b      	ldr	r2, [pc, #44]	@ (8005da8 <disk_initialize+0x48>)
 8005d7c:	2101      	movs	r1, #1
 8005d7e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005d80:	79fb      	ldrb	r3, [r7, #7]
 8005d82:	4a09      	ldr	r2, [pc, #36]	@ (8005da8 <disk_initialize+0x48>)
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	4413      	add	r3, r2
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	79fa      	ldrb	r2, [r7, #7]
 8005d8e:	4906      	ldr	r1, [pc, #24]	@ (8005da8 <disk_initialize+0x48>)
 8005d90:	440a      	add	r2, r1
 8005d92:	7b12      	ldrb	r2, [r2, #12]
 8005d94:	4610      	mov	r0, r2
 8005d96:	4798      	blx	r3
 8005d98:	4603      	mov	r3, r0
 8005d9a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	20000850 	.word	0x20000850

08005dac <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005dac:	b590      	push	{r4, r7, lr}
 8005dae:	b087      	sub	sp, #28
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60b9      	str	r1, [r7, #8]
 8005db4:	607a      	str	r2, [r7, #4]
 8005db6:	603b      	str	r3, [r7, #0]
 8005db8:	4603      	mov	r3, r0
 8005dba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005dbc:	7bfb      	ldrb	r3, [r7, #15]
 8005dbe:	4a0a      	ldr	r2, [pc, #40]	@ (8005de8 <disk_read+0x3c>)
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	4413      	add	r3, r2
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	689c      	ldr	r4, [r3, #8]
 8005dc8:	7bfb      	ldrb	r3, [r7, #15]
 8005dca:	4a07      	ldr	r2, [pc, #28]	@ (8005de8 <disk_read+0x3c>)
 8005dcc:	4413      	add	r3, r2
 8005dce:	7b18      	ldrb	r0, [r3, #12]
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	68b9      	ldr	r1, [r7, #8]
 8005dd6:	47a0      	blx	r4
 8005dd8:	4603      	mov	r3, r0
 8005dda:	75fb      	strb	r3, [r7, #23]
  return res;
 8005ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	371c      	adds	r7, #28
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd90      	pop	{r4, r7, pc}
 8005de6:	bf00      	nop
 8005de8:	20000850 	.word	0x20000850

08005dec <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005dec:	b590      	push	{r4, r7, lr}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60b9      	str	r1, [r7, #8]
 8005df4:	607a      	str	r2, [r7, #4]
 8005df6:	603b      	str	r3, [r7, #0]
 8005df8:	4603      	mov	r3, r0
 8005dfa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005dfc:	7bfb      	ldrb	r3, [r7, #15]
 8005dfe:	4a0a      	ldr	r2, [pc, #40]	@ (8005e28 <disk_write+0x3c>)
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	4413      	add	r3, r2
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	68dc      	ldr	r4, [r3, #12]
 8005e08:	7bfb      	ldrb	r3, [r7, #15]
 8005e0a:	4a07      	ldr	r2, [pc, #28]	@ (8005e28 <disk_write+0x3c>)
 8005e0c:	4413      	add	r3, r2
 8005e0e:	7b18      	ldrb	r0, [r3, #12]
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	68b9      	ldr	r1, [r7, #8]
 8005e16:	47a0      	blx	r4
 8005e18:	4603      	mov	r3, r0
 8005e1a:	75fb      	strb	r3, [r7, #23]
  return res;
 8005e1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	371c      	adds	r7, #28
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd90      	pop	{r4, r7, pc}
 8005e26:	bf00      	nop
 8005e28:	20000850 	.word	0x20000850

08005e2c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	4603      	mov	r3, r0
 8005e34:	603a      	str	r2, [r7, #0]
 8005e36:	71fb      	strb	r3, [r7, #7]
 8005e38:	460b      	mov	r3, r1
 8005e3a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005e3c:	79fb      	ldrb	r3, [r7, #7]
 8005e3e:	4a09      	ldr	r2, [pc, #36]	@ (8005e64 <disk_ioctl+0x38>)
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	4413      	add	r3, r2
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	79fa      	ldrb	r2, [r7, #7]
 8005e4a:	4906      	ldr	r1, [pc, #24]	@ (8005e64 <disk_ioctl+0x38>)
 8005e4c:	440a      	add	r2, r1
 8005e4e:	7b10      	ldrb	r0, [r2, #12]
 8005e50:	79b9      	ldrb	r1, [r7, #6]
 8005e52:	683a      	ldr	r2, [r7, #0]
 8005e54:	4798      	blx	r3
 8005e56:	4603      	mov	r3, r0
 8005e58:	73fb      	strb	r3, [r7, #15]
  return res;
 8005e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	20000850 	.word	0x20000850

08005e68 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	af00      	add	r7, sp, #0
  return 0;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	3301      	adds	r3, #1
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005e88:	89fb      	ldrh	r3, [r7, #14]
 8005e8a:	021b      	lsls	r3, r3, #8
 8005e8c:	b21a      	sxth	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	b21b      	sxth	r3, r3
 8005e94:	4313      	orrs	r3, r2
 8005e96:	b21b      	sxth	r3, r3
 8005e98:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005e9a:	89fb      	ldrh	r3, [r7, #14]
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3714      	adds	r7, #20
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	3303      	adds	r3, #3
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	021b      	lsls	r3, r3, #8
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	3202      	adds	r2, #2
 8005ec0:	7812      	ldrb	r2, [r2, #0]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	021b      	lsls	r3, r3, #8
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	3201      	adds	r2, #1
 8005ece:	7812      	ldrb	r2, [r2, #0]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	021b      	lsls	r3, r3, #8
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	7812      	ldrb	r2, [r2, #0]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	60fb      	str	r3, [r7, #12]
	return rv;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3714      	adds	r7, #20
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr

08005eee <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b083      	sub	sp, #12
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	1c5a      	adds	r2, r3, #1
 8005efe:	607a      	str	r2, [r7, #4]
 8005f00:	887a      	ldrh	r2, [r7, #2]
 8005f02:	b2d2      	uxtb	r2, r2
 8005f04:	701a      	strb	r2, [r3, #0]
 8005f06:	887b      	ldrh	r3, [r7, #2]
 8005f08:	0a1b      	lsrs	r3, r3, #8
 8005f0a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	1c5a      	adds	r2, r3, #1
 8005f10:	607a      	str	r2, [r7, #4]
 8005f12:	887a      	ldrh	r2, [r7, #2]
 8005f14:	b2d2      	uxtb	r2, r2
 8005f16:	701a      	strb	r2, [r3, #0]
}
 8005f18:	bf00      	nop
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	1c5a      	adds	r2, r3, #1
 8005f32:	607a      	str	r2, [r7, #4]
 8005f34:	683a      	ldr	r2, [r7, #0]
 8005f36:	b2d2      	uxtb	r2, r2
 8005f38:	701a      	strb	r2, [r3, #0]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	0a1b      	lsrs	r3, r3, #8
 8005f3e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	1c5a      	adds	r2, r3, #1
 8005f44:	607a      	str	r2, [r7, #4]
 8005f46:	683a      	ldr	r2, [r7, #0]
 8005f48:	b2d2      	uxtb	r2, r2
 8005f4a:	701a      	strb	r2, [r3, #0]
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	0a1b      	lsrs	r3, r3, #8
 8005f50:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	1c5a      	adds	r2, r3, #1
 8005f56:	607a      	str	r2, [r7, #4]
 8005f58:	683a      	ldr	r2, [r7, #0]
 8005f5a:	b2d2      	uxtb	r2, r2
 8005f5c:	701a      	strb	r2, [r3, #0]
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	0a1b      	lsrs	r3, r3, #8
 8005f62:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	1c5a      	adds	r2, r3, #1
 8005f68:	607a      	str	r2, [r7, #4]
 8005f6a:	683a      	ldr	r2, [r7, #0]
 8005f6c:	b2d2      	uxtb	r2, r2
 8005f6e:	701a      	strb	r2, [r3, #0]
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005f7c:	b480      	push	{r7}
 8005f7e:	b087      	sub	sp, #28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00d      	beq.n	8005fb2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	1c53      	adds	r3, r2, #1
 8005f9a:	613b      	str	r3, [r7, #16]
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	1c59      	adds	r1, r3, #1
 8005fa0:	6179      	str	r1, [r7, #20]
 8005fa2:	7812      	ldrb	r2, [r2, #0]
 8005fa4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	3b01      	subs	r3, #1
 8005faa:	607b      	str	r3, [r7, #4]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1f1      	bne.n	8005f96 <mem_cpy+0x1a>
	}
}
 8005fb2:	bf00      	nop
 8005fb4:	371c      	adds	r7, #28
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005fbe:	b480      	push	{r7}
 8005fc0:	b087      	sub	sp, #28
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	60f8      	str	r0, [r7, #12]
 8005fc6:	60b9      	str	r1, [r7, #8]
 8005fc8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	1c5a      	adds	r2, r3, #1
 8005fd2:	617a      	str	r2, [r7, #20]
 8005fd4:	68ba      	ldr	r2, [r7, #8]
 8005fd6:	b2d2      	uxtb	r2, r2
 8005fd8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	607b      	str	r3, [r7, #4]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1f3      	bne.n	8005fce <mem_set+0x10>
}
 8005fe6:	bf00      	nop
 8005fe8:	bf00      	nop
 8005fea:	371c      	adds	r7, #28
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005ff4:	b480      	push	{r7}
 8005ff6:	b089      	sub	sp, #36	@ 0x24
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	61fb      	str	r3, [r7, #28]
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006008:	2300      	movs	r3, #0
 800600a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	1c5a      	adds	r2, r3, #1
 8006010:	61fa      	str	r2, [r7, #28]
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	4619      	mov	r1, r3
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	1c5a      	adds	r2, r3, #1
 800601a:	61ba      	str	r2, [r7, #24]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	1acb      	subs	r3, r1, r3
 8006020:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	3b01      	subs	r3, #1
 8006026:	607b      	str	r3, [r7, #4]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d002      	beq.n	8006034 <mem_cmp+0x40>
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d0eb      	beq.n	800600c <mem_cmp+0x18>

	return r;
 8006034:	697b      	ldr	r3, [r7, #20]
}
 8006036:	4618      	mov	r0, r3
 8006038:	3724      	adds	r7, #36	@ 0x24
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006042:	b480      	push	{r7}
 8006044:	b083      	sub	sp, #12
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
 800604a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800604c:	e002      	b.n	8006054 <chk_chr+0x12>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	3301      	adds	r3, #1
 8006052:	607b      	str	r3, [r7, #4]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d005      	beq.n	8006068 <chk_chr+0x26>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	461a      	mov	r2, r3
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	4293      	cmp	r3, r2
 8006066:	d1f2      	bne.n	800604e <chk_chr+0xc>
	return *str;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	781b      	ldrb	r3, [r3, #0]
}
 800606c:	4618      	mov	r0, r3
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006082:	2300      	movs	r3, #0
 8006084:	60bb      	str	r3, [r7, #8]
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	60fb      	str	r3, [r7, #12]
 800608a:	e029      	b.n	80060e0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800608c:	4a27      	ldr	r2, [pc, #156]	@ (800612c <chk_lock+0xb4>)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	011b      	lsls	r3, r3, #4
 8006092:	4413      	add	r3, r2
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d01d      	beq.n	80060d6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800609a:	4a24      	ldr	r2, [pc, #144]	@ (800612c <chk_lock+0xb4>)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	011b      	lsls	r3, r3, #4
 80060a0:	4413      	add	r3, r2
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d116      	bne.n	80060da <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80060ac:	4a1f      	ldr	r2, [pc, #124]	@ (800612c <chk_lock+0xb4>)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	011b      	lsls	r3, r3, #4
 80060b2:	4413      	add	r3, r2
 80060b4:	3304      	adds	r3, #4
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80060bc:	429a      	cmp	r2, r3
 80060be:	d10c      	bne.n	80060da <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80060c0:	4a1a      	ldr	r2, [pc, #104]	@ (800612c <chk_lock+0xb4>)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	011b      	lsls	r3, r3, #4
 80060c6:	4413      	add	r3, r2
 80060c8:	3308      	adds	r3, #8
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d102      	bne.n	80060da <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80060d4:	e007      	b.n	80060e6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80060d6:	2301      	movs	r3, #1
 80060d8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	3301      	adds	r3, #1
 80060de:	60fb      	str	r3, [r7, #12]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d9d2      	bls.n	800608c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d109      	bne.n	8006100 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d102      	bne.n	80060f8 <chk_lock+0x80>
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d101      	bne.n	80060fc <chk_lock+0x84>
 80060f8:	2300      	movs	r3, #0
 80060fa:	e010      	b.n	800611e <chk_lock+0xa6>
 80060fc:	2312      	movs	r3, #18
 80060fe:	e00e      	b.n	800611e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d108      	bne.n	8006118 <chk_lock+0xa0>
 8006106:	4a09      	ldr	r2, [pc, #36]	@ (800612c <chk_lock+0xb4>)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	011b      	lsls	r3, r3, #4
 800610c:	4413      	add	r3, r2
 800610e:	330c      	adds	r3, #12
 8006110:	881b      	ldrh	r3, [r3, #0]
 8006112:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006116:	d101      	bne.n	800611c <chk_lock+0xa4>
 8006118:	2310      	movs	r3, #16
 800611a:	e000      	b.n	800611e <chk_lock+0xa6>
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3714      	adds	r7, #20
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	20000830 	.word	0x20000830

08006130 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006136:	2300      	movs	r3, #0
 8006138:	607b      	str	r3, [r7, #4]
 800613a:	e002      	b.n	8006142 <enq_lock+0x12>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	3301      	adds	r3, #1
 8006140:	607b      	str	r3, [r7, #4]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d806      	bhi.n	8006156 <enq_lock+0x26>
 8006148:	4a09      	ldr	r2, [pc, #36]	@ (8006170 <enq_lock+0x40>)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	011b      	lsls	r3, r3, #4
 800614e:	4413      	add	r3, r2
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1f2      	bne.n	800613c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2b02      	cmp	r3, #2
 800615a:	bf14      	ite	ne
 800615c:	2301      	movne	r3, #1
 800615e:	2300      	moveq	r3, #0
 8006160:	b2db      	uxtb	r3, r3
}
 8006162:	4618      	mov	r0, r3
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	20000830 	.word	0x20000830

08006174 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800617e:	2300      	movs	r3, #0
 8006180:	60fb      	str	r3, [r7, #12]
 8006182:	e01f      	b.n	80061c4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006184:	4a41      	ldr	r2, [pc, #260]	@ (800628c <inc_lock+0x118>)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	011b      	lsls	r3, r3, #4
 800618a:	4413      	add	r3, r2
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	429a      	cmp	r2, r3
 8006194:	d113      	bne.n	80061be <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006196:	4a3d      	ldr	r2, [pc, #244]	@ (800628c <inc_lock+0x118>)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	011b      	lsls	r3, r3, #4
 800619c:	4413      	add	r3, r2
 800619e:	3304      	adds	r3, #4
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d109      	bne.n	80061be <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80061aa:	4a38      	ldr	r2, [pc, #224]	@ (800628c <inc_lock+0x118>)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	011b      	lsls	r3, r3, #4
 80061b0:	4413      	add	r3, r2
 80061b2:	3308      	adds	r3, #8
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d006      	beq.n	80061cc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	3301      	adds	r3, #1
 80061c2:	60fb      	str	r3, [r7, #12]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d9dc      	bls.n	8006184 <inc_lock+0x10>
 80061ca:	e000      	b.n	80061ce <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80061cc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d132      	bne.n	800623a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80061d4:	2300      	movs	r3, #0
 80061d6:	60fb      	str	r3, [r7, #12]
 80061d8:	e002      	b.n	80061e0 <inc_lock+0x6c>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	3301      	adds	r3, #1
 80061de:	60fb      	str	r3, [r7, #12]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d806      	bhi.n	80061f4 <inc_lock+0x80>
 80061e6:	4a29      	ldr	r2, [pc, #164]	@ (800628c <inc_lock+0x118>)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	011b      	lsls	r3, r3, #4
 80061ec:	4413      	add	r3, r2
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1f2      	bne.n	80061da <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	d101      	bne.n	80061fe <inc_lock+0x8a>
 80061fa:	2300      	movs	r3, #0
 80061fc:	e040      	b.n	8006280 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	4922      	ldr	r1, [pc, #136]	@ (800628c <inc_lock+0x118>)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	011b      	lsls	r3, r3, #4
 8006208:	440b      	add	r3, r1
 800620a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	689a      	ldr	r2, [r3, #8]
 8006210:	491e      	ldr	r1, [pc, #120]	@ (800628c <inc_lock+0x118>)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	011b      	lsls	r3, r3, #4
 8006216:	440b      	add	r3, r1
 8006218:	3304      	adds	r3, #4
 800621a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	695a      	ldr	r2, [r3, #20]
 8006220:	491a      	ldr	r1, [pc, #104]	@ (800628c <inc_lock+0x118>)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	011b      	lsls	r3, r3, #4
 8006226:	440b      	add	r3, r1
 8006228:	3308      	adds	r3, #8
 800622a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800622c:	4a17      	ldr	r2, [pc, #92]	@ (800628c <inc_lock+0x118>)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	011b      	lsls	r3, r3, #4
 8006232:	4413      	add	r3, r2
 8006234:	330c      	adds	r3, #12
 8006236:	2200      	movs	r2, #0
 8006238:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d009      	beq.n	8006254 <inc_lock+0xe0>
 8006240:	4a12      	ldr	r2, [pc, #72]	@ (800628c <inc_lock+0x118>)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	011b      	lsls	r3, r3, #4
 8006246:	4413      	add	r3, r2
 8006248:	330c      	adds	r3, #12
 800624a:	881b      	ldrh	r3, [r3, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d001      	beq.n	8006254 <inc_lock+0xe0>
 8006250:	2300      	movs	r3, #0
 8006252:	e015      	b.n	8006280 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d108      	bne.n	800626c <inc_lock+0xf8>
 800625a:	4a0c      	ldr	r2, [pc, #48]	@ (800628c <inc_lock+0x118>)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	011b      	lsls	r3, r3, #4
 8006260:	4413      	add	r3, r2
 8006262:	330c      	adds	r3, #12
 8006264:	881b      	ldrh	r3, [r3, #0]
 8006266:	3301      	adds	r3, #1
 8006268:	b29a      	uxth	r2, r3
 800626a:	e001      	b.n	8006270 <inc_lock+0xfc>
 800626c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006270:	4906      	ldr	r1, [pc, #24]	@ (800628c <inc_lock+0x118>)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	011b      	lsls	r3, r3, #4
 8006276:	440b      	add	r3, r1
 8006278:	330c      	adds	r3, #12
 800627a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	3301      	adds	r3, #1
}
 8006280:	4618      	mov	r0, r3
 8006282:	3714      	adds	r7, #20
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr
 800628c:	20000830 	.word	0x20000830

08006290 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	3b01      	subs	r3, #1
 800629c:	607b      	str	r3, [r7, #4]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d825      	bhi.n	80062f0 <dec_lock+0x60>
		n = Files[i].ctr;
 80062a4:	4a17      	ldr	r2, [pc, #92]	@ (8006304 <dec_lock+0x74>)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	011b      	lsls	r3, r3, #4
 80062aa:	4413      	add	r3, r2
 80062ac:	330c      	adds	r3, #12
 80062ae:	881b      	ldrh	r3, [r3, #0]
 80062b0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80062b2:	89fb      	ldrh	r3, [r7, #14]
 80062b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062b8:	d101      	bne.n	80062be <dec_lock+0x2e>
 80062ba:	2300      	movs	r3, #0
 80062bc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80062be:	89fb      	ldrh	r3, [r7, #14]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d002      	beq.n	80062ca <dec_lock+0x3a>
 80062c4:	89fb      	ldrh	r3, [r7, #14]
 80062c6:	3b01      	subs	r3, #1
 80062c8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80062ca:	4a0e      	ldr	r2, [pc, #56]	@ (8006304 <dec_lock+0x74>)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	011b      	lsls	r3, r3, #4
 80062d0:	4413      	add	r3, r2
 80062d2:	330c      	adds	r3, #12
 80062d4:	89fa      	ldrh	r2, [r7, #14]
 80062d6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80062d8:	89fb      	ldrh	r3, [r7, #14]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d105      	bne.n	80062ea <dec_lock+0x5a>
 80062de:	4a09      	ldr	r2, [pc, #36]	@ (8006304 <dec_lock+0x74>)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	011b      	lsls	r3, r3, #4
 80062e4:	4413      	add	r3, r2
 80062e6:	2200      	movs	r2, #0
 80062e8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80062ea:	2300      	movs	r3, #0
 80062ec:	737b      	strb	r3, [r7, #13]
 80062ee:	e001      	b.n	80062f4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80062f0:	2302      	movs	r3, #2
 80062f2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80062f4:	7b7b      	ldrb	r3, [r7, #13]
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3714      	adds	r7, #20
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	20000830 	.word	0x20000830

08006308 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006310:	2300      	movs	r3, #0
 8006312:	60fb      	str	r3, [r7, #12]
 8006314:	e010      	b.n	8006338 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006316:	4a0d      	ldr	r2, [pc, #52]	@ (800634c <clear_lock+0x44>)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	011b      	lsls	r3, r3, #4
 800631c:	4413      	add	r3, r2
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	429a      	cmp	r2, r3
 8006324:	d105      	bne.n	8006332 <clear_lock+0x2a>
 8006326:	4a09      	ldr	r2, [pc, #36]	@ (800634c <clear_lock+0x44>)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	011b      	lsls	r3, r3, #4
 800632c:	4413      	add	r3, r2
 800632e:	2200      	movs	r2, #0
 8006330:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	3301      	adds	r3, #1
 8006336:	60fb      	str	r3, [r7, #12]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2b01      	cmp	r3, #1
 800633c:	d9eb      	bls.n	8006316 <clear_lock+0xe>
	}
}
 800633e:	bf00      	nop
 8006340:	bf00      	nop
 8006342:	3714      	adds	r7, #20
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	20000830 	.word	0x20000830

08006350 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b086      	sub	sp, #24
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006358:	2300      	movs	r3, #0
 800635a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	78db      	ldrb	r3, [r3, #3]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d034      	beq.n	80063ce <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006368:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	7858      	ldrb	r0, [r3, #1]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006374:	2301      	movs	r3, #1
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	f7ff fd38 	bl	8005dec <disk_write>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d002      	beq.n	8006388 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006382:	2301      	movs	r3, #1
 8006384:	73fb      	strb	r3, [r7, #15]
 8006386:	e022      	b.n	80063ce <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	1ad2      	subs	r2, r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	429a      	cmp	r2, r3
 800639c:	d217      	bcs.n	80063ce <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	789b      	ldrb	r3, [r3, #2]
 80063a2:	613b      	str	r3, [r7, #16]
 80063a4:	e010      	b.n	80063c8 <sync_window+0x78>
					wsect += fs->fsize;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	4413      	add	r3, r2
 80063ae:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	7858      	ldrb	r0, [r3, #1]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80063ba:	2301      	movs	r3, #1
 80063bc:	697a      	ldr	r2, [r7, #20]
 80063be:	f7ff fd15 	bl	8005dec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	3b01      	subs	r3, #1
 80063c6:	613b      	str	r3, [r7, #16]
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d8eb      	bhi.n	80063a6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80063ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3718      	adds	r7, #24
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80063e2:	2300      	movs	r3, #0
 80063e4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ea:	683a      	ldr	r2, [r7, #0]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d01b      	beq.n	8006428 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f7ff ffad 	bl	8006350 <sync_window>
 80063f6:	4603      	mov	r3, r0
 80063f8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80063fa:	7bfb      	ldrb	r3, [r7, #15]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d113      	bne.n	8006428 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	7858      	ldrb	r0, [r3, #1]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800640a:	2301      	movs	r3, #1
 800640c:	683a      	ldr	r2, [r7, #0]
 800640e:	f7ff fccd 	bl	8005dac <disk_read>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d004      	beq.n	8006422 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006418:	f04f 33ff 	mov.w	r3, #4294967295
 800641c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800641e:	2301      	movs	r3, #1
 8006420:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	683a      	ldr	r2, [r7, #0]
 8006426:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8006428:	7bfb      	ldrb	r3, [r7, #15]
}
 800642a:	4618      	mov	r0, r3
 800642c:	3710      	adds	r7, #16
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
	...

08006434 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f7ff ff87 	bl	8006350 <sync_window>
 8006442:	4603      	mov	r3, r0
 8006444:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006446:	7bfb      	ldrb	r3, [r7, #15]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d158      	bne.n	80064fe <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	2b03      	cmp	r3, #3
 8006452:	d148      	bne.n	80064e6 <sync_fs+0xb2>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	791b      	ldrb	r3, [r3, #4]
 8006458:	2b01      	cmp	r3, #1
 800645a:	d144      	bne.n	80064e6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	3330      	adds	r3, #48	@ 0x30
 8006460:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006464:	2100      	movs	r1, #0
 8006466:	4618      	mov	r0, r3
 8006468:	f7ff fda9 	bl	8005fbe <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	3330      	adds	r3, #48	@ 0x30
 8006470:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006474:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8006478:	4618      	mov	r0, r3
 800647a:	f7ff fd38 	bl	8005eee <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	3330      	adds	r3, #48	@ 0x30
 8006482:	4921      	ldr	r1, [pc, #132]	@ (8006508 <sync_fs+0xd4>)
 8006484:	4618      	mov	r0, r3
 8006486:	f7ff fd4d 	bl	8005f24 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	3330      	adds	r3, #48	@ 0x30
 800648e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006492:	491e      	ldr	r1, [pc, #120]	@ (800650c <sync_fs+0xd8>)
 8006494:	4618      	mov	r0, r3
 8006496:	f7ff fd45 	bl	8005f24 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	3330      	adds	r3, #48	@ 0x30
 800649e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	4619      	mov	r1, r3
 80064a8:	4610      	mov	r0, r2
 80064aa:	f7ff fd3b 	bl	8005f24 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	3330      	adds	r3, #48	@ 0x30
 80064b2:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	4619      	mov	r1, r3
 80064bc:	4610      	mov	r0, r2
 80064be:	f7ff fd31 	bl	8005f24 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	69db      	ldr	r3, [r3, #28]
 80064c6:	1c5a      	adds	r2, r3, #1
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	7858      	ldrb	r0, [r3, #1]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064da:	2301      	movs	r3, #1
 80064dc:	f7ff fc86 	bl	8005dec <disk_write>
			fs->fsi_flag = 0;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	785b      	ldrb	r3, [r3, #1]
 80064ea:	2200      	movs	r2, #0
 80064ec:	2100      	movs	r1, #0
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7ff fc9c 	bl	8005e2c <disk_ioctl>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d001      	beq.n	80064fe <sync_fs+0xca>
 80064fa:	2301      	movs	r3, #1
 80064fc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80064fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006500:	4618      	mov	r0, r3
 8006502:	3710      	adds	r7, #16
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	41615252 	.word	0x41615252
 800650c:	61417272 	.word	0x61417272

08006510 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	3b02      	subs	r3, #2
 800651e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	695b      	ldr	r3, [r3, #20]
 8006524:	3b02      	subs	r3, #2
 8006526:	683a      	ldr	r2, [r7, #0]
 8006528:	429a      	cmp	r2, r3
 800652a:	d301      	bcc.n	8006530 <clust2sect+0x20>
 800652c:	2300      	movs	r3, #0
 800652e:	e008      	b.n	8006542 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	895b      	ldrh	r3, [r3, #10]
 8006534:	461a      	mov	r2, r3
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	fb03 f202 	mul.w	r2, r3, r2
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006540:	4413      	add	r3, r2
}
 8006542:	4618      	mov	r0, r3
 8006544:	370c      	adds	r7, #12
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr

0800654e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800654e:	b580      	push	{r7, lr}
 8006550:	b086      	sub	sp, #24
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
 8006556:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d904      	bls.n	800656e <get_fat+0x20>
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	695b      	ldr	r3, [r3, #20]
 8006568:	683a      	ldr	r2, [r7, #0]
 800656a:	429a      	cmp	r2, r3
 800656c:	d302      	bcc.n	8006574 <get_fat+0x26>
		val = 1;	/* Internal error */
 800656e:	2301      	movs	r3, #1
 8006570:	617b      	str	r3, [r7, #20]
 8006572:	e08e      	b.n	8006692 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006574:	f04f 33ff 	mov.w	r3, #4294967295
 8006578:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	2b03      	cmp	r3, #3
 8006580:	d061      	beq.n	8006646 <get_fat+0xf8>
 8006582:	2b03      	cmp	r3, #3
 8006584:	dc7b      	bgt.n	800667e <get_fat+0x130>
 8006586:	2b01      	cmp	r3, #1
 8006588:	d002      	beq.n	8006590 <get_fat+0x42>
 800658a:	2b02      	cmp	r3, #2
 800658c:	d041      	beq.n	8006612 <get_fat+0xc4>
 800658e:	e076      	b.n	800667e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	60fb      	str	r3, [r7, #12]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	085b      	lsrs	r3, r3, #1
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	4413      	add	r3, r2
 800659c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	6a1a      	ldr	r2, [r3, #32]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	0a5b      	lsrs	r3, r3, #9
 80065a6:	4413      	add	r3, r2
 80065a8:	4619      	mov	r1, r3
 80065aa:	6938      	ldr	r0, [r7, #16]
 80065ac:	f7ff ff14 	bl	80063d8 <move_window>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d166      	bne.n	8006684 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	1c5a      	adds	r2, r3, #1
 80065ba:	60fa      	str	r2, [r7, #12]
 80065bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065c0:	693a      	ldr	r2, [r7, #16]
 80065c2:	4413      	add	r3, r2
 80065c4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80065c8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	6a1a      	ldr	r2, [r3, #32]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	0a5b      	lsrs	r3, r3, #9
 80065d2:	4413      	add	r3, r2
 80065d4:	4619      	mov	r1, r3
 80065d6:	6938      	ldr	r0, [r7, #16]
 80065d8:	f7ff fefe 	bl	80063d8 <move_window>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d152      	bne.n	8006688 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	4413      	add	r3, r2
 80065ec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80065f0:	021b      	lsls	r3, r3, #8
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d002      	beq.n	8006608 <get_fat+0xba>
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	091b      	lsrs	r3, r3, #4
 8006606:	e002      	b.n	800660e <get_fat+0xc0>
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800660e:	617b      	str	r3, [r7, #20]
			break;
 8006610:	e03f      	b.n	8006692 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	6a1a      	ldr	r2, [r3, #32]
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	0a1b      	lsrs	r3, r3, #8
 800661a:	4413      	add	r3, r2
 800661c:	4619      	mov	r1, r3
 800661e:	6938      	ldr	r0, [r7, #16]
 8006620:	f7ff feda 	bl	80063d8 <move_window>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d130      	bne.n	800668c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	005b      	lsls	r3, r3, #1
 8006634:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006638:	4413      	add	r3, r2
 800663a:	4618      	mov	r0, r3
 800663c:	f7ff fc1c 	bl	8005e78 <ld_word>
 8006640:	4603      	mov	r3, r0
 8006642:	617b      	str	r3, [r7, #20]
			break;
 8006644:	e025      	b.n	8006692 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	6a1a      	ldr	r2, [r3, #32]
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	09db      	lsrs	r3, r3, #7
 800664e:	4413      	add	r3, r2
 8006650:	4619      	mov	r1, r3
 8006652:	6938      	ldr	r0, [r7, #16]
 8006654:	f7ff fec0 	bl	80063d8 <move_window>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d118      	bne.n	8006690 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800666c:	4413      	add	r3, r2
 800666e:	4618      	mov	r0, r3
 8006670:	f7ff fc1a 	bl	8005ea8 <ld_dword>
 8006674:	4603      	mov	r3, r0
 8006676:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800667a:	617b      	str	r3, [r7, #20]
			break;
 800667c:	e009      	b.n	8006692 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800667e:	2301      	movs	r3, #1
 8006680:	617b      	str	r3, [r7, #20]
 8006682:	e006      	b.n	8006692 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006684:	bf00      	nop
 8006686:	e004      	b.n	8006692 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006688:	bf00      	nop
 800668a:	e002      	b.n	8006692 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800668c:	bf00      	nop
 800668e:	e000      	b.n	8006692 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006690:	bf00      	nop
		}
	}

	return val;
 8006692:	697b      	ldr	r3, [r7, #20]
}
 8006694:	4618      	mov	r0, r3
 8006696:	3718      	adds	r7, #24
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800669c:	b590      	push	{r4, r7, lr}
 800669e:	b089      	sub	sp, #36	@ 0x24
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80066a8:	2302      	movs	r3, #2
 80066aa:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	f240 80d9 	bls.w	8006866 <put_fat+0x1ca>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	695b      	ldr	r3, [r3, #20]
 80066b8:	68ba      	ldr	r2, [r7, #8]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	f080 80d3 	bcs.w	8006866 <put_fat+0x1ca>
		switch (fs->fs_type) {
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	2b03      	cmp	r3, #3
 80066c6:	f000 8096 	beq.w	80067f6 <put_fat+0x15a>
 80066ca:	2b03      	cmp	r3, #3
 80066cc:	f300 80cb 	bgt.w	8006866 <put_fat+0x1ca>
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d002      	beq.n	80066da <put_fat+0x3e>
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d06e      	beq.n	80067b6 <put_fat+0x11a>
 80066d8:	e0c5      	b.n	8006866 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	61bb      	str	r3, [r7, #24]
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	085b      	lsrs	r3, r3, #1
 80066e2:	69ba      	ldr	r2, [r7, #24]
 80066e4:	4413      	add	r3, r2
 80066e6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6a1a      	ldr	r2, [r3, #32]
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	0a5b      	lsrs	r3, r3, #9
 80066f0:	4413      	add	r3, r2
 80066f2:	4619      	mov	r1, r3
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f7ff fe6f 	bl	80063d8 <move_window>
 80066fa:	4603      	mov	r3, r0
 80066fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80066fe:	7ffb      	ldrb	r3, [r7, #31]
 8006700:	2b00      	cmp	r3, #0
 8006702:	f040 80a9 	bne.w	8006858 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	1c59      	adds	r1, r3, #1
 8006710:	61b9      	str	r1, [r7, #24]
 8006712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006716:	4413      	add	r3, r2
 8006718:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	f003 0301 	and.w	r3, r3, #1
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00d      	beq.n	8006740 <put_fat+0xa4>
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	b25b      	sxtb	r3, r3
 800672a:	f003 030f 	and.w	r3, r3, #15
 800672e:	b25a      	sxtb	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	b2db      	uxtb	r3, r3
 8006734:	011b      	lsls	r3, r3, #4
 8006736:	b25b      	sxtb	r3, r3
 8006738:	4313      	orrs	r3, r2
 800673a:	b25b      	sxtb	r3, r3
 800673c:	b2db      	uxtb	r3, r3
 800673e:	e001      	b.n	8006744 <put_fat+0xa8>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	b2db      	uxtb	r3, r3
 8006744:	697a      	ldr	r2, [r7, #20]
 8006746:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2201      	movs	r2, #1
 800674c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6a1a      	ldr	r2, [r3, #32]
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	0a5b      	lsrs	r3, r3, #9
 8006756:	4413      	add	r3, r2
 8006758:	4619      	mov	r1, r3
 800675a:	68f8      	ldr	r0, [r7, #12]
 800675c:	f7ff fe3c 	bl	80063d8 <move_window>
 8006760:	4603      	mov	r3, r0
 8006762:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006764:	7ffb      	ldrb	r3, [r7, #31]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d178      	bne.n	800685c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006776:	4413      	add	r3, r2
 8006778:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	f003 0301 	and.w	r3, r3, #1
 8006780:	2b00      	cmp	r3, #0
 8006782:	d003      	beq.n	800678c <put_fat+0xf0>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	091b      	lsrs	r3, r3, #4
 8006788:	b2db      	uxtb	r3, r3
 800678a:	e00e      	b.n	80067aa <put_fat+0x10e>
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	b25b      	sxtb	r3, r3
 8006792:	f023 030f 	bic.w	r3, r3, #15
 8006796:	b25a      	sxtb	r2, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	0a1b      	lsrs	r3, r3, #8
 800679c:	b25b      	sxtb	r3, r3
 800679e:	f003 030f 	and.w	r3, r3, #15
 80067a2:	b25b      	sxtb	r3, r3
 80067a4:	4313      	orrs	r3, r2
 80067a6:	b25b      	sxtb	r3, r3
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	697a      	ldr	r2, [r7, #20]
 80067ac:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2201      	movs	r2, #1
 80067b2:	70da      	strb	r2, [r3, #3]
			break;
 80067b4:	e057      	b.n	8006866 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6a1a      	ldr	r2, [r3, #32]
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	0a1b      	lsrs	r3, r3, #8
 80067be:	4413      	add	r3, r2
 80067c0:	4619      	mov	r1, r3
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f7ff fe08 	bl	80063d8 <move_window>
 80067c8:	4603      	mov	r3, r0
 80067ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80067cc:	7ffb      	ldrb	r3, [r7, #31]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d146      	bne.n	8006860 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	005b      	lsls	r3, r3, #1
 80067dc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80067e0:	4413      	add	r3, r2
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	b292      	uxth	r2, r2
 80067e6:	4611      	mov	r1, r2
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7ff fb80 	bl	8005eee <st_word>
			fs->wflag = 1;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2201      	movs	r2, #1
 80067f2:	70da      	strb	r2, [r3, #3]
			break;
 80067f4:	e037      	b.n	8006866 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6a1a      	ldr	r2, [r3, #32]
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	09db      	lsrs	r3, r3, #7
 80067fe:	4413      	add	r3, r2
 8006800:	4619      	mov	r1, r3
 8006802:	68f8      	ldr	r0, [r7, #12]
 8006804:	f7ff fde8 	bl	80063d8 <move_window>
 8006808:	4603      	mov	r3, r0
 800680a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800680c:	7ffb      	ldrb	r3, [r7, #31]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d128      	bne.n	8006864 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006826:	4413      	add	r3, r2
 8006828:	4618      	mov	r0, r3
 800682a:	f7ff fb3d 	bl	8005ea8 <ld_dword>
 800682e:	4603      	mov	r3, r0
 8006830:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006834:	4323      	orrs	r3, r4
 8006836:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006846:	4413      	add	r3, r2
 8006848:	6879      	ldr	r1, [r7, #4]
 800684a:	4618      	mov	r0, r3
 800684c:	f7ff fb6a 	bl	8005f24 <st_dword>
			fs->wflag = 1;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2201      	movs	r2, #1
 8006854:	70da      	strb	r2, [r3, #3]
			break;
 8006856:	e006      	b.n	8006866 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006858:	bf00      	nop
 800685a:	e004      	b.n	8006866 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800685c:	bf00      	nop
 800685e:	e002      	b.n	8006866 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006860:	bf00      	nop
 8006862:	e000      	b.n	8006866 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006864:	bf00      	nop
		}
	}
	return res;
 8006866:	7ffb      	ldrb	r3, [r7, #31]
}
 8006868:	4618      	mov	r0, r3
 800686a:	3724      	adds	r7, #36	@ 0x24
 800686c:	46bd      	mov	sp, r7
 800686e:	bd90      	pop	{r4, r7, pc}

08006870 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b088      	sub	sp, #32
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800687c:	2300      	movs	r3, #0
 800687e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d904      	bls.n	8006896 <remove_chain+0x26>
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	695b      	ldr	r3, [r3, #20]
 8006890:	68ba      	ldr	r2, [r7, #8]
 8006892:	429a      	cmp	r2, r3
 8006894:	d301      	bcc.n	800689a <remove_chain+0x2a>
 8006896:	2302      	movs	r3, #2
 8006898:	e04b      	b.n	8006932 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00c      	beq.n	80068ba <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80068a0:	f04f 32ff 	mov.w	r2, #4294967295
 80068a4:	6879      	ldr	r1, [r7, #4]
 80068a6:	69b8      	ldr	r0, [r7, #24]
 80068a8:	f7ff fef8 	bl	800669c <put_fat>
 80068ac:	4603      	mov	r3, r0
 80068ae:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80068b0:	7ffb      	ldrb	r3, [r7, #31]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d001      	beq.n	80068ba <remove_chain+0x4a>
 80068b6:	7ffb      	ldrb	r3, [r7, #31]
 80068b8:	e03b      	b.n	8006932 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80068ba:	68b9      	ldr	r1, [r7, #8]
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f7ff fe46 	bl	800654e <get_fat>
 80068c2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d031      	beq.n	800692e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d101      	bne.n	80068d4 <remove_chain+0x64>
 80068d0:	2302      	movs	r3, #2
 80068d2:	e02e      	b.n	8006932 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068da:	d101      	bne.n	80068e0 <remove_chain+0x70>
 80068dc:	2301      	movs	r3, #1
 80068de:	e028      	b.n	8006932 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80068e0:	2200      	movs	r2, #0
 80068e2:	68b9      	ldr	r1, [r7, #8]
 80068e4:	69b8      	ldr	r0, [r7, #24]
 80068e6:	f7ff fed9 	bl	800669c <put_fat>
 80068ea:	4603      	mov	r3, r0
 80068ec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80068ee:	7ffb      	ldrb	r3, [r7, #31]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d001      	beq.n	80068f8 <remove_chain+0x88>
 80068f4:	7ffb      	ldrb	r3, [r7, #31]
 80068f6:	e01c      	b.n	8006932 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	691a      	ldr	r2, [r3, #16]
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	695b      	ldr	r3, [r3, #20]
 8006900:	3b02      	subs	r3, #2
 8006902:	429a      	cmp	r2, r3
 8006904:	d20b      	bcs.n	800691e <remove_chain+0xae>
			fs->free_clst++;
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	1c5a      	adds	r2, r3, #1
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	791b      	ldrb	r3, [r3, #4]
 8006914:	f043 0301 	orr.w	r3, r3, #1
 8006918:	b2da      	uxtb	r2, r3
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	695b      	ldr	r3, [r3, #20]
 8006926:	68ba      	ldr	r2, [r7, #8]
 8006928:	429a      	cmp	r2, r3
 800692a:	d3c6      	bcc.n	80068ba <remove_chain+0x4a>
 800692c:	e000      	b.n	8006930 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800692e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3720      	adds	r7, #32
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b088      	sub	sp, #32
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
 8006942:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d10d      	bne.n	800696c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d004      	beq.n	8006966 <create_chain+0x2c>
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	695b      	ldr	r3, [r3, #20]
 8006960:	69ba      	ldr	r2, [r7, #24]
 8006962:	429a      	cmp	r2, r3
 8006964:	d31b      	bcc.n	800699e <create_chain+0x64>
 8006966:	2301      	movs	r3, #1
 8006968:	61bb      	str	r3, [r7, #24]
 800696a:	e018      	b.n	800699e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800696c:	6839      	ldr	r1, [r7, #0]
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f7ff fded 	bl	800654e <get_fat>
 8006974:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2b01      	cmp	r3, #1
 800697a:	d801      	bhi.n	8006980 <create_chain+0x46>
 800697c:	2301      	movs	r3, #1
 800697e:	e070      	b.n	8006a62 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006986:	d101      	bne.n	800698c <create_chain+0x52>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	e06a      	b.n	8006a62 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	695b      	ldr	r3, [r3, #20]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	429a      	cmp	r2, r3
 8006994:	d201      	bcs.n	800699a <create_chain+0x60>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	e063      	b.n	8006a62 <create_chain+0x128>
		scl = clst;
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	3301      	adds	r3, #1
 80069a6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	695b      	ldr	r3, [r3, #20]
 80069ac:	69fa      	ldr	r2, [r7, #28]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d307      	bcc.n	80069c2 <create_chain+0x88>
				ncl = 2;
 80069b2:	2302      	movs	r3, #2
 80069b4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80069b6:	69fa      	ldr	r2, [r7, #28]
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d901      	bls.n	80069c2 <create_chain+0x88>
 80069be:	2300      	movs	r3, #0
 80069c0:	e04f      	b.n	8006a62 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80069c2:	69f9      	ldr	r1, [r7, #28]
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f7ff fdc2 	bl	800654e <get_fat>
 80069ca:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00e      	beq.n	80069f0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d003      	beq.n	80069e0 <create_chain+0xa6>
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069de:	d101      	bne.n	80069e4 <create_chain+0xaa>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	e03e      	b.n	8006a62 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80069e4:	69fa      	ldr	r2, [r7, #28]
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d1da      	bne.n	80069a2 <create_chain+0x68>
 80069ec:	2300      	movs	r3, #0
 80069ee:	e038      	b.n	8006a62 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80069f0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80069f2:	f04f 32ff 	mov.w	r2, #4294967295
 80069f6:	69f9      	ldr	r1, [r7, #28]
 80069f8:	6938      	ldr	r0, [r7, #16]
 80069fa:	f7ff fe4f 	bl	800669c <put_fat>
 80069fe:	4603      	mov	r3, r0
 8006a00:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006a02:	7dfb      	ldrb	r3, [r7, #23]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d109      	bne.n	8006a1c <create_chain+0xe2>
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d006      	beq.n	8006a1c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006a0e:	69fa      	ldr	r2, [r7, #28]
 8006a10:	6839      	ldr	r1, [r7, #0]
 8006a12:	6938      	ldr	r0, [r7, #16]
 8006a14:	f7ff fe42 	bl	800669c <put_fat>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006a1c:	7dfb      	ldrb	r3, [r7, #23]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d116      	bne.n	8006a50 <create_chain+0x116>
		fs->last_clst = ncl;
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	69fa      	ldr	r2, [r7, #28]
 8006a26:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	691a      	ldr	r2, [r3, #16]
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	695b      	ldr	r3, [r3, #20]
 8006a30:	3b02      	subs	r3, #2
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d804      	bhi.n	8006a40 <create_chain+0x106>
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	1e5a      	subs	r2, r3, #1
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	791b      	ldrb	r3, [r3, #4]
 8006a44:	f043 0301 	orr.w	r3, r3, #1
 8006a48:	b2da      	uxtb	r2, r3
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	711a      	strb	r2, [r3, #4]
 8006a4e:	e007      	b.n	8006a60 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006a50:	7dfb      	ldrb	r3, [r7, #23]
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d102      	bne.n	8006a5c <create_chain+0x122>
 8006a56:	f04f 33ff 	mov.w	r3, #4294967295
 8006a5a:	e000      	b.n	8006a5e <create_chain+0x124>
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006a60:	69fb      	ldr	r3, [r7, #28]
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3720      	adds	r7, #32
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b087      	sub	sp, #28
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
 8006a72:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a7e:	3304      	adds	r3, #4
 8006a80:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	0a5b      	lsrs	r3, r3, #9
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	8952      	ldrh	r2, [r2, #10]
 8006a8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a8e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	1d1a      	adds	r2, r3, #4
 8006a94:	613a      	str	r2, [r7, #16]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d101      	bne.n	8006aa4 <clmt_clust+0x3a>
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	e010      	b.n	8006ac6 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006aa4:	697a      	ldr	r2, [r7, #20]
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d307      	bcc.n	8006abc <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006aac:	697a      	ldr	r2, [r7, #20]
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	617b      	str	r3, [r7, #20]
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	3304      	adds	r3, #4
 8006ab8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006aba:	e7e9      	b.n	8006a90 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006abc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	4413      	add	r3, r2
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	371c      	adds	r7, #28
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr

08006ad2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006ad2:	b580      	push	{r7, lr}
 8006ad4:	b086      	sub	sp, #24
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
 8006ada:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ae8:	d204      	bcs.n	8006af4 <dir_sdi+0x22>
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	f003 031f 	and.w	r3, r3, #31
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d001      	beq.n	8006af8 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006af4:	2302      	movs	r3, #2
 8006af6:	e063      	b.n	8006bc0 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	683a      	ldr	r2, [r7, #0]
 8006afc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d106      	bne.n	8006b18 <dir_sdi+0x46>
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	d902      	bls.n	8006b18 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b16:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10c      	bne.n	8006b38 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	095b      	lsrs	r3, r3, #5
 8006b22:	693a      	ldr	r2, [r7, #16]
 8006b24:	8912      	ldrh	r2, [r2, #8]
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d301      	bcc.n	8006b2e <dir_sdi+0x5c>
 8006b2a:	2302      	movs	r3, #2
 8006b2c:	e048      	b.n	8006bc0 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	61da      	str	r2, [r3, #28]
 8006b36:	e029      	b.n	8006b8c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	895b      	ldrh	r3, [r3, #10]
 8006b3c:	025b      	lsls	r3, r3, #9
 8006b3e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006b40:	e019      	b.n	8006b76 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6979      	ldr	r1, [r7, #20]
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7ff fd01 	bl	800654e <get_fat>
 8006b4c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b54:	d101      	bne.n	8006b5a <dir_sdi+0x88>
 8006b56:	2301      	movs	r3, #1
 8006b58:	e032      	b.n	8006bc0 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d904      	bls.n	8006b6a <dir_sdi+0x98>
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	695b      	ldr	r3, [r3, #20]
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d301      	bcc.n	8006b6e <dir_sdi+0x9c>
 8006b6a:	2302      	movs	r3, #2
 8006b6c:	e028      	b.n	8006bc0 <dir_sdi+0xee>
			ofs -= csz;
 8006b6e:	683a      	ldr	r2, [r7, #0]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	1ad3      	subs	r3, r2, r3
 8006b74:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006b76:	683a      	ldr	r2, [r7, #0]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d2e1      	bcs.n	8006b42 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006b7e:	6979      	ldr	r1, [r7, #20]
 8006b80:	6938      	ldr	r0, [r7, #16]
 8006b82:	f7ff fcc5 	bl	8006510 <clust2sect>
 8006b86:	4602      	mov	r2, r0
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	697a      	ldr	r2, [r7, #20]
 8006b90:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	69db      	ldr	r3, [r3, #28]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d101      	bne.n	8006b9e <dir_sdi+0xcc>
 8006b9a:	2302      	movs	r3, #2
 8006b9c:	e010      	b.n	8006bc0 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	69da      	ldr	r2, [r3, #28]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	0a5b      	lsrs	r3, r3, #9
 8006ba6:	441a      	add	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bb8:	441a      	add	r2, r3
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3718      	adds	r7, #24
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b086      	sub	sp, #24
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	695b      	ldr	r3, [r3, #20]
 8006bdc:	3320      	adds	r3, #32
 8006bde:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	69db      	ldr	r3, [r3, #28]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d003      	beq.n	8006bf0 <dir_next+0x28>
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006bee:	d301      	bcc.n	8006bf4 <dir_next+0x2c>
 8006bf0:	2304      	movs	r3, #4
 8006bf2:	e0aa      	b.n	8006d4a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f040 8098 	bne.w	8006d30 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	69db      	ldr	r3, [r3, #28]
 8006c04:	1c5a      	adds	r2, r3, #1
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d10b      	bne.n	8006c2a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	095b      	lsrs	r3, r3, #5
 8006c16:	68fa      	ldr	r2, [r7, #12]
 8006c18:	8912      	ldrh	r2, [r2, #8]
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	f0c0 8088 	bcc.w	8006d30 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	61da      	str	r2, [r3, #28]
 8006c26:	2304      	movs	r3, #4
 8006c28:	e08f      	b.n	8006d4a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	0a5b      	lsrs	r3, r3, #9
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	8952      	ldrh	r2, [r2, #10]
 8006c32:	3a01      	subs	r2, #1
 8006c34:	4013      	ands	r3, r2
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d17a      	bne.n	8006d30 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	699b      	ldr	r3, [r3, #24]
 8006c40:	4619      	mov	r1, r3
 8006c42:	4610      	mov	r0, r2
 8006c44:	f7ff fc83 	bl	800654e <get_fat>
 8006c48:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d801      	bhi.n	8006c54 <dir_next+0x8c>
 8006c50:	2302      	movs	r3, #2
 8006c52:	e07a      	b.n	8006d4a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c5a:	d101      	bne.n	8006c60 <dir_next+0x98>
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e074      	b.n	8006d4a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	695b      	ldr	r3, [r3, #20]
 8006c64:	697a      	ldr	r2, [r7, #20]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d358      	bcc.n	8006d1c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d104      	bne.n	8006c7a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	61da      	str	r2, [r3, #28]
 8006c76:	2304      	movs	r3, #4
 8006c78:	e067      	b.n	8006d4a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	699b      	ldr	r3, [r3, #24]
 8006c80:	4619      	mov	r1, r3
 8006c82:	4610      	mov	r0, r2
 8006c84:	f7ff fe59 	bl	800693a <create_chain>
 8006c88:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d101      	bne.n	8006c94 <dir_next+0xcc>
 8006c90:	2307      	movs	r3, #7
 8006c92:	e05a      	b.n	8006d4a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d101      	bne.n	8006c9e <dir_next+0xd6>
 8006c9a:	2302      	movs	r3, #2
 8006c9c:	e055      	b.n	8006d4a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca4:	d101      	bne.n	8006caa <dir_next+0xe2>
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e04f      	b.n	8006d4a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006caa:	68f8      	ldr	r0, [r7, #12]
 8006cac:	f7ff fb50 	bl	8006350 <sync_window>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d001      	beq.n	8006cba <dir_next+0xf2>
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e047      	b.n	8006d4a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	3330      	adds	r3, #48	@ 0x30
 8006cbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006cc2:	2100      	movs	r1, #0
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f7ff f97a 	bl	8005fbe <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006cca:	2300      	movs	r3, #0
 8006ccc:	613b      	str	r3, [r7, #16]
 8006cce:	6979      	ldr	r1, [r7, #20]
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f7ff fc1d 	bl	8006510 <clust2sect>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006cdc:	e012      	b.n	8006d04 <dir_next+0x13c>
						fs->wflag = 1;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f7ff fb33 	bl	8006350 <sync_window>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d001      	beq.n	8006cf4 <dir_next+0x12c>
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e02a      	b.n	8006d4a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	613b      	str	r3, [r7, #16]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cfe:	1c5a      	adds	r2, r3, #1
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	895b      	ldrh	r3, [r3, #10]
 8006d08:	461a      	mov	r2, r3
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d3e6      	bcc.n	8006cde <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	1ad2      	subs	r2, r2, r3
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	697a      	ldr	r2, [r7, #20]
 8006d20:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006d22:	6979      	ldr	r1, [r7, #20]
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f7ff fbf3 	bl	8006510 <clust2sect>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	68ba      	ldr	r2, [r7, #8]
 8006d34:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d42:	441a      	add	r2, r3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3718      	adds	r7, #24
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}

08006d52 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b086      	sub	sp, #24
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
 8006d5a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006d62:	2100      	movs	r1, #0
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f7ff feb4 	bl	8006ad2 <dir_sdi>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006d6e:	7dfb      	ldrb	r3, [r7, #23]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d12b      	bne.n	8006dcc <dir_alloc+0x7a>
		n = 0;
 8006d74:	2300      	movs	r3, #0
 8006d76:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	69db      	ldr	r3, [r3, #28]
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	68f8      	ldr	r0, [r7, #12]
 8006d80:	f7ff fb2a 	bl	80063d8 <move_window>
 8006d84:	4603      	mov	r3, r0
 8006d86:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006d88:	7dfb      	ldrb	r3, [r7, #23]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d11d      	bne.n	8006dca <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	2be5      	cmp	r3, #229	@ 0xe5
 8006d96:	d004      	beq.n	8006da2 <dir_alloc+0x50>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a1b      	ldr	r3, [r3, #32]
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d107      	bne.n	8006db2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	3301      	adds	r3, #1
 8006da6:	613b      	str	r3, [r7, #16]
 8006da8:	693a      	ldr	r2, [r7, #16]
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d102      	bne.n	8006db6 <dir_alloc+0x64>
 8006db0:	e00c      	b.n	8006dcc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006db2:	2300      	movs	r3, #0
 8006db4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006db6:	2101      	movs	r1, #1
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f7ff ff05 	bl	8006bc8 <dir_next>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006dc2:	7dfb      	ldrb	r3, [r7, #23]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d0d7      	beq.n	8006d78 <dir_alloc+0x26>
 8006dc8:	e000      	b.n	8006dcc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006dca:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006dcc:	7dfb      	ldrb	r3, [r7, #23]
 8006dce:	2b04      	cmp	r3, #4
 8006dd0:	d101      	bne.n	8006dd6 <dir_alloc+0x84>
 8006dd2:	2307      	movs	r3, #7
 8006dd4:	75fb      	strb	r3, [r7, #23]
	return res;
 8006dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3718      	adds	r7, #24
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	331a      	adds	r3, #26
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7ff f842 	bl	8005e78 <ld_word>
 8006df4:	4603      	mov	r3, r0
 8006df6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	2b03      	cmp	r3, #3
 8006dfe:	d109      	bne.n	8006e14 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	3314      	adds	r3, #20
 8006e04:	4618      	mov	r0, r3
 8006e06:	f7ff f837 	bl	8005e78 <ld_word>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	041b      	lsls	r3, r3, #16
 8006e0e:	68fa      	ldr	r2, [r7, #12]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006e14:	68fb      	ldr	r3, [r7, #12]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b084      	sub	sp, #16
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	60f8      	str	r0, [r7, #12]
 8006e26:	60b9      	str	r1, [r7, #8]
 8006e28:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	331a      	adds	r3, #26
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	b292      	uxth	r2, r2
 8006e32:	4611      	mov	r1, r2
 8006e34:	4618      	mov	r0, r3
 8006e36:	f7ff f85a 	bl	8005eee <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	2b03      	cmp	r3, #3
 8006e40:	d109      	bne.n	8006e56 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	f103 0214 	add.w	r2, r3, #20
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	0c1b      	lsrs	r3, r3, #16
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	4619      	mov	r1, r3
 8006e50:	4610      	mov	r0, r2
 8006e52:	f7ff f84c 	bl	8005eee <st_word>
	}
}
 8006e56:	bf00      	nop
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b086      	sub	sp, #24
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
 8006e66:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8006e68:	2304      	movs	r3, #4
 8006e6a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8006e72:	e03c      	b.n	8006eee <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	69db      	ldr	r3, [r3, #28]
 8006e78:	4619      	mov	r1, r3
 8006e7a:	6938      	ldr	r0, [r7, #16]
 8006e7c:	f7ff faac 	bl	80063d8 <move_window>
 8006e80:	4603      	mov	r3, r0
 8006e82:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006e84:	7dfb      	ldrb	r3, [r7, #23]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d136      	bne.n	8006ef8 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a1b      	ldr	r3, [r3, #32]
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8006e92:	7bfb      	ldrb	r3, [r7, #15]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d102      	bne.n	8006e9e <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8006e98:	2304      	movs	r3, #4
 8006e9a:	75fb      	strb	r3, [r7, #23]
 8006e9c:	e031      	b.n	8006f02 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a1b      	ldr	r3, [r3, #32]
 8006ea2:	330b      	adds	r3, #11
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006eaa:	73bb      	strb	r3, [r7, #14]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	7bba      	ldrb	r2, [r7, #14]
 8006eb0:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8006eb2:	7bfb      	ldrb	r3, [r7, #15]
 8006eb4:	2be5      	cmp	r3, #229	@ 0xe5
 8006eb6:	d011      	beq.n	8006edc <dir_read+0x7e>
 8006eb8:	7bfb      	ldrb	r3, [r7, #15]
 8006eba:	2b2e      	cmp	r3, #46	@ 0x2e
 8006ebc:	d00e      	beq.n	8006edc <dir_read+0x7e>
 8006ebe:	7bbb      	ldrb	r3, [r7, #14]
 8006ec0:	2b0f      	cmp	r3, #15
 8006ec2:	d00b      	beq.n	8006edc <dir_read+0x7e>
 8006ec4:	7bbb      	ldrb	r3, [r7, #14]
 8006ec6:	f023 0320 	bic.w	r3, r3, #32
 8006eca:	2b08      	cmp	r3, #8
 8006ecc:	bf0c      	ite	eq
 8006ece:	2301      	moveq	r3, #1
 8006ed0:	2300      	movne	r3, #0
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d00f      	beq.n	8006efc <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8006edc:	2100      	movs	r1, #0
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f7ff fe72 	bl	8006bc8 <dir_next>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006ee8:	7dfb      	ldrb	r3, [r7, #23]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d108      	bne.n	8006f00 <dir_read+0xa2>
	while (dp->sect) {
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	69db      	ldr	r3, [r3, #28]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d1be      	bne.n	8006e74 <dir_read+0x16>
 8006ef6:	e004      	b.n	8006f02 <dir_read+0xa4>
		if (res != FR_OK) break;
 8006ef8:	bf00      	nop
 8006efa:	e002      	b.n	8006f02 <dir_read+0xa4>
				break;
 8006efc:	bf00      	nop
 8006efe:	e000      	b.n	8006f02 <dir_read+0xa4>
		if (res != FR_OK) break;
 8006f00:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8006f02:	7dfb      	ldrb	r3, [r7, #23]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d002      	beq.n	8006f0e <dir_read+0xb0>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	61da      	str	r2, [r3, #28]
	return res;
 8006f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3718      	adds	r7, #24
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b086      	sub	sp, #24
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006f26:	2100      	movs	r1, #0
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f7ff fdd2 	bl	8006ad2 <dir_sdi>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006f32:	7dfb      	ldrb	r3, [r7, #23]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d001      	beq.n	8006f3c <dir_find+0x24>
 8006f38:	7dfb      	ldrb	r3, [r7, #23]
 8006f3a:	e03e      	b.n	8006fba <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	69db      	ldr	r3, [r3, #28]
 8006f40:	4619      	mov	r1, r3
 8006f42:	6938      	ldr	r0, [r7, #16]
 8006f44:	f7ff fa48 	bl	80063d8 <move_window>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006f4c:	7dfb      	ldrb	r3, [r7, #23]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d12f      	bne.n	8006fb2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a1b      	ldr	r3, [r3, #32]
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006f5a:	7bfb      	ldrb	r3, [r7, #15]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d102      	bne.n	8006f66 <dir_find+0x4e>
 8006f60:	2304      	movs	r3, #4
 8006f62:	75fb      	strb	r3, [r7, #23]
 8006f64:	e028      	b.n	8006fb8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a1b      	ldr	r3, [r3, #32]
 8006f6a:	330b      	adds	r3, #11
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f72:	b2da      	uxtb	r2, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6a1b      	ldr	r3, [r3, #32]
 8006f7c:	330b      	adds	r3, #11
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	f003 0308 	and.w	r3, r3, #8
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10a      	bne.n	8006f9e <dir_find+0x86>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a18      	ldr	r0, [r3, #32]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	3324      	adds	r3, #36	@ 0x24
 8006f90:	220b      	movs	r2, #11
 8006f92:	4619      	mov	r1, r3
 8006f94:	f7ff f82e 	bl	8005ff4 <mem_cmp>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00b      	beq.n	8006fb6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006f9e:	2100      	movs	r1, #0
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f7ff fe11 	bl	8006bc8 <dir_next>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006faa:	7dfb      	ldrb	r3, [r7, #23]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d0c5      	beq.n	8006f3c <dir_find+0x24>
 8006fb0:	e002      	b.n	8006fb8 <dir_find+0xa0>
		if (res != FR_OK) break;
 8006fb2:	bf00      	nop
 8006fb4:	e000      	b.n	8006fb8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006fb6:	bf00      	nop

	return res;
 8006fb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3718      	adds	r7, #24
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b084      	sub	sp, #16
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006fd0:	2101      	movs	r1, #1
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f7ff febd 	bl	8006d52 <dir_alloc>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006fdc:	7bfb      	ldrb	r3, [r7, #15]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d11c      	bne.n	800701c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	69db      	ldr	r3, [r3, #28]
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	68b8      	ldr	r0, [r7, #8]
 8006fea:	f7ff f9f5 	bl	80063d8 <move_window>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006ff2:	7bfb      	ldrb	r3, [r7, #15]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d111      	bne.n	800701c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a1b      	ldr	r3, [r3, #32]
 8006ffc:	2220      	movs	r2, #32
 8006ffe:	2100      	movs	r1, #0
 8007000:	4618      	mov	r0, r3
 8007002:	f7fe ffdc 	bl	8005fbe <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a18      	ldr	r0, [r3, #32]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	3324      	adds	r3, #36	@ 0x24
 800700e:	220b      	movs	r2, #11
 8007010:	4619      	mov	r1, r3
 8007012:	f7fe ffb3 	bl	8005f7c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	2201      	movs	r2, #1
 800701a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800701c:	7bfb      	ldrb	r3, [r7, #15]
}
 800701e:	4618      	mov	r0, r3
 8007020:	3710      	adds	r7, #16
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8007026:	b580      	push	{r7, lr}
 8007028:	b086      	sub	sp, #24
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
 800702e:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	2200      	movs	r2, #0
 8007034:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	69db      	ldr	r3, [r3, #28]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d04f      	beq.n	80070de <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800703e:	2300      	movs	r3, #0
 8007040:	613b      	str	r3, [r7, #16]
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8007046:	e022      	b.n	800708e <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6a1a      	ldr	r2, [r3, #32]
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	1c59      	adds	r1, r3, #1
 8007050:	6179      	str	r1, [r7, #20]
 8007052:	4413      	add	r3, r2
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8007058:	7bfb      	ldrb	r3, [r7, #15]
 800705a:	2b20      	cmp	r3, #32
 800705c:	d016      	beq.n	800708c <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800705e:	7bfb      	ldrb	r3, [r7, #15]
 8007060:	2b05      	cmp	r3, #5
 8007062:	d101      	bne.n	8007068 <get_fileinfo+0x42>
 8007064:	23e5      	movs	r3, #229	@ 0xe5
 8007066:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	2b09      	cmp	r3, #9
 800706c:	d106      	bne.n	800707c <get_fileinfo+0x56>
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	1c5a      	adds	r2, r3, #1
 8007072:	613a      	str	r2, [r7, #16]
 8007074:	683a      	ldr	r2, [r7, #0]
 8007076:	4413      	add	r3, r2
 8007078:	222e      	movs	r2, #46	@ 0x2e
 800707a:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	1c5a      	adds	r2, r3, #1
 8007080:	613a      	str	r2, [r7, #16]
 8007082:	683a      	ldr	r2, [r7, #0]
 8007084:	4413      	add	r3, r2
 8007086:	7bfa      	ldrb	r2, [r7, #15]
 8007088:	725a      	strb	r2, [r3, #9]
 800708a:	e000      	b.n	800708e <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 800708c:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	2b0a      	cmp	r3, #10
 8007092:	d9d9      	bls.n	8007048 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8007094:	683a      	ldr	r2, [r7, #0]
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	4413      	add	r3, r2
 800709a:	3309      	adds	r3, #9
 800709c:	2200      	movs	r2, #0
 800709e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6a1b      	ldr	r3, [r3, #32]
 80070a4:	7ada      	ldrb	r2, [r3, #11]
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a1b      	ldr	r3, [r3, #32]
 80070ae:	331c      	adds	r3, #28
 80070b0:	4618      	mov	r0, r3
 80070b2:	f7fe fef9 	bl	8005ea8 <ld_dword>
 80070b6:	4602      	mov	r2, r0
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6a1b      	ldr	r3, [r3, #32]
 80070c0:	3316      	adds	r3, #22
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7fe fef0 	bl	8005ea8 <ld_dword>
 80070c8:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	b29a      	uxth	r2, r3
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	80da      	strh	r2, [r3, #6]
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	0c1b      	lsrs	r3, r3, #16
 80070d6:	b29a      	uxth	r2, r3
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	809a      	strh	r2, [r3, #4]
 80070dc:	e000      	b.n	80070e0 <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80070de:	bf00      	nop
}
 80070e0:	3718      	adds	r7, #24
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
	...

080070e8 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b085      	sub	sp, #20
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	1c59      	adds	r1, r3, #1
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	6011      	str	r1, [r2, #0]
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 80070fe:	89fb      	ldrh	r3, [r7, #14]
 8007100:	2b60      	cmp	r3, #96	@ 0x60
 8007102:	d905      	bls.n	8007110 <get_achar+0x28>
 8007104:	89fb      	ldrh	r3, [r7, #14]
 8007106:	2b7a      	cmp	r3, #122	@ 0x7a
 8007108:	d802      	bhi.n	8007110 <get_achar+0x28>
 800710a:	89fb      	ldrh	r3, [r7, #14]
 800710c:	3b20      	subs	r3, #32
 800710e:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8007110:	89fb      	ldrh	r3, [r7, #14]
 8007112:	2b7f      	cmp	r3, #127	@ 0x7f
 8007114:	d904      	bls.n	8007120 <get_achar+0x38>
 8007116:	89fb      	ldrh	r3, [r7, #14]
 8007118:	3b80      	subs	r3, #128	@ 0x80
 800711a:	4a05      	ldr	r2, [pc, #20]	@ (8007130 <get_achar+0x48>)
 800711c:	5cd3      	ldrb	r3, [r2, r3]
 800711e:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 8007120:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 8007122:	4618      	mov	r0, r3
 8007124:	3714      	adds	r7, #20
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr
 800712e:	bf00      	nop
 8007130:	0800a30c 	.word	0x0800a30c

08007134 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b08a      	sub	sp, #40	@ 0x28
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	607a      	str	r2, [r7, #4]
 8007140:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 8007142:	e009      	b.n	8007158 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 8007144:	f107 0308 	add.w	r3, r7, #8
 8007148:	4618      	mov	r0, r3
 800714a:	f7ff ffcd 	bl	80070e8 <get_achar>
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d101      	bne.n	8007158 <pattern_matching+0x24>
 8007154:	2300      	movs	r3, #0
 8007156:	e064      	b.n	8007222 <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	1e5a      	subs	r2, r3, #1
 800715c:	607a      	str	r2, [r7, #4]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1f0      	bne.n	8007144 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d104      	bne.n	8007174 <pattern_matching+0x40>
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d001      	beq.n	8007174 <pattern_matching+0x40>
 8007170:	2301      	movs	r3, #1
 8007172:	e056      	b.n	8007222 <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	617b      	str	r3, [r7, #20]
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	2b3f      	cmp	r3, #63	@ 0x3f
 8007182:	d003      	beq.n	800718c <pattern_matching+0x58>
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	2b2a      	cmp	r3, #42	@ 0x2a
 800718a:	d126      	bne.n	80071da <pattern_matching+0xa6>
				nm = nx = 0;
 800718c:	2300      	movs	r3, #0
 800718e:	61fb      	str	r3, [r7, #28]
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	1c5a      	adds	r2, r3, #1
 8007198:	617a      	str	r2, [r7, #20]
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	2b3f      	cmp	r3, #63	@ 0x3f
 800719e:	d103      	bne.n	80071a8 <pattern_matching+0x74>
 80071a0:	6a3b      	ldr	r3, [r7, #32]
 80071a2:	3301      	adds	r3, #1
 80071a4:	623b      	str	r3, [r7, #32]
 80071a6:	e001      	b.n	80071ac <pattern_matching+0x78>
 80071a8:	2301      	movs	r3, #1
 80071aa:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	2b3f      	cmp	r3, #63	@ 0x3f
 80071b2:	d0ef      	beq.n	8007194 <pattern_matching+0x60>
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80071ba:	d0eb      	beq.n	8007194 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 80071bc:	6978      	ldr	r0, [r7, #20]
 80071be:	6939      	ldr	r1, [r7, #16]
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	6a3a      	ldr	r2, [r7, #32]
 80071c4:	f7ff ffb6 	bl	8007134 <pattern_matching>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d001      	beq.n	80071d2 <pattern_matching+0x9e>
 80071ce:	2301      	movs	r3, #1
 80071d0:	e027      	b.n	8007222 <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80071d8:	e017      	b.n	800720a <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 80071da:	f107 0314 	add.w	r3, r7, #20
 80071de:	4618      	mov	r0, r3
 80071e0:	f7ff ff82 	bl	80070e8 <get_achar>
 80071e4:	4603      	mov	r3, r0
 80071e6:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 80071e8:	f107 0310 	add.w	r3, r7, #16
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7ff ff7b 	bl	80070e8 <get_achar>
 80071f2:	4603      	mov	r3, r0
 80071f4:	84fb      	strh	r3, [r7, #38]	@ 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 80071f6:	8b7a      	ldrh	r2, [r7, #26]
 80071f8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d104      	bne.n	8007208 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 80071fe:	8b7b      	ldrh	r3, [r7, #26]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d1bb      	bne.n	800717c <pattern_matching+0x48>
 8007204:	2301      	movs	r3, #1
 8007206:	e00c      	b.n	8007222 <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 8007208:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 800720a:	f107 0308 	add.w	r3, r7, #8
 800720e:	4618      	mov	r0, r3
 8007210:	f7ff ff6a 	bl	80070e8 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d002      	beq.n	8007220 <pattern_matching+0xec>
 800721a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800721c:	2b00      	cmp	r3, #0
 800721e:	d1a9      	bne.n	8007174 <pattern_matching+0x40>

	return 0;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3728      	adds	r7, #40	@ 0x28
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
	...

0800722c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b088      	sub	sp, #32
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	60fb      	str	r3, [r7, #12]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	3324      	adds	r3, #36	@ 0x24
 8007240:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007242:	220b      	movs	r2, #11
 8007244:	2120      	movs	r1, #32
 8007246:	68b8      	ldr	r0, [r7, #8]
 8007248:	f7fe feb9 	bl	8005fbe <mem_set>
	si = i = 0; ni = 8;
 800724c:	2300      	movs	r3, #0
 800724e:	613b      	str	r3, [r7, #16]
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	61fb      	str	r3, [r7, #28]
 8007254:	2308      	movs	r3, #8
 8007256:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	1c5a      	adds	r2, r3, #1
 800725c:	61fa      	str	r2, [r7, #28]
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	4413      	add	r3, r2
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007266:	7efb      	ldrb	r3, [r7, #27]
 8007268:	2b20      	cmp	r3, #32
 800726a:	d94e      	bls.n	800730a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800726c:	7efb      	ldrb	r3, [r7, #27]
 800726e:	2b2f      	cmp	r3, #47	@ 0x2f
 8007270:	d006      	beq.n	8007280 <create_name+0x54>
 8007272:	7efb      	ldrb	r3, [r7, #27]
 8007274:	2b5c      	cmp	r3, #92	@ 0x5c
 8007276:	d110      	bne.n	800729a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007278:	e002      	b.n	8007280 <create_name+0x54>
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	3301      	adds	r3, #1
 800727e:	61fb      	str	r3, [r7, #28]
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	4413      	add	r3, r2
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	2b2f      	cmp	r3, #47	@ 0x2f
 800728a:	d0f6      	beq.n	800727a <create_name+0x4e>
 800728c:	68fa      	ldr	r2, [r7, #12]
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	4413      	add	r3, r2
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	2b5c      	cmp	r3, #92	@ 0x5c
 8007296:	d0f0      	beq.n	800727a <create_name+0x4e>
			break;
 8007298:	e038      	b.n	800730c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800729a:	7efb      	ldrb	r3, [r7, #27]
 800729c:	2b2e      	cmp	r3, #46	@ 0x2e
 800729e:	d003      	beq.n	80072a8 <create_name+0x7c>
 80072a0:	693a      	ldr	r2, [r7, #16]
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d30c      	bcc.n	80072c2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	2b0b      	cmp	r3, #11
 80072ac:	d002      	beq.n	80072b4 <create_name+0x88>
 80072ae:	7efb      	ldrb	r3, [r7, #27]
 80072b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80072b2:	d001      	beq.n	80072b8 <create_name+0x8c>
 80072b4:	2306      	movs	r3, #6
 80072b6:	e044      	b.n	8007342 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80072b8:	2308      	movs	r3, #8
 80072ba:	613b      	str	r3, [r7, #16]
 80072bc:	230b      	movs	r3, #11
 80072be:	617b      	str	r3, [r7, #20]
			continue;
 80072c0:	e022      	b.n	8007308 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80072c2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	da04      	bge.n	80072d4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80072ca:	7efb      	ldrb	r3, [r7, #27]
 80072cc:	3b80      	subs	r3, #128	@ 0x80
 80072ce:	4a1f      	ldr	r2, [pc, #124]	@ (800734c <create_name+0x120>)
 80072d0:	5cd3      	ldrb	r3, [r2, r3]
 80072d2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80072d4:	7efb      	ldrb	r3, [r7, #27]
 80072d6:	4619      	mov	r1, r3
 80072d8:	481d      	ldr	r0, [pc, #116]	@ (8007350 <create_name+0x124>)
 80072da:	f7fe feb2 	bl	8006042 <chk_chr>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d001      	beq.n	80072e8 <create_name+0xbc>
 80072e4:	2306      	movs	r3, #6
 80072e6:	e02c      	b.n	8007342 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80072e8:	7efb      	ldrb	r3, [r7, #27]
 80072ea:	2b60      	cmp	r3, #96	@ 0x60
 80072ec:	d905      	bls.n	80072fa <create_name+0xce>
 80072ee:	7efb      	ldrb	r3, [r7, #27]
 80072f0:	2b7a      	cmp	r3, #122	@ 0x7a
 80072f2:	d802      	bhi.n	80072fa <create_name+0xce>
 80072f4:	7efb      	ldrb	r3, [r7, #27]
 80072f6:	3b20      	subs	r3, #32
 80072f8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	1c5a      	adds	r2, r3, #1
 80072fe:	613a      	str	r2, [r7, #16]
 8007300:	68ba      	ldr	r2, [r7, #8]
 8007302:	4413      	add	r3, r2
 8007304:	7efa      	ldrb	r2, [r7, #27]
 8007306:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007308:	e7a6      	b.n	8007258 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800730a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800730c:	68fa      	ldr	r2, [r7, #12]
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	441a      	add	r2, r3
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d101      	bne.n	8007320 <create_name+0xf4>
 800731c:	2306      	movs	r3, #6
 800731e:	e010      	b.n	8007342 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	2be5      	cmp	r3, #229	@ 0xe5
 8007326:	d102      	bne.n	800732e <create_name+0x102>
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	2205      	movs	r2, #5
 800732c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800732e:	7efb      	ldrb	r3, [r7, #27]
 8007330:	2b20      	cmp	r3, #32
 8007332:	d801      	bhi.n	8007338 <create_name+0x10c>
 8007334:	2204      	movs	r2, #4
 8007336:	e000      	b.n	800733a <create_name+0x10e>
 8007338:	2200      	movs	r2, #0
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	330b      	adds	r3, #11
 800733e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007340:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007342:	4618      	mov	r0, r3
 8007344:	3720      	adds	r7, #32
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	0800a30c 	.word	0x0800a30c
 8007350:	0800a298 	.word	0x0800a298

08007354 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b086      	sub	sp, #24
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007368:	e002      	b.n	8007370 <follow_path+0x1c>
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	3301      	adds	r3, #1
 800736e:	603b      	str	r3, [r7, #0]
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	2b2f      	cmp	r3, #47	@ 0x2f
 8007376:	d0f8      	beq.n	800736a <follow_path+0x16>
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	2b5c      	cmp	r3, #92	@ 0x5c
 800737e:	d0f4      	beq.n	800736a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	2200      	movs	r2, #0
 8007384:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	2b1f      	cmp	r3, #31
 800738c:	d80a      	bhi.n	80073a4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2280      	movs	r2, #128	@ 0x80
 8007392:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8007396:	2100      	movs	r1, #0
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f7ff fb9a 	bl	8006ad2 <dir_sdi>
 800739e:	4603      	mov	r3, r0
 80073a0:	75fb      	strb	r3, [r7, #23]
 80073a2:	e043      	b.n	800742c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80073a4:	463b      	mov	r3, r7
 80073a6:	4619      	mov	r1, r3
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f7ff ff3f 	bl	800722c <create_name>
 80073ae:	4603      	mov	r3, r0
 80073b0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80073b2:	7dfb      	ldrb	r3, [r7, #23]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d134      	bne.n	8007422 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f7ff fdad 	bl	8006f18 <dir_find>
 80073be:	4603      	mov	r3, r0
 80073c0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80073c8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80073ca:	7dfb      	ldrb	r3, [r7, #23]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00a      	beq.n	80073e6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80073d0:	7dfb      	ldrb	r3, [r7, #23]
 80073d2:	2b04      	cmp	r3, #4
 80073d4:	d127      	bne.n	8007426 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80073d6:	7afb      	ldrb	r3, [r7, #11]
 80073d8:	f003 0304 	and.w	r3, r3, #4
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d122      	bne.n	8007426 <follow_path+0xd2>
 80073e0:	2305      	movs	r3, #5
 80073e2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80073e4:	e01f      	b.n	8007426 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80073e6:	7afb      	ldrb	r3, [r7, #11]
 80073e8:	f003 0304 	and.w	r3, r3, #4
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d11c      	bne.n	800742a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	799b      	ldrb	r3, [r3, #6]
 80073f4:	f003 0310 	and.w	r3, r3, #16
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d102      	bne.n	8007402 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80073fc:	2305      	movs	r3, #5
 80073fe:	75fb      	strb	r3, [r7, #23]
 8007400:	e014      	b.n	800742c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	695b      	ldr	r3, [r3, #20]
 800740c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007410:	4413      	add	r3, r2
 8007412:	4619      	mov	r1, r3
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	f7ff fce3 	bl	8006de0 <ld_clust>
 800741a:	4602      	mov	r2, r0
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007420:	e7c0      	b.n	80073a4 <follow_path+0x50>
			if (res != FR_OK) break;
 8007422:	bf00      	nop
 8007424:	e002      	b.n	800742c <follow_path+0xd8>
				break;
 8007426:	bf00      	nop
 8007428:	e000      	b.n	800742c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800742a:	bf00      	nop
			}
		}
	}

	return res;
 800742c:	7dfb      	ldrb	r3, [r7, #23]
}
 800742e:	4618      	mov	r0, r3
 8007430:	3718      	adds	r7, #24
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007436:	b480      	push	{r7}
 8007438:	b087      	sub	sp, #28
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800743e:	f04f 33ff 	mov.w	r3, #4294967295
 8007442:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d031      	beq.n	80074b0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	617b      	str	r3, [r7, #20]
 8007452:	e002      	b.n	800745a <get_ldnumber+0x24>
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	3301      	adds	r3, #1
 8007458:	617b      	str	r3, [r7, #20]
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	2b20      	cmp	r3, #32
 8007460:	d903      	bls.n	800746a <get_ldnumber+0x34>
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	2b3a      	cmp	r3, #58	@ 0x3a
 8007468:	d1f4      	bne.n	8007454 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	2b3a      	cmp	r3, #58	@ 0x3a
 8007470:	d11c      	bne.n	80074ac <get_ldnumber+0x76>
			tp = *path;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	1c5a      	adds	r2, r3, #1
 800747c:	60fa      	str	r2, [r7, #12]
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	3b30      	subs	r3, #48	@ 0x30
 8007482:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	2b09      	cmp	r3, #9
 8007488:	d80e      	bhi.n	80074a8 <get_ldnumber+0x72>
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	429a      	cmp	r2, r3
 8007490:	d10a      	bne.n	80074a8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	2b01      	cmp	r3, #1
 8007496:	d807      	bhi.n	80074a8 <get_ldnumber+0x72>
					vol = (int)i;
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	3301      	adds	r3, #1
 80074a0:	617b      	str	r3, [r7, #20]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	697a      	ldr	r2, [r7, #20]
 80074a6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	e002      	b.n	80074b2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80074ac:	2300      	movs	r3, #0
 80074ae:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80074b0:	693b      	ldr	r3, [r7, #16]
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	371c      	adds	r7, #28
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr
	...

080074c0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	70da      	strb	r2, [r3, #3]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f04f 32ff 	mov.w	r2, #4294967295
 80074d6:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80074d8:	6839      	ldr	r1, [r7, #0]
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f7fe ff7c 	bl	80063d8 <move_window>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d001      	beq.n	80074ea <check_fs+0x2a>
 80074e6:	2304      	movs	r3, #4
 80074e8:	e038      	b.n	800755c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	3330      	adds	r3, #48	@ 0x30
 80074ee:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7fe fcc0 	bl	8005e78 <ld_word>
 80074f8:	4603      	mov	r3, r0
 80074fa:	461a      	mov	r2, r3
 80074fc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007500:	429a      	cmp	r2, r3
 8007502:	d001      	beq.n	8007508 <check_fs+0x48>
 8007504:	2303      	movs	r3, #3
 8007506:	e029      	b.n	800755c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800750e:	2be9      	cmp	r3, #233	@ 0xe9
 8007510:	d009      	beq.n	8007526 <check_fs+0x66>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007518:	2beb      	cmp	r3, #235	@ 0xeb
 800751a:	d11e      	bne.n	800755a <check_fs+0x9a>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007522:	2b90      	cmp	r3, #144	@ 0x90
 8007524:	d119      	bne.n	800755a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	3330      	adds	r3, #48	@ 0x30
 800752a:	3336      	adds	r3, #54	@ 0x36
 800752c:	4618      	mov	r0, r3
 800752e:	f7fe fcbb 	bl	8005ea8 <ld_dword>
 8007532:	4603      	mov	r3, r0
 8007534:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007538:	4a0a      	ldr	r2, [pc, #40]	@ (8007564 <check_fs+0xa4>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d101      	bne.n	8007542 <check_fs+0x82>
 800753e:	2300      	movs	r3, #0
 8007540:	e00c      	b.n	800755c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	3330      	adds	r3, #48	@ 0x30
 8007546:	3352      	adds	r3, #82	@ 0x52
 8007548:	4618      	mov	r0, r3
 800754a:	f7fe fcad 	bl	8005ea8 <ld_dword>
 800754e:	4603      	mov	r3, r0
 8007550:	4a05      	ldr	r2, [pc, #20]	@ (8007568 <check_fs+0xa8>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d101      	bne.n	800755a <check_fs+0x9a>
 8007556:	2300      	movs	r3, #0
 8007558:	e000      	b.n	800755c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800755a:	2302      	movs	r3, #2
}
 800755c:	4618      	mov	r0, r3
 800755e:	3708      	adds	r7, #8
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}
 8007564:	00544146 	.word	0x00544146
 8007568:	33544146 	.word	0x33544146

0800756c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b096      	sub	sp, #88	@ 0x58
 8007570:	af00      	add	r7, sp, #0
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	4613      	mov	r3, r2
 8007578:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	2200      	movs	r2, #0
 800757e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f7ff ff58 	bl	8007436 <get_ldnumber>
 8007586:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007588:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800758a:	2b00      	cmp	r3, #0
 800758c:	da01      	bge.n	8007592 <find_volume+0x26>
 800758e:	230b      	movs	r3, #11
 8007590:	e22d      	b.n	80079ee <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007592:	4aa1      	ldr	r2, [pc, #644]	@ (8007818 <find_volume+0x2ac>)
 8007594:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800759a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800759c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d101      	bne.n	80075a6 <find_volume+0x3a>
 80075a2:	230c      	movs	r3, #12
 80075a4:	e223      	b.n	80079ee <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80075aa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80075ac:	79fb      	ldrb	r3, [r7, #7]
 80075ae:	f023 0301 	bic.w	r3, r3, #1
 80075b2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80075b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d01a      	beq.n	80075f2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80075bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075be:	785b      	ldrb	r3, [r3, #1]
 80075c0:	4618      	mov	r0, r3
 80075c2:	f7fe fbb3 	bl	8005d2c <disk_status>
 80075c6:	4603      	mov	r3, r0
 80075c8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80075cc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80075d0:	f003 0301 	and.w	r3, r3, #1
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d10c      	bne.n	80075f2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80075d8:	79fb      	ldrb	r3, [r7, #7]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d007      	beq.n	80075ee <find_volume+0x82>
 80075de:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80075e2:	f003 0304 	and.w	r3, r3, #4
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d001      	beq.n	80075ee <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80075ea:	230a      	movs	r3, #10
 80075ec:	e1ff      	b.n	80079ee <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80075ee:	2300      	movs	r3, #0
 80075f0:	e1fd      	b.n	80079ee <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80075f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075f4:	2200      	movs	r2, #0
 80075f6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80075f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075fa:	b2da      	uxtb	r2, r3
 80075fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075fe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007602:	785b      	ldrb	r3, [r3, #1]
 8007604:	4618      	mov	r0, r3
 8007606:	f7fe fbab 	bl	8005d60 <disk_initialize>
 800760a:	4603      	mov	r3, r0
 800760c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007610:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007614:	f003 0301 	and.w	r3, r3, #1
 8007618:	2b00      	cmp	r3, #0
 800761a:	d001      	beq.n	8007620 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800761c:	2303      	movs	r3, #3
 800761e:	e1e6      	b.n	80079ee <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007620:	79fb      	ldrb	r3, [r7, #7]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d007      	beq.n	8007636 <find_volume+0xca>
 8007626:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800762a:	f003 0304 	and.w	r3, r3, #4
 800762e:	2b00      	cmp	r3, #0
 8007630:	d001      	beq.n	8007636 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007632:	230a      	movs	r3, #10
 8007634:	e1db      	b.n	80079ee <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007636:	2300      	movs	r3, #0
 8007638:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800763a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800763c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800763e:	f7ff ff3f 	bl	80074c0 <check_fs>
 8007642:	4603      	mov	r3, r0
 8007644:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007648:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800764c:	2b02      	cmp	r3, #2
 800764e:	d149      	bne.n	80076e4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007650:	2300      	movs	r3, #0
 8007652:	643b      	str	r3, [r7, #64]	@ 0x40
 8007654:	e01e      	b.n	8007694 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007658:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800765c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800765e:	011b      	lsls	r3, r3, #4
 8007660:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8007664:	4413      	add	r3, r2
 8007666:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800766a:	3304      	adds	r3, #4
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d006      	beq.n	8007680 <find_volume+0x114>
 8007672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007674:	3308      	adds	r3, #8
 8007676:	4618      	mov	r0, r3
 8007678:	f7fe fc16 	bl	8005ea8 <ld_dword>
 800767c:	4602      	mov	r2, r0
 800767e:	e000      	b.n	8007682 <find_volume+0x116>
 8007680:	2200      	movs	r2, #0
 8007682:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	3358      	adds	r3, #88	@ 0x58
 8007688:	443b      	add	r3, r7
 800768a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800768e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007690:	3301      	adds	r3, #1
 8007692:	643b      	str	r3, [r7, #64]	@ 0x40
 8007694:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007696:	2b03      	cmp	r3, #3
 8007698:	d9dd      	bls.n	8007656 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800769a:	2300      	movs	r3, #0
 800769c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800769e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d002      	beq.n	80076aa <find_volume+0x13e>
 80076a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076a6:	3b01      	subs	r3, #1
 80076a8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80076aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	3358      	adds	r3, #88	@ 0x58
 80076b0:	443b      	add	r3, r7
 80076b2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80076b6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80076b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d005      	beq.n	80076ca <find_volume+0x15e>
 80076be:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80076c0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80076c2:	f7ff fefd 	bl	80074c0 <check_fs>
 80076c6:	4603      	mov	r3, r0
 80076c8:	e000      	b.n	80076cc <find_volume+0x160>
 80076ca:	2303      	movs	r3, #3
 80076cc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80076d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d905      	bls.n	80076e4 <find_volume+0x178>
 80076d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076da:	3301      	adds	r3, #1
 80076dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80076de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076e0:	2b03      	cmp	r3, #3
 80076e2:	d9e2      	bls.n	80076aa <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80076e4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80076e8:	2b04      	cmp	r3, #4
 80076ea:	d101      	bne.n	80076f0 <find_volume+0x184>
 80076ec:	2301      	movs	r3, #1
 80076ee:	e17e      	b.n	80079ee <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80076f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d901      	bls.n	80076fc <find_volume+0x190>
 80076f8:	230d      	movs	r3, #13
 80076fa:	e178      	b.n	80079ee <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80076fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076fe:	3330      	adds	r3, #48	@ 0x30
 8007700:	330b      	adds	r3, #11
 8007702:	4618      	mov	r0, r3
 8007704:	f7fe fbb8 	bl	8005e78 <ld_word>
 8007708:	4603      	mov	r3, r0
 800770a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800770e:	d001      	beq.n	8007714 <find_volume+0x1a8>
 8007710:	230d      	movs	r3, #13
 8007712:	e16c      	b.n	80079ee <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007716:	3330      	adds	r3, #48	@ 0x30
 8007718:	3316      	adds	r3, #22
 800771a:	4618      	mov	r0, r3
 800771c:	f7fe fbac 	bl	8005e78 <ld_word>
 8007720:	4603      	mov	r3, r0
 8007722:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007724:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007726:	2b00      	cmp	r3, #0
 8007728:	d106      	bne.n	8007738 <find_volume+0x1cc>
 800772a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800772c:	3330      	adds	r3, #48	@ 0x30
 800772e:	3324      	adds	r3, #36	@ 0x24
 8007730:	4618      	mov	r0, r3
 8007732:	f7fe fbb9 	bl	8005ea8 <ld_dword>
 8007736:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8007738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800773a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800773c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800773e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007740:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8007744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007746:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800774a:	789b      	ldrb	r3, [r3, #2]
 800774c:	2b01      	cmp	r3, #1
 800774e:	d005      	beq.n	800775c <find_volume+0x1f0>
 8007750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007752:	789b      	ldrb	r3, [r3, #2]
 8007754:	2b02      	cmp	r3, #2
 8007756:	d001      	beq.n	800775c <find_volume+0x1f0>
 8007758:	230d      	movs	r3, #13
 800775a:	e148      	b.n	80079ee <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800775c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800775e:	789b      	ldrb	r3, [r3, #2]
 8007760:	461a      	mov	r2, r3
 8007762:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007764:	fb02 f303 	mul.w	r3, r2, r3
 8007768:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800776a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800776c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007770:	461a      	mov	r2, r3
 8007772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007774:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007778:	895b      	ldrh	r3, [r3, #10]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d008      	beq.n	8007790 <find_volume+0x224>
 800777e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007780:	895b      	ldrh	r3, [r3, #10]
 8007782:	461a      	mov	r2, r3
 8007784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007786:	895b      	ldrh	r3, [r3, #10]
 8007788:	3b01      	subs	r3, #1
 800778a:	4013      	ands	r3, r2
 800778c:	2b00      	cmp	r3, #0
 800778e:	d001      	beq.n	8007794 <find_volume+0x228>
 8007790:	230d      	movs	r3, #13
 8007792:	e12c      	b.n	80079ee <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007796:	3330      	adds	r3, #48	@ 0x30
 8007798:	3311      	adds	r3, #17
 800779a:	4618      	mov	r0, r3
 800779c:	f7fe fb6c 	bl	8005e78 <ld_word>
 80077a0:	4603      	mov	r3, r0
 80077a2:	461a      	mov	r2, r3
 80077a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80077a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077aa:	891b      	ldrh	r3, [r3, #8]
 80077ac:	f003 030f 	and.w	r3, r3, #15
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d001      	beq.n	80077ba <find_volume+0x24e>
 80077b6:	230d      	movs	r3, #13
 80077b8:	e119      	b.n	80079ee <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80077ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077bc:	3330      	adds	r3, #48	@ 0x30
 80077be:	3313      	adds	r3, #19
 80077c0:	4618      	mov	r0, r3
 80077c2:	f7fe fb59 	bl	8005e78 <ld_word>
 80077c6:	4603      	mov	r3, r0
 80077c8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80077ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d106      	bne.n	80077de <find_volume+0x272>
 80077d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077d2:	3330      	adds	r3, #48	@ 0x30
 80077d4:	3320      	adds	r3, #32
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7fe fb66 	bl	8005ea8 <ld_dword>
 80077dc:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80077de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077e0:	3330      	adds	r3, #48	@ 0x30
 80077e2:	330e      	adds	r3, #14
 80077e4:	4618      	mov	r0, r3
 80077e6:	f7fe fb47 	bl	8005e78 <ld_word>
 80077ea:	4603      	mov	r3, r0
 80077ec:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80077ee:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d101      	bne.n	80077f8 <find_volume+0x28c>
 80077f4:	230d      	movs	r3, #13
 80077f6:	e0fa      	b.n	80079ee <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80077f8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80077fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077fc:	4413      	add	r3, r2
 80077fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007800:	8912      	ldrh	r2, [r2, #8]
 8007802:	0912      	lsrs	r2, r2, #4
 8007804:	b292      	uxth	r2, r2
 8007806:	4413      	add	r3, r2
 8007808:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800780a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800780c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800780e:	429a      	cmp	r2, r3
 8007810:	d204      	bcs.n	800781c <find_volume+0x2b0>
 8007812:	230d      	movs	r3, #13
 8007814:	e0eb      	b.n	80079ee <find_volume+0x482>
 8007816:	bf00      	nop
 8007818:	20000824 	.word	0x20000824
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800781c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800781e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007824:	8952      	ldrh	r2, [r2, #10]
 8007826:	fbb3 f3f2 	udiv	r3, r3, r2
 800782a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800782c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800782e:	2b00      	cmp	r3, #0
 8007830:	d101      	bne.n	8007836 <find_volume+0x2ca>
 8007832:	230d      	movs	r3, #13
 8007834:	e0db      	b.n	80079ee <find_volume+0x482>
		fmt = FS_FAT32;
 8007836:	2303      	movs	r3, #3
 8007838:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800783c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800783e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8007842:	4293      	cmp	r3, r2
 8007844:	d802      	bhi.n	800784c <find_volume+0x2e0>
 8007846:	2302      	movs	r3, #2
 8007848:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800784c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800784e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8007852:	4293      	cmp	r3, r2
 8007854:	d802      	bhi.n	800785c <find_volume+0x2f0>
 8007856:	2301      	movs	r3, #1
 8007858:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800785c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800785e:	1c9a      	adds	r2, r3, #2
 8007860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007862:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8007864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007866:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007868:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800786a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800786c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800786e:	441a      	add	r2, r3
 8007870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007872:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8007874:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007878:	441a      	add	r2, r3
 800787a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800787c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800787e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007882:	2b03      	cmp	r3, #3
 8007884:	d11e      	bne.n	80078c4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007888:	3330      	adds	r3, #48	@ 0x30
 800788a:	332a      	adds	r3, #42	@ 0x2a
 800788c:	4618      	mov	r0, r3
 800788e:	f7fe faf3 	bl	8005e78 <ld_word>
 8007892:	4603      	mov	r3, r0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d001      	beq.n	800789c <find_volume+0x330>
 8007898:	230d      	movs	r3, #13
 800789a:	e0a8      	b.n	80079ee <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800789c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800789e:	891b      	ldrh	r3, [r3, #8]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d001      	beq.n	80078a8 <find_volume+0x33c>
 80078a4:	230d      	movs	r3, #13
 80078a6:	e0a2      	b.n	80079ee <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80078a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078aa:	3330      	adds	r3, #48	@ 0x30
 80078ac:	332c      	adds	r3, #44	@ 0x2c
 80078ae:	4618      	mov	r0, r3
 80078b0:	f7fe fafa 	bl	8005ea8 <ld_dword>
 80078b4:	4602      	mov	r2, r0
 80078b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078b8:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80078ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078bc:	695b      	ldr	r3, [r3, #20]
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80078c2:	e01f      	b.n	8007904 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80078c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078c6:	891b      	ldrh	r3, [r3, #8]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d101      	bne.n	80078d0 <find_volume+0x364>
 80078cc:	230d      	movs	r3, #13
 80078ce:	e08e      	b.n	80079ee <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80078d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078d2:	6a1a      	ldr	r2, [r3, #32]
 80078d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078d6:	441a      	add	r2, r3
 80078d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078da:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80078dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80078e0:	2b02      	cmp	r3, #2
 80078e2:	d103      	bne.n	80078ec <find_volume+0x380>
 80078e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078e6:	695b      	ldr	r3, [r3, #20]
 80078e8:	005b      	lsls	r3, r3, #1
 80078ea:	e00a      	b.n	8007902 <find_volume+0x396>
 80078ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ee:	695a      	ldr	r2, [r3, #20]
 80078f0:	4613      	mov	r3, r2
 80078f2:	005b      	lsls	r3, r3, #1
 80078f4:	4413      	add	r3, r2
 80078f6:	085a      	lsrs	r2, r3, #1
 80078f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078fa:	695b      	ldr	r3, [r3, #20]
 80078fc:	f003 0301 	and.w	r3, r3, #1
 8007900:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007902:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007906:	699a      	ldr	r2, [r3, #24]
 8007908:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800790a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800790e:	0a5b      	lsrs	r3, r3, #9
 8007910:	429a      	cmp	r2, r3
 8007912:	d201      	bcs.n	8007918 <find_volume+0x3ac>
 8007914:	230d      	movs	r3, #13
 8007916:	e06a      	b.n	80079ee <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800791a:	f04f 32ff 	mov.w	r2, #4294967295
 800791e:	611a      	str	r2, [r3, #16]
 8007920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007922:	691a      	ldr	r2, [r3, #16]
 8007924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007926:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800792a:	2280      	movs	r2, #128	@ 0x80
 800792c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800792e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007932:	2b03      	cmp	r3, #3
 8007934:	d149      	bne.n	80079ca <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007938:	3330      	adds	r3, #48	@ 0x30
 800793a:	3330      	adds	r3, #48	@ 0x30
 800793c:	4618      	mov	r0, r3
 800793e:	f7fe fa9b 	bl	8005e78 <ld_word>
 8007942:	4603      	mov	r3, r0
 8007944:	2b01      	cmp	r3, #1
 8007946:	d140      	bne.n	80079ca <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007948:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800794a:	3301      	adds	r3, #1
 800794c:	4619      	mov	r1, r3
 800794e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007950:	f7fe fd42 	bl	80063d8 <move_window>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d137      	bne.n	80079ca <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800795a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800795c:	2200      	movs	r2, #0
 800795e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007962:	3330      	adds	r3, #48	@ 0x30
 8007964:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007968:	4618      	mov	r0, r3
 800796a:	f7fe fa85 	bl	8005e78 <ld_word>
 800796e:	4603      	mov	r3, r0
 8007970:	461a      	mov	r2, r3
 8007972:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007976:	429a      	cmp	r2, r3
 8007978:	d127      	bne.n	80079ca <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800797a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800797c:	3330      	adds	r3, #48	@ 0x30
 800797e:	4618      	mov	r0, r3
 8007980:	f7fe fa92 	bl	8005ea8 <ld_dword>
 8007984:	4603      	mov	r3, r0
 8007986:	4a1c      	ldr	r2, [pc, #112]	@ (80079f8 <find_volume+0x48c>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d11e      	bne.n	80079ca <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800798c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800798e:	3330      	adds	r3, #48	@ 0x30
 8007990:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007994:	4618      	mov	r0, r3
 8007996:	f7fe fa87 	bl	8005ea8 <ld_dword>
 800799a:	4603      	mov	r3, r0
 800799c:	4a17      	ldr	r2, [pc, #92]	@ (80079fc <find_volume+0x490>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d113      	bne.n	80079ca <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80079a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a4:	3330      	adds	r3, #48	@ 0x30
 80079a6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80079aa:	4618      	mov	r0, r3
 80079ac:	f7fe fa7c 	bl	8005ea8 <ld_dword>
 80079b0:	4602      	mov	r2, r0
 80079b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079b4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80079b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079b8:	3330      	adds	r3, #48	@ 0x30
 80079ba:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80079be:	4618      	mov	r0, r3
 80079c0:	f7fe fa72 	bl	8005ea8 <ld_dword>
 80079c4:	4602      	mov	r2, r0
 80079c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079c8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80079ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079cc:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80079d0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80079d2:	4b0b      	ldr	r3, [pc, #44]	@ (8007a00 <find_volume+0x494>)
 80079d4:	881b      	ldrh	r3, [r3, #0]
 80079d6:	3301      	adds	r3, #1
 80079d8:	b29a      	uxth	r2, r3
 80079da:	4b09      	ldr	r3, [pc, #36]	@ (8007a00 <find_volume+0x494>)
 80079dc:	801a      	strh	r2, [r3, #0]
 80079de:	4b08      	ldr	r3, [pc, #32]	@ (8007a00 <find_volume+0x494>)
 80079e0:	881a      	ldrh	r2, [r3, #0]
 80079e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079e4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80079e6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80079e8:	f7fe fc8e 	bl	8006308 <clear_lock>
#endif
	return FR_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3758      	adds	r7, #88	@ 0x58
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	41615252 	.word	0x41615252
 80079fc:	61417272 	.word	0x61417272
 8007a00:	2000082c 	.word	0x2000082c

08007a04 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007a0e:	2309      	movs	r3, #9
 8007a10:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d01c      	beq.n	8007a52 <validate+0x4e>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d018      	beq.n	8007a52 <validate+0x4e>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d013      	beq.n	8007a52 <validate+0x4e>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	889a      	ldrh	r2, [r3, #4]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	88db      	ldrh	r3, [r3, #6]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d10c      	bne.n	8007a52 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	785b      	ldrb	r3, [r3, #1]
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7fe f974 	bl	8005d2c <disk_status>
 8007a44:	4603      	mov	r3, r0
 8007a46:	f003 0301 	and.w	r3, r3, #1
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d101      	bne.n	8007a52 <validate+0x4e>
			res = FR_OK;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007a52:	7bfb      	ldrb	r3, [r7, #15]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d102      	bne.n	8007a5e <validate+0x5a>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	e000      	b.n	8007a60 <validate+0x5c>
 8007a5e:	2300      	movs	r3, #0
 8007a60:	683a      	ldr	r2, [r7, #0]
 8007a62:	6013      	str	r3, [r2, #0]
	return res;
 8007a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3710      	adds	r7, #16
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
	...

08007a70 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b088      	sub	sp, #32
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007a82:	f107 0310 	add.w	r3, r7, #16
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7ff fcd5 	bl	8007436 <get_ldnumber>
 8007a8c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	da01      	bge.n	8007a98 <f_mount+0x28>
 8007a94:	230b      	movs	r3, #11
 8007a96:	e02b      	b.n	8007af0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007a98:	4a17      	ldr	r2, [pc, #92]	@ (8007af8 <f_mount+0x88>)
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007aa0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d005      	beq.n	8007ab4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007aa8:	69b8      	ldr	r0, [r7, #24]
 8007aaa:	f7fe fc2d 	bl	8006308 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d002      	beq.n	8007ac0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2200      	movs	r2, #0
 8007abe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007ac0:	68fa      	ldr	r2, [r7, #12]
 8007ac2:	490d      	ldr	r1, [pc, #52]	@ (8007af8 <f_mount+0x88>)
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d002      	beq.n	8007ad6 <f_mount+0x66>
 8007ad0:	79fb      	ldrb	r3, [r7, #7]
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d001      	beq.n	8007ada <f_mount+0x6a>
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	e00a      	b.n	8007af0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007ada:	f107 010c 	add.w	r1, r7, #12
 8007ade:	f107 0308 	add.w	r3, r7, #8
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7ff fd41 	bl	800756c <find_volume>
 8007aea:	4603      	mov	r3, r0
 8007aec:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3720      	adds	r7, #32
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	20000824 	.word	0x20000824

08007afc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b09a      	sub	sp, #104	@ 0x68
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	4613      	mov	r3, r2
 8007b08:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d101      	bne.n	8007b14 <f_open+0x18>
 8007b10:	2309      	movs	r3, #9
 8007b12:	e1a9      	b.n	8007e68 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007b14:	79fb      	ldrb	r3, [r7, #7]
 8007b16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b1a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007b1c:	79fa      	ldrb	r2, [r7, #7]
 8007b1e:	f107 0114 	add.w	r1, r7, #20
 8007b22:	f107 0308 	add.w	r3, r7, #8
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7ff fd20 	bl	800756c <find_volume>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8007b32:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f040 818d 	bne.w	8007e56 <f_open+0x35a>
		dj.obj.fs = fs;
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007b40:	68ba      	ldr	r2, [r7, #8]
 8007b42:	f107 0318 	add.w	r3, r7, #24
 8007b46:	4611      	mov	r1, r2
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7ff fc03 	bl	8007354 <follow_path>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007b54:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d118      	bne.n	8007b8e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007b5c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007b60:	b25b      	sxtb	r3, r3
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	da03      	bge.n	8007b6e <f_open+0x72>
				res = FR_INVALID_NAME;
 8007b66:	2306      	movs	r3, #6
 8007b68:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007b6c:	e00f      	b.n	8007b8e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007b6e:	79fb      	ldrb	r3, [r7, #7]
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	bf8c      	ite	hi
 8007b74:	2301      	movhi	r3, #1
 8007b76:	2300      	movls	r3, #0
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	f107 0318 	add.w	r3, r7, #24
 8007b80:	4611      	mov	r1, r2
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7fe fa78 	bl	8006078 <chk_lock>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007b8e:	79fb      	ldrb	r3, [r7, #7]
 8007b90:	f003 031c 	and.w	r3, r3, #28
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d07f      	beq.n	8007c98 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8007b98:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d017      	beq.n	8007bd0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007ba0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007ba4:	2b04      	cmp	r3, #4
 8007ba6:	d10e      	bne.n	8007bc6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007ba8:	f7fe fac2 	bl	8006130 <enq_lock>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d006      	beq.n	8007bc0 <f_open+0xc4>
 8007bb2:	f107 0318 	add.w	r3, r7, #24
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f7ff fa03 	bl	8006fc2 <dir_register>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	e000      	b.n	8007bc2 <f_open+0xc6>
 8007bc0:	2312      	movs	r3, #18
 8007bc2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007bc6:	79fb      	ldrb	r3, [r7, #7]
 8007bc8:	f043 0308 	orr.w	r3, r3, #8
 8007bcc:	71fb      	strb	r3, [r7, #7]
 8007bce:	e010      	b.n	8007bf2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007bd0:	7fbb      	ldrb	r3, [r7, #30]
 8007bd2:	f003 0311 	and.w	r3, r3, #17
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d003      	beq.n	8007be2 <f_open+0xe6>
					res = FR_DENIED;
 8007bda:	2307      	movs	r3, #7
 8007bdc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007be0:	e007      	b.n	8007bf2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007be2:	79fb      	ldrb	r3, [r7, #7]
 8007be4:	f003 0304 	and.w	r3, r3, #4
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d002      	beq.n	8007bf2 <f_open+0xf6>
 8007bec:	2308      	movs	r3, #8
 8007bee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007bf2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d168      	bne.n	8007ccc <f_open+0x1d0>
 8007bfa:	79fb      	ldrb	r3, [r7, #7]
 8007bfc:	f003 0308 	and.w	r3, r3, #8
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d063      	beq.n	8007ccc <f_open+0x1d0>
				dw = GET_FATTIME();
 8007c04:	f7fe f930 	bl	8005e68 <get_fattime>
 8007c08:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c0c:	330e      	adds	r3, #14
 8007c0e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007c10:	4618      	mov	r0, r3
 8007c12:	f7fe f987 	bl	8005f24 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c18:	3316      	adds	r3, #22
 8007c1a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f7fe f981 	bl	8005f24 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c24:	330b      	adds	r3, #11
 8007c26:	2220      	movs	r2, #32
 8007c28:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c2e:	4611      	mov	r1, r2
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7ff f8d5 	bl	8006de0 <ld_clust>
 8007c36:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f7ff f8ed 	bl	8006e1e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c46:	331c      	adds	r3, #28
 8007c48:	2100      	movs	r1, #0
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7fe f96a 	bl	8005f24 <st_dword>
					fs->wflag = 1;
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	2201      	movs	r2, #1
 8007c54:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007c56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d037      	beq.n	8007ccc <f_open+0x1d0>
						dw = fs->winsect;
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c60:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8007c62:	f107 0318 	add.w	r3, r7, #24
 8007c66:	2200      	movs	r2, #0
 8007c68:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7fe fe00 	bl	8006870 <remove_chain>
 8007c70:	4603      	mov	r3, r0
 8007c72:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8007c76:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d126      	bne.n	8007ccc <f_open+0x1d0>
							res = move_window(fs, dw);
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7fe fba8 	bl	80063d8 <move_window>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007c92:	3a01      	subs	r2, #1
 8007c94:	60da      	str	r2, [r3, #12]
 8007c96:	e019      	b.n	8007ccc <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007c98:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d115      	bne.n	8007ccc <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007ca0:	7fbb      	ldrb	r3, [r7, #30]
 8007ca2:	f003 0310 	and.w	r3, r3, #16
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d003      	beq.n	8007cb2 <f_open+0x1b6>
					res = FR_NO_FILE;
 8007caa:	2304      	movs	r3, #4
 8007cac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007cb0:	e00c      	b.n	8007ccc <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007cb2:	79fb      	ldrb	r3, [r7, #7]
 8007cb4:	f003 0302 	and.w	r3, r3, #2
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d007      	beq.n	8007ccc <f_open+0x1d0>
 8007cbc:	7fbb      	ldrb	r3, [r7, #30]
 8007cbe:	f003 0301 	and.w	r3, r3, #1
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d002      	beq.n	8007ccc <f_open+0x1d0>
						res = FR_DENIED;
 8007cc6:	2307      	movs	r3, #7
 8007cc8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8007ccc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d126      	bne.n	8007d22 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007cd4:	79fb      	ldrb	r3, [r7, #7]
 8007cd6:	f003 0308 	and.w	r3, r3, #8
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d003      	beq.n	8007ce6 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8007cde:	79fb      	ldrb	r3, [r7, #7]
 8007ce0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ce4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8007cee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007cf4:	79fb      	ldrb	r3, [r7, #7]
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	bf8c      	ite	hi
 8007cfa:	2301      	movhi	r3, #1
 8007cfc:	2300      	movls	r3, #0
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	461a      	mov	r2, r3
 8007d02:	f107 0318 	add.w	r3, r7, #24
 8007d06:	4611      	mov	r1, r2
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f7fe fa33 	bl	8006174 <inc_lock>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	691b      	ldr	r3, [r3, #16]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d102      	bne.n	8007d22 <f_open+0x226>
 8007d1c:	2302      	movs	r3, #2
 8007d1e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007d22:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	f040 8095 	bne.w	8007e56 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d30:	4611      	mov	r1, r2
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7ff f854 	bl	8006de0 <ld_clust>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d40:	331c      	adds	r3, #28
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7fe f8b0 	bl	8005ea8 <ld_dword>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2200      	movs	r2, #0
 8007d52:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007d54:	697a      	ldr	r2, [r7, #20]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	88da      	ldrh	r2, [r3, #6]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	79fa      	ldrb	r2, [r7, #7]
 8007d66:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2200      	movs	r2, #0
 8007d72:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2200      	movs	r2, #0
 8007d78:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	3330      	adds	r3, #48	@ 0x30
 8007d7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d82:	2100      	movs	r1, #0
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7fe f91a 	bl	8005fbe <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007d8a:	79fb      	ldrb	r3, [r7, #7]
 8007d8c:	f003 0320 	and.w	r3, r3, #32
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d060      	beq.n	8007e56 <f_open+0x35a>
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d05c      	beq.n	8007e56 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	68da      	ldr	r2, [r3, #12]
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	895b      	ldrh	r3, [r3, #10]
 8007da8:	025b      	lsls	r3, r3, #9
 8007daa:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007db8:	e016      	b.n	8007de8 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7fe fbc5 	bl	800654e <get_fat>
 8007dc4:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8007dc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d802      	bhi.n	8007dd2 <f_open+0x2d6>
 8007dcc:	2302      	movs	r3, #2
 8007dce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007dd2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dd8:	d102      	bne.n	8007de0 <f_open+0x2e4>
 8007dda:	2301      	movs	r3, #1
 8007ddc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007de0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007de2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007de4:	1ad3      	subs	r3, r2, r3
 8007de6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007de8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d103      	bne.n	8007df8 <f_open+0x2fc>
 8007df0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007df2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d8e0      	bhi.n	8007dba <f_open+0x2be>
				}
				fp->clust = clst;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007dfc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007dfe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d127      	bne.n	8007e56 <f_open+0x35a>
 8007e06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d022      	beq.n	8007e56 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007e14:	4618      	mov	r0, r3
 8007e16:	f7fe fb7b 	bl	8006510 <clust2sect>
 8007e1a:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8007e1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d103      	bne.n	8007e2a <f_open+0x32e>
						res = FR_INT_ERR;
 8007e22:	2302      	movs	r3, #2
 8007e24:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007e28:	e015      	b.n	8007e56 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007e2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e2c:	0a5a      	lsrs	r2, r3, #9
 8007e2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e30:	441a      	add	r2, r3
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	7858      	ldrb	r0, [r3, #1]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6a1a      	ldr	r2, [r3, #32]
 8007e44:	2301      	movs	r3, #1
 8007e46:	f7fd ffb1 	bl	8005dac <disk_read>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d002      	beq.n	8007e56 <f_open+0x35a>
 8007e50:	2301      	movs	r3, #1
 8007e52:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007e56:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d002      	beq.n	8007e64 <f_open+0x368>
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2200      	movs	r2, #0
 8007e62:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007e64:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3768      	adds	r7, #104	@ 0x68
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b08e      	sub	sp, #56	@ 0x38
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	607a      	str	r2, [r7, #4]
 8007e7c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	2200      	movs	r2, #0
 8007e86:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f107 0214 	add.w	r2, r7, #20
 8007e8e:	4611      	mov	r1, r2
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7ff fdb7 	bl	8007a04 <validate>
 8007e96:	4603      	mov	r3, r0
 8007e98:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007e9c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d107      	bne.n	8007eb4 <f_read+0x44>
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	7d5b      	ldrb	r3, [r3, #21]
 8007ea8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8007eac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d002      	beq.n	8007eba <f_read+0x4a>
 8007eb4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007eb8:	e115      	b.n	80080e6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	7d1b      	ldrb	r3, [r3, #20]
 8007ebe:	f003 0301 	and.w	r3, r3, #1
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d101      	bne.n	8007eca <f_read+0x5a>
 8007ec6:	2307      	movs	r3, #7
 8007ec8:	e10d      	b.n	80080e6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	68da      	ldr	r2, [r3, #12]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	699b      	ldr	r3, [r3, #24]
 8007ed2:	1ad3      	subs	r3, r2, r3
 8007ed4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	6a3b      	ldr	r3, [r7, #32]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	f240 80fe 	bls.w	80080dc <f_read+0x26c>
 8007ee0:	6a3b      	ldr	r3, [r7, #32]
 8007ee2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007ee4:	e0fa      	b.n	80080dc <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	699b      	ldr	r3, [r3, #24]
 8007eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f040 80c6 	bne.w	8008080 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	699b      	ldr	r3, [r3, #24]
 8007ef8:	0a5b      	lsrs	r3, r3, #9
 8007efa:	697a      	ldr	r2, [r7, #20]
 8007efc:	8952      	ldrh	r2, [r2, #10]
 8007efe:	3a01      	subs	r2, #1
 8007f00:	4013      	ands	r3, r2
 8007f02:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d12f      	bne.n	8007f6a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	699b      	ldr	r3, [r3, #24]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d103      	bne.n	8007f1a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f18:	e013      	b.n	8007f42 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d007      	beq.n	8007f32 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	699b      	ldr	r3, [r3, #24]
 8007f26:	4619      	mov	r1, r3
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	f7fe fd9e 	bl	8006a6a <clmt_clust>
 8007f2e:	6338      	str	r0, [r7, #48]	@ 0x30
 8007f30:	e007      	b.n	8007f42 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	69db      	ldr	r3, [r3, #28]
 8007f38:	4619      	mov	r1, r3
 8007f3a:	4610      	mov	r0, r2
 8007f3c:	f7fe fb07 	bl	800654e <get_fat>
 8007f40:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d804      	bhi.n	8007f52 <f_read+0xe2>
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2202      	movs	r2, #2
 8007f4c:	755a      	strb	r2, [r3, #21]
 8007f4e:	2302      	movs	r3, #2
 8007f50:	e0c9      	b.n	80080e6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f58:	d104      	bne.n	8007f64 <f_read+0xf4>
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	755a      	strb	r2, [r3, #21]
 8007f60:	2301      	movs	r3, #1
 8007f62:	e0c0      	b.n	80080e6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f68:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007f6a:	697a      	ldr	r2, [r7, #20]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	69db      	ldr	r3, [r3, #28]
 8007f70:	4619      	mov	r1, r3
 8007f72:	4610      	mov	r0, r2
 8007f74:	f7fe facc 	bl	8006510 <clust2sect>
 8007f78:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d104      	bne.n	8007f8a <f_read+0x11a>
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2202      	movs	r2, #2
 8007f84:	755a      	strb	r2, [r3, #21]
 8007f86:	2302      	movs	r3, #2
 8007f88:	e0ad      	b.n	80080e6 <f_read+0x276>
			sect += csect;
 8007f8a:	69ba      	ldr	r2, [r7, #24]
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	4413      	add	r3, r2
 8007f90:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	0a5b      	lsrs	r3, r3, #9
 8007f96:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d039      	beq.n	8008012 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007f9e:	69fa      	ldr	r2, [r7, #28]
 8007fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fa2:	4413      	add	r3, r2
 8007fa4:	697a      	ldr	r2, [r7, #20]
 8007fa6:	8952      	ldrh	r2, [r2, #10]
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d905      	bls.n	8007fb8 <f_read+0x148>
					cc = fs->csize - csect;
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	895b      	ldrh	r3, [r3, #10]
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	69fb      	ldr	r3, [r7, #28]
 8007fb4:	1ad3      	subs	r3, r2, r3
 8007fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	7858      	ldrb	r0, [r3, #1]
 8007fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fbe:	69ba      	ldr	r2, [r7, #24]
 8007fc0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007fc2:	f7fd fef3 	bl	8005dac <disk_read>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d004      	beq.n	8007fd6 <f_read+0x166>
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	755a      	strb	r2, [r3, #21]
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e087      	b.n	80080e6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	7d1b      	ldrb	r3, [r3, #20]
 8007fda:	b25b      	sxtb	r3, r3
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	da14      	bge.n	800800a <f_read+0x19a>
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6a1a      	ldr	r2, [r3, #32]
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	1ad3      	subs	r3, r2, r3
 8007fe8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d90d      	bls.n	800800a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	6a1a      	ldr	r2, [r3, #32]
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	1ad3      	subs	r3, r2, r3
 8007ff6:	025b      	lsls	r3, r3, #9
 8007ff8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ffa:	18d0      	adds	r0, r2, r3
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	3330      	adds	r3, #48	@ 0x30
 8008000:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008004:	4619      	mov	r1, r3
 8008006:	f7fd ffb9 	bl	8005f7c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800800a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800800c:	025b      	lsls	r3, r3, #9
 800800e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8008010:	e050      	b.n	80080b4 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6a1b      	ldr	r3, [r3, #32]
 8008016:	69ba      	ldr	r2, [r7, #24]
 8008018:	429a      	cmp	r2, r3
 800801a:	d02e      	beq.n	800807a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	7d1b      	ldrb	r3, [r3, #20]
 8008020:	b25b      	sxtb	r3, r3
 8008022:	2b00      	cmp	r3, #0
 8008024:	da18      	bge.n	8008058 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	7858      	ldrb	r0, [r3, #1]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6a1a      	ldr	r2, [r3, #32]
 8008034:	2301      	movs	r3, #1
 8008036:	f7fd fed9 	bl	8005dec <disk_write>
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d004      	beq.n	800804a <f_read+0x1da>
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2201      	movs	r2, #1
 8008044:	755a      	strb	r2, [r3, #21]
 8008046:	2301      	movs	r3, #1
 8008048:	e04d      	b.n	80080e6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	7d1b      	ldrb	r3, [r3, #20]
 800804e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008052:	b2da      	uxtb	r2, r3
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	7858      	ldrb	r0, [r3, #1]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008062:	2301      	movs	r3, #1
 8008064:	69ba      	ldr	r2, [r7, #24]
 8008066:	f7fd fea1 	bl	8005dac <disk_read>
 800806a:	4603      	mov	r3, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d004      	beq.n	800807a <f_read+0x20a>
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2201      	movs	r2, #1
 8008074:	755a      	strb	r2, [r3, #21]
 8008076:	2301      	movs	r3, #1
 8008078:	e035      	b.n	80080e6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	69ba      	ldr	r2, [r7, #24]
 800807e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	699b      	ldr	r3, [r3, #24]
 8008084:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008088:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800808c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800808e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	429a      	cmp	r2, r3
 8008094:	d901      	bls.n	800809a <f_read+0x22a>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	699b      	ldr	r3, [r3, #24]
 80080a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080a8:	4413      	add	r3, r2
 80080aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080ac:	4619      	mov	r1, r3
 80080ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80080b0:	f7fd ff64 	bl	8005f7c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80080b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080b8:	4413      	add	r3, r2
 80080ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	699a      	ldr	r2, [r3, #24]
 80080c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080c2:	441a      	add	r2, r3
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	619a      	str	r2, [r3, #24]
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080ce:	441a      	add	r2, r3
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	601a      	str	r2, [r3, #0]
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080d8:	1ad3      	subs	r3, r2, r3
 80080da:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	f47f af01 	bne.w	8007ee6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3738      	adds	r7, #56	@ 0x38
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b086      	sub	sp, #24
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f107 0208 	add.w	r2, r7, #8
 80080fc:	4611      	mov	r1, r2
 80080fe:	4618      	mov	r0, r3
 8008100:	f7ff fc80 	bl	8007a04 <validate>
 8008104:	4603      	mov	r3, r0
 8008106:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008108:	7dfb      	ldrb	r3, [r7, #23]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d168      	bne.n	80081e0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	7d1b      	ldrb	r3, [r3, #20]
 8008112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008116:	2b00      	cmp	r3, #0
 8008118:	d062      	beq.n	80081e0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	7d1b      	ldrb	r3, [r3, #20]
 800811e:	b25b      	sxtb	r3, r3
 8008120:	2b00      	cmp	r3, #0
 8008122:	da15      	bge.n	8008150 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	7858      	ldrb	r0, [r3, #1]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6a1a      	ldr	r2, [r3, #32]
 8008132:	2301      	movs	r3, #1
 8008134:	f7fd fe5a 	bl	8005dec <disk_write>
 8008138:	4603      	mov	r3, r0
 800813a:	2b00      	cmp	r3, #0
 800813c:	d001      	beq.n	8008142 <f_sync+0x54>
 800813e:	2301      	movs	r3, #1
 8008140:	e04f      	b.n	80081e2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	7d1b      	ldrb	r3, [r3, #20]
 8008146:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800814a:	b2da      	uxtb	r2, r3
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008150:	f7fd fe8a 	bl	8005e68 <get_fattime>
 8008154:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008156:	68ba      	ldr	r2, [r7, #8]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800815c:	4619      	mov	r1, r3
 800815e:	4610      	mov	r0, r2
 8008160:	f7fe f93a 	bl	80063d8 <move_window>
 8008164:	4603      	mov	r3, r0
 8008166:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008168:	7dfb      	ldrb	r3, [r7, #23]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d138      	bne.n	80081e0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008172:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	330b      	adds	r3, #11
 8008178:	781a      	ldrb	r2, [r3, #0]
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	330b      	adds	r3, #11
 800817e:	f042 0220 	orr.w	r2, r2, #32
 8008182:	b2d2      	uxtb	r2, r2
 8008184:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6818      	ldr	r0, [r3, #0]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	461a      	mov	r2, r3
 8008190:	68f9      	ldr	r1, [r7, #12]
 8008192:	f7fe fe44 	bl	8006e1e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f103 021c 	add.w	r2, r3, #28
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	4619      	mov	r1, r3
 80081a2:	4610      	mov	r0, r2
 80081a4:	f7fd febe 	bl	8005f24 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	3316      	adds	r3, #22
 80081ac:	6939      	ldr	r1, [r7, #16]
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7fd feb8 	bl	8005f24 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	3312      	adds	r3, #18
 80081b8:	2100      	movs	r1, #0
 80081ba:	4618      	mov	r0, r3
 80081bc:	f7fd fe97 	bl	8005eee <st_word>
					fs->wflag = 1;
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	2201      	movs	r2, #1
 80081c4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	4618      	mov	r0, r3
 80081ca:	f7fe f933 	bl	8006434 <sync_fs>
 80081ce:	4603      	mov	r3, r0
 80081d0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	7d1b      	ldrb	r3, [r3, #20]
 80081d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081da:	b2da      	uxtb	r2, r3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80081e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3718      	adds	r7, #24
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b084      	sub	sp, #16
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f7ff ff7b 	bl	80080ee <f_sync>
 80081f8:	4603      	mov	r3, r0
 80081fa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80081fc:	7bfb      	ldrb	r3, [r7, #15]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d118      	bne.n	8008234 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f107 0208 	add.w	r2, r7, #8
 8008208:	4611      	mov	r1, r2
 800820a:	4618      	mov	r0, r3
 800820c:	f7ff fbfa 	bl	8007a04 <validate>
 8008210:	4603      	mov	r3, r0
 8008212:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008214:	7bfb      	ldrb	r3, [r7, #15]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d10c      	bne.n	8008234 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	691b      	ldr	r3, [r3, #16]
 800821e:	4618      	mov	r0, r3
 8008220:	f7fe f836 	bl	8006290 <dec_lock>
 8008224:	4603      	mov	r3, r0
 8008226:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008228:	7bfb      	ldrb	r3, [r7, #15]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d102      	bne.n	8008234 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008234:	7bfb      	ldrb	r3, [r7, #15]
}
 8008236:	4618      	mov	r0, r3
 8008238:	3710      	adds	r7, #16
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}

0800823e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800823e:	b580      	push	{r7, lr}
 8008240:	b086      	sub	sp, #24
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
 8008246:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d101      	bne.n	8008252 <f_opendir+0x14>
 800824e:	2309      	movs	r3, #9
 8008250:	e064      	b.n	800831c <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8008256:	f107 010c 	add.w	r1, r7, #12
 800825a:	463b      	mov	r3, r7
 800825c:	2200      	movs	r2, #0
 800825e:	4618      	mov	r0, r3
 8008260:	f7ff f984 	bl	800756c <find_volume>
 8008264:	4603      	mov	r3, r0
 8008266:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008268:	7dfb      	ldrb	r3, [r7, #23]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d14f      	bne.n	800830e <f_opendir+0xd0>
		obj->fs = fs;
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	4619      	mov	r1, r3
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f7ff f86b 	bl	8007354 <follow_path>
 800827e:	4603      	mov	r3, r0
 8008280:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8008282:	7dfb      	ldrb	r3, [r7, #23]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d13d      	bne.n	8008304 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800828e:	b25b      	sxtb	r3, r3
 8008290:	2b00      	cmp	r3, #0
 8008292:	db12      	blt.n	80082ba <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	799b      	ldrb	r3, [r3, #6]
 8008298:	f003 0310 	and.w	r3, r3, #16
 800829c:	2b00      	cmp	r3, #0
 800829e:	d00a      	beq.n	80082b6 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80082a0:	68fa      	ldr	r2, [r7, #12]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6a1b      	ldr	r3, [r3, #32]
 80082a6:	4619      	mov	r1, r3
 80082a8:	4610      	mov	r0, r2
 80082aa:	f7fe fd99 	bl	8006de0 <ld_clust>
 80082ae:	4602      	mov	r2, r0
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	609a      	str	r2, [r3, #8]
 80082b4:	e001      	b.n	80082ba <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80082b6:	2305      	movs	r3, #5
 80082b8:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80082ba:	7dfb      	ldrb	r3, [r7, #23]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d121      	bne.n	8008304 <f_opendir+0xc6>
				obj->id = fs->id;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	88da      	ldrh	r2, [r3, #6]
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80082c8:	2100      	movs	r1, #0
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f7fe fc01 	bl	8006ad2 <dir_sdi>
 80082d0:	4603      	mov	r3, r0
 80082d2:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80082d4:	7dfb      	ldrb	r3, [r7, #23]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d114      	bne.n	8008304 <f_opendir+0xc6>
					if (obj->sclust) {
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d00d      	beq.n	80082fe <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80082e2:	2100      	movs	r1, #0
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f7fd ff45 	bl	8006174 <inc_lock>
 80082ea:	4602      	mov	r2, r0
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	691b      	ldr	r3, [r3, #16]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d105      	bne.n	8008304 <f_opendir+0xc6>
 80082f8:	2312      	movs	r3, #18
 80082fa:	75fb      	strb	r3, [r7, #23]
 80082fc:	e002      	b.n	8008304 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	2200      	movs	r2, #0
 8008302:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8008304:	7dfb      	ldrb	r3, [r7, #23]
 8008306:	2b04      	cmp	r3, #4
 8008308:	d101      	bne.n	800830e <f_opendir+0xd0>
 800830a:	2305      	movs	r3, #5
 800830c:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800830e:	7dfb      	ldrb	r3, [r7, #23]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d002      	beq.n	800831a <f_opendir+0xdc>
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	2200      	movs	r2, #0
 8008318:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800831a:	7dfb      	ldrb	r3, [r7, #23]
}
 800831c:	4618      	mov	r0, r3
 800831e:	3718      	adds	r7, #24
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f107 0208 	add.w	r2, r7, #8
 8008332:	4611      	mov	r1, r2
 8008334:	4618      	mov	r0, r3
 8008336:	f7ff fb65 	bl	8007a04 <validate>
 800833a:	4603      	mov	r3, r0
 800833c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800833e:	7bfb      	ldrb	r3, [r7, #15]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d110      	bne.n	8008366 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	691b      	ldr	r3, [r3, #16]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d006      	beq.n	800835a <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	691b      	ldr	r3, [r3, #16]
 8008350:	4618      	mov	r0, r3
 8008352:	f7fd ff9d 	bl	8006290 <dec_lock>
 8008356:	4603      	mov	r3, r0
 8008358:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800835a:	7bfb      	ldrb	r3, [r7, #15]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d102      	bne.n	8008366 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8008366:	7bfb      	ldrb	r3, [r7, #15]
}
 8008368:	4618      	mov	r0, r3
 800836a:	3710      	adds	r7, #16
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f107 0208 	add.w	r2, r7, #8
 8008380:	4611      	mov	r1, r2
 8008382:	4618      	mov	r0, r3
 8008384:	f7ff fb3e 	bl	8007a04 <validate>
 8008388:	4603      	mov	r3, r0
 800838a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800838c:	7bfb      	ldrb	r3, [r7, #15]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d126      	bne.n	80083e0 <f_readdir+0x70>
		if (!fno) {
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d106      	bne.n	80083a6 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8008398:	2100      	movs	r1, #0
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f7fe fb99 	bl	8006ad2 <dir_sdi>
 80083a0:	4603      	mov	r3, r0
 80083a2:	73fb      	strb	r3, [r7, #15]
 80083a4:	e01c      	b.n	80083e0 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 80083a6:	2100      	movs	r1, #0
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f7fe fd58 	bl	8006e5e <dir_read>
 80083ae:	4603      	mov	r3, r0
 80083b0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80083b2:	7bfb      	ldrb	r3, [r7, #15]
 80083b4:	2b04      	cmp	r3, #4
 80083b6:	d101      	bne.n	80083bc <f_readdir+0x4c>
 80083b8:	2300      	movs	r3, #0
 80083ba:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 80083bc:	7bfb      	ldrb	r3, [r7, #15]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d10e      	bne.n	80083e0 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 80083c2:	6839      	ldr	r1, [r7, #0]
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f7fe fe2e 	bl	8007026 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80083ca:	2100      	movs	r1, #0
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f7fe fbfb 	bl	8006bc8 <dir_next>
 80083d2:	4603      	mov	r3, r0
 80083d4:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80083d6:	7bfb      	ldrb	r3, [r7, #15]
 80083d8:	2b04      	cmp	r3, #4
 80083da:	d101      	bne.n	80083e0 <f_readdir+0x70>
 80083dc:	2300      	movs	r3, #0
 80083de:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80083e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3710      	adds	r7, #16
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}

080083ea <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b084      	sub	sp, #16
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
 80083f2:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 80083f4:	6839      	ldr	r1, [r7, #0]
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f7ff ffba 	bl	8008370 <f_readdir>
 80083fc:	4603      	mov	r3, r0
 80083fe:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 8008400:	7bfb      	ldrb	r3, [r7, #15]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d114      	bne.n	8008430 <f_findnext+0x46>
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d011      	beq.n	8008430 <f_findnext+0x46>
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	7a5b      	ldrb	r3, [r3, #9]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d00d      	beq.n	8008430 <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	f103 0109 	add.w	r1, r3, #9
 800841e:	2300      	movs	r3, #0
 8008420:	2200      	movs	r2, #0
 8008422:	f7fe fe87 	bl	8007134 <pattern_matching>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d100      	bne.n	800842e <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 800842c:	e7e2      	b.n	80083f4 <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800842e:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 8008430:	7bfb      	ldrb	r3, [r7, #15]
}
 8008432:	4618      	mov	r0, r3
 8008434:	3710      	adds	r7, #16
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}

0800843a <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 800843a:	b580      	push	{r7, lr}
 800843c:	b086      	sub	sp, #24
 800843e:	af00      	add	r7, sp, #0
 8008440:	60f8      	str	r0, [r7, #12]
 8008442:	60b9      	str	r1, [r7, #8]
 8008444:	607a      	str	r2, [r7, #4]
 8008446:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	683a      	ldr	r2, [r7, #0]
 800844c:	631a      	str	r2, [r3, #48]	@ 0x30
	res = f_opendir(dp, path);		/* Open the target directory */
 800844e:	6879      	ldr	r1, [r7, #4]
 8008450:	68f8      	ldr	r0, [r7, #12]
 8008452:	f7ff fef4 	bl	800823e <f_opendir>
 8008456:	4603      	mov	r3, r0
 8008458:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800845a:	7dfb      	ldrb	r3, [r7, #23]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d105      	bne.n	800846c <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 8008460:	68b9      	ldr	r1, [r7, #8]
 8008462:	68f8      	ldr	r0, [r7, #12]
 8008464:	f7ff ffc1 	bl	80083ea <f_findnext>
 8008468:	4603      	mov	r3, r0
 800846a:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 800846c:	7dfb      	ldrb	r3, [r7, #23]
}
 800846e:	4618      	mov	r0, r3
 8008470:	3718      	adds	r7, #24
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
	...

08008478 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008478:	b480      	push	{r7}
 800847a:	b087      	sub	sp, #28
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	4613      	mov	r3, r2
 8008484:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008486:	2301      	movs	r3, #1
 8008488:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800848a:	2300      	movs	r3, #0
 800848c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800848e:	4b1f      	ldr	r3, [pc, #124]	@ (800850c <FATFS_LinkDriverEx+0x94>)
 8008490:	7b9b      	ldrb	r3, [r3, #14]
 8008492:	b2db      	uxtb	r3, r3
 8008494:	2b01      	cmp	r3, #1
 8008496:	d831      	bhi.n	80084fc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008498:	4b1c      	ldr	r3, [pc, #112]	@ (800850c <FATFS_LinkDriverEx+0x94>)
 800849a:	7b9b      	ldrb	r3, [r3, #14]
 800849c:	b2db      	uxtb	r3, r3
 800849e:	461a      	mov	r2, r3
 80084a0:	4b1a      	ldr	r3, [pc, #104]	@ (800850c <FATFS_LinkDriverEx+0x94>)
 80084a2:	2100      	movs	r1, #0
 80084a4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80084a6:	4b19      	ldr	r3, [pc, #100]	@ (800850c <FATFS_LinkDriverEx+0x94>)
 80084a8:	7b9b      	ldrb	r3, [r3, #14]
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	4a17      	ldr	r2, [pc, #92]	@ (800850c <FATFS_LinkDriverEx+0x94>)
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	4413      	add	r3, r2
 80084b2:	68fa      	ldr	r2, [r7, #12]
 80084b4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80084b6:	4b15      	ldr	r3, [pc, #84]	@ (800850c <FATFS_LinkDriverEx+0x94>)
 80084b8:	7b9b      	ldrb	r3, [r3, #14]
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	461a      	mov	r2, r3
 80084be:	4b13      	ldr	r3, [pc, #76]	@ (800850c <FATFS_LinkDriverEx+0x94>)
 80084c0:	4413      	add	r3, r2
 80084c2:	79fa      	ldrb	r2, [r7, #7]
 80084c4:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 80084c6:	4b11      	ldr	r3, [pc, #68]	@ (800850c <FATFS_LinkDriverEx+0x94>)
 80084c8:	7b9b      	ldrb	r3, [r3, #14]
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	1c5a      	adds	r2, r3, #1
 80084ce:	b2d1      	uxtb	r1, r2
 80084d0:	4a0e      	ldr	r2, [pc, #56]	@ (800850c <FATFS_LinkDriverEx+0x94>)
 80084d2:	7391      	strb	r1, [r2, #14]
 80084d4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80084d6:	7dbb      	ldrb	r3, [r7, #22]
 80084d8:	3330      	adds	r3, #48	@ 0x30
 80084da:	b2da      	uxtb	r2, r3
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	3301      	adds	r3, #1
 80084e4:	223a      	movs	r2, #58	@ 0x3a
 80084e6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	3302      	adds	r3, #2
 80084ec:	222f      	movs	r2, #47	@ 0x2f
 80084ee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	3303      	adds	r3, #3
 80084f4:	2200      	movs	r2, #0
 80084f6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80084f8:	2300      	movs	r3, #0
 80084fa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80084fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80084fe:	4618      	mov	r0, r3
 8008500:	371c      	adds	r7, #28
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr
 800850a:	bf00      	nop
 800850c:	20000850 	.word	0x20000850

08008510 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b082      	sub	sp, #8
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800851a:	2200      	movs	r2, #0
 800851c:	6839      	ldr	r1, [r7, #0]
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f7ff ffaa 	bl	8008478 <FATFS_LinkDriverEx>
 8008524:	4603      	mov	r3, r0
}
 8008526:	4618      	mov	r0, r3
 8008528:	3708      	adds	r7, #8
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
	...

08008530 <BSP_PB_GetState>:
  *       are mapped on the same push button named "User"
  *       on the board serigraphy.
  * @retval The Button GPIO pin value
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b082      	sub	sp, #8
 8008534:	af00      	add	r7, sp, #0
 8008536:	4603      	mov	r3, r0
 8008538:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800853a:	79fb      	ldrb	r3, [r7, #7]
 800853c:	4a07      	ldr	r2, [pc, #28]	@ (800855c <BSP_PB_GetState+0x2c>)
 800853e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008542:	79fb      	ldrb	r3, [r7, #7]
 8008544:	4906      	ldr	r1, [pc, #24]	@ (8008560 <BSP_PB_GetState+0x30>)
 8008546:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800854a:	4619      	mov	r1, r3
 800854c:	4610      	mov	r0, r2
 800854e:	f7f9 feb7 	bl	80022c0 <HAL_GPIO_ReadPin>
 8008552:	4603      	mov	r3, r0
}
 8008554:	4618      	mov	r0, r3
 8008556:	3708      	adds	r7, #8
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}
 800855c:	20000018 	.word	0x20000018
 8008560:	0800be44 	.word	0x0800be44

08008564 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8008564:	b580      	push	{r7, lr}
 8008566:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8008568:	4b31      	ldr	r3, [pc, #196]	@ (8008630 <BSP_LCD_Init+0xcc>)
 800856a:	2228      	movs	r2, #40	@ 0x28
 800856c:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800856e:	4b30      	ldr	r3, [pc, #192]	@ (8008630 <BSP_LCD_Init+0xcc>)
 8008570:	2209      	movs	r2, #9
 8008572:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8008574:	4b2e      	ldr	r3, [pc, #184]	@ (8008630 <BSP_LCD_Init+0xcc>)
 8008576:	2235      	movs	r2, #53	@ 0x35
 8008578:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800857a:	4b2d      	ldr	r3, [pc, #180]	@ (8008630 <BSP_LCD_Init+0xcc>)
 800857c:	220b      	movs	r2, #11
 800857e:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8008580:	4b2b      	ldr	r3, [pc, #172]	@ (8008630 <BSP_LCD_Init+0xcc>)
 8008582:	f240 121b 	movw	r2, #283	@ 0x11b
 8008586:	629a      	str	r2, [r3, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8008588:	4b29      	ldr	r3, [pc, #164]	@ (8008630 <BSP_LCD_Init+0xcc>)
 800858a:	f240 2215 	movw	r2, #533	@ 0x215
 800858e:	625a      	str	r2, [r3, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8008590:	4b27      	ldr	r3, [pc, #156]	@ (8008630 <BSP_LCD_Init+0xcc>)
 8008592:	f240 121d 	movw	r2, #285	@ 0x11d
 8008596:	631a      	str	r2, [r3, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8008598:	4b25      	ldr	r3, [pc, #148]	@ (8008630 <BSP_LCD_Init+0xcc>)
 800859a:	f240 2235 	movw	r2, #565	@ 0x235
 800859e:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80085a0:	2100      	movs	r1, #0
 80085a2:	4823      	ldr	r0, [pc, #140]	@ (8008630 <BSP_LCD_Init+0xcc>)
 80085a4:	f000 fc7e 	bl	8008ea4 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80085a8:	4b21      	ldr	r3, [pc, #132]	@ (8008630 <BSP_LCD_Init+0xcc>)
 80085aa:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80085ae:	661a      	str	r2, [r3, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80085b0:	4b1f      	ldr	r3, [pc, #124]	@ (8008630 <BSP_LCD_Init+0xcc>)
 80085b2:	f44f 7288 	mov.w	r2, #272	@ 0x110
 80085b6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 80085b8:	4b1d      	ldr	r3, [pc, #116]	@ (8008630 <BSP_LCD_Init+0xcc>)
 80085ba:	2200      	movs	r2, #0
 80085bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 80085c0:	4b1b      	ldr	r3, [pc, #108]	@ (8008630 <BSP_LCD_Init+0xcc>)
 80085c2:	2200      	movs	r2, #0
 80085c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 80085c8:	4b19      	ldr	r3, [pc, #100]	@ (8008630 <BSP_LCD_Init+0xcc>)
 80085ca:	2200      	movs	r2, #0
 80085cc:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80085d0:	4b17      	ldr	r3, [pc, #92]	@ (8008630 <BSP_LCD_Init+0xcc>)
 80085d2:	2200      	movs	r2, #0
 80085d4:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80085d6:	4b16      	ldr	r3, [pc, #88]	@ (8008630 <BSP_LCD_Init+0xcc>)
 80085d8:	2200      	movs	r2, #0
 80085da:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 80085dc:	4b14      	ldr	r3, [pc, #80]	@ (8008630 <BSP_LCD_Init+0xcc>)
 80085de:	2200      	movs	r2, #0
 80085e0:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80085e2:	4b13      	ldr	r3, [pc, #76]	@ (8008630 <BSP_LCD_Init+0xcc>)
 80085e4:	2200      	movs	r2, #0
 80085e6:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 80085e8:	4b11      	ldr	r3, [pc, #68]	@ (8008630 <BSP_LCD_Init+0xcc>)
 80085ea:	4a12      	ldr	r2, [pc, #72]	@ (8008634 <BSP_LCD_Init+0xd0>)
 80085ec:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80085ee:	4810      	ldr	r0, [pc, #64]	@ (8008630 <BSP_LCD_Init+0xcc>)
 80085f0:	f7fa f8bc 	bl	800276c <HAL_LTDC_GetState>
 80085f4:	4603      	mov	r3, r0
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d103      	bne.n	8008602 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80085fa:	2100      	movs	r1, #0
 80085fc:	480c      	ldr	r0, [pc, #48]	@ (8008630 <BSP_LCD_Init+0xcc>)
 80085fe:	f000 fb77 	bl	8008cf0 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8008602:	480b      	ldr	r0, [pc, #44]	@ (8008630 <BSP_LCD_Init+0xcc>)
 8008604:	f7f9 fe8e 	bl	8002324 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8008608:	2201      	movs	r2, #1
 800860a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800860e:	480a      	ldr	r0, [pc, #40]	@ (8008638 <BSP_LCD_Init+0xd4>)
 8008610:	f7f9 fe6e 	bl	80022f0 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8008614:	2201      	movs	r2, #1
 8008616:	2108      	movs	r1, #8
 8008618:	4808      	ldr	r0, [pc, #32]	@ (800863c <BSP_LCD_Init+0xd8>)
 800861a:	f7f9 fe69 	bl	80022f0 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800861e:	f000 ff71 	bl	8009504 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8008622:	4807      	ldr	r0, [pc, #28]	@ (8008640 <BSP_LCD_Init+0xdc>)
 8008624:	f000 f8d0 	bl	80087c8 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8008628:	2300      	movs	r3, #0
}
 800862a:	4618      	mov	r0, r3
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	20000860 	.word	0x20000860
 8008634:	40016800 	.word	0x40016800
 8008638:	40022000 	.word	0x40022000
 800863c:	40022800 	.word	0x40022800
 8008640:	20000010 	.word	0x20000010

08008644 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8008644:	b480      	push	{r7}
 8008646:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8008648:	4b06      	ldr	r3, [pc, #24]	@ (8008664 <BSP_LCD_GetXSize+0x20>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a06      	ldr	r2, [pc, #24]	@ (8008668 <BSP_LCD_GetXSize+0x24>)
 800864e:	2134      	movs	r1, #52	@ 0x34
 8008650:	fb01 f303 	mul.w	r3, r1, r3
 8008654:	4413      	add	r3, r2
 8008656:	3360      	adds	r3, #96	@ 0x60
 8008658:	681b      	ldr	r3, [r3, #0]
}
 800865a:	4618      	mov	r0, r3
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr
 8008664:	20000948 	.word	0x20000948
 8008668:	20000860 	.word	0x20000860

0800866c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800866c:	b480      	push	{r7}
 800866e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8008670:	4b06      	ldr	r3, [pc, #24]	@ (800868c <BSP_LCD_GetYSize+0x20>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a06      	ldr	r2, [pc, #24]	@ (8008690 <BSP_LCD_GetYSize+0x24>)
 8008676:	2134      	movs	r1, #52	@ 0x34
 8008678:	fb01 f303 	mul.w	r3, r1, r3
 800867c:	4413      	add	r3, r2
 800867e:	3364      	adds	r3, #100	@ 0x64
 8008680:	681b      	ldr	r3, [r3, #0]
}
 8008682:	4618      	mov	r0, r3
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr
 800868c:	20000948 	.word	0x20000948
 8008690:	20000860 	.word	0x20000860

08008694 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8008694:	b580      	push	{r7, lr}
 8008696:	b090      	sub	sp, #64	@ 0x40
 8008698:	af00      	add	r7, sp, #0
 800869a:	4603      	mov	r3, r0
 800869c:	6039      	str	r1, [r7, #0]
 800869e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 80086a0:	2300      	movs	r3, #0
 80086a2:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 80086a4:	f7ff ffce 	bl	8008644 <BSP_LCD_GetXSize>
 80086a8:	4603      	mov	r3, r0
 80086aa:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 80086ac:	2300      	movs	r3, #0
 80086ae:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 80086b0:	f7ff ffdc 	bl	800866c <BSP_LCD_GetYSize>
 80086b4:	4603      	mov	r3, r0
 80086b6:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80086b8:	2300      	movs	r3, #0
 80086ba:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	633b      	str	r3, [r7, #48]	@ 0x30
  layer_cfg.Alpha = 255;
 80086c0:	23ff      	movs	r3, #255	@ 0xff
 80086c2:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 80086c4:	2300      	movs	r3, #0
 80086c6:	627b      	str	r3, [r7, #36]	@ 0x24
  layer_cfg.Backcolor.Blue = 0;
 80086c8:	2300      	movs	r3, #0
 80086ca:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  layer_cfg.Backcolor.Green = 0;
 80086ce:	2300      	movs	r3, #0
 80086d0:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  layer_cfg.Backcolor.Red = 0;
 80086d4:	2300      	movs	r3, #0
 80086d6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80086da:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80086de:	62bb      	str	r3, [r7, #40]	@ 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80086e0:	2307      	movs	r3, #7
 80086e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80086e4:	f7ff ffae 	bl	8008644 <BSP_LCD_GetXSize>
 80086e8:	4603      	mov	r3, r0
 80086ea:	637b      	str	r3, [r7, #52]	@ 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80086ec:	f7ff ffbe 	bl	800866c <BSP_LCD_GetYSize>
 80086f0:	4603      	mov	r3, r0
 80086f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80086f4:	88fa      	ldrh	r2, [r7, #6]
 80086f6:	f107 030c 	add.w	r3, r7, #12
 80086fa:	4619      	mov	r1, r3
 80086fc:	4812      	ldr	r0, [pc, #72]	@ (8008748 <BSP_LCD_LayerDefaultInit+0xb4>)
 80086fe:	f7f9 ffc1 	bl	8002684 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8008702:	88fa      	ldrh	r2, [r7, #6]
 8008704:	4911      	ldr	r1, [pc, #68]	@ (800874c <BSP_LCD_LayerDefaultInit+0xb8>)
 8008706:	4613      	mov	r3, r2
 8008708:	005b      	lsls	r3, r3, #1
 800870a:	4413      	add	r3, r2
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	440b      	add	r3, r1
 8008710:	3304      	adds	r3, #4
 8008712:	f04f 32ff 	mov.w	r2, #4294967295
 8008716:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8008718:	88fa      	ldrh	r2, [r7, #6]
 800871a:	490c      	ldr	r1, [pc, #48]	@ (800874c <BSP_LCD_LayerDefaultInit+0xb8>)
 800871c:	4613      	mov	r3, r2
 800871e:	005b      	lsls	r3, r3, #1
 8008720:	4413      	add	r3, r2
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	440b      	add	r3, r1
 8008726:	3308      	adds	r3, #8
 8008728:	4a09      	ldr	r2, [pc, #36]	@ (8008750 <BSP_LCD_LayerDefaultInit+0xbc>)
 800872a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800872c:	88fa      	ldrh	r2, [r7, #6]
 800872e:	4907      	ldr	r1, [pc, #28]	@ (800874c <BSP_LCD_LayerDefaultInit+0xb8>)
 8008730:	4613      	mov	r3, r2
 8008732:	005b      	lsls	r3, r3, #1
 8008734:	4413      	add	r3, r2
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	440b      	add	r3, r1
 800873a:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 800873e:	601a      	str	r2, [r3, #0]
}
 8008740:	bf00      	nop
 8008742:	3740      	adds	r7, #64	@ 0x40
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}
 8008748:	20000860 	.word	0x20000860
 800874c:	2000094c 	.word	0x2000094c
 8008750:	20000010 	.word	0x20000010

08008754 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 800875c:	4a04      	ldr	r2, [pc, #16]	@ (8008770 <BSP_LCD_SelectLayer+0x1c>)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6013      	str	r3, [r2, #0]
} 
 8008762:	bf00      	nop
 8008764:	370c      	adds	r7, #12
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop
 8008770:	20000948 	.word	0x20000948

08008774 <BSP_LCD_SetTransparency>:
  * @param  Transparency: Transparency
  *           This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFF 
  * @retval None
  */
void BSP_LCD_SetTransparency(uint32_t LayerIndex, uint8_t Transparency)
{    
 8008774:	b580      	push	{r7, lr}
 8008776:	b082      	sub	sp, #8
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	460b      	mov	r3, r1
 800877e:	70fb      	strb	r3, [r7, #3]
  HAL_LTDC_SetAlpha(&hLtdcHandler, Transparency, LayerIndex);
 8008780:	78fb      	ldrb	r3, [r7, #3]
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	4619      	mov	r1, r3
 8008786:	4803      	ldr	r0, [pc, #12]	@ (8008794 <BSP_LCD_SetTransparency+0x20>)
 8008788:	f7f9 ffba 	bl	8002700 <HAL_LTDC_SetAlpha>
}
 800878c:	bf00      	nop
 800878e:	3708      	adds	r7, #8
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}
 8008794:	20000860 	.word	0x20000860

08008798 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80087a0:	4b07      	ldr	r3, [pc, #28]	@ (80087c0 <BSP_LCD_SetTextColor+0x28>)
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	4907      	ldr	r1, [pc, #28]	@ (80087c4 <BSP_LCD_SetTextColor+0x2c>)
 80087a6:	4613      	mov	r3, r2
 80087a8:	005b      	lsls	r3, r3, #1
 80087aa:	4413      	add	r3, r2
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	440b      	add	r3, r1
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	601a      	str	r2, [r3, #0]
}
 80087b4:	bf00      	nop
 80087b6:	370c      	adds	r7, #12
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr
 80087c0:	20000948 	.word	0x20000948
 80087c4:	2000094c 	.word	0x2000094c

080087c8 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80087d0:	4b08      	ldr	r3, [pc, #32]	@ (80087f4 <BSP_LCD_SetFont+0x2c>)
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	4908      	ldr	r1, [pc, #32]	@ (80087f8 <BSP_LCD_SetFont+0x30>)
 80087d6:	4613      	mov	r3, r2
 80087d8:	005b      	lsls	r3, r3, #1
 80087da:	4413      	add	r3, r2
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	440b      	add	r3, r1
 80087e0:	3308      	adds	r3, #8
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	601a      	str	r2, [r3, #0]
}
 80087e6:	bf00      	nop
 80087e8:	370c      	adds	r7, #12
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr
 80087f2:	bf00      	nop
 80087f4:	20000948 	.word	0x20000948
 80087f8:	2000094c 	.word	0x2000094c

080087fc <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80087fc:	b480      	push	{r7}
 80087fe:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8008800:	4b07      	ldr	r3, [pc, #28]	@ (8008820 <BSP_LCD_GetFont+0x24>)
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	4907      	ldr	r1, [pc, #28]	@ (8008824 <BSP_LCD_GetFont+0x28>)
 8008806:	4613      	mov	r3, r2
 8008808:	005b      	lsls	r3, r3, #1
 800880a:	4413      	add	r3, r2
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	440b      	add	r3, r1
 8008810:	3308      	adds	r3, #8
 8008812:	681b      	ldr	r3, [r3, #0]
}
 8008814:	4618      	mov	r0, r3
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop
 8008820:	20000948 	.word	0x20000948
 8008824:	2000094c 	.word	0x2000094c

08008828 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8008828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800882a:	b085      	sub	sp, #20
 800882c:	af02      	add	r7, sp, #8
 800882e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8008830:	4b0f      	ldr	r3, [pc, #60]	@ (8008870 <BSP_LCD_Clear+0x48>)
 8008832:	681c      	ldr	r4, [r3, #0]
 8008834:	4b0e      	ldr	r3, [pc, #56]	@ (8008870 <BSP_LCD_Clear+0x48>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a0e      	ldr	r2, [pc, #56]	@ (8008874 <BSP_LCD_Clear+0x4c>)
 800883a:	2134      	movs	r1, #52	@ 0x34
 800883c:	fb01 f303 	mul.w	r3, r1, r3
 8008840:	4413      	add	r3, r2
 8008842:	335c      	adds	r3, #92	@ 0x5c
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	461e      	mov	r6, r3
 8008848:	f7ff fefc 	bl	8008644 <BSP_LCD_GetXSize>
 800884c:	4605      	mov	r5, r0
 800884e:	f7ff ff0d 	bl	800866c <BSP_LCD_GetYSize>
 8008852:	4602      	mov	r2, r0
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	9301      	str	r3, [sp, #4]
 8008858:	2300      	movs	r3, #0
 800885a:	9300      	str	r3, [sp, #0]
 800885c:	4613      	mov	r3, r2
 800885e:	462a      	mov	r2, r5
 8008860:	4631      	mov	r1, r6
 8008862:	4620      	mov	r0, r4
 8008864:	f000 fbf2 	bl	800904c <LL_FillBuffer>
}
 8008868:	bf00      	nop
 800886a:	370c      	adds	r7, #12
 800886c:	46bd      	mov	sp, r7
 800886e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008870:	20000948 	.word	0x20000948
 8008874:	20000860 	.word	0x20000860

08008878 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8008878:	b590      	push	{r4, r7, lr}
 800887a:	b083      	sub	sp, #12
 800887c:	af00      	add	r7, sp, #0
 800887e:	4603      	mov	r3, r0
 8008880:	80fb      	strh	r3, [r7, #6]
 8008882:	460b      	mov	r3, r1
 8008884:	80bb      	strh	r3, [r7, #4]
 8008886:	4613      	mov	r3, r2
 8008888:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800888a:	4b1b      	ldr	r3, [pc, #108]	@ (80088f8 <BSP_LCD_DisplayChar+0x80>)
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	491b      	ldr	r1, [pc, #108]	@ (80088fc <BSP_LCD_DisplayChar+0x84>)
 8008890:	4613      	mov	r3, r2
 8008892:	005b      	lsls	r3, r3, #1
 8008894:	4413      	add	r3, r2
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	440b      	add	r3, r1
 800889a:	3308      	adds	r3, #8
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	6819      	ldr	r1, [r3, #0]
 80088a0:	78fb      	ldrb	r3, [r7, #3]
 80088a2:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80088a6:	4b14      	ldr	r3, [pc, #80]	@ (80088f8 <BSP_LCD_DisplayChar+0x80>)
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	4c14      	ldr	r4, [pc, #80]	@ (80088fc <BSP_LCD_DisplayChar+0x84>)
 80088ac:	4613      	mov	r3, r2
 80088ae:	005b      	lsls	r3, r3, #1
 80088b0:	4413      	add	r3, r2
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	4423      	add	r3, r4
 80088b6:	3308      	adds	r3, #8
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80088bc:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80088c0:	4b0d      	ldr	r3, [pc, #52]	@ (80088f8 <BSP_LCD_DisplayChar+0x80>)
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	4c0d      	ldr	r4, [pc, #52]	@ (80088fc <BSP_LCD_DisplayChar+0x84>)
 80088c6:	4613      	mov	r3, r2
 80088c8:	005b      	lsls	r3, r3, #1
 80088ca:	4413      	add	r3, r2
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	4423      	add	r3, r4
 80088d0:	3308      	adds	r3, #8
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	889b      	ldrh	r3, [r3, #4]
 80088d6:	3307      	adds	r3, #7
 80088d8:	2b00      	cmp	r3, #0
 80088da:	da00      	bge.n	80088de <BSP_LCD_DisplayChar+0x66>
 80088dc:	3307      	adds	r3, #7
 80088de:	10db      	asrs	r3, r3, #3
 80088e0:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80088e4:	18ca      	adds	r2, r1, r3
 80088e6:	88b9      	ldrh	r1, [r7, #4]
 80088e8:	88fb      	ldrh	r3, [r7, #6]
 80088ea:	4618      	mov	r0, r3
 80088ec:	f000 faf6 	bl	8008edc <DrawChar>
}
 80088f0:	bf00      	nop
 80088f2:	370c      	adds	r7, #12
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd90      	pop	{r4, r7, pc}
 80088f8:	20000948 	.word	0x20000948
 80088fc:	2000094c 	.word	0x2000094c

08008900 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8008900:	b5b0      	push	{r4, r5, r7, lr}
 8008902:	b088      	sub	sp, #32
 8008904:	af00      	add	r7, sp, #0
 8008906:	60ba      	str	r2, [r7, #8]
 8008908:	461a      	mov	r2, r3
 800890a:	4603      	mov	r3, r0
 800890c:	81fb      	strh	r3, [r7, #14]
 800890e:	460b      	mov	r3, r1
 8008910:	81bb      	strh	r3, [r7, #12]
 8008912:	4613      	mov	r3, r2
 8008914:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8008916:	2301      	movs	r3, #1
 8008918:	83fb      	strh	r3, [r7, #30]
 800891a:	2300      	movs	r3, #0
 800891c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800891e:	2300      	movs	r3, #0
 8008920:	61bb      	str	r3, [r7, #24]
 8008922:	2300      	movs	r3, #0
 8008924:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800892a:	e002      	b.n	8008932 <BSP_LCD_DisplayStringAt+0x32>
 800892c:	69bb      	ldr	r3, [r7, #24]
 800892e:	3301      	adds	r3, #1
 8008930:	61bb      	str	r3, [r7, #24]
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	1c5a      	adds	r2, r3, #1
 8008936:	617a      	str	r2, [r7, #20]
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d1f6      	bne.n	800892c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800893e:	f7ff fe81 	bl	8008644 <BSP_LCD_GetXSize>
 8008942:	4601      	mov	r1, r0
 8008944:	4b50      	ldr	r3, [pc, #320]	@ (8008a88 <BSP_LCD_DisplayStringAt+0x188>)
 8008946:	681a      	ldr	r2, [r3, #0]
 8008948:	4850      	ldr	r0, [pc, #320]	@ (8008a8c <BSP_LCD_DisplayStringAt+0x18c>)
 800894a:	4613      	mov	r3, r2
 800894c:	005b      	lsls	r3, r3, #1
 800894e:	4413      	add	r3, r2
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	4403      	add	r3, r0
 8008954:	3308      	adds	r3, #8
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	889b      	ldrh	r3, [r3, #4]
 800895a:	fbb1 f3f3 	udiv	r3, r1, r3
 800895e:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8008960:	79fb      	ldrb	r3, [r7, #7]
 8008962:	2b03      	cmp	r3, #3
 8008964:	d01c      	beq.n	80089a0 <BSP_LCD_DisplayStringAt+0xa0>
 8008966:	2b03      	cmp	r3, #3
 8008968:	dc33      	bgt.n	80089d2 <BSP_LCD_DisplayStringAt+0xd2>
 800896a:	2b01      	cmp	r3, #1
 800896c:	d002      	beq.n	8008974 <BSP_LCD_DisplayStringAt+0x74>
 800896e:	2b02      	cmp	r3, #2
 8008970:	d019      	beq.n	80089a6 <BSP_LCD_DisplayStringAt+0xa6>
 8008972:	e02e      	b.n	80089d2 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8008974:	693a      	ldr	r2, [r7, #16]
 8008976:	69bb      	ldr	r3, [r7, #24]
 8008978:	1ad1      	subs	r1, r2, r3
 800897a:	4b43      	ldr	r3, [pc, #268]	@ (8008a88 <BSP_LCD_DisplayStringAt+0x188>)
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	4843      	ldr	r0, [pc, #268]	@ (8008a8c <BSP_LCD_DisplayStringAt+0x18c>)
 8008980:	4613      	mov	r3, r2
 8008982:	005b      	lsls	r3, r3, #1
 8008984:	4413      	add	r3, r2
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	4403      	add	r3, r0
 800898a:	3308      	adds	r3, #8
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	889b      	ldrh	r3, [r3, #4]
 8008990:	fb01 f303 	mul.w	r3, r1, r3
 8008994:	085b      	lsrs	r3, r3, #1
 8008996:	b29a      	uxth	r2, r3
 8008998:	89fb      	ldrh	r3, [r7, #14]
 800899a:	4413      	add	r3, r2
 800899c:	83fb      	strh	r3, [r7, #30]
      break;
 800899e:	e01b      	b.n	80089d8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 80089a0:	89fb      	ldrh	r3, [r7, #14]
 80089a2:	83fb      	strh	r3, [r7, #30]
      break;
 80089a4:	e018      	b.n	80089d8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80089a6:	693a      	ldr	r2, [r7, #16]
 80089a8:	69bb      	ldr	r3, [r7, #24]
 80089aa:	1ad3      	subs	r3, r2, r3
 80089ac:	b299      	uxth	r1, r3
 80089ae:	4b36      	ldr	r3, [pc, #216]	@ (8008a88 <BSP_LCD_DisplayStringAt+0x188>)
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	4836      	ldr	r0, [pc, #216]	@ (8008a8c <BSP_LCD_DisplayStringAt+0x18c>)
 80089b4:	4613      	mov	r3, r2
 80089b6:	005b      	lsls	r3, r3, #1
 80089b8:	4413      	add	r3, r2
 80089ba:	009b      	lsls	r3, r3, #2
 80089bc:	4403      	add	r3, r0
 80089be:	3308      	adds	r3, #8
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	889b      	ldrh	r3, [r3, #4]
 80089c4:	fb11 f303 	smulbb	r3, r1, r3
 80089c8:	b29a      	uxth	r2, r3
 80089ca:	89fb      	ldrh	r3, [r7, #14]
 80089cc:	1ad3      	subs	r3, r2, r3
 80089ce:	83fb      	strh	r3, [r7, #30]
      break;
 80089d0:	e002      	b.n	80089d8 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 80089d2:	89fb      	ldrh	r3, [r7, #14]
 80089d4:	83fb      	strh	r3, [r7, #30]
      break;
 80089d6:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80089d8:	8bfb      	ldrh	r3, [r7, #30]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d003      	beq.n	80089e6 <BSP_LCD_DisplayStringAt+0xe6>
 80089de:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	da1d      	bge.n	8008a22 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 80089e6:	2301      	movs	r3, #1
 80089e8:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80089ea:	e01a      	b.n	8008a22 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	781a      	ldrb	r2, [r3, #0]
 80089f0:	89b9      	ldrh	r1, [r7, #12]
 80089f2:	8bfb      	ldrh	r3, [r7, #30]
 80089f4:	4618      	mov	r0, r3
 80089f6:	f7ff ff3f 	bl	8008878 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 80089fa:	4b23      	ldr	r3, [pc, #140]	@ (8008a88 <BSP_LCD_DisplayStringAt+0x188>)
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	4923      	ldr	r1, [pc, #140]	@ (8008a8c <BSP_LCD_DisplayStringAt+0x18c>)
 8008a00:	4613      	mov	r3, r2
 8008a02:	005b      	lsls	r3, r3, #1
 8008a04:	4413      	add	r3, r2
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	440b      	add	r3, r1
 8008a0a:	3308      	adds	r3, #8
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	889a      	ldrh	r2, [r3, #4]
 8008a10:	8bfb      	ldrh	r3, [r7, #30]
 8008a12:	4413      	add	r3, r2
 8008a14:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	3301      	adds	r3, #1
 8008a1a:	60bb      	str	r3, [r7, #8]
    i++;
 8008a1c:	8bbb      	ldrh	r3, [r7, #28]
 8008a1e:	3301      	adds	r3, #1
 8008a20:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	bf14      	ite	ne
 8008a2a:	2301      	movne	r3, #1
 8008a2c:	2300      	moveq	r3, #0
 8008a2e:	b2dc      	uxtb	r4, r3
 8008a30:	f7ff fe08 	bl	8008644 <BSP_LCD_GetXSize>
 8008a34:	8bb9      	ldrh	r1, [r7, #28]
 8008a36:	4b14      	ldr	r3, [pc, #80]	@ (8008a88 <BSP_LCD_DisplayStringAt+0x188>)
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	4d14      	ldr	r5, [pc, #80]	@ (8008a8c <BSP_LCD_DisplayStringAt+0x18c>)
 8008a3c:	4613      	mov	r3, r2
 8008a3e:	005b      	lsls	r3, r3, #1
 8008a40:	4413      	add	r3, r2
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	442b      	add	r3, r5
 8008a46:	3308      	adds	r3, #8
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	889b      	ldrh	r3, [r3, #4]
 8008a4c:	fb01 f303 	mul.w	r3, r1, r3
 8008a50:	1ac3      	subs	r3, r0, r3
 8008a52:	b299      	uxth	r1, r3
 8008a54:	4b0c      	ldr	r3, [pc, #48]	@ (8008a88 <BSP_LCD_DisplayStringAt+0x188>)
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	480c      	ldr	r0, [pc, #48]	@ (8008a8c <BSP_LCD_DisplayStringAt+0x18c>)
 8008a5a:	4613      	mov	r3, r2
 8008a5c:	005b      	lsls	r3, r3, #1
 8008a5e:	4413      	add	r3, r2
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	4403      	add	r3, r0
 8008a64:	3308      	adds	r3, #8
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	889b      	ldrh	r3, [r3, #4]
 8008a6a:	4299      	cmp	r1, r3
 8008a6c:	bf2c      	ite	cs
 8008a6e:	2301      	movcs	r3, #1
 8008a70:	2300      	movcc	r3, #0
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	4023      	ands	r3, r4
 8008a76:	b2db      	uxtb	r3, r3
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d1b7      	bne.n	80089ec <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8008a7c:	bf00      	nop
 8008a7e:	bf00      	nop
 8008a80:	3720      	adds	r7, #32
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bdb0      	pop	{r4, r5, r7, pc}
 8008a86:	bf00      	nop
 8008a88:	20000948 	.word	0x20000948
 8008a8c:	2000094c 	.word	0x2000094c

08008a90 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	4603      	mov	r3, r0
 8008a98:	6039      	str	r1, [r7, #0]
 8008a9a:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8008a9c:	f7ff feae 	bl	80087fc <BSP_LCD_GetFont>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	88db      	ldrh	r3, [r3, #6]
 8008aa4:	88fa      	ldrh	r2, [r7, #6]
 8008aa6:	fb12 f303 	smulbb	r3, r2, r3
 8008aaa:	b299      	uxth	r1, r3
 8008aac:	2303      	movs	r3, #3
 8008aae:	683a      	ldr	r2, [r7, #0]
 8008ab0:	2000      	movs	r0, #0
 8008ab2:	f7ff ff25 	bl	8008900 <BSP_LCD_DisplayStringAt>
}
 8008ab6:	bf00      	nop
 8008ab8:	3708      	adds	r7, #8
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
	...

08008ac0 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8008ac0:	b5b0      	push	{r4, r5, r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	603a      	str	r2, [r7, #0]
 8008aca:	80fb      	strh	r3, [r7, #6]
 8008acc:	460b      	mov	r3, r1
 8008ace:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8008ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8008b48 <BSP_LCD_DrawPixel+0x88>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a1d      	ldr	r2, [pc, #116]	@ (8008b4c <BSP_LCD_DrawPixel+0x8c>)
 8008ad6:	2134      	movs	r1, #52	@ 0x34
 8008ad8:	fb01 f303 	mul.w	r3, r1, r3
 8008adc:	4413      	add	r3, r2
 8008ade:	3348      	adds	r3, #72	@ 0x48
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2b02      	cmp	r3, #2
 8008ae4:	d116      	bne.n	8008b14 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8008ae6:	4b18      	ldr	r3, [pc, #96]	@ (8008b48 <BSP_LCD_DrawPixel+0x88>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a18      	ldr	r2, [pc, #96]	@ (8008b4c <BSP_LCD_DrawPixel+0x8c>)
 8008aec:	2134      	movs	r1, #52	@ 0x34
 8008aee:	fb01 f303 	mul.w	r3, r1, r3
 8008af2:	4413      	add	r3, r2
 8008af4:	335c      	adds	r3, #92	@ 0x5c
 8008af6:	681c      	ldr	r4, [r3, #0]
 8008af8:	88bd      	ldrh	r5, [r7, #4]
 8008afa:	f7ff fda3 	bl	8008644 <BSP_LCD_GetXSize>
 8008afe:	4603      	mov	r3, r0
 8008b00:	fb03 f205 	mul.w	r2, r3, r5
 8008b04:	88fb      	ldrh	r3, [r7, #6]
 8008b06:	4413      	add	r3, r2
 8008b08:	005b      	lsls	r3, r3, #1
 8008b0a:	4423      	add	r3, r4
 8008b0c:	683a      	ldr	r2, [r7, #0]
 8008b0e:	b292      	uxth	r2, r2
 8008b10:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8008b12:	e015      	b.n	8008b40 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8008b14:	4b0c      	ldr	r3, [pc, #48]	@ (8008b48 <BSP_LCD_DrawPixel+0x88>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a0c      	ldr	r2, [pc, #48]	@ (8008b4c <BSP_LCD_DrawPixel+0x8c>)
 8008b1a:	2134      	movs	r1, #52	@ 0x34
 8008b1c:	fb01 f303 	mul.w	r3, r1, r3
 8008b20:	4413      	add	r3, r2
 8008b22:	335c      	adds	r3, #92	@ 0x5c
 8008b24:	681c      	ldr	r4, [r3, #0]
 8008b26:	88bd      	ldrh	r5, [r7, #4]
 8008b28:	f7ff fd8c 	bl	8008644 <BSP_LCD_GetXSize>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	fb03 f205 	mul.w	r2, r3, r5
 8008b32:	88fb      	ldrh	r3, [r7, #6]
 8008b34:	4413      	add	r3, r2
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	4423      	add	r3, r4
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	6013      	str	r3, [r2, #0]
}
 8008b40:	bf00      	nop
 8008b42:	3708      	adds	r7, #8
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bdb0      	pop	{r4, r5, r7, pc}
 8008b48:	20000948 	.word	0x20000948
 8008b4c:	20000860 	.word	0x20000860

08008b50 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8008b50:	b590      	push	{r4, r7, lr}
 8008b52:	b08b      	sub	sp, #44	@ 0x2c
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b60:	2300      	movs	r3, #0
 8008b62:	61bb      	str	r3, [r7, #24]
 8008b64:	2300      	movs	r3, #0
 8008b66:	617b      	str	r3, [r7, #20]
 8008b68:	2300      	movs	r3, #0
 8008b6a:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	330a      	adds	r3, #10
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	461a      	mov	r2, r3
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	330b      	adds	r3, #11
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	021b      	lsls	r3, r3, #8
 8008b80:	441a      	add	r2, r3
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	330c      	adds	r3, #12
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	041b      	lsls	r3, r3, #16
 8008b8a:	441a      	add	r2, r3
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	330d      	adds	r3, #13
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	061b      	lsls	r3, r3, #24
 8008b94:	4413      	add	r3, r2
 8008b96:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	3312      	adds	r3, #18
 8008b9c:	781b      	ldrb	r3, [r3, #0]
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	3313      	adds	r3, #19
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	021b      	lsls	r3, r3, #8
 8008ba8:	441a      	add	r2, r3
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	3314      	adds	r3, #20
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	041b      	lsls	r3, r3, #16
 8008bb2:	441a      	add	r2, r3
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	3315      	adds	r3, #21
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	061b      	lsls	r3, r3, #24
 8008bbc:	4413      	add	r3, r2
 8008bbe:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	3316      	adds	r3, #22
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	3317      	adds	r3, #23
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	021b      	lsls	r3, r3, #8
 8008bd0:	441a      	add	r2, r3
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	3318      	adds	r3, #24
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	041b      	lsls	r3, r3, #16
 8008bda:	441a      	add	r2, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	3319      	adds	r3, #25
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	061b      	lsls	r3, r3, #24
 8008be4:	4413      	add	r3, r2
 8008be6:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	331c      	adds	r3, #28
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	461a      	mov	r2, r3
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	331d      	adds	r3, #29
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	021b      	lsls	r3, r3, #8
 8008bf8:	4413      	add	r3, r2
 8008bfa:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8008bfc:	4b2b      	ldr	r3, [pc, #172]	@ (8008cac <BSP_LCD_DrawBitmap+0x15c>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a2b      	ldr	r2, [pc, #172]	@ (8008cb0 <BSP_LCD_DrawBitmap+0x160>)
 8008c02:	2134      	movs	r1, #52	@ 0x34
 8008c04:	fb01 f303 	mul.w	r3, r1, r3
 8008c08:	4413      	add	r3, r2
 8008c0a:	335c      	adds	r3, #92	@ 0x5c
 8008c0c:	681c      	ldr	r4, [r3, #0]
 8008c0e:	f7ff fd19 	bl	8008644 <BSP_LCD_GetXSize>
 8008c12:	4602      	mov	r2, r0
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	fb03 f202 	mul.w	r2, r3, r2
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	4413      	add	r3, r2
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	4423      	add	r3, r4
 8008c22:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	3b20      	subs	r3, #32
 8008c28:	2b07      	cmp	r3, #7
 8008c2a:	d802      	bhi.n	8008c32 <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	61fb      	str	r3, [r7, #28]
 8008c30:	e008      	b.n	8008c44 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	3b10      	subs	r3, #16
 8008c36:	2b07      	cmp	r3, #7
 8008c38:	d802      	bhi.n	8008c40 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 8008c3a:	2302      	movs	r3, #2
 8008c3c:	61fb      	str	r3, [r7, #28]
 8008c3e:	e001      	b.n	8008c44 <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 8008c40:	2301      	movs	r3, #1
 8008c42:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	3b01      	subs	r3, #1
 8008c48:	69ba      	ldr	r2, [r7, #24]
 8008c4a:	fb02 f303 	mul.w	r3, r2, r3
 8008c4e:	693a      	ldr	r2, [r7, #16]
 8008c50:	08d2      	lsrs	r2, r2, #3
 8008c52:	fb03 f202 	mul.w	r2, r3, r2
 8008c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c58:	4413      	add	r3, r2
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	4413      	add	r3, r2
 8008c5e:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8008c60:	2300      	movs	r3, #0
 8008c62:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c64:	e018      	b.n	8008c98 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 8008c66:	6a39      	ldr	r1, [r7, #32]
 8008c68:	69fb      	ldr	r3, [r7, #28]
 8008c6a:	69ba      	ldr	r2, [r7, #24]
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 fa39 	bl	80090e4 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 8008c72:	f7ff fce7 	bl	8008644 <BSP_LCD_GetXSize>
 8008c76:	4603      	mov	r3, r0
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	6a3a      	ldr	r2, [r7, #32]
 8008c7c:	4413      	add	r3, r2
 8008c7e:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	08db      	lsrs	r3, r3, #3
 8008c84:	69ba      	ldr	r2, [r7, #24]
 8008c86:	fb02 f303 	mul.w	r3, r2, r3
 8008c8a:	425b      	negs	r3, r3
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	4413      	add	r3, r2
 8008c90:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 8008c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c94:	3301      	adds	r3, #1
 8008c96:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d3e2      	bcc.n	8008c66 <BSP_LCD_DrawBitmap+0x116>
  } 
}
 8008ca0:	bf00      	nop
 8008ca2:	bf00      	nop
 8008ca4:	372c      	adds	r7, #44	@ 0x2c
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd90      	pop	{r4, r7, pc}
 8008caa:	bf00      	nop
 8008cac:	20000948 	.word	0x20000948
 8008cb0:	20000860 	.word	0x20000860

08008cb4 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8008cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8008ce4 <BSP_LCD_DisplayOn+0x30>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	699a      	ldr	r2, [r3, #24]
 8008cbe:	4b09      	ldr	r3, [pc, #36]	@ (8008ce4 <BSP_LCD_DisplayOn+0x30>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f042 0201 	orr.w	r2, r2, #1
 8008cc6:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8008cc8:	2201      	movs	r2, #1
 8008cca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8008cce:	4806      	ldr	r0, [pc, #24]	@ (8008ce8 <BSP_LCD_DisplayOn+0x34>)
 8008cd0:	f7f9 fb0e 	bl	80022f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	2108      	movs	r1, #8
 8008cd8:	4804      	ldr	r0, [pc, #16]	@ (8008cec <BSP_LCD_DisplayOn+0x38>)
 8008cda:	f7f9 fb09 	bl	80022f0 <HAL_GPIO_WritePin>
}
 8008cde:	bf00      	nop
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	20000860 	.word	0x20000860
 8008ce8:	40022000 	.word	0x40022000
 8008cec:	40022800 	.word	0x40022800

08008cf0 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b090      	sub	sp, #64	@ 0x40
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8008cfa:	4b64      	ldr	r3, [pc, #400]	@ (8008e8c <BSP_LCD_MspInit+0x19c>)
 8008cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cfe:	4a63      	ldr	r2, [pc, #396]	@ (8008e8c <BSP_LCD_MspInit+0x19c>)
 8008d00:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008d04:	6453      	str	r3, [r2, #68]	@ 0x44
 8008d06:	4b61      	ldr	r3, [pc, #388]	@ (8008e8c <BSP_LCD_MspInit+0x19c>)
 8008d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d0a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8008d12:	4b5e      	ldr	r3, [pc, #376]	@ (8008e8c <BSP_LCD_MspInit+0x19c>)
 8008d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d16:	4a5d      	ldr	r2, [pc, #372]	@ (8008e8c <BSP_LCD_MspInit+0x19c>)
 8008d18:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8008d1e:	4b5b      	ldr	r3, [pc, #364]	@ (8008e8c <BSP_LCD_MspInit+0x19c>)
 8008d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d26:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008d2a:	4b58      	ldr	r3, [pc, #352]	@ (8008e8c <BSP_LCD_MspInit+0x19c>)
 8008d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d2e:	4a57      	ldr	r2, [pc, #348]	@ (8008e8c <BSP_LCD_MspInit+0x19c>)
 8008d30:	f043 0310 	orr.w	r3, r3, #16
 8008d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8008d36:	4b55      	ldr	r3, [pc, #340]	@ (8008e8c <BSP_LCD_MspInit+0x19c>)
 8008d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d3a:	f003 0310 	and.w	r3, r3, #16
 8008d3e:	623b      	str	r3, [r7, #32]
 8008d40:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008d42:	4b52      	ldr	r3, [pc, #328]	@ (8008e8c <BSP_LCD_MspInit+0x19c>)
 8008d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d46:	4a51      	ldr	r2, [pc, #324]	@ (8008e8c <BSP_LCD_MspInit+0x19c>)
 8008d48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8008d4e:	4b4f      	ldr	r3, [pc, #316]	@ (8008e8c <BSP_LCD_MspInit+0x19c>)
 8008d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d56:	61fb      	str	r3, [r7, #28]
 8008d58:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8008d5a:	4b4c      	ldr	r3, [pc, #304]	@ (8008e8c <BSP_LCD_MspInit+0x19c>)
 8008d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d5e:	4a4b      	ldr	r2, [pc, #300]	@ (8008e8c <BSP_LCD_MspInit+0x19c>)
 8008d60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8008d66:	4b49      	ldr	r3, [pc, #292]	@ (8008e8c <BSP_LCD_MspInit+0x19c>)
 8008d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d6e:	61bb      	str	r3, [r7, #24]
 8008d70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8008d72:	4b46      	ldr	r3, [pc, #280]	@ (8008e8c <BSP_LCD_MspInit+0x19c>)
 8008d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d76:	4a45      	ldr	r2, [pc, #276]	@ (8008e8c <BSP_LCD_MspInit+0x19c>)
 8008d78:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8008d7e:	4b43      	ldr	r3, [pc, #268]	@ (8008e8c <BSP_LCD_MspInit+0x19c>)
 8008d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008d86:	617b      	str	r3, [r7, #20]
 8008d88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8008d8a:	4b40      	ldr	r3, [pc, #256]	@ (8008e8c <BSP_LCD_MspInit+0x19c>)
 8008d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d8e:	4a3f      	ldr	r2, [pc, #252]	@ (8008e8c <BSP_LCD_MspInit+0x19c>)
 8008d90:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8008d96:	4b3d      	ldr	r3, [pc, #244]	@ (8008e8c <BSP_LCD_MspInit+0x19c>)
 8008d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d9e:	613b      	str	r3, [r7, #16]
 8008da0:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8008da2:	4b3a      	ldr	r3, [pc, #232]	@ (8008e8c <BSP_LCD_MspInit+0x19c>)
 8008da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008da6:	4a39      	ldr	r2, [pc, #228]	@ (8008e8c <BSP_LCD_MspInit+0x19c>)
 8008da8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8008dae:	4b37      	ldr	r3, [pc, #220]	@ (8008e8c <BSP_LCD_MspInit+0x19c>)
 8008db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008db2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008db6:	60fb      	str	r3, [r7, #12]
 8008db8:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8008dba:	4b34      	ldr	r3, [pc, #208]	@ (8008e8c <BSP_LCD_MspInit+0x19c>)
 8008dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dbe:	4a33      	ldr	r2, [pc, #204]	@ (8008e8c <BSP_LCD_MspInit+0x19c>)
 8008dc0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8008dc6:	4b31      	ldr	r3, [pc, #196]	@ (8008e8c <BSP_LCD_MspInit+0x19c>)
 8008dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008dce:	60bb      	str	r3, [r7, #8]
 8008dd0:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8008dd2:	2310      	movs	r3, #16
 8008dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8008dd6:	2302      	movs	r3, #2
 8008dd8:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8008dde:	2302      	movs	r3, #2
 8008de0:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8008de2:	230e      	movs	r3, #14
 8008de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8008de6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008dea:	4619      	mov	r1, r3
 8008dec:	4828      	ldr	r0, [pc, #160]	@ (8008e90 <BSP_LCD_MspInit+0x1a0>)
 8008dee:	f7f9 f8bb 	bl	8001f68 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8008df2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8008df8:	2302      	movs	r3, #2
 8008dfa:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8008dfc:	2309      	movs	r3, #9
 8008dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8008e00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008e04:	4619      	mov	r1, r3
 8008e06:	4823      	ldr	r0, [pc, #140]	@ (8008e94 <BSP_LCD_MspInit+0x1a4>)
 8008e08:	f7f9 f8ae 	bl	8001f68 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8008e0c:	f44f 4366 	mov.w	r3, #58880	@ 0xe600
 8008e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8008e12:	2302      	movs	r3, #2
 8008e14:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8008e16:	230e      	movs	r3, #14
 8008e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8008e1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008e1e:	4619      	mov	r1, r3
 8008e20:	481d      	ldr	r0, [pc, #116]	@ (8008e98 <BSP_LCD_MspInit+0x1a8>)
 8008e22:	f7f9 f8a1 	bl	8001f68 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8008e26:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8008e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8008e2c:	2302      	movs	r3, #2
 8008e2e:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8008e30:	230e      	movs	r3, #14
 8008e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8008e34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008e38:	4619      	mov	r1, r3
 8008e3a:	4818      	ldr	r0, [pc, #96]	@ (8008e9c <BSP_LCD_MspInit+0x1ac>)
 8008e3c:	f7f9 f894 	bl	8001f68 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8008e40:	23f7      	movs	r3, #247	@ 0xf7
 8008e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8008e44:	2302      	movs	r3, #2
 8008e46:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8008e48:	230e      	movs	r3, #14
 8008e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8008e4c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008e50:	4619      	mov	r1, r3
 8008e52:	4813      	ldr	r0, [pc, #76]	@ (8008ea0 <BSP_LCD_MspInit+0x1b0>)
 8008e54:	f7f9 f888 	bl	8001f68 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8008e58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8008e62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008e66:	4619      	mov	r1, r3
 8008e68:	480b      	ldr	r0, [pc, #44]	@ (8008e98 <BSP_LCD_MspInit+0x1a8>)
 8008e6a:	f7f9 f87d 	bl	8001f68 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8008e6e:	2308      	movs	r3, #8
 8008e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8008e72:	2301      	movs	r3, #1
 8008e74:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8008e76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	4808      	ldr	r0, [pc, #32]	@ (8008ea0 <BSP_LCD_MspInit+0x1b0>)
 8008e7e:	f7f9 f873 	bl	8001f68 <HAL_GPIO_Init>
}
 8008e82:	bf00      	nop
 8008e84:	3740      	adds	r7, #64	@ 0x40
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
 8008e8a:	bf00      	nop
 8008e8c:	40023800 	.word	0x40023800
 8008e90:	40021000 	.word	0x40021000
 8008e94:	40021800 	.word	0x40021800
 8008e98:	40022000 	.word	0x40022000
 8008e9c:	40022400 	.word	0x40022400
 8008ea0:	40022800 	.word	0x40022800

08008ea4 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b082      	sub	sp, #8
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8008eae:	4b0a      	ldr	r3, [pc, #40]	@ (8008ed8 <BSP_LCD_ClockConfig+0x34>)
 8008eb0:	2208      	movs	r2, #8
 8008eb2:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8008eb4:	4b08      	ldr	r3, [pc, #32]	@ (8008ed8 <BSP_LCD_ClockConfig+0x34>)
 8008eb6:	22c0      	movs	r2, #192	@ 0xc0
 8008eb8:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8008eba:	4b07      	ldr	r3, [pc, #28]	@ (8008ed8 <BSP_LCD_ClockConfig+0x34>)
 8008ebc:	2205      	movs	r2, #5
 8008ebe:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8008ec0:	4b05      	ldr	r3, [pc, #20]	@ (8008ed8 <BSP_LCD_ClockConfig+0x34>)
 8008ec2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8008ec6:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8008ec8:	4803      	ldr	r0, [pc, #12]	@ (8008ed8 <BSP_LCD_ClockConfig+0x34>)
 8008eca:	f7fa faa3 	bl	8003414 <HAL_RCCEx_PeriphCLKConfig>
}
 8008ece:	bf00      	nop
 8008ed0:	3708      	adds	r7, #8
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
 8008ed6:	bf00      	nop
 8008ed8:	20000964 	.word	0x20000964

08008edc <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b088      	sub	sp, #32
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	603a      	str	r2, [r7, #0]
 8008ee6:	80fb      	strh	r3, [r7, #6]
 8008ee8:	460b      	mov	r3, r1
 8008eea:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8008eec:	2300      	movs	r3, #0
 8008eee:	61fb      	str	r3, [r7, #28]
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8008ef4:	4b53      	ldr	r3, [pc, #332]	@ (8009044 <DrawChar+0x168>)
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	4953      	ldr	r1, [pc, #332]	@ (8009048 <DrawChar+0x16c>)
 8008efa:	4613      	mov	r3, r2
 8008efc:	005b      	lsls	r3, r3, #1
 8008efe:	4413      	add	r3, r2
 8008f00:	009b      	lsls	r3, r3, #2
 8008f02:	440b      	add	r3, r1
 8008f04:	3308      	adds	r3, #8
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	88db      	ldrh	r3, [r3, #6]
 8008f0a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8008f0c:	4b4d      	ldr	r3, [pc, #308]	@ (8009044 <DrawChar+0x168>)
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	494d      	ldr	r1, [pc, #308]	@ (8009048 <DrawChar+0x16c>)
 8008f12:	4613      	mov	r3, r2
 8008f14:	005b      	lsls	r3, r3, #1
 8008f16:	4413      	add	r3, r2
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	440b      	add	r3, r1
 8008f1c:	3308      	adds	r3, #8
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	889b      	ldrh	r3, [r3, #4]
 8008f22:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8008f24:	8a3b      	ldrh	r3, [r7, #16]
 8008f26:	3307      	adds	r3, #7
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	da00      	bge.n	8008f2e <DrawChar+0x52>
 8008f2c:	3307      	adds	r3, #7
 8008f2e:	10db      	asrs	r3, r3, #3
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	00db      	lsls	r3, r3, #3
 8008f34:	b2da      	uxtb	r2, r3
 8008f36:	8a3b      	ldrh	r3, [r7, #16]
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	1ad3      	subs	r3, r2, r3
 8008f3c:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8008f3e:	2300      	movs	r3, #0
 8008f40:	61fb      	str	r3, [r7, #28]
 8008f42:	e076      	b.n	8009032 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8008f44:	8a3b      	ldrh	r3, [r7, #16]
 8008f46:	3307      	adds	r3, #7
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	da00      	bge.n	8008f4e <DrawChar+0x72>
 8008f4c:	3307      	adds	r3, #7
 8008f4e:	10db      	asrs	r3, r3, #3
 8008f50:	461a      	mov	r2, r3
 8008f52:	69fb      	ldr	r3, [r7, #28]
 8008f54:	fb02 f303 	mul.w	r3, r2, r3
 8008f58:	683a      	ldr	r2, [r7, #0]
 8008f5a:	4413      	add	r3, r2
 8008f5c:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8008f5e:	8a3b      	ldrh	r3, [r7, #16]
 8008f60:	3307      	adds	r3, #7
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	da00      	bge.n	8008f68 <DrawChar+0x8c>
 8008f66:	3307      	adds	r3, #7
 8008f68:	10db      	asrs	r3, r3, #3
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d002      	beq.n	8008f74 <DrawChar+0x98>
 8008f6e:	2b02      	cmp	r3, #2
 8008f70:	d004      	beq.n	8008f7c <DrawChar+0xa0>
 8008f72:	e00c      	b.n	8008f8e <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	617b      	str	r3, [r7, #20]
      break;
 8008f7a:	e016      	b.n	8008faa <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	021b      	lsls	r3, r3, #8
 8008f82:	68ba      	ldr	r2, [r7, #8]
 8008f84:	3201      	adds	r2, #1
 8008f86:	7812      	ldrb	r2, [r2, #0]
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	617b      	str	r3, [r7, #20]
      break;
 8008f8c:	e00d      	b.n	8008faa <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	041a      	lsls	r2, r3, #16
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	3301      	adds	r3, #1
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	021b      	lsls	r3, r3, #8
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	68ba      	ldr	r2, [r7, #8]
 8008fa0:	3202      	adds	r2, #2
 8008fa2:	7812      	ldrb	r2, [r2, #0]
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	617b      	str	r3, [r7, #20]
      break;
 8008fa8:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8008faa:	2300      	movs	r3, #0
 8008fac:	61bb      	str	r3, [r7, #24]
 8008fae:	e036      	b.n	800901e <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8008fb0:	8a3a      	ldrh	r2, [r7, #16]
 8008fb2:	69bb      	ldr	r3, [r7, #24]
 8008fb4:	1ad2      	subs	r2, r2, r3
 8008fb6:	7bfb      	ldrb	r3, [r7, #15]
 8008fb8:	4413      	add	r3, r2
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	4013      	ands	r3, r2
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d012      	beq.n	8008ff2 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8008fcc:	69bb      	ldr	r3, [r7, #24]
 8008fce:	b29a      	uxth	r2, r3
 8008fd0:	88fb      	ldrh	r3, [r7, #6]
 8008fd2:	4413      	add	r3, r2
 8008fd4:	b298      	uxth	r0, r3
 8008fd6:	4b1b      	ldr	r3, [pc, #108]	@ (8009044 <DrawChar+0x168>)
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	491b      	ldr	r1, [pc, #108]	@ (8009048 <DrawChar+0x16c>)
 8008fdc:	4613      	mov	r3, r2
 8008fde:	005b      	lsls	r3, r3, #1
 8008fe0:	4413      	add	r3, r2
 8008fe2:	009b      	lsls	r3, r3, #2
 8008fe4:	440b      	add	r3, r1
 8008fe6:	681a      	ldr	r2, [r3, #0]
 8008fe8:	88bb      	ldrh	r3, [r7, #4]
 8008fea:	4619      	mov	r1, r3
 8008fec:	f7ff fd68 	bl	8008ac0 <BSP_LCD_DrawPixel>
 8008ff0:	e012      	b.n	8009018 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8008ff2:	69bb      	ldr	r3, [r7, #24]
 8008ff4:	b29a      	uxth	r2, r3
 8008ff6:	88fb      	ldrh	r3, [r7, #6]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	b298      	uxth	r0, r3
 8008ffc:	4b11      	ldr	r3, [pc, #68]	@ (8009044 <DrawChar+0x168>)
 8008ffe:	681a      	ldr	r2, [r3, #0]
 8009000:	4911      	ldr	r1, [pc, #68]	@ (8009048 <DrawChar+0x16c>)
 8009002:	4613      	mov	r3, r2
 8009004:	005b      	lsls	r3, r3, #1
 8009006:	4413      	add	r3, r2
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	440b      	add	r3, r1
 800900c:	3304      	adds	r3, #4
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	88bb      	ldrh	r3, [r7, #4]
 8009012:	4619      	mov	r1, r3
 8009014:	f7ff fd54 	bl	8008ac0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8009018:	69bb      	ldr	r3, [r7, #24]
 800901a:	3301      	adds	r3, #1
 800901c:	61bb      	str	r3, [r7, #24]
 800901e:	8a3b      	ldrh	r3, [r7, #16]
 8009020:	69ba      	ldr	r2, [r7, #24]
 8009022:	429a      	cmp	r2, r3
 8009024:	d3c4      	bcc.n	8008fb0 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8009026:	88bb      	ldrh	r3, [r7, #4]
 8009028:	3301      	adds	r3, #1
 800902a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800902c:	69fb      	ldr	r3, [r7, #28]
 800902e:	3301      	adds	r3, #1
 8009030:	61fb      	str	r3, [r7, #28]
 8009032:	8a7b      	ldrh	r3, [r7, #18]
 8009034:	69fa      	ldr	r2, [r7, #28]
 8009036:	429a      	cmp	r2, r3
 8009038:	d384      	bcc.n	8008f44 <DrawChar+0x68>
  }
}
 800903a:	bf00      	nop
 800903c:	bf00      	nop
 800903e:	3720      	adds	r7, #32
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}
 8009044:	20000948 	.word	0x20000948
 8009048:	2000094c 	.word	0x2000094c

0800904c <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b086      	sub	sp, #24
 8009050:	af02      	add	r7, sp, #8
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	607a      	str	r2, [r7, #4]
 8009058:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800905a:	4b1e      	ldr	r3, [pc, #120]	@ (80090d4 <LL_FillBuffer+0x88>)
 800905c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8009060:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8009062:	4b1d      	ldr	r3, [pc, #116]	@ (80090d8 <LL_FillBuffer+0x8c>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4a1d      	ldr	r2, [pc, #116]	@ (80090dc <LL_FillBuffer+0x90>)
 8009068:	2134      	movs	r1, #52	@ 0x34
 800906a:	fb01 f303 	mul.w	r3, r1, r3
 800906e:	4413      	add	r3, r2
 8009070:	3348      	adds	r3, #72	@ 0x48
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	2b02      	cmp	r3, #2
 8009076:	d103      	bne.n	8009080 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8009078:	4b16      	ldr	r3, [pc, #88]	@ (80090d4 <LL_FillBuffer+0x88>)
 800907a:	2202      	movs	r2, #2
 800907c:	609a      	str	r2, [r3, #8]
 800907e:	e002      	b.n	8009086 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8009080:	4b14      	ldr	r3, [pc, #80]	@ (80090d4 <LL_FillBuffer+0x88>)
 8009082:	2200      	movs	r2, #0
 8009084:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8009086:	4a13      	ldr	r2, [pc, #76]	@ (80090d4 <LL_FillBuffer+0x88>)
 8009088:	69bb      	ldr	r3, [r7, #24]
 800908a:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 800908c:	4b11      	ldr	r3, [pc, #68]	@ (80090d4 <LL_FillBuffer+0x88>)
 800908e:	4a14      	ldr	r2, [pc, #80]	@ (80090e0 <LL_FillBuffer+0x94>)
 8009090:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8009092:	4810      	ldr	r0, [pc, #64]	@ (80090d4 <LL_FillBuffer+0x88>)
 8009094:	f7f8 fcdc 	bl	8001a50 <HAL_DMA2D_Init>
 8009098:	4603      	mov	r3, r0
 800909a:	2b00      	cmp	r3, #0
 800909c:	d115      	bne.n	80090ca <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800909e:	68f9      	ldr	r1, [r7, #12]
 80090a0:	480c      	ldr	r0, [pc, #48]	@ (80090d4 <LL_FillBuffer+0x88>)
 80090a2:	f7f8 fe33 	bl	8001d0c <HAL_DMA2D_ConfigLayer>
 80090a6:	4603      	mov	r3, r0
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d10e      	bne.n	80090ca <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80090ac:	68ba      	ldr	r2, [r7, #8]
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	9300      	str	r3, [sp, #0]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	69f9      	ldr	r1, [r7, #28]
 80090b6:	4807      	ldr	r0, [pc, #28]	@ (80090d4 <LL_FillBuffer+0x88>)
 80090b8:	f7f8 fd14 	bl	8001ae4 <HAL_DMA2D_Start>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d103      	bne.n	80090ca <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80090c2:	210a      	movs	r1, #10
 80090c4:	4803      	ldr	r0, [pc, #12]	@ (80090d4 <LL_FillBuffer+0x88>)
 80090c6:	f7f8 fd38 	bl	8001b3a <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80090ca:	bf00      	nop
 80090cc:	3710      	adds	r7, #16
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
 80090d2:	bf00      	nop
 80090d4:	20000908 	.word	0x20000908
 80090d8:	20000948 	.word	0x20000948
 80090dc:	20000860 	.word	0x20000860
 80090e0:	4002b000 	.word	0x4002b000

080090e4 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b086      	sub	sp, #24
 80090e8:	af02      	add	r7, sp, #8
 80090ea:	60f8      	str	r0, [r7, #12]
 80090ec:	60b9      	str	r1, [r7, #8]
 80090ee:	607a      	str	r2, [r7, #4]
 80090f0:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 80090f2:	4b1c      	ldr	r3, [pc, #112]	@ (8009164 <LL_ConvertLineToARGB8888+0x80>)
 80090f4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80090f8:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80090fa:	4b1a      	ldr	r3, [pc, #104]	@ (8009164 <LL_ConvertLineToARGB8888+0x80>)
 80090fc:	2200      	movs	r2, #0
 80090fe:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 8009100:	4b18      	ldr	r3, [pc, #96]	@ (8009164 <LL_ConvertLineToARGB8888+0x80>)
 8009102:	2200      	movs	r2, #0
 8009104:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8009106:	4b17      	ldr	r3, [pc, #92]	@ (8009164 <LL_ConvertLineToARGB8888+0x80>)
 8009108:	2200      	movs	r2, #0
 800910a:	631a      	str	r2, [r3, #48]	@ 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 800910c:	4b15      	ldr	r3, [pc, #84]	@ (8009164 <LL_ConvertLineToARGB8888+0x80>)
 800910e:	22ff      	movs	r2, #255	@ 0xff
 8009110:	635a      	str	r2, [r3, #52]	@ 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 8009112:	4a14      	ldr	r2, [pc, #80]	@ (8009164 <LL_ConvertLineToARGB8888+0x80>)
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 8009118:	4b12      	ldr	r3, [pc, #72]	@ (8009164 <LL_ConvertLineToARGB8888+0x80>)
 800911a:	2200      	movs	r2, #0
 800911c:	629a      	str	r2, [r3, #40]	@ 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 800911e:	4b11      	ldr	r3, [pc, #68]	@ (8009164 <LL_ConvertLineToARGB8888+0x80>)
 8009120:	4a11      	ldr	r2, [pc, #68]	@ (8009168 <LL_ConvertLineToARGB8888+0x84>)
 8009122:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8009124:	480f      	ldr	r0, [pc, #60]	@ (8009164 <LL_ConvertLineToARGB8888+0x80>)
 8009126:	f7f8 fc93 	bl	8001a50 <HAL_DMA2D_Init>
 800912a:	4603      	mov	r3, r0
 800912c:	2b00      	cmp	r3, #0
 800912e:	d115      	bne.n	800915c <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 8009130:	2101      	movs	r1, #1
 8009132:	480c      	ldr	r0, [pc, #48]	@ (8009164 <LL_ConvertLineToARGB8888+0x80>)
 8009134:	f7f8 fdea 	bl	8001d0c <HAL_DMA2D_ConfigLayer>
 8009138:	4603      	mov	r3, r0
 800913a:	2b00      	cmp	r3, #0
 800913c:	d10e      	bne.n	800915c <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 800913e:	68f9      	ldr	r1, [r7, #12]
 8009140:	68ba      	ldr	r2, [r7, #8]
 8009142:	2301      	movs	r3, #1
 8009144:	9300      	str	r3, [sp, #0]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	4806      	ldr	r0, [pc, #24]	@ (8009164 <LL_ConvertLineToARGB8888+0x80>)
 800914a:	f7f8 fccb 	bl	8001ae4 <HAL_DMA2D_Start>
 800914e:	4603      	mov	r3, r0
 8009150:	2b00      	cmp	r3, #0
 8009152:	d103      	bne.n	800915c <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8009154:	210a      	movs	r1, #10
 8009156:	4803      	ldr	r0, [pc, #12]	@ (8009164 <LL_ConvertLineToARGB8888+0x80>)
 8009158:	f7f8 fcef 	bl	8001b3a <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800915c:	bf00      	nop
 800915e:	3710      	adds	r7, #16
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}
 8009164:	20000908 	.word	0x20000908
 8009168:	4002b000 	.word	0x4002b000

0800916c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{ 
 800916c:	b580      	push	{r7, lr}
 800916e:	b082      	sub	sp, #8
 8009170:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009172:	2300      	movs	r3, #0
 8009174:	71fb      	strb	r3, [r7, #7]
  
  /* uSD device interface configuration */
  uSdHandle.Instance = SDMMC1;
 8009176:	4b20      	ldr	r3, [pc, #128]	@ (80091f8 <BSP_SD_Init+0x8c>)
 8009178:	4a20      	ldr	r2, [pc, #128]	@ (80091fc <BSP_SD_Init+0x90>)
 800917a:	601a      	str	r2, [r3, #0]

  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800917c:	4b1e      	ldr	r3, [pc, #120]	@ (80091f8 <BSP_SD_Init+0x8c>)
 800917e:	2200      	movs	r2, #0
 8009180:	605a      	str	r2, [r3, #4]
  uSdHandle.Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8009182:	4b1d      	ldr	r3, [pc, #116]	@ (80091f8 <BSP_SD_Init+0x8c>)
 8009184:	2200      	movs	r2, #0
 8009186:	609a      	str	r2, [r3, #8]
  uSdHandle.Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009188:	4b1b      	ldr	r3, [pc, #108]	@ (80091f8 <BSP_SD_Init+0x8c>)
 800918a:	2200      	movs	r2, #0
 800918c:	60da      	str	r2, [r3, #12]
  uSdHandle.Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800918e:	4b1a      	ldr	r3, [pc, #104]	@ (80091f8 <BSP_SD_Init+0x8c>)
 8009190:	2200      	movs	r2, #0
 8009192:	611a      	str	r2, [r3, #16]
  uSdHandle.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009194:	4b18      	ldr	r3, [pc, #96]	@ (80091f8 <BSP_SD_Init+0x8c>)
 8009196:	2200      	movs	r2, #0
 8009198:	615a      	str	r2, [r3, #20]
  uSdHandle.Init.ClockDiv            = SDMMC_TRANSFER_CLK_DIV;
 800919a:	4b17      	ldr	r3, [pc, #92]	@ (80091f8 <BSP_SD_Init+0x8c>)
 800919c:	2200      	movs	r2, #0
 800919e:	619a      	str	r2, [r3, #24]
  
  /* Msp SD Detect pin initialization */
  BSP_SD_Detect_MspInit(&uSdHandle, NULL);
 80091a0:	2100      	movs	r1, #0
 80091a2:	4815      	ldr	r0, [pc, #84]	@ (80091f8 <BSP_SD_Init+0x8c>)
 80091a4:	f000 f968 	bl	8009478 <BSP_SD_Detect_MspInit>
  if(BSP_SD_IsDetected() != SD_PRESENT)   /* Check if SD card is present */
 80091a8:	f000 f82a 	bl	8009200 <BSP_SD_IsDetected>
 80091ac:	4603      	mov	r3, r0
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d001      	beq.n	80091b6 <BSP_SD_Init+0x4a>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80091b2:	2302      	movs	r3, #2
 80091b4:	e01c      	b.n	80091f0 <BSP_SD_Init+0x84>
  }
  
  /* Msp SD initialization */
  BSP_SD_MspInit(&uSdHandle, NULL);
 80091b6:	2100      	movs	r1, #0
 80091b8:	480f      	ldr	r0, [pc, #60]	@ (80091f8 <BSP_SD_Init+0x8c>)
 80091ba:	f000 f871 	bl	80092a0 <BSP_SD_MspInit>

  /* HAL SD initialization */
  if(HAL_SD_Init(&uSdHandle) != HAL_OK)
 80091be:	480e      	ldr	r0, [pc, #56]	@ (80091f8 <BSP_SD_Init+0x8c>)
 80091c0:	f7fa fd18 	bl	8003bf4 <HAL_SD_Init>
 80091c4:	4603      	mov	r3, r0
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d001      	beq.n	80091ce <BSP_SD_Init+0x62>
  {
    sd_state = MSD_ERROR;
 80091ca:	2301      	movs	r3, #1
 80091cc:	71fb      	strb	r3, [r7, #7]
  }
  
  /* Configure SD Bus width */
  if(sd_state == MSD_OK)
 80091ce:	79fb      	ldrb	r3, [r7, #7]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d10c      	bne.n	80091ee <BSP_SD_Init+0x82>
  {
    /* Enable wide operation */ 
    if(HAL_SD_ConfigWideBusOperation(&uSdHandle, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80091d4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80091d8:	4807      	ldr	r0, [pc, #28]	@ (80091f8 <BSP_SD_Init+0x8c>)
 80091da:	f7fb faf5 	bl	80047c8 <HAL_SD_ConfigWideBusOperation>
 80091de:	4603      	mov	r3, r0
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d002      	beq.n	80091ea <BSP_SD_Init+0x7e>
    {
      sd_state = MSD_ERROR;
 80091e4:	2301      	movs	r3, #1
 80091e6:	71fb      	strb	r3, [r7, #7]
 80091e8:	e001      	b.n	80091ee <BSP_SD_Init+0x82>
    }
    else
    {
      sd_state = MSD_OK;
 80091ea:	2300      	movs	r3, #0
 80091ec:	71fb      	strb	r3, [r7, #7]
    }
  }
  
  return  sd_state;
 80091ee:	79fb      	ldrb	r3, [r7, #7]
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3708      	adds	r7, #8
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}
 80091f8:	200009e8 	.word	0x200009e8
 80091fc:	40012c00 	.word	0x40012c00

08009200 <BSP_SD_IsDetected>:
/**
  * @brief  Detects if SD card is correctly plugged in the memory slot or not.
  * @retval Returns if SD is detected or not
  */
uint8_t BSP_SD_IsDetected(void)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b082      	sub	sp, #8
 8009204:	af00      	add	r7, sp, #0
  __IO uint8_t      status = SD_PRESENT;
 8009206:	2301      	movs	r3, #1
 8009208:	71fb      	strb	r3, [r7, #7]
  
  /* Check SD card detect pin */
  if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET)
 800920a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800920e:	4807      	ldr	r0, [pc, #28]	@ (800922c <BSP_SD_IsDetected+0x2c>)
 8009210:	f7f9 f856 	bl	80022c0 <HAL_GPIO_ReadPin>
 8009214:	4603      	mov	r3, r0
 8009216:	2b01      	cmp	r3, #1
 8009218:	d101      	bne.n	800921e <BSP_SD_IsDetected+0x1e>
  {
    status = SD_NOT_PRESENT;
 800921a:	2300      	movs	r3, #0
 800921c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800921e:	79fb      	ldrb	r3, [r7, #7]
 8009220:	b2db      	uxtb	r3, r3
}
 8009222:	4618      	mov	r0, r3
 8009224:	3708      	adds	r7, #8
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop
 800922c:	40020800 	.word	0x40020800

08009230 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b086      	sub	sp, #24
 8009234:	af02      	add	r7, sp, #8
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	607a      	str	r2, [r7, #4]
 800923c:	603b      	str	r3, [r7, #0]
  if(HAL_SD_ReadBlocks(&uSdHandle, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	9300      	str	r3, [sp, #0]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	68ba      	ldr	r2, [r7, #8]
 8009246:	68f9      	ldr	r1, [r7, #12]
 8009248:	4806      	ldr	r0, [pc, #24]	@ (8009264 <BSP_SD_ReadBlocks+0x34>)
 800924a:	f7fa fd6c 	bl	8003d26 <HAL_SD_ReadBlocks>
 800924e:	4603      	mov	r3, r0
 8009250:	2b00      	cmp	r3, #0
 8009252:	d001      	beq.n	8009258 <BSP_SD_ReadBlocks+0x28>
  {
    return MSD_ERROR;
 8009254:	2301      	movs	r3, #1
 8009256:	e000      	b.n	800925a <BSP_SD_ReadBlocks+0x2a>
  }
  else
  {
    return MSD_OK;
 8009258:	2300      	movs	r3, #0
  }
}
 800925a:	4618      	mov	r0, r3
 800925c:	3710      	adds	r7, #16
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	200009e8 	.word	0x200009e8

08009268 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b086      	sub	sp, #24
 800926c:	af02      	add	r7, sp, #8
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	607a      	str	r2, [r7, #4]
 8009274:	603b      	str	r3, [r7, #0]
  if(HAL_SD_WriteBlocks(&uSdHandle, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	9300      	str	r3, [sp, #0]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	68ba      	ldr	r2, [r7, #8]
 800927e:	68f9      	ldr	r1, [r7, #12]
 8009280:	4806      	ldr	r0, [pc, #24]	@ (800929c <BSP_SD_WriteBlocks+0x34>)
 8009282:	f7fa fee6 	bl	8004052 <HAL_SD_WriteBlocks>
 8009286:	4603      	mov	r3, r0
 8009288:	2b00      	cmp	r3, #0
 800928a:	d001      	beq.n	8009290 <BSP_SD_WriteBlocks+0x28>
  {
    return MSD_ERROR;
 800928c:	2301      	movs	r3, #1
 800928e:	e000      	b.n	8009292 <BSP_SD_WriteBlocks+0x2a>
  }
  else
  {
    return MSD_OK;
 8009290:	2300      	movs	r3, #0
  }
}
 8009292:	4618      	mov	r0, r3
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	200009e8 	.word	0x200009e8

080092a0 <BSP_SD_MspInit>:
  * @param  hsd: SD handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SD_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b08c      	sub	sp, #48	@ 0x30
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_rx_handle;
  static DMA_HandleTypeDef dma_tx_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable SDIO clock */
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 80092aa:	4b6c      	ldr	r3, [pc, #432]	@ (800945c <BSP_SD_MspInit+0x1bc>)
 80092ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092ae:	4a6b      	ldr	r2, [pc, #428]	@ (800945c <BSP_SD_MspInit+0x1bc>)
 80092b0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80092b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80092b6:	4b69      	ldr	r3, [pc, #420]	@ (800945c <BSP_SD_MspInit+0x1bc>)
 80092b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80092be:	61bb      	str	r3, [r7, #24]
 80092c0:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable DMA2 clocks */
  __DMAx_TxRx_CLK_ENABLE();
 80092c2:	4b66      	ldr	r3, [pc, #408]	@ (800945c <BSP_SD_MspInit+0x1bc>)
 80092c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092c6:	4a65      	ldr	r2, [pc, #404]	@ (800945c <BSP_SD_MspInit+0x1bc>)
 80092c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80092cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80092ce:	4b63      	ldr	r3, [pc, #396]	@ (800945c <BSP_SD_MspInit+0x1bc>)
 80092d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80092d6:	617b      	str	r3, [r7, #20]
 80092d8:	697b      	ldr	r3, [r7, #20]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80092da:	4b60      	ldr	r3, [pc, #384]	@ (800945c <BSP_SD_MspInit+0x1bc>)
 80092dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092de:	4a5f      	ldr	r2, [pc, #380]	@ (800945c <BSP_SD_MspInit+0x1bc>)
 80092e0:	f043 0304 	orr.w	r3, r3, #4
 80092e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80092e6:	4b5d      	ldr	r3, [pc, #372]	@ (800945c <BSP_SD_MspInit+0x1bc>)
 80092e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092ea:	f003 0304 	and.w	r3, r3, #4
 80092ee:	613b      	str	r3, [r7, #16]
 80092f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80092f2:	4b5a      	ldr	r3, [pc, #360]	@ (800945c <BSP_SD_MspInit+0x1bc>)
 80092f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092f6:	4a59      	ldr	r2, [pc, #356]	@ (800945c <BSP_SD_MspInit+0x1bc>)
 80092f8:	f043 0308 	orr.w	r3, r3, #8
 80092fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80092fe:	4b57      	ldr	r3, [pc, #348]	@ (800945c <BSP_SD_MspInit+0x1bc>)
 8009300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009302:	f003 0308 	and.w	r3, r3, #8
 8009306:	60fb      	str	r3, [r7, #12]
 8009308:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800930a:	2302      	movs	r3, #2
 800930c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800930e:	2301      	movs	r3, #1
 8009310:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8009312:	2303      	movs	r3, #3
 8009314:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = GPIO_AF12_SDMMC1;
 8009316:	230c      	movs	r3, #12
 8009318:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 800931a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800931e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8009320:	f107 031c 	add.w	r3, r7, #28
 8009324:	4619      	mov	r1, r3
 8009326:	484e      	ldr	r0, [pc, #312]	@ (8009460 <BSP_SD_MspInit+0x1c0>)
 8009328:	f7f8 fe1e 	bl	8001f68 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin = GPIO_PIN_2;
 800932c:	2304      	movs	r3, #4
 800932e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8009330:	f107 031c 	add.w	r3, r7, #28
 8009334:	4619      	mov	r1, r3
 8009336:	484b      	ldr	r0, [pc, #300]	@ (8009464 <BSP_SD_MspInit+0x1c4>)
 8009338:	f7f8 fe16 	bl	8001f68 <HAL_GPIO_Init>

  /* NVIC configuration for SDIO interrupts */
  HAL_NVIC_SetPriority(SDMMC1_IRQn, 0x0E, 0);
 800933c:	2200      	movs	r2, #0
 800933e:	210e      	movs	r1, #14
 8009340:	2031      	movs	r0, #49	@ 0x31
 8009342:	f7f8 f8a6 	bl	8001492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8009346:	2031      	movs	r0, #49	@ 0x31
 8009348:	f7f8 f8bf 	bl	80014ca <HAL_NVIC_EnableIRQ>
    
  /* Configure DMA Rx parameters */
  dma_rx_handle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 800934c:	4b46      	ldr	r3, [pc, #280]	@ (8009468 <BSP_SD_MspInit+0x1c8>)
 800934e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8009352:	605a      	str	r2, [r3, #4]
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8009354:	4b44      	ldr	r3, [pc, #272]	@ (8009468 <BSP_SD_MspInit+0x1c8>)
 8009356:	2200      	movs	r2, #0
 8009358:	609a      	str	r2, [r3, #8]
  dma_rx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 800935a:	4b43      	ldr	r3, [pc, #268]	@ (8009468 <BSP_SD_MspInit+0x1c8>)
 800935c:	2200      	movs	r2, #0
 800935e:	60da      	str	r2, [r3, #12]
  dma_rx_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8009360:	4b41      	ldr	r3, [pc, #260]	@ (8009468 <BSP_SD_MspInit+0x1c8>)
 8009362:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009366:	611a      	str	r2, [r3, #16]
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8009368:	4b3f      	ldr	r3, [pc, #252]	@ (8009468 <BSP_SD_MspInit+0x1c8>)
 800936a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800936e:	615a      	str	r2, [r3, #20]
  dma_rx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8009370:	4b3d      	ldr	r3, [pc, #244]	@ (8009468 <BSP_SD_MspInit+0x1c8>)
 8009372:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8009376:	619a      	str	r2, [r3, #24]
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 8009378:	4b3b      	ldr	r3, [pc, #236]	@ (8009468 <BSP_SD_MspInit+0x1c8>)
 800937a:	2220      	movs	r2, #32
 800937c:	61da      	str	r2, [r3, #28]
  dma_rx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 800937e:	4b3a      	ldr	r3, [pc, #232]	@ (8009468 <BSP_SD_MspInit+0x1c8>)
 8009380:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8009384:	621a      	str	r2, [r3, #32]
  dma_rx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8009386:	4b38      	ldr	r3, [pc, #224]	@ (8009468 <BSP_SD_MspInit+0x1c8>)
 8009388:	2204      	movs	r2, #4
 800938a:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_rx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800938c:	4b36      	ldr	r3, [pc, #216]	@ (8009468 <BSP_SD_MspInit+0x1c8>)
 800938e:	2203      	movs	r2, #3
 8009390:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_rx_handle.Init.MemBurst            = DMA_MBURST_INC4;
 8009392:	4b35      	ldr	r3, [pc, #212]	@ (8009468 <BSP_SD_MspInit+0x1c8>)
 8009394:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8009398:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 800939a:	4b33      	ldr	r3, [pc, #204]	@ (8009468 <BSP_SD_MspInit+0x1c8>)
 800939c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80093a0:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 80093a2:	4b31      	ldr	r3, [pc, #196]	@ (8009468 <BSP_SD_MspInit+0x1c8>)
 80093a4:	4a31      	ldr	r2, [pc, #196]	@ (800946c <BSP_SD_MspInit+0x1cc>)
 80093a6:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	4a2f      	ldr	r2, [pc, #188]	@ (8009468 <BSP_SD_MspInit+0x1c8>)
 80093ac:	63da      	str	r2, [r3, #60]	@ 0x3c
 80093ae:	4a2e      	ldr	r2, [pc, #184]	@ (8009468 <BSP_SD_MspInit+0x1c8>)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_rx_handle);
 80093b4:	482c      	ldr	r0, [pc, #176]	@ (8009468 <BSP_SD_MspInit+0x1c8>)
 80093b6:	f7f8 fa3b 	bl	8001830 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_rx_handle);
 80093ba:	482b      	ldr	r0, [pc, #172]	@ (8009468 <BSP_SD_MspInit+0x1c8>)
 80093bc:	f7f8 f98a 	bl	80016d4 <HAL_DMA_Init>
  
  /* Configure DMA Tx parameters */
  dma_tx_handle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
 80093c0:	4b2b      	ldr	r3, [pc, #172]	@ (8009470 <BSP_SD_MspInit+0x1d0>)
 80093c2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80093c6:	605a      	str	r2, [r3, #4]
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80093c8:	4b29      	ldr	r3, [pc, #164]	@ (8009470 <BSP_SD_MspInit+0x1d0>)
 80093ca:	2240      	movs	r2, #64	@ 0x40
 80093cc:	609a      	str	r2, [r3, #8]
  dma_tx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 80093ce:	4b28      	ldr	r3, [pc, #160]	@ (8009470 <BSP_SD_MspInit+0x1d0>)
 80093d0:	2200      	movs	r2, #0
 80093d2:	60da      	str	r2, [r3, #12]
  dma_tx_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80093d4:	4b26      	ldr	r3, [pc, #152]	@ (8009470 <BSP_SD_MspInit+0x1d0>)
 80093d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80093da:	611a      	str	r2, [r3, #16]
  dma_tx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80093dc:	4b24      	ldr	r3, [pc, #144]	@ (8009470 <BSP_SD_MspInit+0x1d0>)
 80093de:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80093e2:	615a      	str	r2, [r3, #20]
  dma_tx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80093e4:	4b22      	ldr	r3, [pc, #136]	@ (8009470 <BSP_SD_MspInit+0x1d0>)
 80093e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80093ea:	619a      	str	r2, [r3, #24]
  dma_tx_handle.Init.Mode                = DMA_PFCTRL;
 80093ec:	4b20      	ldr	r3, [pc, #128]	@ (8009470 <BSP_SD_MspInit+0x1d0>)
 80093ee:	2220      	movs	r2, #32
 80093f0:	61da      	str	r2, [r3, #28]
  dma_tx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 80093f2:	4b1f      	ldr	r3, [pc, #124]	@ (8009470 <BSP_SD_MspInit+0x1d0>)
 80093f4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80093f8:	621a      	str	r2, [r3, #32]
  dma_tx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 80093fa:	4b1d      	ldr	r3, [pc, #116]	@ (8009470 <BSP_SD_MspInit+0x1d0>)
 80093fc:	2204      	movs	r2, #4
 80093fe:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_tx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8009400:	4b1b      	ldr	r3, [pc, #108]	@ (8009470 <BSP_SD_MspInit+0x1d0>)
 8009402:	2203      	movs	r2, #3
 8009404:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_tx_handle.Init.MemBurst            = DMA_MBURST_INC4;
 8009406:	4b1a      	ldr	r3, [pc, #104]	@ (8009470 <BSP_SD_MspInit+0x1d0>)
 8009408:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800940c:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_tx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 800940e:	4b18      	ldr	r3, [pc, #96]	@ (8009470 <BSP_SD_MspInit+0x1d0>)
 8009410:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8009414:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
 8009416:	4b16      	ldr	r3, [pc, #88]	@ (8009470 <BSP_SD_MspInit+0x1d0>)
 8009418:	4a16      	ldr	r2, [pc, #88]	@ (8009474 <BSP_SD_MspInit+0x1d4>)
 800941a:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, dma_tx_handle);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	4a14      	ldr	r2, [pc, #80]	@ (8009470 <BSP_SD_MspInit+0x1d0>)
 8009420:	641a      	str	r2, [r3, #64]	@ 0x40
 8009422:	4a13      	ldr	r2, [pc, #76]	@ (8009470 <BSP_SD_MspInit+0x1d0>)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_tx_handle);
 8009428:	4811      	ldr	r0, [pc, #68]	@ (8009470 <BSP_SD_MspInit+0x1d0>)
 800942a:	f7f8 fa01 	bl	8001830 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_tx_handle); 
 800942e:	4810      	ldr	r0, [pc, #64]	@ (8009470 <BSP_SD_MspInit+0x1d0>)
 8009430:	f7f8 f950 	bl	80016d4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Rx_IRQn, 0x0F, 0);
 8009434:	2200      	movs	r2, #0
 8009436:	210f      	movs	r1, #15
 8009438:	203b      	movs	r0, #59	@ 0x3b
 800943a:	f7f8 f82a 	bl	8001492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Rx_IRQn);
 800943e:	203b      	movs	r0, #59	@ 0x3b
 8009440:	f7f8 f843 	bl	80014ca <HAL_NVIC_EnableIRQ>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Tx_IRQn, 0x0F, 0);
 8009444:	2200      	movs	r2, #0
 8009446:	210f      	movs	r1, #15
 8009448:	2045      	movs	r0, #69	@ 0x45
 800944a:	f7f8 f822 	bl	8001492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Tx_IRQn);
 800944e:	2045      	movs	r0, #69	@ 0x45
 8009450:	f7f8 f83b 	bl	80014ca <HAL_NVIC_EnableIRQ>
}
 8009454:	bf00      	nop
 8009456:	3730      	adds	r7, #48	@ 0x30
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}
 800945c:	40023800 	.word	0x40023800
 8009460:	40020800 	.word	0x40020800
 8009464:	40020c00 	.word	0x40020c00
 8009468:	20000a6c 	.word	0x20000a6c
 800946c:	40026458 	.word	0x40026458
 8009470:	20000acc 	.word	0x20000acc
 8009474:	400264a0 	.word	0x400264a0

08009478 <BSP_SD_Detect_MspInit>:
  * @param  hsd: SD handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SD_Detect_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b088      	sub	sp, #32
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef  gpio_init_structure;

  SD_DETECT_GPIO_CLK_ENABLE();
 8009482:	4b0f      	ldr	r3, [pc, #60]	@ (80094c0 <BSP_SD_Detect_MspInit+0x48>)
 8009484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009486:	4a0e      	ldr	r2, [pc, #56]	@ (80094c0 <BSP_SD_Detect_MspInit+0x48>)
 8009488:	f043 0304 	orr.w	r3, r3, #4
 800948c:	6313      	str	r3, [r2, #48]	@ 0x30
 800948e:	4b0c      	ldr	r3, [pc, #48]	@ (80094c0 <BSP_SD_Detect_MspInit+0x48>)
 8009490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009492:	f003 0304 	and.w	r3, r3, #4
 8009496:	60bb      	str	r3, [r7, #8]
 8009498:	68bb      	ldr	r3, [r7, #8]

  /* GPIO configuration in input for uSD_Detect signal */
  gpio_init_structure.Pin       = SD_DETECT_PIN;
 800949a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800949e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 80094a0:	2300      	movs	r3, #0
 80094a2:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80094a4:	2301      	movs	r3, #1
 80094a6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80094a8:	2303      	movs	r3, #3
 80094aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 80094ac:	f107 030c 	add.w	r3, r7, #12
 80094b0:	4619      	mov	r1, r3
 80094b2:	4804      	ldr	r0, [pc, #16]	@ (80094c4 <BSP_SD_Detect_MspInit+0x4c>)
 80094b4:	f7f8 fd58 	bl	8001f68 <HAL_GPIO_Init>
}
 80094b8:	bf00      	nop
 80094ba:	3720      	adds	r7, #32
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}
 80094c0:	40023800 	.word	0x40023800
 80094c4:	40020800 	.word	0x40020800

080094c8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	af00      	add	r7, sp, #0
  return((HAL_SD_GetCardState(&uSdHandle) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80094cc:	4805      	ldr	r0, [pc, #20]	@ (80094e4 <BSP_SD_GetCardState+0x1c>)
 80094ce:	f7fb f9f7 	bl	80048c0 <HAL_SD_GetCardState>
 80094d2:	4603      	mov	r3, r0
 80094d4:	2b04      	cmp	r3, #4
 80094d6:	bf14      	ite	ne
 80094d8:	2301      	movne	r3, #1
 80094da:	2300      	moveq	r3, #0
 80094dc:	b2db      	uxtb	r3, r3
}
 80094de:	4618      	mov	r0, r3
 80094e0:	bd80      	pop	{r7, pc}
 80094e2:	bf00      	nop
 80094e4:	200009e8 	.word	0x200009e8

080094e8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&uSdHandle, CardInfo);
 80094f0:	6879      	ldr	r1, [r7, #4]
 80094f2:	4803      	ldr	r0, [pc, #12]	@ (8009500 <BSP_SD_GetCardInfo+0x18>)
 80094f4:	f7fb f93c 	bl	8004770 <HAL_SD_GetCardInfo>
}
 80094f8:	bf00      	nop
 80094fa:	3708      	adds	r7, #8
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}
 8009500:	200009e8 	.word	0x200009e8

08009504 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8009504:	b580      	push	{r7, lr}
 8009506:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8009508:	4b29      	ldr	r3, [pc, #164]	@ (80095b0 <BSP_SDRAM_Init+0xac>)
 800950a:	4a2a      	ldr	r2, [pc, #168]	@ (80095b4 <BSP_SDRAM_Init+0xb0>)
 800950c:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800950e:	4b2a      	ldr	r3, [pc, #168]	@ (80095b8 <BSP_SDRAM_Init+0xb4>)
 8009510:	2202      	movs	r2, #2
 8009512:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8009514:	4b28      	ldr	r3, [pc, #160]	@ (80095b8 <BSP_SDRAM_Init+0xb4>)
 8009516:	2207      	movs	r2, #7
 8009518:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 800951a:	4b27      	ldr	r3, [pc, #156]	@ (80095b8 <BSP_SDRAM_Init+0xb4>)
 800951c:	2204      	movs	r2, #4
 800951e:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8009520:	4b25      	ldr	r3, [pc, #148]	@ (80095b8 <BSP_SDRAM_Init+0xb4>)
 8009522:	2207      	movs	r2, #7
 8009524:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8009526:	4b24      	ldr	r3, [pc, #144]	@ (80095b8 <BSP_SDRAM_Init+0xb4>)
 8009528:	2202      	movs	r2, #2
 800952a:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 800952c:	4b22      	ldr	r3, [pc, #136]	@ (80095b8 <BSP_SDRAM_Init+0xb4>)
 800952e:	2202      	movs	r2, #2
 8009530:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8009532:	4b21      	ldr	r3, [pc, #132]	@ (80095b8 <BSP_SDRAM_Init+0xb4>)
 8009534:	2202      	movs	r2, #2
 8009536:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8009538:	4b1d      	ldr	r3, [pc, #116]	@ (80095b0 <BSP_SDRAM_Init+0xac>)
 800953a:	2200      	movs	r2, #0
 800953c:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800953e:	4b1c      	ldr	r3, [pc, #112]	@ (80095b0 <BSP_SDRAM_Init+0xac>)
 8009540:	2200      	movs	r2, #0
 8009542:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8009544:	4b1a      	ldr	r3, [pc, #104]	@ (80095b0 <BSP_SDRAM_Init+0xac>)
 8009546:	2204      	movs	r2, #4
 8009548:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800954a:	4b19      	ldr	r3, [pc, #100]	@ (80095b0 <BSP_SDRAM_Init+0xac>)
 800954c:	2210      	movs	r2, #16
 800954e:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8009550:	4b17      	ldr	r3, [pc, #92]	@ (80095b0 <BSP_SDRAM_Init+0xac>)
 8009552:	2240      	movs	r2, #64	@ 0x40
 8009554:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8009556:	4b16      	ldr	r3, [pc, #88]	@ (80095b0 <BSP_SDRAM_Init+0xac>)
 8009558:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800955c:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800955e:	4b14      	ldr	r3, [pc, #80]	@ (80095b0 <BSP_SDRAM_Init+0xac>)
 8009560:	2200      	movs	r2, #0
 8009562:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8009564:	4b12      	ldr	r3, [pc, #72]	@ (80095b0 <BSP_SDRAM_Init+0xac>)
 8009566:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800956a:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800956c:	4b10      	ldr	r3, [pc, #64]	@ (80095b0 <BSP_SDRAM_Init+0xac>)
 800956e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009572:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8009574:	4b0e      	ldr	r3, [pc, #56]	@ (80095b0 <BSP_SDRAM_Init+0xac>)
 8009576:	2200      	movs	r2, #0
 8009578:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800957a:	2100      	movs	r1, #0
 800957c:	480c      	ldr	r0, [pc, #48]	@ (80095b0 <BSP_SDRAM_Init+0xac>)
 800957e:	f000 f87f 	bl	8009680 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8009582:	490d      	ldr	r1, [pc, #52]	@ (80095b8 <BSP_SDRAM_Init+0xb4>)
 8009584:	480a      	ldr	r0, [pc, #40]	@ (80095b0 <BSP_SDRAM_Init+0xac>)
 8009586:	f7fb fcbf 	bl	8004f08 <HAL_SDRAM_Init>
 800958a:	4603      	mov	r3, r0
 800958c:	2b00      	cmp	r3, #0
 800958e:	d003      	beq.n	8009598 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8009590:	4b0a      	ldr	r3, [pc, #40]	@ (80095bc <BSP_SDRAM_Init+0xb8>)
 8009592:	2201      	movs	r2, #1
 8009594:	701a      	strb	r2, [r3, #0]
 8009596:	e002      	b.n	800959e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8009598:	4b08      	ldr	r3, [pc, #32]	@ (80095bc <BSP_SDRAM_Init+0xb8>)
 800959a:	2200      	movs	r2, #0
 800959c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800959e:	f240 6003 	movw	r0, #1539	@ 0x603
 80095a2:	f000 f80d 	bl	80095c0 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80095a6:	4b05      	ldr	r3, [pc, #20]	@ (80095bc <BSP_SDRAM_Init+0xb8>)
 80095a8:	781b      	ldrb	r3, [r3, #0]
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	20000b2c 	.word	0x20000b2c
 80095b4:	a0000140 	.word	0xa0000140
 80095b8:	20000b60 	.word	0x20000b60
 80095bc:	20000024 	.word	0x20000024

080095c0 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80095c8:	2300      	movs	r3, #0
 80095ca:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80095cc:	4b2a      	ldr	r3, [pc, #168]	@ (8009678 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80095ce:	2201      	movs	r2, #1
 80095d0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80095d2:	4b29      	ldr	r3, [pc, #164]	@ (8009678 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80095d4:	2210      	movs	r2, #16
 80095d6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80095d8:	4b27      	ldr	r3, [pc, #156]	@ (8009678 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80095da:	2201      	movs	r2, #1
 80095dc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80095de:	4b26      	ldr	r3, [pc, #152]	@ (8009678 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80095e0:	2200      	movs	r2, #0
 80095e2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80095e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80095e8:	4923      	ldr	r1, [pc, #140]	@ (8009678 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80095ea:	4824      	ldr	r0, [pc, #144]	@ (800967c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80095ec:	f7fb fcca 	bl	8004f84 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80095f0:	2001      	movs	r0, #1
 80095f2:	f7f7 fe4f 	bl	8001294 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80095f6:	4b20      	ldr	r3, [pc, #128]	@ (8009678 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80095f8:	2202      	movs	r2, #2
 80095fa:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80095fc:	4b1e      	ldr	r3, [pc, #120]	@ (8009678 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80095fe:	2210      	movs	r2, #16
 8009600:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8009602:	4b1d      	ldr	r3, [pc, #116]	@ (8009678 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8009604:	2201      	movs	r2, #1
 8009606:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8009608:	4b1b      	ldr	r3, [pc, #108]	@ (8009678 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800960a:	2200      	movs	r2, #0
 800960c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800960e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009612:	4919      	ldr	r1, [pc, #100]	@ (8009678 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8009614:	4819      	ldr	r0, [pc, #100]	@ (800967c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8009616:	f7fb fcb5 	bl	8004f84 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800961a:	4b17      	ldr	r3, [pc, #92]	@ (8009678 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800961c:	2203      	movs	r2, #3
 800961e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8009620:	4b15      	ldr	r3, [pc, #84]	@ (8009678 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8009622:	2210      	movs	r2, #16
 8009624:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8009626:	4b14      	ldr	r3, [pc, #80]	@ (8009678 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8009628:	2208      	movs	r2, #8
 800962a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800962c:	4b12      	ldr	r3, [pc, #72]	@ (8009678 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800962e:	2200      	movs	r2, #0
 8009630:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8009632:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009636:	4910      	ldr	r1, [pc, #64]	@ (8009678 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8009638:	4810      	ldr	r0, [pc, #64]	@ (800967c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800963a:	f7fb fca3 	bl	8004f84 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800963e:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8009642:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8009644:	4b0c      	ldr	r3, [pc, #48]	@ (8009678 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8009646:	2204      	movs	r2, #4
 8009648:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800964a:	4b0b      	ldr	r3, [pc, #44]	@ (8009678 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800964c:	2210      	movs	r2, #16
 800964e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8009650:	4b09      	ldr	r3, [pc, #36]	@ (8009678 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8009652:	2201      	movs	r2, #1
 8009654:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	4a07      	ldr	r2, [pc, #28]	@ (8009678 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800965a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800965c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009660:	4905      	ldr	r1, [pc, #20]	@ (8009678 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8009662:	4806      	ldr	r0, [pc, #24]	@ (800967c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8009664:	f7fb fc8e 	bl	8004f84 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8009668:	6879      	ldr	r1, [r7, #4]
 800966a:	4804      	ldr	r0, [pc, #16]	@ (800967c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800966c:	f7fb fcb5 	bl	8004fda <HAL_SDRAM_ProgramRefreshRate>
}
 8009670:	bf00      	nop
 8009672:	3710      	adds	r7, #16
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}
 8009678:	20000b7c 	.word	0x20000b7c
 800967c:	20000b2c 	.word	0x20000b2c

08009680 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8009680:	b580      	push	{r7, lr}
 8009682:	b090      	sub	sp, #64	@ 0x40
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800968a:	4b70      	ldr	r3, [pc, #448]	@ (800984c <BSP_SDRAM_MspInit+0x1cc>)
 800968c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800968e:	4a6f      	ldr	r2, [pc, #444]	@ (800984c <BSP_SDRAM_MspInit+0x1cc>)
 8009690:	f043 0301 	orr.w	r3, r3, #1
 8009694:	6393      	str	r3, [r2, #56]	@ 0x38
 8009696:	4b6d      	ldr	r3, [pc, #436]	@ (800984c <BSP_SDRAM_MspInit+0x1cc>)
 8009698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800969a:	f003 0301 	and.w	r3, r3, #1
 800969e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80096a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80096a2:	4b6a      	ldr	r3, [pc, #424]	@ (800984c <BSP_SDRAM_MspInit+0x1cc>)
 80096a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096a6:	4a69      	ldr	r2, [pc, #420]	@ (800984c <BSP_SDRAM_MspInit+0x1cc>)
 80096a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80096ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80096ae:	4b67      	ldr	r3, [pc, #412]	@ (800984c <BSP_SDRAM_MspInit+0x1cc>)
 80096b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80096b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80096b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80096ba:	4b64      	ldr	r3, [pc, #400]	@ (800984c <BSP_SDRAM_MspInit+0x1cc>)
 80096bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096be:	4a63      	ldr	r2, [pc, #396]	@ (800984c <BSP_SDRAM_MspInit+0x1cc>)
 80096c0:	f043 0304 	orr.w	r3, r3, #4
 80096c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80096c6:	4b61      	ldr	r3, [pc, #388]	@ (800984c <BSP_SDRAM_MspInit+0x1cc>)
 80096c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096ca:	f003 0304 	and.w	r3, r3, #4
 80096ce:	623b      	str	r3, [r7, #32]
 80096d0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80096d2:	4b5e      	ldr	r3, [pc, #376]	@ (800984c <BSP_SDRAM_MspInit+0x1cc>)
 80096d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096d6:	4a5d      	ldr	r2, [pc, #372]	@ (800984c <BSP_SDRAM_MspInit+0x1cc>)
 80096d8:	f043 0308 	orr.w	r3, r3, #8
 80096dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80096de:	4b5b      	ldr	r3, [pc, #364]	@ (800984c <BSP_SDRAM_MspInit+0x1cc>)
 80096e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096e2:	f003 0308 	and.w	r3, r3, #8
 80096e6:	61fb      	str	r3, [r7, #28]
 80096e8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80096ea:	4b58      	ldr	r3, [pc, #352]	@ (800984c <BSP_SDRAM_MspInit+0x1cc>)
 80096ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096ee:	4a57      	ldr	r2, [pc, #348]	@ (800984c <BSP_SDRAM_MspInit+0x1cc>)
 80096f0:	f043 0310 	orr.w	r3, r3, #16
 80096f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80096f6:	4b55      	ldr	r3, [pc, #340]	@ (800984c <BSP_SDRAM_MspInit+0x1cc>)
 80096f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096fa:	f003 0310 	and.w	r3, r3, #16
 80096fe:	61bb      	str	r3, [r7, #24]
 8009700:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8009702:	4b52      	ldr	r3, [pc, #328]	@ (800984c <BSP_SDRAM_MspInit+0x1cc>)
 8009704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009706:	4a51      	ldr	r2, [pc, #324]	@ (800984c <BSP_SDRAM_MspInit+0x1cc>)
 8009708:	f043 0320 	orr.w	r3, r3, #32
 800970c:	6313      	str	r3, [r2, #48]	@ 0x30
 800970e:	4b4f      	ldr	r3, [pc, #316]	@ (800984c <BSP_SDRAM_MspInit+0x1cc>)
 8009710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009712:	f003 0320 	and.w	r3, r3, #32
 8009716:	617b      	str	r3, [r7, #20]
 8009718:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800971a:	4b4c      	ldr	r3, [pc, #304]	@ (800984c <BSP_SDRAM_MspInit+0x1cc>)
 800971c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800971e:	4a4b      	ldr	r2, [pc, #300]	@ (800984c <BSP_SDRAM_MspInit+0x1cc>)
 8009720:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009724:	6313      	str	r3, [r2, #48]	@ 0x30
 8009726:	4b49      	ldr	r3, [pc, #292]	@ (800984c <BSP_SDRAM_MspInit+0x1cc>)
 8009728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800972a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800972e:	613b      	str	r3, [r7, #16]
 8009730:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009732:	4b46      	ldr	r3, [pc, #280]	@ (800984c <BSP_SDRAM_MspInit+0x1cc>)
 8009734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009736:	4a45      	ldr	r2, [pc, #276]	@ (800984c <BSP_SDRAM_MspInit+0x1cc>)
 8009738:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800973c:	6313      	str	r3, [r2, #48]	@ 0x30
 800973e:	4b43      	ldr	r3, [pc, #268]	@ (800984c <BSP_SDRAM_MspInit+0x1cc>)
 8009740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009746:	60fb      	str	r3, [r7, #12]
 8009748:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800974a:	2302      	movs	r3, #2
 800974c:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800974e:	2301      	movs	r3, #1
 8009750:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8009752:	2302      	movs	r3, #2
 8009754:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8009756:	230c      	movs	r3, #12
 8009758:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800975a:	2308      	movs	r3, #8
 800975c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800975e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009762:	4619      	mov	r1, r3
 8009764:	483a      	ldr	r0, [pc, #232]	@ (8009850 <BSP_SDRAM_MspInit+0x1d0>)
 8009766:	f7f8 fbff 	bl	8001f68 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800976a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800976e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8009770:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009774:	4619      	mov	r1, r3
 8009776:	4837      	ldr	r0, [pc, #220]	@ (8009854 <BSP_SDRAM_MspInit+0x1d4>)
 8009778:	f7f8 fbf6 	bl	8001f68 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800977c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8009780:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8009782:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009786:	4619      	mov	r1, r3
 8009788:	4833      	ldr	r0, [pc, #204]	@ (8009858 <BSP_SDRAM_MspInit+0x1d8>)
 800978a:	f7f8 fbed 	bl	8001f68 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800978e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8009792:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8009794:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009798:	4619      	mov	r1, r3
 800979a:	4830      	ldr	r0, [pc, #192]	@ (800985c <BSP_SDRAM_MspInit+0x1dc>)
 800979c:	f7f8 fbe4 	bl	8001f68 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80097a0:	f248 1333 	movw	r3, #33075	@ 0x8133
 80097a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80097a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80097aa:	4619      	mov	r1, r3
 80097ac:	482c      	ldr	r0, [pc, #176]	@ (8009860 <BSP_SDRAM_MspInit+0x1e0>)
 80097ae:	f7f8 fbdb 	bl	8001f68 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80097b2:	2328      	movs	r3, #40	@ 0x28
 80097b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80097b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80097ba:	4619      	mov	r1, r3
 80097bc:	4829      	ldr	r0, [pc, #164]	@ (8009864 <BSP_SDRAM_MspInit+0x1e4>)
 80097be:	f7f8 fbd3 	bl	8001f68 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80097c2:	4b29      	ldr	r3, [pc, #164]	@ (8009868 <BSP_SDRAM_MspInit+0x1e8>)
 80097c4:	2200      	movs	r2, #0
 80097c6:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80097c8:	4b27      	ldr	r3, [pc, #156]	@ (8009868 <BSP_SDRAM_MspInit+0x1e8>)
 80097ca:	2280      	movs	r2, #128	@ 0x80
 80097cc:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80097ce:	4b26      	ldr	r3, [pc, #152]	@ (8009868 <BSP_SDRAM_MspInit+0x1e8>)
 80097d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80097d4:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80097d6:	4b24      	ldr	r3, [pc, #144]	@ (8009868 <BSP_SDRAM_MspInit+0x1e8>)
 80097d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80097dc:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80097de:	4b22      	ldr	r3, [pc, #136]	@ (8009868 <BSP_SDRAM_MspInit+0x1e8>)
 80097e0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80097e4:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80097e6:	4b20      	ldr	r3, [pc, #128]	@ (8009868 <BSP_SDRAM_MspInit+0x1e8>)
 80097e8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80097ec:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80097ee:	4b1e      	ldr	r3, [pc, #120]	@ (8009868 <BSP_SDRAM_MspInit+0x1e8>)
 80097f0:	2200      	movs	r2, #0
 80097f2:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80097f4:	4b1c      	ldr	r3, [pc, #112]	@ (8009868 <BSP_SDRAM_MspInit+0x1e8>)
 80097f6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80097fa:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80097fc:	4b1a      	ldr	r3, [pc, #104]	@ (8009868 <BSP_SDRAM_MspInit+0x1e8>)
 80097fe:	2200      	movs	r2, #0
 8009800:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8009802:	4b19      	ldr	r3, [pc, #100]	@ (8009868 <BSP_SDRAM_MspInit+0x1e8>)
 8009804:	2203      	movs	r2, #3
 8009806:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8009808:	4b17      	ldr	r3, [pc, #92]	@ (8009868 <BSP_SDRAM_MspInit+0x1e8>)
 800980a:	2200      	movs	r2, #0
 800980c:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800980e:	4b16      	ldr	r3, [pc, #88]	@ (8009868 <BSP_SDRAM_MspInit+0x1e8>)
 8009810:	2200      	movs	r2, #0
 8009812:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8009814:	4b14      	ldr	r3, [pc, #80]	@ (8009868 <BSP_SDRAM_MspInit+0x1e8>)
 8009816:	4a15      	ldr	r2, [pc, #84]	@ (800986c <BSP_SDRAM_MspInit+0x1ec>)
 8009818:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	4a12      	ldr	r2, [pc, #72]	@ (8009868 <BSP_SDRAM_MspInit+0x1e8>)
 800981e:	631a      	str	r2, [r3, #48]	@ 0x30
 8009820:	4a11      	ldr	r2, [pc, #68]	@ (8009868 <BSP_SDRAM_MspInit+0x1e8>)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8009826:	4810      	ldr	r0, [pc, #64]	@ (8009868 <BSP_SDRAM_MspInit+0x1e8>)
 8009828:	f7f8 f802 	bl	8001830 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 800982c:	480e      	ldr	r0, [pc, #56]	@ (8009868 <BSP_SDRAM_MspInit+0x1e8>)
 800982e:	f7f7 ff51 	bl	80016d4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8009832:	2200      	movs	r2, #0
 8009834:	210f      	movs	r1, #15
 8009836:	2038      	movs	r0, #56	@ 0x38
 8009838:	f7f7 fe2b 	bl	8001492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800983c:	2038      	movs	r0, #56	@ 0x38
 800983e:	f7f7 fe44 	bl	80014ca <HAL_NVIC_EnableIRQ>
}
 8009842:	bf00      	nop
 8009844:	3740      	adds	r7, #64	@ 0x40
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
 800984a:	bf00      	nop
 800984c:	40023800 	.word	0x40023800
 8009850:	40020800 	.word	0x40020800
 8009854:	40020c00 	.word	0x40020c00
 8009858:	40021000 	.word	0x40021000
 800985c:	40021400 	.word	0x40021400
 8009860:	40021800 	.word	0x40021800
 8009864:	40021c00 	.word	0x40021c00
 8009868:	20000b8c 	.word	0x20000b8c
 800986c:	40026410 	.word	0x40026410

08009870 <malloc>:
 8009870:	4b02      	ldr	r3, [pc, #8]	@ (800987c <malloc+0xc>)
 8009872:	4601      	mov	r1, r0
 8009874:	6818      	ldr	r0, [r3, #0]
 8009876:	f000 b82d 	b.w	80098d4 <_malloc_r>
 800987a:	bf00      	nop
 800987c:	20000028 	.word	0x20000028

08009880 <free>:
 8009880:	4b02      	ldr	r3, [pc, #8]	@ (800988c <free+0xc>)
 8009882:	4601      	mov	r1, r0
 8009884:	6818      	ldr	r0, [r3, #0]
 8009886:	f000 b915 	b.w	8009ab4 <_free_r>
 800988a:	bf00      	nop
 800988c:	20000028 	.word	0x20000028

08009890 <sbrk_aligned>:
 8009890:	b570      	push	{r4, r5, r6, lr}
 8009892:	4e0f      	ldr	r6, [pc, #60]	@ (80098d0 <sbrk_aligned+0x40>)
 8009894:	460c      	mov	r4, r1
 8009896:	6831      	ldr	r1, [r6, #0]
 8009898:	4605      	mov	r5, r0
 800989a:	b911      	cbnz	r1, 80098a2 <sbrk_aligned+0x12>
 800989c:	f000 f8ce 	bl	8009a3c <_sbrk_r>
 80098a0:	6030      	str	r0, [r6, #0]
 80098a2:	4621      	mov	r1, r4
 80098a4:	4628      	mov	r0, r5
 80098a6:	f000 f8c9 	bl	8009a3c <_sbrk_r>
 80098aa:	1c43      	adds	r3, r0, #1
 80098ac:	d103      	bne.n	80098b6 <sbrk_aligned+0x26>
 80098ae:	f04f 34ff 	mov.w	r4, #4294967295
 80098b2:	4620      	mov	r0, r4
 80098b4:	bd70      	pop	{r4, r5, r6, pc}
 80098b6:	1cc4      	adds	r4, r0, #3
 80098b8:	f024 0403 	bic.w	r4, r4, #3
 80098bc:	42a0      	cmp	r0, r4
 80098be:	d0f8      	beq.n	80098b2 <sbrk_aligned+0x22>
 80098c0:	1a21      	subs	r1, r4, r0
 80098c2:	4628      	mov	r0, r5
 80098c4:	f000 f8ba 	bl	8009a3c <_sbrk_r>
 80098c8:	3001      	adds	r0, #1
 80098ca:	d1f2      	bne.n	80098b2 <sbrk_aligned+0x22>
 80098cc:	e7ef      	b.n	80098ae <sbrk_aligned+0x1e>
 80098ce:	bf00      	nop
 80098d0:	20000bec 	.word	0x20000bec

080098d4 <_malloc_r>:
 80098d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098d8:	1ccd      	adds	r5, r1, #3
 80098da:	f025 0503 	bic.w	r5, r5, #3
 80098de:	3508      	adds	r5, #8
 80098e0:	2d0c      	cmp	r5, #12
 80098e2:	bf38      	it	cc
 80098e4:	250c      	movcc	r5, #12
 80098e6:	2d00      	cmp	r5, #0
 80098e8:	4606      	mov	r6, r0
 80098ea:	db01      	blt.n	80098f0 <_malloc_r+0x1c>
 80098ec:	42a9      	cmp	r1, r5
 80098ee:	d904      	bls.n	80098fa <_malloc_r+0x26>
 80098f0:	230c      	movs	r3, #12
 80098f2:	6033      	str	r3, [r6, #0]
 80098f4:	2000      	movs	r0, #0
 80098f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80099d0 <_malloc_r+0xfc>
 80098fe:	f000 f869 	bl	80099d4 <__malloc_lock>
 8009902:	f8d8 3000 	ldr.w	r3, [r8]
 8009906:	461c      	mov	r4, r3
 8009908:	bb44      	cbnz	r4, 800995c <_malloc_r+0x88>
 800990a:	4629      	mov	r1, r5
 800990c:	4630      	mov	r0, r6
 800990e:	f7ff ffbf 	bl	8009890 <sbrk_aligned>
 8009912:	1c43      	adds	r3, r0, #1
 8009914:	4604      	mov	r4, r0
 8009916:	d158      	bne.n	80099ca <_malloc_r+0xf6>
 8009918:	f8d8 4000 	ldr.w	r4, [r8]
 800991c:	4627      	mov	r7, r4
 800991e:	2f00      	cmp	r7, #0
 8009920:	d143      	bne.n	80099aa <_malloc_r+0xd6>
 8009922:	2c00      	cmp	r4, #0
 8009924:	d04b      	beq.n	80099be <_malloc_r+0xea>
 8009926:	6823      	ldr	r3, [r4, #0]
 8009928:	4639      	mov	r1, r7
 800992a:	4630      	mov	r0, r6
 800992c:	eb04 0903 	add.w	r9, r4, r3
 8009930:	f000 f884 	bl	8009a3c <_sbrk_r>
 8009934:	4581      	cmp	r9, r0
 8009936:	d142      	bne.n	80099be <_malloc_r+0xea>
 8009938:	6821      	ldr	r1, [r4, #0]
 800993a:	1a6d      	subs	r5, r5, r1
 800993c:	4629      	mov	r1, r5
 800993e:	4630      	mov	r0, r6
 8009940:	f7ff ffa6 	bl	8009890 <sbrk_aligned>
 8009944:	3001      	adds	r0, #1
 8009946:	d03a      	beq.n	80099be <_malloc_r+0xea>
 8009948:	6823      	ldr	r3, [r4, #0]
 800994a:	442b      	add	r3, r5
 800994c:	6023      	str	r3, [r4, #0]
 800994e:	f8d8 3000 	ldr.w	r3, [r8]
 8009952:	685a      	ldr	r2, [r3, #4]
 8009954:	bb62      	cbnz	r2, 80099b0 <_malloc_r+0xdc>
 8009956:	f8c8 7000 	str.w	r7, [r8]
 800995a:	e00f      	b.n	800997c <_malloc_r+0xa8>
 800995c:	6822      	ldr	r2, [r4, #0]
 800995e:	1b52      	subs	r2, r2, r5
 8009960:	d420      	bmi.n	80099a4 <_malloc_r+0xd0>
 8009962:	2a0b      	cmp	r2, #11
 8009964:	d917      	bls.n	8009996 <_malloc_r+0xc2>
 8009966:	1961      	adds	r1, r4, r5
 8009968:	42a3      	cmp	r3, r4
 800996a:	6025      	str	r5, [r4, #0]
 800996c:	bf18      	it	ne
 800996e:	6059      	strne	r1, [r3, #4]
 8009970:	6863      	ldr	r3, [r4, #4]
 8009972:	bf08      	it	eq
 8009974:	f8c8 1000 	streq.w	r1, [r8]
 8009978:	5162      	str	r2, [r4, r5]
 800997a:	604b      	str	r3, [r1, #4]
 800997c:	4630      	mov	r0, r6
 800997e:	f000 f82f 	bl	80099e0 <__malloc_unlock>
 8009982:	f104 000b 	add.w	r0, r4, #11
 8009986:	1d23      	adds	r3, r4, #4
 8009988:	f020 0007 	bic.w	r0, r0, #7
 800998c:	1ac2      	subs	r2, r0, r3
 800998e:	bf1c      	itt	ne
 8009990:	1a1b      	subne	r3, r3, r0
 8009992:	50a3      	strne	r3, [r4, r2]
 8009994:	e7af      	b.n	80098f6 <_malloc_r+0x22>
 8009996:	6862      	ldr	r2, [r4, #4]
 8009998:	42a3      	cmp	r3, r4
 800999a:	bf0c      	ite	eq
 800999c:	f8c8 2000 	streq.w	r2, [r8]
 80099a0:	605a      	strne	r2, [r3, #4]
 80099a2:	e7eb      	b.n	800997c <_malloc_r+0xa8>
 80099a4:	4623      	mov	r3, r4
 80099a6:	6864      	ldr	r4, [r4, #4]
 80099a8:	e7ae      	b.n	8009908 <_malloc_r+0x34>
 80099aa:	463c      	mov	r4, r7
 80099ac:	687f      	ldr	r7, [r7, #4]
 80099ae:	e7b6      	b.n	800991e <_malloc_r+0x4a>
 80099b0:	461a      	mov	r2, r3
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	42a3      	cmp	r3, r4
 80099b6:	d1fb      	bne.n	80099b0 <_malloc_r+0xdc>
 80099b8:	2300      	movs	r3, #0
 80099ba:	6053      	str	r3, [r2, #4]
 80099bc:	e7de      	b.n	800997c <_malloc_r+0xa8>
 80099be:	230c      	movs	r3, #12
 80099c0:	6033      	str	r3, [r6, #0]
 80099c2:	4630      	mov	r0, r6
 80099c4:	f000 f80c 	bl	80099e0 <__malloc_unlock>
 80099c8:	e794      	b.n	80098f4 <_malloc_r+0x20>
 80099ca:	6005      	str	r5, [r0, #0]
 80099cc:	e7d6      	b.n	800997c <_malloc_r+0xa8>
 80099ce:	bf00      	nop
 80099d0:	20000bf0 	.word	0x20000bf0

080099d4 <__malloc_lock>:
 80099d4:	4801      	ldr	r0, [pc, #4]	@ (80099dc <__malloc_lock+0x8>)
 80099d6:	f000 b86b 	b.w	8009ab0 <__retarget_lock_acquire_recursive>
 80099da:	bf00      	nop
 80099dc:	20000d30 	.word	0x20000d30

080099e0 <__malloc_unlock>:
 80099e0:	4801      	ldr	r0, [pc, #4]	@ (80099e8 <__malloc_unlock+0x8>)
 80099e2:	f000 b866 	b.w	8009ab2 <__retarget_lock_release_recursive>
 80099e6:	bf00      	nop
 80099e8:	20000d30 	.word	0x20000d30

080099ec <siprintf>:
 80099ec:	b40e      	push	{r1, r2, r3}
 80099ee:	b500      	push	{lr}
 80099f0:	b09c      	sub	sp, #112	@ 0x70
 80099f2:	ab1d      	add	r3, sp, #116	@ 0x74
 80099f4:	9002      	str	r0, [sp, #8]
 80099f6:	9006      	str	r0, [sp, #24]
 80099f8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80099fc:	4809      	ldr	r0, [pc, #36]	@ (8009a24 <siprintf+0x38>)
 80099fe:	9107      	str	r1, [sp, #28]
 8009a00:	9104      	str	r1, [sp, #16]
 8009a02:	4909      	ldr	r1, [pc, #36]	@ (8009a28 <siprintf+0x3c>)
 8009a04:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a08:	9105      	str	r1, [sp, #20]
 8009a0a:	6800      	ldr	r0, [r0, #0]
 8009a0c:	9301      	str	r3, [sp, #4]
 8009a0e:	a902      	add	r1, sp, #8
 8009a10:	f000 f8f6 	bl	8009c00 <_svfiprintf_r>
 8009a14:	9b02      	ldr	r3, [sp, #8]
 8009a16:	2200      	movs	r2, #0
 8009a18:	701a      	strb	r2, [r3, #0]
 8009a1a:	b01c      	add	sp, #112	@ 0x70
 8009a1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a20:	b003      	add	sp, #12
 8009a22:	4770      	bx	lr
 8009a24:	20000028 	.word	0x20000028
 8009a28:	ffff0208 	.word	0xffff0208

08009a2c <memset>:
 8009a2c:	4402      	add	r2, r0
 8009a2e:	4603      	mov	r3, r0
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d100      	bne.n	8009a36 <memset+0xa>
 8009a34:	4770      	bx	lr
 8009a36:	f803 1b01 	strb.w	r1, [r3], #1
 8009a3a:	e7f9      	b.n	8009a30 <memset+0x4>

08009a3c <_sbrk_r>:
 8009a3c:	b538      	push	{r3, r4, r5, lr}
 8009a3e:	4d06      	ldr	r5, [pc, #24]	@ (8009a58 <_sbrk_r+0x1c>)
 8009a40:	2300      	movs	r3, #0
 8009a42:	4604      	mov	r4, r0
 8009a44:	4608      	mov	r0, r1
 8009a46:	602b      	str	r3, [r5, #0]
 8009a48:	f7f7 fb56 	bl	80010f8 <_sbrk>
 8009a4c:	1c43      	adds	r3, r0, #1
 8009a4e:	d102      	bne.n	8009a56 <_sbrk_r+0x1a>
 8009a50:	682b      	ldr	r3, [r5, #0]
 8009a52:	b103      	cbz	r3, 8009a56 <_sbrk_r+0x1a>
 8009a54:	6023      	str	r3, [r4, #0]
 8009a56:	bd38      	pop	{r3, r4, r5, pc}
 8009a58:	20000d2c 	.word	0x20000d2c

08009a5c <__errno>:
 8009a5c:	4b01      	ldr	r3, [pc, #4]	@ (8009a64 <__errno+0x8>)
 8009a5e:	6818      	ldr	r0, [r3, #0]
 8009a60:	4770      	bx	lr
 8009a62:	bf00      	nop
 8009a64:	20000028 	.word	0x20000028

08009a68 <__libc_init_array>:
 8009a68:	b570      	push	{r4, r5, r6, lr}
 8009a6a:	4d0d      	ldr	r5, [pc, #52]	@ (8009aa0 <__libc_init_array+0x38>)
 8009a6c:	4c0d      	ldr	r4, [pc, #52]	@ (8009aa4 <__libc_init_array+0x3c>)
 8009a6e:	1b64      	subs	r4, r4, r5
 8009a70:	10a4      	asrs	r4, r4, #2
 8009a72:	2600      	movs	r6, #0
 8009a74:	42a6      	cmp	r6, r4
 8009a76:	d109      	bne.n	8009a8c <__libc_init_array+0x24>
 8009a78:	4d0b      	ldr	r5, [pc, #44]	@ (8009aa8 <__libc_init_array+0x40>)
 8009a7a:	4c0c      	ldr	r4, [pc, #48]	@ (8009aac <__libc_init_array+0x44>)
 8009a7c:	f000 fba8 	bl	800a1d0 <_init>
 8009a80:	1b64      	subs	r4, r4, r5
 8009a82:	10a4      	asrs	r4, r4, #2
 8009a84:	2600      	movs	r6, #0
 8009a86:	42a6      	cmp	r6, r4
 8009a88:	d105      	bne.n	8009a96 <__libc_init_array+0x2e>
 8009a8a:	bd70      	pop	{r4, r5, r6, pc}
 8009a8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a90:	4798      	blx	r3
 8009a92:	3601      	adds	r6, #1
 8009a94:	e7ee      	b.n	8009a74 <__libc_init_array+0xc>
 8009a96:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a9a:	4798      	blx	r3
 8009a9c:	3601      	adds	r6, #1
 8009a9e:	e7f2      	b.n	8009a86 <__libc_init_array+0x1e>
 8009aa0:	0800be88 	.word	0x0800be88
 8009aa4:	0800be88 	.word	0x0800be88
 8009aa8:	0800be88 	.word	0x0800be88
 8009aac:	0800be8c 	.word	0x0800be8c

08009ab0 <__retarget_lock_acquire_recursive>:
 8009ab0:	4770      	bx	lr

08009ab2 <__retarget_lock_release_recursive>:
 8009ab2:	4770      	bx	lr

08009ab4 <_free_r>:
 8009ab4:	b538      	push	{r3, r4, r5, lr}
 8009ab6:	4605      	mov	r5, r0
 8009ab8:	2900      	cmp	r1, #0
 8009aba:	d041      	beq.n	8009b40 <_free_r+0x8c>
 8009abc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ac0:	1f0c      	subs	r4, r1, #4
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	bfb8      	it	lt
 8009ac6:	18e4      	addlt	r4, r4, r3
 8009ac8:	f7ff ff84 	bl	80099d4 <__malloc_lock>
 8009acc:	4a1d      	ldr	r2, [pc, #116]	@ (8009b44 <_free_r+0x90>)
 8009ace:	6813      	ldr	r3, [r2, #0]
 8009ad0:	b933      	cbnz	r3, 8009ae0 <_free_r+0x2c>
 8009ad2:	6063      	str	r3, [r4, #4]
 8009ad4:	6014      	str	r4, [r2, #0]
 8009ad6:	4628      	mov	r0, r5
 8009ad8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009adc:	f7ff bf80 	b.w	80099e0 <__malloc_unlock>
 8009ae0:	42a3      	cmp	r3, r4
 8009ae2:	d908      	bls.n	8009af6 <_free_r+0x42>
 8009ae4:	6820      	ldr	r0, [r4, #0]
 8009ae6:	1821      	adds	r1, r4, r0
 8009ae8:	428b      	cmp	r3, r1
 8009aea:	bf01      	itttt	eq
 8009aec:	6819      	ldreq	r1, [r3, #0]
 8009aee:	685b      	ldreq	r3, [r3, #4]
 8009af0:	1809      	addeq	r1, r1, r0
 8009af2:	6021      	streq	r1, [r4, #0]
 8009af4:	e7ed      	b.n	8009ad2 <_free_r+0x1e>
 8009af6:	461a      	mov	r2, r3
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	b10b      	cbz	r3, 8009b00 <_free_r+0x4c>
 8009afc:	42a3      	cmp	r3, r4
 8009afe:	d9fa      	bls.n	8009af6 <_free_r+0x42>
 8009b00:	6811      	ldr	r1, [r2, #0]
 8009b02:	1850      	adds	r0, r2, r1
 8009b04:	42a0      	cmp	r0, r4
 8009b06:	d10b      	bne.n	8009b20 <_free_r+0x6c>
 8009b08:	6820      	ldr	r0, [r4, #0]
 8009b0a:	4401      	add	r1, r0
 8009b0c:	1850      	adds	r0, r2, r1
 8009b0e:	4283      	cmp	r3, r0
 8009b10:	6011      	str	r1, [r2, #0]
 8009b12:	d1e0      	bne.n	8009ad6 <_free_r+0x22>
 8009b14:	6818      	ldr	r0, [r3, #0]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	6053      	str	r3, [r2, #4]
 8009b1a:	4408      	add	r0, r1
 8009b1c:	6010      	str	r0, [r2, #0]
 8009b1e:	e7da      	b.n	8009ad6 <_free_r+0x22>
 8009b20:	d902      	bls.n	8009b28 <_free_r+0x74>
 8009b22:	230c      	movs	r3, #12
 8009b24:	602b      	str	r3, [r5, #0]
 8009b26:	e7d6      	b.n	8009ad6 <_free_r+0x22>
 8009b28:	6820      	ldr	r0, [r4, #0]
 8009b2a:	1821      	adds	r1, r4, r0
 8009b2c:	428b      	cmp	r3, r1
 8009b2e:	bf04      	itt	eq
 8009b30:	6819      	ldreq	r1, [r3, #0]
 8009b32:	685b      	ldreq	r3, [r3, #4]
 8009b34:	6063      	str	r3, [r4, #4]
 8009b36:	bf04      	itt	eq
 8009b38:	1809      	addeq	r1, r1, r0
 8009b3a:	6021      	streq	r1, [r4, #0]
 8009b3c:	6054      	str	r4, [r2, #4]
 8009b3e:	e7ca      	b.n	8009ad6 <_free_r+0x22>
 8009b40:	bd38      	pop	{r3, r4, r5, pc}
 8009b42:	bf00      	nop
 8009b44:	20000bf0 	.word	0x20000bf0

08009b48 <__ssputs_r>:
 8009b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b4c:	688e      	ldr	r6, [r1, #8]
 8009b4e:	461f      	mov	r7, r3
 8009b50:	42be      	cmp	r6, r7
 8009b52:	680b      	ldr	r3, [r1, #0]
 8009b54:	4682      	mov	sl, r0
 8009b56:	460c      	mov	r4, r1
 8009b58:	4690      	mov	r8, r2
 8009b5a:	d82d      	bhi.n	8009bb8 <__ssputs_r+0x70>
 8009b5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009b60:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009b64:	d026      	beq.n	8009bb4 <__ssputs_r+0x6c>
 8009b66:	6965      	ldr	r5, [r4, #20]
 8009b68:	6909      	ldr	r1, [r1, #16]
 8009b6a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b6e:	eba3 0901 	sub.w	r9, r3, r1
 8009b72:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b76:	1c7b      	adds	r3, r7, #1
 8009b78:	444b      	add	r3, r9
 8009b7a:	106d      	asrs	r5, r5, #1
 8009b7c:	429d      	cmp	r5, r3
 8009b7e:	bf38      	it	cc
 8009b80:	461d      	movcc	r5, r3
 8009b82:	0553      	lsls	r3, r2, #21
 8009b84:	d527      	bpl.n	8009bd6 <__ssputs_r+0x8e>
 8009b86:	4629      	mov	r1, r5
 8009b88:	f7ff fea4 	bl	80098d4 <_malloc_r>
 8009b8c:	4606      	mov	r6, r0
 8009b8e:	b360      	cbz	r0, 8009bea <__ssputs_r+0xa2>
 8009b90:	6921      	ldr	r1, [r4, #16]
 8009b92:	464a      	mov	r2, r9
 8009b94:	f000 fad8 	bl	800a148 <memcpy>
 8009b98:	89a3      	ldrh	r3, [r4, #12]
 8009b9a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009b9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ba2:	81a3      	strh	r3, [r4, #12]
 8009ba4:	6126      	str	r6, [r4, #16]
 8009ba6:	6165      	str	r5, [r4, #20]
 8009ba8:	444e      	add	r6, r9
 8009baa:	eba5 0509 	sub.w	r5, r5, r9
 8009bae:	6026      	str	r6, [r4, #0]
 8009bb0:	60a5      	str	r5, [r4, #8]
 8009bb2:	463e      	mov	r6, r7
 8009bb4:	42be      	cmp	r6, r7
 8009bb6:	d900      	bls.n	8009bba <__ssputs_r+0x72>
 8009bb8:	463e      	mov	r6, r7
 8009bba:	6820      	ldr	r0, [r4, #0]
 8009bbc:	4632      	mov	r2, r6
 8009bbe:	4641      	mov	r1, r8
 8009bc0:	f000 faa8 	bl	800a114 <memmove>
 8009bc4:	68a3      	ldr	r3, [r4, #8]
 8009bc6:	1b9b      	subs	r3, r3, r6
 8009bc8:	60a3      	str	r3, [r4, #8]
 8009bca:	6823      	ldr	r3, [r4, #0]
 8009bcc:	4433      	add	r3, r6
 8009bce:	6023      	str	r3, [r4, #0]
 8009bd0:	2000      	movs	r0, #0
 8009bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bd6:	462a      	mov	r2, r5
 8009bd8:	f000 fac4 	bl	800a164 <_realloc_r>
 8009bdc:	4606      	mov	r6, r0
 8009bde:	2800      	cmp	r0, #0
 8009be0:	d1e0      	bne.n	8009ba4 <__ssputs_r+0x5c>
 8009be2:	6921      	ldr	r1, [r4, #16]
 8009be4:	4650      	mov	r0, sl
 8009be6:	f7ff ff65 	bl	8009ab4 <_free_r>
 8009bea:	230c      	movs	r3, #12
 8009bec:	f8ca 3000 	str.w	r3, [sl]
 8009bf0:	89a3      	ldrh	r3, [r4, #12]
 8009bf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bf6:	81a3      	strh	r3, [r4, #12]
 8009bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bfc:	e7e9      	b.n	8009bd2 <__ssputs_r+0x8a>
	...

08009c00 <_svfiprintf_r>:
 8009c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c04:	4698      	mov	r8, r3
 8009c06:	898b      	ldrh	r3, [r1, #12]
 8009c08:	061b      	lsls	r3, r3, #24
 8009c0a:	b09d      	sub	sp, #116	@ 0x74
 8009c0c:	4607      	mov	r7, r0
 8009c0e:	460d      	mov	r5, r1
 8009c10:	4614      	mov	r4, r2
 8009c12:	d510      	bpl.n	8009c36 <_svfiprintf_r+0x36>
 8009c14:	690b      	ldr	r3, [r1, #16]
 8009c16:	b973      	cbnz	r3, 8009c36 <_svfiprintf_r+0x36>
 8009c18:	2140      	movs	r1, #64	@ 0x40
 8009c1a:	f7ff fe5b 	bl	80098d4 <_malloc_r>
 8009c1e:	6028      	str	r0, [r5, #0]
 8009c20:	6128      	str	r0, [r5, #16]
 8009c22:	b930      	cbnz	r0, 8009c32 <_svfiprintf_r+0x32>
 8009c24:	230c      	movs	r3, #12
 8009c26:	603b      	str	r3, [r7, #0]
 8009c28:	f04f 30ff 	mov.w	r0, #4294967295
 8009c2c:	b01d      	add	sp, #116	@ 0x74
 8009c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c32:	2340      	movs	r3, #64	@ 0x40
 8009c34:	616b      	str	r3, [r5, #20]
 8009c36:	2300      	movs	r3, #0
 8009c38:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c3a:	2320      	movs	r3, #32
 8009c3c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009c40:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c44:	2330      	movs	r3, #48	@ 0x30
 8009c46:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009de4 <_svfiprintf_r+0x1e4>
 8009c4a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009c4e:	f04f 0901 	mov.w	r9, #1
 8009c52:	4623      	mov	r3, r4
 8009c54:	469a      	mov	sl, r3
 8009c56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c5a:	b10a      	cbz	r2, 8009c60 <_svfiprintf_r+0x60>
 8009c5c:	2a25      	cmp	r2, #37	@ 0x25
 8009c5e:	d1f9      	bne.n	8009c54 <_svfiprintf_r+0x54>
 8009c60:	ebba 0b04 	subs.w	fp, sl, r4
 8009c64:	d00b      	beq.n	8009c7e <_svfiprintf_r+0x7e>
 8009c66:	465b      	mov	r3, fp
 8009c68:	4622      	mov	r2, r4
 8009c6a:	4629      	mov	r1, r5
 8009c6c:	4638      	mov	r0, r7
 8009c6e:	f7ff ff6b 	bl	8009b48 <__ssputs_r>
 8009c72:	3001      	adds	r0, #1
 8009c74:	f000 80a7 	beq.w	8009dc6 <_svfiprintf_r+0x1c6>
 8009c78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c7a:	445a      	add	r2, fp
 8009c7c:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c7e:	f89a 3000 	ldrb.w	r3, [sl]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	f000 809f 	beq.w	8009dc6 <_svfiprintf_r+0x1c6>
 8009c88:	2300      	movs	r3, #0
 8009c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8009c8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c92:	f10a 0a01 	add.w	sl, sl, #1
 8009c96:	9304      	str	r3, [sp, #16]
 8009c98:	9307      	str	r3, [sp, #28]
 8009c9a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c9e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009ca0:	4654      	mov	r4, sl
 8009ca2:	2205      	movs	r2, #5
 8009ca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ca8:	484e      	ldr	r0, [pc, #312]	@ (8009de4 <_svfiprintf_r+0x1e4>)
 8009caa:	f7f6 fab1 	bl	8000210 <memchr>
 8009cae:	9a04      	ldr	r2, [sp, #16]
 8009cb0:	b9d8      	cbnz	r0, 8009cea <_svfiprintf_r+0xea>
 8009cb2:	06d0      	lsls	r0, r2, #27
 8009cb4:	bf44      	itt	mi
 8009cb6:	2320      	movmi	r3, #32
 8009cb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009cbc:	0711      	lsls	r1, r2, #28
 8009cbe:	bf44      	itt	mi
 8009cc0:	232b      	movmi	r3, #43	@ 0x2b
 8009cc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009cc6:	f89a 3000 	ldrb.w	r3, [sl]
 8009cca:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ccc:	d015      	beq.n	8009cfa <_svfiprintf_r+0xfa>
 8009cce:	9a07      	ldr	r2, [sp, #28]
 8009cd0:	4654      	mov	r4, sl
 8009cd2:	2000      	movs	r0, #0
 8009cd4:	f04f 0c0a 	mov.w	ip, #10
 8009cd8:	4621      	mov	r1, r4
 8009cda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cde:	3b30      	subs	r3, #48	@ 0x30
 8009ce0:	2b09      	cmp	r3, #9
 8009ce2:	d94b      	bls.n	8009d7c <_svfiprintf_r+0x17c>
 8009ce4:	b1b0      	cbz	r0, 8009d14 <_svfiprintf_r+0x114>
 8009ce6:	9207      	str	r2, [sp, #28]
 8009ce8:	e014      	b.n	8009d14 <_svfiprintf_r+0x114>
 8009cea:	eba0 0308 	sub.w	r3, r0, r8
 8009cee:	fa09 f303 	lsl.w	r3, r9, r3
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	9304      	str	r3, [sp, #16]
 8009cf6:	46a2      	mov	sl, r4
 8009cf8:	e7d2      	b.n	8009ca0 <_svfiprintf_r+0xa0>
 8009cfa:	9b03      	ldr	r3, [sp, #12]
 8009cfc:	1d19      	adds	r1, r3, #4
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	9103      	str	r1, [sp, #12]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	bfbb      	ittet	lt
 8009d06:	425b      	neglt	r3, r3
 8009d08:	f042 0202 	orrlt.w	r2, r2, #2
 8009d0c:	9307      	strge	r3, [sp, #28]
 8009d0e:	9307      	strlt	r3, [sp, #28]
 8009d10:	bfb8      	it	lt
 8009d12:	9204      	strlt	r2, [sp, #16]
 8009d14:	7823      	ldrb	r3, [r4, #0]
 8009d16:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d18:	d10a      	bne.n	8009d30 <_svfiprintf_r+0x130>
 8009d1a:	7863      	ldrb	r3, [r4, #1]
 8009d1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d1e:	d132      	bne.n	8009d86 <_svfiprintf_r+0x186>
 8009d20:	9b03      	ldr	r3, [sp, #12]
 8009d22:	1d1a      	adds	r2, r3, #4
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	9203      	str	r2, [sp, #12]
 8009d28:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009d2c:	3402      	adds	r4, #2
 8009d2e:	9305      	str	r3, [sp, #20]
 8009d30:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009df4 <_svfiprintf_r+0x1f4>
 8009d34:	7821      	ldrb	r1, [r4, #0]
 8009d36:	2203      	movs	r2, #3
 8009d38:	4650      	mov	r0, sl
 8009d3a:	f7f6 fa69 	bl	8000210 <memchr>
 8009d3e:	b138      	cbz	r0, 8009d50 <_svfiprintf_r+0x150>
 8009d40:	9b04      	ldr	r3, [sp, #16]
 8009d42:	eba0 000a 	sub.w	r0, r0, sl
 8009d46:	2240      	movs	r2, #64	@ 0x40
 8009d48:	4082      	lsls	r2, r0
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	3401      	adds	r4, #1
 8009d4e:	9304      	str	r3, [sp, #16]
 8009d50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d54:	4824      	ldr	r0, [pc, #144]	@ (8009de8 <_svfiprintf_r+0x1e8>)
 8009d56:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009d5a:	2206      	movs	r2, #6
 8009d5c:	f7f6 fa58 	bl	8000210 <memchr>
 8009d60:	2800      	cmp	r0, #0
 8009d62:	d036      	beq.n	8009dd2 <_svfiprintf_r+0x1d2>
 8009d64:	4b21      	ldr	r3, [pc, #132]	@ (8009dec <_svfiprintf_r+0x1ec>)
 8009d66:	bb1b      	cbnz	r3, 8009db0 <_svfiprintf_r+0x1b0>
 8009d68:	9b03      	ldr	r3, [sp, #12]
 8009d6a:	3307      	adds	r3, #7
 8009d6c:	f023 0307 	bic.w	r3, r3, #7
 8009d70:	3308      	adds	r3, #8
 8009d72:	9303      	str	r3, [sp, #12]
 8009d74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d76:	4433      	add	r3, r6
 8009d78:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d7a:	e76a      	b.n	8009c52 <_svfiprintf_r+0x52>
 8009d7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d80:	460c      	mov	r4, r1
 8009d82:	2001      	movs	r0, #1
 8009d84:	e7a8      	b.n	8009cd8 <_svfiprintf_r+0xd8>
 8009d86:	2300      	movs	r3, #0
 8009d88:	3401      	adds	r4, #1
 8009d8a:	9305      	str	r3, [sp, #20]
 8009d8c:	4619      	mov	r1, r3
 8009d8e:	f04f 0c0a 	mov.w	ip, #10
 8009d92:	4620      	mov	r0, r4
 8009d94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d98:	3a30      	subs	r2, #48	@ 0x30
 8009d9a:	2a09      	cmp	r2, #9
 8009d9c:	d903      	bls.n	8009da6 <_svfiprintf_r+0x1a6>
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d0c6      	beq.n	8009d30 <_svfiprintf_r+0x130>
 8009da2:	9105      	str	r1, [sp, #20]
 8009da4:	e7c4      	b.n	8009d30 <_svfiprintf_r+0x130>
 8009da6:	fb0c 2101 	mla	r1, ip, r1, r2
 8009daa:	4604      	mov	r4, r0
 8009dac:	2301      	movs	r3, #1
 8009dae:	e7f0      	b.n	8009d92 <_svfiprintf_r+0x192>
 8009db0:	ab03      	add	r3, sp, #12
 8009db2:	9300      	str	r3, [sp, #0]
 8009db4:	462a      	mov	r2, r5
 8009db6:	4b0e      	ldr	r3, [pc, #56]	@ (8009df0 <_svfiprintf_r+0x1f0>)
 8009db8:	a904      	add	r1, sp, #16
 8009dba:	4638      	mov	r0, r7
 8009dbc:	f3af 8000 	nop.w
 8009dc0:	1c42      	adds	r2, r0, #1
 8009dc2:	4606      	mov	r6, r0
 8009dc4:	d1d6      	bne.n	8009d74 <_svfiprintf_r+0x174>
 8009dc6:	89ab      	ldrh	r3, [r5, #12]
 8009dc8:	065b      	lsls	r3, r3, #25
 8009dca:	f53f af2d 	bmi.w	8009c28 <_svfiprintf_r+0x28>
 8009dce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009dd0:	e72c      	b.n	8009c2c <_svfiprintf_r+0x2c>
 8009dd2:	ab03      	add	r3, sp, #12
 8009dd4:	9300      	str	r3, [sp, #0]
 8009dd6:	462a      	mov	r2, r5
 8009dd8:	4b05      	ldr	r3, [pc, #20]	@ (8009df0 <_svfiprintf_r+0x1f0>)
 8009dda:	a904      	add	r1, sp, #16
 8009ddc:	4638      	mov	r0, r7
 8009dde:	f000 f879 	bl	8009ed4 <_printf_i>
 8009de2:	e7ed      	b.n	8009dc0 <_svfiprintf_r+0x1c0>
 8009de4:	0800be4a 	.word	0x0800be4a
 8009de8:	0800be54 	.word	0x0800be54
 8009dec:	00000000 	.word	0x00000000
 8009df0:	08009b49 	.word	0x08009b49
 8009df4:	0800be50 	.word	0x0800be50

08009df8 <_printf_common>:
 8009df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dfc:	4616      	mov	r6, r2
 8009dfe:	4698      	mov	r8, r3
 8009e00:	688a      	ldr	r2, [r1, #8]
 8009e02:	690b      	ldr	r3, [r1, #16]
 8009e04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	bfb8      	it	lt
 8009e0c:	4613      	movlt	r3, r2
 8009e0e:	6033      	str	r3, [r6, #0]
 8009e10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009e14:	4607      	mov	r7, r0
 8009e16:	460c      	mov	r4, r1
 8009e18:	b10a      	cbz	r2, 8009e1e <_printf_common+0x26>
 8009e1a:	3301      	adds	r3, #1
 8009e1c:	6033      	str	r3, [r6, #0]
 8009e1e:	6823      	ldr	r3, [r4, #0]
 8009e20:	0699      	lsls	r1, r3, #26
 8009e22:	bf42      	ittt	mi
 8009e24:	6833      	ldrmi	r3, [r6, #0]
 8009e26:	3302      	addmi	r3, #2
 8009e28:	6033      	strmi	r3, [r6, #0]
 8009e2a:	6825      	ldr	r5, [r4, #0]
 8009e2c:	f015 0506 	ands.w	r5, r5, #6
 8009e30:	d106      	bne.n	8009e40 <_printf_common+0x48>
 8009e32:	f104 0a19 	add.w	sl, r4, #25
 8009e36:	68e3      	ldr	r3, [r4, #12]
 8009e38:	6832      	ldr	r2, [r6, #0]
 8009e3a:	1a9b      	subs	r3, r3, r2
 8009e3c:	42ab      	cmp	r3, r5
 8009e3e:	dc26      	bgt.n	8009e8e <_printf_common+0x96>
 8009e40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009e44:	6822      	ldr	r2, [r4, #0]
 8009e46:	3b00      	subs	r3, #0
 8009e48:	bf18      	it	ne
 8009e4a:	2301      	movne	r3, #1
 8009e4c:	0692      	lsls	r2, r2, #26
 8009e4e:	d42b      	bmi.n	8009ea8 <_printf_common+0xb0>
 8009e50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009e54:	4641      	mov	r1, r8
 8009e56:	4638      	mov	r0, r7
 8009e58:	47c8      	blx	r9
 8009e5a:	3001      	adds	r0, #1
 8009e5c:	d01e      	beq.n	8009e9c <_printf_common+0xa4>
 8009e5e:	6823      	ldr	r3, [r4, #0]
 8009e60:	6922      	ldr	r2, [r4, #16]
 8009e62:	f003 0306 	and.w	r3, r3, #6
 8009e66:	2b04      	cmp	r3, #4
 8009e68:	bf02      	ittt	eq
 8009e6a:	68e5      	ldreq	r5, [r4, #12]
 8009e6c:	6833      	ldreq	r3, [r6, #0]
 8009e6e:	1aed      	subeq	r5, r5, r3
 8009e70:	68a3      	ldr	r3, [r4, #8]
 8009e72:	bf0c      	ite	eq
 8009e74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e78:	2500      	movne	r5, #0
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	bfc4      	itt	gt
 8009e7e:	1a9b      	subgt	r3, r3, r2
 8009e80:	18ed      	addgt	r5, r5, r3
 8009e82:	2600      	movs	r6, #0
 8009e84:	341a      	adds	r4, #26
 8009e86:	42b5      	cmp	r5, r6
 8009e88:	d11a      	bne.n	8009ec0 <_printf_common+0xc8>
 8009e8a:	2000      	movs	r0, #0
 8009e8c:	e008      	b.n	8009ea0 <_printf_common+0xa8>
 8009e8e:	2301      	movs	r3, #1
 8009e90:	4652      	mov	r2, sl
 8009e92:	4641      	mov	r1, r8
 8009e94:	4638      	mov	r0, r7
 8009e96:	47c8      	blx	r9
 8009e98:	3001      	adds	r0, #1
 8009e9a:	d103      	bne.n	8009ea4 <_printf_common+0xac>
 8009e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ea4:	3501      	adds	r5, #1
 8009ea6:	e7c6      	b.n	8009e36 <_printf_common+0x3e>
 8009ea8:	18e1      	adds	r1, r4, r3
 8009eaa:	1c5a      	adds	r2, r3, #1
 8009eac:	2030      	movs	r0, #48	@ 0x30
 8009eae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009eb2:	4422      	add	r2, r4
 8009eb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009eb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009ebc:	3302      	adds	r3, #2
 8009ebe:	e7c7      	b.n	8009e50 <_printf_common+0x58>
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	4622      	mov	r2, r4
 8009ec4:	4641      	mov	r1, r8
 8009ec6:	4638      	mov	r0, r7
 8009ec8:	47c8      	blx	r9
 8009eca:	3001      	adds	r0, #1
 8009ecc:	d0e6      	beq.n	8009e9c <_printf_common+0xa4>
 8009ece:	3601      	adds	r6, #1
 8009ed0:	e7d9      	b.n	8009e86 <_printf_common+0x8e>
	...

08009ed4 <_printf_i>:
 8009ed4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ed8:	7e0f      	ldrb	r7, [r1, #24]
 8009eda:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009edc:	2f78      	cmp	r7, #120	@ 0x78
 8009ede:	4691      	mov	r9, r2
 8009ee0:	4680      	mov	r8, r0
 8009ee2:	460c      	mov	r4, r1
 8009ee4:	469a      	mov	sl, r3
 8009ee6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009eea:	d807      	bhi.n	8009efc <_printf_i+0x28>
 8009eec:	2f62      	cmp	r7, #98	@ 0x62
 8009eee:	d80a      	bhi.n	8009f06 <_printf_i+0x32>
 8009ef0:	2f00      	cmp	r7, #0
 8009ef2:	f000 80d2 	beq.w	800a09a <_printf_i+0x1c6>
 8009ef6:	2f58      	cmp	r7, #88	@ 0x58
 8009ef8:	f000 80b9 	beq.w	800a06e <_printf_i+0x19a>
 8009efc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009f04:	e03a      	b.n	8009f7c <_printf_i+0xa8>
 8009f06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009f0a:	2b15      	cmp	r3, #21
 8009f0c:	d8f6      	bhi.n	8009efc <_printf_i+0x28>
 8009f0e:	a101      	add	r1, pc, #4	@ (adr r1, 8009f14 <_printf_i+0x40>)
 8009f10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009f14:	08009f6d 	.word	0x08009f6d
 8009f18:	08009f81 	.word	0x08009f81
 8009f1c:	08009efd 	.word	0x08009efd
 8009f20:	08009efd 	.word	0x08009efd
 8009f24:	08009efd 	.word	0x08009efd
 8009f28:	08009efd 	.word	0x08009efd
 8009f2c:	08009f81 	.word	0x08009f81
 8009f30:	08009efd 	.word	0x08009efd
 8009f34:	08009efd 	.word	0x08009efd
 8009f38:	08009efd 	.word	0x08009efd
 8009f3c:	08009efd 	.word	0x08009efd
 8009f40:	0800a081 	.word	0x0800a081
 8009f44:	08009fab 	.word	0x08009fab
 8009f48:	0800a03b 	.word	0x0800a03b
 8009f4c:	08009efd 	.word	0x08009efd
 8009f50:	08009efd 	.word	0x08009efd
 8009f54:	0800a0a3 	.word	0x0800a0a3
 8009f58:	08009efd 	.word	0x08009efd
 8009f5c:	08009fab 	.word	0x08009fab
 8009f60:	08009efd 	.word	0x08009efd
 8009f64:	08009efd 	.word	0x08009efd
 8009f68:	0800a043 	.word	0x0800a043
 8009f6c:	6833      	ldr	r3, [r6, #0]
 8009f6e:	1d1a      	adds	r2, r3, #4
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	6032      	str	r2, [r6, #0]
 8009f74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	e09d      	b.n	800a0bc <_printf_i+0x1e8>
 8009f80:	6833      	ldr	r3, [r6, #0]
 8009f82:	6820      	ldr	r0, [r4, #0]
 8009f84:	1d19      	adds	r1, r3, #4
 8009f86:	6031      	str	r1, [r6, #0]
 8009f88:	0606      	lsls	r6, r0, #24
 8009f8a:	d501      	bpl.n	8009f90 <_printf_i+0xbc>
 8009f8c:	681d      	ldr	r5, [r3, #0]
 8009f8e:	e003      	b.n	8009f98 <_printf_i+0xc4>
 8009f90:	0645      	lsls	r5, r0, #25
 8009f92:	d5fb      	bpl.n	8009f8c <_printf_i+0xb8>
 8009f94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009f98:	2d00      	cmp	r5, #0
 8009f9a:	da03      	bge.n	8009fa4 <_printf_i+0xd0>
 8009f9c:	232d      	movs	r3, #45	@ 0x2d
 8009f9e:	426d      	negs	r5, r5
 8009fa0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009fa4:	4859      	ldr	r0, [pc, #356]	@ (800a10c <_printf_i+0x238>)
 8009fa6:	230a      	movs	r3, #10
 8009fa8:	e011      	b.n	8009fce <_printf_i+0xfa>
 8009faa:	6821      	ldr	r1, [r4, #0]
 8009fac:	6833      	ldr	r3, [r6, #0]
 8009fae:	0608      	lsls	r0, r1, #24
 8009fb0:	f853 5b04 	ldr.w	r5, [r3], #4
 8009fb4:	d402      	bmi.n	8009fbc <_printf_i+0xe8>
 8009fb6:	0649      	lsls	r1, r1, #25
 8009fb8:	bf48      	it	mi
 8009fba:	b2ad      	uxthmi	r5, r5
 8009fbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8009fbe:	4853      	ldr	r0, [pc, #332]	@ (800a10c <_printf_i+0x238>)
 8009fc0:	6033      	str	r3, [r6, #0]
 8009fc2:	bf14      	ite	ne
 8009fc4:	230a      	movne	r3, #10
 8009fc6:	2308      	moveq	r3, #8
 8009fc8:	2100      	movs	r1, #0
 8009fca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009fce:	6866      	ldr	r6, [r4, #4]
 8009fd0:	60a6      	str	r6, [r4, #8]
 8009fd2:	2e00      	cmp	r6, #0
 8009fd4:	bfa2      	ittt	ge
 8009fd6:	6821      	ldrge	r1, [r4, #0]
 8009fd8:	f021 0104 	bicge.w	r1, r1, #4
 8009fdc:	6021      	strge	r1, [r4, #0]
 8009fde:	b90d      	cbnz	r5, 8009fe4 <_printf_i+0x110>
 8009fe0:	2e00      	cmp	r6, #0
 8009fe2:	d04b      	beq.n	800a07c <_printf_i+0x1a8>
 8009fe4:	4616      	mov	r6, r2
 8009fe6:	fbb5 f1f3 	udiv	r1, r5, r3
 8009fea:	fb03 5711 	mls	r7, r3, r1, r5
 8009fee:	5dc7      	ldrb	r7, [r0, r7]
 8009ff0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009ff4:	462f      	mov	r7, r5
 8009ff6:	42bb      	cmp	r3, r7
 8009ff8:	460d      	mov	r5, r1
 8009ffa:	d9f4      	bls.n	8009fe6 <_printf_i+0x112>
 8009ffc:	2b08      	cmp	r3, #8
 8009ffe:	d10b      	bne.n	800a018 <_printf_i+0x144>
 800a000:	6823      	ldr	r3, [r4, #0]
 800a002:	07df      	lsls	r7, r3, #31
 800a004:	d508      	bpl.n	800a018 <_printf_i+0x144>
 800a006:	6923      	ldr	r3, [r4, #16]
 800a008:	6861      	ldr	r1, [r4, #4]
 800a00a:	4299      	cmp	r1, r3
 800a00c:	bfde      	ittt	le
 800a00e:	2330      	movle	r3, #48	@ 0x30
 800a010:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a014:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a018:	1b92      	subs	r2, r2, r6
 800a01a:	6122      	str	r2, [r4, #16]
 800a01c:	f8cd a000 	str.w	sl, [sp]
 800a020:	464b      	mov	r3, r9
 800a022:	aa03      	add	r2, sp, #12
 800a024:	4621      	mov	r1, r4
 800a026:	4640      	mov	r0, r8
 800a028:	f7ff fee6 	bl	8009df8 <_printf_common>
 800a02c:	3001      	adds	r0, #1
 800a02e:	d14a      	bne.n	800a0c6 <_printf_i+0x1f2>
 800a030:	f04f 30ff 	mov.w	r0, #4294967295
 800a034:	b004      	add	sp, #16
 800a036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a03a:	6823      	ldr	r3, [r4, #0]
 800a03c:	f043 0320 	orr.w	r3, r3, #32
 800a040:	6023      	str	r3, [r4, #0]
 800a042:	4833      	ldr	r0, [pc, #204]	@ (800a110 <_printf_i+0x23c>)
 800a044:	2778      	movs	r7, #120	@ 0x78
 800a046:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a04a:	6823      	ldr	r3, [r4, #0]
 800a04c:	6831      	ldr	r1, [r6, #0]
 800a04e:	061f      	lsls	r7, r3, #24
 800a050:	f851 5b04 	ldr.w	r5, [r1], #4
 800a054:	d402      	bmi.n	800a05c <_printf_i+0x188>
 800a056:	065f      	lsls	r7, r3, #25
 800a058:	bf48      	it	mi
 800a05a:	b2ad      	uxthmi	r5, r5
 800a05c:	6031      	str	r1, [r6, #0]
 800a05e:	07d9      	lsls	r1, r3, #31
 800a060:	bf44      	itt	mi
 800a062:	f043 0320 	orrmi.w	r3, r3, #32
 800a066:	6023      	strmi	r3, [r4, #0]
 800a068:	b11d      	cbz	r5, 800a072 <_printf_i+0x19e>
 800a06a:	2310      	movs	r3, #16
 800a06c:	e7ac      	b.n	8009fc8 <_printf_i+0xf4>
 800a06e:	4827      	ldr	r0, [pc, #156]	@ (800a10c <_printf_i+0x238>)
 800a070:	e7e9      	b.n	800a046 <_printf_i+0x172>
 800a072:	6823      	ldr	r3, [r4, #0]
 800a074:	f023 0320 	bic.w	r3, r3, #32
 800a078:	6023      	str	r3, [r4, #0]
 800a07a:	e7f6      	b.n	800a06a <_printf_i+0x196>
 800a07c:	4616      	mov	r6, r2
 800a07e:	e7bd      	b.n	8009ffc <_printf_i+0x128>
 800a080:	6833      	ldr	r3, [r6, #0]
 800a082:	6825      	ldr	r5, [r4, #0]
 800a084:	6961      	ldr	r1, [r4, #20]
 800a086:	1d18      	adds	r0, r3, #4
 800a088:	6030      	str	r0, [r6, #0]
 800a08a:	062e      	lsls	r6, r5, #24
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	d501      	bpl.n	800a094 <_printf_i+0x1c0>
 800a090:	6019      	str	r1, [r3, #0]
 800a092:	e002      	b.n	800a09a <_printf_i+0x1c6>
 800a094:	0668      	lsls	r0, r5, #25
 800a096:	d5fb      	bpl.n	800a090 <_printf_i+0x1bc>
 800a098:	8019      	strh	r1, [r3, #0]
 800a09a:	2300      	movs	r3, #0
 800a09c:	6123      	str	r3, [r4, #16]
 800a09e:	4616      	mov	r6, r2
 800a0a0:	e7bc      	b.n	800a01c <_printf_i+0x148>
 800a0a2:	6833      	ldr	r3, [r6, #0]
 800a0a4:	1d1a      	adds	r2, r3, #4
 800a0a6:	6032      	str	r2, [r6, #0]
 800a0a8:	681e      	ldr	r6, [r3, #0]
 800a0aa:	6862      	ldr	r2, [r4, #4]
 800a0ac:	2100      	movs	r1, #0
 800a0ae:	4630      	mov	r0, r6
 800a0b0:	f7f6 f8ae 	bl	8000210 <memchr>
 800a0b4:	b108      	cbz	r0, 800a0ba <_printf_i+0x1e6>
 800a0b6:	1b80      	subs	r0, r0, r6
 800a0b8:	6060      	str	r0, [r4, #4]
 800a0ba:	6863      	ldr	r3, [r4, #4]
 800a0bc:	6123      	str	r3, [r4, #16]
 800a0be:	2300      	movs	r3, #0
 800a0c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0c4:	e7aa      	b.n	800a01c <_printf_i+0x148>
 800a0c6:	6923      	ldr	r3, [r4, #16]
 800a0c8:	4632      	mov	r2, r6
 800a0ca:	4649      	mov	r1, r9
 800a0cc:	4640      	mov	r0, r8
 800a0ce:	47d0      	blx	sl
 800a0d0:	3001      	adds	r0, #1
 800a0d2:	d0ad      	beq.n	800a030 <_printf_i+0x15c>
 800a0d4:	6823      	ldr	r3, [r4, #0]
 800a0d6:	079b      	lsls	r3, r3, #30
 800a0d8:	d413      	bmi.n	800a102 <_printf_i+0x22e>
 800a0da:	68e0      	ldr	r0, [r4, #12]
 800a0dc:	9b03      	ldr	r3, [sp, #12]
 800a0de:	4298      	cmp	r0, r3
 800a0e0:	bfb8      	it	lt
 800a0e2:	4618      	movlt	r0, r3
 800a0e4:	e7a6      	b.n	800a034 <_printf_i+0x160>
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	4632      	mov	r2, r6
 800a0ea:	4649      	mov	r1, r9
 800a0ec:	4640      	mov	r0, r8
 800a0ee:	47d0      	blx	sl
 800a0f0:	3001      	adds	r0, #1
 800a0f2:	d09d      	beq.n	800a030 <_printf_i+0x15c>
 800a0f4:	3501      	adds	r5, #1
 800a0f6:	68e3      	ldr	r3, [r4, #12]
 800a0f8:	9903      	ldr	r1, [sp, #12]
 800a0fa:	1a5b      	subs	r3, r3, r1
 800a0fc:	42ab      	cmp	r3, r5
 800a0fe:	dcf2      	bgt.n	800a0e6 <_printf_i+0x212>
 800a100:	e7eb      	b.n	800a0da <_printf_i+0x206>
 800a102:	2500      	movs	r5, #0
 800a104:	f104 0619 	add.w	r6, r4, #25
 800a108:	e7f5      	b.n	800a0f6 <_printf_i+0x222>
 800a10a:	bf00      	nop
 800a10c:	0800be5b 	.word	0x0800be5b
 800a110:	0800be6c 	.word	0x0800be6c

0800a114 <memmove>:
 800a114:	4288      	cmp	r0, r1
 800a116:	b510      	push	{r4, lr}
 800a118:	eb01 0402 	add.w	r4, r1, r2
 800a11c:	d902      	bls.n	800a124 <memmove+0x10>
 800a11e:	4284      	cmp	r4, r0
 800a120:	4623      	mov	r3, r4
 800a122:	d807      	bhi.n	800a134 <memmove+0x20>
 800a124:	1e43      	subs	r3, r0, #1
 800a126:	42a1      	cmp	r1, r4
 800a128:	d008      	beq.n	800a13c <memmove+0x28>
 800a12a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a12e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a132:	e7f8      	b.n	800a126 <memmove+0x12>
 800a134:	4402      	add	r2, r0
 800a136:	4601      	mov	r1, r0
 800a138:	428a      	cmp	r2, r1
 800a13a:	d100      	bne.n	800a13e <memmove+0x2a>
 800a13c:	bd10      	pop	{r4, pc}
 800a13e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a142:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a146:	e7f7      	b.n	800a138 <memmove+0x24>

0800a148 <memcpy>:
 800a148:	440a      	add	r2, r1
 800a14a:	4291      	cmp	r1, r2
 800a14c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a150:	d100      	bne.n	800a154 <memcpy+0xc>
 800a152:	4770      	bx	lr
 800a154:	b510      	push	{r4, lr}
 800a156:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a15a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a15e:	4291      	cmp	r1, r2
 800a160:	d1f9      	bne.n	800a156 <memcpy+0xe>
 800a162:	bd10      	pop	{r4, pc}

0800a164 <_realloc_r>:
 800a164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a168:	4680      	mov	r8, r0
 800a16a:	4615      	mov	r5, r2
 800a16c:	460c      	mov	r4, r1
 800a16e:	b921      	cbnz	r1, 800a17a <_realloc_r+0x16>
 800a170:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a174:	4611      	mov	r1, r2
 800a176:	f7ff bbad 	b.w	80098d4 <_malloc_r>
 800a17a:	b92a      	cbnz	r2, 800a188 <_realloc_r+0x24>
 800a17c:	f7ff fc9a 	bl	8009ab4 <_free_r>
 800a180:	2400      	movs	r4, #0
 800a182:	4620      	mov	r0, r4
 800a184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a188:	f000 f81a 	bl	800a1c0 <_malloc_usable_size_r>
 800a18c:	4285      	cmp	r5, r0
 800a18e:	4606      	mov	r6, r0
 800a190:	d802      	bhi.n	800a198 <_realloc_r+0x34>
 800a192:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a196:	d8f4      	bhi.n	800a182 <_realloc_r+0x1e>
 800a198:	4629      	mov	r1, r5
 800a19a:	4640      	mov	r0, r8
 800a19c:	f7ff fb9a 	bl	80098d4 <_malloc_r>
 800a1a0:	4607      	mov	r7, r0
 800a1a2:	2800      	cmp	r0, #0
 800a1a4:	d0ec      	beq.n	800a180 <_realloc_r+0x1c>
 800a1a6:	42b5      	cmp	r5, r6
 800a1a8:	462a      	mov	r2, r5
 800a1aa:	4621      	mov	r1, r4
 800a1ac:	bf28      	it	cs
 800a1ae:	4632      	movcs	r2, r6
 800a1b0:	f7ff ffca 	bl	800a148 <memcpy>
 800a1b4:	4621      	mov	r1, r4
 800a1b6:	4640      	mov	r0, r8
 800a1b8:	f7ff fc7c 	bl	8009ab4 <_free_r>
 800a1bc:	463c      	mov	r4, r7
 800a1be:	e7e0      	b.n	800a182 <_realloc_r+0x1e>

0800a1c0 <_malloc_usable_size_r>:
 800a1c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1c4:	1f18      	subs	r0, r3, #4
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	bfbc      	itt	lt
 800a1ca:	580b      	ldrlt	r3, [r1, r0]
 800a1cc:	18c0      	addlt	r0, r0, r3
 800a1ce:	4770      	bx	lr

0800a1d0 <_init>:
 800a1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1d2:	bf00      	nop
 800a1d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1d6:	bc08      	pop	{r3}
 800a1d8:	469e      	mov	lr, r3
 800a1da:	4770      	bx	lr

0800a1dc <_fini>:
 800a1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1de:	bf00      	nop
 800a1e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1e2:	bc08      	pop	{r3}
 800a1e4:	469e      	mov	lr, r3
 800a1e6:	4770      	bx	lr
