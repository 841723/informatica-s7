/*
 * fatuser.c
 *
 *  Created on: Oct 23, 2024
 *      Author: diego
 */

#include <string.h>
#include <stdio.h>
#include "fatuser.h"
#include "fatfs.h"

FRESULT res; /* FatFs function common result code */
uint32_t byteswritten; /* File write/read counts */
uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
uint8_t rtext[_MAX_SS];/* File read buffer */

void FATFS_Init() {
	if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
	{
		Error_Handler();
	}
}

void FATFS_Run() {

	if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
	{
		Error_Handler();
	}
	else
	{
		//Open file for writing (Create)
		if(f_open(&SDFile, "test1.tmp", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
		{
			Error_Handler();
		}
		else
		{

			//Write to the text file
			res = f_write(&SDFile, wtext, strlen((char *)wtext), (void *)&byteswritten);
			if((byteswritten == 0) || (res != FR_OK))
			{
				Error_Handler();
			}
			else
			{

				f_close(&SDFile);
			}
		}
	}
	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
	FATFS_Scan("/");
}

void FATFS_Scan(char* path, char buffer[8][64]) {
	DIR dir;
	FILINFO fno;
    FRESULT res;
    unsigned int idx = 0;

    res = f_opendir(&dir, path);  // Open directory
    if (res == FR_OK) {
        while (1) {
            res = f_readdir(&dir, &fno);  // Read a directory item
            if (res != FR_OK || fno.fname[0] == 0) {
                break;  // No more items
            }

            if (fno.fattrib & AM_DIR) {
                // If it's a directory, you can optionally recurse into it
            } else {
                // Check if the file is an image
                if (strstr(fno.fname, ".BMP") || strstr(fno.fname, ".JPG")) {
                    // Full file path (assuming 'path' is the current directory)
                    sprintf(buffer[idx], "%s", fno.fname);
                    // Read and display the image
                    // Read_Image_File(buffer);
                }
            }
            idx++;
            idx%=8;
        }
        f_closedir(&dir);  // Close the directory
        return buffer;
    }
}

//void FATFS_List(char* path)  {
//    DIR dir;
//    char string[128];
//
//    if (!strcmp(path, "")) path = "/";
//
//    res = f_opendir(&dir, path);
//
//#ifdef DBG
//    if (res != FR_OK)
//      printf("res = %d f_opendir\n", res);
//#endif
//
//    if (res == FR_OK)
//    {
//      while(1)
//      {
//        FILINFO fno;
//
//        res = f_readdir(&dir, &fno);
//
//#ifdef DBG
//        if (res != FR_OK)
//          printf("res = %d f_readdir\n", res);
//#endif
//
//        if ((res != FR_OK) || (fno.fname[0] == 0))
//          break;
//
//        sprintf(string, "%c%c%c%c %10d %s/%s",
//          ((fno.fattrib & AM_DIR) ? 'D' : '-'),
//          ((fno.fattrib & AM_RDO) ? 'R' : '-'),
//          ((fno.fattrib & AM_SYS) ? 'S' : '-'),
//          ((fno.fattrib & AM_HID) ? 'H' : '-'),
//          (int)fno.fsize, path, fno.fname);
//
//        puts(string);
//      }
//    }
//  }



